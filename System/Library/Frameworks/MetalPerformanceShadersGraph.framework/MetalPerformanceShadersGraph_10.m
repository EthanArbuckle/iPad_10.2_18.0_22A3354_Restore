BOOL mlir::ShapedType::hasStaticShape(mlir::ShapedType *this)
{
  uint64_t *ArgAttrsAttr;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  BOOL v7;

  if (!mlir::CallOpInterface::getArgOperands(this))
    return 0;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr(this);
  if (!v3)
    return 1;
  v4 = 8 * v3 - 8;
  do
  {
    v5 = *ArgAttrsAttr++;
    v6 = v5 != 0x8000000000000000;
    v7 = v5 == 0x8000000000000000 || v4 == 0;
    v4 -= 8;
  }
  while (!v7);
  return v6;
}

_QWORD *llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(_QWORD *a1, _BYTE *a2, _BYTE *a3)
{
  int64_t v6;
  unsigned int v7;

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v6 = a3 - a2;
  if ((unint64_t)(a3 - a2) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 2, v6 >> 3, 8);
    v7 = *((_DWORD *)a1 + 2);
    if (a2 == a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if (a2 != a3)
  {
LABEL_5:
    memcpy((void *)(*a1 + 8 * v7), a2, v6);
    v7 = *((_DWORD *)a1 + 2);
  }
LABEL_6:
  *((_DWORD *)a1 + 2) = v7 + ((unint64_t)v6 >> 3);
  return a1;
}

_QWORD *std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      abort();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionArgMaxOp,mlir::Value &,mlir::Value &,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_argmax", (const unsigned __int8 *)0x14, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"mps.reduction_argmax";
    v19[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mps::ReductionArgMaxOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionArgMaxOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMinOp>::~CanonicalizeReductionAxes(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMinOp>::~CanonicalizeReductionAxes(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionArgMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char matched;
  uint64_t v41;
  uint64_t v42;
  mlir **v43;
  mlir **v44;
  uint64_t *v45;
  uint64_t NegativeAxis;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  size_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t *v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t **v83;
  BOOL v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t PositiveAxis;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  _BOOL4 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  _BYTE *v132;
  uint64_t *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  __int128 v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  BOOL v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t Loc;
  uint64_t IntegerType;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  uint64_t *v242;
  unint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _OWORD *v249;
  __int128 *v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t *v263;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  mlir::GenericProgramPoint *v268;
  mlir::Operation *v269;
  unint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  _BYTE *v279;
  char *v280;
  char *v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  char *v289;
  uint64_t v290;
  __int128 v291;
  char *v292;
  BOOL v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  __int128 v307;
  uint64_t *v308;
  uint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  mlir::GenericProgramPoint *v316;
  uint64_t v317;
  uint64_t v318;
  mlir::Builder *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  uint64_t *v333;
  uint64_t **v334;
  uint64_t *v335;
  size_t v336;
  void *__p;
  unint64_t v338;
  char *v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD v342[2];
  uint64_t *v343;
  uint64_t *v344;
  mlir::GenericProgramPoint *v345;
  unint64_t v346[2];
  uint64_t *v347;
  uint64_t v348;
  _QWORD v349[6];

  v349[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr)
        return 0;
      goto LABEL_6;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 0;
    v317 = a3;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v10 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10)
      goto LABEL_18;
    v11 = *v10;
    v12 = mlir::TypeID::get<mlir::ShapedType>();
    v13 = *(unsigned int *)(v11 + 16);
    if (!(_DWORD)v13)
      goto LABEL_18;
    v14 = *(_QWORD **)(v11 + 8);
    v15 = &v14[2 * v13];
    do
    {
      v16 = v13 >> 1;
      v17 = &v14[2 * (v13 >> 1)];
      v19 = *v17;
      v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12)
        v14 = v18;
      else
        v13 = v16;
    }
    while (v13);
    if (v14 != v15 && *v14 == v12)
      v20 = v14[1];
    else
LABEL_18:
      v20 = 0;
    v342[0] = v10;
    v342[1] = v20;
    v21 = (_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21)
      goto LABEL_28;
    v22 = *v21;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      v38 = v25[1];
      v340 = v21;
      v341 = v38;
      if (!v10)
        return 0;
    }
    else
    {
LABEL_28:
      v340 = v21;
      v341 = 0;
      if (!v10)
        return 0;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v342))
      return 0;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
    if (v32)
    {
      v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33)
          goto LABEL_34;
      }
      return 0;
    }
LABEL_34:
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v331 = *(_QWORD *)(a2 + 72);
      v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      v331 = 0;
      v34 = 0;
    }
    __p = 0;
    v338 = 0;
    v339 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    v318 = a2;
    if (v35)
    {
      if (v35 >> 61)
        goto LABEL_425;
      v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v338 & 0xFFFFFFFFFFFFFFF8];
      v338 = (unint64_t)__p;
      v339 = &v37[v36];
    }
    if (v34 >= 2)
    {
      v39 = *(_QWORD *)(v331 + 56);
      v347 = v349;
      v348 = 0x400000000;
      matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v347);
      if (matched)
      {
        v335 = 0;
        v336 = 0;
        v334 = &v335;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
        if ((_DWORD)v348)
        {
          v42 = v41;
          v43 = (mlir **)v347;
          v44 = (mlir **)&v347[v348];
          do
          {
            NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            v47 = NegativeAxis;
            v48 = v335;
            v49 = &v335;
            v50 = &v335;
            if (v335)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  v51 = v48[4];
                  if (NegativeAxis >= v51)
                    break;
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50)
                    goto LABEL_56;
                }
                if (v51 >= NegativeAxis)
                  break;
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v334)
              {
                v334 = (uint64_t **)*v334;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v335, v45);
              ++v336;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v336)
        {
          if (v336 >> 61)
            goto LABEL_425;
          v76 = v336;
          v77 = operator new(8 * v336);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          v338 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        v338 = (unint64_t)v78;
        v339 = v78;
        v79 = (uint64_t *)v334;
        if (v334 != &v335)
        {
          do
          {
            *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v335);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v334, v335);
      }
      if (v347 != v349)
        free(v347);
      if (!matched)
        goto LABEL_420;
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v338 == __p)
      {
        v347 = *(uint64_t **)(*(_QWORD *)(v318 + 72) + 24);
        v7 = 1;
        mlir::ValueRange::ValueRange(v346, (uint64_t)&v347, 1uLL);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v317 + 24))(v317, v318, v346[0], v346[1]);
        goto LABEL_422;
      }
      v81 = v318;
      if (*(uint64_t *)__p > -5)
      {
        v7 = 1;
        goto LABEL_423;
      }
      v333 = *(uint64_t **)(v331 + 24);
      v319 = (mlir::Builder *)(v317 + 8);
LABEL_113:
      if (__p != (void *)v338)
      {
        v85 = v333;
        v343 = v333;
        v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
        v348 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v338;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        if (v91)
        {
          if (v91 >> 61)
            goto LABEL_425;
          v92 = v89;
          v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v332 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v332 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        v322 = v88;
        if (v95)
        {
          if (v95 >> 61)
            goto LABEL_425;
          v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v325 = &v97[v96];
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            v88 = v322;
LABEL_130:
            v334 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v335 = v102;
            v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v334);
            PositiveAxis = mlir::getPositiveAxis(-1, v88);
            v105 = PositiveAxis;
            v321 = v90;
            v326 = v100;
            if (v94 >= v332)
            {
              v107 = (v332 - v94) >> 2;
              if (v107 <= 1)
                v107 = 1;
              v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v332 - v94) < 0x7FFFFFFFFFFFFFF8)
                v108 = v107;
              if (v108 >> 61)
                goto LABEL_426;
              v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(_QWORD *)v110 = *(_QWORD *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v332 = &v110[v109];
              if (v94)
                operator delete(v94);
              v94 = v110;
              v90 = v321;
            }
            else
            {
              *(_QWORD *)v94 = *(_QWORD *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            v111 = v99 == -2;
            if (v88 < 2)
            {
              v112 = 1;
LABEL_142:
              if (v106 < v332)
              {
                *(_QWORD *)v106 = v112;
                v113 = v106 + 8;
                v114 = v326;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        v209 = *((_QWORD *)v208 - 1);
                        *((_QWORD *)v208 - 1) = *(_QWORD *)v207;
                        *(_QWORD *)v207 = v209;
                        v207 -= 8;
                        v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        v213 = *((_QWORD *)v212 - 1);
                        *((_QWORD *)v212 - 1) = *(_QWORD *)v211;
                        *(_QWORD *)v211 = v213;
                        v211 -= 8;
                        v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  Loc = mlir::Value::getLoc((mlir::Value *)&v343);
                  v334 = (uint64_t **)v333;
                  v345 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  IntegerType = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                  v216 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v345, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216)
                    goto LABEL_302;
                  v218 = *v216;
                  v219 = mlir::TypeID::get<mlir::ShapedType>();
                  v220 = *(unsigned int *)(v218 + 16);
                  if (!(_DWORD)v220)
                    goto LABEL_302;
                  v221 = *(_QWORD **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219)
                      v221 = v225;
                    else
                      v220 = v223;
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219)
                    v227 = v221[1];
                  else
LABEL_302:
                    v227 = 0;
                  v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, Loc, &v344);
                  v333 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, Loc, (uint64_t *)&v334, &v345)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101)
                    operator delete(v101);
                  if (v94)
                    operator delete(v94);
                  v343 = v333;
                  v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
                  v348 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                  if (v229)
                  {
                    if (v229 >> 61)
                      goto LABEL_425;
                    v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  v233 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                  if ((uint64_t)(v338 - (_QWORD)__p) < 1)
                  {
                    v236 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    v237 = *((_QWORD *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        v253 = mlir::Value::getLoc((mlir::Value *)&v343);
                        v334 = (uint64_t **)v343;
                        v345 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        v254 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                        v255 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v345, 1, v254, 0);
                        v256 = v255;
                        if (!v255)
                          goto LABEL_356;
                        v257 = *v255;
                        v258 = mlir::TypeID::get<mlir::ShapedType>();
                        v259 = *(unsigned int *)(v257 + 16);
                        if (!(_DWORD)v259)
                          goto LABEL_356;
                        v260 = *(_QWORD **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258)
                            v260 = v264;
                          else
                            v259 = v262;
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258)
                          v266 = v260[1];
                        else
LABEL_356:
                          v266 = 0;
                        v267 = 1;
                        v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v345 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v253, &v344)- 16);
                        LOBYTE(v344) = 1;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionArgMinOp,mlir::Value &,mlir::Value &,BOOL>((mlir::UnitAttr **)v319, v253, (uint64_t *)&v334, (uint64_t *)&v345, (unsigned __int8 *)&v344);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v333 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234)
                          operator delete(v234);
                        v81 = v318;
                        if ((v267 & 1) == 0)
                          goto LABEL_113;
                        v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p)
                          return v7;
LABEL_423:
                        v338 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0)
                            goto LABEL_367;
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274)
                            operator delete(v274);
                          v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0)
                        goto LABEL_403;
LABEL_367:
                      while (2)
                      {
                        v275 = *((_QWORD *)__p + v236);
                        if (v272 < v273)
                        {
                          *(_QWORD *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          v276 = (v272 - v274) >> 3;
                          v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61)
                            goto LABEL_425;
                          if ((v273 - v274) >> 2 > v277)
                            v277 = (v273 - v274) >> 2;
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8)
                            v278 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v278 = v277;
                          if (v278)
                          {
                            if (v278 >> 61)
                              goto LABEL_426;
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(_QWORD *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v286 = (v282 >> 3) + 1;
                            v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                v284 = *((_QWORD *)v283 - 1);
                                v283 -= 8;
                                *((_QWORD *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274)
                            operator delete(v274);
                          v274 = v280;
                          v272 = v281;
                        }
                        v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              v295 = *((_QWORD *)v294 - 1);
                              *((_QWORD *)v294 - 1) = *(_QWORD *)v292;
                              *(_QWORD *)v292 = v295;
                              v292 -= 8;
                              v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232)
                      break;
                    *(_QWORD *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    v236 = v233 - 1;
                    v231 = v235;
                    v293 = v233-- <= 0;
                    if (v293)
                      goto LABEL_346;
                  }
                  v238 = (v231 - (char *)v234) >> 3;
                  v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61)
                    goto LABEL_425;
                  if ((v232 - (char *)v234) >> 2 > v239)
                    v239 = (v232 - (char *)v234) >> 2;
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8)
                    v240 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v240 = v239;
                  if (v240)
                  {
                    if (v240 >> 61)
                      goto LABEL_426;
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        v247 = (v243 >> 3) + 1;
                        v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (__int128 *)(v231 - 16);
                        v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_331;
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234)
                    operator delete(v234);
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                v192 = v191;
                if (v114 < v325)
                {
                  *(_QWORD *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                v193 = v114 - v101;
                v194 = v101;
                v195 = (v114 - v101) >> 3;
                v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61)
                  goto LABEL_425;
                v197 = v114;
                v198 = v194;
                v199 = v325 - v194;
                v200 = (v325 - v194) >> 2;
                if (v200 > v196)
                  v196 = v200;
                if (v199 >= 0x7FFFFFFFFFFFFFF8)
                  v196 = 0x1FFFFFFFFFFFFFFFLL;
                if (v196)
                {
                  if (v196 >> 61)
                    goto LABEL_426;
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(_QWORD *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    v302 = (v203 >> 3) + 1;
                    v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_280;
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    v206 = *((_QWORD *)v204 - 1);
                    v204 -= 8;
                    *((_QWORD *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205)
                  operator delete(v205);
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              v184 = (v106 - v94) >> 3;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_425;
              if ((v332 - v94) >> 2 > v185)
                v185 = (v332 - v94) >> 2;
              if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                v185 = 0x1FFFFFFFFFFFFFFFLL;
              if (v185)
              {
                if (v185 >> 61)
                  goto LABEL_426;
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v326;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111)
                    goto LABEL_283;
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                v296 = (v188 >> 3) + 1;
                v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v326;
                do
                {
                  v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94)
                    goto LABEL_259;
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v326;
              }
              do
              {
                v190 = *((_QWORD *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            v115 = v99;
            v329 = v103;
            v330 = -v88;
            v116 = -2;
            v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v332;
                  if (v106 < v332)
                  {
                    *(_QWORD *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v332 = v119;
                    v112 = *(_QWORD *)(v329 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      v115 = 0x7FFFFFFFFFFFFFFFLL;
                      v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      v115 = *((_QWORD *)v89 - 2);
                      v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    v103 = v329;
                    goto LABEL_146;
                  }
                  v328 = v115;
                  v124 = (v106 - v94) >> 3;
                  v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61)
                    goto LABEL_425;
                  if ((v332 - v94) >> 2 > v125)
                    v125 = (v332 - v94) >> 2;
                  if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                    v126 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v126 = v125;
                  v323 = v89;
                  if (v126)
                  {
                    if (v126 >> 61)
                      goto LABEL_426;
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v321;
                      v88 = v322;
                    }
                    else
                    {
                      v163 = (v134 >> 3) + 1;
                      v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      v88 = v322;
                      do
                      {
                        v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v321;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94)
                          goto LABEL_182;
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      v136 = *((_QWORD *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v321;
                  v88 = v322;
                  v119 = &v127[8 * v126];
                  if (v94)
LABEL_182:
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v323;
                  v115 = v328;
                  goto LABEL_184;
                }
                v117 = v115;
                v118 = mlir::getPositiveAxis(v116, v88);
                v115 = v117;
                v111 = 0;
                v112 *= *(_QWORD *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  v115 = 0x7FFFFFFFFFFFFFFFLL;
                  v111 = 1;
                  v89 = v90;
                }
                else
                {
                  v115 = *((_QWORD *)v89 - 2);
                  v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v332;
              v327 = v115;
              if (v106 >= v332)
                break;
              *(_QWORD *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v326;
LABEL_196:
              v112 = *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              v144 = v142;
              v332 = v121;
              if (v123 >= (uint64_t *)v325)
              {
                v320 = v143;
                v145 = v101;
                v146 = (char *)v123 - v101;
                v147 = v146 >> 3;
                v148 = (v146 >> 3) + 1;
                if (v148 >> 61)
                  goto LABEL_425;
                v149 = v123;
                v150 = (uint64_t *)v145;
                v151 = v325 - v145;
                v152 = (v325 - v145) >> 2;
                if (v152 > v148)
                  v148 = v152;
                if (v151 >= 0x7FFFFFFFFFFFFFF8)
                  v153 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v153 = v148;
                v324 = v89;
                if (v153)
                {
                  if (v153 >> 61)
                    goto LABEL_426;
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(_QWORD *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v321;
                  v88 = v322;
                  v103 = v329;
                  goto LABEL_218;
                }
                v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v321;
                if (v157 < 0x168
                  || (v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  v88 = v322;
                  v103 = v329;
                }
                else
                {
                  v177 = (v157 >> 3) + 1;
                  v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  v88 = v322;
                  v103 = v329;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v325 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      v111 = 0;
                      v101 = v155;
                      v326 = v161;
                    }
                    else
                    {
                      v111 = 0;
                      v101 = v155;
                      v326 = v156;
                    }
                    v106 = v320;
                    v89 = v324;
                    v115 = v327;
                    goto LABEL_146;
                  }
                }
                do
                {
                  v159 = *--v158;
                  *((_QWORD *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              v111 = 0;
              *v123 = v142;
              v326 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v321;
              v115 = v327;
LABEL_146:
              v293 = v116-- <= v330;
              if (v293)
                goto LABEL_142;
            }
            v128 = (v106 - v94) >> 3;
            v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61)
              goto LABEL_425;
            if ((v332 - v94) >> 2 > v129)
              v129 = (v332 - v94) >> 2;
            if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v129;
            if (v130)
            {
              if (v130 >> 61)
                goto LABEL_426;
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94)
                goto LABEL_195;
              goto LABEL_194;
            }
            v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              v170 = (v139 >> 3) + 1;
              v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              v88 = v322;
              do
              {
                v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v326;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  v103 = v329;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              v141 = *((_QWORD *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          v88 = v322;
        }
        else
        {
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v325 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v325 = v97 + 8;
        }
        *(_QWORD *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          v99 = *((_QWORD *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v347 = v308;
      v309 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
      v334 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v347, 1, v309, 0);
      v310 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v347, v310, (_BYTE *)(v311 + 8 * v312));
      v313 = *(_QWORD *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v334);
      v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v347, 8 * v348, 8, 1, 1);
      v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v313, &v344);
      v316 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, *(_QWORD *)(v81 + 24), (uint64_t *)&v333, &v345);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v317 + 32))(v317, v81, v316);
      if (v347 != v349)
        free(v347);
LABEL_420:
      v7 = 1;
      goto LABEL_422;
    }
    v54 = v53;
    v55 = (char *)v338;
    while (1)
    {
      v57 = -v54;
      if (v55 >= v339)
        break;
      *(_QWORD *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      v338 = (unint64_t)v56;
      v55 = v56;
      if (!(_DWORD)--v54)
        goto LABEL_100;
    }
    v58 = (char *)__p;
    v59 = v55 - (_BYTE *)__p;
    v60 = (v55 - (_BYTE *)__p) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_425;
    v62 = v339 - (_BYTE *)__p;
    if ((v339 - (_BYTE *)__p) >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 61)
LABEL_426:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(_QWORD *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58)
      goto LABEL_77;
    v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        v70 = (v66 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_76;
LABEL_77:
        __p = v65;
        v339 = &v64[8 * v63];
        if (v58)
          operator delete(v58);
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      v68 = *((_QWORD *)v67 - 1);
      v67 -= 8;
      *((_QWORD *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionArgMinOp,mlir::Value &,mlir::Value &,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_argmin", (const unsigned __int8 *)0x14, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"mps.reduction_argmin";
    v19[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mps::ReductionArgMinOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionArgMinOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMaxOp>::~CanonicalizeReductionAxes(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMaxOp>::~CanonicalizeReductionAxes(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMaxOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char matched;
  uint64_t v41;
  uint64_t v42;
  mlir **v43;
  mlir **v44;
  uint64_t *v45;
  uint64_t NegativeAxis;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  size_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t *v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t **v83;
  BOOL v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t PositiveAxis;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  _BOOL4 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  _BYTE *v132;
  uint64_t *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  __int128 v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  BOOL v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t Loc;
  uint64_t IntegerType;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  uint64_t *v242;
  unint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _OWORD *v249;
  __int128 *v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t *v263;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  mlir::GenericProgramPoint *v268;
  mlir::Operation *v269;
  unint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  _BYTE *v279;
  char *v280;
  char *v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  char *v289;
  uint64_t v290;
  __int128 v291;
  char *v292;
  BOOL v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  __int128 v307;
  uint64_t *v308;
  uint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  mlir::GenericProgramPoint *v316;
  uint64_t v317;
  uint64_t v318;
  mlir::Builder *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  uint64_t *v333;
  uint64_t **v334;
  uint64_t *v335;
  size_t v336;
  void *__p;
  unint64_t v338;
  char *v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD v342[2];
  uint64_t *v343;
  unsigned __int8 v344;
  uint64_t *v345;
  mlir::GenericProgramPoint *v346;
  unint64_t v347[2];
  uint64_t *v348;
  uint64_t v349;
  _QWORD v350[6];

  v350[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr)
        return 0;
      goto LABEL_6;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 0;
    v317 = a3;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v10 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10)
      goto LABEL_18;
    v11 = *v10;
    v12 = mlir::TypeID::get<mlir::ShapedType>();
    v13 = *(unsigned int *)(v11 + 16);
    if (!(_DWORD)v13)
      goto LABEL_18;
    v14 = *(_QWORD **)(v11 + 8);
    v15 = &v14[2 * v13];
    do
    {
      v16 = v13 >> 1;
      v17 = &v14[2 * (v13 >> 1)];
      v19 = *v17;
      v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12)
        v14 = v18;
      else
        v13 = v16;
    }
    while (v13);
    if (v14 != v15 && *v14 == v12)
      v20 = v14[1];
    else
LABEL_18:
      v20 = 0;
    v342[0] = v10;
    v342[1] = v20;
    v21 = (_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21)
      goto LABEL_28;
    v22 = *v21;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      v38 = v25[1];
      v340 = v21;
      v341 = v38;
      if (!v10)
        return 0;
    }
    else
    {
LABEL_28:
      v340 = v21;
      v341 = 0;
      if (!v10)
        return 0;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v342))
      return 0;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
    if (v32)
    {
      v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33)
          goto LABEL_34;
      }
      return 0;
    }
LABEL_34:
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v331 = *(_QWORD *)(a2 + 72);
      v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      v331 = 0;
      v34 = 0;
    }
    __p = 0;
    v338 = 0;
    v339 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    v318 = a2;
    if (v35)
    {
      if (v35 >> 61)
        goto LABEL_425;
      v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v338 & 0xFFFFFFFFFFFFFFF8];
      v338 = (unint64_t)__p;
      v339 = &v37[v36];
    }
    if (v34 >= 2)
    {
      v39 = *(_QWORD *)(v331 + 56);
      v348 = v350;
      v349 = 0x400000000;
      matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v348);
      if (matched)
      {
        v335 = 0;
        v336 = 0;
        v334 = &v335;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
        if ((_DWORD)v349)
        {
          v42 = v41;
          v43 = (mlir **)v348;
          v44 = (mlir **)&v348[v349];
          do
          {
            NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            v47 = NegativeAxis;
            v48 = v335;
            v49 = &v335;
            v50 = &v335;
            if (v335)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  v51 = v48[4];
                  if (NegativeAxis >= v51)
                    break;
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50)
                    goto LABEL_56;
                }
                if (v51 >= NegativeAxis)
                  break;
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v334)
              {
                v334 = (uint64_t **)*v334;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v335, v45);
              ++v336;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v336)
        {
          if (v336 >> 61)
            goto LABEL_425;
          v76 = v336;
          v77 = operator new(8 * v336);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          v338 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        v338 = (unint64_t)v78;
        v339 = v78;
        v79 = (uint64_t *)v334;
        if (v334 != &v335)
        {
          do
          {
            *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v335);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v334, v335);
      }
      if (v348 != v350)
        free(v348);
      if (!matched)
        goto LABEL_420;
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v338 == __p)
      {
        v348 = *(uint64_t **)(*(_QWORD *)(v318 + 72) + 24);
        v7 = 1;
        mlir::ValueRange::ValueRange(v347, (uint64_t)&v348, 1uLL);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v317 + 24))(v317, v318, v347[0], v347[1]);
        goto LABEL_422;
      }
      v81 = v318;
      if (*(uint64_t *)__p > -5)
      {
        v7 = 1;
        goto LABEL_423;
      }
      v333 = *(uint64_t **)(v331 + 24);
      v319 = (mlir::Builder *)(v317 + 8);
LABEL_113:
      if (__p != (void *)v338)
      {
        v85 = v333;
        v343 = v333;
        v348 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
        v349 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
        v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v338;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
        if (v91)
        {
          if (v91 >> 61)
            goto LABEL_425;
          v92 = v89;
          v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v332 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v332 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
        v322 = v88;
        if (v95)
        {
          if (v95 >> 61)
            goto LABEL_425;
          v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v325 = &v97[v96];
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            v88 = v322;
LABEL_130:
            v334 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v335 = v102;
            v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v334);
            PositiveAxis = mlir::getPositiveAxis(-1, v88);
            v105 = PositiveAxis;
            v321 = v90;
            v326 = v100;
            if (v94 >= v332)
            {
              v107 = (v332 - v94) >> 2;
              if (v107 <= 1)
                v107 = 1;
              v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v332 - v94) < 0x7FFFFFFFFFFFFFF8)
                v108 = v107;
              if (v108 >> 61)
                goto LABEL_426;
              v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(_QWORD *)v110 = *(_QWORD *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v332 = &v110[v109];
              if (v94)
                operator delete(v94);
              v94 = v110;
              v90 = v321;
            }
            else
            {
              *(_QWORD *)v94 = *(_QWORD *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            v111 = v99 == -2;
            if (v88 < 2)
            {
              v112 = 1;
LABEL_142:
              if (v106 < v332)
              {
                *(_QWORD *)v106 = v112;
                v113 = v106 + 8;
                v114 = v326;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        v209 = *((_QWORD *)v208 - 1);
                        *((_QWORD *)v208 - 1) = *(_QWORD *)v207;
                        *(_QWORD *)v207 = v209;
                        v207 -= 8;
                        v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        v213 = *((_QWORD *)v212 - 1);
                        *((_QWORD *)v212 - 1) = *(_QWORD *)v211;
                        *(_QWORD *)v211 = v213;
                        v211 -= 8;
                        v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  Loc = mlir::Value::getLoc((mlir::Value *)&v343);
                  v334 = (uint64_t **)v333;
                  v346 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  IntegerType = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                  v216 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v346, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216)
                    goto LABEL_302;
                  v218 = *v216;
                  v219 = mlir::TypeID::get<mlir::ShapedType>();
                  v220 = *(unsigned int *)(v218 + 16);
                  if (!(_DWORD)v220)
                    goto LABEL_302;
                  v221 = *(_QWORD **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219)
                      v221 = v225;
                    else
                      v220 = v223;
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219)
                    v227 = v221[1];
                  else
LABEL_302:
                    v227 = 0;
                  v345 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v346 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, Loc, &v345);
                  v333 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, Loc, (uint64_t *)&v334, &v346)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101)
                    operator delete(v101);
                  if (v94)
                    operator delete(v94);
                  v343 = v333;
                  v348 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
                  v349 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
                  if (v229)
                  {
                    if (v229 >> 61)
                      goto LABEL_425;
                    v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  v233 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                  if ((uint64_t)(v338 - (_QWORD)__p) < 1)
                  {
                    v236 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    v237 = *((_QWORD *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        v253 = mlir::Value::getLoc((mlir::Value *)&v343);
                        v334 = (uint64_t **)v343;
                        v346 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        v254 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                        v255 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v346, 1, v254, 0);
                        v256 = v255;
                        if (!v255)
                          goto LABEL_356;
                        v257 = *v255;
                        v258 = mlir::TypeID::get<mlir::ShapedType>();
                        v259 = *(unsigned int *)(v257 + 16);
                        if (!(_DWORD)v259)
                          goto LABEL_356;
                        v260 = *(_QWORD **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258)
                            v260 = v264;
                          else
                            v259 = v262;
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258)
                          v266 = v260[1];
                        else
LABEL_356:
                          v266 = 0;
                        v267 = 1;
                        v345 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v346 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v253, &v345)- 16);
                        LOBYTE(v345) = 1;
                        v344 = 0;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionMaxOp,mlir::Value &,mlir::Value &,BOOL,BOOL>((mlir::UnitAttr **)v319, v253, (uint64_t *)&v334, (uint64_t *)&v346, (unsigned __int8 *)&v345, &v344);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v333 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234)
                          operator delete(v234);
                        v81 = v318;
                        if ((v267 & 1) == 0)
                          goto LABEL_113;
                        v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p)
                          return v7;
LABEL_423:
                        v338 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0)
                            goto LABEL_367;
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274)
                            operator delete(v274);
                          v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0)
                        goto LABEL_403;
LABEL_367:
                      while (2)
                      {
                        v275 = *((_QWORD *)__p + v236);
                        if (v272 < v273)
                        {
                          *(_QWORD *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          v276 = (v272 - v274) >> 3;
                          v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61)
                            goto LABEL_425;
                          if ((v273 - v274) >> 2 > v277)
                            v277 = (v273 - v274) >> 2;
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8)
                            v278 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v278 = v277;
                          if (v278)
                          {
                            if (v278 >> 61)
                              goto LABEL_426;
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(_QWORD *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v286 = (v282 >> 3) + 1;
                            v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                v284 = *((_QWORD *)v283 - 1);
                                v283 -= 8;
                                *((_QWORD *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274)
                            operator delete(v274);
                          v274 = v280;
                          v272 = v281;
                        }
                        v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              v295 = *((_QWORD *)v294 - 1);
                              *((_QWORD *)v294 - 1) = *(_QWORD *)v292;
                              *(_QWORD *)v292 = v295;
                              v292 -= 8;
                              v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232)
                      break;
                    *(_QWORD *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    v236 = v233 - 1;
                    v231 = v235;
                    v293 = v233-- <= 0;
                    if (v293)
                      goto LABEL_346;
                  }
                  v238 = (v231 - (char *)v234) >> 3;
                  v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61)
                    goto LABEL_425;
                  if ((v232 - (char *)v234) >> 2 > v239)
                    v239 = (v232 - (char *)v234) >> 2;
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8)
                    v240 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v240 = v239;
                  if (v240)
                  {
                    if (v240 >> 61)
                      goto LABEL_426;
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        v247 = (v243 >> 3) + 1;
                        v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (__int128 *)(v231 - 16);
                        v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_331;
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234)
                    operator delete(v234);
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                v192 = v191;
                if (v114 < v325)
                {
                  *(_QWORD *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                v193 = v114 - v101;
                v194 = v101;
                v195 = (v114 - v101) >> 3;
                v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61)
                  goto LABEL_425;
                v197 = v114;
                v198 = v194;
                v199 = v325 - v194;
                v200 = (v325 - v194) >> 2;
                if (v200 > v196)
                  v196 = v200;
                if (v199 >= 0x7FFFFFFFFFFFFFF8)
                  v196 = 0x1FFFFFFFFFFFFFFFLL;
                if (v196)
                {
                  if (v196 >> 61)
                    goto LABEL_426;
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(_QWORD *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    v302 = (v203 >> 3) + 1;
                    v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_280;
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    v206 = *((_QWORD *)v204 - 1);
                    v204 -= 8;
                    *((_QWORD *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205)
                  operator delete(v205);
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              v184 = (v106 - v94) >> 3;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_425;
              if ((v332 - v94) >> 2 > v185)
                v185 = (v332 - v94) >> 2;
              if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                v185 = 0x1FFFFFFFFFFFFFFFLL;
              if (v185)
              {
                if (v185 >> 61)
                  goto LABEL_426;
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v326;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111)
                    goto LABEL_283;
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                v296 = (v188 >> 3) + 1;
                v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v326;
                do
                {
                  v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94)
                    goto LABEL_259;
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v326;
              }
              do
              {
                v190 = *((_QWORD *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            v115 = v99;
            v329 = v103;
            v330 = -v88;
            v116 = -2;
            v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v332;
                  if (v106 < v332)
                  {
                    *(_QWORD *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v332 = v119;
                    v112 = *(_QWORD *)(v329 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      v115 = 0x7FFFFFFFFFFFFFFFLL;
                      v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      v115 = *((_QWORD *)v89 - 2);
                      v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    v103 = v329;
                    goto LABEL_146;
                  }
                  v328 = v115;
                  v124 = (v106 - v94) >> 3;
                  v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61)
                    goto LABEL_425;
                  if ((v332 - v94) >> 2 > v125)
                    v125 = (v332 - v94) >> 2;
                  if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                    v126 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v126 = v125;
                  v323 = v89;
                  if (v126)
                  {
                    if (v126 >> 61)
                      goto LABEL_426;
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v321;
                      v88 = v322;
                    }
                    else
                    {
                      v163 = (v134 >> 3) + 1;
                      v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      v88 = v322;
                      do
                      {
                        v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v321;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94)
                          goto LABEL_182;
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      v136 = *((_QWORD *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v321;
                  v88 = v322;
                  v119 = &v127[8 * v126];
                  if (v94)
LABEL_182:
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v323;
                  v115 = v328;
                  goto LABEL_184;
                }
                v117 = v115;
                v118 = mlir::getPositiveAxis(v116, v88);
                v115 = v117;
                v111 = 0;
                v112 *= *(_QWORD *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  v115 = 0x7FFFFFFFFFFFFFFFLL;
                  v111 = 1;
                  v89 = v90;
                }
                else
                {
                  v115 = *((_QWORD *)v89 - 2);
                  v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v332;
              v327 = v115;
              if (v106 >= v332)
                break;
              *(_QWORD *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v326;
LABEL_196:
              v112 = *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              v144 = v142;
              v332 = v121;
              if (v123 >= (uint64_t *)v325)
              {
                v320 = v143;
                v145 = v101;
                v146 = (char *)v123 - v101;
                v147 = v146 >> 3;
                v148 = (v146 >> 3) + 1;
                if (v148 >> 61)
                  goto LABEL_425;
                v149 = v123;
                v150 = (uint64_t *)v145;
                v151 = v325 - v145;
                v152 = (v325 - v145) >> 2;
                if (v152 > v148)
                  v148 = v152;
                if (v151 >= 0x7FFFFFFFFFFFFFF8)
                  v153 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v153 = v148;
                v324 = v89;
                if (v153)
                {
                  if (v153 >> 61)
                    goto LABEL_426;
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(_QWORD *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v321;
                  v88 = v322;
                  v103 = v329;
                  goto LABEL_218;
                }
                v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v321;
                if (v157 < 0x168
                  || (v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  v88 = v322;
                  v103 = v329;
                }
                else
                {
                  v177 = (v157 >> 3) + 1;
                  v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  v88 = v322;
                  v103 = v329;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v325 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      v111 = 0;
                      v101 = v155;
                      v326 = v161;
                    }
                    else
                    {
                      v111 = 0;
                      v101 = v155;
                      v326 = v156;
                    }
                    v106 = v320;
                    v89 = v324;
                    v115 = v327;
                    goto LABEL_146;
                  }
                }
                do
                {
                  v159 = *--v158;
                  *((_QWORD *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              v111 = 0;
              *v123 = v142;
              v326 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v321;
              v115 = v327;
LABEL_146:
              v293 = v116-- <= v330;
              if (v293)
                goto LABEL_142;
            }
            v128 = (v106 - v94) >> 3;
            v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61)
              goto LABEL_425;
            if ((v332 - v94) >> 2 > v129)
              v129 = (v332 - v94) >> 2;
            if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v129;
            if (v130)
            {
              if (v130 >> 61)
                goto LABEL_426;
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94)
                goto LABEL_195;
              goto LABEL_194;
            }
            v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              v170 = (v139 >> 3) + 1;
              v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              v88 = v322;
              do
              {
                v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v326;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  v103 = v329;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              v141 = *((_QWORD *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          v88 = v322;
        }
        else
        {
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v325 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v325 = v97 + 8;
        }
        *(_QWORD *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          v99 = *((_QWORD *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v348 = v308;
      v309 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
      v334 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v348, 1, v309, 0);
      v310 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v348, v310, (_BYTE *)(v311 + 8 * v312));
      v313 = *(_QWORD *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v334);
      v345 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v348, 8 * v349, 8, 1, 1);
      v346 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v313, &v345);
      v316 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, *(_QWORD *)(v81 + 24), (uint64_t *)&v333, &v346);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v317 + 32))(v317, v81, v316);
      if (v348 != v350)
        free(v348);
LABEL_420:
      v7 = 1;
      goto LABEL_422;
    }
    v54 = v53;
    v55 = (char *)v338;
    while (1)
    {
      v57 = -v54;
      if (v55 >= v339)
        break;
      *(_QWORD *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      v338 = (unint64_t)v56;
      v55 = v56;
      if (!(_DWORD)--v54)
        goto LABEL_100;
    }
    v58 = (char *)__p;
    v59 = v55 - (_BYTE *)__p;
    v60 = (v55 - (_BYTE *)__p) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_425;
    v62 = v339 - (_BYTE *)__p;
    if ((v339 - (_BYTE *)__p) >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 61)
LABEL_426:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(_QWORD *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58)
      goto LABEL_77;
    v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        v70 = (v66 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_76;
LABEL_77:
        __p = v65;
        v339 = &v64[8 * v63];
        if (v58)
          operator delete(v58);
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      v68 = *((_QWORD *)v67 - 1);
      v67 -= 8;
      *((_QWORD *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionMaxOp,mlir::Value &,mlir::Value &,BOOL,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_max", (const unsigned __int8 *)0x11, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"mps.reduction_max";
    v21[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::ReductionMaxOp::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMinOp>::~CanonicalizeReductionAxes(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMinOp>::~CanonicalizeReductionAxes(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionMinOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char matched;
  uint64_t v41;
  uint64_t v42;
  mlir **v43;
  mlir **v44;
  uint64_t *v45;
  uint64_t NegativeAxis;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  size_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t *v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t **v83;
  BOOL v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t PositiveAxis;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  _BOOL4 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  _BYTE *v132;
  uint64_t *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  __int128 v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  BOOL v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t Loc;
  uint64_t IntegerType;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  uint64_t *v242;
  unint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _OWORD *v249;
  __int128 *v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t *v263;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  mlir::GenericProgramPoint *v268;
  mlir::Operation *v269;
  unint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  _BYTE *v279;
  char *v280;
  char *v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  char *v289;
  uint64_t v290;
  __int128 v291;
  char *v292;
  BOOL v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  __int128 v307;
  uint64_t *v308;
  uint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  mlir::GenericProgramPoint *v316;
  uint64_t v317;
  uint64_t v318;
  mlir::Builder *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  uint64_t *v333;
  uint64_t **v334;
  uint64_t *v335;
  size_t v336;
  void *__p;
  unint64_t v338;
  char *v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD v342[2];
  uint64_t *v343;
  unsigned __int8 v344;
  uint64_t *v345;
  mlir::GenericProgramPoint *v346;
  unint64_t v347[2];
  uint64_t *v348;
  uint64_t v349;
  _QWORD v350[6];

  v350[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr)
        return 0;
      goto LABEL_6;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 0;
    v317 = a3;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v10 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10)
      goto LABEL_18;
    v11 = *v10;
    v12 = mlir::TypeID::get<mlir::ShapedType>();
    v13 = *(unsigned int *)(v11 + 16);
    if (!(_DWORD)v13)
      goto LABEL_18;
    v14 = *(_QWORD **)(v11 + 8);
    v15 = &v14[2 * v13];
    do
    {
      v16 = v13 >> 1;
      v17 = &v14[2 * (v13 >> 1)];
      v19 = *v17;
      v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12)
        v14 = v18;
      else
        v13 = v16;
    }
    while (v13);
    if (v14 != v15 && *v14 == v12)
      v20 = v14[1];
    else
LABEL_18:
      v20 = 0;
    v342[0] = v10;
    v342[1] = v20;
    v21 = (_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21)
      goto LABEL_28;
    v22 = *v21;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      v38 = v25[1];
      v340 = v21;
      v341 = v38;
      if (!v10)
        return 0;
    }
    else
    {
LABEL_28:
      v340 = v21;
      v341 = 0;
      if (!v10)
        return 0;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v342))
      return 0;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
    if (v32)
    {
      v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33)
          goto LABEL_34;
      }
      return 0;
    }
LABEL_34:
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v331 = *(_QWORD *)(a2 + 72);
      v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      v331 = 0;
      v34 = 0;
    }
    __p = 0;
    v338 = 0;
    v339 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    v318 = a2;
    if (v35)
    {
      if (v35 >> 61)
        goto LABEL_425;
      v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v338 & 0xFFFFFFFFFFFFFFF8];
      v338 = (unint64_t)__p;
      v339 = &v37[v36];
    }
    if (v34 >= 2)
    {
      v39 = *(_QWORD *)(v331 + 56);
      v348 = v350;
      v349 = 0x400000000;
      matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v348);
      if (matched)
      {
        v335 = 0;
        v336 = 0;
        v334 = &v335;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
        if ((_DWORD)v349)
        {
          v42 = v41;
          v43 = (mlir **)v348;
          v44 = (mlir **)&v348[v349];
          do
          {
            NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            v47 = NegativeAxis;
            v48 = v335;
            v49 = &v335;
            v50 = &v335;
            if (v335)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  v51 = v48[4];
                  if (NegativeAxis >= v51)
                    break;
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50)
                    goto LABEL_56;
                }
                if (v51 >= NegativeAxis)
                  break;
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v334)
              {
                v334 = (uint64_t **)*v334;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v335, v45);
              ++v336;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v336)
        {
          if (v336 >> 61)
            goto LABEL_425;
          v76 = v336;
          v77 = operator new(8 * v336);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          v338 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        v338 = (unint64_t)v78;
        v339 = v78;
        v79 = (uint64_t *)v334;
        if (v334 != &v335)
        {
          do
          {
            *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v335);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v334, v335);
      }
      if (v348 != v350)
        free(v348);
      if (!matched)
        goto LABEL_420;
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v338 == __p)
      {
        v348 = *(uint64_t **)(*(_QWORD *)(v318 + 72) + 24);
        v7 = 1;
        mlir::ValueRange::ValueRange(v347, (uint64_t)&v348, 1uLL);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v317 + 24))(v317, v318, v347[0], v347[1]);
        goto LABEL_422;
      }
      v81 = v318;
      if (*(uint64_t *)__p > -5)
      {
        v7 = 1;
        goto LABEL_423;
      }
      v333 = *(uint64_t **)(v331 + 24);
      v319 = (mlir::Builder *)(v317 + 8);
LABEL_113:
      if (__p != (void *)v338)
      {
        v85 = v333;
        v343 = v333;
        v348 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
        v349 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
        v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v338;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
        if (v91)
        {
          if (v91 >> 61)
            goto LABEL_425;
          v92 = v89;
          v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v332 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v332 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
        v322 = v88;
        if (v95)
        {
          if (v95 >> 61)
            goto LABEL_425;
          v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v325 = &v97[v96];
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            v88 = v322;
LABEL_130:
            v334 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v335 = v102;
            v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v334);
            PositiveAxis = mlir::getPositiveAxis(-1, v88);
            v105 = PositiveAxis;
            v321 = v90;
            v326 = v100;
            if (v94 >= v332)
            {
              v107 = (v332 - v94) >> 2;
              if (v107 <= 1)
                v107 = 1;
              v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v332 - v94) < 0x7FFFFFFFFFFFFFF8)
                v108 = v107;
              if (v108 >> 61)
                goto LABEL_426;
              v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(_QWORD *)v110 = *(_QWORD *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v332 = &v110[v109];
              if (v94)
                operator delete(v94);
              v94 = v110;
              v90 = v321;
            }
            else
            {
              *(_QWORD *)v94 = *(_QWORD *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            v111 = v99 == -2;
            if (v88 < 2)
            {
              v112 = 1;
LABEL_142:
              if (v106 < v332)
              {
                *(_QWORD *)v106 = v112;
                v113 = v106 + 8;
                v114 = v326;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        v209 = *((_QWORD *)v208 - 1);
                        *((_QWORD *)v208 - 1) = *(_QWORD *)v207;
                        *(_QWORD *)v207 = v209;
                        v207 -= 8;
                        v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        v213 = *((_QWORD *)v212 - 1);
                        *((_QWORD *)v212 - 1) = *(_QWORD *)v211;
                        *(_QWORD *)v211 = v213;
                        v211 -= 8;
                        v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  Loc = mlir::Value::getLoc((mlir::Value *)&v343);
                  v334 = (uint64_t **)v333;
                  v346 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  IntegerType = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                  v216 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v346, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216)
                    goto LABEL_302;
                  v218 = *v216;
                  v219 = mlir::TypeID::get<mlir::ShapedType>();
                  v220 = *(unsigned int *)(v218 + 16);
                  if (!(_DWORD)v220)
                    goto LABEL_302;
                  v221 = *(_QWORD **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219)
                      v221 = v225;
                    else
                      v220 = v223;
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219)
                    v227 = v221[1];
                  else
LABEL_302:
                    v227 = 0;
                  v345 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v346 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, Loc, &v345);
                  v333 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, Loc, (uint64_t *)&v334, &v346)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101)
                    operator delete(v101);
                  if (v94)
                    operator delete(v94);
                  v343 = v333;
                  v348 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
                  v349 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
                  if (v229)
                  {
                    if (v229 >> 61)
                      goto LABEL_425;
                    v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  v233 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                  if ((uint64_t)(v338 - (_QWORD)__p) < 1)
                  {
                    v236 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    v237 = *((_QWORD *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        v253 = mlir::Value::getLoc((mlir::Value *)&v343);
                        v334 = (uint64_t **)v343;
                        v346 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        v254 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                        v255 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v346, 1, v254, 0);
                        v256 = v255;
                        if (!v255)
                          goto LABEL_356;
                        v257 = *v255;
                        v258 = mlir::TypeID::get<mlir::ShapedType>();
                        v259 = *(unsigned int *)(v257 + 16);
                        if (!(_DWORD)v259)
                          goto LABEL_356;
                        v260 = *(_QWORD **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258)
                            v260 = v264;
                          else
                            v259 = v262;
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258)
                          v266 = v260[1];
                        else
LABEL_356:
                          v266 = 0;
                        v267 = 1;
                        v345 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v346 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v253, &v345)- 16);
                        LOBYTE(v345) = 1;
                        v344 = 0;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionMinOp,mlir::Value &,mlir::Value &,BOOL,BOOL>((mlir::UnitAttr **)v319, v253, (uint64_t *)&v334, (uint64_t *)&v346, (unsigned __int8 *)&v345, &v344);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v333 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234)
                          operator delete(v234);
                        v81 = v318;
                        if ((v267 & 1) == 0)
                          goto LABEL_113;
                        v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p)
                          return v7;
LABEL_423:
                        v338 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v348);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0)
                            goto LABEL_367;
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274)
                            operator delete(v274);
                          v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0)
                        goto LABEL_403;
LABEL_367:
                      while (2)
                      {
                        v275 = *((_QWORD *)__p + v236);
                        if (v272 < v273)
                        {
                          *(_QWORD *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          v276 = (v272 - v274) >> 3;
                          v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61)
                            goto LABEL_425;
                          if ((v273 - v274) >> 2 > v277)
                            v277 = (v273 - v274) >> 2;
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8)
                            v278 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v278 = v277;
                          if (v278)
                          {
                            if (v278 >> 61)
                              goto LABEL_426;
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(_QWORD *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v286 = (v282 >> 3) + 1;
                            v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                v284 = *((_QWORD *)v283 - 1);
                                v283 -= 8;
                                *((_QWORD *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274)
                            operator delete(v274);
                          v274 = v280;
                          v272 = v281;
                        }
                        v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              v295 = *((_QWORD *)v294 - 1);
                              *((_QWORD *)v294 - 1) = *(_QWORD *)v292;
                              *(_QWORD *)v292 = v295;
                              v292 -= 8;
                              v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232)
                      break;
                    *(_QWORD *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    v236 = v233 - 1;
                    v231 = v235;
                    v293 = v233-- <= 0;
                    if (v293)
                      goto LABEL_346;
                  }
                  v238 = (v231 - (char *)v234) >> 3;
                  v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61)
                    goto LABEL_425;
                  if ((v232 - (char *)v234) >> 2 > v239)
                    v239 = (v232 - (char *)v234) >> 2;
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8)
                    v240 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v240 = v239;
                  if (v240)
                  {
                    if (v240 >> 61)
                      goto LABEL_426;
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        v247 = (v243 >> 3) + 1;
                        v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (__int128 *)(v231 - 16);
                        v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_331;
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234)
                    operator delete(v234);
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                v192 = v191;
                if (v114 < v325)
                {
                  *(_QWORD *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                v193 = v114 - v101;
                v194 = v101;
                v195 = (v114 - v101) >> 3;
                v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61)
                  goto LABEL_425;
                v197 = v114;
                v198 = v194;
                v199 = v325 - v194;
                v200 = (v325 - v194) >> 2;
                if (v200 > v196)
                  v196 = v200;
                if (v199 >= 0x7FFFFFFFFFFFFFF8)
                  v196 = 0x1FFFFFFFFFFFFFFFLL;
                if (v196)
                {
                  if (v196 >> 61)
                    goto LABEL_426;
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(_QWORD *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    v302 = (v203 >> 3) + 1;
                    v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_280;
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    v206 = *((_QWORD *)v204 - 1);
                    v204 -= 8;
                    *((_QWORD *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205)
                  operator delete(v205);
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              v184 = (v106 - v94) >> 3;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_425;
              if ((v332 - v94) >> 2 > v185)
                v185 = (v332 - v94) >> 2;
              if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                v185 = 0x1FFFFFFFFFFFFFFFLL;
              if (v185)
              {
                if (v185 >> 61)
                  goto LABEL_426;
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v326;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111)
                    goto LABEL_283;
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                v296 = (v188 >> 3) + 1;
                v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v326;
                do
                {
                  v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94)
                    goto LABEL_259;
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v326;
              }
              do
              {
                v190 = *((_QWORD *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            v115 = v99;
            v329 = v103;
            v330 = -v88;
            v116 = -2;
            v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v332;
                  if (v106 < v332)
                  {
                    *(_QWORD *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v332 = v119;
                    v112 = *(_QWORD *)(v329 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      v115 = 0x7FFFFFFFFFFFFFFFLL;
                      v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      v115 = *((_QWORD *)v89 - 2);
                      v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    v103 = v329;
                    goto LABEL_146;
                  }
                  v328 = v115;
                  v124 = (v106 - v94) >> 3;
                  v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61)
                    goto LABEL_425;
                  if ((v332 - v94) >> 2 > v125)
                    v125 = (v332 - v94) >> 2;
                  if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                    v126 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v126 = v125;
                  v323 = v89;
                  if (v126)
                  {
                    if (v126 >> 61)
                      goto LABEL_426;
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v321;
                      v88 = v322;
                    }
                    else
                    {
                      v163 = (v134 >> 3) + 1;
                      v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      v88 = v322;
                      do
                      {
                        v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v321;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94)
                          goto LABEL_182;
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      v136 = *((_QWORD *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v321;
                  v88 = v322;
                  v119 = &v127[8 * v126];
                  if (v94)
LABEL_182:
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v323;
                  v115 = v328;
                  goto LABEL_184;
                }
                v117 = v115;
                v118 = mlir::getPositiveAxis(v116, v88);
                v115 = v117;
                v111 = 0;
                v112 *= *(_QWORD *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  v115 = 0x7FFFFFFFFFFFFFFFLL;
                  v111 = 1;
                  v89 = v90;
                }
                else
                {
                  v115 = *((_QWORD *)v89 - 2);
                  v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v332;
              v327 = v115;
              if (v106 >= v332)
                break;
              *(_QWORD *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v326;
LABEL_196:
              v112 = *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              v144 = v142;
              v332 = v121;
              if (v123 >= (uint64_t *)v325)
              {
                v320 = v143;
                v145 = v101;
                v146 = (char *)v123 - v101;
                v147 = v146 >> 3;
                v148 = (v146 >> 3) + 1;
                if (v148 >> 61)
                  goto LABEL_425;
                v149 = v123;
                v150 = (uint64_t *)v145;
                v151 = v325 - v145;
                v152 = (v325 - v145) >> 2;
                if (v152 > v148)
                  v148 = v152;
                if (v151 >= 0x7FFFFFFFFFFFFFF8)
                  v153 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v153 = v148;
                v324 = v89;
                if (v153)
                {
                  if (v153 >> 61)
                    goto LABEL_426;
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(_QWORD *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v321;
                  v88 = v322;
                  v103 = v329;
                  goto LABEL_218;
                }
                v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v321;
                if (v157 < 0x168
                  || (v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  v88 = v322;
                  v103 = v329;
                }
                else
                {
                  v177 = (v157 >> 3) + 1;
                  v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  v88 = v322;
                  v103 = v329;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v325 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      v111 = 0;
                      v101 = v155;
                      v326 = v161;
                    }
                    else
                    {
                      v111 = 0;
                      v101 = v155;
                      v326 = v156;
                    }
                    v106 = v320;
                    v89 = v324;
                    v115 = v327;
                    goto LABEL_146;
                  }
                }
                do
                {
                  v159 = *--v158;
                  *((_QWORD *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              v111 = 0;
              *v123 = v142;
              v326 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v321;
              v115 = v327;
LABEL_146:
              v293 = v116-- <= v330;
              if (v293)
                goto LABEL_142;
            }
            v128 = (v106 - v94) >> 3;
            v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61)
              goto LABEL_425;
            if ((v332 - v94) >> 2 > v129)
              v129 = (v332 - v94) >> 2;
            if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v129;
            if (v130)
            {
              if (v130 >> 61)
                goto LABEL_426;
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94)
                goto LABEL_195;
              goto LABEL_194;
            }
            v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              v170 = (v139 >> 3) + 1;
              v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              v88 = v322;
              do
              {
                v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v326;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  v103 = v329;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              v141 = *((_QWORD *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          v88 = v322;
        }
        else
        {
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v325 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v325 = v97 + 8;
        }
        *(_QWORD *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          v99 = *((_QWORD *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v348 = v308;
      v309 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
      v334 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v348, 1, v309, 0);
      v310 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v348, v310, (_BYTE *)(v311 + 8 * v312));
      v313 = *(_QWORD *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v334);
      v345 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v348, 8 * v349, 8, 1, 1);
      v346 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v313, &v345);
      v316 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, *(_QWORD *)(v81 + 24), (uint64_t *)&v333, &v346);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v317 + 32))(v317, v81, v316);
      if (v348 != v350)
        free(v348);
LABEL_420:
      v7 = 1;
      goto LABEL_422;
    }
    v54 = v53;
    v55 = (char *)v338;
    while (1)
    {
      v57 = -v54;
      if (v55 >= v339)
        break;
      *(_QWORD *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      v338 = (unint64_t)v56;
      v55 = v56;
      if (!(_DWORD)--v54)
        goto LABEL_100;
    }
    v58 = (char *)__p;
    v59 = v55 - (_BYTE *)__p;
    v60 = (v55 - (_BYTE *)__p) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_425;
    v62 = v339 - (_BYTE *)__p;
    if ((v339 - (_BYTE *)__p) >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 61)
LABEL_426:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(_QWORD *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58)
      goto LABEL_77;
    v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        v70 = (v66 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_76;
LABEL_77:
        __p = v65;
        v339 = &v64[8 * v63];
        if (v58)
          operator delete(v58);
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      v68 = *((_QWORD *)v67 - 1);
      v67 -= 8;
      *((_QWORD *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionMinOp,mlir::Value &,mlir::Value &,BOOL,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_min", (const unsigned __int8 *)0x11, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"mps.reduction_min";
    v21[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::ReductionMinOp::build(a1, (uint64_t)v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionProdOp>::~CanonicalizeReductionAxes(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionProdOp>::~CanonicalizeReductionAxes(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionProdOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char matched;
  uint64_t v41;
  uint64_t v42;
  mlir **v43;
  mlir **v44;
  uint64_t *v45;
  uint64_t NegativeAxis;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  size_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t *v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t **v83;
  BOOL v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t PositiveAxis;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  _BOOL4 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  _BYTE *v132;
  uint64_t *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  __int128 v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  BOOL v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t Loc;
  uint64_t IntegerType;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  uint64_t *v242;
  unint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _OWORD *v249;
  __int128 *v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t *v263;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  mlir::GenericProgramPoint *v268;
  mlir::Operation *v269;
  unint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  _BYTE *v279;
  char *v280;
  char *v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  char *v289;
  uint64_t v290;
  __int128 v291;
  char *v292;
  BOOL v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  __int128 v307;
  uint64_t *v308;
  uint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  mlir::GenericProgramPoint *v316;
  uint64_t v317;
  uint64_t v318;
  mlir::Builder *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  uint64_t *v333;
  uint64_t **v334;
  uint64_t *v335;
  size_t v336;
  void *__p;
  unint64_t v338;
  char *v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD v342[2];
  uint64_t *v343;
  uint64_t *v344;
  mlir::GenericProgramPoint *v345;
  unint64_t v346[2];
  uint64_t *v347;
  uint64_t v348;
  _QWORD v349[6];

  v349[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr)
        return 0;
      goto LABEL_6;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 0;
    v317 = a3;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v10 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10)
      goto LABEL_18;
    v11 = *v10;
    v12 = mlir::TypeID::get<mlir::ShapedType>();
    v13 = *(unsigned int *)(v11 + 16);
    if (!(_DWORD)v13)
      goto LABEL_18;
    v14 = *(_QWORD **)(v11 + 8);
    v15 = &v14[2 * v13];
    do
    {
      v16 = v13 >> 1;
      v17 = &v14[2 * (v13 >> 1)];
      v19 = *v17;
      v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12)
        v14 = v18;
      else
        v13 = v16;
    }
    while (v13);
    if (v14 != v15 && *v14 == v12)
      v20 = v14[1];
    else
LABEL_18:
      v20 = 0;
    v342[0] = v10;
    v342[1] = v20;
    v21 = (_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21)
      goto LABEL_28;
    v22 = *v21;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      v38 = v25[1];
      v340 = v21;
      v341 = v38;
      if (!v10)
        return 0;
    }
    else
    {
LABEL_28:
      v340 = v21;
      v341 = 0;
      if (!v10)
        return 0;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v342))
      return 0;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
    if (v32)
    {
      v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33)
          goto LABEL_34;
      }
      return 0;
    }
LABEL_34:
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v331 = *(_QWORD *)(a2 + 72);
      v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      v331 = 0;
      v34 = 0;
    }
    __p = 0;
    v338 = 0;
    v339 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    v318 = a2;
    if (v35)
    {
      if (v35 >> 61)
        goto LABEL_425;
      v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v338 & 0xFFFFFFFFFFFFFFF8];
      v338 = (unint64_t)__p;
      v339 = &v37[v36];
    }
    if (v34 >= 2)
    {
      v39 = *(_QWORD *)(v331 + 56);
      v347 = v349;
      v348 = 0x400000000;
      matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v347);
      if (matched)
      {
        v335 = 0;
        v336 = 0;
        v334 = &v335;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
        if ((_DWORD)v348)
        {
          v42 = v41;
          v43 = (mlir **)v347;
          v44 = (mlir **)&v347[v348];
          do
          {
            NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            v47 = NegativeAxis;
            v48 = v335;
            v49 = &v335;
            v50 = &v335;
            if (v335)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  v51 = v48[4];
                  if (NegativeAxis >= v51)
                    break;
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50)
                    goto LABEL_56;
                }
                if (v51 >= NegativeAxis)
                  break;
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v334)
              {
                v334 = (uint64_t **)*v334;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v335, v45);
              ++v336;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v336)
        {
          if (v336 >> 61)
            goto LABEL_425;
          v76 = v336;
          v77 = operator new(8 * v336);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          v338 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        v338 = (unint64_t)v78;
        v339 = v78;
        v79 = (uint64_t *)v334;
        if (v334 != &v335)
        {
          do
          {
            *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v335);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v334, v335);
      }
      if (v347 != v349)
        free(v347);
      if (!matched)
        goto LABEL_420;
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v338 == __p)
      {
        v347 = *(uint64_t **)(*(_QWORD *)(v318 + 72) + 24);
        v7 = 1;
        mlir::ValueRange::ValueRange(v346, (uint64_t)&v347, 1uLL);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v317 + 24))(v317, v318, v346[0], v346[1]);
        goto LABEL_422;
      }
      v81 = v318;
      if (*(uint64_t *)__p > -5)
      {
        v7 = 1;
        goto LABEL_423;
      }
      v333 = *(uint64_t **)(v331 + 24);
      v319 = (mlir::Builder *)(v317 + 8);
LABEL_113:
      if (__p != (void *)v338)
      {
        v85 = v333;
        v343 = v333;
        v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
        v348 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v338;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        if (v91)
        {
          if (v91 >> 61)
            goto LABEL_425;
          v92 = v89;
          v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v332 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v332 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        v322 = v88;
        if (v95)
        {
          if (v95 >> 61)
            goto LABEL_425;
          v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v325 = &v97[v96];
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            v88 = v322;
LABEL_130:
            v334 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v335 = v102;
            v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v334);
            PositiveAxis = mlir::getPositiveAxis(-1, v88);
            v105 = PositiveAxis;
            v321 = v90;
            v326 = v100;
            if (v94 >= v332)
            {
              v107 = (v332 - v94) >> 2;
              if (v107 <= 1)
                v107 = 1;
              v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v332 - v94) < 0x7FFFFFFFFFFFFFF8)
                v108 = v107;
              if (v108 >> 61)
                goto LABEL_426;
              v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(_QWORD *)v110 = *(_QWORD *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v332 = &v110[v109];
              if (v94)
                operator delete(v94);
              v94 = v110;
              v90 = v321;
            }
            else
            {
              *(_QWORD *)v94 = *(_QWORD *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            v111 = v99 == -2;
            if (v88 < 2)
            {
              v112 = 1;
LABEL_142:
              if (v106 < v332)
              {
                *(_QWORD *)v106 = v112;
                v113 = v106 + 8;
                v114 = v326;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        v209 = *((_QWORD *)v208 - 1);
                        *((_QWORD *)v208 - 1) = *(_QWORD *)v207;
                        *(_QWORD *)v207 = v209;
                        v207 -= 8;
                        v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        v213 = *((_QWORD *)v212 - 1);
                        *((_QWORD *)v212 - 1) = *(_QWORD *)v211;
                        *(_QWORD *)v211 = v213;
                        v211 -= 8;
                        v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  Loc = mlir::Value::getLoc((mlir::Value *)&v343);
                  v334 = (uint64_t **)v333;
                  v345 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  IntegerType = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                  v216 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v345, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216)
                    goto LABEL_302;
                  v218 = *v216;
                  v219 = mlir::TypeID::get<mlir::ShapedType>();
                  v220 = *(unsigned int *)(v218 + 16);
                  if (!(_DWORD)v220)
                    goto LABEL_302;
                  v221 = *(_QWORD **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219)
                      v221 = v225;
                    else
                      v220 = v223;
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219)
                    v227 = v221[1];
                  else
LABEL_302:
                    v227 = 0;
                  v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, Loc, &v344);
                  v333 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, Loc, (uint64_t *)&v334, &v345)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101)
                    operator delete(v101);
                  if (v94)
                    operator delete(v94);
                  v343 = v333;
                  v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
                  v348 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                  if (v229)
                  {
                    if (v229 >> 61)
                      goto LABEL_425;
                    v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  v233 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                  if ((uint64_t)(v338 - (_QWORD)__p) < 1)
                  {
                    v236 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    v237 = *((_QWORD *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        v253 = mlir::Value::getLoc((mlir::Value *)&v343);
                        v334 = (uint64_t **)v343;
                        v345 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        v254 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                        v255 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v345, 1, v254, 0);
                        v256 = v255;
                        if (!v255)
                          goto LABEL_356;
                        v257 = *v255;
                        v258 = mlir::TypeID::get<mlir::ShapedType>();
                        v259 = *(unsigned int *)(v257 + 16);
                        if (!(_DWORD)v259)
                          goto LABEL_356;
                        v260 = *(_QWORD **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258)
                            v260 = v264;
                          else
                            v259 = v262;
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258)
                          v266 = v260[1];
                        else
LABEL_356:
                          v266 = 0;
                        v267 = 1;
                        v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v345 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v253, &v344)- 16);
                        LOBYTE(v344) = 1;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionProdOp,mlir::Value &,mlir::Value &,BOOL>((mlir::UnitAttr **)v319, v253, (uint64_t *)&v334, (uint64_t *)&v345, (unsigned __int8 *)&v344);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v333 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234)
                          operator delete(v234);
                        v81 = v318;
                        if ((v267 & 1) == 0)
                          goto LABEL_113;
                        v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p)
                          return v7;
LABEL_423:
                        v338 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0)
                            goto LABEL_367;
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274)
                            operator delete(v274);
                          v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0)
                        goto LABEL_403;
LABEL_367:
                      while (2)
                      {
                        v275 = *((_QWORD *)__p + v236);
                        if (v272 < v273)
                        {
                          *(_QWORD *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          v276 = (v272 - v274) >> 3;
                          v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61)
                            goto LABEL_425;
                          if ((v273 - v274) >> 2 > v277)
                            v277 = (v273 - v274) >> 2;
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8)
                            v278 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v278 = v277;
                          if (v278)
                          {
                            if (v278 >> 61)
                              goto LABEL_426;
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(_QWORD *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v286 = (v282 >> 3) + 1;
                            v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                v284 = *((_QWORD *)v283 - 1);
                                v283 -= 8;
                                *((_QWORD *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274)
                            operator delete(v274);
                          v274 = v280;
                          v272 = v281;
                        }
                        v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              v295 = *((_QWORD *)v294 - 1);
                              *((_QWORD *)v294 - 1) = *(_QWORD *)v292;
                              *(_QWORD *)v292 = v295;
                              v292 -= 8;
                              v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232)
                      break;
                    *(_QWORD *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    v236 = v233 - 1;
                    v231 = v235;
                    v293 = v233-- <= 0;
                    if (v293)
                      goto LABEL_346;
                  }
                  v238 = (v231 - (char *)v234) >> 3;
                  v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61)
                    goto LABEL_425;
                  if ((v232 - (char *)v234) >> 2 > v239)
                    v239 = (v232 - (char *)v234) >> 2;
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8)
                    v240 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v240 = v239;
                  if (v240)
                  {
                    if (v240 >> 61)
                      goto LABEL_426;
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        v247 = (v243 >> 3) + 1;
                        v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (__int128 *)(v231 - 16);
                        v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_331;
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234)
                    operator delete(v234);
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                v192 = v191;
                if (v114 < v325)
                {
                  *(_QWORD *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                v193 = v114 - v101;
                v194 = v101;
                v195 = (v114 - v101) >> 3;
                v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61)
                  goto LABEL_425;
                v197 = v114;
                v198 = v194;
                v199 = v325 - v194;
                v200 = (v325 - v194) >> 2;
                if (v200 > v196)
                  v196 = v200;
                if (v199 >= 0x7FFFFFFFFFFFFFF8)
                  v196 = 0x1FFFFFFFFFFFFFFFLL;
                if (v196)
                {
                  if (v196 >> 61)
                    goto LABEL_426;
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(_QWORD *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    v302 = (v203 >> 3) + 1;
                    v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_280;
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    v206 = *((_QWORD *)v204 - 1);
                    v204 -= 8;
                    *((_QWORD *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205)
                  operator delete(v205);
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              v184 = (v106 - v94) >> 3;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_425;
              if ((v332 - v94) >> 2 > v185)
                v185 = (v332 - v94) >> 2;
              if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                v185 = 0x1FFFFFFFFFFFFFFFLL;
              if (v185)
              {
                if (v185 >> 61)
                  goto LABEL_426;
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v326;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111)
                    goto LABEL_283;
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                v296 = (v188 >> 3) + 1;
                v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v326;
                do
                {
                  v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94)
                    goto LABEL_259;
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v326;
              }
              do
              {
                v190 = *((_QWORD *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            v115 = v99;
            v329 = v103;
            v330 = -v88;
            v116 = -2;
            v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v332;
                  if (v106 < v332)
                  {
                    *(_QWORD *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v332 = v119;
                    v112 = *(_QWORD *)(v329 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      v115 = 0x7FFFFFFFFFFFFFFFLL;
                      v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      v115 = *((_QWORD *)v89 - 2);
                      v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    v103 = v329;
                    goto LABEL_146;
                  }
                  v328 = v115;
                  v124 = (v106 - v94) >> 3;
                  v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61)
                    goto LABEL_425;
                  if ((v332 - v94) >> 2 > v125)
                    v125 = (v332 - v94) >> 2;
                  if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                    v126 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v126 = v125;
                  v323 = v89;
                  if (v126)
                  {
                    if (v126 >> 61)
                      goto LABEL_426;
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v321;
                      v88 = v322;
                    }
                    else
                    {
                      v163 = (v134 >> 3) + 1;
                      v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      v88 = v322;
                      do
                      {
                        v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v321;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94)
                          goto LABEL_182;
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      v136 = *((_QWORD *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v321;
                  v88 = v322;
                  v119 = &v127[8 * v126];
                  if (v94)
LABEL_182:
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v323;
                  v115 = v328;
                  goto LABEL_184;
                }
                v117 = v115;
                v118 = mlir::getPositiveAxis(v116, v88);
                v115 = v117;
                v111 = 0;
                v112 *= *(_QWORD *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  v115 = 0x7FFFFFFFFFFFFFFFLL;
                  v111 = 1;
                  v89 = v90;
                }
                else
                {
                  v115 = *((_QWORD *)v89 - 2);
                  v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v332;
              v327 = v115;
              if (v106 >= v332)
                break;
              *(_QWORD *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v326;
LABEL_196:
              v112 = *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              v144 = v142;
              v332 = v121;
              if (v123 >= (uint64_t *)v325)
              {
                v320 = v143;
                v145 = v101;
                v146 = (char *)v123 - v101;
                v147 = v146 >> 3;
                v148 = (v146 >> 3) + 1;
                if (v148 >> 61)
                  goto LABEL_425;
                v149 = v123;
                v150 = (uint64_t *)v145;
                v151 = v325 - v145;
                v152 = (v325 - v145) >> 2;
                if (v152 > v148)
                  v148 = v152;
                if (v151 >= 0x7FFFFFFFFFFFFFF8)
                  v153 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v153 = v148;
                v324 = v89;
                if (v153)
                {
                  if (v153 >> 61)
                    goto LABEL_426;
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(_QWORD *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v321;
                  v88 = v322;
                  v103 = v329;
                  goto LABEL_218;
                }
                v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v321;
                if (v157 < 0x168
                  || (v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  v88 = v322;
                  v103 = v329;
                }
                else
                {
                  v177 = (v157 >> 3) + 1;
                  v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  v88 = v322;
                  v103 = v329;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v325 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      v111 = 0;
                      v101 = v155;
                      v326 = v161;
                    }
                    else
                    {
                      v111 = 0;
                      v101 = v155;
                      v326 = v156;
                    }
                    v106 = v320;
                    v89 = v324;
                    v115 = v327;
                    goto LABEL_146;
                  }
                }
                do
                {
                  v159 = *--v158;
                  *((_QWORD *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              v111 = 0;
              *v123 = v142;
              v326 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v321;
              v115 = v327;
LABEL_146:
              v293 = v116-- <= v330;
              if (v293)
                goto LABEL_142;
            }
            v128 = (v106 - v94) >> 3;
            v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61)
              goto LABEL_425;
            if ((v332 - v94) >> 2 > v129)
              v129 = (v332 - v94) >> 2;
            if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v129;
            if (v130)
            {
              if (v130 >> 61)
                goto LABEL_426;
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94)
                goto LABEL_195;
              goto LABEL_194;
            }
            v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              v170 = (v139 >> 3) + 1;
              v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              v88 = v322;
              do
              {
                v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v326;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  v103 = v329;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              v141 = *((_QWORD *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          v88 = v322;
        }
        else
        {
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v325 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v325 = v97 + 8;
        }
        *(_QWORD *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          v99 = *((_QWORD *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v347 = v308;
      v309 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
      v334 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v347, 1, v309, 0);
      v310 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v347, v310, (_BYTE *)(v311 + 8 * v312));
      v313 = *(_QWORD *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v334);
      v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v347, 8 * v348, 8, 1, 1);
      v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v313, &v344);
      v316 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, *(_QWORD *)(v81 + 24), (uint64_t *)&v333, &v345);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v317 + 32))(v317, v81, v316);
      if (v347 != v349)
        free(v347);
LABEL_420:
      v7 = 1;
      goto LABEL_422;
    }
    v54 = v53;
    v55 = (char *)v338;
    while (1)
    {
      v57 = -v54;
      if (v55 >= v339)
        break;
      *(_QWORD *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      v338 = (unint64_t)v56;
      v55 = v56;
      if (!(_DWORD)--v54)
        goto LABEL_100;
    }
    v58 = (char *)__p;
    v59 = v55 - (_BYTE *)__p;
    v60 = (v55 - (_BYTE *)__p) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_425;
    v62 = v339 - (_BYTE *)__p;
    if ((v339 - (_BYTE *)__p) >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 61)
LABEL_426:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(_QWORD *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58)
      goto LABEL_77;
    v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        v70 = (v66 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_76;
LABEL_77:
        __p = v65;
        v339 = &v64[8 * v63];
        if (v58)
          operator delete(v58);
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      v68 = *((_QWORD *)v67 - 1);
      v67 -= 8;
      *((_QWORD *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionProdOp,mlir::Value &,mlir::Value &,BOOL>(mlir::UnitAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_prod", (const unsigned __int8 *)0x12, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"mps.reduction_prod";
    v19[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mps::ReductionProdOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionSumOp>::~CanonicalizeReductionAxes(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionSumOp>::~CanonicalizeReductionAxes(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeReductionAxes<mlir::mps::ReductionSumOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InherentAttr;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char matched;
  uint64_t v41;
  uint64_t v42;
  mlir **v43;
  mlir **v44;
  uint64_t *v45;
  uint64_t NegativeAxis;
  uint64_t v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  size_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t *v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t **v83;
  BOOL v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t PositiveAxis;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  _BOOL4 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  _BYTE *v132;
  uint64_t *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  char *v166;
  uint64_t v167;
  __int128 v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  __int128 v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  _BYTE *v186;
  uint64_t *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int64_t v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  char *v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  BOOL v210;
  char *v211;
  char *v212;
  uint64_t v213;
  uint64_t Loc;
  uint64_t IntegerType;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t *v224;
  _QWORD *v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  _BYTE *v241;
  uint64_t *v242;
  unint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _OWORD *v249;
  __int128 *v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  unint64_t *v263;
  _QWORD *v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  mlir::GenericProgramPoint *v268;
  mlir::Operation *v269;
  unint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  _BYTE *v279;
  char *v280;
  char *v281;
  unint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _OWORD *v288;
  char *v289;
  uint64_t v290;
  __int128 v291;
  char *v292;
  BOOL v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _OWORD *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  __int128 v307;
  uint64_t *v308;
  uint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  mlir::GenericProgramPoint *v316;
  uint64_t v317;
  uint64_t v318;
  mlir::Builder *v319;
  char *v320;
  char *v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  uint64_t *v333;
  uint64_t **v334;
  uint64_t *v335;
  size_t v336;
  void *__p;
  unint64_t v338;
  char *v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD v342[2];
  uint64_t *v343;
  uint64_t *v344;
  mlir::GenericProgramPoint *v345;
  unint64_t v346[2];
  uint64_t *v347;
  uint64_t v348;
  _QWORD v349[6];

  v349[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"keep_dims", 9);
    if (v6)
    {
      if (!InherentAttr)
        return 0;
      goto LABEL_6;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "keep_dims", 9uLL);
  if (InherentAttr)
  {
LABEL_6:
    if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 0;
    v317 = a3;
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v10 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10)
      goto LABEL_18;
    v11 = *v10;
    v12 = mlir::TypeID::get<mlir::ShapedType>();
    v13 = *(unsigned int *)(v11 + 16);
    if (!(_DWORD)v13)
      goto LABEL_18;
    v14 = *(_QWORD **)(v11 + 8);
    v15 = &v14[2 * v13];
    do
    {
      v16 = v13 >> 1;
      v17 = &v14[2 * (v13 >> 1)];
      v19 = *v17;
      v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12)
        v14 = v18;
      else
        v13 = v16;
    }
    while (v13);
    if (v14 != v15 && *v14 == v12)
      v20 = v14[1];
    else
LABEL_18:
      v20 = 0;
    v342[0] = v10;
    v342[1] = v20;
    v21 = (_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v21)
      goto LABEL_28;
    v22 = *v21;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
    {
      v38 = v25[1];
      v340 = v21;
      v341 = v38;
      if (!v10)
        return 0;
    }
    else
    {
LABEL_28:
      v340 = v21;
      v341 = 0;
      if (!v10)
        return 0;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v342))
      return 0;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
    if (v32)
    {
      v33 = 8 * v32;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v33 -= 8;
        if (!v33)
          goto LABEL_34;
      }
      return 0;
    }
LABEL_34:
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v331 = *(_QWORD *)(a2 + 72);
      v34 = *(unsigned int *)(a2 + 68);
    }
    else
    {
      v331 = 0;
      v34 = 0;
    }
    __p = 0;
    v338 = 0;
    v339 = 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    v318 = a2;
    if (v35)
    {
      if (v35 >> 61)
        goto LABEL_425;
      v36 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      __p = &v37[v338 & 0xFFFFFFFFFFFFFFF8];
      v338 = (unint64_t)__p;
      v339 = &v37[v36];
    }
    if (v34 >= 2)
    {
      v39 = *(_QWORD *)(v331 + 56);
      v347 = v349;
      v348 = 0x400000000;
      matched = mlir::matchConstantWithIntVector<long long>(v39, (uint64_t)&v347);
      if (matched)
      {
        v335 = 0;
        v336 = 0;
        v334 = &v335;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
        if ((_DWORD)v348)
        {
          v42 = v41;
          v43 = (mlir **)v347;
          v44 = (mlir **)&v347[v348];
          do
          {
            NegativeAxis = mlir::getNegativeAxis(*v43, v42);
            v47 = NegativeAxis;
            v48 = v335;
            v49 = &v335;
            v50 = &v335;
            if (v335)
            {
              while (1)
              {
                while (1)
                {
                  v50 = (uint64_t **)v48;
                  v51 = v48[4];
                  if (NegativeAxis >= v51)
                    break;
                  v48 = *v50;
                  v49 = v50;
                  if (!*v50)
                    goto LABEL_56;
                }
                if (v51 >= NegativeAxis)
                  break;
                v48 = v50[1];
                if (!v48)
                {
                  v49 = v50 + 1;
                  goto LABEL_56;
                }
              }
            }
            else
            {
LABEL_56:
              v52 = (uint64_t *)operator new(0x28uLL);
              v52[4] = v47;
              *v52 = 0;
              v52[1] = 0;
              v52[2] = (uint64_t)v50;
              *v49 = v52;
              if (*v334)
              {
                v334 = (uint64_t **)*v334;
                v45 = *v49;
              }
              else
              {
                v45 = v52;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v335, v45);
              ++v336;
            }
            ++v43;
          }
          while (v43 != v44);
        }
        if (v336)
        {
          if (v336 >> 61)
            goto LABEL_425;
          v76 = v336;
          v77 = operator new(8 * v336);
          v78 = (char *)&v77[v76];
          bzero(v77, v76 * 8);
        }
        else
        {
          v78 = 0;
          v77 = 0;
        }
        if (__p)
        {
          v338 = (unint64_t)__p;
          operator delete(__p);
        }
        __p = v77;
        v338 = (unint64_t)v78;
        v339 = v78;
        v79 = (uint64_t *)v334;
        if (v334 != &v335)
        {
          do
          {
            *v77 = v79[4];
            v82 = (uint64_t *)v79[1];
            if (v82)
            {
              do
              {
                v83 = (uint64_t **)v82;
                v82 = (uint64_t *)*v82;
              }
              while (v82);
            }
            else
            {
              do
              {
                v83 = (uint64_t **)v79[2];
                v84 = *v83 == v79;
                v79 = (uint64_t *)v83;
              }
              while (!v84);
            }
            ++v77;
            v79 = (uint64_t *)v83;
          }
          while (v83 != &v335);
        }
        std::__tree<std::__value_type<ZinIrDimension,char>,std::__map_value_compare<ZinIrDimension,std::__value_type<ZinIrDimension,char>,std::less<ZinIrDimension>,true>,std::allocator<std::__value_type<ZinIrDimension,char>>>::destroy((uint64_t)&v334, v335);
      }
      if (v347 != v349)
        free(v347);
      if (!matched)
        goto LABEL_420;
      goto LABEL_100;
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v340);
    if (!v53)
    {
LABEL_100:
      v80 = __p;
      if ((void *)v338 == __p)
      {
        v347 = *(uint64_t **)(*(_QWORD *)(v318 + 72) + 24);
        v7 = 1;
        mlir::ValueRange::ValueRange(v346, (uint64_t)&v347, 1uLL);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v317 + 24))(v317, v318, v346[0], v346[1]);
        goto LABEL_422;
      }
      v81 = v318;
      if (*(uint64_t *)__p > -5)
      {
        v7 = 1;
        goto LABEL_423;
      }
      v333 = *(uint64_t **)(v331 + 24);
      v319 = (mlir::Builder *)(v317 + 8);
LABEL_113:
      if (__p != (void *)v338)
      {
        v85 = v333;
        v343 = v333;
        v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
        v348 = v86;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        v88 = v87;
        v90 = (char *)__p;
        v89 = (char *)v338;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        if (v91)
        {
          if (v91 >> 61)
            goto LABEL_425;
          v92 = v89;
          v93 = 8 * v91;
          v94 = (char *)operator new(8 * v91);
          v332 = &v94[v93];
          v89 = v92;
        }
        else
        {
          v332 = 0;
          v94 = 0;
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
        v322 = v88;
        if (v95)
        {
          if (v95 >> 61)
            goto LABEL_425;
          v96 = 8 * v95;
          v97 = (char *)operator new(8 * v95);
          v325 = &v97[v96];
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v100 = v97;
            v101 = v97;
            v88 = v322;
LABEL_130:
            v334 = (uint64_t **)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v85[1] & 0xFFFFFFFFFFFFFFF8));
            v335 = v102;
            v103 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v334);
            PositiveAxis = mlir::getPositiveAxis(-1, v88);
            v105 = PositiveAxis;
            v321 = v90;
            v326 = v100;
            if (v94 >= v332)
            {
              v107 = (v332 - v94) >> 2;
              if (v107 <= 1)
                v107 = 1;
              v108 = 0x1FFFFFFFFFFFFFFFLL;
              if ((unint64_t)(v332 - v94) < 0x7FFFFFFFFFFFFFF8)
                v108 = v107;
              if (v108 >> 61)
                goto LABEL_426;
              v109 = 8 * v108;
              v110 = (char *)operator new(8 * v108);
              *(_QWORD *)v110 = *(_QWORD *)(v103 + 8 * v105);
              v106 = v110 + 8;
              v332 = &v110[v109];
              if (v94)
                operator delete(v94);
              v94 = v110;
              v90 = v321;
            }
            else
            {
              *(_QWORD *)v94 = *(_QWORD *)(v103 + 8 * PositiveAxis);
              v106 = v94 + 8;
            }
            v111 = v99 == -2;
            if (v88 < 2)
            {
              v112 = 1;
LABEL_142:
              if (v106 < v332)
              {
                *(_QWORD *)v106 = v112;
                v113 = v106 + 8;
                v114 = v326;
                if (!v111)
                {
LABEL_283:
                  if (v94 != v113)
                  {
                    v207 = v113 - 8;
                    if (v113 - 8 > v94)
                    {
                      v208 = v94 + 8;
                      do
                      {
                        v209 = *((_QWORD *)v208 - 1);
                        *((_QWORD *)v208 - 1) = *(_QWORD *)v207;
                        *(_QWORD *)v207 = v209;
                        v207 -= 8;
                        v210 = v208 >= v207;
                        v208 += 8;
                      }
                      while (!v210);
                    }
                  }
                  if (v101 != v114)
                  {
                    v211 = v114 - 8;
                    if (v114 - 8 > v101)
                    {
                      v212 = v101 + 8;
                      do
                      {
                        v213 = *((_QWORD *)v212 - 1);
                        *((_QWORD *)v212 - 1) = *(_QWORD *)v211;
                        *(_QWORD *)v211 = v213;
                        v211 -= 8;
                        v210 = v212 >= v211;
                        v212 += 8;
                      }
                      while (!v210);
                    }
                  }
                  Loc = mlir::Value::getLoc((mlir::Value *)&v343);
                  v334 = (uint64_t **)v333;
                  v345 = (mlir::GenericProgramPoint *)((v113 - v94) >> 3);
                  IntegerType = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                  v216 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v345, 1, IntegerType, 0);
                  v217 = v216;
                  if (!v216)
                    goto LABEL_302;
                  v218 = *v216;
                  v219 = mlir::TypeID::get<mlir::ShapedType>();
                  v220 = *(unsigned int *)(v218 + 16);
                  if (!(_DWORD)v220)
                    goto LABEL_302;
                  v221 = *(_QWORD **)(v218 + 8);
                  v222 = &v221[2 * v220];
                  do
                  {
                    v223 = v220 >> 1;
                    v224 = &v221[2 * (v220 >> 1)];
                    v226 = *v224;
                    v225 = v224 + 2;
                    v220 += ~(v220 >> 1);
                    if (v226 < v219)
                      v221 = v225;
                    else
                      v220 = v223;
                  }
                  while (v220);
                  if (v221 != v222 && *v221 == v219)
                    v227 = v221[1];
                  else
LABEL_302:
                    v227 = 0;
                  v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v217, v227, v94, v113 - v94, 8, 1, 1);
                  v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, Loc, &v344);
                  v333 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, Loc, (uint64_t *)&v334, &v345)- 16);
                  std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v101, v114, (v114 - v101) >> 3);
                  if (v101)
                    operator delete(v101);
                  if (v94)
                    operator delete(v94);
                  v343 = v333;
                  v347 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(v333[1] & 0xFFFFFFFFFFFFFFF8));
                  v348 = v228;
                  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                  if (v229)
                  {
                    if (v229 >> 61)
                      goto LABEL_425;
                    v230 = 8 * v229;
                    v231 = (char *)operator new(8 * v229);
                    v232 = &v231[v230];
                  }
                  else
                  {
                    v231 = 0;
                    v232 = 0;
                  }
                  v233 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                  if ((uint64_t)(v338 - (_QWORD)__p) < 1)
                  {
                    v236 = ((uint64_t)(v338 - (_QWORD)__p) >> 3) - 1;
                    v234 = (uint64_t *)v231;
                    goto LABEL_359;
                  }
                  v234 = (uint64_t *)v231;
                  while (1)
                  {
                    v237 = *((_QWORD *)__p + v233);
                    if (v237 < -4)
                    {
                      v235 = v231;
                      v236 = v233;
LABEL_346:
                      if (v235 != (char *)v234)
                      {
                        v253 = mlir::Value::getLoc((mlir::Value *)&v343);
                        v334 = (uint64_t **)v343;
                        v345 = (mlir::GenericProgramPoint *)((v235 - (char *)v234) >> 3);
                        v254 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
                        v255 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v345, 1, v254, 0);
                        v256 = v255;
                        if (!v255)
                          goto LABEL_356;
                        v257 = *v255;
                        v258 = mlir::TypeID::get<mlir::ShapedType>();
                        v259 = *(unsigned int *)(v257 + 16);
                        if (!(_DWORD)v259)
                          goto LABEL_356;
                        v260 = *(_QWORD **)(v257 + 8);
                        v261 = &v260[2 * v259];
                        do
                        {
                          v262 = v259 >> 1;
                          v263 = &v260[2 * (v259 >> 1)];
                          v265 = *v263;
                          v264 = v263 + 2;
                          v259 += ~(v259 >> 1);
                          if (v265 < v258)
                            v260 = v264;
                          else
                            v259 = v262;
                        }
                        while (v259);
                        if (v260 != v261 && *v260 == v258)
                          v266 = v260[1];
                        else
LABEL_356:
                          v266 = 0;
                        v267 = 1;
                        v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v256, v266, v234, v235 - (char *)v234, 8, 1, 1);
                        v345 = (mlir::GenericProgramPoint *)((char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v253, &v344)- 16);
                        LOBYTE(v344) = 1;
                        v268 = mlir::OpBuilder::create<mlir::mps::ReductionSumOp,mlir::Value &,mlir::Value &,BOOL &>((mlir::UnitAttr **)v319, v253, (uint64_t *)&v334, (uint64_t *)&v345, (unsigned __int8 *)&v344);
                        if (mlir::mps::inferTypes(v268, v269))
                        {
                          v333 = (uint64_t *)((char *)v268 - 16);
                          goto LABEL_359;
                        }
LABEL_406:
                        if (v234)
                          operator delete(v234);
                        v81 = v318;
                        if ((v267 & 1) == 0)
                          goto LABEL_113;
                        v7 = 0;
LABEL_422:
                        v80 = __p;
                        if (!__p)
                          return v7;
LABEL_423:
                        v338 = (unint64_t)v80;
                        operator delete(v80);
                        return v7;
                      }
LABEL_359:
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v347);
                      if (v270)
                      {
                        if (!(v270 >> 61))
                        {
                          v271 = 8 * v270;
                          v272 = (char *)operator new(8 * v270);
                          v273 = &v272[v271];
                          v274 = v272;
                          if ((v236 & 0x8000000000000000) == 0)
                            goto LABEL_367;
LABEL_403:
                          std::vector<long long>::__assign_with_size[abi:nn180100]<long long *,long long *>(&__p, v274, v272, (v272 - v274) >> 3);
                          if (v274)
                            operator delete(v274);
                          v267 = 0;
                          goto LABEL_406;
                        }
LABEL_425:
                        abort();
                      }
                      v272 = 0;
                      v273 = 0;
                      v274 = 0;
                      if (v236 < 0)
                        goto LABEL_403;
LABEL_367:
                      while (2)
                      {
                        v275 = *((_QWORD *)__p + v236);
                        if (v272 < v273)
                        {
                          *(_QWORD *)v272 = v275;
                          v272 += 8;
                        }
                        else
                        {
                          v276 = (v272 - v274) >> 3;
                          v277 = v276 + 1;
                          if ((unint64_t)(v276 + 1) >> 61)
                            goto LABEL_425;
                          if ((v273 - v274) >> 2 > v277)
                            v277 = (v273 - v274) >> 2;
                          if ((unint64_t)(v273 - v274) >= 0x7FFFFFFFFFFFFFF8)
                            v278 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v278 = v277;
                          if (v278)
                          {
                            if (v278 >> 61)
                              goto LABEL_426;
                            v279 = operator new(8 * v278);
                          }
                          else
                          {
                            v279 = 0;
                          }
                          v280 = &v279[8 * v276];
                          *(_QWORD *)v280 = v275;
                          v281 = v280 + 8;
                          if (v272 != v274)
                          {
                            v282 = v272 - v274 - 8;
                            if (v282 < 0x168)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v285 = (v272 - 8 - v274) & 0xFFFFFFFFFFFFFFF8;
                            if (&v279[v272 - v274 - 8 - v285] > &v279[v272 - v274 - 8])
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if (&v272[-v285 - 8] > v272 - 8)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            if ((unint64_t)(v274 - v279) < 0x20)
                            {
                              v283 = v272;
                              goto LABEL_381;
                            }
                            v286 = (v282 >> 3) + 1;
                            v287 = 8 * (v286 & 0x3FFFFFFFFFFFFFFCLL);
                            v283 = &v272[-v287];
                            v280 -= v287;
                            v288 = &v279[8 * v276 - 16];
                            v289 = v272 - 16;
                            v290 = v286 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v291 = *(_OWORD *)v289;
                              *(v288 - 1) = *((_OWORD *)v289 - 1);
                              *v288 = v291;
                              v288 -= 2;
                              v289 -= 32;
                              v290 -= 4;
                            }
                            while (v290);
                            if (v286 != (v286 & 0x3FFFFFFFFFFFFFFCLL))
                            {
                              do
                              {
LABEL_381:
                                v284 = *((_QWORD *)v283 - 1);
                                v283 -= 8;
                                *((_QWORD *)v280 - 1) = v284;
                                v280 -= 8;
                              }
                              while (v283 != v274);
                            }
                          }
                          v273 = &v279[8 * v278];
                          if (v274)
                            operator delete(v274);
                          v274 = v280;
                          v272 = v281;
                        }
                        v293 = v236-- <= 0;
                        if (v293)
                        {
                          v292 = v272 - 8;
                          v293 = v274 != v272 && v292 > v274;
                          if (v293)
                          {
                            v294 = v274 + 8;
                            do
                            {
                              v295 = *((_QWORD *)v294 - 1);
                              *((_QWORD *)v294 - 1) = *(_QWORD *)v292;
                              *(_QWORD *)v292 = v295;
                              v292 -= 8;
                              v210 = v294 >= v292;
                              v294 += 8;
                            }
                            while (!v210);
                          }
                          goto LABEL_403;
                        }
                        continue;
                      }
                    }
                    if (v231 >= v232)
                      break;
                    *(_QWORD *)v231 = v237;
                    v235 = v231 + 8;
LABEL_314:
                    v236 = v233 - 1;
                    v231 = v235;
                    v293 = v233-- <= 0;
                    if (v293)
                      goto LABEL_346;
                  }
                  v238 = (v231 - (char *)v234) >> 3;
                  v239 = v238 + 1;
                  if ((unint64_t)(v238 + 1) >> 61)
                    goto LABEL_425;
                  if ((v232 - (char *)v234) >> 2 > v239)
                    v239 = (v232 - (char *)v234) >> 2;
                  if ((unint64_t)(v232 - (char *)v234) >= 0x7FFFFFFFFFFFFFF8)
                    v240 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v240 = v239;
                  if (v240)
                  {
                    if (v240 >> 61)
                      goto LABEL_426;
                    v241 = operator new(8 * v240);
                  }
                  else
                  {
                    v241 = 0;
                  }
                  v242 = (uint64_t *)&v241[8 * v238];
                  *v242 = v237;
                  v235 = (char *)(v242 + 1);
                  if (v231 != (char *)v234)
                  {
                    v243 = v231 - (char *)v234 - 8;
                    if (v243 >= 0x168)
                    {
                      v246 = (v231 - 8 - (char *)v234) & 0xFFFFFFFFFFFFFFF8;
                      if (&v241[v231 - (char *)v234 - 8 - v246] > &v241[v231 - (char *)v234 - 8])
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if (&v231[-v246 - 8] > v231 - 8)
                      {
                        v244 = (uint64_t *)v231;
                      }
                      else if ((unint64_t)((char *)v234 - v241) >= 0x20)
                      {
                        v247 = (v243 >> 3) + 1;
                        v248 = 8 * (v247 & 0x3FFFFFFFFFFFFFFCLL);
                        v244 = (uint64_t *)&v231[-v248];
                        v242 = (uint64_t *)((char *)v242 - v248);
                        v249 = &v241[8 * v238 - 16];
                        v250 = (__int128 *)(v231 - 16);
                        v251 = v247 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v252 = *v250;
                          *(v249 - 1) = *(v250 - 1);
                          *v249 = v252;
                          v249 -= 2;
                          v250 -= 2;
                          v251 -= 4;
                        }
                        while (v251);
                        if (v247 == (v247 & 0x3FFFFFFFFFFFFFFCLL))
                          goto LABEL_331;
                      }
                      else
                      {
                        v244 = (uint64_t *)v231;
                      }
                    }
                    else
                    {
                      v244 = (uint64_t *)v231;
                    }
                    do
                    {
                      v245 = *--v244;
                      *--v242 = v245;
                    }
                    while (v244 != v234);
                  }
LABEL_331:
                  v232 = &v241[8 * v240];
                  if (v234)
                    operator delete(v234);
                  v234 = v242;
                  goto LABEL_314;
                }
LABEL_260:
                v191 = mlir::getNegativeAxis(0, (v113 - v94) >> 3);
                v192 = v191;
                if (v114 < v325)
                {
                  *(_QWORD *)v114 = v191;
                  v114 += 8;
                  goto LABEL_283;
                }
                v193 = v114 - v101;
                v194 = v101;
                v195 = (v114 - v101) >> 3;
                v196 = v195 + 1;
                if ((unint64_t)(v195 + 1) >> 61)
                  goto LABEL_425;
                v197 = v114;
                v198 = v194;
                v199 = v325 - v194;
                v200 = (v325 - v194) >> 2;
                if (v200 > v196)
                  v196 = v200;
                if (v199 >= 0x7FFFFFFFFFFFFFF8)
                  v196 = 0x1FFFFFFFFFFFFFFFLL;
                if (v196)
                {
                  if (v196 >> 61)
                    goto LABEL_426;
                  v201 = (char *)operator new(8 * v196);
                }
                else
                {
                  v201 = 0;
                }
                v202 = &v201[8 * v195];
                *(_QWORD *)v202 = v192;
                v114 = v202 + 8;
                if (v197 == v198)
                {
                  v205 = v198;
                }
                else
                {
                  v203 = v197 - v198 - 8;
                  if (v203 >= 0x58 && (unint64_t)(v197 - v201 - v193) >= 0x20)
                  {
                    v302 = (v203 >> 3) + 1;
                    v303 = 8 * (v302 & 0x3FFFFFFFFFFFFFFCLL);
                    v204 = &v197[-v303];
                    v202 -= v303;
                    v304 = &v201[8 * v195 - 16];
                    v305 = v197 - 16;
                    v306 = v302 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v307 = *(_OWORD *)v305;
                      *((_OWORD *)v304 - 1) = *((_OWORD *)v305 - 1);
                      *(_OWORD *)v304 = v307;
                      v304 -= 32;
                      v305 -= 32;
                      v306 -= 4;
                    }
                    while (v306);
                    v205 = v198;
                    if (v302 == (v302 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_280;
                  }
                  else
                  {
                    v204 = v197;
                    v205 = v198;
                  }
                  do
                  {
                    v206 = *((_QWORD *)v204 - 1);
                    v204 -= 8;
                    *((_QWORD *)v202 - 1) = v206;
                    v202 -= 8;
                  }
                  while (v204 != v205);
                }
LABEL_280:
                if (v205)
                  operator delete(v205);
                v101 = v202;
                goto LABEL_283;
              }
              v183 = v101;
              v184 = (v106 - v94) >> 3;
              v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 61)
                goto LABEL_425;
              if ((v332 - v94) >> 2 > v185)
                v185 = (v332 - v94) >> 2;
              if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                v185 = 0x1FFFFFFFFFFFFFFFLL;
              if (v185)
              {
                if (v185 >> 61)
                  goto LABEL_426;
                v186 = operator new(8 * v185);
              }
              else
              {
                v186 = 0;
              }
              v187 = (uint64_t *)&v186[8 * v184];
              *v187 = v112;
              v113 = (char *)(v187 + 1);
              if (v106 == v94)
              {
                v101 = v183;
                v114 = v326;
                if (!v94)
                {
LABEL_259:
                  v94 = (char *)v187;
                  if (!v111)
                    goto LABEL_283;
                  goto LABEL_260;
                }
LABEL_258:
                operator delete(v94);
                goto LABEL_259;
              }
              v188 = v106 - v94 - 8;
              if (v188 >= 0x58 && (unint64_t)(v94 - v186) >= 0x20)
              {
                v296 = (v188 >> 3) + 1;
                v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
                v189 = &v106[-v297];
                v187 = (uint64_t *)((char *)v187 - v297);
                v298 = &v186[8 * v184 - 16];
                v299 = v106 - 16;
                v300 = v296 & 0x3FFFFFFFFFFFFFFCLL;
                v114 = v326;
                do
                {
                  v301 = *(_OWORD *)v299;
                  *(v298 - 1) = *((_OWORD *)v299 - 1);
                  *v298 = v301;
                  v298 -= 2;
                  v299 -= 32;
                  v300 -= 4;
                }
                while (v300);
                v101 = v183;
                if (v296 == (v296 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_257:
                  if (!v94)
                    goto LABEL_259;
                  goto LABEL_258;
                }
              }
              else
              {
                v189 = v106;
                v101 = v183;
                v114 = v326;
              }
              do
              {
                v190 = *((_QWORD *)v189 - 1);
                v189 -= 8;
                *--v187 = v190;
              }
              while (v189 != v94);
              goto LABEL_257;
            }
            v115 = v99;
            v329 = v103;
            v330 = -v88;
            v116 = -2;
            v112 = 1;
            while (1)
            {
              if (!v111)
              {
                if (v115 == v116)
                {
                  v119 = v332;
                  if (v106 < v332)
                  {
                    *(_QWORD *)v106 = v112;
                    v120 = v106 + 8;
LABEL_184:
                    v332 = v119;
                    v112 = *(_QWORD *)(v329 + 8 * mlir::getPositiveAxis(v115, v88));
                    if (v89 - 8 == v90)
                    {
                      v115 = 0x7FFFFFFFFFFFFFFFLL;
                      v111 = 1;
                      v106 = v120;
                      v89 = v90;
                    }
                    else
                    {
                      v115 = *((_QWORD *)v89 - 2);
                      v111 = 1;
                      v106 = v120;
                      v89 -= 8;
                    }
                    v103 = v329;
                    goto LABEL_146;
                  }
                  v328 = v115;
                  v124 = (v106 - v94) >> 3;
                  v125 = v124 + 1;
                  if ((unint64_t)(v124 + 1) >> 61)
                    goto LABEL_425;
                  if ((v332 - v94) >> 2 > v125)
                    v125 = (v332 - v94) >> 2;
                  if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
                    v126 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v126 = v125;
                  v323 = v89;
                  if (v126)
                  {
                    if (v126 >> 61)
                      goto LABEL_426;
                    v127 = operator new(8 * v126);
                  }
                  else
                  {
                    v127 = 0;
                  }
                  v133 = (uint64_t *)&v127[8 * v124];
                  *v133 = v112;
                  v120 = (char *)(v133 + 1);
                  if (v106 != v94)
                  {
                    v134 = v106 - v94 - 8;
                    if (v134 < 0x168
                      || (v162 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8,
                          &v127[v106 - v94 - 8 - v162] > &v127[v106 - v94 - 8])
                      || &v106[-v162 - 8] > v106 - 8
                      || (unint64_t)(v94 - v127) < 0x20)
                    {
                      v135 = v106;
                      v90 = v321;
                      v88 = v322;
                    }
                    else
                    {
                      v163 = (v134 >> 3) + 1;
                      v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v135 = &v106[-v164];
                      v133 = (uint64_t *)((char *)v133 - v164);
                      v165 = &v127[8 * v124 - 16];
                      v166 = v106 - 16;
                      v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      v88 = v322;
                      do
                      {
                        v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        *v165 = v168;
                        v165 -= 2;
                        v166 -= 32;
                        v167 -= 4;
                      }
                      while (v167);
                      v90 = v321;
                      if (v163 == (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_181:
                        v119 = &v127[8 * v126];
                        if (v94)
                          goto LABEL_182;
                        goto LABEL_183;
                      }
                    }
                    do
                    {
                      v136 = *((_QWORD *)v135 - 1);
                      v135 -= 8;
                      *--v133 = v136;
                    }
                    while (v135 != v94);
                    goto LABEL_181;
                  }
                  v90 = v321;
                  v88 = v322;
                  v119 = &v127[8 * v126];
                  if (v94)
LABEL_182:
                    operator delete(v94);
LABEL_183:
                  v94 = (char *)v133;
                  v89 = v323;
                  v115 = v328;
                  goto LABEL_184;
                }
                v117 = v115;
                v118 = mlir::getPositiveAxis(v116, v88);
                v115 = v117;
                v111 = 0;
                v112 *= *(_QWORD *)(v103 + 8 * v118);
                goto LABEL_146;
              }
              if (v115 == v116)
              {
                v112 *= *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v115, v88));
                if (v89 - 8 == v90)
                {
                  v115 = 0x7FFFFFFFFFFFFFFFLL;
                  v111 = 1;
                  v89 = v90;
                }
                else
                {
                  v115 = *((_QWORD *)v89 - 2);
                  v111 = 1;
                  v89 -= 8;
                }
                goto LABEL_146;
              }
              v121 = v332;
              v327 = v115;
              if (v106 >= v332)
                break;
              *(_QWORD *)v106 = v112;
              v122 = v106 + 8;
              v123 = (uint64_t *)v326;
LABEL_196:
              v112 = *(_QWORD *)(v103 + 8 * mlir::getPositiveAxis(v116, v88));
              v142 = mlir::getNegativeAxis(0, (v122 - v94) >> 3);
              v143 = v122;
              v144 = v142;
              v332 = v121;
              if (v123 >= (uint64_t *)v325)
              {
                v320 = v143;
                v145 = v101;
                v146 = (char *)v123 - v101;
                v147 = v146 >> 3;
                v148 = (v146 >> 3) + 1;
                if (v148 >> 61)
                  goto LABEL_425;
                v149 = v123;
                v150 = (uint64_t *)v145;
                v151 = v325 - v145;
                v152 = (v325 - v145) >> 2;
                if (v152 > v148)
                  v148 = v152;
                if (v151 >= 0x7FFFFFFFFFFFFFF8)
                  v153 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v153 = v148;
                v324 = v89;
                if (v153)
                {
                  if (v153 >> 61)
                    goto LABEL_426;
                  v154 = (char *)operator new(8 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v155 = &v154[8 * v147];
                *(_QWORD *)v155 = v144;
                v156 = v155 + 8;
                if (v149 == v150)
                {
                  v90 = v321;
                  v88 = v322;
                  v103 = v329;
                  goto LABEL_218;
                }
                v157 = (char *)v149 - (char *)v150 - 8;
                v90 = v321;
                if (v157 < 0x168
                  || (v176 = ((char *)(v149 - 1) - (char *)v150) & 0xFFFFFFFFFFFFFFF8,
                      &v154[v146 - 8 - v176] > &v154[v146 - 8])
                  || (uint64_t *)((char *)v149 - v176 - 8) > v149 - 1
                  || (unint64_t)((char *)v149 - v154 - v146) < 0x20)
                {
                  v158 = v149;
                  v88 = v322;
                  v103 = v329;
                }
                else
                {
                  v177 = (v157 >> 3) + 1;
                  v178 = 8 * (v177 & 0x3FFFFFFFFFFFFFFCLL);
                  v158 = &v149[v178 / 0xFFFFFFFFFFFFFFF8];
                  v155 -= v178;
                  v179 = &v154[8 * v147 - 16];
                  v180 = v149 - 2;
                  v181 = v177 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v182 = *(_OWORD *)v180;
                    *((_OWORD *)v179 - 1) = *((_OWORD *)v180 - 1);
                    *(_OWORD *)v179 = v182;
                    v179 -= 32;
                    v180 -= 4;
                    v181 -= 4;
                  }
                  while (v181);
                  v88 = v322;
                  v103 = v329;
                  if (v177 == (v177 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_218:
                    v325 = &v154[8 * v153];
                    if (v150)
                    {
                      v160 = v150;
                      v161 = v156;
                      operator delete(v160);
                      v111 = 0;
                      v101 = v155;
                      v326 = v161;
                    }
                    else
                    {
                      v111 = 0;
                      v101 = v155;
                      v326 = v156;
                    }
                    v106 = v320;
                    v89 = v324;
                    v115 = v327;
                    goto LABEL_146;
                  }
                }
                do
                {
                  v159 = *--v158;
                  *((_QWORD *)v155 - 1) = v159;
                  v155 -= 8;
                }
                while (v158 != v150);
                goto LABEL_218;
              }
              v111 = 0;
              *v123 = v142;
              v326 = (char *)(v123 + 1);
              v106 = v143;
              v90 = v321;
              v115 = v327;
LABEL_146:
              v293 = v116-- <= v330;
              if (v293)
                goto LABEL_142;
            }
            v128 = (v106 - v94) >> 3;
            v129 = v128 + 1;
            if ((unint64_t)(v128 + 1) >> 61)
              goto LABEL_425;
            if ((v332 - v94) >> 2 > v129)
              v129 = (v332 - v94) >> 2;
            if ((unint64_t)(v332 - v94) >= 0x7FFFFFFFFFFFFFF8)
              v130 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v130 = v129;
            if (v130)
            {
              if (v130 >> 61)
                goto LABEL_426;
              v131 = v89;
              v132 = operator new(8 * v130);
            }
            else
            {
              v131 = v89;
              v132 = 0;
            }
            v137 = (uint64_t *)&v132[8 * v128];
            *v137 = v112;
            v138 = (char *)(v137 + 1);
            if (v106 == v94)
            {
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
              v121 = &v132[8 * v130];
              if (!v94)
                goto LABEL_195;
              goto LABEL_194;
            }
            v139 = v106 - v94 - 8;
            if (v139 < 0x168
              || (v169 = (v106 - 8 - v94) & 0xFFFFFFFFFFFFFFF8, &v132[v106 - v94 - 8 - v169] > &v132[v106 - v94 - 8])
              || &v106[-v169 - 8] > v106 - 8
              || (unint64_t)(v94 - v132) < 0x20)
            {
              v140 = v106;
              v88 = v322;
              v123 = (uint64_t *)v326;
              v122 = (char *)(v137 + 1);
            }
            else
            {
              v170 = (v139 >> 3) + 1;
              v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
              v140 = &v106[-v171];
              v137 = (uint64_t *)((char *)v137 - v171);
              v172 = &v132[8 * v128 - 16];
              v173 = v106 - 16;
              v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
              v88 = v322;
              do
              {
                v175 = *(_OWORD *)v173;
                *(v172 - 1) = *((_OWORD *)v173 - 1);
                *v172 = v175;
                v172 -= 2;
                v173 -= 32;
                v174 -= 4;
              }
              while (v174);
              v123 = (uint64_t *)v326;
              v122 = v138;
              if (v170 == (v170 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                v121 = &v132[8 * v130];
                if (!v94)
                {
LABEL_195:
                  v94 = (char *)v137;
                  v89 = v131;
                  v103 = v329;
                  goto LABEL_196;
                }
LABEL_194:
                operator delete(v94);
                goto LABEL_195;
              }
            }
            do
            {
              v141 = *((_QWORD *)v140 - 1);
              v140 -= 8;
              *--v137 = v141;
            }
            while (v140 != v94);
            goto LABEL_193;
          }
          v88 = v322;
        }
        else
        {
          v98 = v89 - 8;
          v99 = *((_QWORD *)v89 - 1);
          if (v99 != -1)
          {
            v101 = 0;
            v100 = 0;
            v325 = 0;
            goto LABEL_130;
          }
          v97 = (char *)operator new(8uLL);
          v325 = v97 + 8;
        }
        *(_QWORD *)v97 = -1;
        v100 = v97 + 8;
        if (v98 == v90)
        {
          v99 = 0x7FFFFFFFFFFFFFFFLL;
          v89 = v90;
        }
        else
        {
          v99 = *((_QWORD *)v89 - 2);
          v89 = v98;
        }
        v101 = v97;
        goto LABEL_130;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v347 = v308;
      v309 = mlir::Builder::getIntegerType(v319, 0x40u, 1);
      v334 = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&v347, 1, v309, 0);
      v310 = (_BYTE *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      v311 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v342);
      llvm::SmallVector<long long,4u>::SmallVector<long long const*,void>(&v347, v310, (_BYTE *)(v311 + 8 * v312));
      v313 = *(_QWORD *)(v81 + 24);
      v314 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v334);
      v344 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v314, v315, v347, 8 * v348, 8, 1, 1);
      v345 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>(v319, v313, &v344);
      v316 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::UnitAttr **)v319, *(_QWORD *)(v81 + 24), (uint64_t *)&v333, &v345);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)v317 + 32))(v317, v81, v316);
      if (v347 != v349)
        free(v347);
LABEL_420:
      v7 = 1;
      goto LABEL_422;
    }
    v54 = v53;
    v55 = (char *)v338;
    while (1)
    {
      v57 = -v54;
      if (v55 >= v339)
        break;
      *(_QWORD *)v55 = v57;
      v56 = v55 + 8;
LABEL_61:
      v338 = (unint64_t)v56;
      v55 = v56;
      if (!(_DWORD)--v54)
        goto LABEL_100;
    }
    v58 = (char *)__p;
    v59 = v55 - (_BYTE *)__p;
    v60 = (v55 - (_BYTE *)__p) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_425;
    v62 = v339 - (_BYTE *)__p;
    if ((v339 - (_BYTE *)__p) >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 61)
LABEL_426:
        std::__throw_bad_array_new_length[abi:nn180100]();
      v64 = operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v60];
    *(_QWORD *)v65 = v57;
    v56 = v65 + 8;
    if (v55 == v58)
      goto LABEL_77;
    v66 = v55 - v58 - 8;
    if (v66 < 0x168)
    {
      v67 = v55;
      goto LABEL_76;
    }
    v69 = (v55 - 8 - v58) & 0xFFFFFFFFFFFFFFF8;
    if (&v64[v59 - 8 - v69] > &v64[v59 - 8])
    {
      v67 = v55;
    }
    else
    {
      if (&v55[-v69 - 8] <= v55 - 8)
      {
        if ((unint64_t)(v55 - v64 - v59) < 0x20)
        {
          v67 = v55;
          goto LABEL_76;
        }
        v70 = (v66 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v55[-v71];
        v65 -= v71;
        v72 = &v64[8 * v60 - 16];
        v73 = v55 - 16;
        v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_76;
LABEL_77:
        __p = v65;
        v339 = &v64[8 * v63];
        if (v58)
          operator delete(v58);
        goto LABEL_61;
      }
      v67 = v55;
    }
    do
    {
LABEL_76:
      v68 = *((_QWORD *)v67 - 1);
      v67 -= 8;
      *((_QWORD *)v65 - 1) = v68;
      v65 -= 8;
    }
    while (v67 != v58);
    goto LABEL_77;
  }
  return 0;
}

void mlir::mps::`anonymous namespace'::CanonicalizeMatMulTranspose::~CanonicalizeMatMulTranspose(mlir::mps::_anonymous_namespace_::CanonicalizeMatMulTranspose *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

BOOL mlir::mps::`anonymous namespace'::CanonicalizeMatMulTranspose::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t Filter;
  uint64_t Input;
  uint64_t v13;

  v13 = a2;
  if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v13)
    || (result = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v13)))
  {
    Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v13);
    Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v13);
    if (mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&v13))
    {
      v5 = *(_QWORD *)(v13 + 24);
      v9 = -2;
      v10 = -1;
      Input = (uint64_t)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 8), v5, &Input, &v10, &v9)- 16;
    }
    if (mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v13))
    {
      v6 = *(_QWORD *)(v13 + 24);
      v9 = -2;
      v10 = -1;
      Filter = (uint64_t)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 8), v6, &Filter, &v10, &v9)- 16;
    }
    v7 = v13;
    v8 = mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value &,mlir::Value &>((mlir::BoolAttr **)(a3 + 8), *(_QWORD *)(v13 + 24), &Input, &Filter);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v7, v8);
    return 1;
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value &,mlir::Value &>(mlir::BoolAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.matmul", (const unsigned __int8 *)0xA, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.matmul";
    v17[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::MatMulOp::build(a1, (uint64_t)v19, *a3, *a4, 0, 0);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::mps::`anonymous namespace'::CanonicalizeMatMul1D::~CanonicalizeMatMul1D(mlir::mps::_anonymous_namespace_::CanonicalizeMatMul1D *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeMatMul1D::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Float32Type **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OperandRange;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ArgAttrsAttr;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  mlir::GenericProgramPoint *Filter;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD v56[2];
  _QWORD v57[2];
  uint64_t v58;
  unint64_t v59[2];
  uint64_t *v60[3];

  v60[2] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v58 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v57[0] = v4;
  v57[1] = v14;
  v15 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v58) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15)
    goto LABEL_20;
  v16 = *v15;
  v17 = mlir::TypeID::get<mlir::ShapedType>();
  v18 = *(unsigned int *)(v16 + 16);
  if (!(_DWORD)v18)
    goto LABEL_20;
  v19 = *(_QWORD **)(v16 + 8);
  v20 = &v19[2 * v18];
  do
  {
    v21 = v18 >> 1;
    v22 = &v19[2 * (v18 >> 1)];
    v24 = *v22;
    v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17)
      v19 = v23;
    else
      v18 = v21;
  }
  while (v18);
  if (v19 != v20 && *v19 == v17)
    v25 = v19[1];
  else
LABEL_20:
    v25 = 0;
  v56[0] = v15;
  v56[1] = v25;
  v26 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v58) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v26)
    goto LABEL_30;
  v27 = *v26;
  v28 = mlir::TypeID::get<mlir::ShapedType>();
  v29 = *(unsigned int *)(v27 + 16);
  if (!(_DWORD)v29)
    goto LABEL_30;
  v30 = *(_QWORD **)(v27 + 8);
  v31 = &v30[2 * v29];
  do
  {
    v32 = v29 >> 1;
    v33 = &v30[2 * (v29 >> 1)];
    v35 = *v33;
    v34 = v33 + 2;
    v29 += ~(v29 >> 1);
    if (v35 < v28)
      v30 = v34;
    else
      v29 = v32;
  }
  while (v29);
  if (v30 != v31 && *v30 == v28)
    v36 = v30[1];
  else
LABEL_30:
    v36 = 0;
  v55[0] = v26;
  v55[1] = v36;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v57))
    return 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56))
    return 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v55))
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
  if (v37)
    return 0;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v56);
  if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v55))
    return 0;
  v39 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v57);
  if (v39 != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v56))
    return 0;
  v42 = *(_QWORD *)(v58 + 24);
  v60[0] = (uint64_t *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v58);
  Filter = (mlir::GenericProgramPoint *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v58);
  v52[0] = mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>(a3 + 1, v42, (uint64_t *)v60, (uint64_t *)&Filter);
  v43 = (uint64_t *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v52);
  v54 = (uint64_t)v43;
  v60[0] = (uint64_t *)(v43[1] & 0xFFFFFFFFFFFFFFF8);
  v52[0] = mlir::Type::cast<mlir::ShapedType>(v60);
  v52[1] = v44;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
  if (v45)
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v52);
    if (*(_QWORD *)(ArgAttrsAttr + 8 * v47 - 8) == 1)
    {
      v48 = *(_QWORD *)(v58 + 24);
      v60[0] = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
      v60[1] = v49;
      Filter = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,llvm::ArrayRef<long long>>((mlir::Builder *)(a3 + 1), v48, &v54, (uint64_t)v60);
      v50 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Filter);
    }
    else
    {
      v60[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ReductionSumOp,mlir::Value &>(a3 + 1, *(_QWORD *)(v58 + 24), (uint64_t)&v54);
      v50 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v60);
    }
    v43 = (uint64_t *)v50;
    v54 = v50;
  }
  v51 = v58;
  v60[0] = v43;
  v40 = 1;
  mlir::ValueRange::ValueRange(v59, (uint64_t)v60, 1uLL);
  (*((void (**)(mlir::Float32Type **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, v51, v59[0], v59[1]);
  return v40;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReductionSumOp,mlir::Value &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_sum", (const unsigned __int8 *)0x11, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mps.reduction_sum";
    v15[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::ReductionSumOp::build(a1, (uint64_t)v17, a3, 1, 0, 0);
  v9 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DOp>::~CanonicalizeConvToDepthwise(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DOp>::~CanonicalizeConvToDepthwise(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *ArgAttrsAttr;
  uint64_t v29;
  size_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int StorageType;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int WeightsLayout;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t IntegerType;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  char *v76;
  int v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  mlir::GenericProgramPoint *v84;
  uint64_t *Input;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[2];
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *InputAttributeNames;
  uint64_t v95;
  _BYTE v96[48];
  uint64_t Rewriter;
  void *Strides;
  uint64_t v99;
  _BYTE v100[48];
  void *__src;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  _BYTE v109[32];
  _QWORD *v110;
  uint64_t v111;
  _QWORD v112[5];

  v112[4] = *MEMORY[0x1E0C80C00];
  v91 = 0;
  v92 = a2;
  v4 = *(_QWORD *)(a2 + 24);
  v90 = 0;
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v92) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v90 = v5;
  v91 = v15;
  v16 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v92) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v89[0] = v16;
  v89[1] = v26;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v90)
    && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v89) & 1) != 0)
  {
    ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v89);
    v29 = v27;
    v110 = v112;
    v111 = 0x400000000;
    v30 = 8 * v27;
    if ((unint64_t)(8 * v27) < 0x21)
    {
      v31 = 0;
      if (!v27)
        goto LABEL_32;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, v112, (8 * v27) >> 3, 8);
      v31 = v111;
      if (!v29)
      {
LABEL_32:
        LODWORD(v111) = v31 + (v30 >> 3);
        StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v92);
        if (StorageType)
        {
          if (StorageType != 1)
          {
            v43 = "failed: unsupported data layout";
            goto LABEL_48;
          }
          v36 = -1;
          v37 = 3;
        }
        else
        {
          v36 = -3;
          v37 = 1;
        }
        v88 = v36;
        v38 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v90) + 8 * v37);
        WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v92);
        if (WeightsLayout == 2)
        {
          v42 = 0;
          v40 = 2;
          v41 = 1;
        }
        else
        {
          if (WeightsLayout != 3)
          {
            v43 = "failed: unsupported weights layout";
            goto LABEL_48;
          }
          v40 = 0;
          v41 = 2;
          v42 = 3;
        }
        if (v38 != 0x8000000000000000)
        {
          v44 = v110[v41];
          if (v44 != 0x8000000000000000)
          {
            v45 = v110[v42];
            if (v45 != 0x8000000000000000)
            {
              if (v44 == 1)
              {
                v49 = v45 / v38;
                if (v45 / v38 * v38 == v45
                  && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v92) == (void *)v38)
                {
                  if (v49 < 2)
                  {
                    if (mlir::ShapedType::hasStaticShape((mlir::ShapedType *)v89))
                    {
                      v107 = v109;
                      v108 = 0x400000000;
                      if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v92))
                      {
                        __src = (void *)v41;
                        v102 = v40;
                        v103 = v40 | 1;
                        v104 = v42;
                      }
                      else
                      {
                        __src = (void *)v41;
                        v102 = v42;
                        v103 = v40;
                        v104 = v40 | 1;
                      }
                      llvm::SmallVector<long long,4u>::operator=((uint64_t)&v107, &__src, 4);
                      __src = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v92);
                      v106 = 4;
                      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 1);
                      v86 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v106, 1, IntegerType, 0);
                      v52 = mlir::Type::cast<mlir::ShapedType>(&v86);
                      InputAttributeNames = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v52, v53, v107, 8 * v108, 8, 1, 1);
                      Strides = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v4, (uint64_t **)&InputAttributeNames);
                      v87 = (uint64_t)mlir::OpBuilder::create<mlir::mps::PermuteOp,mlir::Value,mlir::mps::ConstantOp>((mlir::OpBuilder *)(a3 + 1), v4, (uint64_t *)&__src, &Strides)- 16;
                      if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v92))
                        v54 = 3;
                      else
                        v54 = 0;
                      __src = &v103;
                      v102 = 0x600000000;
                      Strides = (void *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v92);
                      v55 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Strides);
                      mlir::getIntValues<unsigned long long>((uint64_t)v55, v56, (uint64_t)&__src, 1);
                      v57 = (char *)__src + 8 * v54;
                      v58 = v102;
                      v59 = (char *)__src + 8 * v102;
                      if (v59 != v57 + 8)
                      {
                        memmove(v57, v57 + 8, v59 - (v57 + 8));
                        v58 = v102;
                      }
                      LODWORD(v102) = v58 - 1;
                      InputAttributeNames = (void *)3;
                      v60 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 0);
                      Strides = (void *)mlir::RankedTensorType::get((uint64_t)&InputAttributeNames, 1, v60, 0);
                      v61 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&Strides);
                      v86 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v61, v62, __src, 8 * v102, 8, 1, 0);
                      Strides = v100;
                      v99 = 0x600000000;
                      InputAttributeNames = (void *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v92);
                      v63 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&InputAttributeNames);
                      mlir::getIntValues<unsigned long long>((uint64_t)v63, v64, (uint64_t)&Strides, 1);
                      v65 = (char *)Strides + 8 * v54;
                      v66 = v99;
                      v67 = (char *)Strides + 8 * v99;
                      if (v67 != v65 + 8)
                      {
                        memmove(v65, v65 + 8, v67 - (v65 + 8));
                        v66 = v99;
                      }
                      LODWORD(v99) = v66 - 1;
                      Rewriter = 3;
                      v68 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 0);
                      InputAttributeNames = (void *)mlir::RankedTensorType::get((uint64_t)&Rewriter, 1, v68, 0);
                      v69 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&InputAttributeNames);
                      v106 = mlir::DenseElementsAttr::getFromRawBuffer(v69, v70, Strides, 8 * v99, 8, 1, 0);
                      InputAttributeNames = v96;
                      v95 = 0x600000000;
                      Rewriter = mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v92);
                      v71 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Rewriter);
                      mlir::getIntValues<unsigned long long>((uint64_t)v71, v72, (uint64_t)&InputAttributeNames, 1);
                      v73 = (char *)InputAttributeNames;
                      v74 = (char *)InputAttributeNames + 16 * v54;
                      v75 = v95;
                      v76 = (char *)InputAttributeNames + 8 * v95;
                      if (v76 != v74 + 8)
                      {
                        memmove(v74, v74 + 8, v76 - (v74 + 8));
                        v75 = v95;
                        v73 = (char *)InputAttributeNames;
                      }
                      v77 = v75 - 1;
                      LODWORD(v95) = v77;
                      v78 = &v73[16 * v54];
                      v79 = &v73[8 * v77];
                      if (v79 != v78 + 8)
                      {
                        memmove(v78, v78 + 8, v79 - (v78 + 8));
                        v77 = v95;
                      }
                      LODWORD(v95) = v77 - 1;
                      v93 = 6;
                      v80 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 0);
                      Input = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v93, 1, v80, 0);
                      v81 = mlir::Type::cast<mlir::ShapedType>(&Input);
                      Rewriter = mlir::DenseElementsAttr::getFromRawBuffer(v81, v82, InputAttributeNames, 8 * v95, 8, 1, 0);
                      v83 = v92;
                      Input = (uint64_t *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v92);
                      LODWORD(v93) = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v92);
                      v84 = mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::Value,mlir::Value&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>((mlir::Builder *)(a3 + 1), *(_QWORD *)(v83 + 24), (uint64_t *)&Input, &v87, (uint64_t *)&v86, &v106, &Rewriter, (unsigned int *)&v93, &v88);
                      (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v83, v84);
                      if (InputAttributeNames != v96)
                        free(InputAttributeNames);
                      if (Strides != v100)
                        free(Strides);
                      if (__src != &v103)
                        free(__src);
                      if (v107 != v109)
                        free(v107);
                      v34 = 1;
                      goto LABEL_53;
                    }
                    v50 = "failed: weights must have a static shape";
                  }
                  else
                  {
                    v50 = "failed: channelsMultiplier must be 1";
                  }
                }
                else
                {
                  v50 = "failed: input channels must match the number of groups";
                }
              }
              else
              {
                v50 = "failed: weights must have only one input channel";
              }
              v47 = mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>((uint64_t)a3, &v92, v50);
              goto LABEL_51;
            }
          }
        }
        v43 = "failed: op has dynamic channels count";
LABEL_48:
        __src = v43;
        v105 = 259;
        v46 = v92;
        Strides = &__src;
        v34 = a3[2];
        if (!v34)
          goto LABEL_53;
        if (!mlir::RewriterBase::Listener::classof(v34))
        {
          v34 = 0;
LABEL_53:
          if (v110 != v112)
            free(v110);
          return v34;
        }
        v47 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v34 + 64))(v34, *(_QWORD *)(v46 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Strides);
LABEL_51:
        v34 = v47;
        goto LABEL_53;
      }
    }
    memcpy(&v110[v31], ArgAttrsAttr, v30);
    v31 = v111;
    goto LABEL_32;
  }
  __src = "failed: op has dynamic channels count";
  v105 = 259;
  v32 = v92;
  Strides = &__src;
  v33 = a3[2];
  if (v33 && mlir::RewriterBase::Listener::classof(a3[2]))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v33 + 64))(v33, *(_QWORD *)(v32 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Strides);
  else
    return 0;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  _QWORD *v10;

  v3 = 1;
  v9 = 1;
  if (*a3)
  {
    v7 = a3;
    v3 = 3;
  }
  v8 = v3;
  v4 = *a2;
  v10 = &v7;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  return result;
}

uint64_t llvm::SmallVector<long long,4u>::operator=(uint64_t a1, void *__src, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;

  v6 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v7 = (8 * a3) >> 3;
  if (v7 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v7, 8);
    v6 = *(_DWORD *)(a1 + 8);
  }
  if (a3)
  {
    memcpy((void *)(*(_QWORD *)a1 + 8 * v6), __src, 8 * a3);
    v6 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v6 + a3;
  return a1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::Value,mlir::Value&,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unsigned int *a8, _QWORD *a9)
{
  uint64_t *Context;
  uint64_t v18;
  char v19;
  mlir::GenericProgramPoint *v20;
  mlir::GenericProgramPoint *v21;
  uint64_t v23;
  const char *v24;
  __int16 v25;
  uint64_t v26[4];
  __int16 v27;
  _QWORD v28[39];

  v28[38] = *MEMORY[0x1E0C80C00];
  v23 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  v18 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.depthwise_conv_3d", (const unsigned __int8 *)0x15, Context);
  if (!v19)
  {
    v27 = 1283;
    v26[2] = (uint64_t)"mps.depthwise_conv_3d";
    v26[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v25 = 259;
    llvm::operator+(v26, (uint64_t *)&v24, (uint64_t)v28);
    llvm::report_fatal_error((llvm::Twine *)v28, 1);
  }
  mlir::OperationState::OperationState(v28, a2, v18);
  mlir::mps::DepthwiseConv3DOp::build(a1, (uint64_t)v28, *a3, *a4, *a5, *a6, *a7, *a8, *a9);
  v20 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v28);
  if (*(_UNKNOWN **)(*((_QWORD *)v20 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id)
    v21 = v20;
  else
    v21 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v28);
  return v21;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DDataGradientOp>::~CanonicalizeConvToDepthwise(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DDataGradientOp>::~CanonicalizeConvToDepthwise(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeConvToDepthwise<mlir::mps::Conv2DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *ArgAttrsAttr;
  uint64_t v29;
  size_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int StorageType;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int WeightsLayout;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t IntegerType;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int v75;
  char *v76;
  int v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  mlir::GenericProgramPoint *v84;
  unsigned int PaddingStyle;
  uint64_t *Input;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t SplitSizes;
  void *InputAttributeNames;
  uint64_t v96;
  _BYTE v97[48];
  uint64_t Rewriter;
  uint64_t **Strides;
  uint64_t v100;
  _BYTE v101[48];
  uint64_t *__src;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  _BYTE v110[32];
  _QWORD *v111;
  uint64_t v112;
  _QWORD v113[6];

  v113[4] = *MEMORY[0x1E0C80C00];
  v92 = 0;
  v93 = a2;
  v4 = *(_QWORD *)(a2 + 24);
  v91 = 0;
  v5 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v93) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  v91 = v5;
  v92 = v15;
  v16 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v93) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v90[0] = v16;
  v90[1] = v26;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v91)
    && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v90) & 1) != 0)
  {
    ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
    v29 = v27;
    v111 = v113;
    v112 = 0x400000000;
    v30 = 8 * v27;
    if ((unint64_t)(8 * v27) < 0x21)
    {
      v31 = 0;
      if (!v27)
        goto LABEL_32;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v111, v113, (8 * v27) >> 3, 8);
      v31 = v112;
      if (!v29)
      {
LABEL_32:
        LODWORD(v112) = v31 + (v30 >> 3);
        StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v93);
        if (StorageType)
        {
          if (StorageType != 1)
          {
            v43 = "failed: unsupported data layout";
            goto LABEL_48;
          }
          v36 = -1;
          v37 = 3;
        }
        else
        {
          v36 = -3;
          v37 = 1;
        }
        v89 = v36;
        v38 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v91) + 8 * v37);
        WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v93);
        if (WeightsLayout == 2)
        {
          v42 = 0;
          v40 = 2;
          v41 = 1;
        }
        else
        {
          if (WeightsLayout != 3)
          {
            v43 = "failed: unsupported weights layout";
            goto LABEL_48;
          }
          v40 = 0;
          v41 = 2;
          v42 = 3;
        }
        if (v38 != 0x8000000000000000)
        {
          v44 = v111[v41];
          if (v44 != 0x8000000000000000)
          {
            v45 = v111[v42];
            if (v45 != 0x8000000000000000)
            {
              if (v44 == 1)
              {
                v49 = v45 / v38;
                if (v45 / v38 * v38 == v45
                  && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v93) == (void *)v38)
                {
                  if (v49 < 2)
                  {
                    if (mlir::ShapedType::hasStaticShape((mlir::ShapedType *)v90))
                    {
                      v108 = v110;
                      v109 = 0x400000000;
                      if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v93))
                      {
                        __src = (uint64_t *)v41;
                        v103 = v40;
                        v104 = v40 | 1;
                        v105 = v42;
                      }
                      else
                      {
                        __src = (uint64_t *)v41;
                        v103 = v42;
                        v104 = v40;
                        v105 = v40 | 1;
                      }
                      llvm::SmallVector<long long,4u>::operator=((uint64_t)&v108, &__src, 4);
                      __src = (uint64_t *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v93);
                      v107 = 4;
                      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 1);
                      v87 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v107, 1, IntegerType, 0);
                      v52 = mlir::Type::cast<mlir::ShapedType>(&v87);
                      InputAttributeNames = (void *)mlir::DenseElementsAttr::getFromRawBuffer(v52, v53, v108, 8 * v109, 8, 1, 1);
                      Strides = (uint64_t **)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v4, (uint64_t **)&InputAttributeNames);
                      v88 = (uint64_t)mlir::OpBuilder::create<mlir::mps::PermuteOp,mlir::Value,mlir::mps::ConstantOp>((mlir::OpBuilder *)(a3 + 1), v4, (uint64_t *)&__src, &Strides)- 16;
                      if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v93))
                        v54 = 3;
                      else
                        v54 = 0;
                      __src = &v104;
                      v103 = 0x600000000;
                      Strides = (uint64_t **)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v93);
                      v55 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Strides);
                      mlir::getIntValues<unsigned long long>((uint64_t)v55, v56, (uint64_t)&__src, 1);
                      v57 = &__src[v54];
                      v58 = v103;
                      v59 = &__src[v103];
                      if (v59 != v57 + 1)
                      {
                        memmove(v57, v57 + 1, (char *)v59 - (char *)(v57 + 1));
                        v58 = v103;
                      }
                      LODWORD(v103) = v58 - 1;
                      InputAttributeNames = (void *)3;
                      v60 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 0);
                      Strides = (uint64_t **)mlir::RankedTensorType::get((uint64_t)&InputAttributeNames, 1, v60, 0);
                      v61 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&Strides);
                      v87 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v61, v62, __src, 8 * v103, 8, 1, 0);
                      Strides = (uint64_t **)v101;
                      v100 = 0x600000000;
                      InputAttributeNames = (void *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v93);
                      v63 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&InputAttributeNames);
                      mlir::getIntValues<unsigned long long>((uint64_t)v63, v64, (uint64_t)&Strides, 1);
                      v65 = (uint64_t *)&Strides[v54];
                      v66 = v100;
                      v67 = (uint64_t *)&Strides[v100];
                      if (v67 != v65 + 1)
                      {
                        memmove(v65, v65 + 1, (char *)v67 - (char *)(v65 + 1));
                        v66 = v100;
                      }
                      LODWORD(v100) = v66 - 1;
                      Rewriter = 3;
                      v68 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 0);
                      InputAttributeNames = (void *)mlir::RankedTensorType::get((uint64_t)&Rewriter, 1, v68, 0);
                      v69 = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&InputAttributeNames);
                      v107 = mlir::DenseElementsAttr::getFromRawBuffer(v69, v70, Strides, 8 * v100, 8, 1, 0);
                      InputAttributeNames = v97;
                      v96 = 0x600000000;
                      Rewriter = mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v93);
                      v71 = mlir::Attribute::cast<mlir::ElementsAttr>((uint64_t **)&Rewriter);
                      mlir::getIntValues<unsigned long long>((uint64_t)v71, v72, (uint64_t)&InputAttributeNames, 1);
                      v73 = (char *)InputAttributeNames;
                      v74 = (char *)InputAttributeNames + 16 * v54;
                      v75 = v96;
                      v76 = (char *)InputAttributeNames + 8 * v96;
                      if (v76 != v74 + 8)
                      {
                        memmove(v74, v74 + 8, v76 - (v74 + 8));
                        v75 = v96;
                        v73 = (char *)InputAttributeNames;
                      }
                      v77 = v75 - 1;
                      LODWORD(v96) = v77;
                      v78 = &v73[16 * v54];
                      v79 = &v73[8 * v77];
                      if (v79 != v78 + 8)
                      {
                        memmove(v78, v78 + 8, v79 - (v78 + 8));
                        v77 = v96;
                      }
                      LODWORD(v96) = v77 - 1;
                      SplitSizes = 6;
                      v80 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x40u, 0);
                      Input = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&SplitSizes, 1, v80, 0);
                      v81 = mlir::Type::cast<mlir::ShapedType>(&Input);
                      Rewriter = mlir::DenseElementsAttr::getFromRawBuffer(v81, v82, InputAttributeNames, 8 * v96, 8, 1, 0);
                      v83 = v93;
                      Input = (uint64_t *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v93);
                      SplitSizes = mlir::mps::SplitOp::getSplitSizes((mlir::mps::SplitOp *)&v93);
                      PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v93);
                      v84 = mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::Value,mlir::Value&,mlir::Value,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>((mlir::Builder *)(a3 + 1), *(_QWORD *)(v83 + 24), (uint64_t *)&Input, &v88, &SplitSizes, (uint64_t *)&v87, &v107, &Rewriter, &PaddingStyle, &v89);
                      (*(void (**)(uint64_t *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, v83, v84);
                      if (InputAttributeNames != v97)
                        free(InputAttributeNames);
                      if (Strides != (uint64_t **)v101)
                        free(Strides);
                      if (__src != &v104)
                        free(__src);
                      if (v108 != v110)
                        free(v108);
                      v34 = 1;
                      goto LABEL_53;
                    }
                    v50 = "failed: weights must have a static shape";
                  }
                  else
                  {
                    v50 = "failed: channelsMultiplier must be 1";
                  }
                }
                else
                {
                  v50 = "failed: input channels must match the number of groups";
                }
              }
              else
              {
                v50 = "failed: weights must have only one input channel";
              }
              v47 = mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>((uint64_t)a3, &v93, v50);
              goto LABEL_51;
            }
          }
        }
        v43 = "failed: op has dynamic channels count";
LABEL_48:
        __src = (uint64_t *)v43;
        v106 = 259;
        v46 = v93;
        Strides = &__src;
        v34 = a3[2];
        if (!v34)
          goto LABEL_53;
        if (!mlir::RewriterBase::Listener::classof(v34))
        {
          v34 = 0;
LABEL_53:
          if (v111 != v113)
            free(v111);
          return v34;
        }
        v47 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(_QWORD *)v34 + 64))(v34, *(_QWORD *)(v46 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Strides);
LABEL_51:
        v34 = v47;
        goto LABEL_53;
      }
    }
    memcpy(&v111[v31], ArgAttrsAttr, v30);
    v31 = v112;
    goto LABEL_32;
  }
  __src = (uint64_t *)"failed: op has dynamic channels count";
  v106 = 259;
  v32 = v93;
  Strides = &__src;
  v33 = a3[2];
  if (v33 && mlir::RewriterBase::Listener::classof(a3[2]))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t ***))(*(_QWORD *)v33 + 64))(v33, *(_QWORD *)(v32 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &Strides);
  else
    return 0;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  _QWORD *v10;

  v3 = 1;
  v9 = 1;
  if (*a3)
  {
    v7 = a3;
    v3 = 3;
  }
  v8 = v3;
  v4 = *a2;
  v10 = &v7;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::Value,mlir::Value&,mlir::Value,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::DenseIntElementsAttr &,mlir::mps::PaddingStyle,long long &>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, unsigned int *a9, _QWORD *a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  _QWORD v29[40];

  v29[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.depthwise_conv_3d_data_gradient", (const unsigned __int8 *)0x23, Context);
  if (!v20)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"mps.depthwise_conv_3d_data_gradient";
    v27[3] = 35;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::mps::DepthwiseConv3DDataGradientOp::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
  v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DDataGradientOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

void mlir::mps::`anonymous namespace'::CanonicalizeSparseMatMulTranspose::~CanonicalizeSparseMatMulTranspose(mlir::mps::_anonymous_namespace_::CanonicalizeSparseMatMulTranspose *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::SparseDenseMatMulOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::SparseDenseMatMulOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mpsx::SparseDenseMatMulOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

BOOL mlir::mps::`anonymous namespace'::CanonicalizeSparseMatMulTranspose::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v5;
  mlir::Operation *v6;
  mlir::GenericProgramPoint *v7;
  unsigned int StorageType;
  unsigned __int8 v9;
  BOOL TransposeLhs;
  uint64_t SparseShape;
  uint64_t Bias;
  uint64_t Filter;
  uint64_t Dense;
  mlir::GenericProgramPoint *v15;
  mlir::Operation *v16;

  v16 = a2;
  result = mlir::mpsx::SparseDenseMatMulOp::getTransposeRhs(&v16);
  if (result)
  {
    v5 = *((_QWORD *)v16 + 3);
    Dense = mlir::mpsx::SparseDenseMatMulOp::getDense((mlir::mpsx::SparseDenseMatMulOp *)&v16);
    LODWORD(Filter) = -1;
    LODWORD(Bias) = -2;
    v15 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 8), v5, &Dense, (unsigned int *)&Filter, (unsigned int *)&Bias);
    v6 = v16;
    Dense = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v16);
    Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v16);
    Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v16);
    SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v16);
    TransposeLhs = mlir::mpsx::SparseDenseMatMulOp::getTransposeLhs(&v16);
    v9 = 0;
    StorageType = mlir::mpsx::SparseDenseMatMulOp::getStorageType(&v16);
    v7 = mlir::OpBuilder::create<mlir::mpsx::SparseDenseMatMulOp,mlir::Value,mlir::Value,mlir::Value,mlir::Value,mlir::mps::TransposeOp &,BOOL,BOOL,mlir::mps::SparseTensorStorage>((mlir::BoolAttr **)(a3 + 8), *((_QWORD *)v6 + 3), &Dense, &Filter, &Bias, &SparseShape, &v15, (unsigned __int8 *)&TransposeLhs, &v9, &StorageType);
    (*(void (**)(uint64_t, mlir::Operation *, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v6, v7);
    return 1;
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::SparseDenseMatMulOp,mlir::Value,mlir::Value,mlir::Value,mlir::Value,mlir::mps::TransposeOp &,BOOL,BOOL,mlir::mps::SparseTensorStorage>(mlir::BoolAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, unsigned __int8 *a8, unsigned __int8 *a9, unsigned int *a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  _QWORD v29[40];

  v29[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.sparse_dense_matmul", (const unsigned __int8 *)0x18, Context);
  if (!v20)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"mpsx.sparse_dense_matmul";
    v27[3] = 24;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::mpsx::SparseDenseMatMulOp::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7 - 16, (mlir::MLIRContext *)*a8, *a9, *a10);
  v21 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::SparseDenseMatMulOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

void mlir::mps::`anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::~CanonicalizeQuantizedMatmulTranpose(mlir::mps::_anonymous_namespace_::CanonicalizeQuantizedMatmulTranpose *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::matchAndRewrite(uint64_t a1, mlir::Operation *a2, mlir::MLIRContext **a3)
{
  uint64_t InputScale;
  uint64_t InputZeroPoint;
  uint64_t InputMin;
  uint64_t InputQuantParamsAxisAttr;
  uint64_t TransposedInput;
  uint64_t v9;
  uint64_t WeightsScale;
  uint64_t WeightsZeroPoint;
  uint64_t WeightsMin;
  uint64_t WeightsQuantParamsAxisAttr;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  mlir::Operation *v17;
  mlir::GenericProgramPoint *v18;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t OutputType;
  uint64_t BiquantWeightsZeroPoint;
  uint64_t BiquantWeightsScale;
  uint64_t WeightsPaletteLut;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t Weights;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t Input;
  mlir::Operation *v36;

  v36 = a2;
  Input = mlir::mpsx::QuantizedMatMulOp::getInput(&v36);
  InputScale = mlir::mpsx::QuantizedMatMulOp::getInputScale(&v36);
  v34 = (char *)InputScale;
  InputZeroPoint = mlir::mpsx::QuantizedMatMulOp::getInputZeroPoint(&v36);
  v33 = (char *)InputZeroPoint;
  InputMin = mlir::mpsx::QuantizedMatMulOp::getInputMin(&v36);
  v32 = (char *)InputMin;
  InputQuantParamsAxisAttr = mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr(&v36);
  v31 = InputQuantParamsAxisAttr;
  v9 = TransposedInput;
  if (TransposedInput)
  {
    Input = TransposedInput;
  }
  Weights = mlir::mpsx::QuantizedMatMulOp::getWeights(&v36);
  WeightsScale = mlir::mpsx::QuantizedMatMulOp::getWeightsScale(&v36);
  v29 = (char *)WeightsScale;
  WeightsZeroPoint = mlir::mpsx::QuantizedMatMulOp::getWeightsZeroPoint(&v36);
  v28 = (char *)WeightsZeroPoint;
  WeightsMin = mlir::mpsx::QuantizedMatMulOp::getWeightsMin(&v36);
  v27 = (char *)WeightsMin;
  WeightsQuantParamsAxisAttr = mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v36);
  v26 = WeightsQuantParamsAxisAttr;
  v15 = v14;
  if (v14)
  {
    Weights = v14;
  }
  else if (!v9)
  {
    return 0;
  }
  v16 = v9 != 0;
  v17 = v36;
  WeightsPaletteLut = mlir::mpsx::QuantizedMatMulOp::getWeightsPaletteLut(&v36);
  BiquantWeightsScale = mlir::mpsx::QuantizedMatMulOp::getBiquantWeightsScale(&v36);
  BiquantWeightsZeroPoint = mlir::mpsx::QuantizedMatMulOp::getBiquantWeightsZeroPoint(&v36);
  OutputType = mlir::mpsx::QuantizedMatMulOp::getOutputType(&v36);
  v21 = mlir::mpsx::QuantizedMatMulOp::getTransposeLhs(&v36) ^ v16;
  v20 = mlir::mpsx::QuantizedMatMulOp::getTransposeRhs(&v36) ^ (v15 != 0);
  v18 = mlir::OpBuilder::create<mlir::mpsx::QuantizedMatMulOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::Value&,mlir::IntegerAttr &,mlir::Value&,mlir::Value&,mlir::Value&,mlir::Value&,mlir::IntegerAttr &,mlir::Value,mlir::detail::TypedValue<mlir::RankedTensorType>,mlir::detail::TypedValue<mlir::RankedTensorType>,mlir::Type,BOOL,BOOL>(a3 + 1, *((_QWORD *)v17 + 3), &Input, (uint64_t *)&v34, (uint64_t *)&v33, (uint64_t *)&v32, &v31, &Weights, (uint64_t *)&v29, (uint64_t *)&v28, (uint64_t *)&v27, &v26, &WeightsPaletteLut, &BiquantWeightsScale, &BiquantWeightsZeroPoint, &OutputType, &v21, &v20);
  (*((void (**)(mlir::MLIRContext **, mlir::Operation *, mlir::GenericProgramPoint *))*a3 + 4))(a3, v17, v18);
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::getTransposedInput(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  uint64_t Filter;
  unint64_t matched;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t Bias;
  unint64_t v24;
  char v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  int v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;

  v36 = a1;
  v1 = (uint64_t *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v1)
    goto LABEL_10;
  v2 = *v1;
  v3 = mlir::TypeID::get<mlir::ShapedType>();
  v4 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v4)
    goto LABEL_10;
  v5 = *(_QWORD **)(v2 + 8);
  v6 = &v5[2 * v4];
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_10:
    v11 = 0;
  v35[0] = v1;
  v35[1] = v11;
  result = mlir::Value::getDefiningOp((mlir::Value *)&v36);
  if (result)
  {
    v13 = result;
    result = 0;
    v14 = *(void **)(*(_QWORD *)(v13 + 48) + 16);
    if (v14 != &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id)
      v13 = 0;
    v34 = v13;
    if (v14 == &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id)
    {
      Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v34);
      matched = mlir::matchConstantWithIntValue<long long>(Filter);
      if (v17)
      {
        v18 = matched;
        if ((matched & 0x8000000000000000) != 0)
        {
          v19 = 0;
          goto LABEL_22;
        }
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v35))
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v35);
          v19 = 0;
          v18 -= v20;
LABEL_22:
          v21 = v18 & 0xFFFFFFFFFFFFFF00;
LABEL_23:
          v22 = v21 | v18;
          Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v34);
          v24 = mlir::matchConstantWithIntValue<long long>(Bias);
          if (v25)
          {
            v26 = v24;
            if ((v24 & 0x8000000000000000) != 0)
            {
              v27 = 0;
              goto LABEL_29;
            }
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v35))
            {
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v35);
              v27 = 0;
              v26 -= v28;
LABEL_29:
              v29 = v26 & 0xFFFFFFFFFFFFFF00;
              goto LABEL_30;
            }
          }
          LOBYTE(v26) = 0;
          v29 = 0;
          v27 = 1;
LABEL_30:
          result = 0;
          v30 = v29 | v26;
          v31 = v19 | v27;
          if (v30 >= v22)
            v32 = v22;
          else
            v32 = v29 | v26;
          if (v22 <= v30)
            v33 = v30;
          else
            v33 = v22;
          if (v31 != 1 && v32 == -2 && v33 == -1)
            return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v34);
          return result;
        }
      }
      LOBYTE(v18) = 0;
      v21 = 0;
      v19 = 1;
      goto LABEL_23;
    }
  }
  return result;
}

char *mlir::mps::`anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::transposeParam(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Loc;
  unsigned int v18;
  unsigned int v19;
  _QWORD v20[2];
  uint64_t v21;

  v2 = a2;
  v21 = a2;
  if (a2)
  {
    v4 = (uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v4)
      goto LABEL_11;
    v5 = *v4;
    v6 = mlir::TypeID::get<mlir::ShapedType>();
    v7 = *(unsigned int *)(v5 + 16);
    if (!(_DWORD)v7)
      goto LABEL_11;
    v8 = *(_QWORD **)(v5 + 8);
    v9 = &v8[2 * v7];
    do
    {
      v10 = v7 >> 1;
      v11 = &v8[2 * (v7 >> 1)];
      v13 = *v11;
      v12 = v11 + 2;
      v7 += ~(v7 >> 1);
      if (v13 < v6)
        v8 = v12;
      else
        v7 = v10;
    }
    while (v7);
    if (v8 != v9 && *v8 == v6)
      v14 = v8[1];
    else
LABEL_11:
      v14 = 0;
    v20[0] = v4;
    v20[1] = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v20))
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v20);
      if (v15 >= 2)
      {
        Loc = mlir::Value::getLoc((mlir::Value *)&v21);
        v18 = -2;
        v19 = -1;
        return (char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a1 + 8), Loc, &v21, &v19, &v18)- 16;
      }
    }
  }
  return (char *)v2;
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedMatmulTranpose::transposeAxisAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t NegativeAxis;
  mlir::Builder *v6;
  uint64_t IntegerType;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  mlir::Builder *v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  if (!a2)
    return 0;
  mlir::IntegerAttr::getValue(&v26, (llvm::APInt *)&__p);
  if (v25 > 0x40)
  {
    NegativeAxis = *(_QWORD *)__p;
    operator delete[](__p);
    if (NegativeAxis < 0)
    {
LABEL_4:
      if (NegativeAxis != -2)
        goto LABEL_5;
LABEL_20:
      v23 = (mlir::Builder *)(a1 + 8);
      IntegerType = mlir::Builder::getIntegerType(v23, 0x20u, 1);
      v8 = (uint64_t)v23;
      v9 = -1;
      return mlir::Builder::getIntegerAttr(v8, IntegerType, v9);
    }
  }
  else
  {
    NegativeAxis = (uint64_t)((_QWORD)__p << -(uint64_t)v25) >> -(uint64_t)v25;
    if (NegativeAxis < 0)
      goto LABEL_4;
  }
  v11 = (uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11)
    goto LABEL_18;
  v12 = *v11;
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v12 + 16);
  if (!(_DWORD)v14)
    goto LABEL_18;
  v15 = *(_QWORD **)(v12 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_18:
    v21 = 0;
  __p = v11;
  v25 = v21;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__p);
  NegativeAxis = mlir::getNegativeAxis((mlir *)NegativeAxis, v22);
  if (NegativeAxis == -2)
    goto LABEL_20;
LABEL_5:
  if (NegativeAxis == -1)
  {
    v6 = (mlir::Builder *)(a1 + 8);
    IntegerType = mlir::Builder::getIntegerType(v6, 0x20u, 1);
    v8 = (uint64_t)v6;
    v9 = -2;
    return mlir::Builder::getIntegerAttr(v8, IntegerType, v9);
  }
  return v26;
}

_QWORD *mlir::mps::`anonymous namespace'::FuseRMS<mlir::mps::MultiplyOp>::~FuseRMS(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::FuseRMS<mlir::mps::MultiplyOp>::~FuseRMS(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

BOOL mlir::mps::`anonymous namespace'::FuseRMS<mlir::mps::MultiplyOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *ArgAttrsAttr;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t Loc;
  mlir::GenericProgramPoint *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t *v49;
  _QWORD **v50;
  char v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  char v61;
  _QWORD v62[2];
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t ***Axes;
  uint64_t v75;
  _BYTE v76[16];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v57 = 0;
  v58 = 0;
  v56[0] = &v57;
  v56[1] = 0;
  v53 = v56;
  LOBYTE(v54) = 0;
  v55 = 0;
  v49 = &v58;
  v50 = &v53;
  v51 = 0;
  v52 = 0;
  if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>::match(&v49, a2))return 0;
  v5 = v58;
  v6 = v55 ? v54 : 0;
  v73 = v58;
  v69 = 0;
  v70 = &v73;
  LOBYTE(v71) = 0;
  v72 = 0;
  v65 = 0;
  v66 = &v69;
  LOBYTE(v67) = 0;
  v68 = 0;
  v64[0] = &v70;
  v64[1] = 0;
  v62[0] = v64;
  v62[1] = &v65;
  v63 = 0;
  v59 = v62;
  LOBYTE(v60) = 0;
  v61 = 0;
  Axes = (uint64_t ***)&v59;
  v75 = (uint64_t)&v66;
  v76[0] = 0;
  v76[8] = 0;
  v45 = v57;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v45);
  if (!DefiningOp
    || (mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>::match(&Axes, DefiningOp) & 1) == 0)
  {
    return 0;
  }
  if (v6)
  {
    v8 = v72 ? v71 : 0;
  }
  if (v61)
  {
    v9 = v72 ? v71 : 0;
  }
  v45 = v5;
  v46 = v69;
  v47 = v63;
  v48 = 1;
  result = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v47);
  if (!result)
    return result;
  v11 = (uint64_t *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11)
    goto LABEL_27;
  v12 = *v11;
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v12 + 16);
  if (!(_DWORD)v14)
    goto LABEL_27;
  v15 = *(_QWORD **)(v12 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = (_QWORD **)v15[1];
  else
LABEL_27:
    v21 = 0;
  v49 = v11;
  v50 = v21;
  v22 = v46;
  v59 = (_QWORD *)v46;
  v23 = (uint64_t *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23)
    goto LABEL_37;
  v24 = *v23;
  v25 = mlir::TypeID::get<mlir::ShapedType>();
  v26 = *(unsigned int *)(v24 + 16);
  if (!(_DWORD)v26)
    goto LABEL_37;
  v27 = *(_QWORD **)(v24 + 8);
  v28 = &v27[2 * v26];
  do
  {
    v29 = v26 >> 1;
    v30 = &v27[2 * (v26 >> 1)];
    v32 = *v30;
    v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25)
      v27 = v31;
    else
      v26 = v29;
  }
  while (v26);
  if (v27 != v28 && *v27 == v25)
    v33 = v27[1];
  else
LABEL_37:
    v33 = 0;
  v70 = v23;
  v71 = v33;
  v66 = 0;
  v67 = 0;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v70);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v35) != 1)
  {
    v62[0] = v22;
    v39 = mlir::Value::getDefiningOp((mlir::Value *)v62);
    if (!v39)
      return 0;
    v40 = v39;
    v41 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v40 + 48) + 32))(*(_QWORD *)(v40 + 48), v41))
      return 0;
    Axes = (uint64_t ***)v76;
    v75 = 0x100000000;
    mlir::Operation::fold(v40, 0, 0, (uint64_t)&Axes);
    v42 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)((unint64_t)*Axes & 0xFFFFFFFFFFFFFFF8));
    v44 = v42;
    if (v42)
    {
      v66 = v42;
      v67 = v43;
    }
    if (Axes != (uint64_t ***)v76)
      free(Axes);
    if (!v44 || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66) & 1) == 0)
      return 0;
  }
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49);
  if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v70))
  {
    Loc = mlir::Value::getLoc((mlir::Value *)&v59);
    Axes = (uint64_t ***)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49);
    v59 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v59, (uint64_t *)&Axes)- 16);
  }
  Axes = (uint64_t ***)mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v47);
  v38 = mlir::OpBuilder::create<mlir::mpsx::RMSNormOp,mlir::Value &,mlir::Value &,mlir::Value &>(a3 + 1, *(_QWORD *)(a2 + 24), &v45, (uint64_t *)&v59, (uint64_t *)&Axes);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v38);
  return 1;
}

uint64_t mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>::match(uint64_t **a1, uint64_t a2)
{
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  char v9;
  uint64_t *v10;
  int v11;
  _QWORD **v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  _BOOL4 v16;

  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id)
    return 0;
  v5 = (uint64_t ***)a1[1];
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  v7 = **a1;
  if (v7)
  {
    v8 = v7 == v6;
  }
  else
  {
    **a1 = v6;
    v8 = 1;
  }
  v9 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>(a2, 1u, v5);
  if (!v8 || (v9 & 1) == 0)
  {
    v10 = a1[1];
    v11 = *((unsigned __int8 *)v10 + 16);
    v12 = (_QWORD **)*v10;
    **(_QWORD **)*v10 = 0;
    v12[1] = 0;
    if (v11 && *((_BYTE *)v10 + 16))
      *((_BYTE *)v10 + 16) = 0;
    **a1 = 0;
    v13 = *a1;
    v14 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>(a2, 0, (uint64_t ***)a1[1]);
    v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
    if (*v13)
    {
      v16 = *v13 == v15;
    }
    else
    {
      *v13 = v15;
      v16 = 1;
    }
    if ((v14 & v16) != 1)
      return 0;
  }
  if (!*((_BYTE *)a1 + 24))
    *((_BYTE *)a1 + 24) = 1;
  a1[2] = (uint64_t *)a2;
  return 1;
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>>(uint64_t a1, unsigned int a2, uint64_t ***a3)
{
  uint64_t DefiningOp;
  uint64_t **v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * a2 + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (DefiningOp)
    return mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>::match(a3, DefiningOp);
  v6 = *a3;
  v12 = v11;
  v7 = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (v7)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(v7 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReciprocalSquareRootOp,void>::id
      || (*(_BYTE *)(v7 + 46) & 0x80) == 0
      || *(_DWORD *)(v7 + 68) != 1)
    {
      goto LABEL_9;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 24);
    v10 = **v6;
    if (v10)
    {
      if (v10 != v9)
      {
LABEL_9:
        v8 = 0;
        return (v7 != 0) & v8;
      }
    }
    else
    {
      **v6 = v9;
    }
    v6[1] = (uint64_t *)v7;
    v8 = 1;
  }
  return (v7 != 0) & v8;
}

uint64_t mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReciprocalSquareRootOp,mlir::detail::any_value_binder>>::match(uint64_t ***a1, uint64_t a2)
{
  void *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)(*(_QWORD *)(a2 + 48) + 16);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::mps::ReciprocalSquareRootOp,void>::id
      && (*(_BYTE *)(a2 + 46) & 0x80) != 0
      && *(_DWORD *)(a2 + 68) == 1)
    {
      v5 = *a1;
      v6 = **a1;
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
      if (!*v6)
      {
        *v6 = v7;
LABEL_19:
        v5[1] = (uint64_t *)a2;
        return 1;
      }
      if (*v6 == v7)
        goto LABEL_19;
    }
    return 0;
  }
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0 || *(_DWORD *)(a2 + 68) != 1)
    return 0;
  v8 = *a1;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!result)
    return result;
  if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReciprocalSquareRootOp,void>::id
    || (*(_BYTE *)(result + 46) & 0x80) == 0
    || *(_DWORD *)(result + 68) != 1)
  {
    return 0;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
  v11 = **v8;
  if (v11)
  {
    if (v11 != v10)
      return 0;
  }
  else
  {
    **v8 = v10;
  }
  v8[1] = (uint64_t *)result;
  if (!*((_BYTE *)a1 + 16))
    *((_BYTE *)a1 + 16) = 1;
  a1[1] = (uint64_t **)a2;
  return 1;
}

BOOL mlir::mps::`anonymous namespace'::FuseRMS<mlir::mps::MultiplyOp>::matchAndRewrite(mlir::mps::MultiplyOp,mlir::PatternRewriter &)::{lambda(mlir::Value,mlir::Value,mlir::mps::CastOp)#1}::operator() const(mlir::Value,mlir::Value,mlir::mps::CastOp)::{lambda(mlir::mps::CastOp,mlir::mps::CastOp)#1}::operator()(_BOOL8 result, uint64_t a2)
{
  uint64_t Input;
  uint64_t ElementTypeOrSelf;
  uint64_t v4;
  uint64_t Type;
  void *v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  void *v18;
  unsigned int IntOrFloatBitWidth;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;

  v22 = a2;
  v23 = result;
  if (result)
  {
    Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v23);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(Input);
    v21 = ElementTypeOrSelf;
    v4 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v22);
    if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v4))
      return 0;
    Type = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v23);
    v20 = Type;
    v6 = *(void **)(*(_QWORD *)ElementTypeOrSelf + 136);
    v7 = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    v8 = v7 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    v16 = v15 || v6 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
    v17 = v16 || v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
    if (v17
      && ((v18 = *(void **)(*(_QWORD *)Type + 136), v18 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id)
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
       || v18 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id))
    {
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v21);
      return IntOrFloatBitWidth < mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v20);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>::match(uint64_t ****a1, uint64_t a2)
{
  uint64_t **v5;
  uint64_t ***v6;
  uint64_t DefiningOp;
  int v8;
  int v9;
  BOOL v10;
  uint64_t ***v11;
  int v12;
  uint64_t ***v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t ***v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id)
    return 0;
  v6 = *a1;
  v5 = (uint64_t **)a1[1];
  v21 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v21);
  v8 = DefiningOp
     ? mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>::match(v6, DefiningOp): mlir::detail::matchValue<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(v21, (uint64_t)*v6);
  v9 = v8;
  v10 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>(a2, 1u, v5);
  if (!v9 || !v10)
  {
    v11 = a1[1];
    v12 = *((unsigned __int8 *)v11 + 16);
    **v11 = 0;
    if (v12)
      *((_BYTE *)v11 + 16) = 0;
    v13 = *a1;
    v14 = **a1;
    v15 = *v14;
    v16 = **v14;
    if (*((_BYTE *)*a1 + 16))
    {
      if (*(_BYTE *)(v16 + 16))
        *(_BYTE *)(v16 + 16) = 0;
      v15[1] = 0;
      *v14[1] = 0;
      v14[2] = 0;
      if (*((_BYTE *)v13 + 16))
        *((_BYTE *)v13 + 16) = 0;
    }
    else
    {
      if (*(_BYTE *)(v16 + 16))
        *(_BYTE *)(v16 + 16) = 0;
      v15[1] = 0;
      *v14[1] = 0;
      v14[2] = 0;
    }
    v17 = *a1;
    v18 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>(a2, 0, (uint64_t **)a1[1]);
    v21 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
    v19 = mlir::Value::getDefiningOp((mlir::Value *)&v21);
    v20 = v19
        ? mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>::match(v17, v19): mlir::detail::matchValue<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(v21, (uint64_t)*v17);
    if ((v18 & v20) != 1)
      return 0;
  }
  if (!*((_BYTE *)a1 + 24))
    *((_BYTE *)a1 + 24) = 1;
  a1[2] = (uint64_t ***)a2;
  return 1;
}

uint64_t mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>::match(uint64_t ***a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t DefiningOp;
  _QWORD *v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  uint64_t result;
  uint64_t v13;

  v4 = *(void **)(*(_QWORD *)(a2 + 48) + 16);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0 && *(_DWORD *)(a2 + 68) == 1)
    {
      v11 = mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(a2, 0, (uint64_t)*a1);
      result = 0;
      if (!v11)
        return result;
      if (!*((_BYTE *)a1 + 16))
        *((_BYTE *)a1 + 16) = 1;
      a1[1] = (uint64_t **)a2;
      return 1;
    }
  }
  else if (v4 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMeanOp,void>::id
         && (*(_BYTE *)(a2 + 46) & 0x80) != 0
         && *(_DWORD *)(a2 + 68) == 2)
  {
    v5 = (uint64_t)*a1;
    v6 = **a1;
    v13 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
    if (DefiningOp)
      LODWORD(DefiningOp) = mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>::match(v6, DefiningOp);
    v8 = *(_QWORD **)(v5 + 8);
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 56);
    if (*v8)
    {
      v10 = *v8 == v9;
    }
    else
    {
      *v8 = v9;
      v10 = 1;
    }
    if ((DefiningOp & v10) == 1)
    {
      *(_QWORD *)(v5 + 16) = a2;
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>::match(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t DefiningOp;
  uint64_t v7;

  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SquareOp,void>::id
    && (*(_BYTE *)(a2 + 46) & 0x80) != 0
    && *(_DWORD *)(a2 + 68) == 1)
  {
    v4 = *a1;
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v7);
    if (DefiningOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
      {
        if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
          && *(_DWORD *)(DefiningOp + 68) == 1
          && **(_QWORD **)v4 == *(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24))
        {
          if (!*(_BYTE *)(v4 + 16))
            *(_BYTE *)(v4 + 16) = 1;
          *(_QWORD *)(v4 + 8) = DefiningOp;
          goto LABEL_19;
        }
      }
      else if (*(_DWORD *)(DefiningOp + 36) && **(_QWORD **)v4 == DefiningOp - 16)
      {
        goto LABEL_19;
      }
    }
    else if (**(_QWORD **)v4 == v7)
    {
LABEL_19:
      a1[1] = a2;
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t DefiningOp;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v13;

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * a2 + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
  v6 = DefiningOp;
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReductionMeanOp,void>::id
      || (*(_BYTE *)(DefiningOp + 46) & 0x80) == 0
      || *(_DWORD *)(DefiningOp + 68) != 2)
    {
      goto LABEL_13;
    }
    v7 = *(uint64_t **)a3;
    v13 = *(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24);
    v8 = mlir::Value::getDefiningOp((mlir::Value *)&v13);
    if (v8)
      LODWORD(v8) = mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>::match(v7, v8);
    v9 = *(_QWORD **)(a3 + 8);
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 56);
    if (*v9)
    {
      v11 = *v9 == v10;
    }
    else
    {
      *v9 = v10;
      v11 = 1;
    }
    v5 = v8 & v11;
    if (v5 == 1)
      *(_QWORD *)(a3 + 16) = v6;
    else
LABEL_13:
      LOBYTE(v5) = 0;
  }
  return (v6 != 0) & v5;
}

uint64_t mlir::detail::matchValue<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>(uint64_t a1, uint64_t a2)
{
  uint64_t DefiningOp;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v12;
  uint64_t v13;

  v12 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  v5 = DefiningOp;
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReductionMeanOp,void>::id
      || (*(_BYTE *)(DefiningOp + 46) & 0x80) == 0
      || *(_DWORD *)(DefiningOp + 68) != 2)
    {
      goto LABEL_13;
    }
    v6 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24);
    v7 = mlir::Value::getDefiningOp((mlir::Value *)&v13);
    if (v7)
      LODWORD(v7) = mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>::match(v6, v7);
    v8 = *(_QWORD **)(a2 + 8);
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 72) + 56);
    if (*v8)
    {
      v10 = *v8 == v9;
    }
    else
    {
      *v8 = v9;
      v10 = 1;
    }
    v4 = v7 & v10;
    if (v4 == 1)
      *(_QWORD *)(a2 + 16) = v5;
    else
LABEL_13:
      LOBYTE(v4) = 0;
  }
  return (v5 != 0) & v4;
}

BOOL mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * a2 + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (!DefiningOp)
  {
    v8 = **a3;
    if (v8)
      return v8 == v11;
    **a3 = v11;
    return 1;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
  {
    if (*(_DWORD *)(DefiningOp + 36))
    {
      v5 = DefiningOp - 16;
      v6 = **a3;
      if (v6)
        return v6 == v5;
      **a3 = v5;
      return 1;
    }
    return 0;
  }
  if ((*(_BYTE *)(DefiningOp + 46) & 0x80) == 0 || *(_DWORD *)(DefiningOp + 68) != 1)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24);
  v10 = **a3;
  if (v10)
  {
    if (v10 != v9)
      return 0;
  }
  else
  {
    **a3 = v9;
  }
  if (!*((_BYTE *)a3 + 16))
    *((_BYTE *)a3 + 16) = 1;
  a3[1] = (uint64_t *)DefiningOp;
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::RMSNormOp,mlir::Value &,mlir::Value &,mlir::Value &>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.rms_norm", (const unsigned __int8 *)0xD, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"mpsx.rms_norm";
    v19[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::mpsx::RMSNormOp::build(a1, (uint64_t)v21, *a3, *a4, *a5);
  v13 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::RMSNormOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::mps::`anonymous namespace'::FuseRMS<mlir::mps::DivideOp>::~FuseRMS(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::FuseRMS<mlir::mps::DivideOp>::~FuseRMS(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

BOOL mlir::mps::`anonymous namespace'::FuseRMS<mlir::mps::DivideOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DefiningOp;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *ArgAttrsAttr;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t Loc;
  mlir::GenericProgramPoint *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t **v49;
  uint64_t v50;
  char v51;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t ***Axes;
  uint64_t v71;
  _BYTE v72[16];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v52[1] = 0;
  v53 = 0;
  v52[0] = &v53;
  v49 = (uint64_t **)v52;
  LOBYTE(v50) = 0;
  v51 = 0;
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::DivideOp,void>::id)
    return 0;
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0)
    return 0;
  if (*(_DWORD *)(a2 + 68) != 2)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  if (!mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareRootOp,mlir::detail::any_value_binder>>>(a2, 1u, &v49))return 0;
  v6 = v51 ? v50 : 0;
  v69 = v5;
  v65 = 0;
  v66 = &v69;
  LOBYTE(v67) = 0;
  v68 = 0;
  v61 = 0;
  v62 = &v65;
  LOBYTE(v63) = 0;
  v64 = 0;
  v60[0] = &v66;
  v60[1] = 0;
  v57 = v60;
  v58 = &v61;
  v59 = 0;
  v54 = &v57;
  LOBYTE(v55) = 0;
  v56 = 0;
  Axes = &v54;
  v71 = (uint64_t)&v62;
  v72[0] = 0;
  v72[8] = 0;
  v45 = v53;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v45);
  if (!DefiningOp
    || (mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReductionMeanOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareOp,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::value_binder>>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::any_value_binder>>::match(&Axes, DefiningOp) & 1) == 0)
  {
    return 0;
  }
  if (v6)
  {
    v8 = v68 ? v67 : 0;
  }
  if (v56)
  {
    v9 = v68 ? v67 : 0;
  }
  v45 = v5;
  v46 = v65;
  v47 = v59;
  v48 = 1;
  result = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v47);
  if (!result)
    return result;
  v11 = (uint64_t *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v11)
    goto LABEL_30;
  v12 = *v11;
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v12 + 16);
  if (!(_DWORD)v14)
    goto LABEL_30;
  v15 = *(_QWORD **)(v12 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_30:
    v21 = 0;
  v66 = v11;
  v67 = v21;
  v22 = (uint64_t **)v46;
  v49 = (uint64_t **)v46;
  v23 = (uint64_t *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23)
    goto LABEL_40;
  v24 = *v23;
  v25 = mlir::TypeID::get<mlir::ShapedType>();
  v26 = *(unsigned int *)(v24 + 16);
  if (!(_DWORD)v26)
    goto LABEL_40;
  v27 = *(_QWORD **)(v24 + 8);
  v28 = &v27[2 * v26];
  do
  {
    v29 = v26 >> 1;
    v30 = &v27[2 * (v26 >> 1)];
    v32 = *v30;
    v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25)
      v27 = v31;
    else
      v26 = v29;
  }
  while (v26);
  if (v27 != v28 && *v27 == v25)
    v33 = v27[1];
  else
LABEL_40:
    v33 = 0;
  v62 = v23;
  v63 = v33;
  v57 = 0;
  v58 = 0;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v62);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v35) != 1)
  {
    v54 = v22;
    v39 = mlir::Value::getDefiningOp((mlir::Value *)&v54);
    if (!v39)
      return 0;
    v40 = v39;
    v41 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v40 + 48) + 32))(*(_QWORD *)(v40 + 48), v41))
      return 0;
    Axes = (uint64_t ***)v72;
    v71 = 0x100000000;
    mlir::Operation::fold(v40, 0, 0, (uint64_t)&Axes);
    v42 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)((unint64_t)*Axes & 0xFFFFFFFFFFFFFFF8));
    v44 = v42;
    if (v42)
    {
      v57 = v42;
      v58 = v43;
    }
    if (Axes != (uint64_t ***)v72)
      free(Axes);
    if (!v44 || (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v57) & 1) == 0)
      return 0;
  }
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66);
  if (OperandRange != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v62))
  {
    Loc = mlir::Value::getLoc((mlir::Value *)&v49);
    Axes = (uint64_t ***)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v66);
    v49 = (uint64_t **)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v49, (uint64_t *)&Axes)- 16);
  }
  Axes = (uint64_t ***)mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v47);
  v38 = mlir::OpBuilder::create<mlir::mpsx::RMSNormOp,mlir::Value &,mlir::Value &,mlir::Value &>(a3 + 1, *(_QWORD *)(a2 + 24), &v45, (uint64_t *)&v49, (uint64_t *)&Axes);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v38);
  return 1;
}

uint64_t mlir::detail::matchOperandOrValueAtIndex<mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareRootOp,mlir::detail::any_value_binder>>>(uint64_t a1, unsigned int a2, uint64_t ***a3)
{
  uint64_t DefiningOp;
  uint64_t **v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * a2 + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v11);
  if (DefiningOp)
    return mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareRootOp,mlir::detail::any_value_binder>>::match(a3, DefiningOp);
  v6 = *a3;
  v12 = v11;
  v7 = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (v7)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(v7 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::SquareRootOp,void>::id
      || (*(_BYTE *)(v7 + 46) & 0x80) == 0
      || *(_DWORD *)(v7 + 68) != 1)
    {
      goto LABEL_9;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 24);
    v10 = **v6;
    if (v10)
    {
      if (v10 != v9)
      {
LABEL_9:
        v8 = 0;
        return (v7 != 0) & v8;
      }
    }
    else
    {
      **v6 = v9;
    }
    v6[1] = (uint64_t *)v7;
    v8 = 1;
  }
  return (v7 != 0) & v8;
}

uint64_t mlir::detail::RecursivePatternOptionalMatcherBinder<mlir::mps::CastOp,0,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::SquareRootOp,mlir::detail::any_value_binder>>::match(uint64_t ***a1, uint64_t a2)
{
  void *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)(*(_QWORD *)(a2 + 48) + 16);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id)
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::mps::SquareRootOp,void>::id
      && (*(_BYTE *)(a2 + 46) & 0x80) != 0
      && *(_DWORD *)(a2 + 68) == 1)
    {
      v5 = *a1;
      v6 = **a1;
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
      if (!*v6)
      {
        *v6 = v7;
LABEL_19:
        v5[1] = (uint64_t *)a2;
        return 1;
      }
      if (*v6 == v7)
        goto LABEL_19;
    }
    return 0;
  }
  if ((*(_BYTE *)(a2 + 46) & 0x80) == 0 || *(_DWORD *)(a2 + 68) != 1)
    return 0;
  v8 = *a1;
  v12 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v12);
  if (!result)
    return result;
  if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::SquareRootOp,void>::id
    || (*(_BYTE *)(result + 46) & 0x80) == 0
    || *(_DWORD *)(result + 68) != 1)
  {
    return 0;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(result + 72) + 24);
  v11 = **v8;
  if (v11)
  {
    if (v11 != v10)
      return 0;
  }
  else
  {
    **v8 = v10;
  }
  v8[1] = (uint64_t *)result;
  if (!*((_BYTE *)a1 + 16))
    *((_BYTE *)a1 + 16) = 1;
  a1[1] = (uint64_t **)a2;
  return 1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeRoPE::~CanonicalizeRoPE(mlir::mps::_anonymous_namespace_::CanonicalizeRoPE *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeRoPE::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t matched;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ArgAttrsAttr;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unsigned int EndMask;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v58;
  _QWORD *v59;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v79;
  BOOL v80;
  uint64_t v82;
  uint64_t v83;
  mlir::GenericProgramPoint *v84;
  uint64_t v85;
  uint64_t v86;
  mlir::GenericProgramPoint *v87;
  mlir::GenericProgramPoint *v88;
  uint64_t *v89;
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  _QWORD v93[2];
  _QWORD v94[2];
  _QWORD v95[2];
  uint64_t ElementTypeOrSelf;
  _QWORD v97[2];
  int8x16_t v98;
  char v99;
  char v100;
  _QWORD v101[3];
  _QWORD v102[3];
  _QWORD v103[3];
  uint64_t v104;
  _QWORD v105[4];
  _QWORD v106[3];
  uint64_t v107;
  _QWORD v108[3];
  uint64_t v109;
  _QWORD v110[2];
  mlir::GenericProgramPoint *v111;
  uint64_t v112;
  _QWORD v113[4];
  void *v114;
  _QWORD v115[4];
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[2];
  void *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[3];
  _QWORD v127[4];
  _QWORD v128[3];
  mlir::GenericProgramPoint *v129;
  _QWORD v130[3];
  uint64_t v131;
  _QWORD v132[3];
  void *v133;
  uint64_t v134;
  _QWORD v135[2];
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  _BYTE v142[48];
  void *v143;
  uint64_t v144;
  _BYTE v145[48];
  void *v146;
  uint64_t v147;
  _BYTE v148[48];
  void *v149;
  uint64_t v150;
  _BYTE v151[48];
  void *v152;
  uint64_t v153;
  _BYTE v154[48];
  void *v155;
  uint64_t v156;
  _BYTE v157[48];
  void *v158;
  uint64_t v159;
  _BYTE v160[48];
  void *v161;
  uint64_t v162;
  _BYTE v163[48];
  void **v164;
  uint64_t v165;
  _BYTE v166[48];
  char *v167;
  uint64_t v168;
  _WORD v169[24];
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  v139 = a2;
  v138 = 0;
  v137 = 0;
  v135[0] = &v138;
  v135[1] = &v137;
  v136 = 0;
  v134 = 0;
  v132[0] = v135;
  v132[1] = v135;
  v132[2] = &v134;
  v133 = 0;
  v131 = 0;
  v130[0] = v132;
  v130[1] = &v131;
  v130[2] = 0;
  v129 = 0;
  v128[0] = &v129;
  v128[1] = &v137;
  v128[2] = 0;
  v127[0] = v128;
  v127[1] = v128;
  v127[2] = &v134;
  v127[3] = 0;
  v126[0] = v127;
  v126[1] = &v131;
  v126[2] = 0;
  v125 = 0;
  v124 = 0;
  v122[0] = &v125;
  v122[1] = &v124;
  v123 = 0;
  v121 = 0;
  v120 = 0;
  v119 = 0;
  v118 = 0;
  v116 = 0;
  v117 = 0;
  v115[0] = v122;
  v115[1] = &v121;
  v115[2] = &v120;
  v115[3] = &v119;
  v113[0] = v122;
  v113[1] = &v118;
  v113[2] = &v117;
  v113[3] = &v119;
  v114 = 0;
  v111 = 0;
  v112 = 0;
  v110[0] = v113;
  v110[1] = &v112;
  v108[2] = 0;
  v109 = 0;
  v108[0] = v110;
  v108[1] = &v109;
  v106[2] = 0;
  v107 = 0;
  v106[0] = v108;
  v106[1] = &v107;
  v105[0] = v106;
  v105[1] = v115;
  v105[2] = &v134;
  v105[3] = 0;
  v103[2] = 0;
  v104 = 0;
  v103[0] = v105;
  v103[1] = &v104;
  v102[0] = v103;
  v102[1] = v130;
  v102[2] = 0;
  v101[0] = &v125;
  v101[1] = v126;
  v101[2] = 0;
  v98.i64[0] = (uint64_t)v101;
  v98.i64[1] = (uint64_t)v102;
  v99 = 0;
  v100 = 0;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v139) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v97))
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
  v15 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v139);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(&v98, v139))
  {
    v167 = "failed: RoPE pattern did not match";
    v169[8] = 259;
    v53 = v139;
    v164 = (void **)&v167;
    v54 = *(_QWORD *)(a3 + 16);
    if (v54 && mlir::RewriterBase::Listener::classof(v54))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v54 + 64))(v54, *(_QWORD *)(v53 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v164);
    return 0;
  }
  v167 = (char *)v169;
  v168 = 0x600000000;
  v16 = (uint64_t *)(*(_QWORD *)(v138 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_22;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_22;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_22:
    v26 = 0;
  v95[0] = v16;
  v95[1] = v26;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v95))
  {
    if (mlir::matchConstantWithIntVector<long long>(v137, (uint64_t)&v167))
    {
      v27 = v168;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v95);
      if (v28 + 1 == v27 && *(_QWORD *)&v167[8 * v168 - 8] == 1)
      {
        matched = mlir::matchConstantWithIntValue<long long>(v134);
        if (v30)
        {
          v31 = matched;
          v161 = v136;
          v164 = (void **)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v161) + 8) & 0xFFFFFFFFFFFFFFF8);
          v94[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v164);
          v94[1] = v32;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v94))
          {
            if (v31 == -1
              || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v94), v31 == v33 - 1))
            {
              v161 = v133;
              v164 = (void **)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v161) + 8) & 0xFFFFFFFFFFFFFFF8);
              v93[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v164);
              v93[1] = v34;
              if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v93))
              {
                ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v93);
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v93);
                v37 = v36;
                v164 = (void **)v166;
                v165 = 0x600000000;
                if (!mlir::matchConstantWithIntVector<long long>(v131, (uint64_t)&v164)
                  || (v38 = v165,
                      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v93),
                      v39 - 1 != v38)
                  || v164[v38 - 1] != (void *)(*(_QWORD *)(ArgAttrsAttr + 8 * v37 - 16)
                                             * *(_QWORD *)(ArgAttrsAttr + 8 * v37 - 8))
                  || (v161 = (void *)(*(_QWORD *)(v125 + 8) & 0xFFFFFFFFFFFFFFF8),
                      v92[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v161),
                      v92[1] = v40,
                      !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v92)))
                {
                  v45 = 0;
LABEL_64:
                  if (v164 != (void **)v166)
                    free(v164);
                  goto LABEL_59;
                }
                v41 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v92);
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v92);
                v43 = v42;
                v161 = v163;
                v162 = 0x600000000;
                if (mlir::matchConstantWithIntVector<long long>(v124, (uint64_t)&v161)
                  && v43 + 1 == v162
                  && *((_QWORD *)v161 + v162 - 2) * *((_QWORD *)v161 + v162 - 1) == *(_QWORD *)(v41 + 8 * v43 - 8))
                {
                  v44 = mlir::matchConstantWithFloatValue<float>(v109);
                  v45 = 0;
                  if ((v44 & 0xFF00000000) != 0 && *(float *)&v44 == -1.0)
                  {
                    v158 = v160;
                    v159 = 0x600000000;
                    v155 = v157;
                    v156 = 0x600000000;
                    v152 = v154;
                    v153 = 0x600000000;
                    v149 = v151;
                    v150 = 0x600000000;
                    v146 = v148;
                    v147 = 0x600000000;
                    if (!mlir::matchConstantWithIntVector<long long>(v121, (uint64_t)&v158))
                      goto LABEL_122;
                    if (!mlir::matchConstantWithIntVector<long long>(v120, (uint64_t)&v155))
                      goto LABEL_122;
                    if (!mlir::matchConstantWithIntVector<long long>(v118, (uint64_t)&v152))
                      goto LABEL_122;
                    if (!mlir::matchConstantWithIntVector<long long>(v117, (uint64_t)&v149))
                      goto LABEL_122;
                    if (!mlir::matchConstantWithIntVector<long long>(v119, (uint64_t)&v146))
                      goto LABEL_122;
                    v140 = v123;
                    v143 = (void *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v140) + 8) & 0xFFFFFFFFFFFFFFF8);
                    v91[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v143);
                    v91[1] = v46;
                    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v91))
                      goto LABEL_122;
                    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v91);
                    v47 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v91);
                    v48 = v159;
                    if ((_DWORD)v159)
                    {
                      v49 = v158;
                      do
                      {
                        if (*v49++)
                          goto LABEL_122;
                      }
                      while (--v48);
                    }
                    v143 = v116;
                    EndMask = mlir::mps::StridedSliceGradientOp::getEndMask((mlir::mps::StridedSliceGradientOp *)&v143);
                    if (v156 != 1)
                    {
                      v52 = 0;
                      do
                      {
                        if (((EndMask >> v52) & 1) == 0)
                        {
                          v56 = *(_QWORD *)(v47 + 8 * v52);
                          if (v56 == 0x8000000000000000 || v56 != *((_QWORD *)v155 + v52))
                            goto LABEL_122;
                        }
                      }
                      while (v156 - 1 != ++v52);
                    }
                    if (*((_QWORD *)v155 + v156 - 1) != 1)
                      goto LABEL_122;
                    v58 = v153 - 1;
                    if (v153 != 1)
                    {
                      v59 = v152;
                      do
                      {
                        if (*v59++)
                          goto LABEL_122;
                      }
                      while (--v58);
                    }
                    if (*((_QWORD *)v152 + v153 - 1) != 1)
                      goto LABEL_122;
                    v143 = v114;
                    v61 = mlir::mps::StridedSliceGradientOp::getEndMask((mlir::mps::StridedSliceGradientOp *)&v143);
                    if (v150 != 1)
                    {
                      v62 = 0;
                      do
                      {
                        if (((v61 >> v62) & 1) == 0)
                        {
                          v63 = *(_QWORD *)(v47 + 8 * v62);
                          if (v63 == 0x8000000000000000 || v63 != *((_QWORD *)v149 + v62))
                            goto LABEL_122;
                        }
                      }
                      while (v150 - 1 != ++v62);
                    }
                    if (*((_QWORD *)v149 + v150 - 1) != 2)
                    {
LABEL_122:
                      v45 = 0;
LABEL_123:
                      if (v146 != v148)
                        free(v146);
                      if (v149 != v151)
                        free(v149);
                      if (v152 != v154)
                        free(v152);
                      if (v155 != v157)
                        free(v155);
                      if (v158 != v160)
                        free(v158);
                      goto LABEL_67;
                    }
                    if ((_DWORD)v147)
                    {
                      v65 = v146;
                      v66 = 8 * v147;
                      while (*v65 == 1)
                      {
                        ++v65;
                        v66 -= 8;
                        if (!v66)
                          goto LABEL_96;
                      }
                      goto LABEL_122;
                    }
LABEL_96:
                    v143 = v145;
                    v144 = 0x600000000;
                    v140 = v142;
                    v141 = 0x600000000;
                    if (mlir::matchConstantWithIntVector<long long>(v112, (uint64_t)&v143))
                    {
                      if (mlir::matchConstantWithIntVector<long long>(v107, (uint64_t)&v140))
                      {
                        v88 = v111;
                        v89 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v88) + 8) & 0xFFFFFFFFFFFFFFF8);
                        v90[0] = mlir::Type::cast<mlir::ShapedType>(&v89);
                        v90[1] = v67;
                        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v90))
                        {
                          v68 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
                          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v90);
                          if (v69 == v144 && v69 + 1 == v141)
                          {
                            if (v69 < 1)
                            {
LABEL_120:
                              if (*((_QWORD *)v140 + v69) == 1)
                              {
                                v82 = *(_QWORD *)(v139 + 24);
                                v87 = (mlir::GenericProgramPoint *)v138;
                                v88 = v129;
                                v89 = (uint64_t *)mlir::OpBuilder::create<mlir::mps::CreateComplexOp,mlir::Value,mlir::Value>((mlir::Float32Type **)(a3 + 8), v82, (uint64_t *)&v88, (uint64_t *)&v87);
                                v85 = *(_QWORD *)(v139 + 24);
                                v87 = (mlir::GenericProgramPoint *)v125;
                                v86 = mlir::ComplexType::get(ElementTypeOrSelf);
                                v88 = mlir::OpBuilder::create<mlir::mps::ReinterpretCastOp,mlir::Value,mlir::ComplexType>((mlir::UnknownLoc **)(a3 + 8), v85, (uint64_t *)&v87, &v86);
                                v87 = mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::mps::ConstantOp,mlir::mps::CastOp &>((mlir::Float32Type **)(a3 + 8), *(_QWORD *)(v139 + 24), &v89, &v88);
                                v83 = v139;
                                v84 = mlir::OpBuilder::create<mlir::mps::ReinterpretCastOp,mlir::mps::MultiplyOp &,mlir::Type &>((mlir::UnknownLoc **)(a3 + 8), *(_QWORD *)(v139 + 24), &v87, &ElementTypeOrSelf);
                                (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v83, v84);
                                v45 = 1;
LABEL_134:
                                if (v140 != v142)
                                  free(v140);
                                if (v143 != v145)
                                  free(v143);
                                goto LABEL_123;
                              }
                            }
                            else
                            {
                              v70 = (uint64_t *)v143;
                              v71 = v69;
                              v72 = (uint64_t *)v140;
                              while (1)
                              {
                                v74 = *v68++;
                                v73 = v74;
                                v76 = *v70++;
                                v75 = v76;
                                v77 = v73 == 0x8000000000000000 || v75 == -1;
                                if (!v77 && v73 != v75)
                                  break;
                                v79 = *v72;
                                v80 = v73 == 0x8000000000000000 || v79 == -1;
                                if (!v80 && v73 != v79)
                                  break;
                                ++v72;
                                if (!--v71)
                                  goto LABEL_120;
                              }
                            }
                          }
                        }
                      }
                    }
                    v45 = 0;
                    goto LABEL_134;
                  }
                }
                else
                {
                  v45 = 0;
                }
LABEL_67:
                if (v161 != v163)
                  free(v161);
                goto LABEL_64;
              }
            }
          }
        }
      }
    }
  }
  v45 = 0;
LABEL_59:
  if (v167 != (char *)v169)
    free(v167);
  return v45;
}

unint64_t mlir::matchConstantWithFloatValue<float>(uint64_t a1)
{
  uint64_t DefiningOp;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t SingleFloat;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  void *v14[2];
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v13 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v13);
  if (!DefiningOp)
    goto LABEL_10;
  v2 = DefiningOp;
  v3 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 32))(*(_QWORD *)(v2 + 48), v3))
    goto LABEL_10;
  v14[0] = v15;
  v14[1] = (void *)0x100000000;
  mlir::Operation::fold(v2, 0, 0, (uint64_t)v14);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v14[0] & 0xFFFFFFFFFFFFFFF8));
  v6 = v5 ? v4 : 0;
  if (v14[0] != v15)
    free(v14[0]);
  if (v5)
  {
    SingleFloat = mlir::getSingleFloatValue<float>((uint64_t)v5, v6);
    v8 = SingleFloat & 0xFFFFFF0000000000;
    v9 = SingleFloat & 0xFF00000000;
    v10 = SingleFloat & 0xFFFFFF00;
    v11 = SingleFloat;
  }
  else
  {
LABEL_10:
    v8 = 0;
    v9 = 0;
    v11 = 0;
    v10 = 0;
  }
  return v9 | v8 | v11 | v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::CreateComplexOp,mlir::Value,mlir::Value>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.create_complex", (const unsigned __int8 *)0x12, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.create_complex";
    v17[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::CreateComplexOp::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::CreateComplexOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReinterpretCastOp,mlir::Value,mlir::ComplexType>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.reinterpret_cast";
    v17[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReinterpretCastOp::build(a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReinterpretCastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(int8x16_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t *****v6;
  uint64_t ****v7;
  uint64_t ***v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t ***v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  int8x16_t v26;
  int8x16_t v27;
  unsigned __int8 v28;
  uint64_t v29;

  v29 = a2;
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id)
    return 0;
  v4 = 1;
  v28 = 1;
  v27 = *a1;
  v26.i64[0] = (uint64_t)&v28;
  v26.i64[1] = (uint64_t)&v29;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> & *)#1},0ul,1ul>(v27.i64, (uint64_t)&v26);
  if (v28)
    goto LABEL_5;
  v28 = 1;
  v5 = a1->i64[1];
  v6 = *(uint64_t ******)v5;
  v7 = **(uint64_t ******)v5;
  v8 = *v7;
  v9 = **v7;
  v10 = *v9;
  v11 = **v9;
  v12 = *(_QWORD ***)v11;
  ***(_QWORD ***)v11 = 0;
  *v12[1] = 0;
  v12[2] = 0;
  **(_QWORD **)(v11 + 8) = 0;
  **(_QWORD **)(v11 + 16) = 0;
  **(_QWORD **)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v10[1] = 0;
  v10[2] = 0;
  *v9[1] = 0;
  v9[2] = 0;
  *v8[1] = 0;
  v8[2] = 0;
  v13 = v7[1];
  v14 = *v13;
  ***v13 = 0;
  *v14[1] = 0;
  v14[2] = 0;
  *v13[1] = 0;
  *v13[2] = 0;
  *v13[3] = 0;
  v13[4] = 0;
  *v7[2] = 0;
  v7[3] = 0;
  *v6[1] = 0;
  v6[2] = 0;
  v15 = *(uint64_t ***)(v5 + 8);
  v16 = *v15;
  v17 = **v15;
  **(_QWORD **)v17 = 0;
  **(_QWORD **)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  v18 = v16[1];
  **(_QWORD **)v18 = 0;
  **(_QWORD **)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)v16[2] = 0;
  v16[3] = 0;
  *v15[1] = 0;
  v15[2] = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v19 = a1->i64[0];
  **(_QWORD **)a1->i64[0] = 0;
  v20 = *(uint64_t ***)(v19 + 8);
  v21 = *v20;
  v22 = **v20;
  **(_QWORD **)v22 = 0;
  **(_QWORD **)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  v23 = v21[1];
  **(_QWORD **)v23 = 0;
  **(_QWORD **)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)v21[2] = 0;
  v21[3] = 0;
  *v20[1] = 0;
  v20[2] = 0;
  *(_QWORD *)(v19 + 16) = 0;
  v26 = vextq_s8(*a1, *a1, 8uLL);
  v25[0] = &v28;
  v25[1] = &v29;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> & *)#2},0ul,1ul>(v26.i64, (uint64_t)v25);
  v4 = v28;
  if (v28)
  {
LABEL_5:
    v24 = v29;
    if (!a1[1].i8[8])
      a1[1].i8[8] = 1;
    a1[1].i64[0] = v24;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t DefiningOp;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v4 = *a1;
  v16 = *(unsigned __int8 **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  v7 = DefiningOp;
  if (DefiningOp)
  {
    v19 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      v18 = 1;
      v16 = &v18;
      v17 = &v19;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>((uint64_t **)v4, (uint64_t)&v16);
      v8 = v18;
      if (v18)
        *(_QWORD *)(v4 + 16) = v19;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v9 = 0;
  **(_BYTE **)a2 = v9;
  v10 = a1[1];
  v16 = *(unsigned __int8 **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  v13 = result;
  if (result)
  {
    v19 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      v18 = 1;
      v16 = &v18;
      v17 = &v19;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>((uint64_t **)v10, (uint64_t)&v16);
      v14 = v18;
      if (v18)
        *(_QWORD *)(v10 + 16) = v19;
      v12 = v14 != 0;
    }
    else
    {
      v12 = 0;
    }
  }
  v15 = v12 && **(_BYTE **)a2 != 0;
  if (!v13)
    v15 = 0;
  **(_BYTE **)a2 = v15;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t result;
  BOOL v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _QWORD v13[2];
  unsigned __int8 v14;
  uint64_t v15;

  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = **a1;
  if (v5)
  {
    v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
    v6 = 1;
  }
  if (!**(_BYTE **)a2)
    v6 = 0;
  **(_BYTE **)a2 = v6;
  v7 = a1[1];
  v13[0] = *(_QWORD *)(v3 + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)v13);
  v10 = result;
  if (result)
  {
    v15 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      v14 = 1;
      v13[0] = &v14;
      v13[1] = &v15;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v7, (uint64_t)v13);
      v11 = v14;
      if (v14)
        v7[2] = v15;
      v9 = v11 != 0;
    }
    else
    {
      v9 = 0;
    }
  }
  v12 = v9 && **(_BYTE **)a2 != 0;
  if (!v10)
    v12 = 0;
  **(_BYTE **)a2 = v12;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL *v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[2];
  unsigned __int8 v15;
  uint64_t v16;

  v4 = *a1;
  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  v7 = result;
  if (result)
  {
    v16 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConcatOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 3)
    {
      v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul>((uint64_t ***)v4, (uint64_t)v14);
      v8 = v15;
      if (v15)
        *(_QWORD *)(v4 + 24) = v16;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = *(BOOL **)a2;
  v10 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v10 = 0;
  *v9 = v10;
  v11 = (_QWORD *)a1[1];
  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    v13 = *v11 == v12;
  }
  else
  {
    *v11 = v12;
    v9 = *(BOOL **)a2;
    v10 = **(_BYTE **)a2 != 0;
    v13 = 1;
  }
  *v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t DefiningOp;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  uint64_t **v15;
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t *v22;
  uint64_t v23;
  _BOOL4 v24;
  _BYTE *v25;
  char v26;
  uint64_t **v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;

  v4 = *a1;
  v30 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v30);
  if (DefiningOp)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      || (*(_BYTE *)(DefiningOp + 46) & 0x80) == 0
      || *(_DWORD *)(DefiningOp + 68) != 2)
    {
      goto LABEL_14;
    }
    v7 = *(_QWORD *)(DefiningOp + 72);
    v8 = *(_QWORD *)(v7 + 24);
    v9 = **v4;
    if (v9)
    {
      v10 = v9 == v8;
    }
    else
    {
      **v4 = v8;
      v7 = *(_QWORD *)(DefiningOp + 72);
      v10 = 1;
    }
    v11 = v4[1];
    v12 = *(_QWORD *)(v7 + 56);
    if (*v11)
    {
      v13 = *v11 == v12;
    }
    else
    {
      *v11 = v12;
      v13 = 1;
    }
    v6 = v10 && v13;
    if (v6 == 1)
      v4[2] = (uint64_t *)DefiningOp;
    else
LABEL_14:
      LOBYTE(v6) = 0;
  }
  v14 = v6 & (**(_BYTE **)a2 != 0);
  if (!DefiningOp)
    v14 = 0;
  **(_BYTE **)a2 = v14;
  v15 = a1[1];
  v30 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v30);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_30;
    }
    v18 = *(_QWORD *)(result + 72);
    v19 = *(_QWORD *)(v18 + 24);
    v20 = **v15;
    if (v20)
    {
      v21 = v20 == v19;
    }
    else
    {
      **v15 = v19;
      v18 = *(_QWORD *)(result + 72);
      v21 = 1;
    }
    v22 = v15[1];
    v23 = *(_QWORD *)(v18 + 56);
    if (*v22)
    {
      v24 = *v22 == v23;
    }
    else
    {
      *v22 = v23;
      v24 = 1;
    }
    if (v21 && v24)
    {
      v15[2] = (uint64_t *)result;
      v17 = 1;
    }
    else
    {
LABEL_30:
      v17 = 0;
    }
  }
  v25 = *(_BYTE **)a2;
  v26 = v17 & (**(_BYTE **)a2 != 0);
  if (!result)
    v26 = 0;
  *v25 = v26;
  v27 = a1[2];
  v28 = *(uint64_t **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 88);
  if (*v27)
  {
    v29 = *v27 == v28;
  }
  else
  {
    *v27 = v28;
    v25 = *(_BYTE **)a2;
    v26 = **(_BYTE **)a2 != 0;
    v29 = 1;
  }
  *v25 = v29 & v26;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t DefiningOp;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v4 = *a1;
  v16 = *(unsigned __int8 **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  v7 = DefiningOp;
  if (DefiningOp)
  {
    v19 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      v18 = 1;
      v16 = &v18;
      v17 = &v19;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)&v16);
      v8 = v18;
      if (v18)
        v4[2] = v19;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v9 = 0;
  **(_BYTE **)a2 = v9;
  v10 = a1[1];
  v16 = *(unsigned __int8 **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  v13 = result;
  if (result)
  {
    v19 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      v18 = 1;
      v16 = &v18;
      v17 = &v19;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v10, (uint64_t)&v16);
      v14 = v18;
      if (v18)
        v10[2] = v19;
      v12 = v14 != 0;
    }
    else
    {
      v12 = 0;
    }
  }
  v15 = v12 && **(_BYTE **)a2 != 0;
  if (!v13)
    v15 = 0;
  **(_BYTE **)a2 = v15;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL *v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[2];
  unsigned __int8 v15;
  uint64_t v16;

  v4 = *a1;
  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  v7 = result;
  if (result)
  {
    v16 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConcatOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 3)
    {
      v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul>(v4, (uint64_t)v14);
      v8 = v15;
      if (v15)
        *(_QWORD *)(v4 + 24) = v16;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = *(BOOL **)a2;
  v10 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v10 = 0;
  *v9 = v10;
  v11 = (_QWORD *)a1[1];
  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    v13 = *v11 == v12;
  }
  else
  {
    *v11 = v12;
    v9 = *(BOOL **)a2;
    v10 = **(_BYTE **)a2 != 0;
    v13 = 1;
  }
  *v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t DefiningOp;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  unsigned __int8 *v20;
  uint64_t *v21;
  unsigned __int8 v22;
  uint64_t v23;

  v4 = *(uint64_t **)a1;
  v20 = *(unsigned __int8 **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  v7 = DefiningOp;
  if (DefiningOp)
  {
    v23 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      v22 = 1;
      v20 = &v22;
      v21 = &v23;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)&v20);
      v8 = v22;
      if (v22)
        v4[2] = v23;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v9 = 0;
  **(_BYTE **)a2 = v9;
  v10 = *(_QWORD *)(a1 + 8);
  v20 = *(unsigned __int8 **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  v13 = result;
  if (result)
  {
    v23 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::StridedSliceOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 4)
    {
      v22 = 1;
      v20 = &v22;
      v21 = &v23;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul,3ul>((uint64_t ***)v10, (uint64_t)&v20);
      v14 = v22;
      if (v22)
        *(_QWORD *)(v10 + 32) = v23;
      v12 = v14 != 0;
    }
    else
    {
      v12 = 0;
    }
  }
  v15 = *(BOOL **)a2;
  v16 = v12 && **(_BYTE **)a2 != 0;
  if (!v13)
    v16 = 0;
  *v15 = v16;
  v17 = *(_QWORD **)(a1 + 16);
  v18 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 88);
  if (*v17)
  {
    v19 = *v17 == v18;
  }
  else
  {
    *v17 = v18;
    v15 = *(BOOL **)a2;
    v16 = **(_BYTE **)a2 != 0;
    v19 = 1;
  }
  *v15 = v19 && v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL *v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[2];
  unsigned __int8 v15;
  uint64_t v16;

  v4 = *a1;
  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  v7 = result;
  if (result)
  {
    v16 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)v14);
      v8 = v15;
      if (v15)
        *(_QWORD *)(v4 + 16) = v16;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = *(BOOL **)a2;
  v10 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v10 = 0;
  *v9 = v10;
  v11 = (_QWORD *)a1[1];
  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    v13 = *v11 == v12;
  }
  else
  {
    *v11 = v12;
    v9 = *(BOOL **)a2;
    v10 = **(_BYTE **)a2 != 0;
    v13 = 1;
  }
  *v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL *v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[2];
  unsigned __int8 v15;
  uint64_t v16;

  v4 = *(uint64_t **)a1;
  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  v7 = result;
  if (result)
  {
    v16 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(v4, (uint64_t)v14);
      v8 = v15;
      if (v15)
        v4[2] = v16;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = *(BOOL **)a2;
  v10 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v10 = 0;
  *v9 = v10;
  v11 = *(_QWORD **)(a1 + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    v13 = *v11 == v12;
  }
  else
  {
    *v11 = v12;
    v9 = *(BOOL **)a2;
    v10 = **(_BYTE **)a2 != 0;
    v13 = 1;
  }
  *v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL *v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD v14[2];
  unsigned __int8 v15;
  uint64_t v16;

  v4 = *a1;
  v14[0] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)v14);
  v7 = result;
  if (result)
  {
    v16 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::StridedSliceOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 4)
    {
      v15 = 1;
      v14[0] = &v15;
      v14[1] = &v16;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul,3ul>((uint64_t ***)v4, (uint64_t)v14);
      v8 = v15;
      if (v15)
        *(_QWORD *)(v4 + 32) = v16;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = *(BOOL **)a2;
  v10 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v10 = 0;
  *v9 = v10;
  v11 = (_QWORD *)a1[1];
  v12 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  if (*v11)
  {
    v13 = *v11 == v12;
  }
  else
  {
    *v11 = v12;
    v9 = *(BOOL **)a2;
    v10 = **(_BYTE **)a2 != 0;
    v13 = 1;
  }
  *v9 = v13 && v10;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*,mlir::detail::any_value_binder*> & *)#1},0ul,1ul,2ul,3ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  BOOL *v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t **v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  BOOL v22;
  uint64_t **v23;
  uint64_t *v24;
  BOOL v25;
  BOOL v26;
  uint64_t **v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;

  v4 = *a1;
  v30 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v30);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    v7 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(v7 + 24);
    v9 = **v4;
    if (v9)
    {
      v10 = v9 == v8;
    }
    else
    {
      **v4 = v8;
      v7 = *(_QWORD *)(result + 72);
      v10 = 1;
    }
    v11 = v4[1];
    v12 = *(_QWORD *)(v7 + 56);
    if (*v11)
    {
      v13 = *v11 == v12;
    }
    else
    {
      *v11 = v12;
      v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      v6 = 1;
    }
    else
    {
LABEL_14:
      v6 = 0;
    }
  }
  v14 = *(BOOL **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v6 & (**(_BYTE **)a2 != 0);
  if (result)
    v17 = v16;
  else
    v17 = 0;
  *v14 = v17;
  v18 = a1[1];
  v19 = *(_QWORD **)(*(_QWORD *)v15 + 72);
  v20 = (uint64_t *)v19[7];
  if (*v18)
  {
    v21 = *v18 == v20;
  }
  else
  {
    *v18 = v20;
    v14 = *(BOOL **)a2;
    v19 = *(_QWORD **)(**(_QWORD **)(a2 + 8) + 72);
    v17 = **(_BYTE **)a2 != 0;
    v21 = 1;
  }
  v22 = v21 && v17;
  *v14 = v22;
  v23 = a1[2];
  v24 = (uint64_t *)v19[11];
  if (*v23)
  {
    v25 = *v23 == v24;
  }
  else
  {
    *v23 = v24;
    v14 = *(BOOL **)a2;
    v19 = *(_QWORD **)(**(_QWORD **)(a2 + 8) + 72);
    v22 = **(_BYTE **)a2 != 0;
    v25 = 1;
  }
  v26 = v25 && v22;
  *v14 = v26;
  v27 = a1[3];
  v28 = (uint64_t *)v19[15];
  if (*v27)
  {
    v29 = *v27 == v28;
  }
  else
  {
    *v27 = v28;
    v14 = *(BOOL **)a2;
    v26 = **(_BYTE **)a2 != 0;
    v29 = 1;
  }
  *v14 = v29 && v26;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>> *> & *)#2},0ul,1ul>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t DefiningOp;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  unsigned __int8 v18;
  uint64_t v19;

  v4 = *a1;
  v16 = *(unsigned __int8 **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  v7 = DefiningOp;
  if (DefiningOp)
  {
    v19 = DefiningOp;
    if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
      && *(_DWORD *)(DefiningOp + 68) == 2)
    {
      v18 = 1;
      v16 = &v18;
      v17 = &v19;
      mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::StridedSliceOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>((uint64_t **)v4, (uint64_t)&v16);
      v8 = v18;
      if (v18)
        *(_QWORD *)(v4 + 16) = v19;
      v6 = v8 != 0;
    }
    else
    {
      v6 = 0;
    }
  }
  v9 = v6 && **(_BYTE **)a2 != 0;
  if (!v7)
    v9 = 0;
  **(_BYTE **)a2 = v9;
  v10 = a1[1];
  v16 = *(unsigned __int8 **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v16);
  v13 = result;
  if (result)
  {
    v19 = result;
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MultiplyOp,void>::id
      && (*(_BYTE *)(result + 46) & 0x80) != 0
      && *(_DWORD *)(result + 68) == 2)
    {
      v18 = 1;
      v16 = &v18;
      v17 = &v19;
      result = mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::MultiplyOp,mlir::detail::any_value_binder,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ConcatOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::ReshapeOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>,mlir::detail::any_value_binder> *> & *)#1},0ul,1ul>((uint64_t **)v10, (uint64_t)&v16);
      v14 = v18;
      if (v18)
        *(_QWORD *)(v10 + 16) = v19;
      v12 = v14 != 0;
    }
    else
    {
      v12 = 0;
    }
  }
  v15 = v12 && **(_BYTE **)a2 != 0;
  if (!v13)
    v15 = 0;
  **(_BYTE **)a2 = v15;
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

uint64_t mlir::getSingleFloatValue<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *ArgAttrsAttr;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  _QWORD *Type;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *ElementsAttrRawData;
  uint64_t v30;
  uint64_t v31;
  uint64_t NumElements;
  unsigned int v33;
  uint64_t v34;
  int8x8_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned int v39;
  uint64_t v40;
  int16x4_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int IntOrFloatBitWidth;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64x2_t v74;
  int32x2_t v75;
  uint64_t v76;
  int32x2_t v77;
  int32x2_t v78;
  int32x2_t v79;
  uint64_t v80;
  float v81;
  float v82;
  _QWORD v83[2];
  __int128 v84;
  uint64_t OperandRange;
  _QWORD v86[2];
  __int128 v87;
  _QWORD *ArgOperands;
  __int128 v89;
  _QWORD v90[6];

  v90[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v84 = a1;
  *((_QWORD *)&v84 + 1) = a2;
  v83[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v84);
  v83[1] = v2;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v83);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v4) == 1)
  {
    ArgOperands = (_QWORD *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v84);
    *(_QWORD *)&v89 = v5;
    v6 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                  + 136);
    _ZF = v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
       || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
    v8 = _ZF || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
    v9 = v8 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
    v10 = v9 || v6 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
    v11 = v10 || v6 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
    v12 = v11 || v6 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
    v13 = v12 || v6 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
    v14 = v13 || v6 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
    v15 = v14 || v6 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
    if (v15
      || (v6 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        ? (v45 = v6 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        : (v45 = 1),
          v45))
    {
      v87 = v84;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v87);
      v17 = Type;
      if (!Type)
        goto LABEL_40;
      v18 = *Type;
      v19 = mlir::TypeID::get<mlir::ShapedType>();
      v20 = *(unsigned int *)(v18 + 16);
      if (!(_DWORD)v20)
        goto LABEL_40;
      v21 = *(_QWORD **)(v18 + 8);
      v22 = &v21[2 * v20];
      do
      {
        v23 = v20 >> 1;
        v24 = &v21[2 * (v20 >> 1)];
        v26 = *v24;
        v25 = v24 + 2;
        v20 += ~(v20 >> 1);
        if (v26 < v19)
          v21 = v25;
        else
          v20 = v23;
      }
      while (v20);
      if (v21 != v22 && *v21 == v19)
        v27 = v21[1];
      else
LABEL_40:
        v27 = 0;
      v86[0] = v17;
      v86[1] = v27;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
      v28 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
      ElementsAttrRawData = (unsigned __int8 *)mlir::getElementsAttrRawData(v87);
      v31 = v30;
      NumElements = mlir::ElementsAttr::getNumElements(v87, *((uint64_t *)&v87 + 1));
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        v34 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v34 = 0;
          LOBYTE(v33) = ElementsAttrRawData[v34];
          _S0 = (float)v33;
          goto LABEL_117;
        }
LABEL_116:
        _S0 = 0.0;
LABEL_117:
        v47 = LODWORD(_S0);
        v46 = 0x100000000;
        return v47 | v46;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        v37 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v37 = 0;
          v38 = ElementsAttrRawData[v37];
          _S0 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v36)).i32[0];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        v40 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v40 = 0;
          LOWORD(v39) = *(_WORD *)&ElementsAttrRawData[2 * v40];
          _S0 = (float)v39;
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        v42 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v42 = 0;
          v43 = *(_WORD *)&ElementsAttrRawData[2 * v42];
          _S0 = (float)vmovl_s16(v41).i32[0];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        v44 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v44 = 0;
          _S0 = (float)*(unsigned int *)&ElementsAttrRawData[4 * v44];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        v48 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v48 = 0;
          _S0 = (float)*(int *)&ElementsAttrRawData[4 * v48];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        v49 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v49 = 0;
          _S0 = (float)*(unint64_t *)&ElementsAttrRawData[8 * v49];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        v50 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v50 = 0;
          _S0 = (float)*(uint64_t *)&ElementsAttrRawData[8 * v50];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        v51 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v51 = 0;
          _H0 = *(_WORD *)&ElementsAttrRawData[2 * v51];
          __asm { FCVT            S0, H0 }
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        v56 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v56 = 0;
          _S0 = *(float *)&ElementsAttrRawData[4 * v56];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        v57 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v57 = 0;
          _S0 = *(double *)&ElementsAttrRawData[8 * v57];
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        v58 = NumElements - 1;
        if (NumElements >= 1)
        {
          if (v28)
            v58 = 0;
          LODWORD(_S0) = *(unsigned __int16 *)&ElementsAttrRawData[2 * v58] << 16;
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
      {
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        if (v31)
        {
          v63 = 0;
          _S0 = 0.0;
          v64 = NumElements;
          v65 = 8 / IntOrFloatBitWidth;
          do
          {
            v67 = NumElements - v63 * v65;
            if (v67 >= v65)
              v67 = 8 / IntOrFloatBitWidth;
            if (v67)
            {
              if (v64 >= v65)
                v68 = 8 / IntOrFloatBitWidth;
              else
                v68 = v64;
              v69 = v68 - 1;
              if (v69 >= 7)
                LOBYTE(v69) = 7;
              _S0 = (float)((*ElementsAttrRawData >> (IntOrFloatBitWidth * v69)) & ~(-1 << IntOrFloatBitWidth));
            }
            ++v63;
            v64 -= v65;
            ++ElementsAttrRawData;
            --v31;
          }
          while (v31);
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      if (v28)
        v59 = 1;
      else
        v59 = NumElements;
      ArgOperands = v90;
      v89 = xmmword_181233150;
      if (v59)
      {
        if (v59 < 0x29)
        {
          v60 = 0;
          v61 = v90;
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&ArgOperands, v90, v59, 1);
          v61 = ArgOperands;
          v60 = v89;
        }
        if (v59 != v60)
          bzero((char *)v61 + v60, v59 - v60);
        *(_QWORD *)&v89 = v59;
      }
      else
      {
        v61 = v90;
      }
      if (!v31)
      {
LABEL_165:
        v80 = NumElements - 1;
        if (NumElements < 1)
        {
          v81 = 0.0;
        }
        else
        {
          if (v28)
            v80 = 0;
          v81 = 0.0;
          if (*((_BYTE *)v61 + v80))
            v81 = 1.0;
        }
        v82 = v81;
        if (v61 != v90)
          free(v61);
        _S0 = v82;
        goto LABEL_117;
      }
      v70 = (BOOL *)v61 + 3;
      while (1)
      {
        if (v59 >= 8)
          v71 = 8;
        else
          v71 = v59;
        if (!v71)
          goto LABEL_136;
        if (v59 >= 8)
          v72 = 8;
        else
          v72 = v59;
        v73 = *ElementsAttrRawData;
        v74 = (uint64x2_t)vdupq_n_s64(v72 - 1);
        v75 = vmovn_s64((int64x2_t)vcgeq_u64(v74, (uint64x2_t)xmmword_181233120));
        if ((v75.i8[0] & 1) != 0)
          *(v70 - 3) = v73 & 1;
        if ((v75.i8[4] & 1) != 0)
          *(v70 - 2) = (v73 & 2) != 0;
        v76 = ((_BYTE)v72 + 1) & 0x1E;
        if (v76 == 2)
          goto LABEL_136;
        v77 = vmovn_s64((int64x2_t)vcgtq_u64(v74, (uint64x2_t)xmmword_181233160));
        if ((v77.i8[0] & 1) != 0)
        {
          *(v70 - 1) = (v73 & 4) != 0;
          if ((v77.i8[4] & 1) != 0)
            goto LABEL_154;
        }
        else if ((v77.i8[4] & 1) != 0)
        {
LABEL_154:
          *v70 = (v73 & 8) != 0;
          if (v76 == 4)
            goto LABEL_136;
          goto LABEL_155;
        }
        if (v76 == 4)
          goto LABEL_136;
LABEL_155:
        v78 = vmovn_s64((int64x2_t)vcgtq_u64(v74, (uint64x2_t)xmmword_181233170));
        if ((v78.i8[0] & 1) != 0)
        {
          v70[1] = (v73 & 0x10) != 0;
          if ((v78.i8[4] & 1) == 0)
            goto LABEL_157;
        }
        else if ((v78.i8[4] & 1) == 0)
        {
LABEL_157:
          if (v76 != 6)
            goto LABEL_161;
          goto LABEL_136;
        }
        v70[2] = (v73 & 0x20) != 0;
        if (v76 != 6)
        {
LABEL_161:
          v79 = vmovn_s64((int64x2_t)vcgtq_u64(v74, (uint64x2_t)xmmword_181233180));
          if ((v79.i8[0] & 1) != 0)
            v70[3] = (v73 & 0x40) != 0;
          if ((v79.i8[4] & 1) != 0)
            v70[4] = v73 >> 7;
        }
LABEL_136:
        ++ElementsAttrRawData;
        v70 += 8;
        v59 -= 8;
        if (!--v31)
          goto LABEL_165;
      }
    }
  }
  v46 = 0;
  v47 = 0;
  return v47 | v46;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReinterpretCastOp,mlir::mps::MultiplyOp &,mlir::Type &>(mlir::UnknownLoc **a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.reinterpret_cast";
    v17[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReinterpretCastOp::build(a1, (uint64_t)v19, *a3 - 16, *a4);
  v11 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReinterpretCastOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

void mlir::mps::`anonymous namespace'::CanonicalizeReadVariable::~CanonicalizeReadVariable(mlir::mps::_anonymous_namespace_::CanonicalizeReadVariable *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadVariableOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadVariableOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReadVariableOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeReadVariable::matchAndRewrite(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DefiningOp;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v11;
  _QWORD *v12;
  mlir::Block **v13;
  mlir::GenericProgramPoint *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  mlir::GenericProgramPoint *v19;

  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReadVariableOp,void>::id
    && (*(_BYTE *)(a2 + 46) & 0x80) != 0
    && *(_DWORD *)(a2 + 68) == 1)
  {
    v17[0] = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v17);
    if (DefiningOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::VariableFromTensorOp,void>::id
        && (*(_BYTE *)(DefiningOp + 46) & 0x80) != 0
        && *(_DWORD *)(DefiningOp + 68) == 1)
      {
        v16 = a2;
        v17[0] = DefiningOp;
        v15 = (_QWORD *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v17);
        v6 = (_QWORD *)*v15;
        v7 = *(_QWORD **)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v16);
        memset(v17, 0, 24);
        if (v6)
        {
          while (1)
          {
            v11 = v6[2];
            if (v11)
            {
              if (*(_UNKNOWN **)(*(_QWORD *)(v11 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::AssignVariableOp,void>::id)
              {
                v19 = (mlir::GenericProgramPoint *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v16);
                if (mlir::Value::getDefiningOp((mlir::Value *)&v19) == v11
                  || mlir::DominanceInfo::properlyDominates((mlir::DominanceInfo *)v17, (uint64_t)v19, (mlir::Block **)v11))
                {
                  if (v7)
                    break;
                }
              }
            }
LABEL_15:
            v6 = (_QWORD *)*v6;
            if (!v6)
              goto LABEL_28;
          }
          v12 = v7;
          while (1)
          {
            v13 = (mlir::Block **)v12[2];
            if ((mlir::Block **)v11 == v13
              || (mlir::DominanceInfo::properlyDominatesImpl((mlir::DominanceInfo *)v17, (mlir::Block **)v11, v13, 1) & 1) != 0)
            {
              break;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_15;
          }
          v19 = mlir::OpBuilder::create<mlir::mps::ReadVariableOp,mlir::detail::TypedValue<mlir::TensorType> &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v15);
          v14 = mlir::OpBuilder::create<mlir::mps::IdentityOp,mlir::mps::ReadVariableOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), &v19);
          (*(void (**)(_QWORD *, uint64_t, mlir::GenericProgramPoint *))(*a3 + 32))(a3, a2, v14);
        }
LABEL_28:
        mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase((uint64_t)v17);
      }
    }
  }
  v17[0] = "failed: read var pattern did not match";
  v18 = 259;
  v19 = (mlir::GenericProgramPoint *)v17;
  v8 = a3[2];
  if (v8 && mlir::RewriterBase::Listener::classof(v8))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), mlir::GenericProgramPoint **))(*(_QWORD *)v8 + 64))(v8, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReadVariableOp &>(mlir::mps::ReadVariableOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v19);
  else
    return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReadVariableOp,mlir::detail::TypedValue<mlir::TensorType> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.read_variable", (const unsigned __int8 *)0x11, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mps.read_variable";
    v15[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::ACosOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReadVariableOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::ReadVariableOp &>(mlir::mps::ReadVariableOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::IdentityOp,mlir::mps::ReadVariableOp &>(mlir::OpBuilder *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.identity", (const unsigned __int8 *)0xC, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mps.identity";
    v15[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::ACosOp::build((uint64_t)a1, (uint64_t)v17, *a3 - 16);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::mps::`anonymous namespace'::CanonicalizeStridedSliceToGather::~CanonicalizeStridedSliceToGather(mlir::mps::_anonymous_namespace_::CanonicalizeStridedSliceToGather *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeStridedSliceToGather::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t ParentOp;
  mlir::Block *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t DefiningOp;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *OperandRange;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t ElementBitWidth;
  unint64_t v37;
  uint64_t v38;
  mlir::GenericProgramPoint *v39;
  uint64_t v40;
  mlir::GenericProgramPoint *v41;
  uint64_t v42;
  mlir::GenericProgramPoint *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ArgAttrsAttr;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  mlir::GenericProgramPoint *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t IntegerType;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  mlir::GenericProgramPoint *v71;
  uint64_t v72;
  char *v73;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  mlir::GenericProgramPoint *v81;
  uint64_t Input;
  uint64_t v83;
  _QWORD v84[2];
  _QWORD v85[2];
  mlir::GenericProgramPoint *v86;
  _QWORD *v87;
  _QWORD v88[2];
  _QWORD v89[2];
  _QWORD v90[2];
  _QWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  void *__p;
  uint64_t v100;
  _BYTE v101[16];
  __int16 v102;
  void *v103[2];
  _BYTE v104[40];
  void **p_p;
  uint64_t v106;
  _QWORD v107[6];

  v4 = a2;
  v107[5] = *MEMORY[0x1E0C80C00];
  v92 = a2;
  ParentOp = a2;
  do
  {
    v6 = *(mlir::Block **)(ParentOp + 16);
    if (v6)
    {
      ParentOp = mlir::Block::getParentOp(v6);
      if (ParentOp)
        continue;
    }
    __p = "failed: StridedSliceOp to GatherOp is not needed if the parent Op is not a WhileOp";
    v102 = 259;
    goto LABEL_54;
  }
  while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id);
  if (!mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v92))
  {
    v73 = "failed: Conversion from StridedSliceOp to GatherOp is not needed if end is not a size";
LABEL_53:
    __p = v73;
    v102 = 259;
    v4 = v92;
LABEL_54:
    p_p = &__p;
    v72 = *(_QWORD *)(a3 + 16);
    if (!v72)
      return v72;
    if (mlir::RewriterBase::Listener::classof(v72))
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void ***))(*(_QWORD *)v72 + 64))(v72, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(mlir::mps::StridedSliceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &p_p);
    return 0;
  }
  v7 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v92) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v7)
    return 0;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_15;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_15:
    v17 = 0;
  v91[0] = v7;
  v91[1] = v17;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v91))
    return 0;
  p_p = (void **)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v92);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&p_p);
  if (!DefiningOp)
    goto LABEL_52;
  v19 = DefiningOp;
  v20 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v19 + 48) + 32))(*(_QWORD *)(v19 + 48), v20))
    goto LABEL_52;
  __p = v101;
  v100 = 0x100000000;
  mlir::Operation::fold(v19, 0, 0, (uint64_t)&__p);
  v22 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8));
  if (v22)
    v23 = v21;
  else
    v23 = 0;
  if (__p != v101)
    free(__p);
  if (!v22)
  {
LABEL_52:
    v73 = "failed: end value must be a constant";
    goto LABEL_53;
  }
  p_p = (void **)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v92);
  v24 = mlir::Value::getDefiningOp((mlir::Value *)&p_p);
  if (!v24)
    return mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(a3, &v92, "failed: stride value must be a constant");
  v25 = v24;
  v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26))
    return mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(a3, &v92, "failed: stride value must be a constant");
  __p = v101;
  v100 = 0x100000000;
  mlir::Operation::fold(v25, 0, 0, (uint64_t)&__p);
  v28 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)__p & 0xFFFFFFFFFFFFFFF8));
  if (v28)
    v29 = v27;
  else
    v29 = 0;
  if (__p != v101)
    free(__p);
  if (!v28)
    return mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(a3, &v92, "failed: stride value must be a constant");
  __p = (void *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v92) + 8) & 0xFFFFFFFFFFFFFFF8);
  v90[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&__p);
  v90[1] = v30;
  __p = (void *)(*(_QWORD *)(mlir::anec::GOC::getBias((mlir::anec::GOC *)&v92) + 8) & 0xFFFFFFFFFFFFFFF8);
  v89[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&__p);
  v89[1] = v31;
  __p = (void *)(*(_QWORD *)(mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v92) + 8) & 0xFFFFFFFFFFFFFFF8);
  v88[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&__p);
  v88[1] = v32;
  OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v90);
  v87 = OperandRange;
  v34 = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v89);
  v35 = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v88);
  ElementBitWidth = mlir::getElementBitWidth(v34);
  if (ElementBitWidth > mlir::getElementBitWidth(OperandRange))
  {
    v87 = v34;
    OperandRange = v34;
  }
  v37 = mlir::getElementBitWidth(v35);
  if (v37 > mlir::getElementBitWidth(OperandRange))
    v87 = v35;
  v38 = *(_QWORD *)(v92 + 24);
  __p = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v92);
  v39 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)(a3 + 8), v38, (uint64_t *)&__p, (uint64_t *)&v87);
  v86 = v39;
  v40 = *(_QWORD *)(v92 + 24);
  __p = (void *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v92);
  v41 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)(a3 + 8), v40, (uint64_t *)&__p, (uint64_t *)&v87);
  v42 = *(_QWORD *)(v92 + 24);
  __p = (void *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v92);
  v43 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>((mlir::UnknownLoc **)(a3 + 8), v42, (uint64_t *)&__p, (uint64_t *)&v87);
  __p = (void *)(*((_QWORD *)v39 - 1) & 0xFFFFFFFFFFFFFFF8);
  v85[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&__p);
  v85[1] = v44;
  __p = (void *)(*((_QWORD *)v41 - 1) & 0xFFFFFFFFFFFFFFF8);
  v84[0] = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&__p);
  v84[1] = v45;
  __p = (void *)(*((_QWORD *)v43 - 1) & 0xFFFFFFFFFFFFFFF8);
  mlir::Type::cast<mlir::ShapedType>((uint64_t **)&__p);
  p_p = (void **)v107;
  v106 = 0x500000000;
  v103[0] = v104;
  v103[1] = (void *)0x500000000;
  mlir::getIntValues<long long>((uint64_t)v22, v23, (uint64_t)&p_p, 1);
  mlir::getIntValues<long long>((uint64_t)v28, v29, (uint64_t)v103, 1);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v91);
  if (v46 != v106)
    goto LABEL_62;
  v47 = v46;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v91);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v84);
  v49 = v47 - 1;
  if (v47 <= 1)
  {
LABEL_42:
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v85);
    v83 = (uint64_t)v39 - 16;
    if (v55 < 1)
    {
      v56 = *(_QWORD *)(v92 + 24);
      v96 = (uint64_t *)1;
      llvm::SmallVector<long long,6u>::SmallVector(&__p, &v96, 1);
      v83 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::mps::CastOp &,llvm::SmallVector<long long,6u>>((mlir::Builder *)(a3 + 8), v56, &v86, (uint64_t)&__p)- 16;
      if (__p != v101)
        free(__p);
    }
    Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v92);
    v57 = *(_QWORD *)(v92 + 24);
    LODWORD(__p) = 0;
    LODWORD(v96) = 0;
    LODWORD(v80) = 1;
    v58 = mlir::OpBuilder::create<mlir::mps::SliceOp,mlir::Value &,int,int,int>((mlir::mps::ConstantOp *)(a3 + 8), v57, &v83, (unsigned int *)&__p, (unsigned int *)&v96, (unsigned int *)&v80);
    v81 = v58;
    if (*p_p != (void *)1)
    {
      v59 = *(_QWORD *)(v92 + 24);
      v98 = 1;
      v78 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v98, 1, (uint64_t)v87, 0);
      __p = mlir::Type::cast<mlir::ShapedType>(&v78);
      v100 = v60;
      v95 = (uint64_t)*p_p;
      v96 = &v95;
      v97 = 1;
      v79 = mlir::DenseIntElementsAttr::get<long long>(&__p, (uint64_t *)&v96);
      v80 = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 8), v59, (uint64_t **)&v79);
      v61 = *(_QWORD *)(v92 + 24);
      v95 = 1;
      IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x20u, 1);
      v98 = mlir::RankedTensorType::get((uint64_t)&v95, 1, IntegerType, 0);
      __p = mlir::Type::cast<mlir::ShapedType>((uint64_t **)&v98);
      v100 = v63;
      LODWORD(v77) = 0;
      v96 = (uint64_t *)&v77;
      v97 = 1;
      v78 = (uint64_t *)mlir::DenseIntElementsAttr::get<int>(&__p, (uint64_t *)&v96);
      v79 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 8), v61, &v78);
      v78 = (uint64_t *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::mps::ConstantOp &,mlir::Type>((mlir::UnknownLoc **)(a3 + 8), *(_QWORD *)(v92 + 24), &v79, (uint64_t *)&v87);
      v98 = (uint64_t)mlir::OpBuilder::create<mlir::mps::GetCoordOp,mlir::mps::RankOp &,mlir::mps::ConstantOp &>((uint64_t *)(a3 + 8), *(_QWORD *)(v92 + 24), &v80, &v78);
      v64 = *(_QWORD *)(v92 + 24);
      v94 = 1;
      v76 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v94, 1, (uint64_t)v87, 0);
      __p = mlir::Type::cast<mlir::ShapedType>(&v76);
      v100 = v65;
      v93 = *(_QWORD *)v103[0];
      v96 = &v93;
      v97 = 1;
      v77 = (uint64_t *)mlir::DenseIntElementsAttr::get<long long>(&__p, (uint64_t *)&v96);
      v95 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 8), v64, &v77);
      __p = mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::mps::ConstantOp,mlir::mps::CastOp &>((mlir::Float32Type **)(a3 + 8), *(_QWORD *)(v92 + 24), &v98, &v95);
      v58 = mlir::OpBuilder::create<mlir::mps::AddOp,mlir::mps::SubtractOp &,mlir::mps::ConstantOp>((mlir::Float32Type **)(a3 + 8), *(_QWORD *)(v92 + 24), &v81, &__p);
    }
    v96 = (uint64_t *)((char *)v58 - 16);
    LODWORD(v80) = -1;
    std::vector<int>::vector[abi:nn180100](&__p, &v80, 1uLL);
    v79 = 1;
    v66 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 8), 0x20u, 1);
    v80 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v79, 1, v66, 0);
    v67 = *(_QWORD *)(v92 + 24);
    v68 = mlir::Type::cast<mlir::ShapedType>(&v80);
    v78 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v68, v69, __p, v100 - (_QWORD)__p, 4, 1, 1);
    v79 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 8), v67, &v78);
    v78 = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(v92 + 24), (uint64_t *)&v96, &v79);
    v70 = *(_QWORD *)(v92 + 24);
    LODWORD(v98) = 0;
    LOBYTE(v95) = 1;
    v71 = mlir::OpBuilder::create<mlir::mps::GatherNDOp,mlir::Value &,mlir::mps::ExpandDimsOp &,int,BOOL>((mlir::Builder *)(a3 + 8), v70, &Input, &v78, (unsigned int *)&v98, (unsigned __int8 *)&v95);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v92, v71);
    if (__p)
    {
      v100 = (uint64_t)__p;
      operator delete(__p);
    }
    v72 = 1;
  }
  else
  {
    v50 = (uint64_t *)(p_p + 1);
    v51 = (uint64_t *)(ArgAttrsAttr + 8);
    while (1)
    {
      v53 = *v51++;
      v52 = v53;
      v54 = *v50++;
      if (v52 != v54)
        break;
      if (!--v49)
        goto LABEL_42;
    }
LABEL_62:
    v72 = 0;
  }
  if (v103[0] != v104)
    free(v103[0]);
  if (p_p != v107)
    free(p_p);
  return v72;
}

uint64_t mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE *v7;
  char v8;
  char v9;
  _QWORD *v10;

  v3 = 1;
  v9 = 1;
  if (*a3)
  {
    v7 = a3;
    v3 = 3;
  }
  v8 = v3;
  v4 = *a2;
  v10 = &v7;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  result = mlir::RewriterBase::Listener::classof(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), _QWORD **))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(v4 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(mlir::mps::StridedSliceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &v10);
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::mps::CastOp &,llvm::SmallVector<long long,6u>>(mlir::Builder *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  uint64_t v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.reshape";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::ReshapeOp::build(a1, v19, *a3 - 16, *(_QWORD *)a4, (uint64_t *)*(unsigned int *)(a4 + 8));
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::SliceOp,mlir::Value &,int,int,int>(mlir::mps::ConstantOp *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  uint64_t v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.slice", (const unsigned __int8 *)9, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"mps.slice";
    v21[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::SliceOp::build(a1, v23, *a3, *a4, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SliceOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

uint64_t mlir::DenseIntElementsAttr::get<long long>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  if (v2)
    v3 = *a2;
  else
    v3 = 0;
  return mlir::DenseElementsAttr::getFromRawBuffer(*a1, a1[1], v3, 8 * v2, 8, 1, 1);
}

uint64_t mlir::DenseIntElementsAttr::get<int>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  if (v2)
    v3 = *a2;
  else
    v3 = 0;
  return mlir::DenseElementsAttr::getFromRawBuffer(*a1, a1[1], v3, 4 * v2, 4, 1, 1);
}

_QWORD *std::vector<int>::vector[abi:nn180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 62)
      abort();
    v5 = 4 * a3;
    v6 = (char *)operator new(4 * a3);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::GatherNDOp,mlir::Value &,mlir::mps::ExpandDimsOp &,int,BOOL>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, unsigned int *a5, unsigned __int8 *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.gather_nd", (const unsigned __int8 *)0xD, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"mps.gather_nd";
    v21[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::GatherNDOp::build(a1, (uint64_t)v23, *a3, *a4 - 16, *a5, *a6);
  v15 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::GatherNDOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::StridedSliceOp &>(mlir::mps::StridedSliceOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::Conv2DOp>::~CanonicalizeQuantizedLayerScale(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::Conv2DOp>::~CanonicalizeQuantizedLayerScale(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Float32Type **a3)
{
  unint64_t v4;
  mlir::Float32Type **v5;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DefiningOp;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t SparseShape;
  uint64_t Filter;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *ArgAttrsAttr;
  uint64_t v29;
  uint64_t v30;
  int Axis;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::ArrayAttr *p_Input;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  uint64_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t ElementTypeOrSelf;
  uint64_t Loc;
  unsigned int v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t IntegerType;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *InputAttributeNames;
  uint64_t v70;
  uint64_t v71;
  char *Bias;
  uint64_t Input;
  uint64_t v74;
  unint64_t v75[2];
  void *v76;
  uint64_t v77;
  _BYTE v78[40];
  uint64_t FastmathAttr;
  void *v80;
  uint64_t v81;
  _BYTE v82[16];
  char *v83;
  uint64_t v84;
  _BYTE v85[16];
  uint64_t *v86;
  uint64_t v87;
  _QWORD v88[4];

  v4 = 0;
  v88[2] = *MEMORY[0x1E0C80C00];
  v86 = v88;
  v87 = 0x200000000;
  v83 = v85;
  v84 = 0x200000000;
  v80 = v82;
  v81 = 0x200000000;
  v5 = a3 + 1;
  while ((*(_BYTE *)(a2 + 46) & 0x80) != 0 && v4 < *(unsigned int *)(a2 + 68))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v4 + 24);
    v71 = v9;
    v10 = v81;
    if (v81 >= (unint64_t)HIDWORD(v81))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v82, v81 + 1, 8);
      v10 = v81;
    }
    *((_QWORD *)v80 + v10) = v9;
    LODWORD(v81) = v81 + 1;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v71);
    if (DefiningOp)
    {
      v12 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
      v13 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
      v14 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? DefiningOp : 0;
      v70 = v14;
      if (v13)
      {
        SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v70);
        if (mlir::isConstantFPZero(SparseShape))
        {
          Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v70);
          if (!mlir::isConstantFPOne(Filter))
          {
            v17 = (uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8);
            if (!v17)
              goto LABEL_25;
            v18 = *v17;
            v19 = mlir::TypeID::get<mlir::ShapedType>();
            v20 = *(unsigned int *)(v18 + 16);
            if (!(_DWORD)v20)
              goto LABEL_25;
            v21 = *(_QWORD **)(v18 + 8);
            v22 = &v21[2 * v20];
            do
            {
              v23 = v20 >> 1;
              v24 = &v21[2 * (v20 >> 1)];
              v26 = *v24;
              v25 = v24 + 2;
              v20 += ~(v20 >> 1);
              if (v26 < v19)
                v21 = v25;
              else
                v20 = v23;
            }
            while (v20);
            if (v21 != v22 && *v21 == v19)
              v27 = v21[1];
            else
LABEL_25:
              v27 = 0;
            v76 = v17;
            v77 = v27;
            ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v76);
            if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v29) == 1)
            {
              v30 = -1;
            }
            else
            {
              v76 = (void *)a2;
              if (!v4)
                goto LABEL_3;
              Bias = *(char **)(*(_QWORD *)(a2 + 72) + 32 * v4 + 24);
              Input = mlir::Value::getDefiningOp((mlir::Value *)&Bias);
              Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&Input);
              v32 = Axis < 0 ? Axis : Axis - 4;
              if (v32 != qword_181240F50[(int)mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v76)])
                goto LABEL_3;
              v30 = qword_181240F50[(int)mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v76)];
            }
            v33 = v87;
            if (v87 >= (unint64_t)HIDWORD(v87))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v88, v87 + 1, 8);
              v33 = v87;
            }
            v86[v33] = Filter;
            LODWORD(v87) = v87 + 1;
            v34 = v84;
            if (v84 >= (unint64_t)HIDWORD(v84))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v84 + 1, 8);
              v34 = v84;
            }
            *(_QWORD *)&v83[8 * v34] = v30;
            LODWORD(v84) = v84 + 1;
            v6 = *(_QWORD *)(v70 + 24);
            LODWORD(Input) = 1065353216;
            v76 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,float>(v5, v6, (float *)&Input) - 16;
            v7 = *(_QWORD *)(v70 + 24);
            Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v70);
            Bias = (char *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v70);
            InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v70);
            FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v70);
            v8 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>(v5, v7, &Input, (uint64_t *)&v76, (uint64_t *)&Bias, (uint64_t *)&InputAttributeNames, &FastmathAttr);
            *((_QWORD *)v80 + v4) = (char *)v8 - 16;
          }
        }
      }
    }
LABEL_3:
    ++v4;
  }
  if ((_DWORD)v87)
  {
    v35 = *(_QWORD *)(a2 + 24);
    v36 = *(unsigned int *)(a2 + 36);
    v37 = a2 - 16;
    if (!(_DWORD)v36)
      v37 = 0;
    Input = v37;
    v74 = v36;
    mlir::OperandRange::getTypes(&Input, (uint64_t *)&v76);
    if (*(_BYTE *)(a2 + 47))
    {
      Input = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
      p_Input = (mlir::ArrayAttr *)&Input;
    }
    else
    {
      p_Input = (mlir::ArrayAttr *)(a2 + 56);
    }
    Input = mlir::ArrayAttr::getValue(p_Input);
    v74 = v40;
    v41 = (char *)mlir::OpBuilder::create<mlir::mps::Conv2DOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>((mlir::OpBuilder *)v5, v35, (uint64_t *)&v76, (uint64_t)&v80, (uint64_t)&Input)- 16;
    Bias = v41;
    Input = mlir::getElementTypeOrSelf((uint64_t)v41);
    if ((_DWORD)v87 && (_DWORD)v84)
    {
      v42 = v86;
      v43 = v83;
      v44 = &v86[v87];
      v45 = &v83[8 * v84];
      do
      {
        v71 = *v42;
        v46 = *(_QWORD *)v43;
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v71);
        if (Input != ElementTypeOrSelf)
        {
          Loc = mlir::Value::getLoc((mlir::Value *)&v71);
          v71 = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(v5, Loc, &v71, &Input) - 16;
        }
        if (v46 != -1)
        {
          v49 = 0;
          v76 = v78;
          v77 = 0x500000000;
          v50 = v46 + 1;
          do
          {
            if (v49 >= HIDWORD(v77))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v78, v49 + 1, 8);
              v49 = v77;
            }
            *((_QWORD *)v76 + v49) = v50;
            v49 = v77 + 1;
            LODWORD(v77) = v77 + 1;
          }
          while (!__CFADD__(v50++, 1));
          v52 = mlir::Value::getLoc((mlir::Value *)&v71);
          FastmathAttr = v77;
          IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)v5, 0x40u, 1);
          v54 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&FastmathAttr, 1, IntegerType, 0);
          v55 = v54;
          if (!v54)
            goto LABEL_66;
          v56 = *v54;
          v57 = mlir::TypeID::get<mlir::ShapedType>();
          v58 = *(unsigned int *)(v56 + 16);
          if (!(_DWORD)v58)
            goto LABEL_66;
          v59 = *(_QWORD **)(v56 + 8);
          v60 = &v59[2 * v58];
          do
          {
            v61 = v58 >> 1;
            v62 = &v59[2 * (v58 >> 1)];
            v64 = *v62;
            v63 = v62 + 2;
            v58 += ~(v58 >> 1);
            if (v64 < v57)
              v59 = v63;
            else
              v58 = v61;
          }
          while (v58);
          if (v59 != v60 && *v59 == v57)
            v65 = v59[1];
          else
LABEL_66:
            v65 = 0;
          InputAttributeNames = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v55, v65, v76, 8 * v77, 8, 1, 1);
          v70 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)v5, v52, &InputAttributeNames)- 16;
          v71 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)v5, *(_QWORD *)(a2 + 24), &v71, &v70)- 16;
          if (v76 != v78)
            free(v76);
        }
        v66 = mlir::Value::getLoc((mlir::Value *)&v71);
        v41 = (char *)mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>(v5, v66, (uint64_t *)&Bias, &v71)- 16;
        Bias = v41;
        if (++v42 == v44)
          break;
        v43 += 8;
      }
      while (v43 != v45);
    }
    v76 = v41;
    v39 = 1;
    mlir::ValueRange::ValueRange(v75, (uint64_t)&v76, 1uLL);
    (*((void (**)(mlir::Float32Type **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, a2, v75[0], v75[1]);
  }
  else
  {
    v39 = 0;
  }
  if (v80 != v82)
    free(v80);
  if (v83 != v85)
    free(v83);
  if (v86 != v88)
    free(v86);
  return v39;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>(mlir::Float32Type **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  uint64_t v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"mps.dequantize";
    v23[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::mps::DequantizeOp::build(a1, v25, *a3, *a4, *a5, *a6, *a7);
  v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::Conv2DOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t NextResultAtOffset;
  uint64_t v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[38];
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.conv_2d", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"mps.conv_2d";
    v25[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  NextResultAtOffset = *a3;
  v14 = a3[1];
  v15 = a3[3];
  if (v14)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(_QWORD *)(a5 + 8));
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DOp>::~CanonicalizeQuantizedLayerScale(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DOp>::~CanonicalizeQuantizedLayerScale(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Float32Type **a3)
{
  unint64_t v4;
  uint64_t *v5;
  mlir::Float32Type **v6;
  uint64_t v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t DefiningOp;
  void *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t SparseShape;
  uint64_t Filter;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int Axis;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int ChannelAxis;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  mlir::ArrayAttr *p_Input;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  char *v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t ElementTypeOrSelf;
  uint64_t Loc;
  unsigned int v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t IntegerType;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v123;
  uint64_t *v125;
  uint64_t v126;
  uint64_t InputAttributeNames;
  char *Bias;
  _QWORD *Input;
  uint64_t v130;
  unint64_t v131[2];
  void *v132;
  uint64_t v133;
  _BYTE v134[40];
  uint64_t FastmathAttr;
  void *v136;
  uint64_t v137;
  _BYTE v138[16];
  char *v139;
  uint64_t v140;
  _BYTE v141[16];
  uint64_t *v142;
  uint64_t v143;
  _QWORD v144[4];

  v4 = 0;
  v144[2] = *MEMORY[0x1E0C80C00];
  v5 = v144;
  v142 = v144;
  v143 = 0x200000000;
  v139 = v141;
  v140 = 0x200000000;
  v136 = v138;
  v137 = 0x200000000;
  v6 = a3 + 1;
  while ((*(_BYTE *)(a2 + 46) & 0x80) != 0 && v4 < *(unsigned int *)(a2 + 68))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v4 + 24);
    v126 = v10;
    v11 = v137;
    if (v137 >= (unint64_t)HIDWORD(v137))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, v138, v137 + 1, 8);
      v11 = v137;
    }
    *((_QWORD *)v136 + v11) = v10;
    LODWORD(v137) = v137 + 1;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v126);
    if (!DefiningOp)
      goto LABEL_3;
    v13 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
    v14 = v13 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
    v15 = v13 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? (uint64_t *)DefiningOp : 0;
    v125 = v15;
    if (!v14)
      goto LABEL_3;
    SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v125);
    if (!mlir::isConstantFPZero(SparseShape))
      goto LABEL_3;
    Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v125);
    if (mlir::isConstantFPOne(Filter))
      goto LABEL_3;
    v18 = (uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v18)
      goto LABEL_25;
    v19 = *v18;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_25;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_25:
      v28 = 0;
    v132 = v18;
    v133 = v28;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v30) == 1)
    {
      v31 = -1;
LABEL_28:
      v32 = v143;
      if (v143 >= (unint64_t)HIDWORD(v143))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v5, v143 + 1, 8);
        v32 = v143;
      }
      v142[v32] = Filter;
      LODWORD(v143) = v143 + 1;
      v33 = v140;
      if (v140 >= (unint64_t)HIDWORD(v140))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v141, v140 + 1, 8);
        v33 = v140;
      }
      *(_QWORD *)&v139[8 * v33] = v31;
      LODWORD(v140) = v140 + 1;
      v7 = v125[3];
      LODWORD(Input) = 1065353216;
      v132 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,float>(v6, v7, (float *)&Input) - 16;
      v8 = v125[3];
      Input = (_QWORD *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v125);
      Bias = (char *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v125);
      InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v125);
      FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v125);
      v9 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>(v6, v8, (uint64_t *)&Input, (uint64_t *)&v132, (uint64_t *)&Bias, &InputAttributeNames, &FastmathAttr);
      *((_QWORD *)v136 + v4) = (char *)v9 - 16;
      goto LABEL_3;
    }
    Bias = (char *)a2;
    if (!v4)
      goto LABEL_3;
    v132 = *(void **)(*(_QWORD *)(a2 + 72) + 32 * v4 + 24);
    InputAttributeNames = mlir::Value::getDefiningOp((mlir::Value *)&v132);
    Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&InputAttributeNames);
    v31 = Axis;
    if ((Axis & 0x80000000) == 0)
    {
      v35 = (uint64_t *)(*(_QWORD *)(InputAttributeNames - 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v35)
        goto LABEL_43;
      v36 = *v35;
      v37 = mlir::TypeID::get<mlir::ShapedType>();
      v38 = *(unsigned int *)(v36 + 16);
      if (!(_DWORD)v38)
        goto LABEL_43;
      v39 = *(_QWORD **)(v36 + 8);
      v40 = &v39[2 * v38];
      do
      {
        v41 = v38 >> 1;
        v42 = &v39[2 * (v38 >> 1)];
        v44 = *v42;
        v43 = v42 + 2;
        v38 += ~(v38 >> 1);
        if (v44 < v37)
          v39 = v43;
        else
          v38 = v41;
      }
      while (v38);
      if (v39 != v40 && *v39 == v37)
        v45 = v39[1];
      else
LABEL_43:
        v45 = 0;
      v132 = v35;
      v133 = v45;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132))
        goto LABEL_3;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
      v31 -= v46;
    }
    ChannelAxis = mlir::mps::DepthwiseConv3DDataGradientOp::getChannelAxis((mlir::mps::DepthwiseConv3DDataGradientOp *)&Bias);
    v48 = ChannelAxis;
    if ((ChannelAxis & 0x80000000) == 0)
    {
      v49 = (uint64_t *)(*((_QWORD *)Bias - 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v49)
        goto LABEL_56;
      v50 = v5;
      v51 = *v49;
      v52 = mlir::TypeID::get<mlir::ShapedType>();
      v53 = *(unsigned int *)(v51 + 16);
      if ((_DWORD)v53)
      {
        v54 = *(_QWORD **)(v51 + 8);
        v55 = &v54[2 * v53];
        do
        {
          v56 = v53 >> 1;
          v57 = &v54[2 * (v53 >> 1)];
          v59 = *v57;
          v58 = v57 + 2;
          v53 += ~(v53 >> 1);
          if (v59 < v52)
            v54 = v58;
          else
            v53 = v56;
        }
        while (v53);
        v5 = v50;
        if (v54 == v55)
        {
          v60 = 0;
        }
        else if (*v54 == v52)
        {
          v60 = v54[1];
        }
        else
        {
LABEL_56:
          v60 = 0;
        }
      }
      else
      {
        v60 = 0;
        v5 = v50;
      }
      v132 = v49;
      v133 = v60;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132))
        goto LABEL_3;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
      v48 -= v61;
    }
    if (v48 == v31)
    {
      v62 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Bias) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v62)
        goto LABEL_74;
      v63 = *v62;
      v64 = mlir::TypeID::get<mlir::ShapedType>();
      v65 = *(unsigned int *)(v63 + 16);
      if (!(_DWORD)v65)
        goto LABEL_74;
      v66 = *(_QWORD **)(v63 + 8);
      v67 = &v66[2 * v65];
      do
      {
        v68 = v65 >> 1;
        v69 = &v66[2 * (v65 >> 1)];
        v71 = *v69;
        v70 = v69 + 2;
        v65 += ~(v65 >> 1);
        if (v71 < v64)
          v66 = v70;
        else
          v65 = v68;
      }
      while (v65);
      if (v66 != v67 && *v66 == v64)
        v72 = v66[1];
      else
LABEL_74:
        v72 = 0;
      v132 = v62;
      v133 = v72;
      if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132) & 1) != 0)
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
        v74 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132)
                        + 8 * (v73 + v31));
        Input = 0;
        v130 = 0;
        v75 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Bias) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v75)
          goto LABEL_85;
        v76 = v5;
        v77 = *v75;
        v78 = mlir::TypeID::get<mlir::ShapedType>();
        v79 = *(unsigned int *)(v77 + 16);
        if ((_DWORD)v79)
        {
          v80 = *(_QWORD **)(v77 + 8);
          v81 = &v80[2 * v79];
          do
          {
            v82 = v79 >> 1;
            v83 = &v80[2 * (v79 >> 1)];
            v85 = *v83;
            v84 = v83 + 2;
            v79 += ~(v79 >> 1);
            if (v85 < v78)
              v80 = v84;
            else
              v79 = v82;
          }
          while (v79);
          v5 = v76;
          if (v80 == v81)
          {
            v86 = 0;
          }
          else if (*v80 == v78)
          {
            v86 = v80[1];
          }
          else
          {
LABEL_85:
            v86 = 0;
          }
        }
        else
        {
          v86 = 0;
          v5 = v76;
        }
        Input = v75;
        v130 = v86;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Input))
          goto LABEL_3;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Input);
        v88 = v87;
        v89 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Input);
        if (v74 == 0x8000000000000000 || v74 != *(_QWORD *)(v89 + 8 * (v88 + v31)))
          goto LABEL_3;
        goto LABEL_28;
      }
    }
LABEL_3:
    ++v4;
  }
  if ((_DWORD)v143)
  {
    v90 = *(_QWORD *)(a2 + 24);
    v91 = *(unsigned int *)(a2 + 36);
    v92 = a2 - 16;
    if (!(_DWORD)v91)
      v92 = 0;
    Input = (_QWORD *)v92;
    v130 = v91;
    mlir::OperandRange::getTypes((uint64_t *)&Input, (uint64_t *)&v132);
    if (*(_BYTE *)(a2 + 47))
    {
      Input = (_QWORD *)mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
      p_Input = (mlir::ArrayAttr *)&Input;
    }
    else
    {
      p_Input = (mlir::ArrayAttr *)(a2 + 56);
    }
    Input = (_QWORD *)mlir::ArrayAttr::getValue(p_Input);
    v130 = v95;
    v96 = (char *)mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>((mlir::OpBuilder *)v6, v90, (uint64_t *)&v132, (uint64_t)&v136, (uint64_t)&Input)- 16;
    Bias = v96;
    Input = (_QWORD *)mlir::getElementTypeOrSelf((uint64_t)v96);
    if ((_DWORD)v143 && (_DWORD)v140)
    {
      v123 = v5;
      v97 = v142;
      v98 = v139;
      v99 = &v142[v143];
      v100 = &v139[8 * v140];
      do
      {
        InputAttributeNames = *v97;
        v101 = *(_QWORD *)v98;
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(InputAttributeNames);
        if (Input != (_QWORD *)ElementTypeOrSelf)
        {
          Loc = mlir::Value::getLoc((mlir::Value *)&InputAttributeNames);
          InputAttributeNames = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(v6, Loc, &InputAttributeNames, (uint64_t *)&Input)- 16;
        }
        if (v101 != -1)
        {
          v104 = 0;
          v132 = v134;
          v133 = 0x500000000;
          v105 = v101 + 1;
          do
          {
            if (v104 >= HIDWORD(v133))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v134, v104 + 1, 8);
              v104 = v133;
            }
            *((_QWORD *)v132 + v104) = v105;
            v104 = v133 + 1;
            LODWORD(v133) = v133 + 1;
          }
          while (!__CFADD__(v105++, 1));
          v107 = mlir::Value::getLoc((mlir::Value *)&InputAttributeNames);
          FastmathAttr = v133;
          IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)v6, 0x40u, 1);
          v109 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&FastmathAttr, 1, IntegerType, 0);
          v110 = v109;
          if (!v109)
            goto LABEL_122;
          v111 = *v109;
          v112 = mlir::TypeID::get<mlir::ShapedType>();
          v113 = *(unsigned int *)(v111 + 16);
          if (!(_DWORD)v113)
            goto LABEL_122;
          v114 = *(_QWORD **)(v111 + 8);
          v115 = &v114[2 * v113];
          do
          {
            v116 = v113 >> 1;
            v117 = &v114[2 * (v113 >> 1)];
            v119 = *v117;
            v118 = v117 + 2;
            v113 += ~(v113 >> 1);
            if (v119 < v112)
              v114 = v118;
            else
              v113 = v116;
          }
          while (v113);
          if (v114 != v115 && *v114 == v112)
            v120 = v114[1];
          else
LABEL_122:
            v120 = 0;
          v125 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v110, v120, v132, 8 * v133, 8, 1, 1);
          v126 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)v6, v107, &v125)- 16;
          InputAttributeNames = (uint64_t)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)v6, *(_QWORD *)(a2 + 24), &InputAttributeNames, &v126)- 16;
          if (v132 != v134)
            free(v132);
        }
        v121 = mlir::Value::getLoc((mlir::Value *)&InputAttributeNames);
        v96 = (char *)mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>(v6, v121, (uint64_t *)&Bias, &InputAttributeNames)- 16;
        Bias = v96;
        if (++v97 == v99)
          break;
        v98 += 8;
      }
      while (v98 != v100);
      v5 = v123;
    }
    v132 = v96;
    v94 = 1;
    mlir::ValueRange::ValueRange(v131, (uint64_t)&v132, 1uLL);
    (*((void (**)(mlir::Float32Type **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, a2, v131[0], v131[1]);
  }
  else
  {
    v94 = 0;
  }
  if (v136 != v138)
    free(v136);
  if (v139 != v141)
    free(v139);
  if (v142 != v5)
    free(v142);
  return v94;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t NextResultAtOffset;
  uint64_t v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[38];
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.depthwise_conv_3d", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"mps.depthwise_conv_3d";
    v25[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  NextResultAtOffset = *a3;
  v14 = a3[1];
  v15 = a3[3];
  if (v14)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(_QWORD *)(a5 + 8));
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DDataGradientOp>::~CanonicalizeQuantizedLayerScale(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DDataGradientOp>::~CanonicalizeQuantizedLayerScale(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::DepthwiseConv3DDataGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::DepthwiseConv3DDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::DepthwiseConv3DDataGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::DepthwiseConv3DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Float32Type **a3)
{
  unint64_t v4;
  uint64_t *v5;
  mlir::Float32Type **v6;
  uint64_t v7;
  uint64_t v8;
  mlir::GenericProgramPoint *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t DefiningOp;
  void *v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t SparseShape;
  uint64_t Filter;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int Axis;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int ChannelAxis;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  mlir::ArrayAttr *p_Input;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  char *v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t ElementTypeOrSelf;
  uint64_t Loc;
  unsigned int v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t IntegerType;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v123;
  uint64_t *v125;
  uint64_t v126;
  uint64_t InputAttributeNames;
  char *Bias;
  _QWORD *Input;
  uint64_t v130;
  unint64_t v131[2];
  void *v132;
  uint64_t v133;
  _BYTE v134[40];
  uint64_t FastmathAttr;
  void *v136;
  uint64_t v137;
  _BYTE v138[16];
  char *v139;
  uint64_t v140;
  _BYTE v141[16];
  uint64_t *v142;
  uint64_t v143;
  _QWORD v144[4];

  v4 = 0;
  v144[2] = *MEMORY[0x1E0C80C00];
  v5 = v144;
  v142 = v144;
  v143 = 0x200000000;
  v139 = v141;
  v140 = 0x200000000;
  v136 = v138;
  v137 = 0x200000000;
  v6 = a3 + 1;
  while ((*(_BYTE *)(a2 + 46) & 0x80) != 0 && v4 < *(unsigned int *)(a2 + 68))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v4 + 24);
    v126 = v10;
    v11 = v137;
    if (v137 >= (unint64_t)HIDWORD(v137))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, v138, v137 + 1, 8);
      v11 = v137;
    }
    *((_QWORD *)v136 + v11) = v10;
    LODWORD(v137) = v137 + 1;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v126);
    if (!DefiningOp)
      goto LABEL_3;
    v13 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
    v14 = v13 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
    v15 = v13 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? (uint64_t *)DefiningOp : 0;
    v125 = v15;
    if (!v14)
      goto LABEL_3;
    SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v125);
    if (!mlir::isConstantFPZero(SparseShape))
      goto LABEL_3;
    Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v125);
    if (mlir::isConstantFPOne(Filter))
      goto LABEL_3;
    v18 = (uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v18)
      goto LABEL_25;
    v19 = *v18;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_25;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_25:
      v28 = 0;
    v132 = v18;
    v133 = v28;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
    if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v30) == 1)
    {
      v31 = -1;
LABEL_28:
      v32 = v143;
      if (v143 >= (unint64_t)HIDWORD(v143))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v142, v5, v143 + 1, 8);
        v32 = v143;
      }
      v142[v32] = Filter;
      LODWORD(v143) = v143 + 1;
      v33 = v140;
      if (v140 >= (unint64_t)HIDWORD(v140))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v139, v141, v140 + 1, 8);
        v33 = v140;
      }
      *(_QWORD *)&v139[8 * v33] = v31;
      LODWORD(v140) = v140 + 1;
      v7 = v125[3];
      LODWORD(Input) = 1065353216;
      v132 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,float>(v6, v7, (float *)&Input) - 16;
      v8 = v125[3];
      Input = (_QWORD *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v125);
      Bias = (char *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v125);
      InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v125);
      FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v125);
      v9 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>(v6, v8, (uint64_t *)&Input, (uint64_t *)&v132, (uint64_t *)&Bias, &InputAttributeNames, &FastmathAttr);
      *((_QWORD *)v136 + v4) = (char *)v9 - 16;
      goto LABEL_3;
    }
    Bias = (char *)a2;
    if (!v4)
      goto LABEL_3;
    v132 = *(void **)(*(_QWORD *)(a2 + 72) + 32 * v4 + 24);
    InputAttributeNames = mlir::Value::getDefiningOp((mlir::Value *)&v132);
    Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&InputAttributeNames);
    v31 = Axis;
    if ((Axis & 0x80000000) == 0)
    {
      v35 = (uint64_t *)(*(_QWORD *)(InputAttributeNames - 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v35)
        goto LABEL_43;
      v36 = *v35;
      v37 = mlir::TypeID::get<mlir::ShapedType>();
      v38 = *(unsigned int *)(v36 + 16);
      if (!(_DWORD)v38)
        goto LABEL_43;
      v39 = *(_QWORD **)(v36 + 8);
      v40 = &v39[2 * v38];
      do
      {
        v41 = v38 >> 1;
        v42 = &v39[2 * (v38 >> 1)];
        v44 = *v42;
        v43 = v42 + 2;
        v38 += ~(v38 >> 1);
        if (v44 < v37)
          v39 = v43;
        else
          v38 = v41;
      }
      while (v38);
      if (v39 != v40 && *v39 == v37)
        v45 = v39[1];
      else
LABEL_43:
        v45 = 0;
      v132 = v35;
      v133 = v45;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132))
        goto LABEL_3;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
      v31 -= v46;
    }
    ChannelAxis = mlir::mps::DepthwiseConv3DDataGradientOp::getChannelAxis((mlir::mps::DepthwiseConv3DDataGradientOp *)&Bias);
    v48 = ChannelAxis;
    if ((ChannelAxis & 0x80000000) == 0)
    {
      v49 = (uint64_t *)(*((_QWORD *)Bias - 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v49)
        goto LABEL_56;
      v50 = v5;
      v51 = *v49;
      v52 = mlir::TypeID::get<mlir::ShapedType>();
      v53 = *(unsigned int *)(v51 + 16);
      if ((_DWORD)v53)
      {
        v54 = *(_QWORD **)(v51 + 8);
        v55 = &v54[2 * v53];
        do
        {
          v56 = v53 >> 1;
          v57 = &v54[2 * (v53 >> 1)];
          v59 = *v57;
          v58 = v57 + 2;
          v53 += ~(v53 >> 1);
          if (v59 < v52)
            v54 = v58;
          else
            v53 = v56;
        }
        while (v53);
        v5 = v50;
        if (v54 == v55)
        {
          v60 = 0;
        }
        else if (*v54 == v52)
        {
          v60 = v54[1];
        }
        else
        {
LABEL_56:
          v60 = 0;
        }
      }
      else
      {
        v60 = 0;
        v5 = v50;
      }
      v132 = v49;
      v133 = v60;
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132))
        goto LABEL_3;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
      v48 -= v61;
    }
    if (v48 == v31)
    {
      v62 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Bias) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v62)
        goto LABEL_74;
      v63 = *v62;
      v64 = mlir::TypeID::get<mlir::ShapedType>();
      v65 = *(unsigned int *)(v63 + 16);
      if (!(_DWORD)v65)
        goto LABEL_74;
      v66 = *(_QWORD **)(v63 + 8);
      v67 = &v66[2 * v65];
      do
      {
        v68 = v65 >> 1;
        v69 = &v66[2 * (v65 >> 1)];
        v71 = *v69;
        v70 = v69 + 2;
        v65 += ~(v65 >> 1);
        if (v71 < v64)
          v66 = v70;
        else
          v65 = v68;
      }
      while (v65);
      if (v66 != v67 && *v66 == v64)
        v72 = v66[1];
      else
LABEL_74:
        v72 = 0;
      v132 = v62;
      v133 = v72;
      if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v132) & 1) != 0)
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132);
        v74 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v132)
                        + 8 * (v73 + v31));
        Input = 0;
        v130 = 0;
        v75 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&Bias) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v75)
          goto LABEL_85;
        v76 = v5;
        v77 = *v75;
        v78 = mlir::TypeID::get<mlir::ShapedType>();
        v79 = *(unsigned int *)(v77 + 16);
        if ((_DWORD)v79)
        {
          v80 = *(_QWORD **)(v77 + 8);
          v81 = &v80[2 * v79];
          do
          {
            v82 = v79 >> 1;
            v83 = &v80[2 * (v79 >> 1)];
            v85 = *v83;
            v84 = v83 + 2;
            v79 += ~(v79 >> 1);
            if (v85 < v78)
              v80 = v84;
            else
              v79 = v82;
          }
          while (v79);
          v5 = v76;
          if (v80 == v81)
          {
            v86 = 0;
          }
          else if (*v80 == v78)
          {
            v86 = v80[1];
          }
          else
          {
LABEL_85:
            v86 = 0;
          }
        }
        else
        {
          v86 = 0;
          v5 = v76;
        }
        Input = v75;
        v130 = v86;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&Input))
          goto LABEL_3;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Input);
        v88 = v87;
        v89 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&Input);
        if (v74 == 0x8000000000000000 || v74 != *(_QWORD *)(v89 + 8 * (v88 + v31)))
          goto LABEL_3;
        goto LABEL_28;
      }
    }
LABEL_3:
    ++v4;
  }
  if ((_DWORD)v143)
  {
    v90 = *(_QWORD *)(a2 + 24);
    v91 = *(unsigned int *)(a2 + 36);
    v92 = a2 - 16;
    if (!(_DWORD)v91)
      v92 = 0;
    Input = (_QWORD *)v92;
    v130 = v91;
    mlir::OperandRange::getTypes((uint64_t *)&Input, (uint64_t *)&v132);
    if (*(_BYTE *)(a2 + 47))
    {
      Input = (_QWORD *)mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
      p_Input = (mlir::ArrayAttr *)&Input;
    }
    else
    {
      p_Input = (mlir::ArrayAttr *)(a2 + 56);
    }
    Input = (_QWORD *)mlir::ArrayAttr::getValue(p_Input);
    v130 = v95;
    v96 = (char *)mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>((mlir::OpBuilder *)v6, v90, (uint64_t *)&v132, (uint64_t)&v136, (uint64_t)&Input)- 16;
    Bias = v96;
    Input = (_QWORD *)mlir::getElementTypeOrSelf((uint64_t)v96);
    if ((_DWORD)v143 && (_DWORD)v140)
    {
      v123 = v5;
      v97 = v142;
      v98 = v139;
      v99 = &v142[v143];
      v100 = &v139[8 * v140];
      do
      {
        InputAttributeNames = *v97;
        v101 = *(_QWORD *)v98;
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(InputAttributeNames);
        if (Input != (_QWORD *)ElementTypeOrSelf)
        {
          Loc = mlir::Value::getLoc((mlir::Value *)&InputAttributeNames);
          InputAttributeNames = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(v6, Loc, &InputAttributeNames, (uint64_t *)&Input)- 16;
        }
        if (v101 != -1)
        {
          v104 = 0;
          v132 = v134;
          v133 = 0x500000000;
          v105 = v101 + 1;
          do
          {
            if (v104 >= HIDWORD(v133))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v134, v104 + 1, 8);
              v104 = v133;
            }
            *((_QWORD *)v132 + v104) = v105;
            v104 = v133 + 1;
            LODWORD(v133) = v133 + 1;
          }
          while (!__CFADD__(v105++, 1));
          v107 = mlir::Value::getLoc((mlir::Value *)&InputAttributeNames);
          FastmathAttr = v133;
          IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)v6, 0x40u, 1);
          v109 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&FastmathAttr, 1, IntegerType, 0);
          v110 = v109;
          if (!v109)
            goto LABEL_122;
          v111 = *v109;
          v112 = mlir::TypeID::get<mlir::ShapedType>();
          v113 = *(unsigned int *)(v111 + 16);
          if (!(_DWORD)v113)
            goto LABEL_122;
          v114 = *(_QWORD **)(v111 + 8);
          v115 = &v114[2 * v113];
          do
          {
            v116 = v113 >> 1;
            v117 = &v114[2 * (v113 >> 1)];
            v119 = *v117;
            v118 = v117 + 2;
            v113 += ~(v113 >> 1);
            if (v119 < v112)
              v114 = v118;
            else
              v113 = v116;
          }
          while (v113);
          if (v114 != v115 && *v114 == v112)
            v120 = v114[1];
          else
LABEL_122:
            v120 = 0;
          v125 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v110, v120, v132, 8 * v133, 8, 1, 1);
          v126 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)v6, v107, &v125)- 16;
          InputAttributeNames = (uint64_t)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)v6, *(_QWORD *)(a2 + 24), &InputAttributeNames, &v126)- 16;
          if (v132 != v134)
            free(v132);
        }
        v121 = mlir::Value::getLoc((mlir::Value *)&InputAttributeNames);
        v96 = (char *)mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>(v6, v121, (uint64_t *)&Bias, &InputAttributeNames)- 16;
        Bias = v96;
        if (++v97 == v99)
          break;
        v98 += 8;
      }
      while (v98 != v100);
      v5 = v123;
    }
    v132 = v96;
    v94 = 1;
    mlir::ValueRange::ValueRange(v131, (uint64_t)&v132, 1uLL);
    (*((void (**)(mlir::Float32Type **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, a2, v131[0], v131[1]);
  }
  else
  {
    v94 = 0;
  }
  if (v136 != v138)
    free(v136);
  if (v139 != v141)
    free(v139);
  if (v142 != v5)
    free(v142);
  return v94;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DepthwiseConv3DDataGradientOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t NextResultAtOffset;
  uint64_t v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[38];
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.depthwise_conv_3d_data_gradient", (const unsigned __int8 *)0x23, Context);
  if (!v12)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"mps.depthwise_conv_3d_data_gradient";
    v25[3] = 35;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  NextResultAtOffset = *a3;
  v14 = a3[1];
  v15 = a3[3];
  if (v14)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(_QWORD *)(a5 + 8));
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DDataGradientOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::MatMulOp>::~CanonicalizeQuantizedLayerScale(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::MatMulOp>::~CanonicalizeQuantizedLayerScale(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedLayerScale<mlir::mps::MatMulOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::Float32Type **a3)
{
  unint64_t v4;
  mlir::Float32Type **v5;
  uint64_t v6;
  uint64_t v7;
  mlir::GenericProgramPoint *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DefiningOp;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t SparseShape;
  uint64_t Filter;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *ArgAttrsAttr;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Axis;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 TransposeRhs;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  mlir::ArrayAttr *p_Input;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t ElementTypeOrSelf;
  uint64_t Loc;
  unsigned int v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t IntegerType;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *InputAttributeNames;
  uint64_t v74;
  uint64_t v75;
  char *Bias;
  uint64_t Input;
  uint64_t v78;
  unint64_t v79[2];
  void *v80;
  uint64_t v81;
  _BYTE v82[40];
  uint64_t FastmathAttr;
  void *v84;
  uint64_t v85;
  _BYTE v86[16];
  char *v87;
  uint64_t v88;
  _BYTE v89[16];
  uint64_t *v90;
  uint64_t v91;
  _QWORD v92[4];

  v4 = 0;
  v92[2] = *MEMORY[0x1E0C80C00];
  v90 = v92;
  v91 = 0x200000000;
  v87 = v89;
  v88 = 0x200000000;
  v84 = v86;
  v85 = 0x200000000;
  v5 = a3 + 1;
  while ((*(_BYTE *)(a2 + 46) & 0x80) != 0 && v4 < *(unsigned int *)(a2 + 68))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 32 * v4 + 24);
    v75 = v9;
    v10 = v85;
    if (v85 >= (unint64_t)HIDWORD(v85))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v86, v85 + 1, 8);
      v10 = v85;
    }
    *((_QWORD *)v84 + v10) = v9;
    LODWORD(v85) = v85 + 1;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v75);
    if (DefiningOp)
    {
      v12 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
      v13 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
      v14 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? DefiningOp : 0;
      v74 = v14;
      if (v13)
      {
        SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v74);
        if (mlir::isConstantFPZero(SparseShape))
        {
          Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v74);
          if (!mlir::isConstantFPOne(Filter))
          {
            v17 = (uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8);
            if (!v17)
              goto LABEL_25;
            v18 = *v17;
            v19 = mlir::TypeID::get<mlir::ShapedType>();
            v20 = *(unsigned int *)(v18 + 16);
            if (!(_DWORD)v20)
              goto LABEL_25;
            v21 = *(_QWORD **)(v18 + 8);
            v22 = &v21[2 * v20];
            do
            {
              v23 = v20 >> 1;
              v24 = &v21[2 * (v20 >> 1)];
              v26 = *v24;
              v25 = v24 + 2;
              v20 += ~(v20 >> 1);
              if (v26 < v19)
                v21 = v25;
              else
                v20 = v23;
            }
            while (v20);
            if (v21 != v22 && *v21 == v19)
              v27 = v21[1];
            else
LABEL_25:
              v27 = 0;
            v80 = v17;
            v81 = v27;
            ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
            if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v29) == 1)
            {
              v30 = -1;
LABEL_28:
              v31 = v91;
              if (v91 >= (unint64_t)HIDWORD(v91))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v92, v91 + 1, 8);
                v31 = v91;
              }
              v90[v31] = Filter;
              LODWORD(v91) = v91 + 1;
              v32 = v88;
              if (v88 >= (unint64_t)HIDWORD(v88))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v88 + 1, 8);
                v32 = v88;
              }
              *(_QWORD *)&v87[8 * v32] = v30;
              LODWORD(v88) = v88 + 1;
              v6 = *(_QWORD *)(v74 + 24);
              LODWORD(Input) = 1065353216;
              v80 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,float>(v5, v6, (float *)&Input) - 16;
              v7 = *(_QWORD *)(v74 + 24);
              Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v74);
              Bias = (char *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v74);
              InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v74);
              FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v74);
              v8 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value,mlir::TypeAttr,mlir::IntegerAttr>(v5, v7, &Input, (uint64_t *)&v80, (uint64_t *)&Bias, (uint64_t *)&InputAttributeNames, &FastmathAttr);
              *((_QWORD *)v84 + v4) = (char *)v8 - 16;
              goto LABEL_3;
            }
            Input = a2;
            v80 = *(void **)(*(_QWORD *)(a2 + 72) + 32 * v4 + 24);
            Bias = (char *)mlir::Value::getDefiningOp((mlir::Value *)&v80);
            Axis = mlir::mps::DequantizeLUTOp::getAxis((mlir::mps::DequantizeLUTOp *)&Bias);
            if ((Axis & 0xFF00000000) == 0)
              goto LABEL_3;
            v30 = (int)Axis;
            if ((Axis & 0x80000000) == 0)
            {
              v80 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*((_QWORD *)Bias - 1) & 0xFFFFFFFFFFFFFFF8));
              v81 = v34;
              if (!v80 || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v80) & 1) == 0)
                goto LABEL_3;
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
              v30 -= v35;
            }
            if (v30 <= -3)
              goto LABEL_28;
            if (v4)
              v36 = -1;
            else
              v36 = -2;
            if (v4)
            {
              TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&Input);
              v38 = -2;
            }
            else
            {
              TransposeRhs = mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&Input);
              v38 = -1;
            }
            if (!TransposeRhs)
              v38 = v36;
            v13 = v38 == v30;
            v30 = v36;
            if (v13)
              goto LABEL_28;
          }
        }
      }
    }
LABEL_3:
    ++v4;
  }
  if ((_DWORD)v91)
  {
    v39 = *(_QWORD *)(a2 + 24);
    v40 = *(unsigned int *)(a2 + 36);
    v41 = a2 - 16;
    if (!(_DWORD)v40)
      v41 = 0;
    Input = v41;
    v78 = v40;
    mlir::OperandRange::getTypes(&Input, (uint64_t *)&v80);
    if (*(_BYTE *)(a2 + 47))
    {
      Input = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
      p_Input = (mlir::ArrayAttr *)&Input;
    }
    else
    {
      p_Input = (mlir::ArrayAttr *)(a2 + 56);
    }
    Input = mlir::ArrayAttr::getValue(p_Input);
    v78 = v44;
    v45 = (char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>((mlir::OpBuilder *)v5, v39, (uint64_t *)&v80, (uint64_t)&v84, (uint64_t)&Input)- 16;
    Bias = v45;
    Input = mlir::getElementTypeOrSelf((uint64_t)v45);
    if ((_DWORD)v91 && (_DWORD)v88)
    {
      v46 = v90;
      v47 = v87;
      v48 = &v90[v91];
      v49 = &v87[8 * v88];
      do
      {
        v75 = *v46;
        v50 = *(_QWORD *)v47;
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v75);
        if (Input != ElementTypeOrSelf)
        {
          Loc = mlir::Value::getLoc((mlir::Value *)&v75);
          v75 = (uint64_t)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(v5, Loc, &v75, &Input) - 16;
        }
        if (v50 != -1)
        {
          v53 = 0;
          v80 = v82;
          v81 = 0x500000000;
          v54 = v50 + 1;
          do
          {
            if (v53 >= HIDWORD(v81))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v82, v53 + 1, 8);
              v53 = v81;
            }
            *((_QWORD *)v80 + v53) = v54;
            v53 = v81 + 1;
            LODWORD(v81) = v81 + 1;
          }
          while (!__CFADD__(v54++, 1));
          v56 = mlir::Value::getLoc((mlir::Value *)&v75);
          FastmathAttr = v81;
          IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)v5, 0x40u, 1);
          v58 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&FastmathAttr, 1, IntegerType, 0);
          v59 = v58;
          if (!v58)
            goto LABEL_77;
          v60 = *v58;
          v61 = mlir::TypeID::get<mlir::ShapedType>();
          v62 = *(unsigned int *)(v60 + 16);
          if (!(_DWORD)v62)
            goto LABEL_77;
          v63 = *(_QWORD **)(v60 + 8);
          v64 = &v63[2 * v62];
          do
          {
            v65 = v62 >> 1;
            v66 = &v63[2 * (v62 >> 1)];
            v68 = *v66;
            v67 = v66 + 2;
            v62 += ~(v62 >> 1);
            if (v68 < v61)
              v63 = v67;
            else
              v62 = v65;
          }
          while (v62);
          if (v63 != v64 && *v63 == v61)
            v69 = v63[1];
          else
LABEL_77:
            v69 = 0;
          InputAttributeNames = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v59, v69, v80, 8 * v81, 8, 1, 1);
          v74 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)v5, v56, &InputAttributeNames)- 16;
          v75 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ExpandDimsOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)v5, *(_QWORD *)(a2 + 24), &v75, &v74)- 16;
          if (v80 != v82)
            free(v80);
        }
        v70 = mlir::Value::getLoc((mlir::Value *)&v75);
        v45 = (char *)mlir::OpBuilder::create<mlir::mps::MultiplyOp,mlir::Value,mlir::Value&>(v5, v70, (uint64_t *)&Bias, &v75)- 16;
        Bias = v45;
        if (++v46 == v48)
          break;
        v47 += 8;
      }
      while (v47 != v49);
    }
    v80 = v45;
    v43 = 1;
    mlir::ValueRange::ValueRange(v79, (uint64_t)&v80, 1uLL);
    (*((void (**)(mlir::Float32Type **, uint64_t, unint64_t, unint64_t))*a3 + 3))(a3, a2, v79[0], v79[1]);
  }
  else
  {
    v43 = 0;
  }
  if (v84 != v86)
    free(v84);
  if (v87 != v89)
    free(v87);
  if (v90 != v92)
    free(v90);
  return v43;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::ValueTypeRange<mlir::ResultRange>,llvm::SmallVector<mlir::Value,2u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t NextResultAtOffset;
  uint64_t v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  unint64_t v22[2];
  unint64_t v23[2];
  _QWORD v24[38];
  uint64_t v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.matmul", (const unsigned __int8 *)0xA, Context);
  if (!v12)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"mps.matmul";
    v25[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v21 = 259;
    llvm::operator+(v25, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  NextResultAtOffset = *a3;
  v14 = a3[1];
  v15 = a3[3];
  if (v14)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, v14);
  mlir::ValueRange::ValueRange((unint64_t *)v25, NextResultAtOffset, v15 - v14);
  mlir::TypeRange::TypeRange(v23, v25[0], v25[1]);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a4, *(unsigned int *)(a4 + 8));
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v24, v23[0], v23[1], v22[0], v22[1], *(const void **)a5, *(_QWORD *)(a5 + 8));
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v17;
}

_QWORD *mlir::mps::`anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::~ConditionallyCanonicalizeQuantizedOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::~ConditionallyCanonicalizeQuantizedOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::ConditionallyCanonicalizeQuantizedOp<mlir::mps::MatMulOp>::matchAndRewrite(uint64_t a1, uint64_t (**a2)(), mlir::Float32Type **a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BOOL4 v41;
  uint64_t DefiningOp;
  void *v43;
  BOOL v44;
  uint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t Input;
  uint64_t v55;
  void *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t (**v59)();
  uint64_t (*v60)();
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  BOOL v75;
  uint64_t v76;
  uint64_t SparseShape;
  _BOOL4 TransposeRhs;
  _QWORD v79[2];
  _QWORD v80[2];
  uint64_t v81;
  uint64_t (**ElementTypeOrSelf)();
  _QWORD v83[3];
  void *v84;
  _BYTE v85[32];
  void *v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)((unint64_t)*(a2 - 1) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v80[0] = v6;
  v80[1] = v16;
  v17 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2[9] + 3) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v17)
    goto LABEL_20;
  v18 = *v17;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *(unsigned int *)(v18 + 16);
  if (!(_DWORD)v20)
    goto LABEL_20;
  v21 = *(_QWORD **)(v18 + 8);
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_20:
    v27 = 0;
  v79[0] = v17;
  v79[1] = v27;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v80))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80);
    if (v28 < 1)
    {
      LODWORD(v30) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80);
      v30 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80)
                      + 8 * (v29 - 1));
    }
  }
  else
  {
    LODWORD(v30) = 0;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v80))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80);
    if (v31 < 2)
    {
      LODWORD(v33) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80);
      v33 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80)
                      + 8 * (v32 - 2));
    }
  }
  else
  {
    LODWORD(v33) = 0;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v80))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80);
    if (v34 < 3)
    {
      LODWORD(v36) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80);
      v36 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v80)
                      + 8 * (v35 - 3));
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v79))
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v79);
    if (v37 < 1)
    {
      LOBYTE(v39) = 1;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v79);
      v39 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v79)
                      + 8 * (v38 - 1));
    }
  }
  else
  {
    LOBYTE(v39) = 0;
  }
  v41 = v33 < 0x11 || v30 < 0x11;
  ElementTypeOrSelf = (uint64_t (**)())*((_QWORD *)a2[9] + 7);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!DefiningOp)
    goto LABEL_52;
  v43 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v44 = v43 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
  v45 = v43 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? DefiningOp : 0;
  v81 = v45;
  if (!v44)
    goto LABEL_52;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v81);
  ElementTypeOrSelf = (uint64_t (**)())mlir::getElementTypeOrSelf(Input);
  if (!mlir::Type::isSignedInteger((mlir::Type *)&ElementTypeOrSelf, 8)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&ElementTypeOrSelf, 8))
  {
    goto LABEL_52;
  }
  ElementTypeOrSelf = (uint64_t (**)())mlir::getElementTypeOrSelf(*((_QWORD *)a2[9] + 3));
  if (mlir::Type::isF32((mlir::Type *)&ElementTypeOrSelf))
    goto LABEL_52;
  ElementTypeOrSelf = (uint64_t (**)())*((_QWORD *)a2[9] + 7);
  v55 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (!v55)
    goto LABEL_52;
  v56 = *(void **)(*(_QWORD *)(v55 + 48) + 16);
  v57 = v56 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
  v58 = v56 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? v55 : 0;
  v81 = v58;
  if (!v57)
    goto LABEL_52;
  v59 = (uint64_t (**)())(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v81) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v59)
    goto LABEL_81;
  v60 = *v59;
  v61 = mlir::TypeID::get<mlir::ShapedType>();
  v62 = *((unsigned int *)v60 + 4);
  if (!(_DWORD)v62)
    goto LABEL_81;
  v63 = (_QWORD *)*((_QWORD *)v60 + 1);
  v64 = &v63[2 * v62];
  do
  {
    v65 = v62 >> 1;
    v66 = &v63[2 * (v62 >> 1)];
    v68 = *v66;
    v67 = v66 + 2;
    v62 += ~(v62 >> 1);
    if (v68 < v61)
      v63 = v67;
    else
      v62 = v65;
  }
  while (v62);
  if (v63 != v64 && *v63 == v61)
    v69 = v63[1];
  else
LABEL_81:
    v69 = 0;
  ElementTypeOrSelf = v59;
  v83[0] = v69;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ElementTypeOrSelf))
    goto LABEL_52;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
  if (v70)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
    if (v71 != 1
      || *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf) != 1)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf);
      if (v72 < 2
        || *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf) + 8) != 1
        && *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf) + 8) != v30)
      {
        goto LABEL_52;
      }
      if (*(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ElementTypeOrSelf) != 1)
        goto LABEL_52;
    }
  }
  ElementTypeOrSelf = (uint64_t (**)())*((_QWORD *)a2[9] + 7);
  v73 = mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
  if (v73)
  {
    v74 = *(void **)(*(_QWORD *)(v73 + 48) + 16);
    v75 = v74 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
    v76 = v74 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? v73 : 0;
    v81 = v76;
    if (v75)
    {
      SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v81);
      if (!mlir::isConstantFPZero(SparseShape))
        goto LABEL_52;
    }
  }
  ElementTypeOrSelf = a2;
  if (!mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&ElementTypeOrSelf))
  {
    TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&ElementTypeOrSelf);
    v46 = (v39 & 7) == 0 && TransposeRhs;
    if ((v30 & 0x1F) != 0)
      v46 = 0;
    if (v36 >= 2)
      v46 = 0;
  }
  else
  {
LABEL_52:
    v46 = 0;
  }
  if (v41 || v46)
  {
    v47 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8;
    v48 = *(_DWORD *)(a1 + 96);
    mlir::PatternBenefit::PatternBenefit(&v81, 2);
    mlir::Pattern::Pattern((uint64_t)v83, (uint64_t)"mps.matmul", 10, v81, v47, 0, 0);
    ElementTypeOrSelf = &off_1E0E4A518;
    v87 = v48;
    if (v86 != &v87)
      free(v86);
    v50 = v84;
    if (v84 == v85)
      return v49;
LABEL_61:
    free(v50);
    return v49;
  }
  v51 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8;
  mlir::PatternBenefit::PatternBenefit(&v81, 2);
  v52 = mlir::Pattern::Pattern((uint64_t)v83, (uint64_t)"mps.matmul", 10, v81, v51, 0, 0);
  ElementTypeOrSelf = &off_1E0E4B1B8;
  if (v86 != &v87)
    free(v86);
  v50 = v84;
  if (v84 != v85)
    goto LABEL_61;
  return v49;
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::matchAndRewrite(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  mlir::Operation *DefiningOp;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  _BOOL4 v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  mlir::Operation *v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  _BOOL4 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[72];
  _BYTE v30[72];
  void *__p;
  unsigned int v32;
  BOOL TransposeRhs;
  BOOL IsNegated;
  uint64_t ElementTypeOrSelf;
  void *p_p;
  unint64_t v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47[5];

  v47[2] = *MEMORY[0x1E0C80C00];
  v30[0] = 0;
  memset(&v30[8], 0, 64);
  v29[0] = 0;
  memset(&v29[8], 0, 64);
  {
    return 0;
  }
  v27 = a1;
  v28 = a3;
  v8 = 0;
  v40 = *(_OWORD *)&v30[32];
  v41 = *(_OWORD *)&v30[48];
  v38 = *(_OWORD *)v30;
  v39 = *(_OWORD *)&v30[16];
  v44 = *(_OWORD *)&v29[16];
  v45 = *(_OWORD *)&v29[32];
  v46 = *(_OWORD *)&v29[48];
  v9 = 2;
  v42 = *(_QWORD *)&v30[64];
  v47[0] = *(_QWORD *)&v29[64];
  v43 = *(_OWORD *)v29;
  do
  {
    if (*(_QWORD *)((char *)&v38 + v8 + 16))
      ++v9;
    if (*(_QWORD *)((char *)&v39 + v8 + 8))
    {
      ElementTypeOrSelf = *(_QWORD *)((char *)&v39 + v8 + 8);
      DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
      if (!DefiningOp)
      {
        ++v9;
        goto LABEL_25;
      }
      v32 = 1;
      __p = 0;
      p_p = &__p;
      v11 = mlir::detail::constant_int_value_binder::match((mlir::detail::constant_int_value_binder *)&p_p, DefiningOp);
      v12 = v32;
      if (v11)
      {
        if (v32 >= 0x41)
        {
          if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
          {
            v14 = 0;
            v15 = __p;
            if (!__p)
              goto LABEL_24;
            goto LABEL_23;
          }
          v13 = __p;
        }
        else
        {
          v13 = &__p;
        }
        v14 = *v13 == 0;
        if (v12 < 0x41)
        {
LABEL_24:
          v9 += !v14;
          goto LABEL_25;
        }
      }
      else
      {
        v14 = 0;
        if (v32 < 0x41)
          goto LABEL_24;
      }
      v15 = __p;
      if (__p)
      {
LABEL_23:
        operator delete[](v15);
        goto LABEL_24;
      }
      goto LABEL_24;
    }
LABEL_25:
    v16 = *(_QWORD *)((char *)&v40 + v8);
    if (v16)
      v9 += !mlir::isConstantFPZero(v16);
    if (*(_QWORD *)((char *)&v40 + v8 + 8))
      v17 = v9 + 1;
    else
      v17 = v9;
    if (*(_QWORD *)((char *)&v41 + v8))
      v9 = v17 + 1;
    else
      v9 = v17;
    if (*(_QWORD *)((char *)&v41 + v8 + 8))
    {
      ElementTypeOrSelf = *(_QWORD *)((char *)&v41 + v8 + 8);
      v18 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&ElementTypeOrSelf);
      if (v18)
      {
        v32 = 1;
        __p = 0;
        p_p = &__p;
        v19 = mlir::detail::constant_int_value_binder::match((mlir::detail::constant_int_value_binder *)&p_p, v18);
        v20 = v32;
        if (v19)
        {
          if (v32 < 0x41)
          {
            v21 = &__p;
            goto LABEL_43;
          }
          if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
          {
            v22 = 0;
            v23 = __p;
            if (__p)
LABEL_45:
              operator delete[](v23);
          }
          else
          {
            v21 = __p;
LABEL_43:
            v22 = *v21 == 0;
            if (v20 >= 0x41)
            {
LABEL_44:
              v23 = __p;
              if (__p)
                goto LABEL_45;
            }
          }
        }
        else
        {
          v22 = 0;
          if (v32 >= 0x41)
            goto LABEL_44;
        }
        v9 += !v22;
        goto LABEL_8;
      }
      ++v9;
    }
LABEL_8:
    v8 += 72;
  }
  while (v8 != 144);
  if (v9 <= *(_DWORD *)(v27 + 96))
  {
    v40 = *(_OWORD *)&v30[32];
    v41 = *(_OWORD *)&v30[48];
    v38 = *(_OWORD *)v30;
    v39 = *(_OWORD *)&v30[16];
    v44 = *(_OWORD *)&v29[16];
    v45 = *(_OWORD *)&v29[32];
    v46 = *(_OWORD *)&v29[48];
    v42 = *(_QWORD *)&v30[64];
    v47[0] = *(_QWORD *)&v29[64];
    v43 = *(_OWORD *)v29;
    __p = a2;
    v25 = a2[3];
    v26 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&__p);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF8));
    IsNegated = mlir::pdl::ApplyNativeConstraintOp::getIsNegated((mlir::pdl::ApplyNativeConstraintOp *)&__p);
    TransposeRhs = mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&__p);
    p_p = mlir::OpBuilder::create<mlir::mpsx::QuantizedMatMulOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::Value&,mlir::IntegerAttr &,mlir::Value&,mlir::Value&,mlir::Value&,mlir::Value&,mlir::IntegerAttr &,mlir::Value,mlir::detail::TypedValue<mlir::RankedTensorType>,mlir::detail::TypedValue<mlir::RankedTensorType>,mlir::Type,BOOL,BOOL>((mlir::MLIRContext **)(v28 + 8), v25, (uint64_t *)&v38 + 1, (uint64_t *)&v39, (uint64_t *)&v39 + 1, (uint64_t *)&v40, &v42, (uint64_t *)&v43 + 1, (uint64_t *)&v44, (uint64_t *)&v44 + 1, (uint64_t *)&v45, v47, (uint64_t *)&v45 + 1, (uint64_t *)&v46, (uint64_t *)&v46 + 1, &ElementTypeOrSelf, (unsigned __int8 *)&IsNegated, (unsigned __int8 *)&TransposeRhs);
    *(_QWORD *)&v38 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&p_p);
    v6 = 1;
    mlir::ValueRange::ValueRange(v37, (uint64_t)&v38, 1uLL);
    (*(void (**)(uint64_t, _QWORD *, unint64_t, unint64_t))(*(_QWORD *)v28 + 24))(v28, a2, v37[0], v37[1]);
    return v6;
  }
  *(_QWORD *)&v38 = "failed: quantized op requires more inputs than what is supported by the MPS kernel.";
  LOWORD(v40) = 259;
  __p = &v38;
  v24 = *(_QWORD *)(v28 + 16);
  if (v24 && mlir::RewriterBase::Listener::classof(*(_QWORD *)(v28 + 16)))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v24 + 64))(v24, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::MatMulOp &>(mlir::mps::MatMulOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__p);
  return 0;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::~CanonicalizeQuantizedOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::~CanonicalizeQuantizedOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::getQuantizationInfos(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t DefiningOp;
  void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ElementTypeOrSelf;
  uint64_t Bias;
  uint64_t v63;
  void *v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t SparseShape;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL (*Filter)(llvm::APInt *);
  uint64_t Input;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;

  v77 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v77);
  if (DefiningOp)
  {
    v8 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
    v9 = v8 == &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id;
    v10 = v8 == &mlir::detail::TypeIDResolver<mlir::mps::TransposeOp,void>::id ? DefiningOp : 0;
    v78 = (_QWORD *)v10;
    if (v9)
    {
      Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
      v20 = mlir::Value::getDefiningOp((mlir::Value *)&Input);
      if (v20)
      {
        v21 = *(void **)(*(_QWORD *)(v20 + 48) + 16);
        if (v21 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id
          || v21 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeLUTOp,void>::id)
        {
          return 0;
        }
      }
    }
  }
  v11 = mlir::Value::getDefiningOp((mlir::Value *)&v77);
  if (!v11
    || ((v12 = *(void **)(*(_QWORD *)(v11 + 48) + 16),
         v13 = v12 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id,
         v12 != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
      ? (v14 = 0)
      : (v14 = v11),
        Input = v14,
        !v13))
  {
    if (a3
      && (v15 = mlir::Value::getDefiningOp((mlir::Value *)&v77)) != 0
      && ((v16 = *(void **)(*(_QWORD *)(v15 + 48) + 16),
           v17 = v16 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeLUTOp,void>::id,
           v16 != &mlir::detail::TypeIDResolver<mlir::mps::DequantizeLUTOp,void>::id)
        ? (v18 = 0)
        : (v18 = v15),
          v78 = (_QWORD *)v18,
          v17))
    {
      v19 = 1;
      *(_BYTE *)a2 = 1;
      *(_QWORD *)(a2 + 8) = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
      *(_QWORD *)(a2 + 40) = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v78);
      *(_QWORD *)(a2 + 64) = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v78);
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v77;
      return 1;
    }
    return v19;
  }
  v23 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Input) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v23)
    goto LABEL_34;
  v24 = *v23;
  v25 = mlir::TypeID::get<mlir::ShapedType>();
  v26 = *(unsigned int *)(v24 + 16);
  if (!(_DWORD)v26)
    goto LABEL_34;
  v27 = *(_QWORD **)(v24 + 8);
  v28 = &v27[2 * v26];
  do
  {
    v29 = v26 >> 1;
    v30 = &v27[2 * (v26 >> 1)];
    v32 = *v30;
    v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25)
      v27 = v31;
    else
      v26 = v29;
  }
  while (v26);
  if (v27 != v28 && *v27 == v25)
    v33 = v27[1];
  else
LABEL_34:
    v33 = 0;
  v78 = v23;
  v79 = v33;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v78) & 1) == 0)
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
  if (v34 > 3)
    return 0;
  v35 = (_QWORD *)(*(_QWORD *)(mlir::anec::GOC::getBias((mlir::anec::GOC *)&Input) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v35)
    goto LABEL_46;
  v36 = *v35;
  v37 = mlir::TypeID::get<mlir::ShapedType>();
  v38 = *(unsigned int *)(v36 + 16);
  if (!(_DWORD)v38)
    goto LABEL_46;
  v39 = *(_QWORD **)(v36 + 8);
  v40 = &v39[2 * v38];
  do
  {
    v41 = v38 >> 1;
    v42 = &v39[2 * (v38 >> 1)];
    v44 = *v42;
    v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37)
      v39 = v43;
    else
      v38 = v41;
  }
  while (v38);
  if (v39 != v40 && *v39 == v37)
    v45 = v39[1];
  else
LABEL_46:
    v45 = 0;
  v78 = v35;
  v79 = v45;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v78) & 1) == 0)
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
  if (v46 > 3)
    return 0;
  v47 = (_QWORD *)(*(_QWORD *)(mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&Input)
                             + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v47)
    goto LABEL_58;
  v48 = *v47;
  v49 = mlir::TypeID::get<mlir::ShapedType>();
  v50 = *(unsigned int *)(v48 + 16);
  if (!(_DWORD)v50)
    goto LABEL_58;
  v51 = *(_QWORD **)(v48 + 8);
  v52 = &v51[2 * v50];
  do
  {
    v53 = v50 >> 1;
    v54 = &v51[2 * (v50 >> 1)];
    v56 = *v54;
    v55 = v54 + 2;
    v50 += ~(v50 >> 1);
    if (v56 < v49)
      v51 = v55;
    else
      v50 = v53;
  }
  while (v50);
  if (v51 != v52 && *v51 == v49)
    v57 = v51[1];
  else
LABEL_58:
    v57 = 0;
  v78 = v47;
  v79 = v57;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v78) & 1) == 0)
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
  if (v58 > 3)
    return 0;
  v59 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Input);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v59);
  Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&Input);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(Bias))
    return 0;
  v19 = 1;
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Input);
  *(_QWORD *)(a2 + 16) = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Input);
  *(_QWORD *)(a2 + 24) = mlir::anec::GOC::getBias((mlir::anec::GOC *)&Input);
  *(_QWORD *)(a2 + 32) = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&Input);
  *(_QWORD *)(a2 + 64) = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&Input);
  if (a4)
  {
    Filter = (BOOL (*)(llvm::APInt *))mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Input);
    v63 = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
    if (v63)
    {
      v64 = *(void **)(*(_QWORD *)(v63 + 48) + 16);
      v65 = v64 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
      v66 = v64 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id ? v63 : 0;
      v78 = (_QWORD *)v66;
      if (v65)
      {
        v67 = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v78);
          return 0;
        v68 = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v78);
          return 0;
        SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v78);
          return 0;
        v70 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
        v71 = mlir::getElementTypeOrSelf(v70);
        v72 = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v78);
        if (v71 != mlir::getElementTypeOrSelf(v72))
          return 0;
        *(_QWORD *)(a2 + 16) = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v78);
        *(_QWORD *)(a2 + 48) = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v78);
        *(_QWORD *)(a2 + 56) = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v78);
        v73 = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v78);
        if (!mlir::isConstantFPZero(v73))
          return 0;
        v74 = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v78);
        Filter = mlir::m_Zero(void)::{lambda(llvm::APInt const&)#1}::__invoke;
        if ((mlir::matchPattern<mlir::detail::constant_int_predicate_matcher>(v74, (uint64_t (**)(void **))&Filter) & 1) == 0)return 0;
      }
    }
  }
  return v19;
}

uint64_t mlir::matchPattern<mlir::detail::constant_int_predicate_matcher>(uint64_t a1, uint64_t (**a2)(void **))
{
  mlir::Operation *DefiningOp;
  uint64_t v4;
  uint64_t v6;
  void **p_p;
  void *__p;
  unsigned int v9;

  v6 = a1;
  DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v6);
  if (!DefiningOp)
    return 0;
  v9 = 1;
  p_p = &__p;
  __p = 0;
  if (mlir::detail::constant_int_value_binder::match((mlir::detail::constant_int_value_binder *)&p_p, DefiningOp))v4 = (*a2)(&__p);
  else
    v4 = 0;
  if (v9 >= 0x41 && __p)
    operator delete[](__p);
  return v4;
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::getQuantizationInfos(mlir::Value,mlir::mps::`anonymous namespace'::CanonicalizeQuantizedOp<mlir::mps::MatMulOp>::OperandQuantizationInfos &,BOOL,BOOL)const::{lambda(mlir::Value)#1}::operator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[2];

  v1 = (uint64_t *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v1)
    goto LABEL_10;
  v2 = *v1;
  v3 = mlir::TypeID::get<mlir::ShapedType>();
  v4 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v4)
    goto LABEL_10;
  v5 = *(_QWORD **)(v2 + 8);
  v6 = &v5[2 * v4];
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_10:
    v11 = 0;
  v14[0] = v1;
  v14[1] = v11;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v14);
  if ((_DWORD)result)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v14);
    return v13 < 4;
  }
  return result;
}

void mlir::mps::`anonymous namespace'::CanonicalizeMatMulNNToNT::~CanonicalizeMatMulNNToNT(mlir::mps::_anonymous_namespace_::CanonicalizeMatMulNNToNT *this)
{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  char *v2;
  char *v3;

  v2 = (char *)*((_QWORD *)this + 10);
  if (v2 != (char *)this + 96)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
  operator delete(this);
}

uint64_t *mlir::mps::`anonymous namespace'::CanonicalizeMatMulNNToNT::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  uint64_t v16;
  uint64_t Input;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v16);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (!DefiningOp)
    return 0;
  v5 = DefiningOp;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v6))
    return 0;
  v18 = v20;
  v19 = 0x100000000;
  mlir::Operation::fold(v5, 0, 0, (uint64_t)&v18);
  v8 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8));
  if (v8)
    v9 = v7;
  else
    v9 = 0;
  if (v18 != v20)
    free(v18);
  if (!v8)
    return 0;
  v10 = mlir::mps::foldTransposeOp(v16, (uint64_t)v8, v9, 1);
  result = 0;
  if ((v10 & 4) == 0)
  {
    v12 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if (v12)
    {
      result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v12);
      v18 = result;
      v19 = v13;
      if (result)
      {
        v14 = v16;
        v15 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::ElementsAttr &>((mlir::OpBuilder *)(a3 + 8), *(_QWORD *)(v16 + 24), (uint64_t)&v18);
        (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v14, v15);
        return (uint64_t *)1;
      }
    }
  }
  return result;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DOp>::~CanonicalizeConvToMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DOp>::~CanonicalizeConvToMatMul(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t ElementTypeOrSelf;
  uint64_t v29;
  uint64_t v30;
  uint64_t ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int PaddingStyle;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t *v81;
  unint64_t v82;
  uint64_t *v83;
  int *v84;
  unint64_t v85;
  uint64_t v86;
  int8x16_t *v87;
  int32x4_t *v88;
  int64x2_t v89;
  uint64_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int32x4_t *v100;
  unint64_t v101;
  unint64_t v102;
  int32x4_t *v103;
  unint64_t v104;
  uint64_t v105;
  int32x4_t *v106;
  int64x2_t v107;
  int32x4_t v108;
  int8x16_t v109;
  uint64_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int32x4_t v114;
  int8x16_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int32x4_t v118;
  int64x2_t v119;
  int32x4_t *v120;
  __int32 v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t IntegerType;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t *v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  unint64_t *v149;
  _QWORD *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t Loc;
  uint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int NumElements;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  unint64_t v180;
  unint64_t *v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  int v187;
  uint64_t *v188;
  int v189;
  unsigned int v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  unint64_t v199;
  unint64_t *v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t v203;
  mlir::GenericProgramPoint *v204;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208[2];
  uint64_t *v209;
  uint64_t *v210;
  _QWORD v211[2];
  uint64_t v212;
  uint64_t *v213;
  uint64_t *Strides;
  uint64_t v215;
  unsigned __int8 v216[8];
  uint64_t *v217;
  char v218;
  char v219;
  _QWORD *v220;
  uint64_t v221;
  void *__src;
  uint64_t v223;
  _BYTE v224[24];
  char *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  __int16 v229;
  uint64_t v230;

  v230 = *MEMORY[0x1E0C80C00];
  v211[0] = a2;
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  __src = v6;
  v223 = v16;
  v17 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v17)
    goto LABEL_20;
  v18 = *v17;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *(unsigned int *)(v18 + 16);
  if (!(_DWORD)v20)
    goto LABEL_20;
  v21 = *(_QWORD **)(v18 + 8);
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_20:
    v27 = 0;
  v220 = v17;
  v221 = v27;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v6);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v17))
    goto LABEL_54;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src))
    goto LABEL_54;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v220) & 1) == 0)
    goto LABEL_54;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  v30 = v29;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
  if (!*(_BYTE *)(a1 + 96))
    goto LABEL_54;
  v33 = ArgAttrsAttr;
  v34 = v32;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v211)
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v211) != 2
    || v30 != 4
    || v34 != 4
    || *(_QWORD *)(v33 + 16) != 1
    || *(_QWORD *)(v33 + 24) != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v211) != (void *)1)
  {
    goto LABEL_54;
  }
  v225 = (char *)&v227;
  v226 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v211);
  v35 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v35, v36, (uint64_t)&v225, 1);
  v37 = (uint64_t *)v225;
  if ((_DWORD)v226)
  {
    v38 = 0;
    while (*(_QWORD *)&v225[v38] == 1)
    {
      v38 += 8;
      if (8 * v226 == v38)
        goto LABEL_36;
    }
    goto LABEL_200;
  }
LABEL_36:
  if (v225 != (char *)&v227)
    free(v225);
  v225 = (char *)&v227;
  v226 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v211);
  v39 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v39, v40, (uint64_t)&v225, 1);
  v37 = (uint64_t *)v225;
  if ((_DWORD)v226)
  {
    v41 = 0;
    while (*(_QWORD *)&v225[v41] == 1)
    {
      v41 += 8;
      if (8 * v226 == v41)
        goto LABEL_42;
    }
    goto LABEL_200;
  }
LABEL_42:
  if (v225 != (char *)&v227)
    free(v225);
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v211);
  if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
  {
LABEL_53:
    v46 = *(_QWORD *)(v211[0] + 72);
    v47 = *(uint64_t **)(v46 + 24);
    v48 = *(_QWORD *)(v46 + 56);
    Strides = v47;
    v215 = v48;
    v216[0] = 0;
    LOBYTE(v217) = 0;
    v218 = 0;
    v219 = 1;
    goto LABEL_55;
  }
  if (PaddingStyle)
  {
LABEL_54:
    LOBYTE(Strides) = 0;
    v219 = 0;
    goto LABEL_55;
  }
  v225 = (char *)&v227;
  v226 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v211);
  v43 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v43, v44, (uint64_t)&v225, 1);
  v37 = (uint64_t *)v225;
  if (!(_DWORD)v226)
  {
LABEL_51:
    if (v225 != (char *)&v227)
      free(v225);
    goto LABEL_53;
  }
  v45 = 0;
  while (!*(_QWORD *)&v225[v45])
  {
    v45 += 8;
    if (8 * v226 == v45)
      goto LABEL_51;
  }
LABEL_200:
  LOBYTE(Strides) = 0;
  v219 = 0;
  if (v37 != &v227)
    free(v37);
LABEL_55:
  if (v219)
  {
    v212 = v215;
    v213 = Strides;
    v49 = (_QWORD *)(Strides[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v49)
      goto LABEL_65;
    v50 = *v49;
    v51 = mlir::TypeID::get<mlir::ShapedType>();
    v52 = *(unsigned int *)(v50 + 16);
    if (!(_DWORD)v52)
      goto LABEL_65;
    v53 = *(_QWORD **)(v50 + 8);
    v54 = &v53[2 * v52];
    do
    {
      v55 = v52 >> 1;
      v56 = &v53[2 * (v52 >> 1)];
      v58 = *v56;
      v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51)
        v53 = v57;
      else
        v52 = v55;
    }
    while (v52);
    if (v53 != v54 && *v53 == v51)
      v59 = v53[1];
    else
LABEL_65:
      v59 = 0;
    v220 = v49;
    v221 = v59;
    v60 = (uint64_t *)(*(_QWORD *)(v212 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v60)
      goto LABEL_75;
    v61 = *v60;
    v62 = mlir::TypeID::get<mlir::ShapedType>();
    v63 = *(unsigned int *)(v61 + 16);
    if (!(_DWORD)v63)
      goto LABEL_75;
    v64 = *(_QWORD **)(v61 + 8);
    v65 = &v64[2 * v63];
    do
    {
      v66 = v63 >> 1;
      v67 = &v64[2 * (v63 >> 1)];
      v69 = *v67;
      v68 = v67 + 2;
      v63 += ~(v63 >> 1);
      if (v69 < v62)
        v64 = v68;
      else
        v63 = v66;
    }
    while (v63);
    if (v64 != v65 && *v64 == v62)
      v70 = v64[1];
    else
LABEL_75:
      v70 = 0;
    v211[0] = v60;
    v211[1] = v70;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
    v72 = v71;
    v74 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
    v75 = v73;
    v76 = 8 * v73;
    __src = v224;
    v223 = 0x500000000;
    if ((unint64_t)(8 * v73) < 0x29)
    {
      v77 = 0;
      v78 = 0;
      if (!v73)
        goto LABEL_93;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v224, (8 * v73) >> 3, 4);
      v77 = v223;
      v78 = v223;
      if (!v75)
      {
LABEL_93:
        LODWORD(v223) = v78 + (v76 >> 3);
        v97 = v216[0];
        v98 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v211) + 8 * v97);
        if (v98 == 0x8000000000000000)
          v99 = -1;
        else
          v99 = v98;
        v100 = (int32x4_t *)__src;
        *((_DWORD *)__src + 1) = v99;
        if (!(_DWORD)v223)
          goto LABEL_110;
        v101 = (v223 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v101 >= 7)
        {
          v104 = v101 + 1;
          v105 = (v101 + 1) & 0x7FFFFFFFFFFFFFF8;
          v103 = (int32x4_t *)((char *)v100 + 4 * v105);
          v106 = v100 + 1;
          v107 = 0uLL;
          v108.i64[0] = -1;
          v108.i64[1] = -1;
          v109 = (int8x16_t)vdupq_n_s64(1uLL);
          v110 = v105;
          v111 = 0uLL;
          v112 = 0uLL;
          v113 = 0uLL;
          do
          {
            v114 = vceqq_s32(v106[-1], v108);
            v115.i64[0] = v114.u32[0];
            v115.i64[1] = v114.u32[1];
            v116 = (int64x2_t)vandq_s8(v115, v109);
            v115.i64[0] = v114.u32[2];
            v115.i64[1] = v114.u32[3];
            v117 = (int64x2_t)vandq_s8(v115, v109);
            v118 = vceqq_s32(*v106, v108);
            v115.i64[0] = v118.u32[0];
            v115.i64[1] = v118.u32[1];
            v119 = (int64x2_t)vandq_s8(v115, v109);
            v115.i64[0] = v118.u32[2];
            v115.i64[1] = v118.u32[3];
            v111 = vaddq_s64(v111, v117);
            v107 = vaddq_s64(v107, v116);
            v113 = vaddq_s64(v113, (int64x2_t)vandq_s8(v115, v109));
            v112 = vaddq_s64(v112, v119);
            v106 += 2;
            v110 -= 8;
          }
          while (v110);
          v102 = vaddvq_s64(vaddq_s64(vaddq_s64(v112, v107), vaddq_s64(v113, v111)));
          if (v104 == v105)
            goto LABEL_106;
        }
        else
        {
          v102 = 0;
          v103 = v100;
        }
        v120 = (int32x4_t *)((char *)v100 + 4 * v223);
        do
        {
          v121 = v103->i32[0];
          v103 = (int32x4_t *)((char *)v103 + 4);
          if (v121 == -1)
            ++v102;
        }
        while (v103 != v120);
LABEL_106:
        if (v102 >= 2)
        {
          v225 = "failed: unsupported dynamic dimensions";
          v229 = 259;
          v208[0] = (uint64_t *)&v225;
          v122 = (uint64_t)a3[2];
          if (v122 && mlir::RewriterBase::Listener::classof(v122))
            v80 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v122 + 64))(v122, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v208);
          else
            v80 = 0;
LABEL_188:
          if (__src != v224)
            free(__src);
          return v80;
        }
LABEL_110:
        v225 = (char *)&v227;
        HIDWORD(v226) = 3;
        v227 = 0x300000002;
        if (v72 == 4)
        {
          v123 = 2;
        }
        else
        {
          v228 = 4;
          v123 = 3;
        }
        LODWORD(v226) = v123;
        v208[0] = (uint64_t *)v123;
        IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v125 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v208, 1, IntegerType, 0);
        v126 = v125;
        v127 = *(_QWORD *)(a2 + 24);
        if (!v125)
          goto LABEL_122;
        v128 = *v125;
        v129 = mlir::TypeID::get<mlir::ShapedType>();
        v130 = *(unsigned int *)(v128 + 16);
        if (!(_DWORD)v130)
          goto LABEL_122;
        v131 = *(_QWORD **)(v128 + 8);
        v132 = &v131[2 * v130];
        do
        {
          v133 = v130 >> 1;
          v134 = &v131[2 * (v130 >> 1)];
          v136 = *v134;
          v135 = v134 + 2;
          v130 += ~(v130 >> 1);
          if (v136 < v129)
            v131 = v135;
          else
            v130 = v133;
        }
        while (v130);
        if (v131 != v132 && *v131 == v129)
          v137 = v131[1];
        else
LABEL_122:
          v137 = 0;
        v210 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v126, v137, v225, 4 * v226, 4, 1, 1);
        v208[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v127, &v210);
        v212 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), &v212, v208)- 16;
        if (v225 != (char *)&v227)
          free(v225);
        v138 = *(_QWORD *)(a2 + 24);
        LODWORD(v225) = 0;
        LODWORD(v208[0]) = 1;
        v213 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v138, (uint64_t *)&v213, (unsigned int *)&v225, (unsigned int *)v208)- 16);
        LODWORD(v210) = 1;
        v139 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v140 = (_QWORD *)mlir::RankedTensorType::get(0, 0, v139, 0);
        v141 = v140;
        v142 = *(_QWORD *)(a2 + 24);
        if (!v140)
          goto LABEL_134;
        v143 = *v140;
        v144 = mlir::TypeID::get<mlir::ShapedType>();
        v145 = *(unsigned int *)(v143 + 16);
        if (!(_DWORD)v145)
          goto LABEL_134;
        v146 = *(_QWORD **)(v143 + 8);
        v147 = &v146[2 * v145];
        do
        {
          v148 = v145 >> 1;
          v149 = &v146[2 * (v145 >> 1)];
          v151 = *v149;
          v150 = v149 + 2;
          v145 += ~(v145 >> 1);
          if (v151 < v144)
            v146 = v150;
          else
            v145 = v148;
        }
        while (v145);
        if (v146 != v147 && *v146 == v144)
          v152 = v146[1];
        else
LABEL_134:
          v152 = 0;
        v208[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v141, v152, &v210, 4, 4, 1, 1);
        v225 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v142, v208)- 16;
        v213 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v213, (uint64_t *)&v225)- 16);
        v153 = *(_QWORD *)(a2 + 24);
        LOBYTE(v225) = 0;
        v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v153, &v212, (uint64_t *)&v213, v216, (unsigned __int8 *)&v225)- 16);
        if (v218)
        {
          v209 = v217;
          Loc = mlir::Value::getLoc((mlir::Value *)&v209);
          v155 = (uint64_t *)(v209[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v155)
            goto LABEL_145;
          v156 = *v155;
          v157 = mlir::TypeID::get<mlir::ShapedType>();
          v158 = *(unsigned int *)(v156 + 16);
          if (!(_DWORD)v158)
            goto LABEL_145;
          v159 = *(_QWORD **)(v156 + 8);
          v160 = &v159[2 * v158];
          do
          {
            v161 = v158 >> 1;
            v162 = &v159[2 * (v158 >> 1)];
            v164 = *v162;
            v163 = v162 + 2;
            v158 += ~(v158 >> 1);
            if (v164 < v157)
              v159 = v163;
            else
              v158 = v161;
          }
          while (v158);
          if (v159 != v160 && *v159 == v157)
            v165 = (uint64_t *)v159[1];
          else
LABEL_145:
            v165 = 0;
          v208[0] = v155;
          v208[1] = v165;
          v225 = (char *)&v227;
          v227 = 0x1FFFFFFFFLL;
          v226 = 0x200000002;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v208))
          {
            v166 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v208);
            if (v167)
            {
              v168 = 8 * v167;
              while (*v166 != 0x8000000000000000)
              {
                ++v166;
                v168 -= 8;
                if (!v168)
                  goto LABEL_151;
              }
            }
            else
            {
LABEL_151:
              v169 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v208);
              NumElements = mlir::ShapedType::getNumElements(v169, v170);
              *(_DWORD *)v225 = NumElements;
            }
          }
          v207 = 2;
          v172 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
          v173 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v207, 1, v172, 0);
          v174 = v173;
          if (!v173)
            goto LABEL_161;
          v175 = *v173;
          v176 = mlir::TypeID::get<mlir::ShapedType>();
          v177 = *(unsigned int *)(v175 + 16);
          if (!(_DWORD)v177)
            goto LABEL_161;
          v178 = *(_QWORD **)(v175 + 8);
          v179 = &v178[2 * v177];
          do
          {
            v180 = v177 >> 1;
            v181 = &v178[2 * (v177 >> 1)];
            v183 = *v181;
            v182 = v181 + 2;
            v177 += ~(v177 >> 1);
            if (v183 < v176)
              v178 = v182;
            else
              v177 = v180;
          }
          while (v177);
          if (v178 != v179 && *v178 == v176)
            v184 = v178[1];
          else
LABEL_161:
            v184 = 0;
          v206 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v174, v184, v225, 4 * v226, 4, 1, 1);
          v207 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v206);
          v209 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v209, &v207)- 16);
          v206 = (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v210[1] & 0xFFFFFFFFFFFFFFF8));
          if (v206 != (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v209[1] & 0xFFFFFFFFFFFFFFF8)))
            v209 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v209, (uint64_t *)&v206)- 16);
          v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v210, (uint64_t *)&v209)- 16);
          if (v225 != (char *)&v227)
            free(v225);
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
        v225 = v185;
        v186 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v188 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v225, 1, v186, 0);
        v225 = (char *)&v227;
        v226 = 0x500000000;
        v189 = v223;
        if (!(_DWORD)v223)
        {
          v192 = &v227;
LABEL_175:
          *(_DWORD *)v192 = *((_DWORD *)v192 + 1);
          *((_DWORD *)v192 + 1) = v187;
          v193 = *(_QWORD *)(a2 + 24);
          if (!v188)
            goto LABEL_184;
          v194 = *v188;
          v195 = mlir::TypeID::get<mlir::ShapedType>();
          v196 = *(unsigned int *)(v194 + 16);
          if (!(_DWORD)v196)
            goto LABEL_184;
          v197 = *(_QWORD **)(v194 + 8);
          v198 = &v197[2 * v196];
          do
          {
            v199 = v196 >> 1;
            v200 = &v197[2 * (v196 >> 1)];
            v202 = *v200;
            v201 = v200 + 2;
            v196 += ~(v196 >> 1);
            if (v202 < v195)
              v197 = v201;
            else
              v196 = v199;
          }
          while (v196);
          if (v197 != v198 && *v197 == v195)
            v203 = v197[1];
          else
LABEL_184:
            v203 = 0;
          v80 = 1;
          v209 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v188, v203, v225, 4 * v226, 4, 1, 1);
          v208[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v193, &v209);
          v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v210, v208)- 16);
          if (v225 != (char *)&v227)
            free(v225);
          LODWORD(v225) = 0;
          LODWORD(v208[0]) = 1;
          v204 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v210, (unsigned int *)&v225, (unsigned int *)v208);
          (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v204);
          goto LABEL_188;
        }
        if (v223 < 6)
        {
          v191 = &v227;
          v190 = v223;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, &v227, v223, 4);
          v190 = v223;
          if (!(_DWORD)v223)
          {
LABEL_174:
            LODWORD(v226) = v189;
            v192 = (uint64_t *)v225;
            v187 = *(_DWORD *)v225;
            goto LABEL_175;
          }
          v191 = (uint64_t *)v225;
        }
        memcpy(v191, __src, 4 * v190);
        goto LABEL_174;
      }
    }
    v81 = (int8x16_t *)((char *)__src + 4 * v77);
    v82 = (v75 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v82 >= 7)
    {
      v85 = v82 + 1;
      v86 = (v82 + 1) & 0x3FFFFFFFFFFFFFF8;
      v83 = (uint64_t *)(v74 + 8 * v86);
      v84 = &v81->i32[v86];
      v87 = v81 + 1;
      v88 = (int32x4_t *)(v74 + 32);
      v89 = vdupq_n_s64(0x8000000000000000);
      v90 = v86;
      do
      {
        v91 = v88[-2];
        v92 = v88[-1];
        v93 = *v88;
        v94 = v88[1];
        v88 += 4;
        v87[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v91, v92), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v91, v89), (int32x4_t)vceqq_s64((int64x2_t)v92, v89)));
        *v87 = vorrq_s8((int8x16_t)vuzp1q_s32(v93, v94), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v93, v89), (int32x4_t)vceqq_s64((int64x2_t)v94, v89)));
        v87 += 2;
        v90 -= 8;
      }
      while (v90);
      if (v85 == v86)
      {
LABEL_92:
        v78 = v223;
        goto LABEL_93;
      }
    }
    else
    {
      v83 = (uint64_t *)v74;
      v84 = (int *)v81;
    }
    do
    {
      v96 = *v83++;
      v95 = v96;
      if (v96 == 0x8000000000000000)
        v95 = -1;
      *v84++ = v95;
    }
    while (v83 != (uint64_t *)(v74 + v76));
    goto LABEL_92;
  }
  v225 = "failed: pattern did not match";
  v229 = 259;
  __src = &v225;
  v79 = (uint64_t)a3[2];
  if (v79 && mlir::RewriterBase::Listener::classof(v79))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v79 + 64))(v79, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DOp &>(mlir::mps::Conv2DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
  else
    return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.squeeze", (const unsigned __int8 *)0xB, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.squeeze";
    v17[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::SqueezeOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4 - 16);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::SqueezeOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.flatten_2d", (const unsigned __int8 *)0xE, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.flatten_2d";
    v17[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::mps::Flatten2DOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::Flatten2DOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DDataGradientOp>::~CanonicalizeConvToMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DDataGradientOp>::~CanonicalizeConvToMatMul(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv2DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t ElementTypeOrSelf;
  uint64_t v29;
  uint64_t v30;
  uint64_t ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int PaddingStyle;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t *v81;
  unint64_t v82;
  uint64_t *v83;
  int *v84;
  unint64_t v85;
  uint64_t v86;
  int8x16_t *v87;
  int32x4_t *v88;
  int64x2_t v89;
  uint64_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int32x4_t *v100;
  unint64_t v101;
  unint64_t v102;
  int32x4_t *v103;
  unint64_t v104;
  uint64_t v105;
  int32x4_t *v106;
  int64x2_t v107;
  int32x4_t v108;
  int8x16_t v109;
  uint64_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int32x4_t v114;
  int8x16_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int32x4_t v118;
  int64x2_t v119;
  int32x4_t *v120;
  __int32 v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t IntegerType;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t *v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  unint64_t *v149;
  _QWORD *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t Loc;
  uint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  int NumElements;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  unint64_t v180;
  unint64_t *v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  int v187;
  uint64_t *v188;
  int v189;
  unsigned int v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  _QWORD *v197;
  _QWORD *v198;
  unint64_t v199;
  unint64_t *v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t v203;
  mlir::GenericProgramPoint *v204;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208[2];
  uint64_t *v209;
  uint64_t *v210;
  _QWORD v211[2];
  uint64_t v212;
  uint64_t *v213;
  uint64_t *Strides;
  uint64_t v215;
  unsigned __int8 v216[8];
  uint64_t *v217;
  char v218;
  char v219;
  _QWORD *v220;
  uint64_t v221;
  void *__src;
  uint64_t v223;
  _BYTE v224[24];
  char *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  __int16 v229;
  uint64_t v230;

  v230 = *MEMORY[0x1E0C80C00];
  v211[0] = a2;
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  __src = v6;
  v223 = v16;
  v17 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v17)
    goto LABEL_20;
  v18 = *v17;
  v19 = mlir::TypeID::get<mlir::ShapedType>();
  v20 = *(unsigned int *)(v18 + 16);
  if (!(_DWORD)v20)
    goto LABEL_20;
  v21 = *(_QWORD **)(v18 + 8);
  v22 = &v21[2 * v20];
  do
  {
    v23 = v20 >> 1;
    v24 = &v21[2 * (v20 >> 1)];
    v26 = *v24;
    v25 = v24 + 2;
    v20 += ~(v20 >> 1);
    if (v26 < v19)
      v21 = v25;
    else
      v20 = v23;
  }
  while (v20);
  if (v21 != v22 && *v21 == v19)
    v27 = v21[1];
  else
LABEL_20:
    v27 = 0;
  v220 = v17;
  v221 = v27;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v6);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v17))
    goto LABEL_54;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src))
    goto LABEL_54;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v220) & 1) == 0)
    goto LABEL_54;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  v30 = v29;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
  if (!*(_BYTE *)(a1 + 96))
    goto LABEL_54;
  v33 = ArgAttrsAttr;
  v34 = v32;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v211)
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v211) != 2
    || v30 != 4
    || v34 != 4
    || *(_QWORD *)(v33 + 16) != 1
    || *(_QWORD *)(v33 + 24) != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v211) != (void *)1)
  {
    goto LABEL_54;
  }
  v225 = (char *)&v227;
  v226 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v211);
  v35 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v35, v36, (uint64_t)&v225, 1);
  v37 = (uint64_t *)v225;
  if ((_DWORD)v226)
  {
    v38 = 0;
    while (*(_QWORD *)&v225[v38] == 1)
    {
      v38 += 8;
      if (8 * v226 == v38)
        goto LABEL_36;
    }
    goto LABEL_200;
  }
LABEL_36:
  if (v225 != (char *)&v227)
    free(v225);
  v225 = (char *)&v227;
  v226 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v211);
  v39 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v39, v40, (uint64_t)&v225, 1);
  v37 = (uint64_t *)v225;
  if ((_DWORD)v226)
  {
    v41 = 0;
    while (*(_QWORD *)&v225[v41] == 1)
    {
      v41 += 8;
      if (8 * v226 == v41)
        goto LABEL_42;
    }
    goto LABEL_200;
  }
LABEL_42:
  if (v225 != (char *)&v227)
    free(v225);
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v211);
  if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
  {
LABEL_53:
    v46 = *(_QWORD *)(v211[0] + 72);
    v47 = *(uint64_t **)(v46 + 24);
    v48 = *(_QWORD *)(v46 + 56);
    Strides = v47;
    v215 = v48;
    v216[0] = 1;
    LOBYTE(v217) = 0;
    v218 = 0;
    v219 = 1;
    goto LABEL_55;
  }
  if (PaddingStyle)
  {
LABEL_54:
    LOBYTE(Strides) = 0;
    v219 = 0;
    goto LABEL_55;
  }
  v225 = (char *)&v227;
  v226 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v211);
  v43 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v43, v44, (uint64_t)&v225, 1);
  v37 = (uint64_t *)v225;
  if (!(_DWORD)v226)
  {
LABEL_51:
    if (v225 != (char *)&v227)
      free(v225);
    goto LABEL_53;
  }
  v45 = 0;
  while (!*(_QWORD *)&v225[v45])
  {
    v45 += 8;
    if (8 * v226 == v45)
      goto LABEL_51;
  }
LABEL_200:
  LOBYTE(Strides) = 0;
  v219 = 0;
  if (v37 != &v227)
    free(v37);
LABEL_55:
  if (v219)
  {
    v212 = v215;
    v213 = Strides;
    v49 = (_QWORD *)(Strides[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v49)
      goto LABEL_65;
    v50 = *v49;
    v51 = mlir::TypeID::get<mlir::ShapedType>();
    v52 = *(unsigned int *)(v50 + 16);
    if (!(_DWORD)v52)
      goto LABEL_65;
    v53 = *(_QWORD **)(v50 + 8);
    v54 = &v53[2 * v52];
    do
    {
      v55 = v52 >> 1;
      v56 = &v53[2 * (v52 >> 1)];
      v58 = *v56;
      v57 = v56 + 2;
      v52 += ~(v52 >> 1);
      if (v58 < v51)
        v53 = v57;
      else
        v52 = v55;
    }
    while (v52);
    if (v53 != v54 && *v53 == v51)
      v59 = v53[1];
    else
LABEL_65:
      v59 = 0;
    v220 = v49;
    v221 = v59;
    v60 = (uint64_t *)(*(_QWORD *)(v212 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v60)
      goto LABEL_75;
    v61 = *v60;
    v62 = mlir::TypeID::get<mlir::ShapedType>();
    v63 = *(unsigned int *)(v61 + 16);
    if (!(_DWORD)v63)
      goto LABEL_75;
    v64 = *(_QWORD **)(v61 + 8);
    v65 = &v64[2 * v63];
    do
    {
      v66 = v63 >> 1;
      v67 = &v64[2 * (v63 >> 1)];
      v69 = *v67;
      v68 = v67 + 2;
      v63 += ~(v63 >> 1);
      if (v69 < v62)
        v64 = v68;
      else
        v63 = v66;
    }
    while (v63);
    if (v64 != v65 && *v64 == v62)
      v70 = v64[1];
    else
LABEL_75:
      v70 = 0;
    v211[0] = v60;
    v211[1] = v70;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
    v72 = v71;
    v74 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
    v75 = v73;
    v76 = 8 * v73;
    __src = v224;
    v223 = 0x500000000;
    if ((unint64_t)(8 * v73) < 0x29)
    {
      v77 = 0;
      v78 = 0;
      if (!v73)
        goto LABEL_93;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v224, (8 * v73) >> 3, 4);
      v77 = v223;
      v78 = v223;
      if (!v75)
      {
LABEL_93:
        LODWORD(v223) = v78 + (v76 >> 3);
        v97 = v216[0];
        v98 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v211) + 8 * v97);
        if (v98 == 0x8000000000000000)
          v99 = -1;
        else
          v99 = v98;
        v100 = (int32x4_t *)__src;
        *((_DWORD *)__src + 1) = v99;
        if (!(_DWORD)v223)
          goto LABEL_110;
        v101 = (v223 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v101 >= 7)
        {
          v104 = v101 + 1;
          v105 = (v101 + 1) & 0x7FFFFFFFFFFFFFF8;
          v103 = (int32x4_t *)((char *)v100 + 4 * v105);
          v106 = v100 + 1;
          v107 = 0uLL;
          v108.i64[0] = -1;
          v108.i64[1] = -1;
          v109 = (int8x16_t)vdupq_n_s64(1uLL);
          v110 = v105;
          v111 = 0uLL;
          v112 = 0uLL;
          v113 = 0uLL;
          do
          {
            v114 = vceqq_s32(v106[-1], v108);
            v115.i64[0] = v114.u32[0];
            v115.i64[1] = v114.u32[1];
            v116 = (int64x2_t)vandq_s8(v115, v109);
            v115.i64[0] = v114.u32[2];
            v115.i64[1] = v114.u32[3];
            v117 = (int64x2_t)vandq_s8(v115, v109);
            v118 = vceqq_s32(*v106, v108);
            v115.i64[0] = v118.u32[0];
            v115.i64[1] = v118.u32[1];
            v119 = (int64x2_t)vandq_s8(v115, v109);
            v115.i64[0] = v118.u32[2];
            v115.i64[1] = v118.u32[3];
            v111 = vaddq_s64(v111, v117);
            v107 = vaddq_s64(v107, v116);
            v113 = vaddq_s64(v113, (int64x2_t)vandq_s8(v115, v109));
            v112 = vaddq_s64(v112, v119);
            v106 += 2;
            v110 -= 8;
          }
          while (v110);
          v102 = vaddvq_s64(vaddq_s64(vaddq_s64(v112, v107), vaddq_s64(v113, v111)));
          if (v104 == v105)
            goto LABEL_106;
        }
        else
        {
          v102 = 0;
          v103 = v100;
        }
        v120 = (int32x4_t *)((char *)v100 + 4 * v223);
        do
        {
          v121 = v103->i32[0];
          v103 = (int32x4_t *)((char *)v103 + 4);
          if (v121 == -1)
            ++v102;
        }
        while (v103 != v120);
LABEL_106:
        if (v102 >= 2)
        {
          v225 = "failed: unsupported dynamic dimensions";
          v229 = 259;
          v208[0] = (uint64_t *)&v225;
          v122 = (uint64_t)a3[2];
          if (v122 && mlir::RewriterBase::Listener::classof(v122))
            v80 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v122 + 64))(v122, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v208);
          else
            v80 = 0;
LABEL_188:
          if (__src != v224)
            free(__src);
          return v80;
        }
LABEL_110:
        v225 = (char *)&v227;
        HIDWORD(v226) = 3;
        v227 = 0x300000002;
        if (v72 == 4)
        {
          v123 = 2;
        }
        else
        {
          v228 = 4;
          v123 = 3;
        }
        LODWORD(v226) = v123;
        v208[0] = (uint64_t *)v123;
        IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v125 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v208, 1, IntegerType, 0);
        v126 = v125;
        v127 = *(_QWORD *)(a2 + 24);
        if (!v125)
          goto LABEL_122;
        v128 = *v125;
        v129 = mlir::TypeID::get<mlir::ShapedType>();
        v130 = *(unsigned int *)(v128 + 16);
        if (!(_DWORD)v130)
          goto LABEL_122;
        v131 = *(_QWORD **)(v128 + 8);
        v132 = &v131[2 * v130];
        do
        {
          v133 = v130 >> 1;
          v134 = &v131[2 * (v130 >> 1)];
          v136 = *v134;
          v135 = v134 + 2;
          v130 += ~(v130 >> 1);
          if (v136 < v129)
            v131 = v135;
          else
            v130 = v133;
        }
        while (v130);
        if (v131 != v132 && *v131 == v129)
          v137 = v131[1];
        else
LABEL_122:
          v137 = 0;
        v210 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v126, v137, v225, 4 * v226, 4, 1, 1);
        v208[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v127, &v210);
        v212 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), &v212, v208)- 16;
        if (v225 != (char *)&v227)
          free(v225);
        v138 = *(_QWORD *)(a2 + 24);
        LODWORD(v225) = 0;
        LODWORD(v208[0]) = 1;
        v213 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v138, (uint64_t *)&v213, (unsigned int *)&v225, (unsigned int *)v208)- 16);
        LODWORD(v210) = 1;
        v139 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v140 = (_QWORD *)mlir::RankedTensorType::get(0, 0, v139, 0);
        v141 = v140;
        v142 = *(_QWORD *)(a2 + 24);
        if (!v140)
          goto LABEL_134;
        v143 = *v140;
        v144 = mlir::TypeID::get<mlir::ShapedType>();
        v145 = *(unsigned int *)(v143 + 16);
        if (!(_DWORD)v145)
          goto LABEL_134;
        v146 = *(_QWORD **)(v143 + 8);
        v147 = &v146[2 * v145];
        do
        {
          v148 = v145 >> 1;
          v149 = &v146[2 * (v145 >> 1)];
          v151 = *v149;
          v150 = v149 + 2;
          v145 += ~(v145 >> 1);
          if (v151 < v144)
            v146 = v150;
          else
            v145 = v148;
        }
        while (v145);
        if (v146 != v147 && *v146 == v144)
          v152 = v146[1];
        else
LABEL_134:
          v152 = 0;
        v208[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v141, v152, &v210, 4, 4, 1, 1);
        v225 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v142, v208)- 16;
        v213 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v213, (uint64_t *)&v225)- 16);
        v153 = *(_QWORD *)(a2 + 24);
        LOBYTE(v225) = 0;
        v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v153, &v212, (uint64_t *)&v213, v216, (unsigned __int8 *)&v225)- 16);
        if (v218)
        {
          v209 = v217;
          Loc = mlir::Value::getLoc((mlir::Value *)&v209);
          v155 = (uint64_t *)(v209[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v155)
            goto LABEL_145;
          v156 = *v155;
          v157 = mlir::TypeID::get<mlir::ShapedType>();
          v158 = *(unsigned int *)(v156 + 16);
          if (!(_DWORD)v158)
            goto LABEL_145;
          v159 = *(_QWORD **)(v156 + 8);
          v160 = &v159[2 * v158];
          do
          {
            v161 = v158 >> 1;
            v162 = &v159[2 * (v158 >> 1)];
            v164 = *v162;
            v163 = v162 + 2;
            v158 += ~(v158 >> 1);
            if (v164 < v157)
              v159 = v163;
            else
              v158 = v161;
          }
          while (v158);
          if (v159 != v160 && *v159 == v157)
            v165 = (uint64_t *)v159[1];
          else
LABEL_145:
            v165 = 0;
          v208[0] = v155;
          v208[1] = v165;
          v225 = (char *)&v227;
          v227 = 0x1FFFFFFFFLL;
          v226 = 0x200000002;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v208))
          {
            v166 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v208);
            if (v167)
            {
              v168 = 8 * v167;
              while (*v166 != 0x8000000000000000)
              {
                ++v166;
                v168 -= 8;
                if (!v168)
                  goto LABEL_151;
              }
            }
            else
            {
LABEL_151:
              v169 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v208);
              NumElements = mlir::ShapedType::getNumElements(v169, v170);
              *(_DWORD *)v225 = NumElements;
            }
          }
          v207 = 2;
          v172 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
          v173 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v207, 1, v172, 0);
          v174 = v173;
          if (!v173)
            goto LABEL_161;
          v175 = *v173;
          v176 = mlir::TypeID::get<mlir::ShapedType>();
          v177 = *(unsigned int *)(v175 + 16);
          if (!(_DWORD)v177)
            goto LABEL_161;
          v178 = *(_QWORD **)(v175 + 8);
          v179 = &v178[2 * v177];
          do
          {
            v180 = v177 >> 1;
            v181 = &v178[2 * (v177 >> 1)];
            v183 = *v181;
            v182 = v181 + 2;
            v177 += ~(v177 >> 1);
            if (v183 < v176)
              v178 = v182;
            else
              v177 = v180;
          }
          while (v177);
          if (v178 != v179 && *v178 == v176)
            v184 = v178[1];
          else
LABEL_161:
            v184 = 0;
          v206 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v174, v184, v225, 4 * v226, 4, 1, 1);
          v207 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v206);
          v209 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v209, &v207)- 16);
          v206 = (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v210[1] & 0xFFFFFFFFFFFFFFF8));
          if (v206 != (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v209[1] & 0xFFFFFFFFFFFFFFF8)))
            v209 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v209, (uint64_t *)&v206)- 16);
          v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v210, (uint64_t *)&v209)- 16);
          if (v225 != (char *)&v227)
            free(v225);
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v220);
        v225 = v185;
        v186 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v188 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v225, 1, v186, 0);
        v225 = (char *)&v227;
        v226 = 0x500000000;
        v189 = v223;
        if (!(_DWORD)v223)
        {
          v192 = &v227;
LABEL_175:
          *(_DWORD *)v192 = *((_DWORD *)v192 + 1);
          *((_DWORD *)v192 + 1) = v187;
          v193 = *(_QWORD *)(a2 + 24);
          if (!v188)
            goto LABEL_184;
          v194 = *v188;
          v195 = mlir::TypeID::get<mlir::ShapedType>();
          v196 = *(unsigned int *)(v194 + 16);
          if (!(_DWORD)v196)
            goto LABEL_184;
          v197 = *(_QWORD **)(v194 + 8);
          v198 = &v197[2 * v196];
          do
          {
            v199 = v196 >> 1;
            v200 = &v197[2 * (v196 >> 1)];
            v202 = *v200;
            v201 = v200 + 2;
            v196 += ~(v196 >> 1);
            if (v202 < v195)
              v197 = v201;
            else
              v196 = v199;
          }
          while (v196);
          if (v197 != v198 && *v197 == v195)
            v203 = v197[1];
          else
LABEL_184:
            v203 = 0;
          v80 = 1;
          v209 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v188, v203, v225, 4 * v226, 4, 1, 1);
          v208[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v193, &v209);
          v210 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v210, v208)- 16);
          if (v225 != (char *)&v227)
            free(v225);
          LODWORD(v225) = 0;
          LODWORD(v208[0]) = 1;
          v204 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v210, (unsigned int *)&v225, (unsigned int *)v208);
          (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v204);
          goto LABEL_188;
        }
        if (v223 < 6)
        {
          v191 = &v227;
          v190 = v223;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, &v227, v223, 4);
          v190 = v223;
          if (!(_DWORD)v223)
          {
LABEL_174:
            LODWORD(v226) = v189;
            v192 = (uint64_t *)v225;
            v187 = *(_DWORD *)v225;
            goto LABEL_175;
          }
          v191 = (uint64_t *)v225;
        }
        memcpy(v191, __src, 4 * v190);
        goto LABEL_174;
      }
    }
    v81 = (int8x16_t *)((char *)__src + 4 * v77);
    v82 = (v75 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v82 >= 7)
    {
      v85 = v82 + 1;
      v86 = (v82 + 1) & 0x3FFFFFFFFFFFFFF8;
      v83 = (uint64_t *)(v74 + 8 * v86);
      v84 = &v81->i32[v86];
      v87 = v81 + 1;
      v88 = (int32x4_t *)(v74 + 32);
      v89 = vdupq_n_s64(0x8000000000000000);
      v90 = v86;
      do
      {
        v91 = v88[-2];
        v92 = v88[-1];
        v93 = *v88;
        v94 = v88[1];
        v88 += 4;
        v87[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v91, v92), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v91, v89), (int32x4_t)vceqq_s64((int64x2_t)v92, v89)));
        *v87 = vorrq_s8((int8x16_t)vuzp1q_s32(v93, v94), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v93, v89), (int32x4_t)vceqq_s64((int64x2_t)v94, v89)));
        v87 += 2;
        v90 -= 8;
      }
      while (v90);
      if (v85 == v86)
      {
LABEL_92:
        v78 = v223;
        goto LABEL_93;
      }
    }
    else
    {
      v83 = (uint64_t *)v74;
      v84 = (int *)v81;
    }
    do
    {
      v96 = *v83++;
      v95 = v96;
      if (v96 == 0x8000000000000000)
        v95 = -1;
      *v84++ = v95;
    }
    while (v83 != (uint64_t *)(v74 + v76));
    goto LABEL_92;
  }
  v225 = "failed: pattern did not match";
  v229 = 259;
  __src = &v225;
  v79 = (uint64_t)a3[2];
  if (v79 && mlir::RewriterBase::Listener::classof(v79))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v79 + 64))(v79, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv2DDataGradientOp &>(mlir::mps::Conv2DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
  else
    return 0;
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DOp>::~CanonicalizeConvToMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DOp>::~CanonicalizeConvToMatMul(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t ElementTypeOrSelf;
  uint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int PaddingStyle;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t *v79;
  unint64_t v80;
  uint64_t *v81;
  int *v82;
  unint64_t v83;
  uint64_t v84;
  int8x16_t *v85;
  int32x4_t *v86;
  int64x2_t v87;
  uint64_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int32x4_t *v98;
  unint64_t v99;
  unint64_t v100;
  int32x4_t *v101;
  unint64_t v102;
  uint64_t v103;
  int32x4_t *v104;
  int64x2_t v105;
  int32x4_t v106;
  int8x16_t v107;
  uint64_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int32x4_t v116;
  int64x2_t v117;
  int32x4_t *v118;
  __int32 v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t IntegerType;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  unint64_t *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t *v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t Loc;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  int NumElements;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t *v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  int v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t *v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  mlir::GenericProgramPoint *v202;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206[2];
  uint64_t *v207;
  uint64_t *v208;
  _QWORD v209[2];
  uint64_t v210;
  uint64_t *v211;
  uint64_t *Strides;
  uint64_t v213;
  unsigned __int8 v214[8];
  uint64_t *v215;
  char v216;
  char v217;
  _QWORD *v218;
  uint64_t v219;
  void *__src;
  uint64_t v221;
  _BYTE v222[24];
  char *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  __int16 v227;
  uint64_t v228;

  v228 = *MEMORY[0x1E0C80C00];
  v209[0] = a2;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  __src = v5;
  v221 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v218 = v16;
  v219 = v26;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v5);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v16))
    goto LABEL_54;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src))
    goto LABEL_54;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v218) & 1) == 0)
    goto LABEL_54;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  v29 = v28;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
  v32 = v31;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v209) != 7
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v209) != 9
    || v29 != 5
    || v32 != 5
    || ArgAttrsAttr[2] != 1
    || ArgAttrsAttr[3] != 1
    || ArgAttrsAttr[4] != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v209) != (void *)1)
  {
    goto LABEL_54;
  }
  v223 = (char *)&v225;
  v224 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v209);
  v33 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v33, v34, (uint64_t)&v223, 1);
  v35 = (uint64_t *)v223;
  if ((_DWORD)v224)
  {
    v36 = 0;
    while (*(_QWORD *)&v223[v36] == 1)
    {
      v36 += 8;
      if (8 * v224 == v36)
        goto LABEL_36;
    }
    goto LABEL_200;
  }
LABEL_36:
  if (v223 != (char *)&v225)
    free(v223);
  v223 = (char *)&v225;
  v224 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v209);
  v37 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v37, v38, (uint64_t)&v223, 1);
  v35 = (uint64_t *)v223;
  if ((_DWORD)v224)
  {
    v39 = 0;
    while (*(_QWORD *)&v223[v39] == 1)
    {
      v39 += 8;
      if (8 * v224 == v39)
        goto LABEL_42;
    }
    goto LABEL_200;
  }
LABEL_42:
  if (v223 != (char *)&v225)
    free(v223);
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v209);
  if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
  {
LABEL_53:
    v44 = *(_QWORD *)(v209[0] + 72);
    v45 = *(uint64_t **)(v44 + 24);
    v46 = *(_QWORD *)(v44 + 56);
    Strides = v45;
    v213 = v46;
    v214[0] = 0;
    LOBYTE(v215) = 0;
    v216 = 0;
    v217 = 1;
    goto LABEL_55;
  }
  if (PaddingStyle)
  {
LABEL_54:
    LOBYTE(Strides) = 0;
    v217 = 0;
    goto LABEL_55;
  }
  v223 = (char *)&v225;
  v224 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v209);
  v41 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v41, v42, (uint64_t)&v223, 1);
  v35 = (uint64_t *)v223;
  if (!(_DWORD)v224)
  {
LABEL_51:
    if (v223 != (char *)&v225)
      free(v223);
    goto LABEL_53;
  }
  v43 = 0;
  while (!*(_QWORD *)&v223[v43])
  {
    v43 += 8;
    if (8 * v224 == v43)
      goto LABEL_51;
  }
LABEL_200:
  LOBYTE(Strides) = 0;
  v217 = 0;
  if (v35 != &v225)
    free(v35);
LABEL_55:
  if (v217)
  {
    v210 = v213;
    v211 = Strides;
    v47 = (_QWORD *)(Strides[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v47)
      goto LABEL_65;
    v48 = *v47;
    v49 = mlir::TypeID::get<mlir::ShapedType>();
    v50 = *(unsigned int *)(v48 + 16);
    if (!(_DWORD)v50)
      goto LABEL_65;
    v51 = *(_QWORD **)(v48 + 8);
    v52 = &v51[2 * v50];
    do
    {
      v53 = v50 >> 1;
      v54 = &v51[2 * (v50 >> 1)];
      v56 = *v54;
      v55 = v54 + 2;
      v50 += ~(v50 >> 1);
      if (v56 < v49)
        v51 = v55;
      else
        v50 = v53;
    }
    while (v50);
    if (v51 != v52 && *v51 == v49)
      v57 = v51[1];
    else
LABEL_65:
      v57 = 0;
    v218 = v47;
    v219 = v57;
    v58 = (uint64_t *)(*(_QWORD *)(v210 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v58)
      goto LABEL_75;
    v59 = *v58;
    v60 = mlir::TypeID::get<mlir::ShapedType>();
    v61 = *(unsigned int *)(v59 + 16);
    if (!(_DWORD)v61)
      goto LABEL_75;
    v62 = *(_QWORD **)(v59 + 8);
    v63 = &v62[2 * v61];
    do
    {
      v64 = v61 >> 1;
      v65 = &v62[2 * (v61 >> 1)];
      v67 = *v65;
      v66 = v65 + 2;
      v61 += ~(v61 >> 1);
      if (v67 < v60)
        v62 = v66;
      else
        v61 = v64;
    }
    while (v61);
    if (v62 != v63 && *v62 == v60)
      v68 = v62[1];
    else
LABEL_75:
      v68 = 0;
    v209[0] = v58;
    v209[1] = v68;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
    v70 = v69;
    v72 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
    v73 = v71;
    v74 = 8 * v71;
    __src = v222;
    v221 = 0x500000000;
    if ((unint64_t)(8 * v71) < 0x29)
    {
      v75 = 0;
      v76 = 0;
      if (!v71)
        goto LABEL_93;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v222, (8 * v71) >> 3, 4);
      v75 = v221;
      v76 = v221;
      if (!v73)
      {
LABEL_93:
        LODWORD(v221) = v76 + (v74 >> 3);
        v95 = v214[0];
        v96 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v209) + 8 * v95);
        if (v96 == 0x8000000000000000)
          v97 = -1;
        else
          v97 = v96;
        v98 = (int32x4_t *)__src;
        *((_DWORD *)__src + 1) = v97;
        if (!(_DWORD)v221)
          goto LABEL_110;
        v99 = (v221 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v99 >= 7)
        {
          v102 = v99 + 1;
          v103 = (v99 + 1) & 0x7FFFFFFFFFFFFFF8;
          v101 = (int32x4_t *)((char *)v98 + 4 * v103);
          v104 = v98 + 1;
          v105 = 0uLL;
          v106.i64[0] = -1;
          v106.i64[1] = -1;
          v107 = (int8x16_t)vdupq_n_s64(1uLL);
          v108 = v103;
          v109 = 0uLL;
          v110 = 0uLL;
          v111 = 0uLL;
          do
          {
            v112 = vceqq_s32(v104[-1], v106);
            v113.i64[0] = v112.u32[0];
            v113.i64[1] = v112.u32[1];
            v114 = (int64x2_t)vandq_s8(v113, v107);
            v113.i64[0] = v112.u32[2];
            v113.i64[1] = v112.u32[3];
            v115 = (int64x2_t)vandq_s8(v113, v107);
            v116 = vceqq_s32(*v104, v106);
            v113.i64[0] = v116.u32[0];
            v113.i64[1] = v116.u32[1];
            v117 = (int64x2_t)vandq_s8(v113, v107);
            v113.i64[0] = v116.u32[2];
            v113.i64[1] = v116.u32[3];
            v109 = vaddq_s64(v109, v115);
            v105 = vaddq_s64(v105, v114);
            v111 = vaddq_s64(v111, (int64x2_t)vandq_s8(v113, v107));
            v110 = vaddq_s64(v110, v117);
            v104 += 2;
            v108 -= 8;
          }
          while (v108);
          v100 = vaddvq_s64(vaddq_s64(vaddq_s64(v110, v105), vaddq_s64(v111, v109)));
          if (v102 == v103)
            goto LABEL_106;
        }
        else
        {
          v100 = 0;
          v101 = v98;
        }
        v118 = (int32x4_t *)((char *)v98 + 4 * v221);
        do
        {
          v119 = v101->i32[0];
          v101 = (int32x4_t *)((char *)v101 + 4);
          if (v119 == -1)
            ++v100;
        }
        while (v101 != v118);
LABEL_106:
        if (v100 >= 2)
        {
          v223 = "failed: unsupported dynamic dimensions";
          v227 = 259;
          v206[0] = (uint64_t *)&v223;
          v120 = (uint64_t)a3[2];
          if (v120 && mlir::RewriterBase::Listener::classof(v120))
            v78 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v120 + 64))(v120, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v206);
          else
            v78 = 0;
LABEL_188:
          if (__src != v222)
            free(__src);
          return v78;
        }
LABEL_110:
        v223 = (char *)&v225;
        HIDWORD(v224) = 3;
        v225 = 0x300000002;
        if (v70 == 4)
        {
          v121 = 2;
        }
        else
        {
          v226 = 4;
          v121 = 3;
        }
        LODWORD(v224) = v121;
        v206[0] = (uint64_t *)v121;
        IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v123 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v206, 1, IntegerType, 0);
        v124 = v123;
        v125 = *(_QWORD *)(a2 + 24);
        if (!v123)
          goto LABEL_122;
        v126 = *v123;
        v127 = mlir::TypeID::get<mlir::ShapedType>();
        v128 = *(unsigned int *)(v126 + 16);
        if (!(_DWORD)v128)
          goto LABEL_122;
        v129 = *(_QWORD **)(v126 + 8);
        v130 = &v129[2 * v128];
        do
        {
          v131 = v128 >> 1;
          v132 = &v129[2 * (v128 >> 1)];
          v134 = *v132;
          v133 = v132 + 2;
          v128 += ~(v128 >> 1);
          if (v134 < v127)
            v129 = v133;
          else
            v128 = v131;
        }
        while (v128);
        if (v129 != v130 && *v129 == v127)
          v135 = v129[1];
        else
LABEL_122:
          v135 = 0;
        v208 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v124, v135, v223, 4 * v224, 4, 1, 1);
        v206[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v125, &v208);
        v210 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), &v210, v206)- 16;
        if (v223 != (char *)&v225)
          free(v223);
        v136 = *(_QWORD *)(a2 + 24);
        LODWORD(v223) = 0;
        LODWORD(v206[0]) = 1;
        v211 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v136, (uint64_t *)&v211, (unsigned int *)&v223, (unsigned int *)v206)- 16);
        LODWORD(v208) = 1;
        v137 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v138 = (_QWORD *)mlir::RankedTensorType::get(0, 0, v137, 0);
        v139 = v138;
        v140 = *(_QWORD *)(a2 + 24);
        if (!v138)
          goto LABEL_134;
        v141 = *v138;
        v142 = mlir::TypeID::get<mlir::ShapedType>();
        v143 = *(unsigned int *)(v141 + 16);
        if (!(_DWORD)v143)
          goto LABEL_134;
        v144 = *(_QWORD **)(v141 + 8);
        v145 = &v144[2 * v143];
        do
        {
          v146 = v143 >> 1;
          v147 = &v144[2 * (v143 >> 1)];
          v149 = *v147;
          v148 = v147 + 2;
          v143 += ~(v143 >> 1);
          if (v149 < v142)
            v144 = v148;
          else
            v143 = v146;
        }
        while (v143);
        if (v144 != v145 && *v144 == v142)
          v150 = v144[1];
        else
LABEL_134:
          v150 = 0;
        v206[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v139, v150, &v208, 4, 4, 1, 1);
        v223 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v140, v206)- 16;
        v211 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v211, (uint64_t *)&v223)- 16);
        v151 = *(_QWORD *)(a2 + 24);
        LOBYTE(v223) = 0;
        v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v151, &v210, (uint64_t *)&v211, v214, (unsigned __int8 *)&v223)- 16);
        if (v216)
        {
          v207 = v215;
          Loc = mlir::Value::getLoc((mlir::Value *)&v207);
          v153 = (uint64_t *)(v207[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v153)
            goto LABEL_145;
          v154 = *v153;
          v155 = mlir::TypeID::get<mlir::ShapedType>();
          v156 = *(unsigned int *)(v154 + 16);
          if (!(_DWORD)v156)
            goto LABEL_145;
          v157 = *(_QWORD **)(v154 + 8);
          v158 = &v157[2 * v156];
          do
          {
            v159 = v156 >> 1;
            v160 = &v157[2 * (v156 >> 1)];
            v162 = *v160;
            v161 = v160 + 2;
            v156 += ~(v156 >> 1);
            if (v162 < v155)
              v157 = v161;
            else
              v156 = v159;
          }
          while (v156);
          if (v157 != v158 && *v157 == v155)
            v163 = (uint64_t *)v157[1];
          else
LABEL_145:
            v163 = 0;
          v206[0] = v153;
          v206[1] = v163;
          v223 = (char *)&v225;
          v225 = 0x1FFFFFFFFLL;
          v224 = 0x200000002;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v206))
          {
            v164 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v206);
            if (v165)
            {
              v166 = 8 * v165;
              while (*v164 != 0x8000000000000000)
              {
                ++v164;
                v166 -= 8;
                if (!v166)
                  goto LABEL_151;
              }
            }
            else
            {
LABEL_151:
              v167 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v206);
              NumElements = mlir::ShapedType::getNumElements(v167, v168);
              *(_DWORD *)v223 = NumElements;
            }
          }
          v205 = 2;
          v170 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
          v171 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v205, 1, v170, 0);
          v172 = v171;
          if (!v171)
            goto LABEL_161;
          v173 = *v171;
          v174 = mlir::TypeID::get<mlir::ShapedType>();
          v175 = *(unsigned int *)(v173 + 16);
          if (!(_DWORD)v175)
            goto LABEL_161;
          v176 = *(_QWORD **)(v173 + 8);
          v177 = &v176[2 * v175];
          do
          {
            v178 = v175 >> 1;
            v179 = &v176[2 * (v175 >> 1)];
            v181 = *v179;
            v180 = v179 + 2;
            v175 += ~(v175 >> 1);
            if (v181 < v174)
              v176 = v180;
            else
              v175 = v178;
          }
          while (v175);
          if (v176 != v177 && *v176 == v174)
            v182 = v176[1];
          else
LABEL_161:
            v182 = 0;
          v204 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v172, v182, v223, 4 * v224, 4, 1, 1);
          v205 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v204);
          v207 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v207, &v205)- 16);
          v204 = (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v208[1] & 0xFFFFFFFFFFFFFFF8));
          if (v204 != (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v207[1] & 0xFFFFFFFFFFFFFFF8)))
            v207 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v207, (uint64_t *)&v204)- 16);
          v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v208, (uint64_t *)&v207)- 16);
          if (v223 != (char *)&v225)
            free(v223);
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
        v223 = v183;
        v184 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v186 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v223, 1, v184, 0);
        v223 = (char *)&v225;
        v224 = 0x500000000;
        v187 = v221;
        if (!(_DWORD)v221)
        {
          v190 = &v225;
LABEL_175:
          *(_DWORD *)v190 = *((_DWORD *)v190 + 1);
          *((_DWORD *)v190 + 1) = v185;
          v191 = *(_QWORD *)(a2 + 24);
          if (!v186)
            goto LABEL_184;
          v192 = *v186;
          v193 = mlir::TypeID::get<mlir::ShapedType>();
          v194 = *(unsigned int *)(v192 + 16);
          if (!(_DWORD)v194)
            goto LABEL_184;
          v195 = *(_QWORD **)(v192 + 8);
          v196 = &v195[2 * v194];
          do
          {
            v197 = v194 >> 1;
            v198 = &v195[2 * (v194 >> 1)];
            v200 = *v198;
            v199 = v198 + 2;
            v194 += ~(v194 >> 1);
            if (v200 < v193)
              v195 = v199;
            else
              v194 = v197;
          }
          while (v194);
          if (v195 != v196 && *v195 == v193)
            v201 = v195[1];
          else
LABEL_184:
            v201 = 0;
          v78 = 1;
          v207 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v186, v201, v223, 4 * v224, 4, 1, 1);
          v206[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v191, &v207);
          v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v208, v206)- 16);
          if (v223 != (char *)&v225)
            free(v223);
          LODWORD(v223) = 0;
          LODWORD(v206[0]) = 1;
          v202 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v208, (unsigned int *)&v223, (unsigned int *)v206);
          (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v202);
          goto LABEL_188;
        }
        if (v221 < 6)
        {
          v189 = &v225;
          v188 = v221;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, &v225, v221, 4);
          v188 = v221;
          if (!(_DWORD)v221)
          {
LABEL_174:
            LODWORD(v224) = v187;
            v190 = (uint64_t *)v223;
            v185 = *(_DWORD *)v223;
            goto LABEL_175;
          }
          v189 = (uint64_t *)v223;
        }
        memcpy(v189, __src, 4 * v188);
        goto LABEL_174;
      }
    }
    v79 = (int8x16_t *)((char *)__src + 4 * v75);
    v80 = (v73 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v80 >= 7)
    {
      v83 = v80 + 1;
      v84 = (v80 + 1) & 0x3FFFFFFFFFFFFFF8;
      v81 = (uint64_t *)(v72 + 8 * v84);
      v82 = &v79->i32[v84];
      v85 = v79 + 1;
      v86 = (int32x4_t *)(v72 + 32);
      v87 = vdupq_n_s64(0x8000000000000000);
      v88 = v84;
      do
      {
        v89 = v86[-2];
        v90 = v86[-1];
        v91 = *v86;
        v92 = v86[1];
        v86 += 4;
        v85[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v89, v90), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v89, v87), (int32x4_t)vceqq_s64((int64x2_t)v90, v87)));
        *v85 = vorrq_s8((int8x16_t)vuzp1q_s32(v91, v92), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v91, v87), (int32x4_t)vceqq_s64((int64x2_t)v92, v87)));
        v85 += 2;
        v88 -= 8;
      }
      while (v88);
      if (v83 == v84)
      {
LABEL_92:
        v76 = v221;
        goto LABEL_93;
      }
    }
    else
    {
      v81 = (uint64_t *)v72;
      v82 = (int *)v79;
    }
    do
    {
      v94 = *v81++;
      v93 = v94;
      if (v94 == 0x8000000000000000)
        v93 = -1;
      *v82++ = v93;
    }
    while (v81 != (uint64_t *)(v72 + v74));
    goto LABEL_92;
  }
  v223 = "failed: pattern did not match";
  v227 = 259;
  __src = &v223;
  v77 = (uint64_t)a3[2];
  if (v77 && mlir::RewriterBase::Listener::classof(v77))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v77 + 64))(v77, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
  else
    return 0;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DOp &>(mlir::mps::Conv3DOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DDataGradientOp>::~CanonicalizeConvToMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DDataGradientOp>::~CanonicalizeConvToMatMul(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DDataGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Conv3DDataGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::Conv3DDataGradientOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t ElementTypeOrSelf;
  uint64_t v28;
  uint64_t v29;
  _QWORD *ArgAttrsAttr;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int PaddingStyle;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t *v79;
  unint64_t v80;
  uint64_t *v81;
  int *v82;
  unint64_t v83;
  uint64_t v84;
  int8x16_t *v85;
  int32x4_t *v86;
  int64x2_t v87;
  uint64_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int32x4_t *v98;
  unint64_t v99;
  unint64_t v100;
  int32x4_t *v101;
  unint64_t v102;
  uint64_t v103;
  int32x4_t *v104;
  int64x2_t v105;
  int32x4_t v106;
  int8x16_t v107;
  uint64_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int32x4_t v112;
  int8x16_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int32x4_t v116;
  int64x2_t v117;
  int32x4_t *v118;
  __int32 v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t IntegerType;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  unint64_t *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t *v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t Loc;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  int NumElements;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  unint64_t *v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  int v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t *v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  mlir::GenericProgramPoint *v202;
  uint64_t *v204;
  uint64_t v205;
  uint64_t *v206[2];
  uint64_t *v207;
  uint64_t *v208;
  _QWORD v209[2];
  uint64_t v210;
  uint64_t *v211;
  uint64_t *Strides;
  uint64_t v213;
  unsigned __int8 v214[8];
  uint64_t *v215;
  char v216;
  char v217;
  _QWORD *v218;
  uint64_t v219;
  void *__src;
  uint64_t v221;
  _BYTE v222[24];
  char *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  __int16 v227;
  uint64_t v228;

  v228 = *MEMORY[0x1E0C80C00];
  v209[0] = a2;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v5)
    goto LABEL_10;
  v6 = *v5;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_10:
    v15 = 0;
  __src = v5;
  v221 = v15;
  v16 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v16)
    goto LABEL_20;
  v17 = *v16;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if (!(_DWORD)v19)
    goto LABEL_20;
  v20 = *(_QWORD **)(v17 + 8);
  v21 = &v20[2 * v19];
  do
  {
    v22 = v19 >> 1;
    v23 = &v20[2 * (v19 >> 1)];
    v25 = *v23;
    v24 = v23 + 2;
    v19 += ~(v19 >> 1);
    if (v25 < v18)
      v20 = v24;
    else
      v19 = v22;
  }
  while (v19);
  if (v20 != v21 && *v20 == v18)
    v26 = v20[1];
  else
LABEL_20:
    v26 = 0;
  v218 = v16;
  v219 = v26;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v5);
  if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v16))
    goto LABEL_54;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src))
    goto LABEL_54;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v218) & 1) == 0)
    goto LABEL_54;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  v29 = v28;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
  v32 = v31;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v209) != 7
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v209) != 9
    || v29 != 5
    || v32 != 5
    || ArgAttrsAttr[2] != 1
    || ArgAttrsAttr[3] != 1
    || ArgAttrsAttr[4] != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v209) != (void *)1)
  {
    goto LABEL_54;
  }
  v223 = (char *)&v225;
  v224 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v209);
  v33 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v33, v34, (uint64_t)&v223, 1);
  v35 = (uint64_t *)v223;
  if ((_DWORD)v224)
  {
    v36 = 0;
    while (*(_QWORD *)&v223[v36] == 1)
    {
      v36 += 8;
      if (8 * v224 == v36)
        goto LABEL_36;
    }
    goto LABEL_200;
  }
LABEL_36:
  if (v223 != (char *)&v225)
    free(v223);
  v223 = (char *)&v225;
  v224 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v209);
  v37 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v37, v38, (uint64_t)&v223, 1);
  v35 = (uint64_t *)v223;
  if ((_DWORD)v224)
  {
    v39 = 0;
    while (*(_QWORD *)&v223[v39] == 1)
    {
      v39 += 8;
      if (8 * v224 == v39)
        goto LABEL_42;
    }
    goto LABEL_200;
  }
LABEL_42:
  if (v223 != (char *)&v225)
    free(v223);
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v209);
  if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
  {
LABEL_53:
    v44 = *(_QWORD *)(v209[0] + 72);
    v45 = *(uint64_t **)(v44 + 24);
    v46 = *(_QWORD *)(v44 + 56);
    Strides = v45;
    v213 = v46;
    v214[0] = 1;
    LOBYTE(v215) = 0;
    v216 = 0;
    v217 = 1;
    goto LABEL_55;
  }
  if (PaddingStyle)
  {
LABEL_54:
    LOBYTE(Strides) = 0;
    v217 = 0;
    goto LABEL_55;
  }
  v223 = (char *)&v225;
  v224 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v209);
  v41 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v41, v42, (uint64_t)&v223, 1);
  v35 = (uint64_t *)v223;
  if (!(_DWORD)v224)
  {
LABEL_51:
    if (v223 != (char *)&v225)
      free(v223);
    goto LABEL_53;
  }
  v43 = 0;
  while (!*(_QWORD *)&v223[v43])
  {
    v43 += 8;
    if (8 * v224 == v43)
      goto LABEL_51;
  }
LABEL_200:
  LOBYTE(Strides) = 0;
  v217 = 0;
  if (v35 != &v225)
    free(v35);
LABEL_55:
  if (v217)
  {
    v210 = v213;
    v211 = Strides;
    v47 = (_QWORD *)(Strides[1] & 0xFFFFFFFFFFFFFFF8);
    if (!v47)
      goto LABEL_65;
    v48 = *v47;
    v49 = mlir::TypeID::get<mlir::ShapedType>();
    v50 = *(unsigned int *)(v48 + 16);
    if (!(_DWORD)v50)
      goto LABEL_65;
    v51 = *(_QWORD **)(v48 + 8);
    v52 = &v51[2 * v50];
    do
    {
      v53 = v50 >> 1;
      v54 = &v51[2 * (v50 >> 1)];
      v56 = *v54;
      v55 = v54 + 2;
      v50 += ~(v50 >> 1);
      if (v56 < v49)
        v51 = v55;
      else
        v50 = v53;
    }
    while (v50);
    if (v51 != v52 && *v51 == v49)
      v57 = v51[1];
    else
LABEL_65:
      v57 = 0;
    v218 = v47;
    v219 = v57;
    v58 = (uint64_t *)(*(_QWORD *)(v210 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v58)
      goto LABEL_75;
    v59 = *v58;
    v60 = mlir::TypeID::get<mlir::ShapedType>();
    v61 = *(unsigned int *)(v59 + 16);
    if (!(_DWORD)v61)
      goto LABEL_75;
    v62 = *(_QWORD **)(v59 + 8);
    v63 = &v62[2 * v61];
    do
    {
      v64 = v61 >> 1;
      v65 = &v62[2 * (v61 >> 1)];
      v67 = *v65;
      v66 = v65 + 2;
      v61 += ~(v61 >> 1);
      if (v67 < v60)
        v62 = v66;
      else
        v61 = v64;
    }
    while (v61);
    if (v62 != v63 && *v62 == v60)
      v68 = v62[1];
    else
LABEL_75:
      v68 = 0;
    v209[0] = v58;
    v209[1] = v68;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
    v70 = v69;
    v72 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
    v73 = v71;
    v74 = 8 * v71;
    __src = v222;
    v221 = 0x500000000;
    if ((unint64_t)(8 * v71) < 0x29)
    {
      v75 = 0;
      v76 = 0;
      if (!v71)
        goto LABEL_93;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v222, (8 * v71) >> 3, 4);
      v75 = v221;
      v76 = v221;
      if (!v73)
      {
LABEL_93:
        LODWORD(v221) = v76 + (v74 >> 3);
        v95 = v214[0];
        v96 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v209) + 8 * v95);
        if (v96 == 0x8000000000000000)
          v97 = -1;
        else
          v97 = v96;
        v98 = (int32x4_t *)__src;
        *((_DWORD *)__src + 1) = v97;
        if (!(_DWORD)v221)
          goto LABEL_110;
        v99 = (v221 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v99 >= 7)
        {
          v102 = v99 + 1;
          v103 = (v99 + 1) & 0x7FFFFFFFFFFFFFF8;
          v101 = (int32x4_t *)((char *)v98 + 4 * v103);
          v104 = v98 + 1;
          v105 = 0uLL;
          v106.i64[0] = -1;
          v106.i64[1] = -1;
          v107 = (int8x16_t)vdupq_n_s64(1uLL);
          v108 = v103;
          v109 = 0uLL;
          v110 = 0uLL;
          v111 = 0uLL;
          do
          {
            v112 = vceqq_s32(v104[-1], v106);
            v113.i64[0] = v112.u32[0];
            v113.i64[1] = v112.u32[1];
            v114 = (int64x2_t)vandq_s8(v113, v107);
            v113.i64[0] = v112.u32[2];
            v113.i64[1] = v112.u32[3];
            v115 = (int64x2_t)vandq_s8(v113, v107);
            v116 = vceqq_s32(*v104, v106);
            v113.i64[0] = v116.u32[0];
            v113.i64[1] = v116.u32[1];
            v117 = (int64x2_t)vandq_s8(v113, v107);
            v113.i64[0] = v116.u32[2];
            v113.i64[1] = v116.u32[3];
            v109 = vaddq_s64(v109, v115);
            v105 = vaddq_s64(v105, v114);
            v111 = vaddq_s64(v111, (int64x2_t)vandq_s8(v113, v107));
            v110 = vaddq_s64(v110, v117);
            v104 += 2;
            v108 -= 8;
          }
          while (v108);
          v100 = vaddvq_s64(vaddq_s64(vaddq_s64(v110, v105), vaddq_s64(v111, v109)));
          if (v102 == v103)
            goto LABEL_106;
        }
        else
        {
          v100 = 0;
          v101 = v98;
        }
        v118 = (int32x4_t *)((char *)v98 + 4 * v221);
        do
        {
          v119 = v101->i32[0];
          v101 = (int32x4_t *)((char *)v101 + 4);
          if (v119 == -1)
            ++v100;
        }
        while (v101 != v118);
LABEL_106:
        if (v100 >= 2)
        {
          v223 = "failed: unsupported dynamic dimensions";
          v227 = 259;
          v206[0] = (uint64_t *)&v223;
          v120 = (uint64_t)a3[2];
          if (v120 && mlir::RewriterBase::Listener::classof(v120))
            v78 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v120 + 64))(v120, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v206);
          else
            v78 = 0;
LABEL_188:
          if (__src != v222)
            free(__src);
          return v78;
        }
LABEL_110:
        v223 = (char *)&v225;
        HIDWORD(v224) = 3;
        v225 = 0x300000002;
        if (v70 == 4)
        {
          v121 = 2;
        }
        else
        {
          v226 = 4;
          v121 = 3;
        }
        LODWORD(v224) = v121;
        v206[0] = (uint64_t *)v121;
        IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v123 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v206, 1, IntegerType, 0);
        v124 = v123;
        v125 = *(_QWORD *)(a2 + 24);
        if (!v123)
          goto LABEL_122;
        v126 = *v123;
        v127 = mlir::TypeID::get<mlir::ShapedType>();
        v128 = *(unsigned int *)(v126 + 16);
        if (!(_DWORD)v128)
          goto LABEL_122;
        v129 = *(_QWORD **)(v126 + 8);
        v130 = &v129[2 * v128];
        do
        {
          v131 = v128 >> 1;
          v132 = &v129[2 * (v128 >> 1)];
          v134 = *v132;
          v133 = v132 + 2;
          v128 += ~(v128 >> 1);
          if (v134 < v127)
            v129 = v133;
          else
            v128 = v131;
        }
        while (v128);
        if (v129 != v130 && *v129 == v127)
          v135 = v129[1];
        else
LABEL_122:
          v135 = 0;
        v208 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v124, v135, v223, 4 * v224, 4, 1, 1);
        v206[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v125, &v208);
        v210 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), &v210, v206)- 16;
        if (v223 != (char *)&v225)
          free(v223);
        v136 = *(_QWORD *)(a2 + 24);
        LODWORD(v223) = 0;
        LODWORD(v206[0]) = 1;
        v211 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v136, (uint64_t *)&v211, (unsigned int *)&v223, (unsigned int *)v206)- 16);
        LODWORD(v208) = 1;
        v137 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v138 = (_QWORD *)mlir::RankedTensorType::get(0, 0, v137, 0);
        v139 = v138;
        v140 = *(_QWORD *)(a2 + 24);
        if (!v138)
          goto LABEL_134;
        v141 = *v138;
        v142 = mlir::TypeID::get<mlir::ShapedType>();
        v143 = *(unsigned int *)(v141 + 16);
        if (!(_DWORD)v143)
          goto LABEL_134;
        v144 = *(_QWORD **)(v141 + 8);
        v145 = &v144[2 * v143];
        do
        {
          v146 = v143 >> 1;
          v147 = &v144[2 * (v143 >> 1)];
          v149 = *v147;
          v148 = v147 + 2;
          v143 += ~(v143 >> 1);
          if (v149 < v142)
            v144 = v148;
          else
            v143 = v146;
        }
        while (v143);
        if (v144 != v145 && *v144 == v142)
          v150 = v144[1];
        else
LABEL_134:
          v150 = 0;
        v206[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v139, v150, &v208, 4, 4, 1, 1);
        v223 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v140, v206)- 16;
        v211 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v211, (uint64_t *)&v223)- 16);
        v151 = *(_QWORD *)(a2 + 24);
        LOBYTE(v223) = 0;
        v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v151, &v210, (uint64_t *)&v211, v214, (unsigned __int8 *)&v223)- 16);
        if (v216)
        {
          v207 = v215;
          Loc = mlir::Value::getLoc((mlir::Value *)&v207);
          v153 = (uint64_t *)(v207[1] & 0xFFFFFFFFFFFFFFF8);
          if (!v153)
            goto LABEL_145;
          v154 = *v153;
          v155 = mlir::TypeID::get<mlir::ShapedType>();
          v156 = *(unsigned int *)(v154 + 16);
          if (!(_DWORD)v156)
            goto LABEL_145;
          v157 = *(_QWORD **)(v154 + 8);
          v158 = &v157[2 * v156];
          do
          {
            v159 = v156 >> 1;
            v160 = &v157[2 * (v156 >> 1)];
            v162 = *v160;
            v161 = v160 + 2;
            v156 += ~(v156 >> 1);
            if (v162 < v155)
              v157 = v161;
            else
              v156 = v159;
          }
          while (v156);
          if (v157 != v158 && *v157 == v155)
            v163 = (uint64_t *)v157[1];
          else
LABEL_145:
            v163 = 0;
          v206[0] = v153;
          v206[1] = v163;
          v223 = (char *)&v225;
          v225 = 0x1FFFFFFFFLL;
          v224 = 0x200000002;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v206))
          {
            v164 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v206);
            if (v165)
            {
              v166 = 8 * v165;
              while (*v164 != 0x8000000000000000)
              {
                ++v164;
                v166 -= 8;
                if (!v166)
                  goto LABEL_151;
              }
            }
            else
            {
LABEL_151:
              v167 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v206);
              NumElements = mlir::ShapedType::getNumElements(v167, v168);
              *(_DWORD *)v223 = NumElements;
            }
          }
          v205 = 2;
          v170 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
          v171 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v205, 1, v170, 0);
          v172 = v171;
          if (!v171)
            goto LABEL_161;
          v173 = *v171;
          v174 = mlir::TypeID::get<mlir::ShapedType>();
          v175 = *(unsigned int *)(v173 + 16);
          if (!(_DWORD)v175)
            goto LABEL_161;
          v176 = *(_QWORD **)(v173 + 8);
          v177 = &v176[2 * v175];
          do
          {
            v178 = v175 >> 1;
            v179 = &v176[2 * (v175 >> 1)];
            v181 = *v179;
            v180 = v179 + 2;
            v175 += ~(v175 >> 1);
            if (v181 < v174)
              v176 = v180;
            else
              v175 = v178;
          }
          while (v175);
          if (v176 != v177 && *v176 == v174)
            v182 = v176[1];
          else
LABEL_161:
            v182 = 0;
          v204 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v172, v182, v223, 4 * v224, 4, 1, 1);
          v205 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v204);
          v207 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v207, &v205)- 16);
          v204 = (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v208[1] & 0xFFFFFFFFFFFFFFF8));
          if (v204 != (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v207[1] & 0xFFFFFFFFFFFFFFF8)))
            v207 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v207, (uint64_t *)&v204)- 16);
          v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v208, (uint64_t *)&v207)- 16);
          if (v223 != (char *)&v225)
            free(v223);
        }
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v218);
        v223 = v183;
        v184 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
        v186 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v223, 1, v184, 0);
        v223 = (char *)&v225;
        v224 = 0x500000000;
        v187 = v221;
        if (!(_DWORD)v221)
        {
          v190 = &v225;
LABEL_175:
          *(_DWORD *)v190 = *((_DWORD *)v190 + 1);
          *((_DWORD *)v190 + 1) = v185;
          v191 = *(_QWORD *)(a2 + 24);
          if (!v186)
            goto LABEL_184;
          v192 = *v186;
          v193 = mlir::TypeID::get<mlir::ShapedType>();
          v194 = *(unsigned int *)(v192 + 16);
          if (!(_DWORD)v194)
            goto LABEL_184;
          v195 = *(_QWORD **)(v192 + 8);
          v196 = &v195[2 * v194];
          do
          {
            v197 = v194 >> 1;
            v198 = &v195[2 * (v194 >> 1)];
            v200 = *v198;
            v199 = v198 + 2;
            v194 += ~(v194 >> 1);
            if (v200 < v193)
              v195 = v199;
            else
              v194 = v197;
          }
          while (v194);
          if (v195 != v196 && *v195 == v193)
            v201 = v195[1];
          else
LABEL_184:
            v201 = 0;
          v78 = 1;
          v207 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v186, v201, v223, 4 * v224, 4, 1, 1);
          v206[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v191, &v207);
          v208 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v208, v206)- 16);
          if (v223 != (char *)&v225)
            free(v223);
          LODWORD(v223) = 0;
          LODWORD(v206[0]) = 1;
          v202 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v208, (unsigned int *)&v223, (unsigned int *)v206);
          (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v202);
          goto LABEL_188;
        }
        if (v221 < 6)
        {
          v189 = &v225;
          v188 = v221;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v223, &v225, v221, 4);
          v188 = v221;
          if (!(_DWORD)v221)
          {
LABEL_174:
            LODWORD(v224) = v187;
            v190 = (uint64_t *)v223;
            v185 = *(_DWORD *)v223;
            goto LABEL_175;
          }
          v189 = (uint64_t *)v223;
        }
        memcpy(v189, __src, 4 * v188);
        goto LABEL_174;
      }
    }
    v79 = (int8x16_t *)((char *)__src + 4 * v75);
    v80 = (v73 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v80 >= 7)
    {
      v83 = v80 + 1;
      v84 = (v80 + 1) & 0x3FFFFFFFFFFFFFF8;
      v81 = (uint64_t *)(v72 + 8 * v84);
      v82 = &v79->i32[v84];
      v85 = v79 + 1;
      v86 = (int32x4_t *)(v72 + 32);
      v87 = vdupq_n_s64(0x8000000000000000);
      v88 = v84;
      do
      {
        v89 = v86[-2];
        v90 = v86[-1];
        v91 = *v86;
        v92 = v86[1];
        v86 += 4;
        v85[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v89, v90), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v89, v87), (int32x4_t)vceqq_s64((int64x2_t)v90, v87)));
        *v85 = vorrq_s8((int8x16_t)vuzp1q_s32(v91, v92), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v91, v87), (int32x4_t)vceqq_s64((int64x2_t)v92, v87)));
        v85 += 2;
        v88 -= 8;
      }
      while (v88);
      if (v83 == v84)
      {
LABEL_92:
        v76 = v221;
        goto LABEL_93;
      }
    }
    else
    {
      v81 = (uint64_t *)v72;
      v82 = (int *)v79;
    }
    do
    {
      v94 = *v81++;
      v93 = v94;
      if (v94 == 0x8000000000000000)
        v93 = -1;
      *v82++ = v93;
    }
    while (v81 != (uint64_t *)(v72 + v74));
    goto LABEL_92;
  }
  v223 = "failed: pattern did not match";
  v227 = 259;
  __src = &v223;
  v77 = (uint64_t)a3[2];
  if (v77 && mlir::RewriterBase::Listener::classof(v77))
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v77 + 64))(v77, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
  else
    return 0;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::Conv3DDataGradientOp &>(mlir::mps::Conv3DDataGradientOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::BiasAddOp>::~CanonicalizeConvToMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::BiasAddOp>::~CanonicalizeConvToMatMul(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::BiasAddOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::BiasAddOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::BiasAddOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::BiasAddOp>::matchAndRewrite(uint64_t a1, uint64_t *a2, mlir::BoolAttr **a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t DefiningOp;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t ElementTypeOrSelf;
  uint64_t v33;
  uint64_t v34;
  uint64_t ArgAttrsAttr;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int PaddingStyle;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t *v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t Filter;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int v138;
  int8x16_t *v139;
  unint64_t v140;
  uint64_t *v141;
  int *v142;
  unint64_t v143;
  uint64_t v144;
  int8x16_t *v145;
  int32x4_t *v146;
  int64x2_t v147;
  uint64_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int32x4_t *v158;
  unint64_t v159;
  unint64_t v160;
  int32x4_t *v161;
  unint64_t v162;
  uint64_t v163;
  int32x4_t *v164;
  int64x2_t v165;
  int32x4_t v166;
  int8x16_t v167;
  uint64_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int32x4_t v172;
  int8x16_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int32x4_t v176;
  int64x2_t v177;
  int32x4_t *v178;
  __int32 v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t IntegerType;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  unint64_t v192;
  unint64_t *v193;
  _QWORD *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  unint64_t v207;
  unint64_t *v208;
  _QWORD *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t Loc;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t *v221;
  _QWORD *v222;
  unint64_t v223;
  uint64_t *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  int NumElements;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  unint64_t v239;
  unint64_t *v240;
  _QWORD *v241;
  unint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  int v246;
  uint64_t *v247;
  int v248;
  unsigned int v249;
  uint64_t *v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t *v259;
  _QWORD *v260;
  unint64_t v261;
  uint64_t v262;
  mlir::GenericProgramPoint *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t *v266[2];
  uint64_t *v267;
  uint64_t *v268;
  uint64_t *v269[2];
  _QWORD v270[2];
  uint64_t v271;
  _QWORD *v272;
  void *__src;
  uint64_t v274;
  _BYTE v275[24];
  void *Input;
  uint64_t v277;
  unsigned __int8 v278;
  _BYTE v279[7];
  uint64_t *v280;
  char v281;
  _BYTE v282[7];
  char v283;
  _BYTE v284[7];
  char *v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  __int16 v289;
  uint64_t v290;

  v290 = *MEMORY[0x1E0C80C00];
  v266[0] = a2;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v266))
    goto LABEL_2;
  Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v266);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (!DefiningOp)
    goto LABEL_67;
  v9 = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id)
    goto LABEL_67;
  v270[0] = DefiningOp;
  v10 = (char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(DefiningOp + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v10)
    goto LABEL_16;
  v11 = *(_QWORD *)v10;
  v12 = mlir::TypeID::get<mlir::ShapedType>();
  v13 = *(unsigned int *)(v11 + 16);
  if (!(_DWORD)v13)
    goto LABEL_16;
  v14 = *(_QWORD **)(v11 + 8);
  v15 = &v14[2 * v13];
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_16:
    v20 = 0;
  v285 = v10;
  v286 = v20;
  v21 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v21)
    goto LABEL_26;
  v22 = *v21;
  v23 = mlir::TypeID::get<mlir::ShapedType>();
  v24 = *(unsigned int *)(v22 + 16);
  if (!(_DWORD)v24)
    goto LABEL_26;
  v25 = *(_QWORD **)(v22 + 8);
  v26 = &v25[2 * v24];
  do
  {
    v27 = v24 >> 1;
    v28 = &v25[2 * (v24 >> 1)];
    v30 = *v28;
    v29 = v28 + 2;
    v24 += ~(v24 >> 1);
    if (v30 < v23)
      v25 = v29;
    else
      v24 = v27;
  }
  while (v24);
  if (v25 != v26 && *v25 == v23)
    v31 = v25[1];
  else
LABEL_26:
    v31 = 0;
  __src = v21;
  v274 = v31;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v10);
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf(v21))
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v285))
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v285);
        v34 = v33;
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
        if (*(_BYTE *)(a1 + 96))
        {
          v37 = ArgAttrsAttr;
          v38 = v36;
          if (!mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v270)
            && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v270) == 2
            && v34 == 4
            && v38 == 4
            && *(_QWORD *)(v37 + 16) == 1
            && *(_QWORD *)(v37 + 24) == 1
            && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v270) == (void *)1)
          {
            Input = &v278;
            v277 = 0x600000000;
            v269[0] = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v270);
            v39 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
            mlir::getIntValues<unsigned long long>((uint64_t)v39, v40, (uint64_t)&Input, 1);
            v41 = (unsigned __int8 *)Input;
            if ((_DWORD)v277)
            {
              v42 = 0;
              while (*(_QWORD *)((char *)Input + v42) == 1)
              {
                v42 += 8;
                if (8 * v277 == v42)
                  goto LABEL_42;
              }
              goto LABEL_64;
            }
LABEL_42:
            if (Input != &v278)
              free(Input);
            Input = &v278;
            v277 = 0x600000000;
            v269[0] = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v270);
            v43 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
            mlir::getIntValues<unsigned long long>((uint64_t)v43, v44, (uint64_t)&Input, 1);
            v41 = (unsigned __int8 *)Input;
            if ((_DWORD)v277)
            {
              v45 = 0;
              while (*(_QWORD *)((char *)Input + v45) == 1)
              {
                v45 += 8;
                if (8 * v277 == v45)
                  goto LABEL_48;
              }
              goto LABEL_64;
            }
LABEL_48:
            if (Input != &v278)
              free(Input);
            PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v270);
            if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
            {
LABEL_59:
              v50 = 0;
              v51 = *(_QWORD *)(v270[0] + 72);
              v52 = *(_QWORD **)(v51 + 24);
              v53 = *(_QWORD *)(v51 + 56);
              LODWORD(v272) = (_DWORD)v267;
              *(_DWORD *)((char *)&v272 + 3) = *(_DWORD *)((char *)&v267 + 3);
              LODWORD(v271) = v265;
              *(_DWORD *)((char *)&v271 + 3) = *(_DWORD *)((char *)&v265 + 3);
              goto LABEL_122;
            }
            if (!PaddingStyle)
            {
              Input = &v278;
              v277 = 0x600000000;
              v269[0] = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v270);
              v47 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
              mlir::getIntValues<unsigned long long>((uint64_t)v47, v48, (uint64_t)&Input, 1);
              v41 = (unsigned __int8 *)Input;
              if ((_DWORD)v277)
              {
                v49 = 0;
                while (!*(_QWORD *)((char *)Input + v49))
                {
                  v49 += 8;
                  if (8 * v277 == v49)
                    goto LABEL_57;
                }
LABEL_64:
                if (v41 != &v278)
                  free(v41);
                goto LABEL_66;
              }
LABEL_57:
              if (Input != &v278)
                free(Input);
              goto LABEL_59;
            }
          }
        }
      }
    }
  }
LABEL_66:
  LODWORD(v272) = (_DWORD)v267;
  *(_DWORD *)((char *)&v272 + 3) = *(_DWORD *)((char *)&v267 + 3);
  LODWORD(v271) = v265;
  *(_DWORD *)((char *)&v271 + 3) = *(_DWORD *)((char *)&v265 + 3);
LABEL_67:
  Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v266);
  v54 = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (!v54)
    goto LABEL_2;
  v55 = v54;
  if (*(_UNKNOWN **)(*(_QWORD *)(v54 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DDataGradientOp,void>::id)
    goto LABEL_2;
  v270[0] = v54;
  v56 = (char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v56)
    goto LABEL_78;
  v57 = *(_QWORD *)v56;
  v58 = mlir::TypeID::get<mlir::ShapedType>();
  v59 = *(unsigned int *)(v57 + 16);
  if (!(_DWORD)v59)
    goto LABEL_78;
  v60 = *(_QWORD **)(v57 + 8);
  v61 = &v60[2 * v59];
  do
  {
    v62 = v59 >> 1;
    v63 = &v60[2 * (v59 >> 1)];
    v65 = *v63;
    v64 = v63 + 2;
    v59 += ~(v59 >> 1);
    if (v65 < v58)
      v60 = v64;
    else
      v59 = v62;
  }
  while (v59);
  if (v60 != v61 && *v60 == v58)
    v66 = v60[1];
  else
LABEL_78:
    v66 = 0;
  v285 = v56;
  v286 = v66;
  v67 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v67)
    goto LABEL_88;
  v68 = *v67;
  v69 = mlir::TypeID::get<mlir::ShapedType>();
  v70 = *(unsigned int *)(v68 + 16);
  if (!(_DWORD)v70)
    goto LABEL_88;
  v71 = *(_QWORD **)(v68 + 8);
  v72 = &v71[2 * v70];
  do
  {
    v73 = v70 >> 1;
    v74 = &v71[2 * (v70 >> 1)];
    v76 = *v74;
    v75 = v74 + 2;
    v70 += ~(v70 >> 1);
    if (v76 < v69)
      v71 = v75;
    else
      v70 = v73;
  }
  while (v70);
  if (v71 != v72 && *v71 == v69)
    v77 = v71[1];
  else
LABEL_88:
    v77 = 0;
  __src = v67;
  v274 = v77;
  v78 = mlir::getElementTypeOrSelf(v56);
  if (v78 != mlir::getElementTypeOrSelf(v67))
    goto LABEL_2;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v285))
    goto LABEL_2;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__src))
    goto LABEL_2;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v285);
  v80 = v79;
  v81 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__src);
  if (!*(_BYTE *)(a1 + 96))
    goto LABEL_2;
  v83 = v81;
  v84 = v82;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v270)
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v270) != 2
    || v80 != 4
    || v84 != 4
    || *(_QWORD *)(v83 + 16) != 1
    || *(_QWORD *)(v83 + 24) != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v270) != (void *)1)
  {
    goto LABEL_2;
  }
  Input = &v278;
  v277 = 0x600000000;
  v269[0] = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v270);
  v85 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
  mlir::getIntValues<unsigned long long>((uint64_t)v85, v86, (uint64_t)&Input, 1);
  v87 = (unsigned __int8 *)Input;
  if ((_DWORD)v277)
  {
    v88 = 0;
    while (*(_QWORD *)((char *)Input + v88) == 1)
    {
      v88 += 8;
      if (8 * v277 == v88)
        goto LABEL_104;
    }
    goto LABEL_157;
  }
LABEL_104:
  if (Input != &v278)
    free(Input);
  Input = &v278;
  v277 = 0x600000000;
  v269[0] = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v270);
  v89 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
  mlir::getIntValues<unsigned long long>((uint64_t)v89, v90, (uint64_t)&Input, 1);
  v87 = (unsigned __int8 *)Input;
  if ((_DWORD)v277)
  {
    v91 = 0;
    while (*(_QWORD *)((char *)Input + v91) == 1)
    {
      v91 += 8;
      if (8 * v277 == v91)
        goto LABEL_110;
    }
    goto LABEL_157;
  }
LABEL_110:
  if (Input != &v278)
    free(Input);
  v92 = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v270);
  if ((v92 - 1) >= 2 && v92 != 4)
  {
    if (v92)
    {
LABEL_2:
      LOBYTE(Input) = 0;
      v283 = 0;
      v285 = "failed: pattern did not match";
      v289 = 259;
      __src = &v285;
      v6 = (uint64_t)a3[2];
      if (!v6)
        return 0;
      result = mlir::RewriterBase::Listener::classof(v6);
      if ((_DWORD)result)
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v6 + 64))(v6, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
      return result;
    }
    Input = &v278;
    v277 = 0x600000000;
    v269[0] = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v270);
    v93 = mlir::Attribute::cast<mlir::ElementsAttr>(v269);
    mlir::getIntValues<unsigned long long>((uint64_t)v93, v94, (uint64_t)&Input, 1);
    v87 = (unsigned __int8 *)Input;
    if ((_DWORD)v277)
    {
      v95 = 0;
      while (!*(_QWORD *)((char *)Input + v95))
      {
        v95 += 8;
        if (8 * v277 == v95)
          goto LABEL_119;
      }
LABEL_157:
      if (v87 != &v278)
        free(v87);
      goto LABEL_2;
    }
LABEL_119:
    if (Input != &v278)
      free(Input);
  }
  v96 = *(_QWORD *)(v270[0] + 72);
  v52 = *(_QWORD **)(v96 + 24);
  v53 = *(_QWORD *)(v96 + 56);
  LODWORD(v272) = (_DWORD)v267;
  *(_DWORD *)((char *)&v272 + 3) = *(_DWORD *)((char *)&v267 + 3);
  LODWORD(v271) = v265;
  *(_DWORD *)((char *)&v271 + 3) = *(_DWORD *)((char *)&v265 + 3);
  v50 = 1;
LABEL_122:
  v97 = (char *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)v266) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v97)
    goto LABEL_131;
  v98 = *(_QWORD *)v97;
  v99 = mlir::TypeID::get<mlir::ShapedType>();
  v100 = *(unsigned int *)(v98 + 16);
  if (!(_DWORD)v100)
    goto LABEL_131;
  v101 = *(_QWORD **)(v98 + 8);
  v102 = &v101[2 * v100];
  do
  {
    v103 = v100 >> 1;
    v104 = &v101[2 * (v100 >> 1)];
    v106 = *v104;
    v105 = v104 + 2;
    v100 += ~(v100 >> 1);
    if (v106 < v99)
      v101 = v105;
    else
      v100 = v103;
  }
  while (v100);
  if (v101 != v102 && *v101 == v99)
    v107 = v101[1];
  else
LABEL_131:
    v107 = 0;
  v285 = v97;
  v286 = v107;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v285) & 1) == 0)
    goto LABEL_2;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)v266);
  Input = v52;
  v277 = v53;
  v278 = v50;
  *(_DWORD *)v279 = (_DWORD)v272;
  *(_DWORD *)&v279[3] = *(_DWORD *)((char *)&v272 + 3);
  v280 = (uint64_t *)Filter;
  v281 = 1;
  *(_DWORD *)v282 = v271;
  *(_DWORD *)&v282[3] = *(_DWORD *)((char *)&v271 + 3);
  v283 = 1;
  *(_DWORD *)&v284[3] = *(_DWORD *)((char *)&v268 + 3);
  *(_DWORD *)v284 = (_DWORD)v268;
  v271 = v53;
  v272 = v52;
  v109 = (uint64_t *)(v52[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v109)
    goto LABEL_142;
  v110 = *v109;
  v111 = mlir::TypeID::get<mlir::ShapedType>();
  v112 = *(unsigned int *)(v110 + 16);
  if (!(_DWORD)v112)
    goto LABEL_142;
  v113 = *(_QWORD **)(v110 + 8);
  v114 = &v113[2 * v112];
  do
  {
    v115 = v112 >> 1;
    v116 = &v113[2 * (v112 >> 1)];
    v118 = *v116;
    v117 = v116 + 2;
    v112 += ~(v112 >> 1);
    if (v118 < v111)
      v113 = v117;
    else
      v112 = v115;
  }
  while (v112);
  if (v113 != v114 && *v113 == v111)
    v119 = v113[1];
  else
LABEL_142:
    v119 = 0;
  v270[0] = v109;
  v270[1] = v119;
  v120 = (uint64_t *)(*(_QWORD *)(v271 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v120)
    goto LABEL_152;
  v121 = *v120;
  v122 = mlir::TypeID::get<mlir::ShapedType>();
  v123 = *(unsigned int *)(v121 + 16);
  if (!(_DWORD)v123)
    goto LABEL_152;
  v124 = *(_QWORD **)(v121 + 8);
  v125 = &v124[2 * v123];
  do
  {
    v126 = v123 >> 1;
    v127 = &v124[2 * (v123 >> 1)];
    v129 = *v127;
    v128 = v127 + 2;
    v123 += ~(v123 >> 1);
    if (v129 < v122)
      v124 = v128;
    else
      v123 = v126;
  }
  while (v123);
  if (v124 != v125 && *v124 == v122)
    v130 = (uint64_t *)v124[1];
  else
LABEL_152:
    v130 = 0;
  v269[0] = v120;
  v269[1] = v130;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v270);
  v132 = v131;
  v134 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v270);
  v135 = v133;
  v136 = 8 * v133;
  __src = v275;
  v274 = 0x500000000;
  if ((unint64_t)(8 * v133) < 0x29)
  {
    v137 = 0;
    v138 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v275, (8 * v133) >> 3, 4);
    v137 = v274;
    v138 = v274;
  }
  if (v135)
  {
    v139 = (int8x16_t *)((char *)__src + 4 * v137);
    v140 = (v135 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v140 >= 7)
    {
      v143 = v140 + 1;
      v144 = (v140 + 1) & 0x3FFFFFFFFFFFFFF8;
      v141 = (uint64_t *)(v134 + 8 * v144);
      v142 = &v139->i32[v144];
      v145 = v139 + 1;
      v146 = (int32x4_t *)(v134 + 32);
      v147 = vdupq_n_s64(0x8000000000000000);
      v148 = v144;
      do
      {
        v149 = v146[-2];
        v150 = v146[-1];
        v151 = *v146;
        v152 = v146[1];
        v146 += 4;
        v145[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v149, v150), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v149, v147), (int32x4_t)vceqq_s64((int64x2_t)v150, v147)));
        *v145 = vorrq_s8((int8x16_t)vuzp1q_s32(v151, v152), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v151, v147), (int32x4_t)vceqq_s64((int64x2_t)v152, v147)));
        v145 += 2;
        v148 -= 8;
      }
      while (v148);
      if (v143 == v144)
      {
LABEL_169:
        v138 = v274;
        goto LABEL_170;
      }
    }
    else
    {
      v141 = (uint64_t *)v134;
      v142 = (int *)v139;
    }
    do
    {
      v154 = *v141++;
      v153 = v154;
      if (v154 == 0x8000000000000000)
        v153 = -1;
      *v142++ = v153;
    }
    while (v141 != (uint64_t *)(v134 + v136));
    goto LABEL_169;
  }
LABEL_170:
  LODWORD(v274) = v138 + (v136 >> 3);
  v155 = v278;
  v156 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v269) + 8 * v155);
  if (v156 == 0x8000000000000000)
    v157 = -1;
  else
    v157 = v156;
  v158 = (int32x4_t *)__src;
  *((_DWORD *)__src + 1) = v157;
  if (!(_DWORD)v274)
    goto LABEL_187;
  v159 = (v274 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v159 >= 7)
  {
    v162 = v159 + 1;
    v163 = (v159 + 1) & 0x7FFFFFFFFFFFFFF8;
    v161 = (int32x4_t *)((char *)v158 + 4 * v163);
    v164 = v158 + 1;
    v165 = 0uLL;
    v166.i64[0] = -1;
    v166.i64[1] = -1;
    v167 = (int8x16_t)vdupq_n_s64(1uLL);
    v168 = v163;
    v169 = 0uLL;
    v170 = 0uLL;
    v171 = 0uLL;
    do
    {
      v172 = vceqq_s32(v164[-1], v166);
      v173.i64[0] = v172.u32[0];
      v173.i64[1] = v172.u32[1];
      v174 = (int64x2_t)vandq_s8(v173, v167);
      v173.i64[0] = v172.u32[2];
      v173.i64[1] = v172.u32[3];
      v175 = (int64x2_t)vandq_s8(v173, v167);
      v176 = vceqq_s32(*v164, v166);
      v173.i64[0] = v176.u32[0];
      v173.i64[1] = v176.u32[1];
      v177 = (int64x2_t)vandq_s8(v173, v167);
      v173.i64[0] = v176.u32[2];
      v173.i64[1] = v176.u32[3];
      v169 = vaddq_s64(v169, v175);
      v165 = vaddq_s64(v165, v174);
      v171 = vaddq_s64(v171, (int64x2_t)vandq_s8(v173, v167));
      v170 = vaddq_s64(v170, v177);
      v164 += 2;
      v168 -= 8;
    }
    while (v168);
    v160 = vaddvq_s64(vaddq_s64(vaddq_s64(v170, v165), vaddq_s64(v171, v169)));
    if (v162 == v163)
      goto LABEL_183;
  }
  else
  {
    v160 = 0;
    v161 = v158;
  }
  v178 = (int32x4_t *)((char *)v158 + 4 * v274);
  do
  {
    v179 = v161->i32[0];
    v161 = (int32x4_t *)((char *)v161 + 4);
    if (v179 == -1)
      ++v160;
  }
  while (v161 != v178);
LABEL_183:
  if (v160 < 2)
  {
LABEL_187:
    v285 = (char *)&v287;
    HIDWORD(v286) = 3;
    v287 = 0x300000002;
    if (v132 == 4)
    {
      v182 = 2;
    }
    else
    {
      v288 = 4;
      v182 = 3;
    }
    LODWORD(v286) = v182;
    v266[0] = (uint64_t *)v182;
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    v184 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v266, 1, IntegerType, 0);
    v185 = v184;
    v186 = a2[3];
    if (!v184)
      goto LABEL_199;
    v187 = *v184;
    v188 = mlir::TypeID::get<mlir::ShapedType>();
    v189 = *(unsigned int *)(v187 + 16);
    if (!(_DWORD)v189)
      goto LABEL_199;
    v190 = *(_QWORD **)(v187 + 8);
    v191 = &v190[2 * v189];
    do
    {
      v192 = v189 >> 1;
      v193 = &v190[2 * (v189 >> 1)];
      v195 = *v193;
      v194 = v193 + 2;
      v189 += ~(v189 >> 1);
      if (v195 < v188)
        v190 = v194;
      else
        v189 = v192;
    }
    while (v189);
    if (v190 != v191 && *v190 == v188)
      v196 = v190[1];
    else
LABEL_199:
      v196 = 0;
    v268 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v185, v196, v285, 4 * v286, 4, 1, 1);
    v266[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v186, &v268);
    v271 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), a2[3], &v271, v266)- 16;
    if (v285 != (char *)&v287)
      free(v285);
    v197 = a2[3];
    LODWORD(v285) = 0;
    LODWORD(v266[0]) = 1;
    v272 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v197, (uint64_t *)&v272, (unsigned int *)&v285, (unsigned int *)v266)- 16);
    LODWORD(v268) = 1;
    v198 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    v199 = (_QWORD *)mlir::RankedTensorType::get(0, 0, v198, 0);
    v200 = v199;
    v201 = a2[3];
    if (!v199)
      goto LABEL_211;
    v202 = *v199;
    v203 = mlir::TypeID::get<mlir::ShapedType>();
    v204 = *(unsigned int *)(v202 + 16);
    if (!(_DWORD)v204)
      goto LABEL_211;
    v205 = *(_QWORD **)(v202 + 8);
    v206 = &v205[2 * v204];
    do
    {
      v207 = v204 >> 1;
      v208 = &v205[2 * (v204 >> 1)];
      v210 = *v208;
      v209 = v208 + 2;
      v204 += ~(v204 >> 1);
      if (v210 < v203)
        v205 = v209;
      else
        v204 = v207;
    }
    while (v204);
    if (v205 != v206 && *v205 == v203)
      v211 = v205[1];
    else
LABEL_211:
      v211 = 0;
    v266[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v200, v211, &v268, 4, 4, 1, 1);
    v285 = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v201, v266)- 16;
    v272 = (_QWORD *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), a2[3], (uint64_t *)&v272, (uint64_t *)&v285)- 16);
    v212 = a2[3];
    LOBYTE(v285) = 0;
    v268 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v212, &v271, (uint64_t *)&v272, &v278, (unsigned __int8 *)&v285)- 16);
    if (v281)
    {
      v267 = v280;
      Loc = mlir::Value::getLoc((mlir::Value *)&v267);
      v214 = (uint64_t *)(v267[1] & 0xFFFFFFFFFFFFFFF8);
      if (!v214)
        goto LABEL_222;
      v215 = *v214;
      v216 = mlir::TypeID::get<mlir::ShapedType>();
      v217 = *(unsigned int *)(v215 + 16);
      if (!(_DWORD)v217)
        goto LABEL_222;
      v218 = *(_QWORD **)(v215 + 8);
      v219 = &v218[2 * v217];
      do
      {
        v220 = v217 >> 1;
        v221 = &v218[2 * (v217 >> 1)];
        v223 = *v221;
        v222 = v221 + 2;
        v217 += ~(v217 >> 1);
        if (v223 < v216)
          v218 = v222;
        else
          v217 = v220;
      }
      while (v217);
      if (v218 != v219 && *v218 == v216)
        v224 = (uint64_t *)v218[1];
      else
LABEL_222:
        v224 = 0;
      v266[0] = v214;
      v266[1] = v224;
      v285 = (char *)&v287;
      v287 = 0x1FFFFFFFFLL;
      v286 = 0x200000002;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v266))
      {
        v225 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v266);
        if (v226)
        {
          v227 = 8 * v226;
          while (*v225 != 0x8000000000000000)
          {
            ++v225;
            v227 -= 8;
            if (!v227)
              goto LABEL_228;
          }
        }
        else
        {
LABEL_228:
          v228 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v266);
          NumElements = mlir::ShapedType::getNumElements(v228, v229);
          *(_DWORD *)v285 = NumElements;
        }
      }
      v265 = 2;
      v231 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
      v232 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v265, 1, v231, 0);
      v233 = v232;
      if (!v232)
        goto LABEL_238;
      v234 = *v232;
      v235 = mlir::TypeID::get<mlir::ShapedType>();
      v236 = *(unsigned int *)(v234 + 16);
      if (!(_DWORD)v236)
        goto LABEL_238;
      v237 = *(_QWORD **)(v234 + 8);
      v238 = &v237[2 * v236];
      do
      {
        v239 = v236 >> 1;
        v240 = &v237[2 * (v236 >> 1)];
        v242 = *v240;
        v241 = v240 + 2;
        v236 += ~(v236 >> 1);
        if (v242 < v235)
          v237 = v241;
        else
          v236 = v239;
      }
      while (v236);
      if (v237 != v238 && *v237 == v235)
        v243 = v237[1];
      else
LABEL_238:
        v243 = 0;
      v264 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v233, v243, v285, 4 * v286, 4, 1, 1);
      v265 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v264);
      v267 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v267, &v265)- 16);
      v264 = (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v268[1] & 0xFFFFFFFFFFFFFFF8));
      if (v264 != (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v267[1] & 0xFFFFFFFFFFFFFFF8)))
        v267 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v267, (uint64_t *)&v264)- 16);
      v268 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v268, (uint64_t *)&v267)- 16);
      if (v285 != (char *)&v287)
        free(v285);
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v270);
    v285 = v244;
    v245 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    v247 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&v285, 1, v245, 0);
    v285 = (char *)&v287;
    v286 = 0x500000000;
    v248 = v274;
    if (!(_DWORD)v274)
    {
      v251 = &v287;
LABEL_251:
      *(_DWORD *)v251 = *((_DWORD *)v251 + 1);
      *((_DWORD *)v251 + 1) = v246;
      v252 = a2[3];
      if (!v247)
        goto LABEL_260;
      v253 = *v247;
      v254 = mlir::TypeID::get<mlir::ShapedType>();
      v255 = *(unsigned int *)(v253 + 16);
      if (!(_DWORD)v255)
        goto LABEL_260;
      v256 = *(_QWORD **)(v253 + 8);
      v257 = &v256[2 * v255];
      do
      {
        v258 = v255 >> 1;
        v259 = &v256[2 * (v255 >> 1)];
        v261 = *v259;
        v260 = v259 + 2;
        v255 += ~(v255 >> 1);
        if (v261 < v254)
          v256 = v260;
        else
          v255 = v258;
      }
      while (v255);
      if (v256 != v257 && *v256 == v254)
        v262 = v256[1];
      else
LABEL_260:
        v262 = 0;
      v181 = 1;
      v267 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v247, v262, v285, 4 * v286, 4, 1, 1);
      v266[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v252, &v267);
      v268 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, a2[3], (uint64_t *)&v268, v266)- 16);
      if (v285 != (char *)&v287)
        free(v285);
      LODWORD(v285) = 0;
      LODWORD(v266[0]) = 1;
      v263 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), a2[3], (uint64_t *)&v268, (unsigned int *)&v285, (unsigned int *)v266);
      (*((void (**)(mlir::BoolAttr **, uint64_t *, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v263);
      goto LABEL_265;
    }
    if (v274 < 6)
    {
      v250 = &v287;
      v249 = v274;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v285, &v287, v274, 4);
      v249 = v274;
      if (!(_DWORD)v274)
      {
LABEL_250:
        LODWORD(v286) = v248;
        v251 = (uint64_t *)v285;
        v246 = *(_DWORD *)v285;
        goto LABEL_251;
      }
      v250 = (uint64_t *)v285;
    }
    memcpy(v250, __src, 4 * v249);
    goto LABEL_250;
  }
  v285 = "failed: unsupported dynamic dimensions";
  v289 = 259;
  v266[0] = (uint64_t *)&v285;
  v180 = (uint64_t)a3[2];
  if (v180 && mlir::RewriterBase::Listener::classof(v180))
    v181 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v180 + 64))(v180, a2[3], llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v266);
  else
    v181 = 0;
LABEL_265:
  if (__src != v275)
    free(__src);
  return v181;
}

uint64_t llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::BiasAddOp &>(mlir::mps::BiasAddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>(const void ****a1, uint64_t a2)
{
  return mlir::Diagnostic::operator<<(a2, *a1);
}

_QWORD *mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::AddOp>::~CanonicalizeConvToMatMul(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::AddOp>::~CanonicalizeConvToMatMul(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeConvToMatMul<mlir::mps::AddOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t ElementTypeOrSelf;
  uint64_t v30;
  uint64_t v31;
  uint64_t ArgAttrsAttr;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int PaddingStyle;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t *v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t *v144;
  _QWORD *v145;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t *v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  _QWORD *v201;
  unint64_t v202;
  unint64_t *v203;
  _QWORD *v204;
  unint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t *v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  int8x16_t *v226;
  unint64_t v227;
  uint64_t *v228;
  int *v229;
  unint64_t v230;
  uint64_t v231;
  int8x16_t *v232;
  int32x4_t *v233;
  int64x2_t v234;
  uint64_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  int32x4_t *v245;
  unint64_t v246;
  unint64_t v247;
  int32x4_t *v248;
  unint64_t v249;
  uint64_t v250;
  int32x4_t *v251;
  int64x2_t v252;
  int32x4_t v253;
  int8x16_t v254;
  uint64_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int32x4_t v259;
  int8x16_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int32x4_t v263;
  int64x2_t v264;
  int32x4_t *v265;
  __int32 v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t IntegerType;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  _QWORD *v276;
  _QWORD *v277;
  unint64_t v278;
  unint64_t *v279;
  _QWORD *v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  _QWORD *v291;
  _QWORD *v292;
  unint64_t v293;
  unint64_t *v294;
  _QWORD *v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t Loc;
  uint64_t *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  unint64_t v306;
  unint64_t *v307;
  _QWORD *v308;
  unint64_t v309;
  uint64_t *v310;
  _QWORD *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  int NumElements;
  uint64_t v317;
  _QWORD *v318;
  _QWORD *v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  _QWORD *v323;
  _QWORD *v324;
  unint64_t v325;
  unint64_t *v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t *v332;
  int v333;
  unsigned int v334;
  uint64_t *v335;
  int32x2_t *v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  _QWORD *v341;
  _QWORD *v342;
  unint64_t v343;
  unint64_t *v344;
  _QWORD *v345;
  unint64_t v346;
  uint64_t v347;
  mlir::GenericProgramPoint *v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t *v351[2];
  _BYTE v352[7];
  _BYTE v353[7];
  uint64_t *v354;
  uint64_t *v355;
  uint64_t v356;
  _BYTE v357[7];
  uint64_t *Strides;
  _QWORD *v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  void *__src;
  uint64_t v364;
  _QWORD v365[3];
  void *v366;
  uint64_t v367;
  unsigned __int8 v368;
  _BYTE v369[7];
  uint64_t *v370;
  char v371;
  _BYTE v372[7];
  char v373;
  _BYTE v374[7];
  char *p_src;
  uint64_t v376;
  uint64_t v377;
  int v378;
  __int16 v379;
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  v355 = 0;
  v356 = 0;
  v354 = 0;
  __src = &v356;
  v364 = (uint64_t)&v355;
  v365[0] = 0;
  p_src = (char *)&__src;
  v376 = (uint64_t)&v354;
  LOBYTE(v377) = 0;
  LOBYTE(v378) = 0;
  if (mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match((uint64_t *)&p_src, a2))
  {
    v6 = v365[0];
    v351[0] = (uint64_t *)v365[0];
    v7 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v365[0] + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v7)
      goto LABEL_11;
    v8 = *v7;
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *(unsigned int *)(v8 + 16);
    if (!(_DWORD)v10)
      goto LABEL_11;
    v11 = *(_QWORD **)(v8 + 8);
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      v17 = v11[1];
    else
LABEL_11:
      v17 = 0;
    v361 = v7;
    v362 = v17;
    v18 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v18)
      goto LABEL_21;
    v19 = *v18;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_21;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_21:
      v28 = 0;
    v359 = v18;
    v360 = v28;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v7);
    if (ElementTypeOrSelf == mlir::getElementTypeOrSelf(v18))
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v361))
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v359))
        {
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
          v31 = v30;
          ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359);
          if (*(_BYTE *)(a1 + 96))
          {
            v34 = ArgAttrsAttr;
            v35 = v33;
            if (!mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v351)
              && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v351) == 2
              && v31 == 4
              && v35 == 4
              && *(_QWORD *)(v34 + 16) == 1
              && *(_QWORD *)(v34 + 24) == 1
              && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v351) == (void *)1)
            {
              v366 = &v368;
              v367 = 0x600000000;
              Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v351);
              v36 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
              mlir::getIntValues<unsigned long long>((uint64_t)v36, v37, (uint64_t)&v366, 1);
              v38 = (unsigned __int8 *)v366;
              if ((_DWORD)v367)
              {
                v39 = 0;
                while (*(_QWORD *)((char *)v366 + v39) == 1)
                {
                  v39 += 8;
                  if (8 * v367 == v39)
                    goto LABEL_37;
                }
                goto LABEL_57;
              }
LABEL_37:
              if (v366 != &v368)
                free(v366);
              v366 = &v368;
              v367 = 0x600000000;
              Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v351);
              v40 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
              mlir::getIntValues<unsigned long long>((uint64_t)v40, v41, (uint64_t)&v366, 1);
              v38 = (unsigned __int8 *)v366;
              if ((_DWORD)v367)
              {
                v42 = 0;
                while (*(_QWORD *)((char *)v366 + v42) == 1)
                {
                  v42 += 8;
                  if (8 * v367 == v42)
                    goto LABEL_43;
                }
                goto LABEL_57;
              }
LABEL_43:
              if (v366 != &v368)
                free(v366);
              PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v351);
              if ((PaddingStyle - 1) < 2 || PaddingStyle == 4)
              {
LABEL_54:
                v47 = 0;
                v48 = v351[0][9];
                v49 = *(_QWORD **)(v48 + 24);
                v50 = *(_QWORD *)(v48 + 56);
                LODWORD(v350) = *(_DWORD *)v353;
                *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
                LODWORD(v349) = *(_DWORD *)v352;
                *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
                v51 = v354;
                v52 = -3;
                goto LABEL_233;
              }
              if (!PaddingStyle)
              {
                v366 = &v368;
                v367 = 0x600000000;
                Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v351);
                v44 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
                mlir::getIntValues<unsigned long long>((uint64_t)v44, v45, (uint64_t)&v366, 1);
                v38 = (unsigned __int8 *)v366;
                if ((_DWORD)v367)
                {
                  v46 = 0;
                  while (!*(_QWORD *)((char *)v366 + v46))
                  {
                    v46 += 8;
                    if (8 * v367 == v46)
                      goto LABEL_52;
                  }
LABEL_57:
                  if (v38 != &v368)
                    free(v38);
                  goto LABEL_59;
                }
LABEL_52:
                if (v366 != &v368)
                  free(v366);
                goto LABEL_54;
              }
            }
          }
        }
      }
    }
LABEL_59:
    LODWORD(v350) = *(_DWORD *)v353;
    *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
    LODWORD(v349) = *(_DWORD *)v352;
    *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
  }
  v355 = 0;
  v356 = 0;
  v354 = 0;
  __src = &v356;
  v364 = (uint64_t)&v355;
  v365[0] = 0;
  p_src = (char *)&__src;
  v376 = (uint64_t)&v354;
  LOBYTE(v377) = 0;
  LOBYTE(v378) = 0;
  if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match((uint64_t *)&p_src, a2))goto LABEL_119;
  v53 = v365[0];
  v351[0] = (uint64_t *)v365[0];
  v54 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v365[0] + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v54)
    goto LABEL_70;
  v55 = *v54;
  v56 = mlir::TypeID::get<mlir::ShapedType>();
  v57 = *(unsigned int *)(v55 + 16);
  if (!(_DWORD)v57)
    goto LABEL_70;
  v58 = *(_QWORD **)(v55 + 8);
  v59 = &v58[2 * v57];
  do
  {
    v60 = v57 >> 1;
    v61 = &v58[2 * (v57 >> 1)];
    v63 = *v61;
    v62 = v61 + 2;
    v57 += ~(v57 >> 1);
    if (v63 < v56)
      v58 = v62;
    else
      v57 = v60;
  }
  while (v57);
  if (v58 != v59 && *v58 == v56)
    v64 = v58[1];
  else
LABEL_70:
    v64 = 0;
  v361 = v54;
  v362 = v64;
  v65 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v65)
    goto LABEL_80;
  v66 = *v65;
  v67 = mlir::TypeID::get<mlir::ShapedType>();
  v68 = *(unsigned int *)(v66 + 16);
  if (!(_DWORD)v68)
    goto LABEL_80;
  v69 = *(_QWORD **)(v66 + 8);
  v70 = &v69[2 * v68];
  do
  {
    v71 = v68 >> 1;
    v72 = &v69[2 * (v68 >> 1)];
    v74 = *v72;
    v73 = v72 + 2;
    v68 += ~(v68 >> 1);
    if (v74 < v67)
      v69 = v73;
    else
      v68 = v71;
  }
  while (v68);
  if (v69 != v70 && *v69 == v67)
    v75 = v69[1];
  else
LABEL_80:
    v75 = 0;
  v359 = v65;
  v360 = v75;
  v76 = mlir::getElementTypeOrSelf(v54);
  if (v76 == mlir::getElementTypeOrSelf(v65))
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v361))
    {
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v359))
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
        v78 = v77;
        v79 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359);
        if (*(_BYTE *)(a1 + 96))
        {
          v81 = v79;
          v82 = v80;
          if (!mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v351)
            && mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v351) == 2
            && v78 == 4
            && v82 == 4
            && *(_QWORD *)(v81 + 16) == 1
            && *(_QWORD *)(v81 + 24) == 1
            && mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v351) == (void *)1)
          {
            v366 = &v368;
            v367 = 0x600000000;
            Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v351);
            v83 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
            mlir::getIntValues<unsigned long long>((uint64_t)v83, v84, (uint64_t)&v366, 1);
            v85 = (unsigned __int8 *)v366;
            if ((_DWORD)v367)
            {
              v86 = 0;
              while (*(_QWORD *)((char *)v366 + v86) == 1)
              {
                v86 += 8;
                if (8 * v367 == v86)
                  goto LABEL_96;
              }
              goto LABEL_116;
            }
LABEL_96:
            if (v366 != &v368)
              free(v366);
            v366 = &v368;
            v367 = 0x600000000;
            Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v351);
            v87 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
            mlir::getIntValues<unsigned long long>((uint64_t)v87, v88, (uint64_t)&v366, 1);
            v85 = (unsigned __int8 *)v366;
            if ((_DWORD)v367)
            {
              v89 = 0;
              while (*(_QWORD *)((char *)v366 + v89) == 1)
              {
                v89 += 8;
                if (8 * v367 == v89)
                  goto LABEL_102;
              }
              goto LABEL_116;
            }
LABEL_102:
            if (v366 != &v368)
              free(v366);
            v90 = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v351);
            if ((v90 - 1) < 2 || v90 == 4)
            {
LABEL_113:
              v94 = v351[0][9];
              v49 = *(_QWORD **)(v94 + 24);
              v50 = *(_QWORD *)(v94 + 56);
              LODWORD(v350) = *(_DWORD *)v353;
              *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
              LODWORD(v349) = *(_DWORD *)v352;
              *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
              v51 = v354;
              v47 = 1;
              v52 = -3;
              goto LABEL_233;
            }
            if (!v90)
            {
              v366 = &v368;
              v367 = 0x600000000;
              Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v351);
              v91 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
              mlir::getIntValues<unsigned long long>((uint64_t)v91, v92, (uint64_t)&v366, 1);
              v85 = (unsigned __int8 *)v366;
              if ((_DWORD)v367)
              {
                v93 = 0;
                while (!*(_QWORD *)((char *)v366 + v93))
                {
                  v93 += 8;
                  if (8 * v367 == v93)
                    goto LABEL_111;
                }
LABEL_116:
                if (v85 != &v368)
                  free(v85);
                goto LABEL_118;
              }
LABEL_111:
              if (v366 != &v368)
                free(v366);
              goto LABEL_113;
            }
          }
        }
      }
    }
  }
LABEL_118:
  LODWORD(v350) = *(_DWORD *)v353;
  *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
  LODWORD(v349) = *(_DWORD *)v352;
  *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
LABEL_119:
  v355 = 0;
  v356 = 0;
  v354 = 0;
  __src = &v356;
  v364 = (uint64_t)&v355;
  v365[0] = 0;
  p_src = (char *)&__src;
  v376 = (uint64_t)&v354;
  LOBYTE(v377) = 0;
  LOBYTE(v378) = 0;
  if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match((uint64_t *)&p_src, a2))goto LABEL_178;
  v95 = v365[0];
  v351[0] = (uint64_t *)v365[0];
  v96 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v365[0] + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v96)
    goto LABEL_129;
  v97 = *v96;
  v98 = mlir::TypeID::get<mlir::ShapedType>();
  v99 = *(unsigned int *)(v97 + 16);
  if (!(_DWORD)v99)
    goto LABEL_129;
  v100 = *(_QWORD **)(v97 + 8);
  v101 = &v100[2 * v99];
  do
  {
    v102 = v99 >> 1;
    v103 = &v100[2 * (v99 >> 1)];
    v105 = *v103;
    v104 = v103 + 2;
    v99 += ~(v99 >> 1);
    if (v105 < v98)
      v100 = v104;
    else
      v99 = v102;
  }
  while (v99);
  if (v100 != v101 && *v100 == v98)
    v106 = v100[1];
  else
LABEL_129:
    v106 = 0;
  v361 = v96;
  v362 = v106;
  v107 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v95 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v107)
    goto LABEL_139;
  v108 = *v107;
  v109 = mlir::TypeID::get<mlir::ShapedType>();
  v110 = *(unsigned int *)(v108 + 16);
  if (!(_DWORD)v110)
    goto LABEL_139;
  v111 = *(_QWORD **)(v108 + 8);
  v112 = &v111[2 * v110];
  do
  {
    v113 = v110 >> 1;
    v114 = &v111[2 * (v110 >> 1)];
    v116 = *v114;
    v115 = v114 + 2;
    v110 += ~(v110 >> 1);
    if (v116 < v109)
      v111 = v115;
    else
      v110 = v113;
  }
  while (v110);
  if (v111 != v112 && *v111 == v109)
    v117 = v111[1];
  else
LABEL_139:
    v117 = 0;
  v359 = v107;
  v360 = v117;
  v118 = mlir::getElementTypeOrSelf(v96);
  if (v118 != mlir::getElementTypeOrSelf(v107))
    goto LABEL_177;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v361))
    goto LABEL_177;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v359))
    goto LABEL_177;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
  v120 = v119;
  v121 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359);
  v123 = v122;
  if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v351) != 7
    || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v351) != 9
    || v120 != 5
    || v123 != 5
    || v121[2] != 1
    || v121[3] != 1
    || v121[4] != 1
    || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v351) != (void *)1)
  {
    goto LABEL_177;
  }
  v366 = &v368;
  v367 = 0x600000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v351);
  v124 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v124, v125, (uint64_t)&v366, 1);
  v126 = (unsigned __int8 *)v366;
  if ((_DWORD)v367)
  {
    v127 = 0;
    while (*(_QWORD *)((char *)v366 + v127) == 1)
    {
      v127 += 8;
      if (8 * v367 == v127)
        goto LABEL_155;
    }
    goto LABEL_175;
  }
LABEL_155:
  if (v366 != &v368)
    free(v366);
  v366 = &v368;
  v367 = 0x600000000;
  Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v351);
  v128 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
  mlir::getIntValues<unsigned long long>((uint64_t)v128, v129, (uint64_t)&v366, 1);
  v126 = (unsigned __int8 *)v366;
  if ((_DWORD)v367)
  {
    v130 = 0;
    while (*(_QWORD *)((char *)v366 + v130) == 1)
    {
      v130 += 8;
      if (8 * v367 == v130)
        goto LABEL_161;
    }
    goto LABEL_175;
  }
LABEL_161:
  if (v366 != &v368)
    free(v366);
  v131 = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v351);
  if ((v131 - 1) >= 2 && v131 != 4)
  {
    if (!v131)
    {
      v366 = &v368;
      v367 = 0x600000000;
      Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v351);
      v132 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
      mlir::getIntValues<unsigned long long>((uint64_t)v132, v133, (uint64_t)&v366, 1);
      v126 = (unsigned __int8 *)v366;
      if ((_DWORD)v367)
      {
        v134 = 0;
        while (!*(_QWORD *)((char *)v366 + v134))
        {
          v134 += 8;
          if (8 * v367 == v134)
            goto LABEL_170;
        }
LABEL_175:
        if (v126 != &v368)
          free(v126);
        goto LABEL_177;
      }
LABEL_170:
      if (v366 != &v368)
        free(v366);
      goto LABEL_172;
    }
LABEL_177:
    LODWORD(v350) = *(_DWORD *)v353;
    *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
    LODWORD(v349) = *(_DWORD *)v352;
    *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
LABEL_178:
    v355 = 0;
    v356 = 0;
    v354 = 0;
    __src = &v356;
    v364 = (uint64_t)&v355;
    v365[0] = 0;
    p_src = (char *)&__src;
    v376 = (uint64_t)&v354;
    LOBYTE(v377) = 0;
    LOBYTE(v378) = 0;
    if (!mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match((uint64_t *)&p_src, a2))goto LABEL_255;
    v136 = v365[0];
    v351[0] = (uint64_t *)v365[0];
    v137 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v365[0] + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v137)
      goto LABEL_188;
    v138 = *v137;
    v139 = mlir::TypeID::get<mlir::ShapedType>();
    v140 = *(unsigned int *)(v138 + 16);
    if (!(_DWORD)v140)
      goto LABEL_188;
    v141 = *(_QWORD **)(v138 + 8);
    v142 = &v141[2 * v140];
    do
    {
      v143 = v140 >> 1;
      v144 = &v141[2 * (v140 >> 1)];
      v146 = *v144;
      v145 = v144 + 2;
      v140 += ~(v140 >> 1);
      if (v146 < v139)
        v141 = v145;
      else
        v140 = v143;
    }
    while (v140);
    if (v141 != v142 && *v141 == v139)
      v147 = v141[1];
    else
LABEL_188:
      v147 = 0;
    v361 = v137;
    v362 = v147;
    v148 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v136 + 72) + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v148)
      goto LABEL_198;
    v149 = *v148;
    v150 = mlir::TypeID::get<mlir::ShapedType>();
    v151 = *(unsigned int *)(v149 + 16);
    if (!(_DWORD)v151)
      goto LABEL_198;
    v152 = *(_QWORD **)(v149 + 8);
    v153 = &v152[2 * v151];
    do
    {
      v154 = v151 >> 1;
      v155 = &v152[2 * (v151 >> 1)];
      v157 = *v155;
      v156 = v155 + 2;
      v151 += ~(v151 >> 1);
      if (v157 < v150)
        v152 = v156;
      else
        v151 = v154;
    }
    while (v151);
    if (v152 != v153 && *v152 == v150)
      v158 = v152[1];
    else
LABEL_198:
      v158 = 0;
    v359 = v148;
    v360 = v158;
    v159 = mlir::getElementTypeOrSelf(v137);
    if (v159 != mlir::getElementTypeOrSelf(v148))
      goto LABEL_255;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v361))
      goto LABEL_255;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v359))
      goto LABEL_255;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
    v161 = v160;
    v162 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359);
    v164 = v163;
    if (mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)v351) != 7
      || mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)v351) != 9
      || v161 != 5
      || v164 != 5
      || v162[2] != 1
      || v162[3] != 1
      || v162[4] != 1
      || mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)v351) != (void *)1)
    {
      goto LABEL_255;
    }
    v366 = &v368;
    v367 = 0x600000000;
    Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)v351);
    v165 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
    mlir::getIntValues<unsigned long long>((uint64_t)v165, v166, (uint64_t)&v366, 1);
    v167 = (unsigned __int8 *)v366;
    if ((_DWORD)v367)
    {
      v168 = 0;
      while (*(_QWORD *)((char *)v366 + v168) == 1)
      {
        v168 += 8;
        if (8 * v367 == v168)
          goto LABEL_214;
      }
      goto LABEL_253;
    }
LABEL_214:
    if (v366 != &v368)
      free(v366);
    v366 = &v368;
    v367 = 0x600000000;
    Strides = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)v351);
    v169 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
    mlir::getIntValues<unsigned long long>((uint64_t)v169, v170, (uint64_t)&v366, 1);
    v167 = (unsigned __int8 *)v366;
    if ((_DWORD)v367)
    {
      v171 = 0;
      while (*(_QWORD *)((char *)v366 + v171) == 1)
      {
        v171 += 8;
        if (8 * v367 == v171)
          goto LABEL_220;
      }
      goto LABEL_253;
    }
LABEL_220:
    if (v366 != &v368)
      free(v366);
    v172 = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)v351);
    if ((v172 - 1) >= 2 && v172 != 4)
    {
      if (v172)
      {
LABEL_255:
        LOBYTE(v366) = 0;
        v373 = 0;
        p_src = "failed: pattern did not match";
        v379 = 259;
        __src = &p_src;
        v193 = (uint64_t)a3[2];
        if (v193 && mlir::RewriterBase::Listener::classof(v193))
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), void **))(*(_QWORD *)v193 + 64))(v193, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, &__src);
        else
          return 0;
      }
      v366 = &v368;
      v367 = 0x600000000;
      Strides = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)v351);
      v173 = mlir::Attribute::cast<mlir::ElementsAttr>(&Strides);
      mlir::getIntValues<unsigned long long>((uint64_t)v173, v174, (uint64_t)&v366, 1);
      v167 = (unsigned __int8 *)v366;
      if ((_DWORD)v367)
      {
        v175 = 0;
        while (!*(_QWORD *)((char *)v366 + v175))
        {
          v175 += 8;
          if (8 * v367 == v175)
            goto LABEL_229;
        }
LABEL_253:
        if (v167 != &v368)
          free(v167);
        goto LABEL_255;
      }
LABEL_229:
      if (v366 != &v368)
        free(v366);
    }
    v176 = v351[0][9];
    v49 = *(_QWORD **)(v176 + 24);
    v50 = *(_QWORD *)(v176 + 56);
    LODWORD(v350) = *(_DWORD *)v353;
    *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
    LODWORD(v349) = *(_DWORD *)v352;
    *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
    v51 = v354;
    v47 = 1;
    goto LABEL_232;
  }
LABEL_172:
  v47 = 0;
  v135 = v351[0][9];
  v49 = *(_QWORD **)(v135 + 24);
  v50 = *(_QWORD *)(v135 + 56);
  LODWORD(v350) = *(_DWORD *)v353;
  *(_DWORD *)((char *)&v350 + 3) = *(_DWORD *)&v353[3];
  LODWORD(v349) = *(_DWORD *)v352;
  *(_DWORD *)((char *)&v349 + 3) = *(_DWORD *)&v352[3];
  v51 = v354;
LABEL_232:
  v52 = -4;
LABEL_233:
  v177 = (char *)(v51[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v177)
    goto LABEL_242;
  v178 = *(_QWORD *)v177;
  v179 = mlir::TypeID::get<mlir::ShapedType>();
  v180 = *(unsigned int *)(v178 + 16);
  if (!(_DWORD)v180)
    goto LABEL_242;
  v181 = *(_QWORD **)(v178 + 8);
  v182 = &v181[2 * v180];
  do
  {
    v183 = v180 >> 1;
    v184 = &v181[2 * (v180 >> 1)];
    v186 = *v184;
    v185 = v184 + 2;
    v180 += ~(v180 >> 1);
    if (v186 < v179)
      v181 = v185;
    else
      v180 = v183;
  }
  while (v180);
  if (v181 != v182 && *v181 == v179)
    v187 = v181[1];
  else
LABEL_242:
    v187 = 0;
  p_src = v177;
  v376 = v187;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&p_src) & 1) == 0)
    goto LABEL_255;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_src);
  v189 = v188 + v52;
  if (v189 < 0)
    goto LABEL_255;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_src);
  if (v190)
  {
    v191 = 0;
    while (v189 == v191
         || *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_src)
                      + 8 * v191) == 1)
    {
      ++v191;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&p_src);
      if (v191 == v192)
        goto LABEL_260;
    }
    goto LABEL_255;
  }
LABEL_260:
  v366 = v49;
  v367 = v50;
  v368 = v47;
  *(_DWORD *)v369 = v350;
  *(_DWORD *)&v369[3] = *(_DWORD *)((char *)&v350 + 3);
  v370 = v51;
  v371 = 1;
  *(_DWORD *)v372 = (_DWORD)v349;
  *(_DWORD *)&v372[3] = *(_DWORD *)((char *)&v349 + 3);
  v373 = 1;
  *(_DWORD *)&v374[3] = *(_DWORD *)&v357[3];
  *(_DWORD *)v374 = *(_DWORD *)v357;
  Strides = v49;
  v356 = v50;
  v196 = (_QWORD *)(v49[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v196)
    goto LABEL_269;
  v197 = *v196;
  v198 = mlir::TypeID::get<mlir::ShapedType>();
  v199 = *(unsigned int *)(v197 + 16);
  if (!(_DWORD)v199)
    goto LABEL_269;
  v200 = *(_QWORD **)(v197 + 8);
  v201 = &v200[2 * v199];
  do
  {
    v202 = v199 >> 1;
    v203 = &v200[2 * (v199 >> 1)];
    v205 = *v203;
    v204 = v203 + 2;
    v199 += ~(v199 >> 1);
    if (v205 < v198)
      v200 = v204;
    else
      v199 = v202;
  }
  while (v199);
  if (v200 != v201 && *v200 == v198)
    v206 = v200[1];
  else
LABEL_269:
    v206 = 0;
  v361 = v196;
  v362 = v206;
  v207 = (_QWORD *)(*(_QWORD *)(v356 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v207)
    goto LABEL_279;
  v208 = *v207;
  v209 = mlir::TypeID::get<mlir::ShapedType>();
  v210 = *(unsigned int *)(v208 + 16);
  if (!(_DWORD)v210)
    goto LABEL_279;
  v211 = *(_QWORD **)(v208 + 8);
  v212 = &v211[2 * v210];
  do
  {
    v213 = v210 >> 1;
    v214 = &v211[2 * (v210 >> 1)];
    v216 = *v214;
    v215 = v214 + 2;
    v210 += ~(v210 >> 1);
    if (v216 < v209)
      v211 = v215;
    else
      v210 = v213;
  }
  while (v210);
  if (v211 != v212 && *v211 == v209)
    v217 = v211[1];
  else
LABEL_279:
    v217 = 0;
  v359 = v207;
  v360 = v217;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
  v219 = v218;
  v221 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
  v222 = v220;
  v223 = 8 * v220;
  __src = v365;
  v364 = 0x500000000;
  if ((unint64_t)(8 * v220) < 0x29)
  {
    v224 = 0;
    v225 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v365, (8 * v220) >> 3, 4);
    v224 = v364;
    v225 = v364;
  }
  if (v222)
  {
    v226 = (int8x16_t *)((char *)__src + 4 * v224);
    v227 = (v222 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v227 >= 7)
    {
      v230 = v227 + 1;
      v231 = (v227 + 1) & 0x3FFFFFFFFFFFFFF8;
      v228 = (uint64_t *)(v221 + 8 * v231);
      v229 = &v226->i32[v231];
      v232 = v226 + 1;
      v233 = (int32x4_t *)(v221 + 32);
      v234 = vdupq_n_s64(0x8000000000000000);
      v235 = v231;
      do
      {
        v236 = v233[-2];
        v237 = v233[-1];
        v238 = *v233;
        v239 = v233[1];
        v233 += 4;
        v232[-1] = vorrq_s8((int8x16_t)vuzp1q_s32(v236, v237), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v236, v234), (int32x4_t)vceqq_s64((int64x2_t)v237, v234)));
        *v232 = vorrq_s8((int8x16_t)vuzp1q_s32(v238, v239), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)v238, v234), (int32x4_t)vceqq_s64((int64x2_t)v239, v234)));
        v232 += 2;
        v235 -= 8;
      }
      while (v235);
      if (v230 == v231)
      {
LABEL_293:
        v225 = v364;
        goto LABEL_294;
      }
    }
    else
    {
      v228 = (uint64_t *)v221;
      v229 = (int *)v226;
    }
    do
    {
      v241 = *v228++;
      v240 = v241;
      if (v241 == 0x8000000000000000)
        v240 = -1;
      *v229++ = v240;
    }
    while (v228 != (uint64_t *)(v221 + v223));
    goto LABEL_293;
  }
LABEL_294:
  LODWORD(v364) = v225 + (v223 >> 3);
  v242 = v368;
  v243 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v359) + 8 * v242);
  if (v243 == 0x8000000000000000)
    v244 = -1;
  else
    v244 = v243;
  v245 = (int32x4_t *)__src;
  *((_DWORD *)__src + 1) = v244;
  if (!(_DWORD)v364)
    goto LABEL_311;
  v246 = (v364 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v246 >= 7)
  {
    v249 = v246 + 1;
    v250 = (v246 + 1) & 0x7FFFFFFFFFFFFFF8;
    v248 = (int32x4_t *)((char *)v245 + 4 * v250);
    v251 = v245 + 1;
    v252 = 0uLL;
    v253.i64[0] = -1;
    v253.i64[1] = -1;
    v254 = (int8x16_t)vdupq_n_s64(1uLL);
    v255 = v250;
    v256 = 0uLL;
    v257 = 0uLL;
    v258 = 0uLL;
    do
    {
      v259 = vceqq_s32(v251[-1], v253);
      v260.i64[0] = v259.u32[0];
      v260.i64[1] = v259.u32[1];
      v261 = (int64x2_t)vandq_s8(v260, v254);
      v260.i64[0] = v259.u32[2];
      v260.i64[1] = v259.u32[3];
      v262 = (int64x2_t)vandq_s8(v260, v254);
      v263 = vceqq_s32(*v251, v253);
      v260.i64[0] = v263.u32[0];
      v260.i64[1] = v263.u32[1];
      v264 = (int64x2_t)vandq_s8(v260, v254);
      v260.i64[0] = v263.u32[2];
      v260.i64[1] = v263.u32[3];
      v256 = vaddq_s64(v256, v262);
      v252 = vaddq_s64(v252, v261);
      v258 = vaddq_s64(v258, (int64x2_t)vandq_s8(v260, v254));
      v257 = vaddq_s64(v257, v264);
      v251 += 2;
      v255 -= 8;
    }
    while (v255);
    v247 = vaddvq_s64(vaddq_s64(vaddq_s64(v257, v252), vaddq_s64(v258, v256)));
    if (v249 == v250)
      goto LABEL_307;
  }
  else
  {
    v247 = 0;
    v248 = v245;
  }
  v265 = (int32x4_t *)((char *)v245 + 4 * v364);
  do
  {
    v266 = v248->i32[0];
    v248 = (int32x4_t *)((char *)v248 + 4);
    if (v266 == -1)
      ++v247;
  }
  while (v248 != v265);
LABEL_307:
  if (v247 < 2)
  {
LABEL_311:
    p_src = (char *)&v377;
    HIDWORD(v376) = 3;
    v377 = 0x300000002;
    if (v219 == 4)
    {
      v268 = 2;
    }
    else
    {
      v378 = 4;
      v268 = 3;
    }
    LODWORD(v376) = v268;
    v351[0] = (uint64_t *)v268;
    IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    v270 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v351, 1, IntegerType, 0);
    v271 = v270;
    v272 = *(_QWORD *)(a2 + 24);
    if (!v270)
      goto LABEL_323;
    v273 = *v270;
    v274 = mlir::TypeID::get<mlir::ShapedType>();
    v275 = *(unsigned int *)(v273 + 16);
    if (!(_DWORD)v275)
      goto LABEL_323;
    v276 = *(_QWORD **)(v273 + 8);
    v277 = &v276[2 * v275];
    do
    {
      v278 = v275 >> 1;
      v279 = &v276[2 * (v275 >> 1)];
      v281 = *v279;
      v280 = v279 + 2;
      v275 += ~(v275 >> 1);
      if (v281 < v274)
        v276 = v280;
      else
        v275 = v278;
    }
    while (v275);
    if (v276 != v277 && *v276 == v274)
      v282 = v276[1];
    else
LABEL_323:
      v282 = 0;
    v355 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v271, v282, p_src, 4 * v376, 4, 1, 1);
    v351[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v272, &v355);
    v356 = (uint64_t)mlir::OpBuilder::create<mlir::mps::SqueezeOp,mlir::Value &,mlir::mps::ConstantOp &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), &v356, v351)- 16;
    if (p_src != (char *)&v377)
      free(p_src);
    v283 = *(_QWORD *)(a2 + 24);
    LODWORD(p_src) = 0;
    LODWORD(v351[0]) = 1;
    Strides = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), v283, (uint64_t *)&Strides, (unsigned int *)&p_src, (unsigned int *)v351)- 16);
    LODWORD(v355) = 1;
    v284 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    v285 = (_QWORD *)mlir::RankedTensorType::get(0, 0, v284, 0);
    v286 = v285;
    v287 = *(_QWORD *)(a2 + 24);
    if (!v285)
      goto LABEL_335;
    v288 = *v285;
    v289 = mlir::TypeID::get<mlir::ShapedType>();
    v290 = *(unsigned int *)(v288 + 16);
    if (!(_DWORD)v290)
      goto LABEL_335;
    v291 = *(_QWORD **)(v288 + 8);
    v292 = &v291[2 * v290];
    do
    {
      v293 = v290 >> 1;
      v294 = &v291[2 * (v290 >> 1)];
      v296 = *v294;
      v295 = v294 + 2;
      v290 += ~(v290 >> 1);
      if (v296 < v289)
        v291 = v295;
      else
        v290 = v293;
    }
    while (v290);
    if (v291 != v292 && *v291 == v289)
      v297 = v291[1];
    else
LABEL_335:
      v297 = 0;
    v351[0] = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v286, v297, &v355, 4, 4, 1, 1);
    p_src = (char *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v287, v351)- 16;
    Strides = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::Flatten2DOp,mlir::Value &,mlir::Value &>((mlir::OpBuilder *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&Strides, (uint64_t *)&p_src)- 16);
    v298 = *(_QWORD *)(a2 + 24);
    LOBYTE(p_src) = 0;
    v355 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::MatMulOp,mlir::Value,mlir::Value,BOOL,BOOL>(a3 + 1, v298, &v356, (uint64_t *)&Strides, &v368, (unsigned __int8 *)&p_src)- 16);
    if (v371)
    {
      v354 = v370;
      Loc = mlir::Value::getLoc((mlir::Value *)&v354);
      v300 = (uint64_t *)(v354[1] & 0xFFFFFFFFFFFFFFF8);
      if (!v300)
        goto LABEL_346;
      v301 = *v300;
      v302 = mlir::TypeID::get<mlir::ShapedType>();
      v303 = *(unsigned int *)(v301 + 16);
      if (!(_DWORD)v303)
        goto LABEL_346;
      v304 = *(_QWORD **)(v301 + 8);
      v305 = &v304[2 * v303];
      do
      {
        v306 = v303 >> 1;
        v307 = &v304[2 * (v303 >> 1)];
        v309 = *v307;
        v308 = v307 + 2;
        v303 += ~(v303 >> 1);
        if (v309 < v302)
          v304 = v308;
        else
          v303 = v306;
      }
      while (v303);
      if (v304 != v305 && *v304 == v302)
        v310 = (uint64_t *)v304[1];
      else
LABEL_346:
        v310 = 0;
      v351[0] = v300;
      v351[1] = v310;
      p_src = (char *)&v377;
      v377 = 0x1FFFFFFFFLL;
      v376 = 0x200000002;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v351))
      {
        v311 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v351);
        if (v312)
        {
          v313 = 8 * v312;
          while (*v311 != 0x8000000000000000)
          {
            ++v311;
            v313 -= 8;
            if (!v313)
              goto LABEL_352;
          }
        }
        else
        {
LABEL_352:
          v314 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v351);
          NumElements = mlir::ShapedType::getNumElements(v314, v315);
          *(_DWORD *)p_src = NumElements;
        }
      }
      v350 = 2;
      v317 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
      v318 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v350, 1, v317, 0);
      v319 = v318;
      if (!v318)
        goto LABEL_362;
      v320 = *v318;
      v321 = mlir::TypeID::get<mlir::ShapedType>();
      v322 = *(unsigned int *)(v320 + 16);
      if (!(_DWORD)v322)
        goto LABEL_362;
      v323 = *(_QWORD **)(v320 + 8);
      v324 = &v323[2 * v322];
      do
      {
        v325 = v322 >> 1;
        v326 = &v323[2 * (v322 >> 1)];
        v328 = *v326;
        v327 = v326 + 2;
        v322 += ~(v322 >> 1);
        if (v328 < v321)
          v323 = v327;
        else
          v322 = v325;
      }
      while (v322);
      if (v323 != v324 && *v323 == v321)
        v329 = v323[1];
      else
LABEL_362:
        v329 = 0;
      v349 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v319, v329, p_src, 4 * v376, 4, 1, 1);
      v350 = (uint64_t)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), Loc, &v349);
      v354 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, Loc, (uint64_t *)&v354, &v350)- 16);
      v349 = (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v355[1] & 0xFFFFFFFFFFFFFFF8));
      if (v349 != (uint64_t *)mlir::getElementTypeOrSelf((_QWORD *)(v354[1] & 0xFFFFFFFFFFFFFFF8)))
        v354 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, Loc, (uint64_t *)&v354, (uint64_t *)&v349)- 16);
      v355 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::AddOp,mlir::Value,mlir::Value&>(a3 + 1, Loc, (uint64_t *)&v355, (uint64_t *)&v354)- 16);
      if (p_src != (char *)&v377)
        free(p_src);
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
    p_src = v330;
    v331 = mlir::Builder::getIntegerType((mlir::Builder *)(a3 + 1), 0x20u, 1);
    v332 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)&p_src, 1, v331, 0);
    p_src = (char *)&v377;
    v376 = 0x500000000;
    v333 = v364;
    if (!(_DWORD)v364)
    {
      v336 = (int32x2_t *)&v377;
LABEL_376:
      *v336 = vrev64_s32(*v336);
      v337 = *(_QWORD *)(a2 + 24);
      if (!v332)
        goto LABEL_385;
      v338 = *v332;
      v339 = mlir::TypeID::get<mlir::ShapedType>();
      v340 = *(unsigned int *)(v338 + 16);
      if (!(_DWORD)v340)
        goto LABEL_385;
      v341 = *(_QWORD **)(v338 + 8);
      v342 = &v341[2 * v340];
      do
      {
        v343 = v340 >> 1;
        v344 = &v341[2 * (v340 >> 1)];
        v346 = *v344;
        v345 = v344 + 2;
        v340 += ~(v340 >> 1);
        if (v346 < v339)
          v341 = v345;
        else
          v340 = v343;
      }
      while (v340);
      if (v341 != v342 && *v341 == v339)
        v347 = v341[1];
      else
LABEL_385:
        v347 = 0;
      v194 = 1;
      v354 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v332, v347, p_src, 4 * v376, 4, 1, 1);
      v351[0] = (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::DenseIntElementsAttr>((mlir::OpBuilder *)(a3 + 1), v337, &v354);
      v355 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,mlir::mps::ConstantOp &>(a3 + 1, *(_QWORD *)(a2 + 24), (uint64_t *)&v355, v351)- 16);
      if (p_src != (char *)&v377)
        free(p_src);
      LODWORD(p_src) = 0;
      LODWORD(v351[0]) = 1;
      v348 = mlir::OpBuilder::create<mlir::mps::TransposeOp,mlir::Value &,int,int>((mlir::mps::ConstantOp *)(a3 + 1), *(_QWORD *)(a2 + 24), (uint64_t *)&v355, (unsigned int *)&p_src, (unsigned int *)v351);
      (*((void (**)(mlir::BoolAttr **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, a2, v348);
      goto LABEL_389;
    }
    if (v364 < 6)
    {
      v335 = &v377;
      v334 = v364;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_src, &v377, v364, 4);
      v334 = v364;
      if (!(_DWORD)v364)
      {
LABEL_375:
        LODWORD(v376) = v333;
        v336 = (int32x2_t *)p_src;
        goto LABEL_376;
      }
      v335 = (uint64_t *)p_src;
    }
    memcpy(v335, __src, 4 * v334);
    goto LABEL_375;
  }
  p_src = "failed: unsupported dynamic dimensions";
  v379 = 259;
  v351[0] = (uint64_t *)&p_src;
  v267 = (uint64_t)a3[2];
  if (v267 && mlir::RewriterBase::Listener::classof(v267))
    v194 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t (*)(const void ****, uint64_t), uint64_t **))(*(_QWORD *)v267 + 64))(v267, *(_QWORD *)(a2 + 24), llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::LogicalResult mlir::RewriterBase::notifyMatchFailure<mlir::mps::AddOp &>(mlir::mps::AddOp &,llvm::Twine const&)::{lambda(mlir::Diagnostic &)#1}>, v351);
  else
    v194 = 0;
LABEL_389:
  if (__src != v365)
    free(__src);
  return v194;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  int8x16_t v8;
  int8x16_t v9;
  unsigned __int8 v10;
  uint64_t v11;

  v11 = a2;
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id)
    return 0;
  v4 = 1;
  v10 = 1;
  v9 = *(int8x16_t *)a1;
  v8.i64[0] = (uint64_t)&v10;
  v8.i64[1] = (uint64_t)&v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)&v9, (uint64_t)&v8);
  if (v10)
    goto LABEL_5;
  v10 = 1;
  *(_QWORD *)a1[1] = 0;
  v5 = *a1;
  **(_QWORD **)*a1 = 0;
  **(_QWORD **)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v8 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v7[0] = &v10;
  v7[1] = &v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>((uint64_t **)&v8, (uint64_t)v7);
  v4 = v10;
  if (v10)
  {
LABEL_5:
    v6 = v11;
    if (!*((_BYTE *)a1 + 24))
      *((_BYTE *)a1 + 24) = 1;
    a1[2] = v6;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;

  v4 = *a1;
  v20 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    v7 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(v7 + 24);
    v9 = **v4;
    if (v9)
    {
      v10 = v9 == v8;
    }
    else
    {
      **v4 = v8;
      v7 = *(_QWORD *)(result + 72);
      v10 = 1;
    }
    v11 = v4[1];
    v12 = *(_QWORD *)(v7 + 56);
    if (*v11)
    {
      v13 = *v11 == v12;
    }
    else
    {
      *v11 = v12;
      v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      v6 = 1;
    }
    else
    {
LABEL_14:
      v6 = 0;
    }
  }
  v14 = *(_BYTE **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v6 & (**(_BYTE **)a2 != 0);
  if (!result)
    v16 = 0;
  *v14 = v16;
  v17 = a1[1];
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)v15 + 72) + 56);
  if (*v17)
  {
    v19 = *v17 == v18;
  }
  else
  {
    *v17 = v18;
    v14 = *(_BYTE **)a2;
    v16 = **(_BYTE **)a2 != 0;
    v19 = 1;
  }
  *v14 = v19 & v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t **v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t *v14;
  uint64_t v15;
  _BOOL4 v16;
  char v17;
  uint64_t v18;

  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = **a1;
  if (v5)
  {
    v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
    v6 = 1;
  }
  if (!**(_BYTE **)a2)
    v6 = 0;
  **(_BYTE **)a2 = v6;
  v7 = (uint64_t **)a1[1];
  v18 = *(_QWORD *)(v3 + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_19;
    }
    v10 = *(_QWORD *)(result + 72);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = **v7;
    if (v12)
    {
      v13 = v12 == v11;
    }
    else
    {
      **v7 = v11;
      v10 = *(_QWORD *)(result + 72);
      v13 = 1;
    }
    v14 = v7[1];
    v15 = *(_QWORD *)(v10 + 56);
    if (*v14)
    {
      v16 = *v14 == v15;
    }
    else
    {
      *v14 = v15;
      v16 = 1;
    }
    v9 = v13 && v16;
    if (v9 == 1)
      v7[2] = (uint64_t *)result;
    else
LABEL_19:
      LOBYTE(v9) = 0;
  }
  v17 = v9 & (**(_BYTE **)a2 != 0);
  if (!result)
    v17 = 0;
  **(_BYTE **)a2 = v17;
  return result;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  int8x16_t v8;
  int8x16_t v9;
  unsigned __int8 v10;
  uint64_t v11;

  v11 = a2;
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id)
    return 0;
  v4 = 1;
  v10 = 1;
  v9 = *(int8x16_t *)a1;
  v8.i64[0] = (uint64_t)&v10;
  v8.i64[1] = (uint64_t)&v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)&v9, (uint64_t)&v8);
  if (v10)
    goto LABEL_5;
  v10 = 1;
  *(_QWORD *)a1[1] = 0;
  v5 = *a1;
  **(_QWORD **)*a1 = 0;
  **(_QWORD **)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v8 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v7[0] = &v10;
  v7[1] = &v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>((uint64_t **)&v8, (uint64_t)v7);
  v4 = v10;
  if (v10)
  {
LABEL_5:
    v6 = v11;
    if (!*((_BYTE *)a1 + 24))
      *((_BYTE *)a1 + 24) = 1;
    a1[2] = v6;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;

  v4 = *a1;
  v20 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DDataGradientOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    v7 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(v7 + 24);
    v9 = **v4;
    if (v9)
    {
      v10 = v9 == v8;
    }
    else
    {
      **v4 = v8;
      v7 = *(_QWORD *)(result + 72);
      v10 = 1;
    }
    v11 = v4[1];
    v12 = *(_QWORD *)(v7 + 56);
    if (*v11)
    {
      v13 = *v11 == v12;
    }
    else
    {
      *v11 = v12;
      v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      v6 = 1;
    }
    else
    {
LABEL_14:
      v6 = 0;
    }
  }
  v14 = *(_BYTE **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v6 & (**(_BYTE **)a2 != 0);
  if (!result)
    v16 = 0;
  *v14 = v16;
  v17 = a1[1];
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)v15 + 72) + 56);
  if (*v17)
  {
    v19 = *v17 == v18;
  }
  else
  {
    *v17 = v18;
    v14 = *(_BYTE **)a2;
    v16 = **(_BYTE **)a2 != 0;
    v19 = 1;
  }
  *v14 = v19 & v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv2DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t **v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t *v14;
  uint64_t v15;
  _BOOL4 v16;
  char v17;
  uint64_t v18;

  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = **a1;
  if (v5)
  {
    v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
    v6 = 1;
  }
  if (!**(_BYTE **)a2)
    v6 = 0;
  **(_BYTE **)a2 = v6;
  v7 = (uint64_t **)a1[1];
  v18 = *(_QWORD *)(v3 + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DDataGradientOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_19;
    }
    v10 = *(_QWORD *)(result + 72);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = **v7;
    if (v12)
    {
      v13 = v12 == v11;
    }
    else
    {
      **v7 = v11;
      v10 = *(_QWORD *)(result + 72);
      v13 = 1;
    }
    v14 = v7[1];
    v15 = *(_QWORD *)(v10 + 56);
    if (*v14)
    {
      v16 = *v14 == v15;
    }
    else
    {
      *v14 = v15;
      v16 = 1;
    }
    v9 = v13 && v16;
    if (v9 == 1)
      v7[2] = (uint64_t *)result;
    else
LABEL_19:
      LOBYTE(v9) = 0;
  }
  v17 = v9 & (**(_BYTE **)a2 != 0);
  if (!result)
    v17 = 0;
  **(_BYTE **)a2 = v17;
  return result;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  int8x16_t v8;
  int8x16_t v9;
  unsigned __int8 v10;
  uint64_t v11;

  v11 = a2;
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id)
    return 0;
  v4 = 1;
  v10 = 1;
  v9 = *(int8x16_t *)a1;
  v8.i64[0] = (uint64_t)&v10;
  v8.i64[1] = (uint64_t)&v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)&v9, (uint64_t)&v8);
  if (v10)
    goto LABEL_5;
  v10 = 1;
  *(_QWORD *)a1[1] = 0;
  v5 = *a1;
  **(_QWORD **)*a1 = 0;
  **(_QWORD **)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v8 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v7[0] = &v10;
  v7[1] = &v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>((uint64_t **)&v8, (uint64_t)v7);
  v4 = v10;
  if (v10)
  {
LABEL_5:
    v6 = v11;
    if (!*((_BYTE *)a1 + 24))
      *((_BYTE *)a1 + 24) = 1;
    a1[2] = v6;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;

  v4 = *a1;
  v20 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv3DOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    v7 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(v7 + 24);
    v9 = **v4;
    if (v9)
    {
      v10 = v9 == v8;
    }
    else
    {
      **v4 = v8;
      v7 = *(_QWORD *)(result + 72);
      v10 = 1;
    }
    v11 = v4[1];
    v12 = *(_QWORD *)(v7 + 56);
    if (*v11)
    {
      v13 = *v11 == v12;
    }
    else
    {
      *v11 = v12;
      v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      v6 = 1;
    }
    else
    {
LABEL_14:
      v6 = 0;
    }
  }
  v14 = *(_BYTE **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v6 & (**(_BYTE **)a2 != 0);
  if (!result)
    v16 = 0;
  *v14 = v16;
  v17 = a1[1];
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)v15 + 72) + 56);
  if (*v17)
  {
    v19 = *v17 == v18;
  }
  else
  {
    *v17 = v18;
    v14 = *(_BYTE **)a2;
    v16 = **(_BYTE **)a2 != 0;
    v19 = 1;
  }
  *v14 = v19 & v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t **v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t *v14;
  uint64_t v15;
  _BOOL4 v16;
  char v17;
  uint64_t v18;

  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = **a1;
  if (v5)
  {
    v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
    v6 = 1;
  }
  if (!**(_BYTE **)a2)
    v6 = 0;
  **(_BYTE **)a2 = v6;
  v7 = (uint64_t **)a1[1];
  v18 = *(_QWORD *)(v3 + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv3DOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_19;
    }
    v10 = *(_QWORD *)(result + 72);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = **v7;
    if (v12)
    {
      v13 = v12 == v11;
    }
    else
    {
      **v7 = v11;
      v10 = *(_QWORD *)(result + 72);
      v13 = 1;
    }
    v14 = v7[1];
    v15 = *(_QWORD *)(v10 + 56);
    if (*v14)
    {
      v16 = *v14 == v15;
    }
    else
    {
      *v14 = v15;
      v16 = 1;
    }
    v9 = v13 && v16;
    if (v9 == 1)
      v7[2] = (uint64_t *)result;
    else
LABEL_19:
      LOBYTE(v9) = 0;
  }
  v17 = v9 & (**(_BYTE **)a2 != 0);
  if (!result)
    v17 = 0;
  **(_BYTE **)a2 = v17;
  return result;
}

BOOL mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  int8x16_t v8;
  int8x16_t v9;
  unsigned __int8 v10;
  uint64_t v11;

  v11 = a2;
  if (*(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::AddOp,void>::id)
    return 0;
  v4 = 1;
  v10 = 1;
  v9 = *(int8x16_t *)a1;
  v8.i64[0] = (uint64_t)&v10;
  v8.i64[1] = (uint64_t)&v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>((uint64_t ***)&v9, (uint64_t)&v8);
  if (v10)
    goto LABEL_5;
  v10 = 1;
  *(_QWORD *)a1[1] = 0;
  v5 = *a1;
  **(_QWORD **)*a1 = 0;
  **(_QWORD **)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v8 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  v7[0] = &v10;
  v7[1] = &v11;
  mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>((uint64_t **)&v8, (uint64_t)v7);
  v4 = v10;
  if (v10)
  {
LABEL_5:
    v6 = v11;
    if (!*((_BYTE *)a1 + 24))
      *((_BYTE *)a1 + 24) = 1;
    a1[2] = v6;
  }
  return v4 != 0;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *,mlir::detail::any_value_binder*> & *)#1},0ul,1ul>(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  uint64_t **v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t v20;

  v4 = *a1;
  v20 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 72) + 24);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v20);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv3DDataGradientOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_14;
    }
    v7 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(v7 + 24);
    v9 = **v4;
    if (v9)
    {
      v10 = v9 == v8;
    }
    else
    {
      **v4 = v8;
      v7 = *(_QWORD *)(result + 72);
      v10 = 1;
    }
    v11 = v4[1];
    v12 = *(_QWORD *)(v7 + 56);
    if (*v11)
    {
      v13 = *v11 == v12;
    }
    else
    {
      *v11 = v12;
      v13 = 1;
    }
    if (v10 && v13)
    {
      v4[2] = (uint64_t *)result;
      v6 = 1;
    }
    else
    {
LABEL_14:
      v6 = 0;
    }
  }
  v14 = *(_BYTE **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v16 = v6 & (**(_BYTE **)a2 != 0);
  if (!result)
    v16 = 0;
  *v14 = v16;
  v17 = a1[1];
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)v15 + 72) + 56);
  if (*v17)
  {
    v19 = *v17 == v18;
  }
  else
  {
    *v17 = v18;
    v14 = *(_BYTE **)a2;
    v16 = **(_BYTE **)a2 != 0;
    v19 = 1;
  }
  *v14 = v19 & v16;
  return result;
}

uint64_t mlir::detail::enumerateImpl<std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> &,mlir::detail::RecursivePatternMatcherBinaryCommutative<mlir::mps::AddOp,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder>,mlir::detail::any_value_binder>::match(mlir::Operation *)::{lambda(unsigned long,std::tuple<mlir::detail::any_value_binder *,mlir::detail::RecursivePatternMatcherBinder<mlir::mps::Conv3DDataGradientOp,mlir::detail::any_value_binder,mlir::detail::any_value_binder> *> & *)#2},0ul,1ul>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t **v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t *v14;
  uint64_t v15;
  _BOOL4 v16;
  char v17;
  uint64_t v18;

  v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = **a1;
  if (v5)
  {
    v6 = v5 == v4;
  }
  else
  {
    **a1 = v4;
    v3 = *(_QWORD *)(**(_QWORD **)(a2 + 8) + 72);
    v6 = 1;
  }
  if (!**(_BYTE **)a2)
    v6 = 0;
  **(_BYTE **)a2 = v6;
  v7 = (uint64_t **)a1[1];
  v18 = *(_QWORD *)(v3 + 56);
  result = mlir::Value::getDefiningOp((mlir::Value *)&v18);
  if (result)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(result + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mps::Conv3DDataGradientOp,void>::id
      || (*(_BYTE *)(result + 46) & 0x80) == 0
      || *(_DWORD *)(result + 68) != 2)
    {
      goto LABEL_19;
    }
    v10 = *(_QWORD *)(result + 72);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = **v7;
    if (v12)
    {
      v13 = v12 == v11;
    }
    else
    {
      **v7 = v11;
      v10 = *(_QWORD *)(result + 72);
      v13 = 1;
    }
    v14 = v7[1];
    v15 = *(_QWORD *)(v10 + 56);
    if (*v14)
    {
      v16 = *v14 == v15;
    }
    else
    {
      *v14 = v15;
      v16 = 1;
    }
    v9 = v13 && v16;
    if (v9 == 1)
      v7[2] = (uint64_t *)result;
    else
LABEL_19:
      LOBYTE(v9) = 0;
  }
  v17 = v9 & (**(_BYTE **)a2 != 0);
  if (!result)
    v17 = 0;
  **(_BYTE **)a2 = v17;
  return result;
}

void mlir::mps::StitchingPass::runOnRegionForOp(mlir::mps::BaseFusableCoreOps **this, mlir::Operation *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t i;
  uint64_t v9;
  mlir::GenericProgramPoint **v10;
  mlir::GenericProgramPoint **v11;
  mlir::mps::_anonymous_namespace_ *v12;
  mlir::mps::_anonymous_namespace_ *v13;
  mlir::Operation *v14;
  mlir::Block *ParentOp;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  mlir::mps::_anonymous_namespace_ *DefiningOp;
  mlir::Operation *v20;
  mlir::GenericProgramPoint ***v21;
  uint64_t v22;
  uint64_t v23;
  mlir::GenericProgramPoint *v24;
  mlir::mps::_anonymous_namespace_ *v25;
  mlir::mps::_anonymous_namespace_ *v26;
  mlir::Operation *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  mlir::Operation *v33;
  uint64_t v34;
  uint64_t v35;
  mlir::GenericProgramPoint *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  _OWORD v44[2];
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;

  v43[0] = mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  memset(&v43[1], 0, 24);
  v41 = *((_DWORD *)a2 + 11) & 0x7FFFFF;
  if ((_DWORD)v41)
  {
    v4 = 0;
    do
    {
      v5 = *((unsigned int *)a2 + 11);
      if ((v5 & 0x7FFFFF) != 0)
        v6 = (((unint64_t)a2 + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
           + 32 * *((unsigned int *)a2 + 10);
      else
        v6 = 0;
      v42 = v4;
      v7 = v6 + 24 * v4;
      for (i = *(_QWORD *)(v7 + 8); i != v7; i = *(_QWORD *)(i + 8))
      {
        v9 = i - 8;
        if (!i)
          v9 = 0;
        v10 = (mlir::GenericProgramPoint **)(v9 + 32);
        v11 = *(mlir::GenericProgramPoint ***)(v9 + 40);
        while (v11 != v10)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v11);
          v13 = v12;
            goto LABEL_14;
          ParentOp = (mlir::Block *)*((_QWORD *)v13 + 2);
          if (ParentOp)
            ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          if (ParentOp != a2)
            goto LABEL_14;
          v16 = *((_DWORD *)v13 + 11);
          if ((v16 & 0x7FFFFF) != 0
            && *(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
          {
            mlir::mps::StitchingPass::runOnRegionForOp((mlir::mps::StitchingPass *)this, v13);
            v16 = *((_DWORD *)v13 + 11);
          }
          if ((v16 & 0x800000) != 0 && (v17 = *((unsigned int *)v13 + 17), (_DWORD)v17))
          {
            v18 = (_QWORD *)(*((_QWORD *)v13 + 9) + 24);
            while (1)
            {
              *(_QWORD *)&v46[0] = *v18;
              DefiningOp = (mlir::mps::_anonymous_namespace_ *)mlir::Value::getDefiningOp((mlir::Value *)v46);
              if (DefiningOp)
              {
                  break;
              }
              v18 += 4;
              if (!--v17)
                goto LABEL_43;
            }
LABEL_29:
            v21 = (mlir::GenericProgramPoint ***)v11[1];
            v22 = *(_QWORD *)(v7 + 8);
            if (v22)
              v23 = v22 - 8;
            else
              v23 = 0;
            if (v21 == (mlir::GenericProgramPoint ***)(v23 + 32))
            {
LABEL_39:
              v26 = 0;
            }
            else
            {
              v24 = v11[1];
              while (1)
              {
                mlir::GenericProgramPoint::~GenericProgramPoint(v24);
                v26 = v25;
                  break;
                v24 = (mlir::GenericProgramPoint *)*((_QWORD *)v24 + 1);
                v28 = *(_QWORD *)(v7 + 8);
                if (v28)
                  v29 = v28 - 8;
                else
                  v29 = 0;
                if (v24 == (mlir::GenericProgramPoint *)(v29 + 32))
                  goto LABEL_39;
              }
            }
            v30 = mlir::mps::BaseFusableCoreOps::fuseCoreOps(this[43], (mlir::mps::StitchingPass *)this, v13, (mlir::OpBuilder *)v43);
            if (!v30)
            {
              v11 = *v21;
              goto LABEL_14;
            }
            if (v26)
              v11 = *(mlir::GenericProgramPoint ***)(*(_QWORD *)v26 + 8);
            else
              v11 = *(mlir::GenericProgramPoint ***)(v30 + 8);
          }
          else
          {
LABEL_43:
            v31 = *((unsigned int *)v13 + 9);
            v32 = (char *)v13 - 16;
            if (!(_DWORD)v31)
              v32 = 0;
            *(_QWORD *)&v44[0] = v32;
            *((_QWORD *)&v44[0] + 1) = v31;
            mlir::ResultRange::getUses((uint64_t *)v44, (uint64_t *)v46);
            v34 = v47;
            v35 = v48;
            v45 = v47;
            v44[0] = v46[0];
            v44[1] = v46[1];
            if (v47 != v48)
            {
              {
                mlir::ResultRange::UseIterator::operator++((uint64_t *)v44);
                v34 = v45;
                if (v45 == v35)
                  goto LABEL_14;
              }
              goto LABEL_29;
            }
LABEL_14:
            v11 = (mlir::GenericProgramPoint **)v11[1];
          }
        }
        v36 = *v10;
        while (v36 != (mlir::GenericProgramPoint *)v10)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v36);
          v38 = v37;
          v36 = *(mlir::GenericProgramPoint **)v36;
          v39 = mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>>();
          if (((*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(v38 + 48) + 32))(*(_QWORD *)(v38 + 48), v39) & 1) == 0
            && !mlir::OpInterface<mlir::MemoryEffectOpInterface,mlir::detail::MemoryEffectOpInterfaceInterfaceTraits>::getInterfaceFor(v38))
          {
            v40 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
            if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v38 + 48) + 32))(*(_QWORD *)(v38 + 48), v40) & 1) == 0&& *(_DWORD *)(v38 + 36)&& !*(_QWORD *)(v38 - 16))
            {
              mlir::Operation::erase((mlir::Operation *)v38);
            }
          }
        }
      }
      v4 = v42 + 1;
    }
    while (v42 + 1 != v41);
  }
}

uint64_t mlir::mps::`anonymous namespace'::isStitchable(mlir::mps::_anonymous_namespace_ *this, mlir::Operation *a2, mlir::Operation *a3)
{
  __guard v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _BOOL8 v11;
  mlir::mps::_anonymous_namespace_ *v12;
  uint64_t DefiningOp;
  uint64_t v14;
  uint64_t v15;
  mlir::mps::_anonymous_namespace_ *v16;
  mlir::Operation *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  const void *ArgAttrsAttr;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int ODSOperandIndexAndLength;
  void *v53;
  uint64_t v54;
  int64_t matched;
  char v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t Bias;
  int64_t v75;
  char v76;
  uint64_t v77;
  int64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t *v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  char v94;
  uint64_t v95;
  int64_t v96;
  char v97;
  uint64_t SparseShape;
  int64_t v99;
  char v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  BOOL v109;
  uint64_t *v111;
  uint64_t v112;
  char v113;
  _QWORD v114[2];
  mlir::mps::_anonymous_namespace_ *v115;
  void *Filter;
  uint64_t v117;
  _QWORD v118[4];
  void *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v5 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, __guard))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v5))
    return 0;
  v111 = 0;
  v112 = 0;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v6))
  {
    v119 = &v121;
    v120 = 0x100000000;
    mlir::Operation::fold((uint64_t)this, 0, 0, (uint64_t)&v119);
    v7 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v119 & 0xFFFFFFFFFFFFFFF8));
    v9 = v7;
    if (v7)
    {
      v111 = v7;
      v112 = v8;
    }
    if (v119 != &v121)
      free(v119);
    if (v9)
      return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v111);
  }
  v12 = *(_UNKNOWN **)(*((_QWORD *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::BroadcastToOp,void>::id
      ? this
      : 0;
  v124 = v12;
  if (v12)
  {
    Filter = (void *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v124);
    v119 = Filter;
    DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v119);
    if (!DefiningOp
      || (v14 = DefiningOp,
          v15 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
          ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v14 + 48) + 32))(*(_QWORD *)(v14 + 48), v15) & 1) == 0))
    {
      v16 = (mlir::mps::_anonymous_namespace_ *)mlir::Value::getDefiningOp((mlir::Value *)&Filter);
      if (v16)
      {
          return 0;
      }
    }
  }
  v18 = *(void **)(*((_QWORD *)this + 6) + 16);
  if (v18 == &mlir::detail::TypeIDResolver<mlir::mps::GetCoordOp,void>::id)
  {
    mlir::mps::GetCoordOpAdaptor::GetCoordOpAdaptor(&v119, this);
    ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)&v119, 1u);
    v53 = v123;
    Filter = v123;
    v117 = ODSOperandIndexAndLength;
    if (ODSOperandIndexAndLength)
      v53 = (void *)mlir::ValueRange::offset_base(&Filter, ODSOperandIndexAndLength);
    Filter = v53;
    v117 = 0;
    v54 = mlir::ValueRange::dereference_iterator(&Filter, 0);
    matched = mlir::matchConstantWithIntValue<long long>(v54);
    v11 = 0;
    if (v56)
    {
      v57 = matched;
      if (matched >= -4)
      {
        Filter = v118;
        v117 = 0x400000000;
        v58 = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::IfOpGenericAdaptorBase *)&v119, 0);
        v59 = (unint64_t)v123;
        v124 = v123;
        v125 = v58;
        if (v58)
          v59 = mlir::ValueRange::offset_base(&v124, v58);
        v124 = (_QWORD *)v59;
        v125 = 0;
        v60 = mlir::ValueRange::dereference_iterator(&v124, 0);
        if (mlir::matchConstantWithIntVector<long long>(v60, (uint64_t)&Filter))
          v11 = ~((v117 & (unint64_t)(v57 >> 63)) + v57) + v117 < 4;
        else
          v11 = 0;
        if (Filter != v118)
          free(Filter);
      }
    }
  }
  else if (v18 == &mlir::detail::TypeIDResolver<mlir::mps::DepthToSpace2DOp,void>::id)
  {
    Filter = this;
    v61 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Filter) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v61)
      goto LABEL_75;
    v62 = *v61;
    v63 = mlir::TypeID::get<mlir::ShapedType>();
    v64 = *(unsigned int *)(v62 + 16);
    if (!(_DWORD)v64)
      goto LABEL_75;
    v65 = *(_QWORD **)(v62 + 8);
    v66 = &v65[2 * v64];
    do
    {
      v67 = v64 >> 1;
      v68 = &v65[2 * (v64 >> 1)];
      v70 = *v68;
      v69 = v68 + 2;
      v64 += ~(v64 >> 1);
      if (v70 < v63)
        v65 = v69;
      else
        v64 = v67;
    }
    while (v64);
    if (v65 != v66 && *v65 == v63)
      v71 = v65[1];
    else
LABEL_75:
      v71 = 0;
    v119 = v61;
    v120 = v71;
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v119) & 1) == 0)
      return 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v119);
    v73 = v72;
    Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&Filter);
    v75 = mlir::matchConstantWithIntValue<long long>(Bias);
    v11 = 0;
    if (v76 && v75 >= -4)
    {
      if ((unint64_t)(v73 + ~mlir::getPositiveAxis(v75, v73)) >= 4)
        return 0;
      v77 = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Filter);
      v78 = mlir::matchConstantWithIntValue<long long>(v77);
      v11 = 0;
      if (v79)
      {
        if (v78 >= -4)
        {
          if ((unint64_t)(v73 + ~mlir::getPositiveAxis(v78, v73)) > 3)
            return 0;
          goto LABEL_101;
        }
      }
    }
  }
  else
  {
    if (v18 != &mlir::detail::TypeIDResolver<mlir::mps::SpaceToDepth2DOp,void>::id)
    {
      if (!a2 || !*((_DWORD *)a2 + 9))
        return 1;
      v115 = this;
      v19 = (_QWORD *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v19)
        goto LABEL_32;
      v20 = *v19;
      v21 = mlir::TypeID::get<mlir::ShapedType>();
      v22 = *(unsigned int *)(v20 + 16);
      if (!(_DWORD)v22)
        goto LABEL_32;
      v23 = *(_QWORD **)(v20 + 8);
      v24 = &v23[2 * v22];
      do
      {
        v25 = v22 >> 1;
        v26 = &v23[2 * (v22 >> 1)];
        v28 = *v26;
        v27 = v26 + 2;
        v22 += ~(v22 >> 1);
        if (v28 < v21)
          v23 = v27;
        else
          v22 = v25;
      }
      while (v22);
      if (v23 != v24 && *v23 == v21)
        v29 = v23[1];
      else
LABEL_32:
        v29 = 0;
      v124 = v19;
      v125 = v29;
      v30 = (uint64_t *)(*((_QWORD *)this - 1) & 0xFFFFFFFFFFFFFFF8);
      if (!v30)
        goto LABEL_42;
      v31 = *v30;
      v32 = mlir::TypeID::get<mlir::ShapedType>();
      v33 = *(unsigned int *)(v31 + 16);
      if (!(_DWORD)v33)
        goto LABEL_42;
      v34 = *(_QWORD **)(v31 + 8);
      v35 = &v34[2 * v33];
      do
      {
        v36 = v33 >> 1;
        v37 = &v34[2 * (v33 >> 1)];
        v39 = *v37;
        v38 = v37 + 2;
        v33 += ~(v33 >> 1);
        if (v39 < v32)
          v34 = v38;
        else
          v33 = v36;
      }
      while (v33);
      if (v34 != v35 && *v34 == v32)
        v40 = v34[1];
      else
LABEL_42:
        v40 = 0;
      v114[0] = v30;
      v114[1] = v40;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
      {
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v114))
        {
          ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v124);
          v43 = v42;
          v44 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v114);
          if (v43 == v45 && !memcmp(ArgAttrsAttr, v44, 8 * v43))
          {
            if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124))
            {
              v46 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v124);
              if (v47)
              {
                v48 = 8 * v47;
                while (*v46 != 0x8000000000000000)
                {
                  ++v46;
                  v48 -= 8;
                  if (!v48)
                    goto LABEL_52;
                }
              }
              else
              {
LABEL_52:
                if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v114))
                {
                  v49 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v114);
                  if (!v50)
                    return 1;
                  v51 = 8 * v50;
                  v11 = 1;
                  while (*v49 != 0x8000000000000000)
                  {
                    ++v49;
                    v51 -= 8;
                    if (!v51)
                      return v11;
                  }
                }
              }
            }
            v101 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>>();
            if (((*(uint64_t (**)(_QWORD, void *))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v101) & 1) != 0)return 1;
            v102 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>>();
            if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v102) & 1) != 0)return 1;
            v103 = mlir::TypeID::get<mlir::OpTrait::ResultsBroadcastableShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ResultsBroadcastableShape>(void)::Empty>>();
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v103))
            {
              mlir::Operation::getOperandTypes(this, (uint64_t *)&v119);
              if (v119 != v121 || v120 != v122)
              {
                v104 = 0;
                v105 = ~v120 + v122;
                v106 = (uint64_t *)((char *)v119 + 32 * v120 + 24);
                do
                {
                  v107 = *v106;
                  v106 += 4;
                  if (v124 == (_QWORD *)(*(_QWORD *)(v107 + 8) & 0xFFFFFFFFFFFFFFF8))
                    ++v104;
                  v109 = v105-- != 0;
                }
                while (v119 != v121 || v109);
                if (v104)
                {
                  v113 = 1;
                  mlir::Operation::getOperandTypes(this, (uint64_t *)&v119);
                  Filter = &v124;
                  v117 = (uint64_t)&v113;
                  v118[0] = &v115;
                }
              }
            }
          }
        }
      }
      return 0;
    }
    Filter = this;
    v80 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&Filter) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v80)
      goto LABEL_93;
    v81 = *v80;
    v82 = mlir::TypeID::get<mlir::ShapedType>();
    v83 = *(unsigned int *)(v81 + 16);
    if (!(_DWORD)v83)
      goto LABEL_93;
    v84 = *(_QWORD **)(v81 + 8);
    v85 = &v84[2 * v83];
    do
    {
      v86 = v83 >> 1;
      v87 = &v84[2 * (v83 >> 1)];
      v89 = *v87;
      v88 = v87 + 2;
      v83 += ~(v83 >> 1);
      if (v89 < v82)
        v84 = v88;
      else
        v83 = v86;
    }
    while (v83);
    if (v84 != v85 && *v84 == v82)
      v90 = v84[1];
    else
LABEL_93:
      v90 = 0;
    v119 = v80;
    v120 = v90;
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v119) & 1) == 0)
      return 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v119);
    v73 = v91;
    v92 = mlir::anec::GOC::getBias((mlir::anec::GOC *)&Filter);
    v93 = mlir::matchConstantWithIntValue<long long>(v92);
    v11 = 0;
    if (v94 && v93 >= -4)
    {
      if ((unint64_t)(v73 + ~mlir::getPositiveAxis(v93, v73)) >= 4)
        return 0;
      v95 = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&Filter);
      v96 = mlir::matchConstantWithIntValue<long long>(v95);
      v11 = 0;
      if (v97)
      {
        if (v96 >= -4)
        {
          if ((unint64_t)(v73 + ~mlir::getPositiveAxis(v96, v73)) > 3)
            return 0;
LABEL_101:
          SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&Filter);
          v99 = mlir::matchConstantWithIntValue<long long>(SparseShape);
          v11 = 0;
          if (v100 && v99 >= -4)
            return (unint64_t)(v73 + ~mlir::getPositiveAxis(v99, v73)) < 4;
        }
      }
    }
  }
  return v11;
}

uint64_t mlir::mps::BaseFusableCoreOps::fuseCoreOps(mlir::mps::BaseFusableCoreOps *this, mlir::mps::StitchingPass *a2, mlir::Operation *a3, mlir::OpBuilder *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  mlir::Operation *v11;
  mlir::GenericProgramPoint *DefiningOp;
  uint64_t v13;
  mlir::Operation *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mlir::MLIRContext *v20;
  uint64_t UnknownLoc;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  mlir::mps::_anonymous_namespace_ *v47;
  mlir::Operation *v48;
  mlir::Operation *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  _QWORD v58[3];
  llvm *v59;
  unsigned int v60;
  uint64_t v61;
  _QWORD v62[2];

  if ((*((_BYTE *)a3 + 46) & 0x80) != 0)
  {
    v8 = *((unsigned int *)a3 + 17);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = (uint64_t *)(*((_QWORD *)a3 + 9) + 24);
      do
      {
        if (((**(uint64_t (***)(mlir::mps::BaseFusableCoreOps *, mlir::Operation *, uint64_t))this)(this, a3, v9) & 1) == 0)
        {
          v54 = (_QWORD *)*v10;
          DefiningOp = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)&v54);
          v54 = (_QWORD *)*v10;
          v13 = mlir::Value::getDefiningOp((mlir::Value *)&v54);
          if (v13)
          {
            v15 = v13;
            v16 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
            LOBYTE(v13) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v15 + 48) + 32))(*(_QWORD *)(v15 + 48), v16);
          }
          if ((v13 & 1) == 0
            && DefiningOp
          {
            v17 = *((_QWORD *)DefiningOp + 2);
            mlir::GenericProgramPoint::~GenericProgramPoint(DefiningOp);
            v19 = *(_QWORD *)(v18 + 8);
            *((_QWORD *)a4 + 2) = v17;
            *((_QWORD *)a4 + 3) = v19;
            UnknownLoc = mlir::Builder::getUnknownLoc((mlir::UnknownLoc **)a4, v20);
            v54 = (_QWORD *)*v10;
            v22 = (uint64_t *)((char *)mlir::OpBuilder::create<mlir::mps::IdentityOp,mlir::Value>(a4, UnknownLoc, (uint64_t *)&v54)- 16);
            v62[0] = v22;
            v61 = *v10;
            v23 = mlir::Value::getDefiningOp((mlir::Value *)v62);
            v54 = v58;
            v55 = v58;
            v57 = 0;
            v56 = 0x100000001;
            v58[0] = v23;
            mlir::Value::replaceAllUsesExcept((const void **)&v61, v22, (llvm::SmallPtrSetImplBase *)&v54);
            if (v55 != v54)
              free(v55);
            v11 = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)v62);
            mlir::mps::BaseFusableCoreOps::fuseCoreOps(this, a2, v11, a4);
          }
        }
        ++v9;
        v10 += 4;
      }
      while (v8 != v9);
    }
  }
  v24 = *(void **)(*((_QWORD *)a3 + 6) + 16);
  v38 = v24 == &mlir::detail::TypeIDResolver<mlir::mps::RealToHermiteanFFTOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::SoftmaxOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mpsx::RMSNormOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::FastFourierTransformOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::StencilOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mpsx::QuantizedMatMulOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id
     || v24 == &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id;
  if (v38
    && (*(unsigned int (**)(mlir::mps::BaseFusableCoreOps *, mlir::Operation *))(*(_QWORD *)this + 8))(this, a3))
  {
    llvm::deallocate_buffer(v59, (void *)(16 * v60));
  }
  v39 = *((_QWORD *)a3 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(a3);
  *((_QWORD *)a4 + 2) = v39;
  *((_QWORD *)a4 + 3) = v40;
  if ((*((_BYTE *)a3 + 46) & 0x80) != 0)
  {
    v41 = *((unsigned int *)a3 + 17);
    if ((_DWORD)v41)
    {
      v42 = 0;
      v43 = *((_QWORD *)a3 + 9);
      do
      {
        v44 = v43 + 32 * v42;
        v46 = *(_QWORD *)(v44 + 24);
        v45 = (uint64_t *)(v44 + 24);
        v54 = (_QWORD *)v46;
        v47 = (mlir::mps::_anonymous_namespace_ *)mlir::Value::getDefiningOp((mlir::Value *)&v54);
        if (v47)
        {
          v49 = v47;
          {
            v54 = (_QWORD *)*v45;
            v50 = mlir::Value::getDefiningOp((mlir::Value *)&v54);
            if (!v50
              || (v51 = v50,
                  v52 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>(),
                  ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v51 + 48) + 32))(*(_QWORD *)(v51 + 48), v52) & 1) == 0))
            {
              llvm::deallocate_buffer(v59, (void *)(16 * v60));
            }
          }
        }
        ++v42;
      }
      while (v42 != v41);
    }
  }
  return 0;
}

void mlir::mps::StitchingPass::runOnOperation(mlir::mps::StitchingPass *this)
{
  uint64_t v2;
  mlir::Operation *v3;

  v2 = *((_QWORD *)this + 5);
  v3 = (mlir::Operation *)(v2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(v2 & 0xFFFFFFFFFFFFFFF8);
  mlir::mps::StitchingPass::runOnRegionForOp((mlir::mps::BaseFusableCoreOps **)this, v3);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::IdentityOp,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.identity", (const unsigned __int8 *)0xC, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mps.identity";
    v15[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mps::ACosOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::mps::_anonymous_namespace_::StitchedRegion *mlir::mps::`anonymous namespace'::StitchedRegion::StitchedRegion(mlir::mps::_anonymous_namespace_::StitchedRegion *this, mlir::mps::StitchingPass *a2, mlir::OpBuilder *a3, mlir::Operation *a4, mlir::mps::BaseFusableCoreOps *a5, int a6)
{
  mlir::Operation *v8;
  mlir::Operation **v9;
  int isStitchable;
  uint64_t *v11;
  uint64_t v13;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = 0;
  v8 = (mlir::mps::_anonymous_namespace_::StitchedRegion *)((char *)this + 40);
  *((_BYTE *)this + 48) = a6;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *((_QWORD *)this + 26) = a5;
  *((_DWORD *)this + 54) = 1;
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  if (isStitchable)
  {
    *((_QWORD *)this + 5) = v11;
  }
  if (a6)
  {
    *((_QWORD *)this + 5) = v11;
  }
  mlir::emitError(v11[3], (uint64_t)&v13);
  if (v13)
    mlir::Diagnostic::operator<<((uint64_t)v14, "A non stitchable core asked to create a stitched region, invalid\n");
  mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v13);
  if (v13)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v13);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  *(_QWORD *)(*(_QWORD *)this + 40) |= 4uLL;
  return this;
}

void mlir::mps::createStitchingPass(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = operator new(0x168uLL);
  v5 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  v4[16] = 0;
  v4[32] = 0;
  v4[40] = 0;
  v4[120] = 0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_DWORD *)v4 + 74) = 0;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 75) = 16;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *(_QWORD *)v4 = off_1E0E4B778;
  *((_QWORD *)v4 + 1) = &mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::resolveTypeID(void)::id;
  *((_QWORD *)v4 + 42) = 0;
  *((_QWORD *)v4 + 43) = v5;
  *((_QWORD *)v4 + 44) = v6;
  if (!v5)
  {
    v7 = operator new(0x20uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = off_1E0E51FD0;
    *((_QWORD *)v4 + 44) = v7;
    v7[3] = &off_1E0E4BAD8;
    *((_QWORD *)v4 + 43) = v7 + 3;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  *a2 = v4;
}

void mlir::mps::StitchingPass::~StitchingPass(mlir::mps::StitchingPass *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E0E4B778;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  mlir::Pass::~Pass(this);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E0E4B778;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 44);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  mlir::Pass::~Pass(this);
  operator delete(v5);
}

const char *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::getName()
{
  return "MPSStitching";
}

_QWORD *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::getDependentDialects(int a1, uint64_t **a2)
{
  uint64_t v2;
  _QWORD *result;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = off_1E0E50990;
  v5 = v4;
  v2 = 4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id, "mpsx", 4uLL, v4);
  result = v5;
  if (v5 == v4)
  {
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

const char *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::getArgument()
{
  return "mps-stitching";
}

const char *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::getDescription()
{
  return "Stitch MPS ops together.";
}

_OWORD *mlir::mps::MPSStitchingBase<mlir::mps::StitchingPass>::clonePass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x168uLL);
  v5 = *(_QWORD *)(a1 + 8);
  result[1] = *(_OWORD *)(a1 + 16);
  *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 32);
  *((_BYTE *)result + 40) = 0;
  *((_BYTE *)result + 120) = 0;
  result[8] = 0u;
  result[9] = 0u;
  result[10] = 0u;
  *((_QWORD *)result + 22) = 0;
  *((_QWORD *)result + 23) = (char *)result + 200;
  *((_QWORD *)result + 24) = 0x400000000;
  *((_QWORD *)result + 29) = (char *)result + 248;
  *((_QWORD *)result + 30) = 0x400000000;
  *((_QWORD *)result + 35) = 0;
  *((_QWORD *)result + 36) = 0;
  *((_DWORD *)result + 74) = 0;
  *((_DWORD *)result + 75) = 16;
  result[19] = 0u;
  result[20] = 0u;
  *(_QWORD *)result = off_1E0E4B778;
  *((_QWORD *)result + 1) = v5;
  v7 = *(_QWORD *)(a1 + 344);
  v6 = *(_QWORD *)(a1 + 352);
  *((_QWORD *)result + 42) = 0;
  *((_QWORD *)result + 43) = v7;
  *((_QWORD *)result + 44) = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *a2 = result;
  return result;
}

__guard mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::Stitchable<Empty>]";
      v12 = 82;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[132];
}

uint64_t *mlir::Operation::getOperandTypes@<X0>(mlir::Operation *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[2];

  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v2 = *((_QWORD *)this + 9);
    v3 = *((unsigned int *)this + 17);
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  v5[0] = v2;
  v5[1] = v3;
  return mlir::OperandRange::getTypes(v5, a2);
}

uint64_t llvm::all_of<mlir::ValueTypeRange<mlir::OperandRange>,mlir::mps::`anonymous namespace'::checkCompatibleShapes(mlir::Operation *,mlir::Operation *)::{lambda(mlir::Type)#2}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  mlir::CallableOpInterface *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t InherentAttr;
  char v35;
  int v36;
  _BOOL4 v39;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _QWORD v44[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  if (*a1 == v4 && v3 == v5)
    return 1;
  v7 = *(mlir::CallableOpInterface **)a2;
  v42 = a1[2];
  v43 = *(_BYTE **)(a2 + 8);
  v8 = *(uint64_t **)(a2 + 16);
  v41 = a1[3];
  while (1)
  {
    v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 32 * v3 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*(uint64_t **)v7 == v9 && *v43)
    {
      *v43 = 0;
      goto LABEL_49;
    }
    if (!v9)
      goto LABEL_16;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_16;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_16:
      v19 = 0;
    v44[0] = v9;
    v44[1] = v19;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v44))
      return 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    v21 = v20;
    mlir::CallableOpInterface::getArgAttrsAttr(v7);
    if (v21 > v22)
      return 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    v24 = v23;
    mlir::CallableOpInterface::getArgAttrsAttr(v7);
    if (v25 >= v24)
      v26 = v24;
    else
      v26 = v25;
    if (!v26)
      goto LABEL_49;
    v27 = 0;
    v28 = 0;
    do
    {
      while (1)
      {
        mlir::CallableOpInterface::getArgAttrsAttr(v7);
        v30 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(v7) + 8 * (v29 + ~(_DWORD)v27));
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
        v32 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44)
                        + 8 * (v31 + ~(_DWORD)v27));
        if (v30 == 0x8000000000000000)
          break;
        if (v30 != 1 || v32 == 1)
        {
LABEL_35:
          v39 = v30 == 0x8000000000000000 && v32 != 1;
          v28 |= v39;
          goto LABEL_44;
        }
        ++v27;
        v28 = 1;
        if (v27 == v26)
          return 0;
      }
      if (v32 != 0x8000000000000000)
        goto LABEL_35;
      v33 = *v8;
      if (*(_BYTE *)(*v8 + 47)
        && (InherentAttr = mlir::Operation::getInherentAttr(*v8, (uint64_t)"__no_dynamic_broadcast", 22), v35))
      {
        v36 = InherentAttr != 0;
      }
      else
      {
        v36 = mlir::DictionaryAttr::contains(v33 + 56, "__no_dynamic_broadcast", 0x16uLL);
      }
      v28 |= v36 ^ 1;
LABEL_44:
      ++v27;
    }
    while (v27 != v26);
    v5 = v41;
    v4 = v42;
    if ((v28 & 1) != 0)
      return 0;
LABEL_49:
    ++v3;
    if (v2 == v4 && v3 == v5)
      return 1;
  }
}

uint64_t mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultType<Empty>]";
      v12 = 97;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[205];
}

void mlir::mps::`anonymous namespace'::StitchedRegion::createStitchedOp(mlir::mps::_anonymous_namespace_::StitchedRegion *this)
{
  uint64_t v2;
  mlir::GenericProgramPoint *v3;
  mlir::Operation **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mlir::MLIRContext *v8;
  uint64_t UnknownLoc;
  mlir::MLIRContext *v10;
  uint64_t F32Type;
  uint64_t DefiningOp;
  uint64_t v13;
  unint64_t Body;
  _QWORD *v15;
  _OWORD *Block;
  uint64_t v17;
  void *v18;
  char *v19;
  mlir::Operation **v20;
  mlir::Operation *v21;
  void *__p;
  void *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1);
  v4 = (mlir::Operation **)((char *)this + 40);
  v3 = (mlir::GenericProgramPoint *)*((_QWORD *)this + 5);
  v5 = *((_QWORD *)v3 + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(v3);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 24) = v7;
  UnknownLoc = mlir::Builder::getUnknownLoc(*((mlir::UnknownLoc ***)this + 1), v8);
  F32Type = mlir::Builder::getF32Type(*((mlir::Float32Type ***)this + 1), v10);
  v26 = mlir::UnrankedTensorType::get(F32Type);
  v25 = (char *)mlir::OpBuilder::create<mlir::mpsx::StitchedOp,mlir::UnrankedTensorType &>(*((mlir::OpBuilder **)this + 1), UnknownLoc, &v26)- 16;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v25);
  *((_QWORD *)this + 25) = DefiningOp;
  if (*(_UNKNOWN **)(*(_QWORD *)(DefiningOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
    v13 = DefiningOp;
  else
    v13 = 0;
  *((_QWORD *)this + 3) = v13;
  *((_QWORD *)this + 15) = 0;
  Body = mlir::anec::A11Legacy::getBody((mlir::mps::_anonymous_namespace_::StitchedRegion *)((char *)this + 24));
  v15 = (_QWORD *)*((_QWORD *)this + 1);
  mlir::ValueRange::ValueRange(v27, 0, 0);
  Block = mlir::OpBuilder::createBlock(v15, Body, 0, v27[0], v27[1], 0, 0);
  *((_QWORD *)this + 2) = Block;
  v17 = *((_QWORD *)this + 1);
  *(_QWORD *)(v17 + 16) = Block;
  *(_QWORD *)(v17 + 24) = Block + 2;
  v18 = (void *)*((unsigned int *)*v4 + 9);
  v19 = (char *)*v4 - 16;
  if (!(_DWORD)v18)
    v19 = 0;
  __p = v19;
  v23 = v18;
  mlir::ResultRange::replaceAllUsesWith((uint64_t *)&__p, *((mlir::Operation **)this + 25));
  __p = operator new(0x80uLL);
  v23 = __p;
  v24 = (char *)__p + 128;
  v20 = (mlir::Operation **)((char *)this + 32);
  if (*((_BYTE *)this + 48))
  {
    v21 = *v20;
    v20 = v4;
  }
  else
  {
    v21 = 0;
  }
}

mlir::Operation *mlir::mps::`anonymous namespace'::StitchedRegion::recurseUses(mlir::Operation *this, mlir::Operation *a2, mlir::Operation **a3)
{
  void *v3;
  mlir::Operation *v5;
  uint64_t v6;
  int v8;
  _QWORD *v9;
  int v10;
  mlir::mps::_anonymous_namespace_ *v11;
  int isStitchable;
  mlir::Block *v13;
  uint64_t ParentOp;
  mlir::mps::_anonymous_namespace_ *v15;
  mlir::Operation **v16;
  mlir::mps::_anonymous_namespace_ *v17;
  _QWORD *v18;
  char v19;
  mlir::mps::_anonymous_namespace_ *v20;
  mlir::mps::_anonymous_namespace_ *v21;

  v3 = *(void **)(*((_QWORD *)this + 6) + 16);
  if (v3 == &mlir::detail::TypeIDResolver<mlir::mps::SpaceToDepth2DOp,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::mps::DepthToSpace2DOp,void>::id)
  {
    return this;
  }
  v5 = this;
  v6 = *((_QWORD *)this - 2);
  if (!v6)
    return this;
  v8 = 1;
  v9 = (_QWORD *)*((_QWORD *)this - 2);
  do
  {
    v11 = (mlir::mps::_anonymous_namespace_ *)v9[2];
    v13 = (mlir::Block *)*((_QWORD *)v11 + 2);
    if (!v13)
    {
      ParentOp = 0;
      this = (mlir::Operation *)*((_QWORD *)v5 + 2);
      if (!this)
        goto LABEL_7;
LABEL_15:
      this = (mlir::Operation *)mlir::Block::getParentOp(this);
      goto LABEL_7;
    }
    ParentOp = mlir::Block::getParentOp(v13);
    this = (mlir::Operation *)*((_QWORD *)v5 + 2);
    if (this)
      goto LABEL_15;
LABEL_7:
    if ((mlir::Operation *)ParentOp == this)
      v10 = isStitchable;
    else
      v10 = 0;
    v8 &= v10;
    v9 = (_QWORD *)*v9;
  }
  while (v9);
  if (!v8)
    return this;
  v15 = *(mlir::mps::_anonymous_namespace_ **)(v6 + 16);
  if (!(_DWORD)this)
  {
    v17 = 0;
    v18 = *(_QWORD **)v6;
    if (*(_QWORD *)v6)
      goto LABEL_19;
    goto LABEL_24;
  }
  v21 = v15;
  v17 = v21;
  v18 = *(_QWORD **)v6;
  if (!*(_QWORD *)v6)
  {
LABEL_24:
    v19 = 1;
    goto LABEL_25;
  }
LABEL_19:
  v19 = 1;
  do
  {
    v20 = (mlir::mps::_anonymous_namespace_ *)v18[2];
    if ((_DWORD)this)
    {
      v21 = v20;
      v19 &= v21 == v17;
    }
    v18 = (_QWORD *)*v18;
  }
  while (v18);
LABEL_25:
  if ((v19 & 1) != 0)
  {
    if (v17)
      *(_QWORD *)a2 = v17;
  }
  return this;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::ReturnStitchedOp,mlir::Value &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.stitched_return", (const unsigned __int8 *)0x14, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mpsx.stitched_return";
    v15[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::pdl_interp::EraseOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::StitchedOp,mlir::UnrankedTensorType &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  _QWORD v17[39];

  v17[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.stitched", (const unsigned __int8 *)0xD, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mpsx.stitched";
    v15[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v17);
    llvm::report_fatal_error((llvm::Twine *)v17, 1);
  }
  mlir::OperationState::OperationState(v17, a2, v7);
  mlir::mpsx::StitchedOp::build((uint64_t)a1, (uint64_t)v17, *a3);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v17);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v17);
  return v10;
}

void mlir::mps::`anonymous namespace'::StitchedRegion::recursePrefixes(uint64_t a1, mlir::Operation *a2, uint64_t a3, mlir::GenericProgramPoint *a4, uint64_t a5)
{
  _QWORD *v10;
  mlir::DominanceInfo *v11;
  int v12;
  mlir::Block *ParentOp;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t DefiningOp;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  mlir::DominanceInfo *v22;
  uint64_t *v23;
  mlir::Block *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  mlir::Block *v48;
  char *v49;
  char *v50;
  const std::nothrow_t *v51;
  unint64_t v52;
  char *v53;
  BOOL v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  mlir::Operation *v60;
  uint64_t v61;
  mlir::Block *v62;
  int isStitchable;
  char v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  mlir::Block *v75;
  mlir::DominanceInfo **v76;
  uint64_t v77;
  mlir::Block *v78;
  int v79;
  int v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  __int128 *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  mlir::GenericProgramPoint *v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t v94;
  mlir::Block *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  mlir::GenericProgramPoint *v107;
  uint64_t v108;
  _QWORD v109[2];
  int v110;
  mlir::DominanceInfo *v111;

  v11 = (mlir::Operation *)((char *)a2 - 16);
  v10 = (_QWORD *)*((_QWORD *)a2 - 2);
  if (!v10)
    goto LABEL_11;
  v12 = 0;
  do
  {
    ParentOp = *(mlir::Block **)(v10[2] + 16);
    if (ParentOp)
      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    if (ParentOp != *(mlir::Block **)(a1 + 200))
      ++v12;
    v10 = (_QWORD *)*v10;
  }
  while (v10);
  if (v12)
  {
    v14 = *(_QWORD *)(a1 + 8);
    if (a4)
    {
      v15 = *((_QWORD *)a4 + 2);
      mlir::GenericProgramPoint::~GenericProgramPoint(a4);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = v15 + 32;
    }
    *(_QWORD *)(v14 + 16) = v15;
    *(_QWORD *)(v14 + 24) = v16;
    v111 = v11;
    v109[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 128), (unint64_t *)&v111, v109)&& v109[0] != *(_QWORD *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 144)&& (v109[0] = *(_QWORD *)(v109[0] + 8)) != 0)
    {
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v109);
    }
    else
    {
      v91 = mlir::OpBuilder::clone(*(uint64_t ***)(a1 + 8), a2, (mlir::IRMapping *)(a1 + 128));
      DefiningOp = (uint64_t)v91;
      v92 = (_QWORD *)*((_QWORD *)a2 - 2);
      if (v92)
      {
        v93 = (uint64_t *)((char *)v91 - 16);
        do
        {
          v94 = v92[2];
          v95 = *(mlir::Block **)(v94 + 16);
          if (v95)
            v95 = (mlir::Block *)mlir::Block::getParentOp(v95);
          if (v95 == *(mlir::Block **)(a1 + 200) && (*(_BYTE *)(v94 + 46) & 0x80) != 0)
          {
            v96 = *(unsigned int *)(v94 + 68);
            if ((_DWORD)v96)
            {
              v97 = 0;
              v98 = 32 * v96;
              v99 = *(_QWORD *)(v94 + 72) + 24;
              do
              {
                if (*(mlir::DominanceInfo **)(v99 + v97) == v11)
                {
                  v100 = (uint64_t *)(*(_QWORD *)(v94 + 72) + v97);
                  v101 = (uint64_t *)v100[1];
                  if (v101)
                  {
                    *v101 = *v100;
                    if (*v100)
                      *(_QWORD *)(*v100 + 8) = v100[1];
                  }
                  v100[3] = (uint64_t)v93;
                  v100[1] = (uint64_t)v93;
                  v102 = *v93;
                  *v100 = *v93;
                  if (v102)
                    *(_QWORD *)(v102 + 8) = v100;
                  *v93 = (uint64_t)v100;
                }
                v97 += 32;
              }
              while (v98 != v97);
            }
          }
          v92 = (_QWORD *)*v92;
        }
        while (v92);
      }
    }
  }
  else
  {
LABEL_11:
    if (a4)
      mlir::Operation::moveBefore(a2, a4);
    else
      mlir::Operation::moveBefore((uint64_t)a2, *(mlir::Block **)(a1 + 16), (uint64_t *)(*(_QWORD *)(a1 + 16) + 32));
    DefiningOp = (uint64_t)a2;
  }
  v105 = a5;
  v107 = (mlir::GenericProgramPoint *)DefiningOp;
  if ((*(_BYTE *)(DefiningOp + 46) & 0x80) != 0)
  {
    v18 = *(unsigned int *)(DefiningOp + 68);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v106 = *(_QWORD *)(DefiningOp + 72);
      do
      {
        if (DefiningOp != a5
          || (***(unsigned int (****)(_QWORD, uint64_t, uint64_t))(a1 + 208))(*(_QWORD *)(a1 + 208), a5, v19))
        {
          v20 = v106 + 32 * v19;
          v22 = *(mlir::DominanceInfo **)(v20 + 24);
          v21 = (_QWORD *)(v20 + 24);
          v111 = v22;
          v109[0] = 0;
          if (!llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)(a1 + 128), (unint64_t *)&v111, v109))goto LABEL_28;
          if (v109[0] == *(_QWORD *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 144))
            goto LABEL_28;
          v23 = *(uint64_t **)(v109[0] + 8);
          if (!v23)
            goto LABEL_28;
          v24 = (mlir::Block *)*((_QWORD *)v107 + 2);
          if (v24)
            v24 = (mlir::Block *)mlir::Block::getParentOp(v24);
          if (v24 == *(mlir::Block **)(a1 + 200))
          {
            v31 = (uint64_t *)(*((_QWORD *)v107 + 9) + 32 * v19);
            v32 = (uint64_t *)v31[1];
            if (v32)
            {
              *v32 = *v31;
              if (*v31)
                *(_QWORD *)(*v31 + 8) = v31[1];
            }
            v31[3] = (uint64_t)v23;
            v31[1] = (uint64_t)v23;
            v33 = *v23;
            *v31 = *v23;
            if (v33)
              *(_QWORD *)(v33 + 8) = v31;
            *v23 = (uint64_t)v31;
          }
          else
          {
LABEL_28:
            v109[0] = *v21;
            if (mlir::Value::getDefiningOp((mlir::Value *)v109))
            {
              v25 = *v21;
              v27 = *(char **)a3;
              v26 = *(char **)(a3 + 8);
              v28 = *(char **)a3;
              if (*(char **)a3 != v26)
              {
                v28 = *(char **)a3;
                do
                {
                  if (*(_QWORD *)v28 == v25)
                    goto LABEL_18;
                  v28 += 8;
                }
                while (v28 != v26);
                v28 = *(char **)(a3 + 8);
              }
LABEL_18:
              if (v28 == v26)
              {
                v29 = *(_QWORD *)(a3 + 16);
                if ((unint64_t)v26 >= v29)
                {
                  v34 = v26 - v27;
                  v35 = (v26 - v27) >> 3;
                  v36 = v35 + 1;
                  if ((unint64_t)(v35 + 1) >> 61)
LABEL_144:
                    abort();
                  v37 = v29 - (_QWORD)v27;
                  if (v37 >> 2 > v36)
                    v36 = v37 >> 2;
                  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
                    v36 = 0x1FFFFFFFFFFFFFFFLL;
                  v104 = v36;
                  if (v36)
                  {
                    if (v36 >> 61)
LABEL_145:
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    v38 = operator new(8 * v36);
                  }
                  else
                  {
                    v38 = 0;
                  }
                  v39 = &v38[8 * v35];
                  *v39 = v25;
                  v30 = v39 + 1;
                  if (v27 != v26)
                  {
                    if ((unint64_t)(v34 - 8) < 0x58)
                      goto LABEL_148;
                    if ((unint64_t)(v27 - v38) < 0x20)
                      goto LABEL_148;
                    v40 = ((unint64_t)(v34 - 8) >> 3) + 1;
                    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
                    v42 = &v26[-v41];
                    v39 = (_QWORD *)((char *)v39 - v41);
                    v43 = &v38[8 * v35 - 16];
                    v44 = v26 - 16;
                    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v46 = *(_OWORD *)v44;
                      *(v43 - 1) = *((_OWORD *)v44 - 1);
                      *v43 = v46;
                      v43 -= 2;
                      v44 -= 32;
                      v45 -= 4;
                    }
                    while (v45);
                    v26 = v42;
                    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_148:
                      do
                      {
                        v47 = *((_QWORD *)v26 - 1);
                        v26 -= 8;
                        *--v39 = v47;
                      }
                      while (v26 != v27);
                    }
                    v27 = *(char **)a3;
                  }
                  a5 = v105;
                  *(_QWORD *)a3 = v39;
                  *(_QWORD *)(a3 + 8) = v30;
                  *(_QWORD *)(a3 + 16) = &v38[8 * v104];
                  if (v27)
                    operator delete(v27);
                }
                else
                {
                  *(_QWORD *)v26 = v25;
                  v30 = v26 + 8;
                }
                *(_QWORD *)(a3 + 8) = v30;
              }
            }
          }
        }
        ++v19;
        DefiningOp = (uint64_t)v107;
      }
      while (v19 != v18);
    }
  }
  v48 = (mlir::Block *)*((_QWORD *)a2 + 2);
  if (v48)
    mlir::Block::getParentOp(v48);
  v109[0] = 0;
  v109[1] = 0;
  v110 = 0;
  v49 = *(char **)a3;
  v50 = *(char **)(a3 + 8);
  v111 = (mlir::DominanceInfo *)v109;
  if (v50 - v49 < 1025)
  {
LABEL_68:
  }
  else
  {
    v51 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v52 = (v50 - v49) >> 3;
    while (1)
    {
      v53 = (char *)operator new(8 * v52, v51);
      if (v53)
        break;
      v54 = v52 > 1;
      v52 >>= 1;
      if (!v54)
        goto LABEL_68;
    }
    v55 = v53;
    operator delete(v55);
  }
  v56 = *(_QWORD *)(a3 + 8);
  v57 = v105;
  if (v56 == *(_QWORD *)a3)
LABEL_121:
    mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase((uint64_t)v109);
  while (1)
  {
    v108 = *(_QWORD *)(v56 - 8);
    *(_QWORD *)(a3 + 8) = v56 - 8;
    v59 = mlir::Value::getDefiningOp((mlir::Value *)&v108);
    if (v59)
    {
      v61 = v59;
      v62 = *(mlir::Block **)(v59 + 16);
      if (v62)
        v62 = (mlir::Block *)mlir::Block::getParentOp(v62);
      if (v62 == *(mlir::Block **)(a1 + 200))
        goto LABEL_74;
      if (v61 == v57 || isStitchable)
      {
        if ((*(_BYTE *)(v61 + 46) & 0x80) != 0 && (v73 = *(unsigned int *)(v61 + 68), (_DWORD)v73))
        {
          v74 = 0;
          v75 = *(mlir::Block **)(a1 + 200);
          v76 = (mlir::DominanceInfo **)(*(_QWORD *)(v61 + 72) + 24);
          do
          {
            v111 = *v76;
            v77 = mlir::Value::getDefiningOp((mlir::Value *)&v111);
            if (!v77)
              goto LABEL_95;
            v78 = *(mlir::Block **)(v77 + 16);
            if (v78)
              v78 = (mlir::Block *)mlir::Block::getParentOp(v78);
            if (v78 != v75)
LABEL_95:
              ++v74;
            v76 += 4;
            --v73;
          }
          while (v73);
        }
        else
        {
          v74 = 0;
        }
        if (v74 <= 1)
          v79 = 1;
        else
          v79 = v74;
        v80 = v79 + *(_DWORD *)(a1 + 216) - 1;
        if (v80 <= 21)
        {
          *(_DWORD *)(a1 + 216) = v80;
        }
        goto LABEL_74;
      }
    }
    std::__hash_table<mlir::Value,std::hash<mlir::Value>,std::equal_to<mlir::Value>,std::allocator<mlir::Value>>::__emplace_unique_key_args<mlir::Value,mlir::Value const&>(a1 + 56, &v108, &v108);
    if ((v64 & 1) != 0)
      break;
LABEL_74:
    v56 = *(_QWORD *)(a3 + 8);
    if (v56 == *(_QWORD *)a3)
      goto LABEL_121;
  }
  v66 = *(char **)(a1 + 104);
  v65 = *(_QWORD *)(a1 + 112);
  if ((unint64_t)v66 < v65)
  {
    *(_QWORD *)v66 = v108;
    v58 = v66 + 8;
LABEL_73:
    *(_QWORD *)(a1 + 104) = v58;
    goto LABEL_74;
  }
  v67 = *(char **)(a1 + 96);
  v68 = (v66 - v67) >> 3;
  v69 = v68 + 1;
  if ((unint64_t)(v68 + 1) >> 61)
    goto LABEL_144;
  v70 = v65 - (_QWORD)v67;
  if (v70 >> 2 > v69)
    v69 = v70 >> 2;
  if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
    v71 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v71 = v69;
  if (v71)
  {
    if (v71 >> 61)
      goto LABEL_145;
    v72 = (char *)operator new(8 * v71);
  }
  else
  {
    v72 = 0;
  }
  v81 = &v72[8 * v68];
  *(_QWORD *)v81 = v108;
  v58 = v81 + 8;
  if (v66 == v67)
  {
    v57 = v105;
    goto LABEL_119;
  }
  v82 = v66 - v67 - 8;
  if (v82 >= 0x58)
  {
    v57 = v105;
    if ((unint64_t)(v67 - v72) >= 0x20)
    {
      v83 = (v82 >> 3) + 1;
      v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
      v85 = &v66[-v84];
      v81 -= v84;
      v86 = &v72[8 * v68 - 16];
      v87 = (__int128 *)(v66 - 16);
      v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v89 = *v87;
        *((_OWORD *)v86 - 1) = *(v87 - 1);
        *(_OWORD *)v86 = v89;
        v86 -= 32;
        v87 -= 2;
        v88 -= 4;
      }
      while (v88);
      v66 = v85;
      if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_118;
    }
  }
  else
  {
    v57 = v105;
  }
  do
  {
    v90 = *((_QWORD *)v66 - 1);
    v66 -= 8;
    *((_QWORD *)v81 - 1) = v90;
    v81 -= 8;
  }
  while (v66 != v67);
LABEL_118:
  v66 = *(char **)(a1 + 96);
LABEL_119:
  *(_QWORD *)(a1 + 96) = v81;
  *(_QWORD *)(a1 + 104) = v58;
  *(_QWORD *)(a1 + 112) = &v72[8 * v71];
  if (v66)
    operator delete(v66);
  goto LABEL_73;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,mlir::mps::`anonymous namespace'::StitchedRegion::recursePrefixes(mlir::Operation *,std::vector<mlir::Value> &,mlir::Operation *,mlir::Operation *)::$_0 &,std::__wrap_iter<mlir::Value*>>(char *a1, char *a2, mlir::DominanceInfo **a3, unint64_t a4, char *a5, uint64_t a6)
{
  __n128 *v8;
  unint64_t v9;
  mlir::Block **DefiningOp;
  mlir::Block **v11;
  __n128 result;
  unint64_t v13;
  char *v15;
  uint64_t v16;
  char *v17;
  __n128 *v18;
  uint64_t v19;
  unint64_t v20;
  mlir::Block **v21;
  mlir::Block **v22;
  unint64_t v23;
  uint64_t v24;
  mlir::Block **v25;
  mlir::Block **v26;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __n128 *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  mlir::Block **v39;
  mlir::Block **v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __n128 *v50;
  uint64_t v51;
  __n128 *v52;
  __n128 v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  __n128 *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 *v63;
  __n128 v64;
  uint64_t v65;
  unint64_t v66;

  if (a4 >= 2)
  {
    v8 = (__n128 *)a1;
    if (a4 == 2)
    {
      v9 = *((_QWORD *)a2 - 1);
      v65 = *(_QWORD *)a1;
      v66 = v9;
      DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
      v11 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
      if (mlir::DominanceInfo::properlyDominatesImpl(*a3, DefiningOp, v11, 1))
      {
        v13 = v8->n128_u64[0];
        v8->n128_u64[0] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v13;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v29 = a4 >> 1;
      v30 = &a1[8 * (a4 >> 1)];
      v31 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        return result;
      }
      v32 = &a5[8 * v29];
      v33 = v32;
      v34 = a5;
      v35 = v8;
      v36 = &a5[8 * a4];
      do
      {
        if (v33 == v36)
        {
          if (v34 == v32)
            return result;
          v55 = &a5[8 * (a4 >> 1)] - v34 - 8;
          if (v55 >= 0x38 && (unint64_t)((char *)v8 - v34) >= 0x20)
          {
            v59 = 0;
            v60 = (v55 >> 3) + 1;
            v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            v56 = &v34[v61];
            v57 = (__n128 *)((char *)v35 + v61);
            v62 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v63 = &v35[v59];
              result = *(__n128 *)&v34[v59 * 16];
              v64 = *(__n128 *)&v34[v59 * 16 + 16];
              *v63 = result;
              v63[1] = v64;
              v59 += 2;
              v62 -= 4;
            }
            while (v62);
            if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v56 = v34;
            v57 = v35;
          }
          do
          {
            v58 = *(_QWORD *)v56;
            v56 += 8;
            v57->n128_u64[0] = v58;
            v57 = (__n128 *)((char *)v57 + 8);
          }
          while (v56 != v32);
          return result;
        }
        v37 = v33;
        v38 = *(_QWORD *)v33;
        v65 = *(_QWORD *)v34;
        v66 = v38;
        v39 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
        v40 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
        v41 = mlir::DominanceInfo::properlyDominatesImpl(*a3, v39, v40, 1);
        if (v41)
          v42 = v37;
        else
          v42 = v34;
        v34 += 8 * (v41 ^ 1u);
        v33 = &v37[8 * v41];
        v35->n128_u64[0] = *(_QWORD *)v42;
        v35 = (__n128 *)((char *)v35 + 8);
        v8 = (__n128 *)((char *)v8 + 8);
      }
      while (v34 != v32);
      if (v33 != v36)
      {
        v43 = -8;
        if (!v41)
          v43 = 0;
        v44 = &a5[8 * a4] - v37 + v43 - 8;
        if (v44 < 0x68)
          goto LABEL_48;
        v45 = 8;
        if (!v41)
          v45 = 0;
        if ((unint64_t)((char *)v8 - v37 - v45) < 0x20)
          goto LABEL_48;
        v46 = 0;
        v47 = (v44 >> 3) + 1;
        v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        v49 = &v33[v48];
        v50 = (__n128 *)((char *)v35 + v48);
        v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = &v35[v46];
          result = *(__n128 *)&v33[v46 * 16];
          v53 = *(__n128 *)&v33[v46 * 16 + 16];
          *v52 = result;
          v52[1] = v53;
          v46 += 2;
          v51 -= 4;
        }
        while (v51);
        v33 = v49;
        v35 = v50;
        if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v54 = *(_QWORD *)v33;
            v33 += 8;
            v35->n128_u64[0] = v54;
            v35 = (__n128 *)((char *)v35 + 8);
          }
          while (v33 != v36);
        }
      }
    }
    else if (a1 != a2)
    {
      v15 = a1 + 8;
      if (a1 + 8 != a2)
      {
        v16 = 0;
        v17 = a1;
        do
        {
          v19 = *(_QWORD *)v17;
          v17 = v15;
          v20 = *(_QWORD *)v15;
          v65 = v19;
          v66 = v20;
          v21 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
          v22 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
          if (mlir::DominanceInfo::properlyDominatesImpl(*a3, v21, v22, 1))
          {
            v23 = *(_QWORD *)v17;
            v24 = v16;
            do
            {
              *(unint64_t *)((char *)&v8->n128_u64[1] + v24) = *(unint64_t *)((char *)v8->n128_u64 + v24);
              if (!v24)
              {
                v18 = v8;
                goto LABEL_10;
              }
              v65 = *(uint64_t *)((char *)&v8->n128_i64[-1] + v24);
              v66 = v23;
              v25 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
              v26 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
              v24 -= 8;
            }
            while ((mlir::DominanceInfo::properlyDominatesImpl(*a3, v25, v26, 1) & 1) != 0);
            v18 = (__n128 *)&v8->n128_i8[v24 + 8];
LABEL_10:
            v18->n128_u64[0] = v23;
          }
          v15 = v17 + 8;
          v16 += 8;
        }
        while (v17 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,mlir::mps::`anonymous namespace'::StitchedRegion::recursePrefixes(mlir::Operation *,std::vector<mlir::Value> &,mlir::Operation *,mlir::Operation *)::$_0 &,std::__wrap_iter<mlir::Value*>>(char *a1, char *a2, mlir::DominanceInfo **a3, unint64_t a4, char *a5)
{
  char *v5;
  char *v7;
  uint64_t v10;
  char *v11;
  mlir::Block **DefiningOp;
  mlir::Block **v13;
  int v14;
  __n128 result;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  mlir::Block **v24;
  mlir::Block **v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  mlir::Block **v29;
  mlir::Block **v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  mlir::Block **v39;
  mlir::Block **v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  if (a4)
  {
    v5 = a5;
    v7 = a1;
    if (a4 == 1)
    {
LABEL_9:
      *(_QWORD *)v5 = *(_QWORD *)v7;
      return result;
    }
    if (a4 == 2)
    {
      v11 = a2 - 8;
      v10 = *((_QWORD *)a2 - 1);
      v65 = *(_QWORD *)a1;
      v66 = v10;
      DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
      v13 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
      v14 = mlir::DominanceInfo::properlyDominatesImpl(*a3, DefiningOp, v13, 1);
      if (v14)
        v16 = v11;
      else
        v16 = v7;
      *(_QWORD *)v5 = *(_QWORD *)v16;
      v5 += 8;
      if (!v14)
        v7 = v11;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v31 = a4 >> 1;
      v32 = 8 * (a4 >> 1);
      v33 = &a1[v32];
      v34 = v5;
      v35 = v7;
      v36 = v33;
      do
      {
        if (v36 == a2)
        {
          if (v35 == v33)
            return result;
          v55 = &v7[8 * v31] - v35 - 8;
          if (v55 >= 0x38 && (unint64_t)(v34 - v35) >= 0x20)
          {
            v59 = 0;
            v60 = (v55 >> 3) + 1;
            v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            v56 = &v5[v61];
            v57 = &v35[v61];
            v62 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v63 = &v5[v59];
              result = *(__n128 *)&v35[v59];
              v64 = *(_OWORD *)&v35[v59 + 16];
              *(__n128 *)v63 = result;
              *((_OWORD *)v63 + 1) = v64;
              v59 += 32;
              v62 -= 4;
            }
            while (v62);
            if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v56 = v5;
            v57 = v35;
          }
          do
          {
            v58 = *(_QWORD *)v57;
            v57 += 8;
            *(_QWORD *)v56 = v58;
            v56 += 8;
          }
          while (v57 != v33);
          return result;
        }
        v37 = v36;
        v38 = *(_QWORD *)v36;
        v65 = *(_QWORD *)v35;
        v66 = v38;
        v39 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
        v40 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
        v41 = mlir::DominanceInfo::properlyDominatesImpl(*a3, v39, v40, 1);
        if (v41)
          v42 = v37;
        else
          v42 = v35;
        v36 = &v37[8 * v41];
        v35 += 8 * (v41 ^ 1u);
        *(_QWORD *)v5 = *(_QWORD *)v42;
        v5 += 8;
        v34 += 8;
      }
      while (v35 != v33);
      if (v36 != a2)
      {
        v43 = -8;
        if (!v41)
          v43 = 0;
        v44 = a2 - v37 + v43 - 8;
        if (v44 < 0x68)
          goto LABEL_51;
        v45 = 8;
        if (!v41)
          v45 = 0;
        if ((unint64_t)(v34 - &v37[v45]) < 0x20)
          goto LABEL_51;
        v46 = 0;
        v47 = (v44 >> 3) + 1;
        v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        v49 = &v5[v48];
        v50 = &v36[v48];
        v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = &v5[v46];
          result = *(__n128 *)&v36[v46];
          v53 = *(_OWORD *)&v36[v46 + 16];
          *(__n128 *)v52 = result;
          *((_OWORD *)v52 + 1) = v53;
          v46 += 32;
          v51 -= 4;
        }
        while (v51);
        v5 = v49;
        v36 = v50;
        if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          do
          {
            v54 = *(_QWORD *)v36;
            v36 += 8;
            *(_QWORD *)v5 = v54;
            v5 += 8;
          }
          while (v36 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v17 = a1 + 8;
      *(_QWORD *)a5 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v18 = 0;
        v19 = (uint64_t *)a5;
        do
        {
          v21 = (char *)v19;
          v22 = *v19++;
          v23 = *(_QWORD *)v17;
          v65 = v22;
          v66 = v23;
          v24 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
          v25 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
          v26 = (char *)v19;
          if (mlir::DominanceInfo::properlyDominatesImpl(*a3, v24, v25, 1))
          {
            *((_QWORD *)v21 + 1) = *(_QWORD *)v21;
            v26 = v5;
            if (v21 != v5)
            {
              v27 = v18;
              while (1)
              {
                v26 = &v5[v27];
                v28 = *(_QWORD *)v17;
                v65 = *(_QWORD *)&v5[v27 - 8];
                v66 = v28;
                v29 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v66);
                v30 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v65);
                if (!mlir::DominanceInfo::properlyDominatesImpl(*a3, v29, v30, 1))
                  break;
                *(_QWORD *)v26 = *((_QWORD *)v26 - 1);
                v27 -= 8;
                if (!v27)
                {
                  v26 = v5;
                  break;
                }
              }
            }
          }
          v20 = *(_QWORD *)v17;
          v17 += 8;
          *(_QWORD *)v26 = v20;
          v18 += 8;
        }
        while (v17 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,mlir::mps::`anonymous namespace'::StitchedRegion::recursePrefixes(mlir::Operation *,std::vector<mlir::Value> &,mlir::Operation *,mlir::Operation *)::$_0 &,std::__wrap_iter<mlir::Value*>>(__n128 *a1, char *a2, char *a3, mlir::DominanceInfo **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::Block **DefiningOp;
  mlir::Block **v19;
  __n128 result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  mlir::Block **v35;
  mlir::Block **v36;
  uint64_t v37;
  mlir::DominanceInfo *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  mlir::Block **v43;
  mlir::Block **v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __n128 *v65;
  __n128 *v66;
  uint64_t v67;
  __n128 v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __n128 *v74;
  __n128 *v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  mlir::Block **v80;
  mlir::Block **v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  mlir::Block **v88;
  mlir::Block **v89;
  int v90;
  char *v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  mlir::DominanceInfo **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v110 = a6;
  if (!a6)
    return result;
  while (v110 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    v15 = 0;
    v16 = -a5;
    while (1)
    {
      v17 = *(_QWORD *)a2;
      v111 = a1->n128_i64[v15 / 8];
      v112 = v17;
      DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
      v19 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
      if ((mlir::DominanceInfo::properlyDominatesImpl(*a4, DefiningOp, v19, 1) & 1) != 0)
        break;
      v15 += 8;
      if (__CFADD__(v16++, 1))
        return result;
    }
    v22 = -v16;
    v105 = (char *)a1 + v15;
    v106 = a8;
    v23 = v110;
    v107 = a7;
    v108 = (char *)a1;
    v109 = a4;
    if (-v16 >= v110)
    {
      if (v16 == -1)
      {
        v84 = a1->n128_i64[v15 / 8];
        a1->n128_u64[v15 / 8] = *(_QWORD *)a2;
        *(_QWORD *)a2 = v84;
        return result;
      }
      if (v16 > 0)
        v22 = 1 - v16;
      v37 = v22 >> 1;
      v28 = &a1->n128_i8[8 * (v22 >> 1) + v15];
      v26 = a2;
      if (a2 != a3)
      {
        v103 = v22 >> 1;
        v38 = *v109;
        v39 = (a3 - a2) >> 3;
        v26 = a2;
        do
        {
          v40 = &v26[8 * (v39 >> 1)];
          v42 = *(_QWORD *)v40;
          v41 = v40 + 8;
          v111 = *(_QWORD *)v28;
          v112 = v42;
          v43 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
          v44 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
          v45 = mlir::DominanceInfo::properlyDominatesImpl(v38, v43, v44, 1);
          if (v45)
            v39 += ~(v39 >> 1);
          else
            v39 >>= 1;
          if (v45)
            v26 = v41;
        }
        while (v39);
        v37 = v103;
        v23 = v110;
      }
      v25 = (v26 - a2) >> 3;
    }
    else
    {
      if (v110 >= 0)
        v24 = v110;
      else
        v24 = v110 + 1;
      v25 = v24 >> 1;
      v26 = &a2[8 * (v24 >> 1)];
      v27 = a2 - (char *)a1;
      v28 = a2;
      v29 = v27 - v15;
      if (v29)
      {
        v102 = v25;
        v104 = a3;
        v30 = v29 >> 3;
        v28 = v105;
        do
        {
          v31 = &v28[8 * (v30 >> 1)];
          v32 = *(_QWORD *)v26;
          v34 = *(_QWORD *)v31;
          v33 = v31 + 8;
          v111 = v34;
          v112 = v32;
          v35 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
          v36 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
          if (mlir::DominanceInfo::properlyDominatesImpl(*v109, v35, v36, 1))
          {
            v30 >>= 1;
          }
          else
          {
            v28 = v33;
            v30 += ~(v30 >> 1);
          }
        }
        while (v30);
        v25 = v102;
        a3 = v104;
        v23 = v110;
      }
      v37 = (uint64_t)(v28 - v108 - v15) >> 3;
    }
    a5 = -(v37 + v16);
    v46 = v23 - v25;
    v47 = a2;
    v48 = v23;
    v49 = v37;
    v50 = v25;
    v51 = std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<mlir::Value *>,std::__wrap_iter<mlir::Value *>>(v28, v47, v26);
    v52 = v49;
    v53 = v51;
    if (v52 + v50 >= v48 - (v52 + v50) - v16)
    {
      v55 = v26;
      v56 = a3;
      a4 = v109;
      v57 = v52;
      v58 = v50;
      a7 = v107;
      a2 = v28;
      a5 = v57;
      a3 = v53;
      a8 = v106;
      a1 = (__n128 *)v105;
      v110 = v58;
      if (!v58)
        return result;
    }
    else
    {
      v54 = v50;
      a7 = v107;
      a1 = (__n128 *)v53;
      a8 = v106;
      a2 = v26;
      a4 = v109;
      v110 = v46;
      if (!v46)
        return result;
    }
  }
  if (a5 <= v110)
  {
    if (a1 != (__n128 *)a2)
    {
      v69 = a2 - (char *)a1 - 8;
      v70 = a7;
      v71 = (char *)a1;
      if (v69 < 0x18)
        goto LABEL_88;
      v70 = a7;
      v71 = (char *)a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20)
        goto LABEL_88;
      v72 = (v69 >> 3) + 1;
      v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
      v70 = &a7[v73];
      v71 = (char *)a1 + v73;
      v74 = a1 + 1;
      v75 = (__n128 *)(a7 + 16);
      v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v74[-1];
        v77 = *v74;
        v75[-1] = result;
        *v75 = v77;
        v74 += 2;
        v75 += 2;
        v76 -= 4;
      }
      while (v76);
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_88:
        do
        {
          v78 = *(_QWORD *)v71;
          v71 += 8;
          *(_QWORD *)v70 = v78;
          v70 += 8;
        }
        while (v71 != a2);
      }
      if (v70 != a7)
      {
        while (a2 != a3)
        {
          v79 = *(_QWORD *)a2;
          v111 = *(_QWORD *)a7;
          v112 = v79;
          v80 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
          v81 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
          v82 = mlir::DominanceInfo::properlyDominatesImpl(*a4, v80, v81, 1);
          if (v82)
            v83 = a2;
          else
            v83 = a7;
          a2 += 8 * v82;
          a7 += 8 * (v82 ^ 1);
          a1->n128_u64[0] = *(_QWORD *)v83;
          a1 = (__n128 *)((char *)a1 + 8);
          if (a7 == v70)
            return result;
        }
        memmove(a1, a7, v70 - a7);
      }
    }
    return result;
  }
  v59 = a3 - a2;
  if (a3 == a2)
    return result;
  v60 = v59 - 8;
  if ((unint64_t)(v59 - 8) < 0x18)
  {
    v61 = a7;
    v62 = a2;
  }
  else
  {
    v61 = a7;
    v62 = a2;
    if ((unint64_t)(a7 - a2) >= 0x20)
    {
      v63 = (v60 >> 3) + 1;
      v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
      v61 = &a7[v64];
      v62 = &a2[v64];
      v65 = (__n128 *)(a2 + 16);
      v66 = (__n128 *)(a7 + 16);
      v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v65[-1];
        v68 = *v65;
        v66[-1] = result;
        *v66 = v68;
        v65 += 2;
        v66 += 2;
        v67 -= 4;
      }
      while (v67);
      if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_66;
    }
  }
  do
  {
    v85 = *(_QWORD *)v62;
    v62 += 8;
    *(_QWORD *)v61 = v85;
    v61 += 8;
  }
  while (v62 != a3);
LABEL_66:
  if (v61 == a7)
    return result;
  v86 = a3;
  while (a2 != (char *)a1)
  {
    v87 = *((_QWORD *)v61 - 1);
    v111 = *((_QWORD *)a2 - 1);
    v112 = v87;
    v88 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v112);
    v89 = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v111);
    v90 = mlir::DominanceInfo::properlyDominatesImpl(*a4, v88, v89, 1);
    if (v90)
      v91 = a2;
    else
      v91 = v61;
    if (v90)
      a2 -= 8;
    else
      v61 -= 8;
    *((_QWORD *)a3 - 1) = *((_QWORD *)v91 - 1);
    a3 -= 8;
    v86 -= 8;
    if (v61 == a7)
      return result;
  }
  v92 = v61 - a7 - 8;
  if (v92 < 0x58 || (unint64_t)(v61 - v86) < 0x20)
  {
    v93 = v61;
    v94 = a3;
LABEL_80:
    v95 = v94 - 8;
    do
    {
      v96 = *((_QWORD *)v93 - 1);
      v93 -= 8;
      *(_QWORD *)v95 = v96;
      v95 -= 8;
    }
    while (v93 != a7);
    return result;
  }
  v97 = 0;
  v98 = (v92 >> 3) + 1;
  v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
  v93 = &v61[-v99];
  v94 = &a3[-v99];
  v100 = v98 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = *(__n128 *)&v61[v97 - 16];
    v101 = &a3[v97];
    *((_OWORD *)v101 - 2) = *(_OWORD *)&v61[v97 - 32];
    *((__n128 *)v101 - 1) = result;
    v97 -= 32;
    v100 -= 4;
  }
  while (v100);
  if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_80;
  return result;
}

char *std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<mlir::Value *>,std::__wrap_iter<mlir::Value *>>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v12 = *(_QWORD *)__src;
      v13 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v13];
      *(_QWORD *)v4 = v12;
    }
    else if (a2 + 8 == a3)
    {
      v14 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v15 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v15);
      *(_QWORD *)__src = v14;
    }
    else
    {
      v6 = (a2 - __src) >> 3;
      v7 = (a3 - a2) >> 3;
      if (v6 == v7)
      {
        v8 = __src + 8;
        v9 = a2 + 8;
        do
        {
          v10 = *((_QWORD *)v8 - 1);
          *((_QWORD *)v8 - 1) = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = v10;
          if (v8 == a2)
            break;
          v8 += 8;
          v11 = v9 == a3;
          v9 += 8;
        }
        while (!v11);
        return a2;
      }
      else
      {
        v16 = (a3 - a2) >> 3;
        v17 = (a2 - __src) >> 3;
        do
        {
          v18 = v17;
          v17 = v16;
          v16 = v18 % v16;
        }
        while (v16);
        if (v17)
        {
          v19 = &__src[8 * v17];
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            v20 = v21;
            v22 = &v19[8 * v6];
            v23 = v19;
            do
            {
              v24 = v22;
              *(_QWORD *)v23 = *(_QWORD *)v22;
              v25 = (a3 - v22) >> 3;
              v26 = __OFSUB__(v6, v25);
              v28 = v6 - v25;
              v27 = (v28 < 0) ^ v26;
              v22 = &__src[8 * v28];
              if (v27)
                v22 = &v24[8 * v6];
              v23 = v24;
            }
            while (v22 != v19);
            *(_QWORD *)v24 = v20;
          }
          while (v19 != __src);
        }
        return &__src[8 * v7];
      }
    }
  }
  return v4;
}

_QWORD *std::__hash_table<mlir::Value,std::hash<mlir::Value>,std::equal_to<mlir::Value>,std::allocator<mlir::Value>>::__emplace_unique_key_args<mlir::Value,mlir::Value const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = HIDWORD(*a2);
  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_41;
    if (prime < v9)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v9)
LABEL_41:
        std::__hash_table<std::__hash_value_type<ZinIrDimension,unsigned long>,std::__unordered_map_hasher<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::hash<ZinIrDimension>,std::equal_to<ZinIrDimension>,true>,std::__unordered_map_equal<ZinIrDimension,std::__hash_value_type<ZinIrDimension,unsigned long>,std::equal_to<ZinIrDimension>,std::hash<ZinIrDimension>,true>,std::allocator<std::__hash_value_type<ZinIrDimension,unsigned long>>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *i = *v24;
LABEL_55:
    *v24 = i;
    goto LABEL_56;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mps::`anonymous namespace'::StitchedRegion::StitchedRegion(mlir::mps::StitchingPass *,mlir::OpBuilder &,mlir::Operation *,mlir::mps::BaseFusableCoreOps *,BOOL)::$_0>(_BYTE **a1, mlir::mps::_anonymous_namespace_ *this, mlir::Operation *a3)
{
  uint64_t result;

  if ((result & 1) == 0)
    **a1 = 1;
  return result;
}

void std::__shared_ptr_emplace<mlir::mps::DefaultFusableCoreOps>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E51FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::mps::DefaultFusableCoreOps>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E0E51FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<mlir::mps::DefaultFusableCoreOps>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

BOOL mlir::mps::DefaultFusableCoreOps::isCoreOperandStitchable(mlir::mps::DefaultFusableCoreOps *this, mlir::Operation *a2, int a3)
{
  void *v3;

  v3 = *(void **)(*((_QWORD *)a2 + 6) + 16);
  return v3 != &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id
      && v3 != &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id
      || a3 < 1;
}

uint64_t mlir::mps::DefaultFusableCoreOps::isCorePostfixStitchable(mlir::mps::DefaultFusableCoreOps *this, mlir::Operation *a2)
{
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::TypeInferencePass::inferTypes(mlir::mps::_anonymous_namespace_::TypeInferencePass *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t Context;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t AttrDictionary;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t OperandRange;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  char *v84;
  uint64_t i;
  uint64_t NextResultAtOffset;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64x2_t *v102;
  int8x16_t *v103;
  unint64_t v104;
  int64x2_t *v105;
  int8x16_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v117;
  unsigned int v118;
  uint64_t *v119;
  unint64_t v120;
  int64x2_t v121;
  uint64_t v122;
  const void **v123[4];
  __int16 v124;
  _QWORD v125[2];
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  unint64_t v131;
  unint64_t v132[2];
  __int128 v133;
  _OWORD v134[11];
  __int128 v135;
  _QWORD v136[6];

  v136[4] = *MEMORY[0x1E0C80C00];
  v3 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultType>(void)::Empty>>();
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v3))
  {
    v130 = 0uLL;
    if ((*((_BYTE *)this + 46) & 0x80) != 0)
    {
      v4 = *((_QWORD *)this + 9);
      v5 = *((unsigned int *)this + 17);
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    *(_QWORD *)&v135 = v4;
    *((_QWORD *)&v135 + 1) = v5;
    mlir::OperandRange::getTypes((uint64_t *)&v135, (uint64_t *)&v133);
    v7 = *((_QWORD *)&v133 + 1);
    v6 = v133;
    v8 = v134[0];
    if (v133 != v134[0])
    {
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 32 * v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v9)
          goto LABEL_14;
        v10 = *v9;
        v11 = mlir::TypeID::get<mlir::ShapedType>();
        v12 = *(unsigned int *)(v10 + 16);
        if (!(_DWORD)v12)
          goto LABEL_14;
        v13 = *(_QWORD **)(v10 + 8);
        v14 = &v13[2 * v12];
        do
        {
          v15 = v12 >> 1;
          v16 = &v13[2 * (v12 >> 1)];
          v18 = *v16;
          v17 = v16 + 2;
          v12 += ~(v12 >> 1);
          if (v18 < v11)
            v13 = v17;
          else
            v12 = v15;
        }
        while (v12);
        if (v13 != v14 && *v13 == v11)
          v19 = v13[1];
        else
LABEL_14:
          v19 = 0;
        *(_QWORD *)&v135 = v9;
        *((_QWORD *)&v135 + 1) = v19;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v135))
        {
          ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v135);
          if (!v21)
          {
LABEL_43:
            v130 = v135;
            break;
          }
          v22 = 8 * v21;
          while (*ArgAttrsAttr != 0x8000000000000000)
          {
            ++ArgAttrsAttr;
            v22 -= 8;
            if (!v22)
              goto LABEL_43;
          }
        }
        if (!(_QWORD)v130
          || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130) & 1) == 0
          && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v135))
        {
          v130 = v135;
        }
        ++v7;
      }
      while (__PAIR128__(v7, v6) != v8);
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130))
      goto LABEL_88;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130))
    {
      v43 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
      if (!v44)
        goto LABEL_88;
      v45 = 8 * v44;
      while (*v43 != 0x8000000000000000)
      {
        ++v43;
        v45 -= 8;
        if (!v45)
          goto LABEL_88;
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
    v56 = v55;
    v122 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
    v58 = v57;
    *(_QWORD *)&v135 = v136;
    *((_QWORD *)&v135 + 1) = 0x400000000;
    if (!v56)
      goto LABEL_70;
    if (v56 < 5)
    {
      v59 = 0;
      v60 = v56;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, v136, v56, 8);
      v59 = DWORD2(v135);
      v60 = v56 - DWORD2(v135);
      if (v56 == DWORD2(v135))
        goto LABEL_69;
    }
    bzero((void *)(v135 + 8 * v59), 8 * v60);
LABEL_69:
    DWORD2(v135) = v56;
LABEL_70:
    if ((*((_BYTE *)this + 46) & 0x80) != 0)
    {
      v62 = *((_QWORD *)this + 9);
      v63 = *((unsigned int *)this + 17);
    }
    else
    {
      v62 = 0;
      v63 = 0;
    }
    *(_QWORD *)&v133 = v62;
    *((_QWORD *)&v133 + 1) = v63;
    mlir::OperandRange::getTypes((uint64_t *)&v133, &v126);
    v64 = v126;
    v65 = v127;
    v66 = v128;
    v67 = v129;
    if (v126 == v128 && v127 == v129)
    {
LABEL_74:
      v68 = v135;
      v69 = DWORD2(v135);
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v130);
      v71 = (uint64_t *)mlir::RankedTensorType::get(v68, v69, OperandRange, 0);
      v41 = (uint64_t)v71;
      if (!v71)
        goto LABEL_83;
      v72 = *v71;
      v73 = mlir::TypeID::get<mlir::ShapedType>();
      v74 = *(unsigned int *)(v72 + 16);
      if (!(_DWORD)v74)
        goto LABEL_83;
      v75 = *(_QWORD **)(v72 + 8);
      v76 = &v75[2 * v74];
      do
      {
        v77 = v74 >> 1;
        v78 = &v75[2 * (v74 >> 1)];
        v80 = *v78;
        v79 = v78 + 2;
        v74 += ~(v74 >> 1);
        if (v80 < v73)
          v75 = v79;
        else
          v74 = v77;
      }
      while (v74);
      if (v75 != v76 && *v75 == v73)
        v81 = v75[1];
      else
LABEL_83:
        v81 = 0;
      *(_QWORD *)&v130 = v41;
      *((_QWORD *)&v130 + 1) = v81;
      v82 = 1;
      goto LABEL_85;
    }
    v121 = vdupq_n_s64(0x8000000000000000);
    while (1)
    {
      v87 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v64 + 32 * v65 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v87)
        goto LABEL_106;
      v88 = *v87;
      v89 = mlir::TypeID::get<mlir::ShapedType>();
      v90 = *(unsigned int *)(v88 + 16);
      if (!(_DWORD)v90)
        goto LABEL_106;
      v91 = *(_QWORD **)(v88 + 8);
      v92 = &v91[2 * v90];
      do
      {
        v93 = v90 >> 1;
        v94 = &v91[2 * (v90 >> 1)];
        v96 = *v94;
        v95 = v94 + 2;
        v90 += ~(v90 >> 1);
        if (v96 < v89)
          v91 = v95;
        else
          v90 = v93;
      }
      while (v90);
      if (v91 != v92 && *v91 == v89)
        v97 = v91[1];
      else
LABEL_106:
        v97 = 0;
      v125[0] = v87;
      v125[1] = v97;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v125))
      {
        v98 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v125);
        if (v58 != v99)
        {
          v123[0] = (const void **)"input shapes are incompatible";
          v124 = 259;
          mlir::Operation::emitOpError((uint64_t *)this, v123, (uint64_t)&v133);
          v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v133);
          if ((_QWORD)v133)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v133);
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v133 + 8);
          v82 = 0;
LABEL_85:
          if ((_QWORD *)v135 != v136)
            free((void *)v135);
          if (v82)
          {
LABEL_88:
            v83 = *((unsigned int *)this + 9);
            if ((_DWORD)v83)
              v84 = (char *)this - 16;
            else
              v84 = 0;
            if ((_DWORD)v83)
            {
              for (i = 0; i != v83; ++i)
              {
                NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v84, i);
                *(_QWORD *)(NextResultAtOffset + 8) = *(_QWORD *)(NextResultAtOffset + 8) & 7 | v130;
              }
            }
            return 1;
          }
          return v41;
        }
        if (v56)
        {
          v100 = v135;
          if (v56 < 6)
          {
            v101 = 0;
LABEL_117:
            v107 = v56 - v101;
            v108 = 8 * v101;
            v109 = (uint64_t *)(v122 + 8 * v101);
            v110 = (uint64_t *)(v98 + v108);
            v111 = (_QWORD *)(v100 + v108);
            do
            {
              v113 = *v109++;
              v112 = v113;
              v115 = *v110++;
              v114 = v115;
              if (v115 != 0x8000000000000000 && v112 == 0x8000000000000000)
                v112 = v114;
              *v111++ = v112;
              --v107;
            }
            while (v107);
            goto LABEL_125;
          }
          v101 = 0;
          if ((unint64_t)(v135 - v122) < 0x20)
            goto LABEL_117;
          if ((unint64_t)(v135 - v98) < 0x20)
            goto LABEL_117;
          v102 = (int64x2_t *)(v98 + 16);
          v103 = (int8x16_t *)(v135 + 16);
          v104 = v56 & 0xFFFFFFFFFFFFFFFCLL;
          v105 = (int64x2_t *)(v122 + 16);
          do
          {
            v106 = vbslq_s8(vornq_s8((int8x16_t)vceqq_s64(*v102, v121), (int8x16_t)vceqq_s64(*v105, v121)), *(int8x16_t *)v105, *(int8x16_t *)v102);
            v103[-1] = vbslq_s8(vornq_s8((int8x16_t)vceqq_s64(v102[-1], v121), (int8x16_t)vceqq_s64(v105[-1], v121)), (int8x16_t)v105[-1], (int8x16_t)v102[-1]);
            *v103 = v106;
            v105 += 2;
            v102 += 2;
            v103 += 2;
            v104 -= 4;
          }
          while (v104);
          v101 = v56 & 0xFFFFFFFFFFFFFFFCLL;
          if (v56 != (v56 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_117;
        }
      }
LABEL_125:
      ++v65;
      if (v64 == v66 && v65 == v67)
        goto LABEL_74;
    }
  }
  if (*(_UNKNOWN **)(*((_QWORD *)this + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::ConstantOp,void>::id)
    v23 = (const void **)this;
  else
    v23 = 0;
  v123[0] = v23;
  if (v23)
  {
    v24 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)v123);
    *(_QWORD *)&v135 = mlir::mps::ConstantOp::getValue((mlir::mps::ConstantOp *)v123);
    *((_QWORD *)&v135 + 1) = v25;
    *(_QWORD *)&v133 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v135);
    *((_QWORD *)&v133 + 1) = v26;
    v27 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v133);
    v29 = v28;
    v30 = (uint64_t *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v30)
      goto LABEL_41;
    v31 = *v30;
    v32 = mlir::TypeID::get<mlir::ShapedType>();
    v33 = *(unsigned int *)(v31 + 16);
    if (!(_DWORD)v33)
      goto LABEL_41;
    v34 = *(_QWORD **)(v31 + 8);
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_41:
      v40 = 0;
    *(_QWORD *)&v135 = v30;
    *((_QWORD *)&v135 + 1) = v40;
    *(_QWORD *)&v133 = v27;
    *((_QWORD *)&v133 + 1) = v29;
    v41 = 1;
    LOBYTE(v134[0]) = 1;
    v42 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v135);
    *(_QWORD *)(v24 + 8) = *(_QWORD *)(v24 + 8) & 7 | mlir::ShapedType::cloneWith((uint64_t *)&v135, &v133, v42);
    return v41;
  }
  if (mlir::OpInterface<mlir::InferTypeOpInterface,mlir::detail::InferTypeOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this))
  {
    *(_QWORD *)&v135 = this;
    *((_QWORD *)&v135 + 1) = mlir::OpInterface<mlir::InferTypeOpInterface,mlir::detail::InferTypeOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
    if (this)
    {
      *(_QWORD *)&v133 = v134;
      *((_QWORD *)&v133 + 1) = 0x200000000;
      Context = mlir::Attribute::getContext((mlir::mps::_anonymous_namespace_::TypeInferencePass *)((char *)this + 24));
      v47 = *((_QWORD *)this + 3);
      if ((*((_BYTE *)this + 46) & 0x80) != 0)
      {
        v48 = *((_QWORD *)this + 9);
        v49 = *((unsigned int *)this + 17);
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
      mlir::ValueRange::ValueRange(v132, v48, v49);
      AttrDictionary = mlir::Operation::getAttrDictionary(this);
      v51 = *((unsigned int *)this + 11);
      if (HIBYTE(*((_DWORD *)this + 11)))
        v52 = (char *)this + 16 * ((v51 >> 23) & 1) + 64;
      else
        v52 = 0;
      v53 = v51 & 0x7FFFFF;
      if ((v51 & 0x7FFFFF) != 0)
      {
        v54 = (((unint64_t)this + 16 * ((v51 >> 23) & 1) + ((v51 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
            + 32 * *((unsigned int *)this + 10);
      }
      else
      {
        v54 = 0;
        v53 = 0;
      }
      mlir::ValueRange::ValueRange(&v131, v54, v53);
      v41 = mlir::InferTypeOpInterface::inferReturnTypes((uint64_t)&v135, Context, v47, 1, v132[0], v132[1], AttrDictionary, (uint64_t)v52);
      if ((_BYTE)v41)
      {
        v117 = (_QWORD *)v133;
        if (*((_DWORD *)this + 9))
        {
          *((_QWORD *)this - 1) = *((_QWORD *)this - 1) & 7 | *(_QWORD *)v133;
          if (*((_DWORD *)this + 9) >= 2u)
          {
            *((_QWORD *)this - 3) = *((_QWORD *)this - 3) & 7 | v117[1];
            if (*((_DWORD *)this + 9) >= 3u)
            {
              *((_QWORD *)this - 5) = *((_QWORD *)this - 5) & 7 | v117[2];
              if (*((_DWORD *)this + 9) >= 4u)
              {
                *((_QWORD *)this - 7) = *((_QWORD *)this - 7) & 7 | v117[3];
                if (*((_DWORD *)this + 9) >= 5u)
                {
                  *((_QWORD *)this - 9) = *((_QWORD *)this - 9) & 7 | v117[4];
                  v118 = *((_DWORD *)this + 9);
                  if (v118 >= 6)
                  {
                    *((_QWORD *)this - 11) = *((_QWORD *)this - 11) & 7 | v117[5];
                    if (v118 != 6)
                    {
                      v119 = (uint64_t *)((char *)this - 112);
                      v120 = 6;
                      do
                      {
                        *v119 = *v119 & 7 | v117[v120];
                        v119 -= 3;
                        ++v120;
                      }
                      while (v120 < *((unsigned int *)this + 9));
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v117 = (_QWORD *)v133;
      }
      if (v117 != (_QWORD *)v134)
        free(v117);
      return v41;
    }
  }
  else
  {
    v135 = 0uLL;
  }
  if (*(_UNKNOWN **)(*((_QWORD *)this + 6) + 16) != &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
    return 1;
}

_QWORD *mlir::mps::createTypeInferencePass@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  _QWORD *result;
  char v5;
  char *v6;
  __n128 v7;

  v3 = operator new(0x228uLL);
  bzero(v3 + 4, 0x208uLL);
  v3[2] = "func.func";
  v3[3] = 9;
  *((_BYTE *)v3 + 32) = 1;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  v3[22] = 0;
  v3[23] = v3 + 25;
  *((_DWORD *)v3 + 49) = 4;
  v3[29] = v3 + 31;
  *((_DWORD *)v3 + 61) = 4;
  v3[35] = 0;
  v3[36] = 0;
  v3[37] = 0x1000000000;
  *((_OWORD *)v3 + 19) = 0u;
  *((_OWORD *)v3 + 20) = 0u;
  v3[42] = 0;
  *v3 = off_1E0E4BA68;
  v7.n128_u64[0] = (unint64_t)"Enable folding.";
  v7.n128_u64[1] = 15;
  v5 = 1;
  v6 = &v5;
  result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>(v3 + 43, v3 + 19, (uint64_t)"fold", 4, &v7, &v6);
  v3[43] = &off_1E0E4C320;
  v3[67] = &unk_1E0E4C3A0;
  *v3 = off_1E0E495E8;
  *a1 = v3;
  return result;
}

uint64_t mlir::mps::`anonymous namespace'::TypeInferencePass::inferTypes(uint64_t a1)
{
  uint64_t v1;
  mlir::GenericProgramPoint **v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Results;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v26;
  uint64_t i;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *ArgAttrsAttr;
  uint64_t v32;
  uint64_t v33;
  uint64_t ElementTypeOrSelf;
  const char *v35;
  mlir::MLIRContext *Context;
  uint64_t Inputs;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t InterfaceFor;
  _QWORD v42[2];
  const void **v43;
  __int16 v44;
  uint64_t *v45;
  unint64_t v46[2];
  unint64_t v47[2];
  uint64_t FunctionType;
  _QWORD v49[2];
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD v53[6];

  v53[4] = *MEMORY[0x1E0C80C00];
  v45 = (uint64_t *)a1;
  v1 = *(_QWORD *)(((a1
                   + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a1 + 40));
  if (v1)
    v2 = (mlir::GenericProgramPoint **)(v1 - 8);
  else
    v2 = 0;
  mlir::Block::getTerminator(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(void **)(*(_QWORD *)(v3 + 48) + 16);
  v6 = v5 == &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id ? v3 : 0;
  if (v5 != &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id)
    return 0;
  FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v45);
  Results = mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionType);
  v11 = v10;
  if ((*(_BYTE *)(v4 + 46) & 0x80) != 0)
  {
    v12 = *(_QWORD **)(v4 + 72);
    v13 = *(unsigned int *)(v4 + 68);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v51 = v12;
  v52 = v13;
  mlir::OperandRange::getTypes((uint64_t *)&v51, &FunctionType);
  v51 = v53;
  v52 = 0x400000000;
  v14 = FunctionType;
  v15 = v49[0];
  v16 = v49[1];
  v17 = v50;
  v18 = v50 - LODWORD(v49[0]);
  if ((unint64_t)(v50 - v49[0]) < 5)
  {
    v19 = 0;
    v20 = 0;
    if (v50 != v49[0])
      goto LABEL_18;
LABEL_17:
    if (v14 == v16)
      goto LABEL_25;
    goto LABEL_18;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v53, v50 - v49[0], 8);
  v19 = v52;
  v20 = v52;
  if (v17 == v15)
    goto LABEL_17;
LABEL_18:
  v21 = &v51[v19];
  v22 = ~v15 + v17;
  v23 = (uint64_t *)(v14 + 32 * v15 + 24);
  do
  {
    v24 = *v23;
    v23 += 4;
    *v21++ = *(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF8;
    v26 = v22-- != 0;
  }
  while (v14 != v16 || v26);
  v20 = v52;
LABEL_25:
  LODWORD(v52) = v20 + v18;
  if ((*(_BYTE *)(v4 + 46) & 0x80) == 0)
  {
    if (!v11)
      goto LABEL_27;
LABEL_46:
    v35 = "number of types for the function type and return op differ";
LABEL_47:
    v43 = (const void **)v35;
    v44 = 259;
    mlir::OpState::emitOpError(&v45, &v43, (uint64_t)&FunctionType);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionType);
    if (FunctionType)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionType);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v49);
    goto LABEL_50;
  }
  if (v11 != *(_DWORD *)(v6 + 68))
    goto LABEL_46;
LABEL_27:
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v28 = *(_QWORD **)(Results + 8 * i);
      v29 = (uint64_t *)v51[i];
      v42[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v29);
      v42[1] = v30;
      if (v42[0])
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v42))
          continue;
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
        if (v32)
        {
          v33 = 8 * v32;
          while (*ArgAttrsAttr != 0x8000000000000000)
          {
            ++ArgAttrsAttr;
            v33 -= 8;
            if (!v33)
              goto LABEL_36;
          }
          continue;
        }
      }
LABEL_36:
      if (!mlir::verifyCompatibleShape(v28, v29))
      {
        v35 = "incompatible shapes for return types";
        goto LABEL_47;
      }
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v28);
      if (ElementTypeOrSelf != mlir::getElementTypeOrSelf(v29))
      {
        v35 = "element types for the function type and return op differ";
        goto LABEL_47;
      }
    }
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v45 + 3));
  FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v45);
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionType);
  mlir::ValueRange::ValueRange(v47, Inputs, v38);
  mlir::ValueRange::ValueRange(v46, (uint64_t)v51, v52);
  v39 = mlir::FunctionType::get(Context, v47[0], v47[1], v46[0], v46[1]);
  v40 = v45;
  if (v45)
    InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v45);
  else
    InterfaceFor = 0;
  mlir::function_interface_impl::setFunctionType((uint64_t)v40, InterfaceFor, v39);
  v7 = 1;
LABEL_50:
  if (v51 != v53)
    free(v51);
  return v7;
}

void mlir::mps::`anonymous namespace'::TypeInferencePass::~TypeInferencePass(mlir::mps::_anonymous_namespace_::TypeInferencePass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)this = off_1E0E4BA68;
  *((_QWORD *)this + 43) = &unk_1E0E23520;
  v2 = (char *)this + 504;
  v3 = (char *)*((_QWORD *)this + 66);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 43) = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)this + 55);
  if (v5 != *((void **)this + 54))
    free(v5);
  v6 = (char *)*((_QWORD *)this + 51);
  if (v6 != (char *)this + 424)
    free(v6);
  mlir::Pass::~Pass(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  void *v7;

  *(_QWORD *)this = off_1E0E4BA68;
  *((_QWORD *)this + 43) = &unk_1E0E23520;
  v2 = (char *)this + 504;
  v3 = (char *)*((_QWORD *)this + 66);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 43) = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)this + 55);
  if (v5 != *((void **)this + 54))
    free(v5);
  v6 = (char *)*((_QWORD *)this + 51);
  if (v6 != (char *)this + 424)
    free(v6);
  mlir::Pass::~Pass(this);
  operator delete(v7);
}

const char *mlir::mps::MPSTypeInferenceBase<mlir::mps::`anonymous namespace'::TypeInferencePass>::getName()
{
  return "MPSTypeInference";
}

const char *mlir::mps::MPSTypeInferenceBase<mlir::mps::`anonymous namespace'::TypeInferencePass>::getArgument()
{
  return "mps-type-inference";
}

const char *mlir::mps::MPSTypeInferenceBase<mlir::mps::`anonymous namespace'::TypeInferencePass>::getDescription()
{
  return "Infer types of MPS ops.";
}

uint64_t *mlir::mps::`anonymous namespace'::TypeInferencePass::runOnOperation(mlir::mps::_anonymous_namespace_::TypeInferencePass *this)
{
  mlir::ForwardIterator *v1;
  uint64_t *result;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t FunctionType;
  mlir::ForwardIterator *v12;
  _QWORD v13[2];

  v1 = (mlir::ForwardIterator *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v13[0] = this;
  v12 = v1;
  FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v12);
  result = (uint64_t *)mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionType);
  if (v3)
  {
    v4 = (uint64_t **)result;
    v5 = (uint64_t **)&result[v3];
    while (1)
    {
      for (i = *v4; i; i = (uint64_t *)i[1])
      {
        v7 = *(_QWORD *)(*i + 136);
        if (v7 != mlir::TypeID::get<mlir::mpsx::ListType>())
          break;
      }
      result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(i);
      v13[0] = result;
      v13[1] = v8;
      if (result)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v13))
        result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v13);
        if (v9)
          break;
      }
LABEL_3:
      if (++v4 == v5)
        return result;
    }
    v10 = 8 * v9;
    while (*result != 0x8000000000000000)
    {
      ++result;
      v10 -= 8;
      if (!v10)
        goto LABEL_3;
    }
  }
  return result;
}

_QWORD *mlir::mps::MPSTypeInferenceBase<mlir::mps::`anonymous namespace'::TypeInferencePass>::clonePass@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;
  char v4;
  char *v5;
  __n128 v6;

  v2 = operator new(0x228uLL);
  v2[2] = "func.func";
  v2[3] = 9;
  *((_BYTE *)v2 + 32) = 1;
  *((_BYTE *)v2 + 40) = 0;
  *((_BYTE *)v2 + 120) = 0;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  v2[22] = 0;
  v2[23] = v2 + 25;
  v2[24] = 0x400000000;
  v2[29] = v2 + 31;
  v2[30] = 0x400000000;
  v2[35] = 0;
  v2[36] = 0;
  v2[37] = 0x1000000000;
  v2[42] = 0;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *v2 = off_1E0E4BA68;
  v6.n128_u64[0] = (unint64_t)"Enable folding.";
  v6.n128_u64[1] = 15;
  v4 = 1;
  v5 = &v4;
  result = mlir::detail::PassOptions::Option<BOOL,llvm::cl::parser<BOOL>>::Option<llvm::cl::desc,llvm::cl::initializer<BOOL>>(v2 + 43, v2 + 19, (uint64_t)"fold", 4, &v6, &v5);
  v2[43] = &off_1E0E4C320;
  v2[67] = &unk_1E0E4C3A0;
  *v2 = off_1E0E495E8;
  *a1 = v2;
  return result;
}

const char *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mps::`anonymous namespace'::TypeInferencePass::runOnOperation(void)::$_0>(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, mlir::Operation *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *i;
  uint64_t v43;
  uint64_t v44;
  mlir::Operation *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  const double *v54;
  unsigned __int128 *v55;
  unint64_t v56;
  const double *v57;
  unsigned __int128 v58;
  unsigned __int128 v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  mlir::MLIRContext *Context;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD v72[12];
  void (**v73)(mlir::mps::_anonymous_namespace_::TypeInferencePassListener *__hidden);
  int v74;
  _QWORD **v75;
  uint64_t v76[2];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD v83[6];

  v83[4] = *MEMORY[0x1E0C80C00];
  v33 = *a1;
  v34 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v34)
    v35 = (const char *)(a2 - 16);
  else
    v35 = 0;
  v66 = v35;
  v67 = v34;
  result = (const char *)mlir::OperandRange::getTypes((uint64_t *)&v66, &v77);
  v37 = v77;
  v38 = v78;
  v39 = v79;
  v40 = v80;
  if (v77 != v79 || v78 != v80)
  {
    while (1)
    {
      for (i = (uint64_t *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v37, v38) + 8) & 0xFFFFFFFFFFFFFFF8);
            i;
            i = (uint64_t *)i[1])
      {
        v43 = *(_QWORD *)(*i + 136);
        if (v43 != mlir::TypeID::get<mlir::mpsx::ListType>())
          break;
      }
      result = (const char *)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(i);
      v66 = result;
      v67 = v44;
      if (result)
      {
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v66))
          goto LABEL_20;
        result = (const char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
        if (v45)
          break;
      }
LABEL_17:
      ++v38;
      if (v37 == v39 && v38 == v40)
        goto LABEL_24;
    }
    v46 = 8 * (_QWORD)v45;
    while (*(_QWORD *)result != 0x8000000000000000)
    {
      result += 8;
      v46 -= 8;
      if (!v46)
        goto LABEL_17;
    }
LABEL_20:
    if (!(_BYTE)result)
    {
      v66 = "failed to fold or infer return types";
      LOWORD(v70) = 259;
      mlir::Operation::emitOpError((uint64_t *)a2, (const void ***)&v66, (uint64_t)&v77);
      if (v77)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v77);
      result = (const char *)std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v78);
      *(_QWORD *)(v33 + 40) |= 4uLL;
    }
  }
LABEL_24:
  if (*(_BYTE *)(v33 + 472))
  {
    if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
    {
      v47 = *(_QWORD *)(a2 + 72);
      v48 = *(unsigned int *)(a2 + 68);
      v81 = v83;
      v82 = 0x400000000;
      if (v48 < 5)
      {
        if (!(_DWORD)v48)
        {
          v63 = 0;
          goto LABEL_41;
        }
        v49 = 0;
        v50 = v83;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, v83, v48, 8);
        v49 = v82;
        v50 = v81;
      }
      v51 = &v50[v49];
      if (v48 >= 0xD
        && ((unint64_t)v51 >= v47 + 32 * v48 || v47 + 24 >= (unint64_t)&v50[v49 + v48]))
      {
        v53 = v48 & 3;
        if ((v48 & 3) == 0)
          v53 = 4;
        v52 = v48 - v53;
        v51 += v52;
        v54 = (const double *)(v47 + 88);
        v55 = (unsigned __int128 *)&v50[v49 + 2];
        v56 = v52;
        do
        {
          v57 = v54 - 8;
          v58 = (unsigned __int128)vld4q_f64(v57);
          v59 = (unsigned __int128)vld4q_f64(v54);
          *(v55 - 1) = v58;
          *v55 = v59;
          v54 += 16;
          v55 += 2;
          v56 -= 4;
        }
        while (v56);
      }
      else
      {
        v52 = 0;
      }
      v60 = v48 - v52;
      v61 = (uint64_t *)(v47 + 32 * v52 + 24);
      do
      {
        v62 = *v61;
        v61 += 4;
        *v51++ = v62;
        --v60;
      }
      while (v60);
      v63 = v82;
    }
    else
    {
      LODWORD(v48) = 0;
      v63 = 0;
      v81 = v83;
      HIDWORD(v82) = 4;
    }
LABEL_41:
    LODWORD(v82) = v63 + v48;
    v75 = &v81;
    v74 = 1;
    v73 = off_1E0E4AD18;
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v65 = mlir::TypeID::get<mlir::DialectFoldInterface>();
    v76[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
    v76[1] = 76;
    llvm::StringRef::find(v76, "DesiredTypeName = ", 0x12uLL, 0);
    mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase((uint64_t)v72, Context, v65);
    v72[8] = Context;
    v72[9] = &v73;
    v72[10] = 0;
    v72[11] = 0;
    v72[0] = off_1E0E47DD0;
    v72[7] = off_1E0E25938;
    mlir::OperationFolder::tryToFold((int32x2_t *)&v66, (mlir::Operation *)a2, 0);
    mlir::OperationFolder::~OperationFolder((mlir::OperationFolder *)&v66);
  }
  return result;
}

void mlir::mps::`anonymous namespace'::TypeInferencePass::fold(mlir::Operation *)::$_0::operator()(uint64_t a1)
{
  mlir::Operation **v1;
  _QWORD ***v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  mlir::Operation *DefiningOp;
  uint64_t v7;
  mlir::Operation **v8;
  uint64_t v9;
  mlir::Operation **v10;
  mlir::Operation **v11;
  unsigned int v12;
  mlir::Operation **v13;
  uint64_t v14;
  mlir::Operation **v15;
  mlir::Operation *v16;
  _QWORD *v17;
  mlir::Operation **v18;
  mlir::Operation **v19;
  uint64_t v20;
  int v21;
  _BYTE v22[32];

  v1 = (mlir::Operation **)v22;
  v18 = (mlir::Operation **)v22;
  v19 = (mlir::Operation **)v22;
  v20 = 4;
  v21 = 0;
  v2 = *(_QWORD ****)a1;
  v3 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  if ((_DWORD)v3)
  {
    v4 = *v2;
    v5 = (uint64_t)&(*v2)[v3];
    while (1)
    {
      v17 = *v4;
      if (mlir::Value::getDefiningOp((mlir::Value *)&v17) && !*v17)
      {
        DefiningOp = (mlir::Operation *)mlir::Value::getDefiningOp((mlir::Value *)&v17);
        if (v19 != v18)
          goto LABEL_3;
        v7 = HIDWORD(v20);
        if (HIDWORD(v20))
        {
          v8 = 0;
          v9 = 8 * HIDWORD(v20);
          v10 = v19;
          while (*v10 != DefiningOp)
          {
            if (*v10 == (mlir::Operation *)-2)
              v8 = v10;
            ++v10;
            v9 -= 8;
            if (!v9)
            {
              if (!v8)
                goto LABEL_16;
              *v8 = DefiningOp;
              --v21;
              goto LABEL_4;
            }
          }
          goto LABEL_4;
        }
LABEL_16:
        if (HIDWORD(v20) < v20)
        {
          ++HIDWORD(v20);
          v19[v7] = DefiningOp;
        }
        else
        {
LABEL_3:
          llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v18, DefiningOp);
        }
      }
LABEL_4:
      if (++v4 == (_QWORD **)v5)
      {
        v1 = v18;
        v11 = v19;
        v12 = v20;
        LODWORD(v3) = HIDWORD(v20);
        goto LABEL_20;
      }
    }
  }
  v12 = 4;
  v11 = (mlir::Operation **)v22;
LABEL_20:
  if (v11 == v1)
    v3 = v3;
  else
    v3 = v12;
  v13 = v11;
  if ((_DWORD)v3)
  {
    v14 = 0;
    while ((unint64_t)v11[v14] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v3 == ++v14)
        goto LABEL_36;
    }
    v13 = &v11[v14];
  }
  v15 = &v11[v3];
  if (v13 != v15)
  {
    do
    {
      v16 = *v13++;
      mlir::Operation::erase(v16);
      if (v13 == v15)
        break;
      while ((unint64_t)*v13 >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (++v13 == v15)
          goto LABEL_35;
      }
    }
    while (v13 != v15);
LABEL_35:
    v1 = v18;
    v11 = v19;
  }
LABEL_36:
  if (v11 != v1)
    free(v11);
}

uint64_t mlir::mps::`anonymous namespace'::TypeInferencePassListener::notifyOperationInserted(mlir::mps::_anonymous_namespace_::TypeInferencePassListener *this, mlir::Operation *a2)
{
}

uint64_t mlir::RewriterBase::Listener::notifyOperationReplaced(mlir::RewriterBase::Listener *this, mlir::Operation *a2, mlir::Operation *a3)
{
  char *v5;
  unint64_t v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a3 + 9))
    v5 = (char *)a3 - 16;
  else
    v5 = 0;
  mlir::ValueRange::ValueRange(v7, (uint64_t)v5, *((unsigned int *)a3 + 9));
  return (*(uint64_t (**)(mlir::RewriterBase::Listener *, mlir::Operation *, unint64_t, unint64_t))(*(_QWORD *)this + 48))(this, a2, v7[0], v7[1]);
}

uint64_t mlir::RewriterBase::Listener::notifyMatchFailure()
{
  return 0;
}

void mlir::DialectInterfaceCollection<mlir::DialectFoldInterface>::~DialectInterfaceCollection(mlir::detail::DialectInterfaceCollectionBase *a1)
{
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(a1);
}

void sub_18055CD10(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::TypeID::get<mlir::DialectFoldInterface>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
      v12 = 76;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[151];
}

void mlir::OperationFolder::~OperationFolder(mlir::OperationFolder *this)
{
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::OperationFolder *)((char *)this + 104));
  mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase((mlir::OperationFolder *)((char *)this + 48));
}

uint64_t sub_18055CED8()
{
  uint64_t v0;

  return v0;
}

void mlir::mpsx::createGPURegionParallelEncodePass(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *v9;
  int v10;
  int *v11;
  __n128 v12;

  v4 = operator new(0x308uLL);
  bzero(v4 + 4, 0x2E8uLL);
  v4[2] = "builtin.module";
  v4[3] = 14;
  *((_BYTE *)v4 + 32) = 1;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  v4[22] = 0;
  v4[23] = v4 + 25;
  *((_DWORD *)v4 + 49) = 4;
  v4[29] = v4 + 31;
  *((_DWORD *)v4 + 61) = 4;
  v4[35] = 0;
  v4[36] = 0;
  v4[37] = 0x1000000000;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  v4[42] = 0;
  *v4 = off_1E0E052A0;
  v12.n128_u64[0] = (unint64_t)"The minimum number of operations each region will have in order to create parallel regions.";
  v12.n128_u64[1] = 91;
  v10 = 1;
  v11 = &v10;
  mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(v4 + 43, v4 + 19, (uint64_t)"minimum-number-of-ops-per-region", 32, &v12, &v11);
  v4[43] = off_1E0E05170;
  v4[68] = &unk_1E0E051F0;
  v12.n128_u64[0] = (unint64_t)"The maximum number of parallel regions to create.";
  v12.n128_u64[1] = 49;
  v10 = 2;
  v11 = &v10;
  mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(v4 + 70, v4 + 19, (uint64_t)"maximum-number-of-parallel-regions", 34, &v12, &v11);
  v4[70] = off_1E0E05170;
  v4[95] = &unk_1E0E051F0;
  *v4 = off_1E0E05230;
  v4[59] = *a1;
  v5 = v4[67];
  if (v5
    && ((*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, a1),
        v7 = a1[1],
        v6 = a1 + 1,
        v4[86] = v7,
        (v8 = v4[94]) != 0))
  {
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, v6);
    *a2 = v4;
  }
  else
  {
    v9 = (mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *)std::__throw_bad_function_call[abi:nn180100]();
  }
}

void mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass::~GPURegionParallelEncodePass(mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *v7;
  uint64_t v8;
  void *v9;
  char *v10;

  *(_QWORD *)this = off_1E0E052A0;
  *((_QWORD *)this + 70) = off_1E0E23728;
  v2 = (char *)this + 728;
  v3 = (char *)*((_QWORD *)this + 94);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 70) = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)this + 82);
  if (v5 != *((void **)this + 81))
    free(v5);
  v6 = (char *)*((_QWORD *)this + 78);
  if (v6 != (char *)this + 640)
    free(v6);
  *((_QWORD *)this + 43) = off_1E0E23728;
  v7 = (mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *)*((_QWORD *)this + 67);
  if (v7 == (mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *)((char *)this + 512))
  {
    v8 = 4;
    v7 = (mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *)((char *)this + 512);
  }
  else
  {
    if (!v7)
      goto LABEL_15;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_15:
  *((_QWORD *)this + 43) = &unk_1E0E23930;
  v9 = (void *)*((_QWORD *)this + 55);
  if (v9 != *((void **)this + 54))
    free(v9);
  v10 = (char *)*((_QWORD *)this + 51);
  if (v10 != (char *)this + 424)
    free(v10);
  mlir::Pass::~Pass(this);
}

{
  void *v1;

  operator delete(v1);
}

const char *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass>::getName()
{
  return "MPSXGPURegionParallelEncode";
}

_QWORD *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass>::getDependentDialects(int a1, uint64_t **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9[0] = off_1E0E50870;
  v10 = v9;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v9);
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v9[0] = off_1E0E50990;
  v10 = v9;
  v5 = 4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id, "mpsx", 4uLL, v9);
  v6 = v10;
  if (v10 == v9)
  {
    v6 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v5))();
LABEL_11:
  v9[0] = off_1E0E50A68;
  v10 = v9;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::placement::PlacementDialect,void>::id, "placement", 9uLL, v9);
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

const char *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass>::getArgument()
{
  return "mpsx-gpu-parallel-encode";
}

const char *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass>::getDescription()
{
  return "Convert GPU regions so that they can be encoded in parallel.";
}

void mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass::runOnOperation(mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *this)
{
  mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *v1;
  mlir::ForwardIterator *v2;
  mlir::GenericProgramPoint **v3;
  mlir::GenericProgramPoint *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlir::GenericProgramPoint **v13;
  mlir::Operation *v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  char *v21;
  int *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  const void **v27;
  void *v28;
  void **v29;
  _DWORD *v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t **v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  mlir::mpsx::_anonymous_namespace_::GPURegionParallelEncodePass *v48;
  _QWORD v49[5];
  mlir::Operation *v50;
  llvm *v51[2];
  unsigned int v52;
  mlir::GenericProgramPoint *v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[48];
  void *v57;
  uint64_t v58;
  uint64_t v59;
  mlir::GenericProgramPoint **v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[168];
  void *v64;
  uint64_t v65;
  _QWORD v66[72];
  void *v67;
  uint64_t v68;
  _QWORD v69[74];

  v1 = this;
  v69[72] = *MEMORY[0x1E0C80C00];
  v54 = v56;
  v55 = 0x600000000;
  v2 = (mlir::ForwardIterator *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v67 = v1;
  v68 = (uint64_t)&v54;
  v64 = &v67;
  mlir::detail::walk<mlir::ForwardIterator>(v2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_127GPURegionParallelEncodePass14runOnOperationEvE3__0NSB_5GPUOpEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v64, 1);
  if ((_DWORD)v55)
  {
    v3 = (mlir::GenericProgramPoint **)v54;
    v48 = v1;
    while (1)
    {
      v4 = *v3;
      v53 = *v3;
      if (*((_QWORD *)v1 + 86) >= 2uLL)
      {
        v5 = *(_QWORD *)((((unint64_t)v4
                         + 16 * (((unint64_t)*((unsigned int *)v4 + 11) >> 23) & 1)
                         + (((unint64_t)*((unsigned int *)v4 + 11) >> 21) & 0x7F8)
                         + 71) & 0xFFFFFFFFFFFFFFF8)
                       + 32 * *((unsigned int *)v4 + 10)
                       + 8);
        v6 = v5 - 8;
        if (!v5)
          v6 = 0;
        v7 = v6 + 32;
        v8 = *(_QWORD *)(v6 + 40);
        if (v8 == v7)
        {
          v9 = 0;
        }
        else
        {
          v9 = 0;
          do
          {
            ++v9;
            v8 = *(_QWORD *)(v8 + 8);
          }
          while (v8 != v7);
        }
        if (v9 >= *((_QWORD *)v1 + 59))
          break;
      }
      if (++v3 == (mlir::GenericProgramPoint **)((char *)v54 + 8 * v55))
        goto LABEL_88;
    }
    if (v4)
      mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)v4);
    mlir::mps::ConstantRuntimeAnalysis::ConstantRuntimeAnalysis((uint64_t)v51, (uint64_t)v4);
    v11 = *((unsigned int *)v53 + 10);
    v10 = *((unsigned int *)v53 + 11);
    v50 = 0;
    v12 = *(_QWORD *)((((unint64_t)v53 + 16 * ((v10 >> 23) & 1) + ((v10 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * v11
                    + 8);
    if (v12)
      v13 = (mlir::GenericProgramPoint **)(v12 - 8);
    else
      v13 = 0;
    mlir::Block::getTerminator(v13);
    v50 = v14;
    v67 = v69;
    v68 = 0x800000000;
    v64 = &v50;
    v65 = (uint64_t)v51;
    v66[0] = &v53;
    v66[1] = &v67;
    if (!(_DWORD)v68)
    {
      v43 = (char *)v67;
      goto LABEL_85;
    }
    v64 = v66;
    v65 = 0x800000000;
    v15 = (char *)v67;
    v16 = 72 * v68;
    v17 = (int *)v67;
    while (1)
    {
      v19 = *v17;
      if (!*v17)
      {
        if (*((_QWORD *)v1 + 59) <= (unint64_t)v17[4] >> 1)
        {
          v19 = 0;
          v20 = v65;
          if ((_DWORD)v65)
            goto LABEL_33;
          goto LABEL_29;
        }
        v19 = 1;
        *v17 = 1;
      }
      v20 = v65;
      if ((_DWORD)v65)
        goto LABEL_33;
LABEL_29:
      LODWORD(v60) = v19;
      v61 = v63;
      v62 = 0x600000000;
      if (v61 != v63)
        free(v61);
      v20 = v65;
      v19 = *v17;
LABEL_33:
      v21 = (char *)v64;
      v22 = (int *)((char *)v64 + 72 * v20);
      if (*(v22 - 18) == v19)
      {
        v23 = (const void *)*((_QWORD *)v17 + 1);
        v24 = v17[4];
        v25 = *(v22 - 14);
        if (v25 + v24 > (unint64_t)*(v22 - 13))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v22 - 16), v22 - 12, v25 + v24, 8);
          LODWORD(v25) = *(v22 - 14);
        }
        if ((_DWORD)v24)
        {
          memcpy((void *)(*((_QWORD *)v22 - 8) + 8 * v25), v23, 8 * v24);
          LODWORD(v25) = *(v22 - 14);
        }
        *(v22 - 14) = v25 + v24;
        goto LABEL_24;
      }
      v26 = (const void **)v17;
      if (v20 >= HIDWORD(v65))
      {
        v33 = v20 + 1;
        if (v64 <= v17 && v22 > v17)
        {
          v34 = v15 - (_BYTE *)v64;
          v21 = (char *)v64;
          v26 = (const void **)((char *)v64 + v34);
          v1 = v48;
        }
        else
        {
          v21 = (char *)v64;
          v26 = (const void **)v17;
        }
      }
      v27 = (const void **)&v21[72 * v65];
      *(_DWORD *)v27 = *(_DWORD *)v26;
      v28 = v27 + 3;
      v27[1] = v27 + 3;
      v29 = (void **)(v27 + 1);
      v32 = v27 == v26;
      v27[2] = (const void *)0x600000000;
      v30 = v27 + 2;
      v31 = *((unsigned int *)v26 + 4);
      v32 = v32 || v31 == 0;
      if (!v32)
      {
        if (v31 >= 7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v29, v28, *((unsigned int *)v26 + 4), 8);
          v18 = *((unsigned int *)v26 + 4);
          if ((_DWORD)v18)
          {
            v28 = *v29;
LABEL_21:
            memcpy(v28, v26[1], 8 * v18);
          }
          *v30 = v31;
          goto LABEL_23;
        }
        v18 = *((unsigned int *)v26 + 4);
        goto LABEL_21;
      }
LABEL_23:
      LODWORD(v65) = v65 + 1;
LABEL_24:
      v17 += 18;
      v15 += 72;
      v16 -= 72;
      if (!v16)
      {
        if ((_DWORD)v65 == 1)
        {
          v35 = (char *)v64;
          if (*(_DWORD *)v64 == 1)
          {
            v36 = 1;
            goto LABEL_72;
          }
        }
        memset(&v49[2], 0, 24);
        v49[0] = off_1E0E25938;
        v49[1] = mlir::Attribute::getContext((mlir::GenericProgramPoint *)((char *)v53 + 24));
        if ((_DWORD)v65)
        {
          v37 = (uint64_t **)v64;
          do
          {
            if (*(_DWORD *)v37)
            v38 = *((unsigned int *)v37 + 4);
            v39 = *((_QWORD *)v1 + 86);
            v40 = v38 / v39;
            v41 = *((_QWORD *)v1 + 59);
            if (v38 / v39 < v41)
            {
              v39 = v38 / v41;
              v40 = v38 / (v38 / v41);
            }
            if (v39)
            {
              if (v38 % v39)
                v42 = v40 + 1;
              else
                v42 = v40;
            }
            v37 += 9;
          }
          while (v37 != (uint64_t **)((char *)v64 + 72 * v65));
        }
        v57 = &v59;
        v58 = 0x100000000;
        v60 = &v53;
        v61 = v51;
        v62 = (uint64_t)&v57;
        if ((_DWORD)v58)
        if (v57 != &v59)
          free(v57);
        mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)v49);
        v35 = (char *)v64;
        v36 = v65;
        if ((_DWORD)v65)
        {
LABEL_72:
          v44 = 72 * v36;
          do
          {
            v45 = *(char **)&v35[v44 - 64];
            if (&v35[v44 - 48] != v45)
              free(v45);
            v44 -= 72;
          }
          while (v44);
          v35 = (char *)v64;
        }
        if (v35 != (char *)v66)
          free(v35);
        v43 = (char *)v67;
        if ((_DWORD)v68)
        {
          v46 = 72 * v68;
          do
          {
            v47 = *(char **)&v43[v46 - 64];
            if (&v43[v46 - 48] != v47)
              free(v47);
            v46 -= 72;
          }
          while (v46);
          v43 = (char *)v67;
        }
LABEL_85:
        if (v43 != (char *)v69)
          free(v43);
        llvm::deallocate_buffer(v51[0], (void *)(8 * v52));
      }
    }
  }
LABEL_88:
  if (v54 != v56)
    free(v54);
}

_QWORD *mlir::mpsx::MPSXGPURegionParallelEncodeBase<mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass>::clonePass@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  _QWORD *result;
  int v7;
  int *v8;
  __n128 v9;

  v4 = operator new(0x308uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  *((_BYTE *)v4 + 40) = 0;
  *((_BYTE *)v4 + 120) = 0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = (char *)v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = (char *)v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *(_QWORD *)v4 = off_1E0E052A0;
  *((_QWORD *)v4 + 1) = v5;
  v9.n128_u64[0] = (unint64_t)"The minimum number of operations each region will have in order to create parallel regions.";
  v9.n128_u64[1] = 91;
  v7 = 1;
  v8 = &v7;
  mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)v4 + 43, (_QWORD *)v4 + 19, (uint64_t)"minimum-number-of-ops-per-region", 32, &v9, &v8);
  *((_QWORD *)v4 + 43) = off_1E0E05170;
  *((_QWORD *)v4 + 68) = &unk_1E0E051F0;
  v9.n128_u64[0] = (unint64_t)"The maximum number of parallel regions to create.";
  v9.n128_u64[1] = 49;
  v7 = 2;
  v8 = &v7;
  result = mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>((_QWORD *)v4 + 70, (_QWORD *)v4 + 19, (uint64_t)"maximum-number-of-parallel-regions", 34, &v9, &v8);
  *((_QWORD *)v4 + 70) = off_1E0E05170;
  *((_QWORD *)v4 + 95) = &unk_1E0E051F0;
  *(_QWORD *)v4 = off_1E0E05230;
  *a2 = v4;
  return result;
}

_QWORD *mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::Option<llvm::cl::desc,llvm::cl::initializer<int>>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, __n128 *a5, int **a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  const void **v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v35[2];
  _QWORD v36[3];
  _QWORD *v37;
  const void *v38[3];
  const void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35[0] = a3;
  v35[1] = a4;
  v38[0] = a2;
  v8 = llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)a1, (uint64_t)v35, v38, a5, a6);
  *(_QWORD *)(v8 + 200) = &unk_1E0E05390;
  v9 = v8 + 200;
  *(_BYTE *)(v8 + 208) = 0;
  *(_QWORD *)v8 = off_1E0E05310;
  v11 = (uint64_t *)a2[21];
  v10 = a2[22];
  v12 = v11;
  if ((unint64_t)v11 >= v10)
  {
    v14 = (uint64_t *)a2[20];
    v15 = v11 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v10 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v19 = (char *)operator new(8 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    *v20 = v9;
    v13 = v20 + 1;
    if (v11 != v14)
    {
      v22 = (char *)v11 - (char *)v14 - 8;
      if (v22 < 0x58)
        goto LABEL_38;
      if ((unint64_t)((char *)v14 - v19) < 0x20)
        goto LABEL_38;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v12 = &v11[v24 / 0xFFFFFFFFFFFFFFF8];
      v20 = (uint64_t *)((char *)v20 - v24);
      v25 = &v19[8 * v15 - 16];
      v26 = v11 - 2;
      v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_38:
        do
        {
          v29 = *--v12;
          *--v20 = v29;
        }
        while (v12 != v14);
      }
      v12 = (uint64_t *)a2[20];
    }
    a2[20] = v20;
    a2[21] = v13;
    a2[22] = v21;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v11 = v9;
    v13 = v11 + 1;
  }
  a2[21] = v13;
  v36[0] = off_1E0E055E0;
  v36[1] = a1;
  v37 = v36;
  v38[0] = off_1E0E055E0;
  v39 = v38;
  v38[1] = a1;
  std::__function::__value_func<void ()(long long const&)>::swap[abi:nn180100](v38, a1 + 21);
  v30 = v39;
  if (v39 == v38)
  {
    v31 = 4;
    v30 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_28;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_28:
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
    goto LABEL_32;
  }
  if (v37)
  {
    v33 = 5;
LABEL_32:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  return a1;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = llvm::cl::parser<unsigned long long>::parse(a1 + 160, (_QWORD *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  *(_QWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getValueExpectedFlagDefault()
{
  return 2;
}

_QWORD *mlir::Pass::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_1E0E23728;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::Pass::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = off_1E0E23728;
  v2 = __p + 168;
  v3 = (char *)*((_QWORD *)__p + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, a2);
}

void llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 152) || *(_QWORD *)(a1 + 144) != *(_QWORD *)(a1 + 128))
  {
    v3 = *(_QWORD *)(a1 + 128);
    v4 = *(_QWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 152);
    v5[0] = &off_1E0E22FE8;
    v5[1] = v4;
    llvm::cl::parser<unsigned long long>::printOptionDiff((llvm *)(a1 + 160), a1, v3, (uint64_t)v5, a2);
  }
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::setDefault(uint64_t result)
{
  if (*(_BYTE *)(result + 152))
    *(_QWORD *)(result + 128) = *(_QWORD *)(result + 144);
  else
    *(_QWORD *)(result + 128) = 0;
  return result;
}

llvm::raw_ostream *mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::print(_QWORD *a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v4 = (const void *)a1[2];
  v5 = a1[3];
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  return llvm::raw_ostream::operator<<(this, a1[16]);
}

uint64_t mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 128) = *(_QWORD *)(a2 - 72);
  *(_BYTE *)(result + 208) = *(_BYTE *)(a2 + 8);
  return result;
}

void `non-virtual thunk to'mlir::Pass::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 200) = off_1E0E23728;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_1E0E23930;
  v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112))
    free(v5);
  v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120))
    free(v6);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_QWORD *)(a1 - 200) = off_1E0E23728;
  v2 = (void *)(a1 - 200);
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_1E0E23930;
  v6 = *(void **)(a1 - 104);
  if (v6 != *(void **)(a1 - 112))
    free(v6);
  v7 = *(void **)(a1 - 136);
  if (v7 != (void *)(a1 - 120))
    free(v7);
  operator delete(v2);
}

llvm::raw_ostream *`non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::print(uint64_t a1, llvm::raw_ostream *this)
{
  const void *v4;
  size_t v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;

  v4 = *(const void **)(a1 - 184);
  v5 = *(_QWORD *)(a1 - 176);
  v6 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5 <= *((_QWORD *)this + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      v6 = (_BYTE *)(*((_QWORD *)this + 4) + v5);
      *((_QWORD *)this + 4) = v6;
    }
    v7 = this;
  }
  else
  {
    v7 = llvm::raw_ostream::write(this, (const char *)v4, v5);
    v6 = (_BYTE *)*((_QWORD *)v7 + 4);
  }
  if ((unint64_t)v6 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 61);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v6 + 1;
    *v6 = 61;
  }
  return llvm::raw_ostream::operator<<(this, *(_QWORD *)(a1 - 72));
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::getOption(uint64_t a1)
{
  return a1 - 200;
}

uint64_t `non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::copyValueFrom(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result - 72) = *(_QWORD *)(a2 - 72);
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::opt<llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, uint64_t a2, const void **a3, __n128 *a4, int **a5)
{
  void *v10;
  uint64_t v11;
  uint64_t *GeneralCategory;
  uint64_t v13;

  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v13 = *(unsigned int *)(a1 + 72);
  if (v13 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v10, v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v13) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FE8;
  *(_QWORD *)a1 = off_1E0E23728;
  *(_QWORD *)(a1 + 160) = &unk_1E0E23C28;
  *(_QWORD *)(a1 + 168) = off_1E0E4FC70;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  llvm::cl::apply<llvm::cl::opt<long long,false,llvm::cl::parser<long long>>,llvm::StringRef,llvm::cl::sub,llvm::cl::desc,llvm::cl::initializer<int>>(a1, a2, a3, a4, a5);
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = off_1E0E23728;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = off_1E0E23728;
  v2 = __p + 168;
  v3 = (char *)*((_QWORD *)__p + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

void `non-virtual thunk to'mlir::detail::PassOptions::Option<unsigned long long,llvm::cl::parser<unsigned long long>>::~Option(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)(a1 - 200) = off_1E0E23728;
  v2 = (_QWORD *)(a1 - 32);
  v3 = *(_QWORD **)(a1 - 8);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_1E0E23930;
  v5 = *(void **)(a1 - 104);
  if (v5 != *(void **)(a1 - 112))
    free(v5);
  v6 = *(void **)(a1 - 136);
  if (v6 != (void *)(a1 - 120))
    free(v6);
}

{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_QWORD *)(a1 - 200) = off_1E0E23728;
  v2 = (void *)(a1 - 200);
  v3 = (_QWORD *)(a1 - 32);
  v4 = *(_QWORD **)(a1 - 8);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  *(_QWORD *)(a1 - 200) = &unk_1E0E23930;
  v6 = *(void **)(a1 - 104);
  if (v6 != *(void **)(a1 - 112))
    free(v6);
  v7 = *(void **)(a1 - 136);
  if (v7 != (void *)(a1 - 120))
    free(v7);
  operator delete(v2);
}

void llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = off_1E0E23728;
  v2 = __p + 168;
  v3 = (char *)*((_QWORD *)__p + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

BOOL llvm::cl::OptionValueCopy<unsigned long long>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

_QWORD *std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4FC70;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4FC70;
}

_QWORD *_ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIyN4llvm2cl6parserIyEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKyEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E055E0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIyN4llvm2cl6parserIyEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKyEE7__cloneEPNS0_6__baseISS_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E055E0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir6detail11PassOptions6OptionIyN4llvm2cl6parserIyEEEC1IJNS7_4descENS7_11initializerIiEEEEERS4_NS6_9StringRefEDpOT_EUlRKT_E_NS_9allocatorISN_EEFvRKyEEclESR_(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 208) = 1;
  return result;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_4mpsx12_GLOBAL__N_127GPURegionParallelEncodePass14runOnOperationEvE3__0NSB_5GPUOpEvEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  mlir::Block *ParentOp;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
  {
    v3 = *a1;
    v4 = **a1;
    ParentOp = *(mlir::Block **)(a2 + 16);
    if (ParentOp)
      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    if (ParentOp == (mlir::Block *)(*(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF8))
    {
      v6 = v3[1];
      v7 = *(unsigned int *)(v6 + 8);
      if (v7 >= *(_DWORD *)(v6 + 12))
      {
        v8 = v3[1];
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(v6 + 16), v7 + 1, 8);
        v6 = v8;
        LODWORD(v7) = *(_DWORD *)(v8 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a2;
      ++*(_DWORD *)(v6 + 8);
    }
  }
}

uint64_t llvm::SmallVectorTemplateBase<mlir::mpsx::`anonymous namespace'::`anonymous namespace'::RegionInfo,false>::push_back(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 72 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = &a2[-v5];
      v5 = *(_QWORD *)a1;
      a2 = &v11[*(_QWORD *)a1];
    }
    else
    {
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 72 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)v6 = *(_DWORD *)a2;
  *(_QWORD *)(v6 + 16) = 0x600000000;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  result = v6 + 8;
  if (*((_DWORD *)a2 + 4))
    result = llvm::SmallVectorImpl<mlir::Value>::operator=(result, (uint64_t)(a2 + 8));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void mlir::mpsx::`anonymous namespace'::`anonymous namespace'::outlineRegion(uint64_t a1, mlir::GenericProgramPoint *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  void **v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  mlir::ForwardIterator *v23;
  int v24;
  uint64_t v25;
  mlir::ForwardIterator *v26;
  uint64_t *v27;
  mlir::ForwardIterator *v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  void *v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  mlir::ForwardIterator *v40;
  uint64_t v41;
  mlir::ForwardIterator *v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48[4];
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  mlir::GenericProgramPoint *v53;
  int v54[2];
  uint64_t v55;
  _BYTE v56[48];
  _QWORD v57[5];
  mlir::GenericProgramPoint **v58;
  uint64_t v59;
  _QWORD v60[10];
  _QWORD v61[5];
  void *__p[2];
  __int128 v63;
  __int128 v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD v67[12];

  v10 = a1;
  v67[10] = *MEMORY[0x1E0C80C00];
  v52 = a6;
  v53 = a2;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v65 = v67;
  v66 = 0xA00000000;
  if (!a4)
    goto LABEL_48;
  v11 = a3;
  v12 = &a3[a4];
  while (1)
  {
    v13 = *v11;
    v63 = 0u;
    v64 = 0u;
    *(_OWORD *)__p = 0u;
    std::deque<mlir::Operation *>::__add_back_capacity((uint64_t)__p);
    v14 = *((_QWORD *)&v64 + 1);
    *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((((_QWORD)v64 + *((_QWORD *)&v64 + 1)) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((v64 + *((_QWORD *)&v64 + 1)) & 0x1FF)) = v13;
    v15 = __CFADD__(v14, 1);
    v16 = v14 + 1;
    if (!v15)
    {
      while (1)
      {
        v48[0] = 0;
        v23 = *(mlir::ForwardIterator **)(*(_QWORD *)((char *)__p[1]
                                                    + (((unint64_t)v64 >> 6) & 0x3FFFFFFFFFFFFF8))
                                        + 8 * (v64 & 0x1FF));
        v48[0] = (uint64_t)v23;
        *((_QWORD *)&v64 + 1) = v16 - 1;
        *(_QWORD *)&v64 = v64 + 1;
        if ((unint64_t)v64 >= 0x400)
        {
          operator delete(*(void **)__p[1]);
          __p[1] = (char *)__p[1] + 8;
          *(_QWORD *)&v64 = v64 - 512;
          v23 = (mlir::ForwardIterator *)v48[0];
        }
        if (!v51)
          break;
        v24 = v51 - 1;
        v25 = ((v23 >> 4) ^ (v23 >> 9)) & (v51 - 1);
        v26 = *(mlir::ForwardIterator **)(v49 + 8 * v25);
        if (v26 == v23)
        {
          if ((_DWORD)v25 != v51)
            goto LABEL_14;
        }
        else
        {
          v33 = 1;
          v34 = ((v23 >> 4) ^ (v23 >> 9)) & v24;
          do
          {
            if (v26 == (mlir::ForwardIterator *)-4096)
              goto LABEL_20;
            v35 = v34 + v33++;
            v34 = v35 & v24;
            v26 = *(mlir::ForwardIterator **)(v49 + 8 * v34);
          }
          while (v26 != v23);
          if (v34 != v51)
            goto LABEL_14;
        }
LABEL_20:
        v27 = (uint64_t *)(v49 + 8 * v25);
        v28 = (mlir::ForwardIterator *)*v27;
        if (v23 != (mlir::ForwardIterator *)*v27)
        {
          v29 = 0;
          v30 = 1;
          while (v28 != (mlir::ForwardIterator *)-4096)
          {
            if (v29)
              v31 = 0;
            else
              v31 = v28 == (mlir::ForwardIterator *)-8192;
            if (v31)
              v29 = v27;
            v32 = v25 + v30++;
            LODWORD(v25) = v32 & v24;
            v27 = (uint64_t *)(v49 + 8 * v25);
            v28 = (mlir::ForwardIterator *)*v27;
            if (v23 == (mlir::ForwardIterator *)*v27)
              goto LABEL_13;
          }
          if (v29)
            v22 = v29;
          else
            v22 = v27;
          goto LABEL_12;
        }
LABEL_13:
        v58 = &v53;
        v59 = a5;
        v60[0] = __p;
LABEL_14:
        v16 = *((_QWORD *)&v64 + 1);
        if (!*((_QWORD *)&v64 + 1))
          goto LABEL_6;
      }
      v22 = 0;
LABEL_12:
      llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>((uint64_t)&v49, v22, v48);
      v23 = (mlir::ForwardIterator *)v48[0];
      goto LABEL_13;
    }
LABEL_6:
    v17 = (void **)__p[1];
    v18 = (void **)v63;
    *((_QWORD *)&v64 + 1) = 0;
    v19 = v63 - (unint64_t)__p[1];
    if ((unint64_t)v63 - (unint64_t)__p[1] >= 0x11)
    {
      do
      {
        operator delete(*v17);
        v18 = (void **)v63;
        v17 = (void **)((char *)__p[1] + 8);
        __p[1] = v17;
        v19 = v63 - (_QWORD)v17;
      }
      while ((_QWORD)v63 - (_QWORD)v17 > 0x10uLL);
    }
    v20 = v19 >> 3;
    if (v20 == 1)
    {
      v21 = 256;
    }
    else
    {
      if (v20 != 2)
        goto LABEL_40;
      v21 = 512;
    }
    *(_QWORD *)&v64 = v21;
LABEL_40:
    if (v17 != v18)
    {
      do
      {
        v36 = *v17++;
        operator delete(v36);
      }
      while (v17 != v18);
      if ((void *)v63 != __p[1])
        *(_QWORD *)&v63 = v63 + (((unint64_t)__p[1] - v63 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
    if (++v11 == v12)
    {
      v10 = a1;
      if (HIDWORD(v66) < v50)
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, v50, 8);
LABEL_48:
      __p[0] = &v49;
      __p[1] = &v65;
      __p[0] = &v63;
      __p[1] = (void *)0xA00000000;
      v61[0] = 1;
      v61[1] = -4096;
      v61[2] = -4096;
      v61[3] = -4096;
      v61[4] = -4096;
      v37 = v65;
      v38 = v66;
      if ((_DWORD)v66)
      {
        v39 = 8 * v66;
        do
        {
          v40 = (mlir::ForwardIterator *)*v37++;
          v58 = (mlir::GenericProgramPoint **)v61;
          v59 = (uint64_t)&v49;
          v60[0] = &v53;
          v60[1] = __p;
          v39 -= 8;
        }
        while (v39);
        v37 = v65;
        v38 = v66;
        v10 = a1;
      }
      v58 = (mlir::GenericProgramPoint **)v60;
      v59 = 0xA00000000;
      v57[0] = 1;
      v57[1] = -4096;
      v57[2] = -4096;
      v57[3] = -4096;
      v57[4] = -4096;
      if (v38)
      {
        v41 = 8 * v38;
        do
        {
          v42 = (mlir::ForwardIterator *)*v37;
          {
            v48[0] = (uint64_t)v57;
            v48[1] = (uint64_t)&v49;
            v48[2] = (uint64_t)&v53;
            v48[3] = (uint64_t)&v58;
          }
          ++v37;
          v41 -= 8;
        }
        while (v41);
        v43 = v66;
        *(_QWORD *)v54 = v56;
        v55 = 0x600000000;
        if (v66 < 7)
        {
          v38 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, v56, v66, 8);
          v43 = v66;
          v38 = v55;
        }
        v10 = a1;
        if (v43)
        {
          v44 = v65;
          v45 = 8 * v43;
          do
          {
            v46 = *(_QWORD *)(*v44 + 24);
            if (v38 >= HIDWORD(v55))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, v56, v38 + 1, 8);
              v38 = v55;
            }
            *(_QWORD *)(*(_QWORD *)v54 + 8 * v38) = v46;
            v38 = v55 + 1;
            LODWORD(v55) = v55 + 1;
            ++v44;
            v45 -= 8;
          }
          while (v45);
        }
      }
      else
      {
        *(_QWORD *)v54 = v56;
        v55 = 0x600000000;
      }
      mlir::FusedLoc::get(*(uint64_t ***)v54, (mlir::MLIRContext *)v38, 0, *(mlir::UnknownLoc **)(v10 + 8));
    }
  }
}

void sub_18055F300(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,llvm *a22,uint64_t a23,unsigned int a24)
{
  llvm::deallocate_buffer(a22, (void *)(16 * a24));
}

void sub_18055F314(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, llvm *a19, uint64_t a20,unsigned int a21)
{
  llvm::deallocate_buffer(a19, (void *)(16 * a21));
}

void sub_18055F328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,llvm *a34,uint64_t a35,unsigned int a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a72;
  llvm *a73;
  unsigned int a74;
  void *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;

  if (a33 < 0)
    operator delete(__p);
  if (a48 != v76)
    free(a48);
  if (a56 != v75)
    free(a56);
  if (a64 != v74)
    free(a64);
  if ((a72 & 1) == 0)
    llvm::deallocate_buffer(a73, (void *)(8 * a74));
  if (STACK[0x208] != v77)
    free((void *)STACK[0x208]);
  if ((STACK[0x268] & 1) == 0)
    llvm::deallocate_buffer((llvm *)STACK[0x270], (void *)(8 * LODWORD(STACK[0x278])));
  if (STACK[0x290] != a13)
    free((void *)STACK[0x290]);
  v79 = *(void **)(v78 - 208);
  if (v79 != (void *)a15)
    free(v79);
  llvm::deallocate_buffer(a34, (void *)(8 * a36));
}

uint64_t sub_18055F3EC()
{
  uint64_t v0;

  return v0;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass::convert(mlir::mpsx::GPUOp,BOOL *)::$_0>(uint64_t a1, uint64_t a2)
{
  mlir::Block *ParentOp;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *InterfaceFor;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  if (**(_QWORD **)a1 != a2
  {
    ParentOp = *(mlir::Block **)(a2 + 16);
    if (ParentOp)
      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    if (ParentOp == **(mlir::Block ***)(a1 + 16))
    {
      if (mlir::OpInterface<mlir::MPSRuntimeDynamicEncodeOpInterface,mlir::detail::MPSRuntimeDynamicEncodeOpInterfaceInterfaceTraits>::getInterfaceFor(a2))
      {
        v10 = a2;
        InterfaceFor = (void *)mlir::OpInterface<mlir::MPSRuntimeDynamicEncodeOpInterface,mlir::detail::MPSRuntimeDynamicEncodeOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
        if (a2)
        {
          v5 = mlir::anec::VerifyAttributesWithFamilyInterface::verifyAttributesWithFamily((uint64_t)&v10, *(_QWORD *)(a1 + 8));
LABEL_11:
          v6 = *(_QWORD *)(a1 + 24);
          v7 = *(_DWORD *)(v6 + 8);
          if (!v7)
          {
            LODWORD(v10) = v5;
            InterfaceFor = v13;
            v12 = 0x600000000;
            if (InterfaceFor != v13)
              free(InterfaceFor);
            v6 = *(_QWORD *)(a1 + 24);
            v7 = *(_DWORD *)(v6 + 8);
          }
          v8 = *(_QWORD *)v6 + 72 * v7;
          if (*(_DWORD *)(v8 - 72) == v5)
          {
            v9 = *(unsigned int *)(v8 - 56);
            if (v9 >= *(_DWORD *)(v8 - 52))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v8 - 64, (void *)(v8 - 48), v9 + 1, 8);
              LODWORD(v9) = *(_DWORD *)(v8 - 56);
            }
            *(_QWORD *)(*(_QWORD *)(v8 - 64) + 8 * v9) = a2;
            ++*(_DWORD *)(v8 - 56);
          }
          else
          {
            LODWORD(v10) = v5;
            InterfaceFor = v13;
            v13[0] = a2;
            v12 = 0x600000001;
            if (InterfaceFor != v13)
              free(InterfaceFor);
          }
          return;
        }
      }
      else
      {
        v10 = 0;
        InterfaceFor = 0;
      }
      v5 = 1;
      goto LABEL_11;
    }
  }
}

BOOL mlir::mpsx::`anonymous namespace'::`anonymous namespace'::shouldDuplicateOp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t NextResultAtOffset;
  uint64_t Input;
  uint64_t ElementTypeOrSelf;
  uint64_t v16;

  if (!a2)
    return 0;
  if (*(_DWORD *)(a2 + 36))
  {
    v4 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
    if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4) & 1) == 0)
    {
      v10 = *(unsigned int *)(a2 + 36);
      if ((_DWORD)v10)
        v11 = a2 - 16;
      else
        v11 = 0;
      if (!(_DWORD)v10)
        return 1;
      v12 = 0;
      while (1)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, v12);
        if (!mlir::mps::ConstantRuntimeAnalysis::isConstant(a1, NextResultAtOffset))
          break;
        if (v10 == ++v12)
          return 1;
      }
    }
  }
  v5 = *(void **)(*(_QWORD *)(a2 + 48) + 16);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::mps::VariableFromTensorOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::mpsx::VarHandleOp,void>::id
    && v5 != &mlir::detail::TypeIDResolver<mlir::mps::ReadVariableOp,void>::id)
  {
    v7 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
      v8 = a2;
    else
      v8 = 0;
    v16 = v8;
    if (!v7)
      return 0;
    Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v16);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(Input);
    if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&ElementTypeOrSelf) != 4;
  }
  return 1;
}

void llvm::SmallVectorTemplateBase<mlir::mpsx::`anonymous namespace'::`anonymous namespace'::RegionInfo,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 72, &v15);
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = 0;
    v8 = &v5[72 * v6];
    do
    {
      v9 = &v4[v7];
      v10 = &v5[v7];
      *(_DWORD *)v9 = *(_DWORD *)&v5[v7];
      *((_QWORD *)v9 + 2) = 0x600000000;
      *((_QWORD *)v9 + 1) = &v4[v7 + 24];
      if (*(_DWORD *)&v5[v7 + 16])
        llvm::SmallVectorImpl<mlir::Value>::operator=((uint64_t)&v4[v7 + 8], (uint64_t)(v10 + 8));
      v7 += 72;
    }
    while (v10 + 72 != v8);
    v5 = *(char **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 72 * v11;
      do
      {
        v13 = *(char **)&v5[v12 - 64];
        if (&v5[v12 - 48] != v13)
          free(v13);
        v12 -= 72;
      }
      while (v12);
      v5 = *(char **)a1;
    }
  }
  v14 = v15;
  if (v5 != v3)
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::GPUOp,std::string &,mlir::IRMapping &,llvm::SmallVector<mlir::Value,10u> &,llvm::SmallVector<mlir::Type,6u> &,llvm::SmallVector<mlir::Value,10u> &,llvm::SmallVector<mlir::Type,6u> &,llvm::SmallVector<mlir::Operation *,10u> &,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::OpBuilder *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  mlir::GenericProgramPoint *v25;
  mlir::GenericProgramPoint *v26;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  unint64_t v33[2];
  _QWORD *v34[2];
  unint64_t v35[2];
  void *v36[2];
  _QWORD v37[40];

  v37[38] = *MEMORY[0x1E0C80C00];
  v28 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v28);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.gpu", (const unsigned __int8 *)8, Context);
  if (!v20)
  {
    v32 = 1283;
    v31[2] = (uint64_t)"mpsx.gpu";
    v31[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v30 = 259;
    llvm::operator+(v31, (uint64_t *)&v29, (uint64_t)v37);
    llvm::report_fatal_error((llvm::Twine *)v37, 1);
  }
  mlir::OperationState::OperationState(v37, a2, v19);
  v21 = *((char *)a3 + 23);
  v22 = a3[1];
  if (v21 >= 0)
  {
    v23 = v21;
  }
  else
  {
    a3 = (_QWORD *)*a3;
    v23 = v22;
  }
  mlir::ValueRange::ValueRange((unint64_t *)v36, *(_QWORD *)a5, *(unsigned int *)(a5 + 8));
  mlir::ValueRange::ValueRange(v35, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
  mlir::ValueRange::ValueRange((unint64_t *)v34, *(_QWORD *)a7, *(unsigned int *)(a7 + 8));
  mlir::ValueRange::ValueRange(v33, *(_QWORD *)a8, *(unsigned int *)(a8 + 8));
  mlir::mpsx::ANEOp::build((uint64_t)a1, (uint64_t)v37, a3, v23, a4, v36[0], (uint64_t)v36[1], v24, v35[0], v35[1], v34[0], (unint64_t)v34[1], v33[0], v33[1], *(mlir::Operation ***)a9, *(unsigned int *)(a9 + 8), *(void **)a10, *(_QWORD *)(a10 + 8));
  v25 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v37);
  if (*(_UNKNOWN **)(*((_QWORD *)v25 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
    v26 = v25;
  else
    v26 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v37);
  return v26;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::RegionCall,mlir::mpsx::GPUOp &,mlir::placement::RegionType,llvm::SmallVector<mlir::Value,10u> &>(mlir::MLIRContext **a1, uint64_t a2, mlir::SymbolRefAttr **a3, int *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::SymbolRefAttr *v13;
  int v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  unint64_t v23[2];
  _QWORD v24[39];

  v24[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.region_call", (const unsigned __int8 *)0x15, Context);
  if (!v12)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"placement.region_call";
    v21[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v24);
    llvm::report_fatal_error((llvm::Twine *)v24, 1);
  }
  mlir::OperationState::OperationState(v24, a2, v11);
  v13 = *a3;
  v14 = *a4;
  mlir::ValueRange::ValueRange(v23, *(_QWORD *)a5, *(unsigned int *)(a5 + 8));
  mlir::placement::RegionCall::build(a1, (uint64_t)v24, v13, v14, v23[0], v23[1]);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v24);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v24);
  return v16;
}

uint64_t mlir::RewriterBase::replaceAllUsesWith(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = a2;
  v22 = 0;
  v23 = a4;
  v24 = 0;
  if (a3)
  {
    v9 = result;
    v10 = 0;
    v11 = 0;
    do
    {
      if (v23 == a4 && v11 == a5)
        break;
      v14 = (uint64_t **)mlir::ValueRange::dereference_iterator(&v21, v10);
      result = mlir::ValueRange::dereference_iterator(&v23, v24);
      v15 = *v14;
      if (*v14)
      {
        v16 = (uint64_t *)result;
        do
        {
          v17 = (uint64_t *)*v15;
          v18 = v15[2];
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 72))(v9, v18);
          v19 = (uint64_t *)v15[1];
          if (v19)
          {
            *v19 = *v15;
            if (*v15)
              *(_QWORD *)(*v15 + 8) = v15[1];
          }
          v15[3] = (uint64_t)v16;
          v15[1] = (uint64_t)v16;
          v20 = *v16;
          *v15 = *v16;
          if (v20)
            *(_QWORD *)(v20 + 8) = v15;
          *v16 = (uint64_t)v15;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, v18);
          v15 = v17;
        }
        while (v17);
      }
      v10 = v22 + 1;
      v11 = v24 + 1;
      ++v22;
      ++v24;
    }
    while (v21 != a2 || v10 != a3);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>,mlir::Operation *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseSetPair<mlir::Operation *>>::InsertIntoBucket<mlir::Operation * const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::`anonymous namespace'::`anonymous namespace'::outlineRegion(mlir::RewriterBase &,mlir::mpsx::GPUOp,llvm::ArrayRef<mlir::Operation *>,mlir::mps::ConstantRuntimeAnalysis &,unsigned long long,BOOL,BOOL)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t DefiningOp;
  uint64_t v6;
  mlir::Block *ParentOp;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v2 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v2)
    {
      v4 = (uint64_t *)(*(_QWORD *)(a2 + 72) + 24);
      do
      {
        v14 = *v4;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v14);
        if (DefiningOp)
        {
          v6 = DefiningOp;
          ParentOp = *(mlir::Block **)(DefiningOp + 16);
          if (ParentOp)
            ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
          if (ParentOp == **(mlir::Block ***)a1
          {
            v8 = *(_QWORD **)(a1 + 16);
            v9 = v8[2];
            v10 = v8[1];
            if (v9 == v10)
              v11 = 0;
            else
              v11 = ((v9 - v10) << 6) - 1;
            v12 = v8[5];
            v13 = v12 + v8[4];
            if (v11 == v13)
            {
              std::deque<mlir::Operation *>::__add_back_capacity(*(_QWORD *)(a1 + 16));
              v10 = v8[1];
              v12 = v8[5];
              v13 = v8[4] + v12;
            }
            *(_QWORD *)(*(_QWORD *)(v10 + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v13 & 0x1FF)) = v6;
            v8[5] = v12 + 1;
          }
        }
        v4 += 4;
        --v2;
      }
      while (v2);
    }
  }
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::`anonymous namespace'::`anonymous namespace'::outlineRegion(mlir::RewriterBase &,mlir::mpsx::GPUOp,llvm::ArrayRef<mlir::Operation *>,mlir::mps::ConstantRuntimeAnalysis &,unsigned long long,BOOL,BOOL)::$_1>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)*a1;
  v4 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 8 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 8 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 8 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 8 * v4);
LABEL_8:
  if (v6 != (uint64_t *)(v3 + 8 * v4))
  {
    v10 = a1[1];
    v11 = *(unsigned int *)(v10 + 8);
    if (v11 >= *(_DWORD *)(v10 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1], (void *)(v10 + 16), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(v10 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = a2;
    ++*(_DWORD *)(v10 + 8);
  }
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::`anonymous namespace'::`anonymous namespace'::outlineRegion(mlir::RewriterBase &,mlir::mpsx::GPUOp,llvm::ArrayRef<mlir::Operation *>,mlir::mps::ConstantRuntimeAnalysis &,unsigned long long,BOOL,BOOL)::$_2>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DefiningOp;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  mlir::Block *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  _QWORD *v24;

  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v2 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v2)
    {
      v3 = result;
      v4 = 0;
      v5 = *(_QWORD *)(a2 + 72);
      do
      {
        v23 = *(_QWORD *)(v5 + 32 * v4 + 24);
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v23);
        v7 = *(_QWORD *)v3;
        v24 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v7, &v23, &v24);
        if ((_DWORD)result)
        {
          v8 = v24;
          if ((*(_DWORD *)v7 & 1) == 0)
            goto LABEL_13;
        }
        else
        {
          if ((*(_DWORD *)v7 & 1) == 0)
          {
            v8 = (_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * *(unsigned int *)(v7 + 16));
LABEL_13:
            if (v8 != (_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * *(unsigned int *)(v7 + 16)))
              goto LABEL_4;
            goto LABEL_14;
          }
          v8 = (_QWORD *)(v7 + 40);
        }
        if (v8 != (_QWORD *)(v7 + 40))
          goto LABEL_4;
LABEL_14:
        if (!DefiningOp)
          goto LABEL_30;
        v9 = *(uint64_t **)(v3 + 8);
        v10 = **(_QWORD **)(v3 + 16);
        if (v10 == DefiningOp)
        {
          DefiningOp = 0;
        }
        else
        {
          while (1)
          {
            result = *(_QWORD *)(DefiningOp + 16);
            if (result)
              result = mlir::Block::getParentOp((mlir::Block *)result);
            if (result == v10)
              break;
            v11 = *(mlir::Block **)(DefiningOp + 16);
            DefiningOp = 0;
            if (v11)
              DefiningOp = mlir::Block::getParentOp(v11);
          }
        }
        v12 = *v9;
        v13 = *((unsigned int *)v9 + 4);
        if ((_DWORD)v13)
        {
          LODWORD(v14) = ((DefiningOp >> 4) ^ (DefiningOp >> 9)) & (v13 - 1);
          v15 = (uint64_t *)(v12 + 8 * v14);
          v16 = *v15;
          if (*v15 == DefiningOp)
            goto LABEL_29;
          v17 = 1;
          while (v16 != -4096)
          {
            v18 = v14 + v17++;
            v14 = v18 & (v13 - 1);
            v16 = *(_QWORD *)(v12 + 8 * v14);
            if (v16 == DefiningOp)
            {
              v15 = (uint64_t *)(v12 + 8 * v14);
              goto LABEL_29;
            }
          }
        }
        v15 = (uint64_t *)(v12 + 8 * v13);
LABEL_29:
        if (v15 == (uint64_t *)(v12 + 8 * v13))
        {
LABEL_30:
          v19 = *(_QWORD *)(v3 + 24);
          v20 = v23;
          v21 = *(unsigned int *)(v19 + 8);
          if (v21 >= *(unsigned int *)(v19 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(v3 + 24), (void *)(v19 + 16), v21 + 1, 8);
            v21 = *(unsigned int *)(v19 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v19 + 8 * v21) = v20;
          ++*(_DWORD *)(v19 + 8);
          v22 = *(_DWORD **)v3;
          v24 = 0;
          result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t)v22, &v23, &v24);
          if ((result & 1) == 0)
          {
            result = (uint64_t)llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(v22, (uint64_t)&v23, &v23, v24);
            *(_QWORD *)result = v23;
          }
        }
LABEL_4:
        ++v4;
      }
      while (v4 != v2);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v13 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = *a2;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v24 = a3;
    v22 = a2;
    v25 = v3;
    v23 = v4;
    v26 = *a2;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v25;
    v5 = v26;
    v4 = v23;
    a2 = v22;
    a3 = v24;
    if (v20)
    {
      v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v21 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v25;
      v5 = v26;
      v4 = v23;
      a2 = v22;
      a3 = v24;
    }
  }
  v8 = (v7[19] + 8 * v5) ^ HIDWORD(v5);
  v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
  v10 = -348639895 * ((v9 >> 47) ^ v9);
  v11 = v4 - 1;
  v12 = v10 & (v4 - 1);
  v13 = (_QWORD *)(v3 + 8 * v12);
  v14 = *v13;
  if (*a2 == *v13)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v14 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v14 == -8192;
      if (v18)
        v16 = v13;
      v19 = v12 + v17++;
      v12 = v19 & v11;
      v13 = (_QWORD *)(v3 + 8 * (v19 & v11));
      v14 = *v13;
      if (*a2 == *v13)
        goto LABEL_8;
    }
    result = 0;
    if (v16)
      v13 = v16;
  }
LABEL_8:
  *a3 = v13;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(_DWORD *a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow((uint64_t)a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::grow(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  llvm *v7;
  int64x2_t *v8;
  uint64_t v9;
  unint64_t *v10;
  int64x2_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int64x2_t *buffer;
  int v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64x2_t *v24;
  int64x2_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64x2_t *v31;
  int64x2_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  _QWORD v37[4];

  v2 = a2;
  v3 = result;
  v37[3] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_BYTE *)result & 1) == 0)
  {
    v8 = (int64x2_t *)(result + 8);
    v7 = *(llvm **)(result + 8);
    v9 = *(unsigned int *)(result + 16);
    if (v2 > 4)
    {
      buffer = (int64x2_t *)llvm::allocate_buffer(8 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(v3 + 8) = buffer;
      *(_QWORD *)(v3 + 16) = v2;
      v18 = *(_DWORD *)v3;
      v10 = (unint64_t *)((char *)v7 + 8 * v9);
      *(_QWORD *)v3 = *(_DWORD *)v3 & 1;
      if ((v18 & 1) == 0)
      {
        v19 = &buffer->i8[8 * v2];
        v8 = buffer;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = (unint64_t *)((char *)v7 + 8 * v9);
      *(_QWORD *)result = 1;
    }
    v19 = (char *)(v3 + 40);
LABEL_21:
    v20 = v19 - (char *)v8 - 8;
    if (v20 >= 0x18)
    {
      v23 = (v20 >> 3) + 1;
      v21 = &v8->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
      v24 = v8 + 1;
      v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24[-1] = v25;
        *v24 = v25;
        v24 += 2;
        v26 -= 4;
      }
      while (v26);
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        if ((_DWORD)v9)
        {
          v27 = (unint64_t *)v7;
          do
          {
            if ((*v27 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v36 = 0;
              llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v3, v27, &v36);
              *v36 = *v27;
              *(_DWORD *)v3 += 2;
            }
            ++v27;
          }
          while (v27 != v10);
        }
        llvm::deallocate_buffer(v7, (void *)(8 * v9));
      }
    }
    else
    {
      v21 = (char *)v8;
    }
    do
    {
      *(_QWORD *)v21 = -4096;
      v21 += 8;
    }
    while (v21 != v19);
    goto LABEL_31;
  }
  v11 = (int64x2_t *)(result + 8);
  v12 = (unint64_t *)&v36;
  if ((*(_QWORD *)(result + 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
  {
    v36 = *(unint64_t **)(result + 8);
    v12 = v37;
  }
  v13 = *(_QWORD *)(result + 16);
  if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
    *v12++ = v13;
  v14 = *(_QWORD *)(result + 24);
  if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
    *v12++ = v14;
  v15 = *(_QWORD *)(result + 32);
  if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
    *v12++ = v15;
  v16 = *(_DWORD *)result;
  if (v2 < 5)
  {
    v2 = v13;
  }
  else
  {
    *(_DWORD *)result = v16 & 0xFFFFFFFE;
    result = (uint64_t)llvm::allocate_buffer(8 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(v3 + 8) = result;
    *(_QWORD *)(v3 + 16) = v2;
    v16 = *(_DWORD *)v3;
  }
  *(_QWORD *)v3 = v16 & 1;
  if ((v16 & 1) != 0)
  {
    v22 = (char *)(v3 + 40);
  }
  else
  {
    if (!v2)
      goto LABEL_44;
    v11 = (int64x2_t *)v11->i64[0];
    v22 = &v11->i8[8 * v2];
  }
  v28 = v22 - (char *)v11 - 8;
  if (v28 < 0x18)
  {
    v29 = (uint64_t *)v11;
    do
LABEL_43:
      *v29++ = -4096;
    while (v29 != (uint64_t *)v22);
    goto LABEL_44;
  }
  v30 = (v28 >> 3) + 1;
  v29 = &v11->i64[v30 & 0x3FFFFFFFFFFFFFFCLL];
  v31 = v11 + 1;
  v32 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v31[-1] = v32;
    *v31 = v32;
    v31 += 2;
    v33 -= 4;
  }
  while (v33);
  if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_43;
LABEL_44:
  if (&v36 != (unint64_t **)v12)
  {
    v34 = (unint64_t *)&v36;
    do
    {
      if ((*v34 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v35 = 0;
        result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v3, v34, &v35);
        *v35 = *v34;
        *(_DWORD *)v3 += 2;
      }
      ++v34;
    }
    while (v34 != v12);
  }
  return result;
}

uint64_t llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::`anonymous namespace'::`anonymous namespace'::outlineRegion(mlir::RewriterBase &,mlir::mpsx::GPUOp,llvm::ArrayRef<mlir::Operation *>,mlir::mps::ConstantRuntimeAnalysis &,unsigned long long,BOOL,BOOL)::$_3>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t ParentOp;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  mlir::Block *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _QWORD *v25;

  v2 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v2)
    v3 = a2 - 16;
  else
    v3 = 0;
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = 0;
    while (1)
    {
      result = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, v5);
      v24 = result;
      v6 = *(_QWORD **)result;
      if (*(_QWORD *)result)
        break;
LABEL_6:
      if (++v5 == v2)
        return result;
    }
    while (1)
    {
      ParentOp = v6[2];
      v8 = *(_QWORD *)v4;
      v25 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>(v8, &v24, &v25);
      if ((_DWORD)result)
      {
        v9 = v25;
        if ((*(_DWORD *)v8 & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        if ((*(_DWORD *)v8 & 1) != 0)
        {
          v9 = (_QWORD *)(v8 + 40);
LABEL_15:
          if (v9 == (_QWORD *)(v8 + 40))
            goto LABEL_19;
          goto LABEL_9;
        }
        v9 = (_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * *(unsigned int *)(v8 + 16));
      }
      if (v9 == (_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * *(unsigned int *)(v8 + 16)))
      {
LABEL_19:
        v10 = *(uint64_t **)(v4 + 8);
        v11 = **(_QWORD **)(v4 + 16);
        if (v11 == ParentOp)
        {
          ParentOp = 0;
        }
        else
        {
          while (1)
          {
            result = *(_QWORD *)(ParentOp + 16);
            if (result)
              result = mlir::Block::getParentOp((mlir::Block *)result);
            if (result == v11)
              break;
            v12 = *(mlir::Block **)(ParentOp + 16);
            ParentOp = 0;
            if (v12)
              ParentOp = mlir::Block::getParentOp(v12);
          }
        }
        v13 = *v10;
        v14 = *((unsigned int *)v10 + 4);
        if (!(_DWORD)v14)
          goto LABEL_32;
        LODWORD(v15) = ((ParentOp >> 4) ^ (ParentOp >> 9)) & (v14 - 1);
        v16 = (uint64_t *)(v13 + 8 * v15);
        v17 = *v16;
        if (*v16 != ParentOp)
        {
          v18 = 1;
          while (v17 != -4096)
          {
            v19 = v15 + v18++;
            v15 = v19 & (v14 - 1);
            v17 = *(_QWORD *)(v13 + 8 * v15);
            if (v17 == ParentOp)
            {
              v16 = (uint64_t *)(v13 + 8 * v15);
              goto LABEL_33;
            }
          }
LABEL_32:
          v16 = (uint64_t *)(v13 + 8 * v14);
        }
LABEL_33:
        if (v16 == (uint64_t *)(v13 + 8 * v14))
        {
          v20 = *(_QWORD *)(v4 + 24);
          v21 = v24;
          v22 = *(unsigned int *)(v20 + 8);
          if (v22 >= *(unsigned int *)(v20 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(*(_QWORD *)(v4 + 24), (void *)(v20 + 16), v22 + 1, 8);
            v22 = *(unsigned int *)(v20 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v20 + 8 * v22) = v21;
          ++*(_DWORD *)(v20 + 8);
          v23 = *(_DWORD **)v4;
          v25 = 0;
          result = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::LookupBucketFor<mlir::Value>((uint64_t)v23, &v24, &v25);
          if ((result & 1) == 0)
          {
            result = (uint64_t)llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Value,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>,mlir::Value,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseSetPair<mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(v23, (uint64_t)&v24, &v24, v25);
            *(_QWORD *)result = v24;
          }
        }
      }
LABEL_9:
      v6 = (_QWORD *)*v6;
      if (!v6)
        goto LABEL_6;
    }
  }
  return result;
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::`anonymous namespace'::GPURegionParallelEncodePass::convert(mlir::mpsx::GPUOp,BOOL *)::$_1>(uint64_t a1, uint64_t a2)
{
  mlir::Block *ParentOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[4];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  ParentOp = *(mlir::Block **)(a2 + 16);
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  if (ParentOp == **(mlir::Block ***)a1
  {
    v5 = *(unsigned int *)(a2 + 36);
    v6 = (_DWORD)v5 ? a2 - 16 : 0;
    v17 = v6;
    v18 = v5;
    mlir::ResultRange::use_begin(&v17, (uint64_t *)&v19);
    v7 = *(unsigned int *)(a2 + 36);
    v8 = (_DWORD)v7 ? a2 - 16 : 0;
    v17 = v8;
    v18 = v7;
    mlir::ResultRange::use_end(&v17, v15);
    v9 = v20;
    v10 = v16;
    if (v20 != v16)
    {
      while (1)
      {
        v11 = *(_QWORD *)(v9 + 16);
        v12 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 48) + 32))(*(_QWORD *)(v11 + 48), v12) & 1) != 0)
          break;
        mlir::ResultRange::UseIterator::operator++((uint64_t *)&v19);
        v9 = v20;
        if (v20 == v10)
          return;
      }
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(unsigned int *)(v13 + 8);
      if (v14 >= *(_DWORD *)(v13 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(v13 + 16), v14 + 1, 8);
        LODWORD(v14) = *(_DWORD *)(v13 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = a2;
      ++*(_DWORD *)(v13 + 8);
    }
  }
}

uint64_t mlir::detail::verifyParallelCombiningOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD **v13;
  _QWORD **v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) == 1)
  {
    v3 = (_QWORD *)((((unint64_t)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)this + 10));
    if ((_QWORD *)*v3 != v3 && *(_QWORD **)(v3[1] + 8) == v3)
      return 1;
    v20[0] = "expected single block op region";
    v21 = 259;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v20, (uint64_t)v22);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v5 = (_QWORD **)__p;
      if (__p)
      {
        v6 = v28;
        v7 = __p;
        if (v28 != __p)
        {
          do
            v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          v7 = __p;
        }
        v28 = v5;
        operator delete(v7);
      }
      v8 = v25;
      if (!v25)
        goto LABEL_34;
      v9 = v26;
      v10 = v25;
      if (v26 == v25)
      {
LABEL_33:
        v26 = v8;
        operator delete(v10);
LABEL_34:
        if (v23 != &v24)
          free(v23);
        return v4;
      }
      do
      {
        v12 = (void *)*--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          operator delete[](v11);
      }
      while (v9 != v8);
LABEL_32:
      v10 = v25;
      goto LABEL_33;
    }
  }
  else
  {
    v20[0] = "expected single region op";
    v21 = 259;
    mlir::Operation::emitError((uint64_t *)this, (uint64_t)v20, (uint64_t)v22);
    v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v13 = (_QWORD **)__p;
      if (__p)
      {
        v14 = v28;
        v15 = __p;
        if (v28 != __p)
        {
          do
            v14 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v14 - 1);
          while (v14 != v13);
          v15 = __p;
        }
        v28 = v13;
        operator delete(v15);
      }
      v8 = v25;
      if (!v25)
        goto LABEL_34;
      v16 = v26;
      v10 = v25;
      if (v26 == v25)
        goto LABEL_33;
      do
      {
        v18 = (void *)*--v16;
        v17 = v18;
        *v16 = 0;
        if (v18)
          operator delete[](v17);
      }
      while (v16 != v8);
      goto LABEL_32;
    }
  }
  return v4;
}

uint64_t mlir::parseSourceFile(uint64_t **a1, uint64_t a2, uint64_t ***a3, uint64_t *a4)
{
  const llvm::MemoryBuffer *v7;
  uint64_t **v9;
  const char *v10;
  unint64_t v11;
  _OWORD v13[2];
  _BYTE v14[32];

  v7 = (const llvm::MemoryBuffer *)**a1;
  if (a4)
  {
    v9 = *a3;
    v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(**a1);
    *a4 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v14, v7);
  if (!mlir::isBytecode((uint64_t)v14))
    mlir::parseAsmSourceFile(a1, a2, a3, 0, 0);
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v13, v7);
  return mlir::readBytecodeFile(v13, a2, (mlir::StringAttr **)a3);
}

uint64_t mlir::parseSourceFile(uint64_t ***a1, uint64_t a2, uint64_t ***a3, uint64_t *a4)
{
  const llvm::MemoryBuffer *v7;
  uint64_t **v9;
  const char *v10;
  unint64_t v11;
  _BYTE v13[32];

  v7 = (const llvm::MemoryBuffer *)***a1;
  if (a4)
  {
    v9 = *a3;
    v10 = (const char *)(*(uint64_t (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v7 + 16))(v7);
    *a4 = mlir::FileLineColLoc::get((mlir::StringAttr *)v9, v10, v11, 0, 0);
  }
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v13, v7);
  if (!mlir::isBytecode((uint64_t)v13))
    mlir::parseAsmSourceFile(*a1, a2, a3, 0, 0);
  return mlir::readBytecodeFile((const llvm::MemoryBuffer ****)a1, a2, (mlir::StringAttr **)a3);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E0E51D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<llvm::SourceMgr>::__on_zero_shared(uint64_t a1)
{
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)(a1 + 24));
}

uint64_t mlir::PassManager::enableIRPrinting(uint64_t a1, _QWORD *a2, _QWORD *a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29[3];
  uint64_t *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v16 = operator new(0x80uLL);
  v17 = (_QWORD *)a2[3];
  if (!v17)
  {
    v30 = 0;
    v18 = (_QWORD *)a3[3];
    if (v18)
      goto LABEL_6;
    goto LABEL_9;
  }
  if (v17 == a2)
  {
    v30 = v29;
    (*(void (**)(_QWORD *, uint64_t *))(*a2 + 24))(a2, v29);
    v18 = (_QWORD *)a3[3];
    if (v18)
      goto LABEL_6;
LABEL_9:
    v28 = 0;
    goto LABEL_11;
  }
  v30 = (uint64_t *)a2[3];
  a2[3] = 0;
  v18 = (_QWORD *)a3[3];
  if (!v18)
    goto LABEL_9;
LABEL_6:
  if (v18 == a3)
  {
    v28 = v27;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v27);
  }
  else
  {
    v28 = v18;
    a3[3] = 0;
  }
LABEL_11:
  v19 = *(_OWORD *)(a8 + 16);
  v16[1] = *(_OWORD *)a8;
  v16[2] = v19;
  *((_QWORD *)v16 + 6) = *(_QWORD *)(a8 + 32);
  *((_BYTE *)v16 + 8) = a4;
  *((_BYTE *)v16 + 9) = a5;
  *((_BYTE *)v16 + 10) = a6;
  *(_QWORD *)v16 = off_1E0E18200;
  if (!v30)
  {
    *((_QWORD *)v16 + 10) = 0;
    v20 = v28;
    if (v28)
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v30 == v29)
  {
    *((_QWORD *)v16 + 10) = (char *)v16 + 56;
    (*(void (**)(uint64_t *))(v29[0] + 24))(v29);
    v20 = v28;
    if (v28)
      goto LABEL_16;
LABEL_19:
    *((_QWORD *)v16 + 14) = 0;
    *((_QWORD *)v16 + 15) = a7;
    goto LABEL_25;
  }
  *((_QWORD *)v16 + 10) = v30;
  v30 = 0;
  v20 = v28;
  if (!v28)
    goto LABEL_19;
LABEL_16:
  if (v20 != v27)
  {
    v28 = 0;
    *((_QWORD *)v16 + 14) = v20;
    *((_QWORD *)v16 + 15) = a7;
    goto LABEL_25;
  }
  *((_QWORD *)v16 + 14) = (char *)v16 + 88;
  (*(void (**)(_QWORD *))(v27[0] + 24))(v27);
  v21 = v28;
  *((_QWORD *)v16 + 15) = a7;
  if (v21 == v27)
  {
    v22 = 4;
    v21 = v27;
  }
  else
  {
    if (!v21)
      goto LABEL_25;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_25:
  v23 = v30;
  if (v30 == v29)
  {
    v24 = 4;
    v23 = v29;
    goto LABEL_29;
  }
  if (v30)
  {
    v24 = 5;
LABEL_29:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  if (*((_BYTE *)v16 + 8) && mlir::MLIRContext::isMultithreadingEnabled(*(mlir::MLIRContext **)(a1 + 8)))
    llvm::report_fatal_error((llvm *)"IR printing can't be setup on a pass-manager without disabling multi-threading first.", (const char *)1);
  v25 = operator new(0x28uLL);
  *v25 = off_1E0E19458;
  v25[1] = v16;
  v25[2] = 0;
  v25[3] = 0;
  *((_DWORD *)v25 + 8) = 0;
  v29[0] = (uint64_t)v25;
  mlir::PassManager::addInstrumentation(a1, v29);
  result = v29[0];
  v29[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void `anonymous namespace'::IRPrinterInstrumentation::~IRPrinterInstrumentation(llvm **this)
{
  *this = (llvm *)off_1E0E19458;
  llvm::deallocate_buffer(this[2], (void *)(32 * *((unsigned int *)this + 8)));
}

{
  *this = (llvm *)off_1E0E19458;
  llvm::deallocate_buffer(this[2], (void *)(32 * *((unsigned int *)this + 8)));
}

void sub_180561214(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;

  v13 = *((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
}

void sub_18056126C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  mlir::GenericProgramPoint *v12;
  uint64_t v13;
  void *v14;

  v13 = *((_QWORD *)v12 + 1);
  *((_QWORD *)v12 + 1) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  mlir::GenericProgramPoint::~GenericProgramPoint(v12);
  operator delete(v14);
}

void `anonymous namespace'::IRPrinterInstrumentation::runBeforePass(_anonymous_namespace_::IRPrinterInstrumentation *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t *v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  mlir::Pass *v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  mlir::Pass **v28;
  unint64_t v29;
  _anonymous_namespace_::IRPrinterInstrumentation *v30;
  mlir::Operation *v31;
  mlir::Pass *v32;

  v32 = a2;
  v31 = a3;
  v4 = *((_QWORD *)a2 + 1);
  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
  {
    v27 = *((_QWORD *)a2 + 1);
    v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v4 = v27;
    if (v19)
    {
      v28 = (mlir::Pass **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      v29 = 81;
      v20 = llvm::StringRef::find((uint64_t *)&v28, "DesiredTypeName = ", 0x12uLL, 0);
      if (v29 >= v20)
        v21 = v20;
      else
        v21 = v29;
      v22 = (char *)v28 + v21;
      v23 = v29 - v21;
      if (v29 - v21 >= 0x12)
        v24 = 18;
      else
        v24 = v29 - v21;
      v25 = v23 - v24;
      if (v25 >= v25 - 1)
        v26 = v25 - 1;
      else
        v26 = v25;
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v22[v24], v26);
      v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v4 = v27;
    }
  }
  if (v4 != v6[128])
  {
    v7 = (_BYTE *)*((_QWORD *)this + 1);
    if (v7[9])
    {
      v8 = *((_QWORD *)this + 2);
      v9 = *((_DWORD *)this + 8);
      if (!v9)
      {
        v18 = 0;
LABEL_16:
        llvm::DenseMapBase<llvm::DenseMap<mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>,mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>::InsertIntoBucket<mlir::Pass * const&,mlir::Operation *&>((uint64_t)this + 16, v18, (uint64_t *)&v32, &v31);
        v7 = (_BYTE *)*((_QWORD *)this + 1);
        goto LABEL_17;
      }
      v10 = v9 - 1;
      v11 = ((v32 >> 4) ^ (v32 >> 9)) & v10;
      v12 = (uint64_t *)(v8 + 32 * v11);
      v13 = (mlir::Pass *)*v12;
      if (v32 != (mlir::Pass *)*v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != (mlir::Pass *)-4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == (mlir::Pass *)-8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)(v8 + 32 * v11);
          v13 = (mlir::Pass *)*v12;
          if (v32 == (mlir::Pass *)*v12)
            goto LABEL_17;
        }
        if (v14)
          v18 = v14;
        else
          v18 = v12;
        goto LABEL_16;
      }
    }
LABEL_17:
    v28 = &v32;
    v29 = (unint64_t)&v31;
    v30 = this;
  }
}

void `anonymous namespace'::IRPrinterInstrumentation::runAfterPass(int32x2_t *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  _BYTE *v6;
  mlir::Pass *v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  mlir::Pass *v12;
  int v13;
  int v14;
  mlir::Operation *v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  mlir::Operation *v25;
  mlir::Pass *v26;
  mlir::Pass **v27;
  unint64_t v28;
  int32x2_t *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = a3;
  v26 = a2;
  v4 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) == 0
  {
    v27 = (mlir::Pass **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
    v28 = 81;
    v18 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
    if (v28 >= v18)
      v19 = v18;
    else
      v19 = v28;
    v20 = (char *)v27 + v19;
    v21 = v28 - v19;
    if (v28 - v19 >= 0x12)
      v22 = 18;
    else
      v22 = v28 - v19;
    v23 = v21 - v22;
    if (v23 >= v23 - 1)
      v24 = v23 - 1;
    else
      v24 = v23;
    mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v20[v22], v24);
  }
  if (v4 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
    return;
  v6 = (_BYTE *)this[1];
  if (v6[10])
    return;
  v7 = v26;
  if (!v6[9])
  {
    v15 = v25;
LABEL_21:
    v27 = &v26;
    v28 = (unint64_t)&v25;
    v29 = this;
    return;
  }
  v8 = this[2];
  v9 = this[4].u32[0];
  if ((_DWORD)v9)
  {
    v10 = ((v26 >> 4) ^ (v26 >> 9)) & ((_DWORD)v9 - 1);
    v11 = *(_QWORD *)&v8 + 32 * v10;
    v12 = *(mlir::Pass **)v11;
    if (*(mlir::Pass **)v11 == v26)
      goto LABEL_13;
    v13 = 1;
    while (v12 != (mlir::Pass *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(mlir::Pass **)(*(_QWORD *)&v8 + 32 * v10);
      if (v12 == v26)
      {
        v11 = *(_QWORD *)&v8 + 32 * v10;
        goto LABEL_13;
      }
    }
  }
  v11 = *(_QWORD *)&v8 + 32 * v9;
LABEL_13:
  v15 = v25;
  mlir::OperationFingerPrint::OperationFingerPrint((mlir::OperationFingerPrint *)&v27, v25);
  v17 = *(mlir::Pass ***)(v11 + 8) == v27
     && *(_QWORD *)(v11 + 16) == v28
     && *(_DWORD *)(v11 + 24) == (unint64_t)v29;
  *(_QWORD *)v11 = -8192;
  this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
  if (!v17)
  {
    v6 = (_BYTE *)this[1];
    goto LABEL_21;
  }
}

int32x2_t *`anonymous namespace'::IRPrinterInstrumentation::runAfterPassFailed(int32x2_t *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  _BYTE *v6;
  __int32 v7;
  mlir::Pass *v8;
  int32x2_t v9;
  __int32 v10;
  uint64_t v11;
  mlir::Pass **v12;
  mlir::Pass *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t *v26;
  mlir::Pass **v27;
  unint64_t v28;
  int32x2_t *v29;
  mlir::Operation *v30;
  mlir::Pass *v31;

  v30 = a3;
  v31 = a2;
  v3 = *((_QWORD *)a2 + 1);
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v25 = *((_QWORD *)a2 + 1);
    v26 = this;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v17 = v16;
    v3 = v25;
    this = v26;
    if (v17)
    {
      v27 = (mlir::Pass **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      v28 = 81;
      v18 = llvm::StringRef::find((uint64_t *)&v27, "DesiredTypeName = ", 0x12uLL, 0);
      if (v28 >= v18)
        v19 = v18;
      else
        v19 = v28;
      v20 = (char *)v27 + v19;
      v21 = v28 - v19;
      if (v28 - v19 >= 0x12)
        v22 = 18;
      else
        v22 = v28 - v19;
      v23 = v21 - v22;
      if (v23 >= v23 - 1)
        v24 = v23 - 1;
      else
        v24 = v23;
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v20[v22], v24);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v25;
      this = v26;
    }
  }
  if (v3 != v5[128])
  {
    v6 = (_BYTE *)this[1];
    if (v6[9])
    {
      v7 = this[4].i32[0];
      v8 = v31;
      if (v7)
      {
        v9 = this[2];
        v10 = v7 - 1;
        v11 = ((v31 >> 4) ^ (v31 >> 9)) & v10;
        v12 = (mlir::Pass **)(*(_QWORD *)&v9 + 32 * v11);
        v13 = *v12;
        if (v31 == *v12)
        {
LABEL_6:
          *v12 = (mlir::Pass *)-8192;
          this[3] = vadd_s32(this[3], (int32x2_t)0x1FFFFFFFFLL);
          v6 = (_BYTE *)this[1];
        }
        else
        {
          v14 = 1;
          while (v13 != (mlir::Pass *)-4096)
          {
            v15 = v11 + v14++;
            v11 = v15 & v10;
            v13 = *(mlir::Pass **)(*(_QWORD *)&v9 + 32 * v11);
            if (v31 == v13)
            {
              v12 = (mlir::Pass **)(*(_QWORD *)&v9 + 32 * v11);
              goto LABEL_6;
            }
          }
        }
      }
    }
    else
    {
      v8 = v31;
    }
    v27 = &v31;
    v28 = (unint64_t)&v30;
    v29 = this;
  }
  return this;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>,mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>::InsertIntoBucket<mlir::Pass * const&,mlir::Operation *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, mlir::Operation **a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  int v18;

  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 16);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
  }
  else if (v9 + ~v8 - *(_DWORD *)(a1 + 12) > v9 >> 3)
  {
LABEL_3:
    v10 = *a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>::grow(a1, v9);
  v10 = *a3;
  v12 = *(_DWORD *)(a1 + 16) - 1;
  v13 = ((*a3 >> 4) ^ (*a3 >> 9)) & v12;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 32 * v13);
  v14 = *a2;
  if (*a3 != *a2)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = a2;
      v18 = v13 + v16++;
      v13 = v18 & v12;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 32 * v13);
      v14 = *a2;
      if (v10 == *a2)
        goto LABEL_4;
    }
    if (v15)
      a2 = v15;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v10 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  mlir::OperationFingerPrint::OperationFingerPrint((mlir::OperationFingerPrint *)(a2 + 1), *a4);
  return a2;
}

_QWORD *llvm::DenseMap<mlir::Pass *,mlir::OperationFingerPrint,llvm::DenseMapInfo<mlir::Pass *,void>,llvm::detail::DenseMapPair<mlir::Pass *,mlir::OperationFingerPrint>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(32 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[4 * (v12 & 0xFFFFFFFFFFFFFFELL)];
      v13 = result + 4;
      v14 = v12 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 4) = -4096;
        *v13 = -4096;
        v13 += 8;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[4 * v11];
        do
        {
          *v10 = -4096;
          v10 += 4;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v19 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = *(_DWORD *)(a1 + 16);
          if (v20)
          {
            v21 = v20 - 1;
            v22 = (v20 - 1) & ((v19 >> 4) ^ (v19 >> 9));
            v17 = *(_QWORD *)a1 + 32 * v22;
            v23 = *(_QWORD *)v17;
            if (v19 != *(_QWORD *)v17)
            {
              v24 = 0;
              v25 = 1;
              while (v23 != -4096)
              {
                if (v24)
                  v26 = 0;
                else
                  v26 = v23 == -8192;
                if (v26)
                  v24 = v17;
                v27 = v22 + v25++;
                v22 = v27 & v21;
                v17 = *(_QWORD *)a1 + 32 * v22;
                v23 = *(_QWORD *)v17;
                if (v19 == *(_QWORD *)v17)
                  goto LABEL_15;
              }
              if (v24)
                v17 = v24;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_15:
          *(_QWORD *)v17 = v19;
          v18 = *(_OWORD *)((char *)v16 + 8);
          *(_DWORD *)(v17 + 24) = *((_DWORD *)v16 + 6);
          *(_OWORD *)(v17 + 8) = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        v16 = (llvm *)((char *)v16 + 32);
      }
      while (v16 != (llvm *)((char *)v4 + 32 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(32 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v28 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v28)
  {
    if (((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_38;
    v29 = ((v28 - 1) & 0x7FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[4 * (v29 & 0xFFFFFFFFFFFFFFELL)];
    v30 = result + 4;
    v31 = v29 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 4) = -4096;
      *v30 = -4096;
      v30 += 8;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_38:
      v32 = &result[4 * v28];
      do
      {
        *v10 = -4096;
        v10 += 4;
      }
      while (v10 != v32);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::IRPrinterInstrumentation::runBeforePass(mlir::Pass *,mlir::Operation *)::$_0>(_QWORD **a1, llvm::raw_ostream *this)
{
  _QWORD *v4;
  void *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  _WORD *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  llvm::raw_ostream *result;
  _WORD *v21;
  _OWORD v22[2];
  uint64_t v23;

  v4 = a1[2];
  v5 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x19uLL)
  {
    qmemcpy(v5, "// -----// IR Dump Before ", 26);
    *((_QWORD *)this + 4) += 26;
    v6 = this;
  }
  else
  {
    v6 = llvm::raw_ostream::write(this, "// -----// IR Dump Before ", 0x1AuLL);
  }
  v8 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 16))(**a1);
  v9 = v7;
  v10 = (_WORD *)*((_QWORD *)v6 + 4);
  if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v10)
  {
    if (v7)
    {
      memcpy(v10, v8, v7);
      v10 = (_WORD *)(*((_QWORD *)v6 + 4) + v9);
      *((_QWORD *)v6 + 4) = v10;
    }
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, (const char *)v8, v7);
    v10 = (_WORD *)*((_QWORD *)v6 + 4);
  }
  if (*((_QWORD *)v6 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 10272;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, " (", 2uLL);
  }
  v12 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  v13 = v11;
  v14 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (v11 <= *((_QWORD *)v6 + 3) - (_QWORD)v14)
  {
    if (v11)
    {
      memcpy(v14, v12, v11);
      v14 = (_BYTE *)(*((_QWORD *)v6 + 4) + v13);
      *((_QWORD *)v6 + 4) = v14;
    }
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, (const char *)v12, v11);
    v14 = (_BYTE *)*((_QWORD *)v6 + 4);
  }
  if (*((_BYTE **)v6 + 3) == v14)
  {
    llvm::raw_ostream::write(v6, ")", 1uLL);
  }
  else
  {
    *v14 = 41;
    ++*((_QWORD *)v6 + 4);
  }
  v15 = *a1[1];
  v16 = v4[1];
  v17 = *(_BYTE *)(v16 + 8);
  v18 = *(_OWORD *)(v16 + 16);
  v19 = *(_OWORD *)(v16 + 32);
  v23 = *(_QWORD *)(v16 + 48);
  v22[0] = v18;
  v22[1] = v19;
  result = printIR(v15, v17, this, (const mlir::OpPrintingFlags *)v22);
  v21 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v21 <= 1uLL)
    return llvm::raw_ostream::write(this, "\n\n", 2uLL);
  *v21 = 2570;
  *((_QWORD *)this + 4) += 2;
  return result;
}

mlir::detail::AsmStateImpl *printIR(uint64_t a1, char a2, llvm::raw_ostream *a3, const mlir::OpPrintingFlags *a4)
{
  llvm::raw_ostream *v5;
  uint64_t ParentOp;
  uint64_t v7;
  unint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  uint64_t InherentAttr;
  char v13;
  void *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  size_t v19;
  const void *AttrData;
  size_t v21;
  void *v22;
  void *v23;
  mlir::Operation *v24;
  mlir::Block *v25;
  uint64_t v26;

  v5 = a3;
  ParentOp = a1;
  v7 = *((_QWORD *)a3 + 4);
  v8 = *((_QWORD *)a3 + 3) - v7;
  if ((a2 & 1) == 0)
  {
    if (v8 > 0xB)
    {
      *(_DWORD *)(v7 + 8) = 170864416;
      *(_QWORD *)v7 = *(_QWORD *)" //----- //\n";
      *((_QWORD *)a3 + 4) += 12;
      if (!*(_QWORD *)(a1 + 16))
        return mlir::Operation::print((mlir::Operation *)ParentOp, v5, a4);
    }
    else
    {
      v5 = llvm::raw_ostream::write(a3, " //----- //\n", 0xCuLL);
      if (!*(_QWORD *)(ParentOp + 16))
        return mlir::Operation::print((mlir::Operation *)ParentOp, v5, a4);
    }
    a4 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::useLocalScope((uint64_t)a4);
    return mlir::Operation::print((mlir::Operation *)ParentOp, v5, a4);
  }
  if (v8 > 2)
  {
    *(_BYTE *)(v7 + 2) = 39;
    *(_WORD *)v7 = 10272;
    *((_QWORD *)a3 + 4) += 3;
    v9 = a3;
  }
  else
  {
    v9 = llvm::raw_ostream::write(a3, " ('", 3uLL);
  }
  v26 = *(_QWORD *)(ParentOp + 48);
  mlir::OperationName::print((mlir::OperationName *)&v26, v9);
  v10 = *((_QWORD *)v9 + 4);
  if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) <= 0xA)
  {
    llvm::raw_ostream::write(v9, "' operation", 0xBuLL);
    if (!*(_BYTE *)(ParentOp + 47))
      goto LABEL_16;
LABEL_15:
    InherentAttr = mlir::Operation::getInherentAttr(ParentOp, (uint64_t)"sym_name", 8);
    if (v13)
      goto LABEL_17;
    goto LABEL_16;
  }
  *(_DWORD *)(v10 + 7) = 1852795252;
  *(_QWORD *)v10 = *(_QWORD *)"' operation";
  *((_QWORD *)v9 + 4) += 11;
  if (*(_BYTE *)(ParentOp + 47))
    goto LABEL_15;
LABEL_16:
  InherentAttr = mlir::DictionaryAttr::get(ParentOp + 56, "sym_name", 8uLL);
LABEL_17:
  if (InherentAttr)
  {
    v14 = *(void **)(*(_QWORD *)InherentAttr + 136);
    v15 = v14 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
    v16 = v14 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id ? InherentAttr : 0;
    v26 = v16;
    if (v15)
    {
      v17 = *((_QWORD *)v5 + 4);
      if ((unint64_t)(*((_QWORD *)v5 + 3) - v17) > 2)
      {
        *(_BYTE *)(v17 + 2) = 64;
        *(_WORD *)v17 = 8250;
        *((_QWORD *)v5 + 4) += 3;
        v18 = v5;
      }
      else
      {
        v18 = llvm::raw_ostream::write(v5, ": @", 3uLL);
      }
      AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v26);
      v21 = v19;
      v22 = (void *)*((_QWORD *)v18 + 4);
      if (v19 <= *((_QWORD *)v18 + 3) - (_QWORD)v22)
      {
        if (v19)
        {
          memcpy(v22, AttrData, v19);
          *((_QWORD *)v18 + 4) += v21;
        }
      }
      else
      {
        llvm::raw_ostream::write(v18, (const char *)AttrData, v19);
      }
    }
  }
  v23 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v23 > 0xCuLL)
  {
    qmemcpy(v23, ") //----- //\n", 13);
    *((_QWORD *)v5 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v5, ") //----- //\n", 0xDuLL);
  }
  do
  {
    v24 = (mlir::Operation *)ParentOp;
    v25 = *(mlir::Block **)(ParentOp + 16);
    if (!v25)
      break;
    ParentOp = mlir::Block::getParentOp(v25);
  }
  while (ParentOp);
  return mlir::Operation::print(v24, v5, a4);
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::IRPrinterInstrumentation::runAfterPass(mlir::Pass *,mlir::Operation *)::$_0>(_QWORD **a1, llvm::raw_ostream *this)
{
  _QWORD *v4;
  void *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  _WORD *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  llvm::raw_ostream *result;
  _WORD *v21;
  _OWORD v22[2];
  uint64_t v23;

  v4 = a1[2];
  v5 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v5 > 0x18uLL)
  {
    qmemcpy(v5, "// -----// IR Dump After ", 25);
    *((_QWORD *)this + 4) += 25;
    v6 = this;
  }
  else
  {
    v6 = llvm::raw_ostream::write(this, "// -----// IR Dump After ", 0x19uLL);
  }
  v8 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 16))(**a1);
  v9 = v7;
  v10 = (_WORD *)*((_QWORD *)v6 + 4);
  if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v10)
  {
    if (v7)
    {
      memcpy(v10, v8, v7);
      v10 = (_WORD *)(*((_QWORD *)v6 + 4) + v9);
      *((_QWORD *)v6 + 4) = v10;
    }
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, (const char *)v8, v7);
    v10 = (_WORD *)*((_QWORD *)v6 + 4);
  }
  if (*((_QWORD *)v6 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 10272;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, " (", 2uLL);
  }
  v12 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  v13 = v11;
  v14 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (v11 <= *((_QWORD *)v6 + 3) - (_QWORD)v14)
  {
    if (v11)
    {
      memcpy(v14, v12, v11);
      v14 = (_BYTE *)(*((_QWORD *)v6 + 4) + v13);
      *((_QWORD *)v6 + 4) = v14;
    }
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, (const char *)v12, v11);
    v14 = (_BYTE *)*((_QWORD *)v6 + 4);
  }
  if (*((_BYTE **)v6 + 3) == v14)
  {
    llvm::raw_ostream::write(v6, ")", 1uLL);
  }
  else
  {
    *v14 = 41;
    ++*((_QWORD *)v6 + 4);
  }
  v15 = *a1[1];
  v16 = v4[1];
  v17 = *(_BYTE *)(v16 + 8);
  v18 = *(_OWORD *)(v16 + 16);
  v19 = *(_OWORD *)(v16 + 32);
  v23 = *(_QWORD *)(v16 + 48);
  v22[0] = v18;
  v22[1] = v19;
  result = printIR(v15, v17, this, (const mlir::OpPrintingFlags *)v22);
  v21 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v21 <= 1uLL)
    return llvm::raw_ostream::write(this, "\n\n", 2uLL);
  *v21 = 2570;
  *((_QWORD *)this + 4) += 2;
  return result;
}

llvm::raw_ostream *llvm::function_ref<void ()(llvm::raw_ostream &)>::callback_fn<`anonymous namespace'::IRPrinterInstrumentation::runAfterPassFailed(mlir::Pass *,mlir::Operation *)::$_0>(_QWORD **a1, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *result;
  _WORD *v11;
  _QWORD v12[4];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[2];

  v4 = a1[2];
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 16))(**a1);
  v7 = v6;
  v14[1] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  v14[2] = v8;
  v12[0] = "// -----// IR Dump After {0} Failed ({1})";
  v12[1] = 41;
  v12[2] = v15;
  v12[3] = 2;
  v13[0] = &unk_1E0E23CE0;
  v13[1] = v5;
  v13[2] = v7;
  v14[0] = &unk_1E0E23CE0;
  v15[0] = v13;
  v15[1] = v14;
  llvm::raw_ostream::operator<<(a2, (llvm::formatv_object_base *)v12);
  v9 = *a1[1];
  LOBYTE(v5) = *(_BYTE *)(v4[1] + 8);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v12);
  result = printIR(v9, v5, a2, (const mlir::OpPrintingFlags *)v12);
  v11 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v11 <= 1uLL)
    return llvm::raw_ostream::write(a2, "\n\n", 2uLL);
  *v11 = 2570;
  *((_QWORD *)a2 + 4) += 2;
  return result;
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<llvm::StringRef>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  int AsUnsignedInteger;
  unint64_t v7;
  const char *v8;
  size_t v9;
  llvm::raw_ostream *result;
  unint64_t v11;

  if (a4)
  {
    v11 = 0;
    AsUnsignedInteger = llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v11);
    v7 = v11;
    if (AsUnsignedInteger)
      v7 = -1;
  }
  else
  {
    v7 = -1;
  }
  v8 = *(const char **)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) >= v7)
    v9 = v7;
  else
    v9 = *(_QWORD *)(a1 + 16);
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v9 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v8, v9);
  if (v9)
  {
    result = (llvm::raw_ostream *)memcpy(result, v8, v9);
    *((_QWORD *)a2 + 4) += v9;
  }
  return result;
}

void `anonymous namespace'::BasicIRPrinterConfig::~BasicIRPrinterConfig(_anonymous_namespace_::BasicIRPrinterConfig *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _anonymous_namespace_::BasicIRPrinterConfig *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E0E18200;
  v2 = (char *)this + 88;
  v3 = (char *)*((_QWORD *)this + 14);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (_anonymous_namespace_::BasicIRPrinterConfig *)*((_QWORD *)this + 10);
  if (v5 == (_anonymous_namespace_::BasicIRPrinterConfig *)((char *)this + 56))
  {
    v6 = 4;
    v5 = (_anonymous_namespace_::BasicIRPrinterConfig *)((char *)this + 56);
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  _anonymous_namespace_::BasicIRPrinterConfig *v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E0E18200;
  v2 = (char *)this + 88;
  v3 = (char *)*((_QWORD *)this + 14);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (_anonymous_namespace_::BasicIRPrinterConfig *)*((_QWORD *)this + 10);
  if (v5 == (_anonymous_namespace_::BasicIRPrinterConfig *)((char *)this + 56))
  {
    v6 = 4;
    v5 = (_anonymous_namespace_::BasicIRPrinterConfig *)((char *)this + 56);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  operator delete(this);
}

uint64_t `anonymous namespace'::BasicIRPrinterConfig::printBeforeIfEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD), uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    v9 = a3;
    v10 = a2;
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)result + 48))(result, &v10, &v9);
    if ((_DWORD)result)
      return a4(a5, *(_QWORD *)(a1 + 120));
  }
  return result;
}

uint64_t `anonymous namespace'::BasicIRPrinterConfig::printAfterIfEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD), uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *(_QWORD *)(a1 + 112);
  if (result)
  {
    v9 = a3;
    v10 = a2;
    result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)result + 48))(result, &v10, &v9);
    if ((_DWORD)result)
      return a4(a5, *(_QWORD *)(a1 + 120));
  }
  return result;
}

llvm::raw_ostream *mlir::PassExecutionAction::print(mlir::PassExecutionAction *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  _QWORD v12[2];
  _QWORD v13[3];
  _QWORD v14[2];
  _QWORD v15[3];

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
  v6 = v5;
  v7 = (_QWORD *)(*(uint64_t (**)(mlir::PassExecutionAction *))(*(_QWORD *)this + 32))(this);
  if ((*v7 & 6) != 0)
    v8 = 0;
  else
    v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v8 + 48);
  v11[1] = 38;
  v11[2] = v15;
  v11[3] = 3;
  v12[0] = &unk_1E0E23D10;
  v12[1] = &mlir::PassExecutionAction::tag;
  v13[0] = &unk_1E0E23CE0;
  v13[1] = v4;
  v13[2] = v6;
  v14[0] = &unk_1E0E23EF0;
  v14[1] = v9;
  v15[0] = v12;
  v15[1] = v13;
  v15[2] = v14;
  return llvm::raw_ostream::operator<<(a2, (llvm::formatv_object_base *)v11);
}

uint64_t mlir::Pass::initializeOptions(uint64_t a1, __int8 *a2, unint64_t a3)
{
  return mlir::detail::PassOptions::parseFromString(a1 + 152, a2, a3);
}

void mlir::Pass::printAsTextualPipeline(mlir::Pass *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  size_t v7;
  const char *v8;
  size_t v9;
  void *v10;
  llvm::raw_ostream *v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  const char **v15;
  const char **v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  llvm::raw_ostream *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;

  v4 = *((_QWORD *)this + 1);
  if ((v5 & 1) == 0
  {
    v32 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
    v33 = 81;
    v25 = llvm::StringRef::find((uint64_t *)&v32, "DesiredTypeName = ", 0x12uLL, 0);
    if (v33 >= v25)
      v26 = v25;
    else
      v26 = v33;
    v27 = &v32[v26];
    v28 = v33 - v26;
    if (v33 - v26 >= 0x12)
      v29 = 18;
    else
      v29 = v33 - v26;
    v30 = v28 - v29;
    if (v30 >= v30 - 1)
      v31 = v30 - 1;
    else
      v31 = v30;
    mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v27[v29], v31);
  }
  if (v4 != mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
  {
    v6 = (*(uint64_t (**)(mlir::Pass *))(*(_QWORD *)this + 32))(this);
    if (v7)
    {
      v8 = (const char *)v6;
      v9 = v7;
      v10 = (void *)*((_QWORD *)a2 + 4);
      if (v7 > *((_QWORD *)a2 + 3) - (_QWORD)v10)
      {
        v11 = a2;
        v12 = v8;
        v13 = v9;
LABEL_24:
        llvm::raw_ostream::write(v11, v12, v13);
        goto LABEL_25;
      }
      memcpy(v10, v8, v7);
      *((_QWORD *)a2 + 4) += v9;
    }
    else
    {
      v19 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v19 > 7uLL)
      {
        *v19 = 0x3C6E776F6E6B6E75;
        *((_QWORD *)a2 + 4) += 8;
        v20 = a2;
      }
      else
      {
        v20 = llvm::raw_ostream::write(a2, "unknown<", 8uLL);
      }
      v22 = (const void *)(*(uint64_t (**)(mlir::Pass *))(*(_QWORD *)this + 16))(this);
      v23 = v21;
      v24 = (_BYTE *)*((_QWORD *)v20 + 4);
      if (v21 <= *((_QWORD *)v20 + 3) - (_QWORD)v24)
      {
        if (v21)
        {
          memcpy(v24, v22, v21);
          v24 = (_BYTE *)(*((_QWORD *)v20 + 4) + v23);
          *((_QWORD *)v20 + 4) = v24;
        }
      }
      else
      {
        v20 = llvm::raw_ostream::write(v20, (const char *)v22, v21);
        v24 = (_BYTE *)*((_QWORD *)v20 + 4);
      }
      if (*((_BYTE **)v20 + 3) == v24)
      {
        v12 = ">";
        v11 = v20;
        v13 = 1;
        goto LABEL_24;
      }
      *v24 = 62;
      ++*((_QWORD *)v20 + 4);
    }
LABEL_25:
    mlir::detail::PassOptions::print((mlir::Pass *)((char *)this + 152), a2);
    return;
  }
  v14 = *((unsigned int *)this + 88);
  if ((_DWORD)v14)
  {
    v15 = (const char **)*((_QWORD *)this + 43);
    mlir::OpPassManager::printAsTextualPipeline(v15, a2);
    if ((_DWORD)v14 != 1)
    {
      v16 = v15 + 1;
      v17 = 8 * v14 - 8;
      do
      {
        while (1)
        {
          v18 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v18)
            break;
          *v18 = 44;
          ++*((_QWORD *)a2 + 4);
          mlir::OpPassManager::printAsTextualPipeline(v16++, a2);
          v17 -= 8;
          if (!v17)
            return;
        }
        llvm::raw_ostream::write(a2, ",", 1uLL);
        mlir::OpPassManager::printAsTextualPipeline(v16++, a2);
        v17 -= 8;
      }
      while (v17);
    }
  }
}

_QWORD *mlir::detail::OpPassManagerImpl::addPass(_BYTE *a1, uint64_t *a2)
{
  const void *v3;
  size_t v4;
  uint64_t v5;
  size_t v6;
  _BYTE *v7;
  void *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  const char *v30;
  __int16 v31;
  uint64_t v32[4];
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36[4];
  __int16 v37;
  const char *v38;
  __int16 v39;
  uint64_t v40[5];
  uint64_t v41[5];
  uint64_t v42[5];
  uint64_t v43[5];
  uint64_t v44[5];
  _QWORD v45[5];

  v3 = a1;
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (a1[23])
      goto LABEL_3;
LABEL_21:
    v5 = *a2;
LABEL_22:
    v19 = (uint64_t *)*((_QWORD *)v3 + 6);
    if ((unint64_t)v19 >= *((_QWORD *)v3 + 7))
    {
      result = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>((_QWORD *)v3 + 5, a2);
    }
    else
    {
      *a2 = 0;
      *v19 = v5;
      result = v19 + 1;
    }
    *((_QWORD *)v3 + 6) = result;
    return result;
  }
  if (!*((_QWORD *)a1 + 1))
    goto LABEL_21;
LABEL_3:
  if ((char)a1[23] >= 0)
  {
    v4 = a1[23];
  }
  else
  {
    a1 = *(_BYTE **)a1;
    v4 = *((_QWORD *)v3 + 1);
  }
  v5 = *a2;
  if (!*(_BYTE *)(*a2 + 32))
    goto LABEL_22;
  v7 = *(_BYTE **)(v5 + 16);
  v6 = *(_QWORD *)(v5 + 24);
  if (v4 == v6 && (!v4 || !memcmp(a1, *(const void **)(v5 + 16), v4)))
    goto LABEL_22;
  if (*((_DWORD *)v3 + 17))
  {
    v38 = "Can't add pass '";
    v39 = 259;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    v37 = 261;
    v36[0] = v23;
    v36[1] = v24;
    llvm::operator+((uint64_t *)&v38, v36, (uint64_t)v40);
    v34 = "' restricted to '";
    v35 = 259;
    llvm::operator+(v40, (uint64_t *)&v34, (uint64_t)v41);
    v33 = 261;
    v32[0] = (uint64_t)v7;
    v32[1] = v6;
    llvm::operator+(v41, v32, (uint64_t)v42);
    v30 = "' on a PassManager intended to run on '";
    v31 = 259;
    llvm::operator+(v42, (uint64_t *)&v30, (uint64_t)v43);
    v29 = 261;
    v28[0] = (uint64_t)mlir::detail::OpPassManagerImpl::getOpAnchorName((const char *)v3);
    v28[1] = v25;
    llvm::operator+(v43, v28, (uint64_t)v44);
    v26 = "', did you intend to nest?";
    v27 = 259;
    llvm::operator+(v44, (uint64_t *)&v26, (uint64_t)v45);
    llvm::report_fatal_error((llvm::Twine *)v45, 1);
  }
  mlir::OpPassManager::OpPassManager(v44, v7, v6, 0);
  v8 = operator new(0x240uLL);
  mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::PassWrapper((uint64_t)v8);
  *v9 = off_1E0E4E358;
  v10 = (uint64_t **)(v9 + 43);
  v9[43] = v9 + 45;
  v9[44] = 0x100000000;
  v9[46] = v9 + 48;
  v9[47] = 0x800000000;
  llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>((uint64_t)(v9 + 43), v44);
  v45[0] = v8;
  mlir::detail::OpPassManagerImpl::addPass(v3, v45);
  v11 = v45[0];
  v45[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *v10;
  v13 = v44[0];
  v44[0] = 0;
  if (v13)
  {
    v14 = *(_QWORD **)(v13 + 40);
    if (v14)
    {
      v15 = *(_QWORD **)(v13 + 48);
      v16 = *(void **)(v13 + 40);
      if (v15 != v14)
      {
        do
        {
          v18 = *--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        while (v15 != v14);
        v16 = *(void **)(v13 + 40);
      }
      *(_QWORD *)(v13 + 48) = v14;
      operator delete(v16);
    }
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    operator delete((void *)v13);
  }
  v21 = *a2;
  *a2 = 0;
  v22 = *v12;
  v45[0] = v21;
  mlir::detail::OpPassManagerImpl::addPass(v22, v45);
  result = (_QWORD *)v45[0];
  v45[0] = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t mlir::detail::OpPassManagerImpl::nest(uint64_t a1, _BYTE *a2, size_t a3)
{
  void *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  uint64_t v17;

  mlir::OpPassManager::OpPassManager(&__p, a2, a3, *(_DWORD *)(a1 + 68));
  v4 = operator new(0x240uLL);
  mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::PassWrapper((uint64_t)v4);
  *v5 = off_1E0E4E358;
  v6 = v5 + 43;
  v5[43] = v5 + 45;
  v5[44] = 0x100000000;
  v5[46] = v5 + 48;
  v5[47] = 0x800000000;
  llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>((uint64_t)(v5 + 43), (uint64_t *)&__p);
  v17 = (uint64_t)v4;
  mlir::detail::OpPassManagerImpl::addPass((_BYTE *)a1, &v17);
  v7 = v17;
  v17 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *v6;
  v9 = (void **)__p;
  __p = 0;
  if (v9)
  {
    v10 = v9[5];
    if (v10)
    {
      v11 = v9[6];
      v12 = v9[5];
      if (v11 != v10)
      {
        do
        {
          v14 = *--v11;
          v13 = v14;
          *v11 = 0;
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        }
        while (v11 != v10);
        v12 = v9[5];
      }
      v9[6] = v10;
      operator delete(v12);
    }
    if (*((char *)v9 + 23) < 0)
      operator delete(*v9);
    operator delete(v9);
  }
  return v8;
}

uint64_t mlir::OpPassManager::addPass(_BYTE **a1, uint64_t *a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  mlir::detail::OpPassManagerImpl::addPass(v2, &v5);
  result = v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

const char *mlir::detail::OpPassManagerImpl::getOpAnchorName(const char *this)
{
  if ((this[23] & 0x80000000) == 0)
  {
    if (this[23])
      goto LABEL_3;
    return "any";
  }
  if (!*((_QWORD *)this + 1))
    return "any";
LABEL_3:
  if (this[23] < 0)
    return *(const char **)this;
  return this;
}

uint64_t mlir::detail::OpPassManagerImpl::finalizePassList(mlir::detail::OpPassManagerImpl *this, mlir::MLIRContext *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  mlir::detail::OpPassManagerImpl **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mlir::detail::OpPassManagerImpl **v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  mlir::MLIRContext *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  const void ***v36;
  char *v37;
  char *v38;
  __int128 v39;
  const void **v40;
  const char *v41;
  const void ***v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  const void **v47;
  mlir::detail::OpPassManagerImpl *v48;
  uint64_t v49;
  const char *v50;
  const void ***v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  const void **v70;
  const char *v71;
  uint64_t v72;
  __int16 v73;
  const char *v74;
  _QWORD v75[2];
  void *v76;
  unsigned int v77;
  unsigned int v78;
  _BYTE v79[96];
  void *v80;
  _QWORD *v81;
  void *__p;
  _QWORD **v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)*((_QWORD *)this + 5);
  v6 = (uint64_t *)*((_QWORD *)this + 6);
  v4 = (uint64_t **)((char *)this + 40);
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      v8 = v7;
      v7 = *v5;
      v9 = *(_QWORD *)(*v5 + 8);
      if ((v10 & 1) == 0
      {
        v74 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        v75[0] = 81;
        v14 = llvm::StringRef::find((uint64_t *)&v74, "DesiredTypeName = ", 0x12uLL, 0);
        if (v75[0] >= v14)
          v15 = v14;
        else
          v15 = v75[0];
        v16 = &v74[v15];
        v17 = v75[0] - v15;
        v18 = 18;
        if (v17 < 0x12)
          v18 = v17;
        v19 = v17 - v18;
        if (v19 >= v19 - 1)
          v20 = v19 - 1;
        else
          v20 = v19;
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      }
      if (v9 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
      {
        if (v8
          && mlir::detail::OpToOpPassAdaptor::tryMergeInto((uint64_t ***)v7, a2, (mlir::detail::OpToOpPassAdaptor *)v8))
        {
          v13 = *v5;
          *v5 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          v7 = v8;
        }
      }
      else
      {
        if (v8)
        {
          v11 = *(unsigned int *)(v8 + 352);
          if ((_DWORD)v11)
          {
            v12 = *(mlir::detail::OpPassManagerImpl ***)(v8 + 344);
            v7 = 8 * v11;
            while (mlir::detail::OpPassManagerImpl::finalizePassList(*v12, a2))
            {
              ++v12;
              v7 -= 8;
              if (!v7)
                goto LABEL_4;
            }
            return 0;
          }
        }
        v7 = 0;
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v6);
    if (v7)
    {
      v21 = *(unsigned int *)(v7 + 352);
      if ((_DWORD)v21)
      {
        v22 = *(mlir::detail::OpPassManagerImpl ***)(v7 + 344);
        v23 = 8 * v21;
        while (mlir::detail::OpPassManagerImpl::finalizePassList(*v22, a2))
        {
          ++v22;
          v23 -= 8;
          if (!v23)
            goto LABEL_33;
        }
        return 0;
      }
    }
  }
LABEL_33:
  llvm::erase_if<std::vector<std::unique_ptr<mlir::Pass>>,std::logical_not<std::unique_ptr<mlir::Pass>>>(v4);
  v24 = *((_BYTE *)this + 23);
  if (v24 < 0)
  {
    if (!*((_QWORD *)this + 1))
      goto LABEL_39;
  }
  else if (!*((_BYTE *)this + 23))
  {
LABEL_39:
    if (*((_BYTE *)this + 32))
      goto LABEL_40;
    return 1;
  }
  if (*((_BYTE *)this + 32))
    goto LABEL_39;
  if (v24 >= 0)
    v48 = this;
  else
    v48 = *(mlir::detail::OpPassManagerImpl **)this;
  if (v24 >= 0)
    v49 = *((unsigned __int8 *)this + 23);
  else
    v49 = *((_QWORD *)this + 1);
  mlir::OperationName::OperationName(&v74, v48, v49, a2);
  v50 = v74;
  if (!*((_BYTE *)this + 32))
    *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 3) = v50;
  if (!*((_BYTE *)this + 32))
    return 1;
LABEL_40:
  v26 = *((_QWORD *)this + 3);
  v27 = *(void **)(v26 + 16);
  v28 = v26;
  if (v27 == &mlir::detail::TypeIDResolver<void,void>::id)
    v28 = 0;
  v29 = (uint64_t *)*((_QWORD *)this + 5);
  v30 = (uint64_t *)*((_QWORD *)this + 6);
  v25 = 1;
  if (v29 != v30 && v27 != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v31 = v28 | v26 & 0xFFFFFFFFFFFFFF00;
    if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)*v29 + 72))(*v29, v31))
    {
      v33 = v29 + 1;
      while (v33 != v30)
      {
        v34 = *v33++;
        if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v34 + 72))(v34, v31) & 1) == 0)
        {
          v29 = v33 - 1;
          goto LABEL_49;
        }
      }
      return 1;
    }
LABEL_49:
    v35 = mlir::UnknownLoc::get(a2, v32);
    mlir::emitError(v35, (uint64_t)&v74);
    if (v74)
    {
      LODWORD(v70) = 3;
      v71 = "unable to schedule pass '";
      v72 = 25;
      v36 = &v70;
      v37 = (char *)v76;
      if (v77 >= v78)
      {
        v64 = v77 + 1;
        if (v76 <= &v70 && (char *)v76 + 24 * v77 > (char *)&v70)
        {
          v67 = (char *)&v70 - (_BYTE *)v76;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v64, 24);
          v37 = (char *)v76;
          v36 = (const void ***)((char *)v76 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v64, 24);
          v36 = &v70;
          v37 = (char *)v76;
        }
      }
      v38 = &v37[24 * v77];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = v36[2];
      *(_OWORD *)v38 = v39;
      ++v77;
    }
    v40 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v29 + 16))(*v29);
    if (v74)
    {
      v73 = 261;
      v70 = v40;
      v71 = v41;
      mlir::Diagnostic::operator<<((uint64_t)v75, &v70);
      if (v74)
      {
        LODWORD(v70) = 3;
        v71 = "' on a PassManager intended to run on '";
        v72 = 39;
        v42 = &v70;
        v43 = (char *)v76;
        if (v77 >= v78)
        {
          v65 = v77 + 1;
          if (v76 <= &v70 && (char *)v76 + 24 * v77 > (char *)&v70)
          {
            v68 = (char *)&v70 - (_BYTE *)v76;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v65, 24);
            v43 = (char *)v76;
            v42 = (const void ***)((char *)v76 + v68);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v65, 24);
            v42 = &v70;
            v43 = (char *)v76;
          }
        }
        v44 = &v43[24 * v77];
        v45 = *(_OWORD *)v42;
        *((_QWORD *)v44 + 2) = v42[2];
        *(_OWORD *)v44 = v45;
        ++v77;
      }
    }
    v46 = *((unsigned __int8 *)this + 23);
    if (*((char *)this + 23) < 0)
    {
      if (*((_QWORD *)this + 1))
      {
LABEL_58:
        v47 = *(const void ***)this;
        if ((v46 & 0x80u) != 0)
          v46 = *((_QWORD *)this + 1);
        else
          v47 = (const void **)this;
        if (!v74)
          goto LABEL_79;
        goto LABEL_76;
      }
    }
    else if (*((_BYTE *)this + 23))
    {
      goto LABEL_58;
    }
    v47 = (const void **)"any";
    v46 = 3;
    if (!v74)
    {
LABEL_79:
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
      if (v74)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
      if (v84)
      {
        v56 = (_QWORD **)__p;
        if (__p)
        {
          v57 = v83;
          v58 = __p;
          if (v83 != __p)
          {
            do
              v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
            while (v57 != v56);
            v58 = __p;
          }
          v83 = v56;
          operator delete(v58);
        }
        v59 = v80;
        if (v80)
        {
          v60 = v81;
          v61 = v80;
          if (v81 != v80)
          {
            do
            {
              v63 = (void *)*--v60;
              v62 = v63;
              *v60 = 0;
              if (v63)
                operator delete[](v62);
            }
            while (v60 != v59);
            v61 = v80;
          }
          v81 = v59;
          operator delete(v61);
        }
        if (v76 != v79)
          free(v76);
      }
      return v25;
    }
LABEL_76:
    v73 = 261;
    v70 = v47;
    v71 = (const char *)v46;
    mlir::Diagnostic::operator<<((uint64_t)v75, &v70);
    if (v74)
    {
      LODWORD(v70) = 3;
      v71 = "'!";
      v72 = 2;
      v52 = &v70;
      v53 = (char *)v76;
      if (v77 >= v78)
      {
        v66 = v77 + 1;
        if (v76 <= &v70 && (char *)v76 + 24 * v77 > (char *)&v70)
        {
          v69 = (char *)&v70 - (_BYTE *)v76;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v66, 24);
          v53 = (char *)v76;
          v52 = (const void ***)((char *)v76 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, v79, v66, 24);
          v52 = &v70;
          v53 = (char *)v76;
        }
      }
      v54 = &v53[24 * v77];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = v52[2];
      *(_OWORD *)v54 = v55;
      ++v77;
    }
    goto LABEL_79;
  }
  return v25;
}

uint64_t mlir::detail::OpToOpPassAdaptor::tryMergeInto(uint64_t ***this, mlir::MLIRContext *a2, mlir::detail::OpToOpPassAdaptor *a3)
{
  mlir::detail::OpToOpPassAdaptor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  size_t v28;
  const char **v29;
  uint64_t v30;
  uint64_t v31;
  const char **v32;
  const char *v33;
  int v34;
  int v35;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  const char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  char v73;
  uint64_t v74;
  const char *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  mlir::detail::OpToOpPassAdaptor *v91;
  void **v92;
  uint64_t *v93;
  uint64_t v95;

  v4 = (mlir::detail::OpToOpPassAdaptor *)this;
  v5 = *((unsigned int *)this + 88);
  if (!(_DWORD)v5)
  {
    v7 = this[43];
LABEL_10:
    if (v7 == &this[43][v5])
      goto LABEL_30;
    v8 = *((unsigned int *)a3 + 88);
    if (!(_DWORD)v8)
      goto LABEL_30;
    v9 = (uint64_t *)*((_QWORD *)a3 + 43);
    v10 = 8 * v8;
    while (1)
    {
      v11 = (uint64_t *)*v9;
      v12 = *(_BYTE *)(*v9 + 23);
      if (v12 < 0)
      {
        if (v11[1])
        {
LABEL_17:
          if (!*((_BYTE *)v11 + 32))
          {
            if (v12 >= 0)
              v13 = (uint64_t *)*v9;
            else
              v13 = (uint64_t *)*v11;
            if (v12 >= 0)
              v14 = *(unsigned __int8 *)(*v9 + 23);
            else
              v14 = v11[1];
            mlir::OperationName::OperationName(&v95, v13, v14, a2);
            if (!*((_BYTE *)v11 + 32))
              *((_BYTE *)v11 + 32) = 1;
            v11[3] = v95;
          }
        }
      }
      else if (*(_BYTE *)(*v9 + 23))
      {
        goto LABEL_17;
      }
      if (!*((_BYTE *)v11 + 32) || (mlir::detail::OpPassManagerImpl::canScheduleOn(*v7, (uint64_t)a2, v11[3]) & 1) != 0)
        return 0;
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_30;
    }
  }
  v6 = 8 * v5;
  v7 = this[43];
  do
  {
    if (*((char *)*v7 + 23) < 0)
    {
      if (!(*v7)[1])
        goto LABEL_10;
    }
    else if (!*((_BYTE *)*v7 + 23))
    {
      goto LABEL_10;
    }
    ++v7;
    v6 -= 8;
  }
  while (v6);
LABEL_30:
  v92 = (void **)((char *)a3 + 344);
  v15 = *((unsigned int *)a3 + 88);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    v17 = (uint64_t **)*((_QWORD *)a3 + 43);
    do
    {
      if (*((char *)*v17 + 23) < 0)
      {
        if (!(*v17)[1])
          goto LABEL_39;
      }
      else if (!*((_BYTE *)*v17 + 23))
      {
        goto LABEL_39;
      }
      ++v17;
      v16 -= 8;
    }
    while (v16);
LABEL_59:
    v18 = (uint64_t *)*((_QWORD *)v4 + 43);
    LODWORD(v19) = *((_DWORD *)v4 + 88);
    goto LABEL_60;
  }
  v17 = (uint64_t **)*((_QWORD *)a3 + 43);
LABEL_39:
  v18 = (uint64_t *)*((_QWORD *)v4 + 43);
  v19 = *((unsigned int *)v4 + 88);
  if (v17 != (uint64_t **)(*((_QWORD *)a3 + 43) + 8 * v15))
  {
    if (!(_DWORD)v19)
      goto LABEL_164;
    v20 = 8 * v19;
    while (1)
    {
      v21 = *v18;
      v22 = *(_BYTE *)(*v18 + 23);
      if (v22 < 0)
      {
        if (!*(_QWORD *)(v21 + 8))
          goto LABEL_56;
      }
      else if (!*(_BYTE *)(*v18 + 23))
      {
        goto LABEL_56;
      }
      if (!*(_BYTE *)(v21 + 32))
      {
        if (v22 >= 0)
          v23 = *v18;
        else
          v23 = *(_QWORD *)v21;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(*v18 + 23);
        else
          v24 = *(_QWORD *)(v21 + 8);
        mlir::OperationName::OperationName(&v95, v23, v24, a2);
        if (!*(_BYTE *)(v21 + 32))
          *(_BYTE *)(v21 + 32) = 1;
        *(_QWORD *)(v21 + 24) = v95;
      }
LABEL_56:
      if (!*(_BYTE *)(v21 + 32)
        || (mlir::detail::OpPassManagerImpl::canScheduleOn(*v17, (uint64_t)a2, *(_QWORD *)(v21 + 24)) & 1) != 0)
      {
        return 0;
      }
      ++v18;
      v20 -= 8;
      if (!v20)
        goto LABEL_59;
    }
  }
LABEL_60:
  if (!(_DWORD)v19)
    goto LABEL_164;
  v91 = v4;
  v93 = &v18[v19];
  do
  {
    while (1)
    {
      while (1)
      {
        v25 = *v18;
        v26 = *(_BYTE *)(*v18 + 23);
        if (v26 < 0)
        {
          if (!*(_QWORD *)(v25 + 8))
          {
LABEL_92:
            v27 = "any";
            v28 = 3;
            v29 = (const char **)*((_QWORD *)a3 + 43);
            v30 = *((unsigned int *)a3 + 88);
            if ((_DWORD)v30)
              goto LABEL_72;
            goto LABEL_93;
          }
        }
        else if (!*(_BYTE *)(*v18 + 23))
        {
          goto LABEL_92;
        }
        if (v26 >= 0)
          v27 = (unsigned __int8 *)*v18;
        else
          v27 = *(unsigned __int8 **)v25;
        if (v26 >= 0)
          v28 = *(unsigned __int8 *)(*v18 + 23);
        else
          v28 = *(_QWORD *)(v25 + 8);
        v29 = (const char **)*((_QWORD *)a3 + 43);
        v30 = *((unsigned int *)a3 + 88);
        if ((_DWORD)v30)
        {
LABEL_72:
          if (v28 == 3)
          {
            v31 = 8 * v30;
            v32 = v29;
            while (1)
            {
              v33 = *v32;
              v37 = (*v32)[23];
              if (v37 < 0)
              {
                if (!*((_QWORD *)v33 + 1))
                {
LABEL_74:
                  v33 = "any";
                  goto LABEL_75;
                }
              }
              else if (!(*v32)[23])
              {
                goto LABEL_74;
              }
              if (v37 >= 0)
                v38 = *((unsigned __int8 *)*v32 + 23);
              else
                v38 = *((_QWORD *)v33 + 1);
              if (v38 != 3)
                goto LABEL_79;
              if (v37 < 0)
                v33 = *(const char **)v33;
LABEL_75:
              v34 = *(unsigned __int16 *)v33;
              v35 = *((unsigned __int8 *)v33 + 2);
              if (v34 == *(unsigned __int16 *)v27 && v35 == v27[2])
                goto LABEL_94;
LABEL_79:
              ++v32;
              v31 -= 8;
              if (!v31)
                goto LABEL_62;
            }
          }
          v71 = 8 * v30;
          v32 = v29;
          while (1)
          {
            v72 = *v32;
            v73 = (*v32)[23];
            if (v73 < 0)
            {
              if (!*((_QWORD *)v72 + 1))
                goto LABEL_127;
            }
            else if (!(*v32)[23])
            {
              goto LABEL_127;
            }
            if (v73 >= 0)
              v74 = *((unsigned __int8 *)*v32 + 23);
            else
              v74 = *((_QWORD *)v72 + 1);
            if (v74 == v28)
            {
              if (!v28)
                goto LABEL_94;
              v75 = v73 >= 0 ? *v32 : *(const char **)v72;
              if (!memcmp(v75, v27, v28))
                goto LABEL_94;
            }
LABEL_127:
            ++v32;
            v71 -= 8;
            if (!v71)
              goto LABEL_62;
          }
        }
LABEL_93:
        v32 = v29;
LABEL_94:
        if (v32 != &v29[v30] && v32)
          break;
LABEL_62:
        llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>((uint64_t)v92, v18++);
        if (v18 == v93)
          goto LABEL_149;
      }
      v40 = *(uint64_t **)(v25 + 40);
      v39 = *(uint64_t **)(v25 + 48);
      if (v40 != v39)
      {
        v41 = *v32;
        v42 = (_QWORD *)*((_QWORD *)*v32 + 6);
        do
        {
          v44 = *((_QWORD *)v41 + 7);
          if ((unint64_t)v42 < v44)
          {
            v43 = *v40;
            *v40 = 0;
            *v42++ = v43;
          }
          else
          {
            v45 = *((_QWORD *)v41 + 5);
            v46 = (char *)v42 - v45;
            v47 = ((uint64_t)v42 - v45) >> 3;
            if ((unint64_t)(v47 + 1) >> 61)
              abort();
            v48 = v44 - v45;
            v49 = v48 >> 2;
            if (v48 >> 2 <= (unint64_t)(v47 + 1))
              v49 = v47 + 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            if (v50)
            {
              if (v50 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v51 = (char *)operator new(8 * v50);
            }
            else
            {
              v51 = 0;
            }
            v52 = &v51[8 * v47];
            v53 = &v51[8 * v50];
            v54 = *v40;
            *v40 = 0;
            *(_QWORD *)v52 = v54;
            v42 = v52 + 8;
            v55 = (char *)*((_QWORD *)v41 + 5);
            v56 = (char *)*((_QWORD *)v41 + 6);
            v57 = (char *)(v56 - v55);
            if (v56 == v55)
            {
              *((_QWORD *)v41 + 5) = v52;
              *((_QWORD *)v41 + 6) = v42;
              *((_QWORD *)v41 + 7) = v53;
            }
            else
            {
              v58 = v57 - 8;
              if ((unint64_t)(v57 - 8) < 0x78
                || &v56[-8 * ((unint64_t)v58 >> 3) - 8] < v52
                && &v46[(_QWORD)v51 - ((unint64_t)v58 & 0xFFFFFFFFFFFFFFF8) - 8] < v56)
              {
                goto LABEL_172;
              }
              v59 = ((unint64_t)v58 >> 3) + 1;
              v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
              v61 = &v56[-v60];
              v52 -= v60;
              v62 = &v46[(_QWORD)v51 - 16];
              v63 = v56 - 16;
              v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v66 = *((_OWORD *)v63 - 1);
                v65 = *(_OWORD *)v63;
                *((_OWORD *)v63 - 1) = 0uLL;
                *(_OWORD *)v63 = 0uLL;
                *((_OWORD *)v62 - 1) = v66;
                *(_OWORD *)v62 = v65;
                v62 -= 32;
                v63 -= 32;
                v64 -= 4;
              }
              while (v64);
              v56 = v61;
              if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_172:
                do
                {
                  v67 = *((_QWORD *)v56 - 1);
                  v56 -= 8;
                  *(_QWORD *)v56 = 0;
                  *((_QWORD *)v52 - 1) = v67;
                  v52 -= 8;
                }
                while (v56 != v55);
              }
              v56 = (char *)*((_QWORD *)v41 + 5);
              v68 = (char *)*((_QWORD *)v41 + 6);
              *((_QWORD *)v41 + 5) = v52;
              *((_QWORD *)v41 + 6) = v42;
              *((_QWORD *)v41 + 7) = v53;
              while (v68 != v56)
              {
                v70 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                v69 = v70;
                *(_QWORD *)v68 = 0;
                if (v70)
                  (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
              }
            }
            if (v56)
              operator delete(v56);
          }
          *((_QWORD *)v41 + 6) = v42;
          ++v40;
        }
        while (v40 != v39);
        v76 = *(uint64_t **)(v25 + 40);
        v40 = *(uint64_t **)(v25 + 48);
        if (v40 != v76)
          break;
      }
      *(_QWORD *)(v25 + 48) = v40;
      if (++v18 == v93)
        goto LABEL_149;
    }
    do
    {
      v78 = *--v40;
      v77 = v78;
      *v40 = 0;
      if (v78)
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
    }
    while (v40 != v76);
    *(_QWORD *)(v25 + 48) = v76;
    ++v18;
  }
  while (v18 != v93);
LABEL_149:
  v4 = v91;
  v79 = *((unsigned int *)v91 + 88);
  if ((_DWORD)v79)
  {
    v80 = (_QWORD *)*((_QWORD *)v91 + 43);
    v81 = &v80[v79];
    do
    {
      v83 = *--v81;
      v82 = v83;
      *v81 = 0;
      if (v83)
      {
        v84 = *(_QWORD **)(v82 + 40);
        if (v84)
        {
          v85 = *(_QWORD **)(v82 + 48);
          v86 = *(void **)(v82 + 40);
          if (v85 != v84)
          {
            do
            {
              v88 = *--v85;
              v87 = v88;
              *v85 = 0;
              if (v88)
                (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
            }
            while (v85 != v84);
            v86 = *(void **)(v82 + 40);
          }
          *(_QWORD *)(v82 + 48) = v84;
          operator delete(v86);
        }
        if (*(char *)(v82 + 23) < 0)
          operator delete(*(void **)v82);
        operator delete((void *)v82);
      }
    }
    while (v81 != v80);
  }
LABEL_164:
  *((_DWORD *)v4 + 88) = 0;
  v89 = *((unsigned int *)a3 + 88);
  if (v89 >= 2)
    qsort(*v92, v89, 8uLL, (int (__cdecl *)(const void *, const void *))mlir::detail::OpToOpPassAdaptor::tryMergeInto(mlir::MLIRContext *,mlir::detail::OpToOpPassAdaptor&)::$_2::__invoke);
  return 1;
}

uint64_t **llvm::erase_if<std::vector<std::unique_ptr<mlir::Pass>>,std::logical_not<std::unique_ptr<mlir::Pass>>>(uint64_t **result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;

  v1 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v3 = result;
    while (*v1)
    {
      if (++v1 == v2)
        return result;
    }
    if (v1 != v2)
    {
      v4 = v1 + 1;
      if (v1 + 1 != v2)
      {
        do
        {
          v5 = *v4;
          if (*v4)
          {
            *v4 = 0;
            result = (uint64_t **)*v1;
            *v1 = v5;
            if (result)
              result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
            ++v1;
          }
          ++v4;
        }
        while (v4 != v2);
        v2 = v3[1];
      }
    }
    if (v1 != v2)
    {
      while (v2 != v1)
      {
        v6 = (uint64_t **)*--v2;
        result = v6;
        *v2 = 0;
        if (v6)
          result = (uint64_t **)((uint64_t (*)(uint64_t **))(*result)[1])(result);
      }
      v3[1] = v1;
    }
  }
  return result;
}

uint64_t mlir::detail::OpPassManagerImpl::canScheduleOn(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  const char *v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  unint64_t v30;

  v4 = a2;
  v6 = *((_BYTE *)a1 + 23);
  if (v6 < 0)
  {
    if (!a1[1])
      goto LABEL_6;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
LABEL_6:
    if (*((_BYTE *)a1 + 32))
      return a1[3] == a3;
    goto LABEL_17;
  }
  if (*((_BYTE *)a1 + 32))
    goto LABEL_6;
  if (v6 >= 0)
    v8 = a1;
  else
    v8 = (uint64_t *)*a1;
  if (v6 >= 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = a1[1];
  mlir::OperationName::OperationName(&v29, v8, v9, v4);
  v10 = v29;
  if (!*((_BYTE *)a1 + 32))
  {
    *((_BYTE *)a1 + 32) = 1;
    a1[3] = (uint64_t)v10;
    return a1[3] == a3;
  }
  a1[3] = (uint64_t)v29;
  if (*((_BYTE *)a1 + 32))
    return a1[3] == a3;
LABEL_17:
  v11 = *(void **)(a3 + 16);
  v12 = v11 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v11 == &mlir::detail::TypeIDResolver<void,void>::id)
    v13 = 0;
  else
    v13 = a3;
  if (v12)
    return 0;
  v14 = v13 | a3 & 0xFFFFFFFFFFFFFF00;
  v16 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v15 & 1) == 0)
  {
    v16 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v21)
    {
      v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      v30 = 91;
      v22 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if (v30 >= v22)
        v23 = v22;
      else
        v23 = v30;
      v24 = &v29[v23];
      v25 = v30 - v23;
      if (v30 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v30 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      v16 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, v16[201], a3, v4);
  if ((_DWORD)result)
  {
    v17 = a1[5];
    v18 = a1[6];
    if (v17 == v18)
    {
      return 1;
    }
    else
    {
      v19 = v17 + 8;
      do
      {
        result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v19 - 8) + 72))(*(_QWORD *)(v19 - 8), v14);
        if ((_DWORD)result)
          v20 = v19 == v18;
        else
          v20 = 1;
        v19 += 8;
      }
      while (!v20);
    }
  }
  return result;
}

_QWORD *mlir::OpPassManager::OpPassManager(_QWORD *a1, _BYTE *a2, size_t a3, int a4)
{
  _BYTE *v8;
  _BYTE *v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v8 = operator new(0x48uLL);
  v9 = v8;
  if (a3 == 3)
  {
    if (*(_WORD *)a2 == 28257 && a2[2] == 121)
    {
      v8[23] = 0;
      *v8 = 0;
      goto LABEL_20;
    }
    if (a2)
    {
      v8[23] = 3;
      v11 = v8;
      goto LABEL_18;
    }
  }
  else if (a2)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a3 >= 0x17)
    {
      v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v12 = a3 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      *((_QWORD *)v9 + 1) = a3;
      *((_QWORD *)v9 + 2) = v13 | 0x8000000000000000;
      *(_QWORD *)v9 = v11;
    }
    else
    {
      v8[23] = a3;
      v11 = v8;
      if (!a3)
        goto LABEL_19;
    }
LABEL_18:
    memmove(v11, a2, a3);
LABEL_19:
    *((_BYTE *)v11 + a3) = 0;
    goto LABEL_20;
  }
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
LABEL_20:
  v9[24] = 0;
  v9[32] = 0;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 5) = 0;
  *((_DWORD *)v9 + 16) = 0;
  *((_DWORD *)v9 + 17) = a4;
  *a1 = v9;
  return a1;
}

uint64_t *mlir::OpPassManager::OpPassManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = 0;
  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 40);
    if (v5)
    {
      v6 = *(_QWORD **)(v4 + 48);
      v7 = *(void **)(v4 + 40);
      if (v6 != v5)
      {
        do
        {
          v9 = *--v6;
          v8 = v9;
          *v6 = 0;
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        }
        while (v6 != v5);
        v7 = *(void **)(v4 + 40);
      }
      *(_QWORD *)(v4 + 48) = v5;
      operator delete(v7);
    }
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    operator delete((void *)v4);
  }
  return a1;
}

std::string **mlir::OpPassManager::operator=(std::string **a1, const mlir::detail::OpPassManagerImpl **a2)
{
  const mlir::detail::OpPassManagerImpl *v3;
  std::string *v4;
  std::string *v5;
  std::string *v6;
  _QWORD *v7;
  _QWORD *data;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = (std::string *)operator new(0x48uLL);
  v5 = mlir::detail::OpPassManagerImpl::OpPassManagerImpl(v4, v3);
  v6 = *a1;
  *a1 = v5;
  if (v6)
  {
    v7 = (_QWORD *)v6[1].__r_.__value_.__r.__words[2];
    if (v7)
    {
      data = v6[2].__r_.__value_.__l.__data_;
      v9 = (void *)v6[1].__r_.__value_.__r.__words[2];
      if (data != v7)
      {
        do
        {
          v11 = *--data;
          v10 = v11;
          *data = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        while (data != v7);
        v9 = (void *)v6[1].__r_.__value_.__r.__words[2];
      }
      v6[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      operator delete(v9);
    }
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6->__r_.__value_.__l.__data_);
    operator delete(v6);
  }
  return a1;
}

std::string **mlir::OpPassManager::OpPassManager(std::string **this, const mlir::detail::OpPassManagerImpl **a2)
{
  *this = 0;
  return mlir::OpPassManager::operator=(this, a2);
}

void mlir::OpPassManager::~OpPassManager(mlir::OpPassManager *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 40);
    if (v2)
    {
      v3 = *(_QWORD **)(v1 + 48);
      v4 = *(void **)(v1 + 40);
      if (v3 != v2)
      {
        do
        {
          v6 = *--v3;
          v5 = v6;
          *v3 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        }
        while (v3 != v2);
        v4 = *(void **)(v1 + 40);
      }
      *(_QWORD *)(v1 + 48) = v2;
      operator delete(v4);
    }
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

uint64_t mlir::OpPassManager::begin(mlir::OpPassManager *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 40);
}

uint64_t mlir::OpPassManager::nest(uint64_t *a1, _BYTE *a2, size_t a3)
{
  return mlir::detail::OpPassManagerImpl::nest(*a1, a2, a3);
}

const char *mlir::OpPassManager::getOpAnchorName(mlir::OpPassManager *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if ((*(char *)(*(_QWORD *)this + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)this + 23))
      goto LABEL_3;
    return "any";
  }
  if (!v1[1])
    return "any";
LABEL_3:
  if (*(char *)(*(_QWORD *)this + 23) >= 0)
    return *(const char **)this;
  else
    return (const char *)*v1;
}

llvm::raw_ostream *mlir::OpPassManager::printAsTextualPipeline(const char **this, llvm::raw_ostream *a2)
{
  const char *v4;
  char v5;
  const char *v6;
  _QWORD *v7;
  size_t v8;
  llvm::raw_ostream *result;
  _QWORD *v10;
  llvm::raw_ostream *v11;
  unint64_t v12;
  _BYTE *v13;
  mlir::Pass **v14;
  mlir::Pass **v15;
  mlir::Pass **v16;
  mlir::Pass *v17;
  mlir::Pass *v18;
  mlir::Pass *v19;

  v4 = *this;
  v5 = (*this)[23];
  if ((v5 & 0x80000000) == 0)
  {
    if ((*this)[23])
      goto LABEL_3;
LABEL_13:
    v7 = (_QWORD *)((char *)a2 + 24);
    v10 = (_QWORD *)((char *)a2 + 32);
    result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
    v12 = *((_QWORD *)a2 + 3) - (_QWORD)result;
    v6 = "any";
    v8 = 3;
    if (v12 > 2)
      goto LABEL_18;
LABEL_14:
    result = llvm::raw_ostream::write(a2, v6, v8);
    v11 = result;
    goto LABEL_15;
  }
  if (!*((_QWORD *)v4 + 1))
    goto LABEL_13;
LABEL_3:
  if (v5 >= 0)
    v6 = *this;
  else
    v6 = *(const char **)v4;
  v7 = (_QWORD *)((char *)a2 + 24);
  if (v5 >= 0)
    v8 = *((unsigned __int8 *)*this + 23);
  else
    v8 = *((_QWORD *)v4 + 1);
  v10 = (_QWORD *)((char *)a2 + 32);
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v8 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    goto LABEL_14;
  v11 = a2;
  if (!v8)
  {
LABEL_15:
    v13 = (_BYTE *)*((_QWORD *)v11 + 4);
    if (*((_BYTE **)v11 + 3) != v13)
      goto LABEL_16;
    goto LABEL_19;
  }
LABEL_18:
  result = (llvm::raw_ostream *)memcpy(result, v6, v8);
  *v10 += v8;
  v11 = a2;
  v13 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) != v13)
  {
LABEL_16:
    *v13 = 40;
    ++*((_QWORD *)v11 + 4);
    v14 = (mlir::Pass **)*((_QWORD *)*this + 5);
    v15 = (mlir::Pass **)*((_QWORD *)*this + 6);
    if (v14 == v15)
      goto LABEL_25;
    goto LABEL_20;
  }
LABEL_19:
  result = llvm::raw_ostream::write(v11, "(", 1uLL);
  v14 = (mlir::Pass **)*((_QWORD *)*this + 5);
  v15 = (mlir::Pass **)*((_QWORD *)*this + 6);
  if (v14 == v15)
    goto LABEL_25;
LABEL_20:
  v17 = *v14;
  v16 = v14 + 1;
  for (result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v17, a2);
        v16 != v15;
        result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v19, a2))
  {
    while (*v7 != *v10)
    {
      *(_BYTE *)(*v10)++ = 44;
      v18 = *v16++;
      result = (llvm::raw_ostream *)mlir::Pass::printAsTextualPipeline(v18, a2);
      if (v16 == v15)
        goto LABEL_25;
    }
    llvm::raw_ostream::write(a2, ",", 1uLL);
    v19 = *v16++;
  }
LABEL_25:
  if (*v7 == *v10)
    return llvm::raw_ostream::write(a2, ")", 1uLL);
  *(_BYTE *)(*v10)++ = 41;
  return result;
}

uint64_t mlir::OpPassManager::setNesting(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)result + 68) = a2;
  return result;
}

uint64_t mlir::OpPassManager::getNesting(mlir::OpPassManager *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 68);
}

uint64_t mlir::OpPassManager::initialize(mlir::OpPassManager *this, mlir::MLIRContext *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  mlir::OpPassManager *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v3 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 64) == a3)
    return 1;
  *(_DWORD *)(v3 + 64) = a3;
  v5 = *(uint64_t **)(v3 + 40);
  v6 = *(uint64_t **)(v3 + 48);
  if (v6 == v5)
    return 1;
  while (1)
  {
    v8 = *v5;
    v9 = *(_QWORD *)(*v5 + 8);
    if ((v10 & 1) == 0)
    {
      v23 = *v5;
      v8 = v23;
      if (v14)
      {
        v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        v25 = 81;
        v15 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
        if (v25 >= v15)
          v16 = v15;
        else
          v16 = v25;
        v17 = &v24[v16];
        v18 = v25 - v16;
        if (v25 - v16 >= 0x12)
          v19 = 18;
        else
          v19 = v25 - v16;
        v20 = v18 - v19;
        if (v20 >= v20 - 1)
          v21 = v20 - 1;
        else
          v21 = v20;
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
        v8 = v23;
      }
    }
    if (v9 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
      break;
    if (!(*(unsigned __int8 (**)(uint64_t, mlir::MLIRContext *))(*(_QWORD *)v8 + 64))(v8, a2))
      return 0;
LABEL_5:
    if (++v5 == v6)
      return 1;
  }
  v11 = *(unsigned int *)(v8 + 352);
  if (!(_DWORD)v11)
    goto LABEL_5;
  v12 = *(mlir::OpPassManager **)(v8 + 344);
  v13 = 8 * v11;
  while (mlir::OpPassManager::initialize(v12, a2, a3))
  {
    v12 = (mlir::OpPassManager *)((char *)v12 + 8);
    v13 -= 8;
    if (!v13)
      goto LABEL_5;
  }
  return 0;
}

unint64_t mlir::OpPassManager::hash(mlir::OpPassManager *this)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *v10;
  mlir::OpPassManager *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(*(_QWORD *)this + 40);
  v2 = *(uint64_t **)(*(_QWORD *)this + 48);
  if (v2 == v1)
    return 0;
  v3 = 0;
  v25 = *(uint64_t **)(*(_QWORD *)this + 48);
  do
  {
    v5 = *v1;
    v6 = *(_QWORD *)(*v1 + 8);
    v7 = atomic_load(v4);
    if ((v7 & 1) == 0 && __cxa_guard_acquire((__guard *)v4))
    {
      *(_QWORD *)&v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      *((_QWORD *)&v26 + 1) = 81;
      v16 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
      if (*((_QWORD *)&v26 + 1) >= v16)
        v17 = v16;
      else
        v17 = *((_QWORD *)&v26 + 1);
      v18 = v26 + v17;
      v19 = *((_QWORD *)&v26 + 1) - v17;
      v20 = 18;
      if (v19 < 0x12)
        v20 = v19;
      v21 = v19 - v20;
      if (v21 >= v21 - 1)
        v22 = v21 - 1;
      else
        v22 = v21;
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v18 + v20, v22);
      __cxa_guard_release((__guard *)v4);
    }
    if (v6 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
    {
      v9 = *(unsigned int *)(v5 + 352);
      if ((_DWORD)v9)
      {
        v10 = v4;
        v11 = *(mlir::OpPassManager **)(v5 + 344);
        v12 = 8 * v9;
        do
        {
          v13 = mlir::OpPassManager::hash(v11);
          v33 = 0;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v26 = 0u;
          if ((v14 & 1) == 0
          {
            v15 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v15 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v15;
          }
          v34 = llvm::hashing::detail::get_execution_seed(void)::seed;
          *(_QWORD *)&v26 = v3;
          *((_QWORD *)&v26 + 1) = v13;
          llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v26, 0, (char *)&v27, (char *)&v30);
          v11 = (mlir::OpPassManager *)((char *)v11 + 8);
          v12 -= 8;
        }
        while (v12);
        v4 = v10;
        v2 = v25;
      }
    }
    else
    {
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      if ((v8 & 1) == 0
      {
        v23 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v23 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v23;
      }
      v34 = llvm::hashing::detail::get_execution_seed(void)::seed;
      *(_QWORD *)&v26 = v3;
      *((_QWORD *)&v26 + 1) = v5;
      v3 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v26, 0, (char *)&v27, (char *)&v30);
    }
    ++v1;
  }
  while (v1 != v2);
  return v3;
}

uint64_t mlir::detail::OpToOpPassAdaptor::run(_QWORD *a1, mlir *a2, mlir::detail::NestedAnalysisMap *a3, char a4, int a5)
{
  uint64_t v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  llvm *v15;
  mlir::detail::NestedAnalysisMap *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  mlir *v21;
  std::recursive_mutex *v22;
  std::recursive_mutex *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *Context;
  uint64_t v28;
  mlir::detail::OpToOpPassAdaptor *v29;
  uint64_t v30;
  unsigned __int8 v31;
  const char **v32;
  const char **v33;
  const char **v34;
  __int128 v35;
  uint64_t v36;
  _QWORD **v37;
  _QWORD **v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  void *v44;
  const char **v45;
  const char **v46;
  const char **v47;
  __int128 v48;
  _QWORD **v49;
  _QWORD **v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  const char **v55;
  const char **v56;
  const char **v57;
  __int128 v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  void *v63;
  void *v64;
  int v66;
  mlir::MLIRContext *v67;
  int isMultithreadingEnabled;
  _BOOL4 v69;
  int v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  std::recursive_mutex **v74;
  _QWORD *v75;
  mlir *v76;
  std::recursive_mutex *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int64_t v106;
  int64_t v107;
  int64_t v108;
  unsigned __int8 v109;
  _QWORD v110[2];
  std::recursive_mutex **v111;
  const void **v112;
  unint64_t v113;
  BOOL *v114;
  __int16 v115;
  int v116;
  char v117;
  mlir *v118;
  _QWORD *v119;
  mlir::detail::NestedAnalysisMap *v120;
  const char *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  mlir **v125;
  unint64_t v126;
  mlir::detail::NestedAnalysisMap **v127;
  const char **v128;
  std::recursive_mutex ***v129;
  _QWORD v130[12];
  _QWORD *v131;
  _QWORD *v132;
  _QWORD **v133;
  _QWORD **v134;
  char v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v119 = a1;
  v120 = a3;
  v118 = a2;
  v117 = a4;
  v116 = a5;
  v5 = *((_QWORD *)a2 + 6);
  v6 = *(void **)(v5 + 16);
  v7 = v6 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v6 == &mlir::detail::TypeIDResolver<void,void>::id)
    v8 = 0;
  else
    v8 = *((_QWORD *)a2 + 6);
  if (v7)
  {
    v115 = 257;
    mlir::Operation::emitOpError((uint64_t *)a2, &v112, (uint64_t)&v125);
    if (v125)
    {
      LODWORD(v121) = 3;
      v122 = (unint64_t)"trying to schedule a pass on an unregistered operation";
      v123 = 54;
      v32 = &v121;
      v33 = v128;
      if (v129 >= HIDWORD(v129))
      {
        v82 = v129 + 1;
        if (v128 <= &v121 && &v128[3 * v129] > &v121)
        {
          v106 = (char *)&v121 - (char *)v128;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, v130, v82, 24);
          v33 = v128;
          v32 = (const char **)((char *)v128 + v106);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, v130, v82, 24);
          v32 = &v121;
          v33 = v128;
        }
      }
      v34 = &v33[3 * v129];
      v35 = *(_OWORD *)v32;
      v34[2] = v32[2];
      *(_OWORD *)v34 = v35;
      LODWORD(v129) = (_DWORD)v129 + 1;
    }
    v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v125);
    if (v125)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v125);
    if (v135)
    {
      v37 = v133;
      if (v133)
      {
        v38 = v134;
        v39 = v133;
        if (v134 != v133)
        {
          do
            v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
          while (v38 != v37);
          v39 = v133;
        }
        v134 = v37;
        operator delete(v39);
      }
      v40 = v131;
      if (!v131)
        goto LABEL_78;
      v41 = v132;
      v42 = v131;
      if (v132 == v131)
        goto LABEL_77;
      do
      {
        v44 = (void *)*--v41;
        v43 = v44;
        *v41 = 0;
        if (v44)
          operator delete[](v43);
      }
      while (v41 != v40);
      goto LABEL_76;
    }
  }
  else
  {
    v9 = v8 | v5 & 0xFFFFFFFFFFFFFF00;
    if ((v10 & 1) == 0
    {
      v125 = (mlir **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      v126 = 91;
      v85 = llvm::StringRef::find((uint64_t *)&v125, "DesiredTypeName = ", 0x12uLL, 0);
      if (v126 >= v85)
        v86 = v85;
      else
        v86 = v126;
      v87 = (char *)v125 + v86;
      v88 = v126 - v86;
      if (v126 - v86 >= 0x12)
        v89 = 18;
      else
        v89 = v126 - v86;
      v90 = v88 - v89;
      if (v90 >= v90 - 1)
        v91 = v90 - 1;
      else
        v91 = v90;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v87[v89], v91);
    }
    if (((*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) != 0)
    {
      v11 = v119;
      v14 = *((_QWORD *)v118 + 6);
      v12 = *(void **)(v14 + 16);
      v13 = v14 & 0xFFFFFFFFFFFFFF00;
      v14 = v14;
      if (v12 == &mlir::detail::TypeIDResolver<void,void>::id)
        v14 = 0;
      v15 = (llvm *)(*(uint64_t (**)(_QWORD *, unint64_t))(*v119 + 72))(v119, v14 | v13);
      if ((v15 & 1) != 0)
      {
        v16 = v120;
        v17 = *((_QWORD *)v120 + 9);
        v18 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) == 0 && v18)
        {
          do
          {
            v19 = *(_QWORD *)(v18 + 72);
            v18 = v19 & 0xFFFFFFFFFFFFFFF8;
          }
          while ((v19 & 4) == 0 && v18);
        }
        v111 = (std::recursive_mutex **)v18;
        v110[0] = llvm::get_threadid(v15);
        v110[1] = v119;
        v125 = &v118;
        v126 = (unint64_t)&v116;
        v127 = &v120;
        v128 = (const char **)&v117;
        v129 = &v111;
        v130[0] = v110;
        if (*((_BYTE *)v119 + 120))
        {
          v20 = (void *)v119[8];
          if (v20 != (void *)v119[7])
          {
            free(v20);
            v16 = v120;
            v18 = (unint64_t)v111;
          }
        }
        v21 = v118;
        v11[5] = (unint64_t)v118 & 0xFFFFFFFFFFFFFFFBLL;
        v11[6] = v16;
        v11[7] = v11 + 11;
        v11[8] = v11 + 11;
        v11[9] = 2;
        *((_DWORD *)v11 + 20) = 0;
        v11[13] = llvm::function_ref<mlir::LogicalResult ()(mlir::OpPassManager &,mlir::Operation *)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_0>;
        v11[14] = &v125;
        *((_BYTE *)v11 + 120) = 1;
        if (v18)
        {
          v22 = *(std::recursive_mutex **)v18;
          std::recursive_mutex::lock(*(std::recursive_mutex **)v18);
          v23 = *(std::recursive_mutex **)v18;
          v24 = *(uint64_t **)(*(_QWORD *)v18 + 72);
          v25 = *(uint64_t **)&v23[1].__m_.__opaque[8];
          while (v24 != v25)
          {
            v26 = *v24++;
            (*(void (**)(uint64_t, _QWORD *, mlir *))(*(_QWORD *)v26 + 32))(v26, v11, v21);
          }
          std::recursive_mutex::unlock(v22);
          v21 = v118;
        }
        v109 = 0;
        Context = (uint64_t *)mlir::Attribute::getContext((mlir *)((char *)v21 + 24));
        v112 = (const void **)&v119;
        v113 = (unint64_t)&v117;
        v114 = (BOOL *)&v109;
        v28 = (uint64_t)v119;
        v124 = (unint64_t)v118 & 0xFFFFFFFFFFFFFFF9;
        if (mlir::MLIRContext::hasActionHandler((mlir::MLIRContext *)Context))
        {
          mlir::MLIRContext::executeActionInternal<mlir::PassExecutionAction,mlir::Pass &>(Context, (uint64_t)llvm::function_ref<void ()(void)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_1>, (uint64_t)&v112, (uint64_t)&v124, 1, v28);
          mlir::detail::NestedAnalysisMap::invalidate(v120, (const mlir::detail::PreservedAnalyses *)(v119 + 7));
          v70 = v109;
          if (v109)
          {
LABEL_90:
            v74 = v111;
            if (v111)
            {
              v76 = v118;
              v75 = v119;
              v77 = *v111;
              std::recursive_mutex::lock(*v111);
              v79 = *(_QWORD *)(*v74)[1].__m_.__opaque;
              v78 = *(_QWORD *)&(*v74)[1].__m_.__opaque[8];
              if (v70)
              {
                while (v78 != v79)
                {
                  v80 = *(_QWORD *)(v78 - 8);
                  v78 -= 8;
                  (*(void (**)(uint64_t, _QWORD *, mlir *))(*(_QWORD *)v80 + 48))(v80, v75, v76);
                }
              }
              else
              {
                while (v78 != v79)
                {
                  v81 = *(_QWORD *)(v78 - 8);
                  v78 -= 8;
                  (*(void (**)(uint64_t, _QWORD *, mlir *))(*(_QWORD *)v81 + 40))(v81, v75, v76);
                }
              }
              std::recursive_mutex::unlock(v77);
              v70 = v109;
            }
            return v70 ^ 1u;
          }
        }
        else
        {
          v29 = (mlir::detail::OpToOpPassAdaptor *)v119;
          v30 = v119[1];
          if ((v31 & 1) == 0
          {
            v121 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
            v122 = 81;
            v92 = llvm::StringRef::find((uint64_t *)&v121, "DesiredTypeName = ", 0x12uLL, 0);
            if (v122 >= v92)
              v93 = v92;
            else
              v93 = v122;
            v94 = &v121[v93];
            v95 = (const char *)(v122 - v93);
            if (v122 - v93 >= 0x12)
              v96 = 18;
            else
              v96 = v122 - v93;
            v97 = (unint64_t)&v95[-v96];
            if (v97 >= v97 - 1)
              v98 = v97 - 1;
            else
              v98 = v97;
            mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
          }
          if (v30 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
          {
            v66 = *(unsigned __int8 *)v113;
            v67 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)v29 + 5) & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 24));
            isMultithreadingEnabled = mlir::MLIRContext::isMultithreadingEnabled(v67);
            v69 = v66 != 0;
            if (isMultithreadingEnabled)
              mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(v29, v69);
            mlir::detail::OpToOpPassAdaptor::runOnOperationImpl(v29, v69);
          }
          else
          {
            (*(void (**)(_QWORD))(*(_QWORD *)*v112 + 56))(*v112);
          }
          *v114 = (*((_BYTE *)*v112 + 40) & 4) != 0;
          mlir::detail::NestedAnalysisMap::invalidate(v120, (const mlir::detail::PreservedAnalyses *)(v119 + 7));
          v70 = v109;
          if (v109)
            goto LABEL_90;
        }
        if (v117)
        {
          v71 = v119[1];
          if ((v72 & 1) == 0
          {
            v112 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
            v113 = 81;
            v99 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
            if (v113 >= v99)
              v100 = v99;
            else
              v100 = v113;
            v101 = (char *)v112 + v100;
            v102 = v113 - v100;
            if (v113 - v100 >= 0x12)
              v103 = 18;
            else
              v103 = v113 - v100;
            v104 = v102 - v103;
            if (v104 >= v104 - 1)
              v105 = v104 - 1;
            else
              v105 = v104;
            mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
          }
          v73 = mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id;
          if (!mlir::detail::PreservedAnalyses::isAll((mlir::detail::PreservedAnalyses *)(v119 + 7)))
            mlir::verify(v118, (mlir::Operation *)(v71 != v73));
          v70 = v109;
        }
        goto LABEL_90;
      }
      v115 = 257;
      mlir::Operation::emitOpError((uint64_t *)v118, &v112, (uint64_t)&v125);
      if (v125)
      {
        LODWORD(v121) = 3;
        v122 = (unint64_t)"trying to schedule a pass on an unsupported operation";
        v123 = 53;
        v55 = &v121;
        v56 = v128;
        if (v129 >= HIDWORD(v129))
        {
          v84 = v129 + 1;
          if (v128 <= &v121 && &v128[3 * v129] > &v121)
          {
            v108 = (char *)&v121 - (char *)v128;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, v130, v84, 24);
            v56 = v128;
            v55 = (const char **)((char *)v128 + v108);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, v130, v84, 24);
            v55 = &v121;
            v56 = v128;
          }
        }
        v57 = &v56[3 * v129];
        v58 = *(_OWORD *)v55;
        v57[2] = v55[2];
        *(_OWORD *)v57 = v58;
        LODWORD(v129) = (_DWORD)v129 + 1;
      }
      v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v125);
      if (v125)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v125);
      if (v135)
      {
        v59 = v133;
        if (v133)
        {
          v60 = v134;
          v61 = v133;
          if (v134 != v133)
          {
            do
              v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
            while (v60 != v59);
            v61 = v133;
          }
          v134 = v59;
          operator delete(v61);
        }
        v40 = v131;
        if (!v131)
          goto LABEL_78;
        v62 = v132;
        v42 = v131;
        if (v132 == v131)
        {
LABEL_77:
          v132 = v40;
          operator delete(v42);
LABEL_78:
          if (v128 != v130)
            free(v128);
          return v36;
        }
        do
        {
          v64 = (void *)*--v62;
          v63 = v64;
          *v62 = 0;
          if (v64)
            operator delete[](v63);
        }
        while (v62 != v40);
LABEL_76:
        v42 = v131;
        goto LABEL_77;
      }
    }
    else
    {
      v115 = 257;
      mlir::Operation::emitOpError((uint64_t *)v118, &v112, (uint64_t)&v125);
      if (v125)
      {
        LODWORD(v121) = 3;
        v122 = (unint64_t)"trying to schedule a pass on an operation not marked as 'IsolatedFromAbove'";
        v123 = 75;
        v45 = &v121;
        v46 = v128;
        if (v129 >= HIDWORD(v129))
        {
          v83 = v129 + 1;
          if (v128 <= &v121 && &v128[3 * v129] > &v121)
          {
            v107 = (char *)&v121 - (char *)v128;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, v130, v83, 24);
            v46 = v128;
            v45 = (const char **)((char *)v128 + v107);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, v130, v83, 24);
            v45 = &v121;
            v46 = v128;
          }
        }
        v47 = &v46[3 * v129];
        v48 = *(_OWORD *)v45;
        v47[2] = v45[2];
        *(_OWORD *)v47 = v48;
        LODWORD(v129) = (_DWORD)v129 + 1;
      }
      v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v125);
      if (v125)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v125);
      if (v135)
      {
        v49 = v133;
        if (v133)
        {
          v50 = v134;
          v51 = v133;
          if (v134 != v133)
          {
            do
              v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
            while (v50 != v49);
            v51 = v133;
          }
          v134 = v49;
          operator delete(v51);
        }
        v40 = v131;
        if (!v131)
          goto LABEL_78;
        v52 = v132;
        v42 = v131;
        if (v132 == v131)
          goto LABEL_77;
        do
        {
          v54 = (void *)*--v52;
          v53 = v54;
          *v52 = 0;
          if (v54)
            operator delete[](v53);
        }
        while (v52 != v40);
        goto LABEL_76;
      }
    }
  }
  return v36;
}

BOOL mlir::detail::PreservedAnalyses::isAll(mlir::detail::PreservedAnalyses *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  const void **BucketFor;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t v22;

  if ((v2 & 1) == 0
  {
    v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::PreservedAnalyses::AllAnalysesType]";
    v22 = 98;
    v14 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
    if (v22 >= v14)
      v15 = v14;
    else
      v15 = v22;
    v16 = &v21[v15];
    v17 = v22 - v15;
    if (v22 - v15 >= 0x12)
      v18 = 18;
    else
      v18 = v22 - v15;
    v19 = v17 - v18;
    if (v19 >= v19 - 1)
      v20 = v19 - 1;
    else
      v20 = v19;
    mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
  }
  v3 = mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id;
  v4 = *((_QWORD *)this + 1);
  if (v4 == *(_QWORD *)this)
  {
    v8 = *((unsigned int *)this + 5);
    BucketFor = (const void **)(v4 + 8 * v8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      while (*(_QWORD *)(v4 + v9) != mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id)
      {
        v9 += 8;
        if (v10 == v9)
          goto LABEL_13;
      }
      BucketFor = (const void **)(v4 + v9);
    }
LABEL_13:
    v6 = *((_QWORD *)this + 1);
  }
  else
  {
    BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)mlir::detail::TypeIDResolver<mlir::detail::PreservedAnalyses::AllAnalysesType,void>::resolveTypeID(void)::id);
    v4 = *(_QWORD *)this;
    v6 = *((_QWORD *)this + 1);
    if (*BucketFor != (const void *)v3)
    {
      v7 = 16;
      if (v6 == v4)
        v7 = 20;
      BucketFor = (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7));
    }
  }
  v11 = v6 == v4;
  v12 = 16;
  if (v11)
    v12 = 20;
  return BucketFor != (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v12));
}

uint64_t mlir::detail::OpToOpPassAdaptor::runPipeline(uint64_t *a1, uint64_t a2, mlir::detail::NestedAnalysisMap *a3, char a4, int a5, std::recursive_mutex **a6, uint64_t a7)
{
  std::recursive_mutex **v8;
  uint64_t Context;
  uint64_t *v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::recursive_mutex *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::recursive_mutex *v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v43;
  std::recursive_mutex **v44;
  mlir::detail::NestedAnalysisMap *v45;
  uint64_t v46;

  v8 = a6;
  v45 = a3;
  if (!a6)
    goto LABEL_19;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v15 = (uint64_t *)*a1;
  v16 = *(_BYTE *)(*a1 + 23);
  if ((v16 & 0x80000000) == 0)
  {
    v43 = a1;
    if (!*(_BYTE *)(*a1 + 23))
      goto LABEL_16;
LABEL_6:
    if (!*((_BYTE *)v15 + 32))
    {
      if (v16 >= 0)
        v17 = (uint64_t *)*a1;
      else
        v17 = (uint64_t *)*v15;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(*a1 + 23);
      else
        v18 = v15[1];
      mlir::OperationName::OperationName(&v46, v17, v18, Context);
      v19 = v46;
      if (!*((_BYTE *)v15 + 32))
        *((_BYTE *)v15 + 32) = 1;
      v15[3] = v19;
    }
    goto LABEL_16;
  }
  v43 = a1;
  if (v15[1])
    goto LABEL_6;
LABEL_16:
  v20 = v15[3];
  v21 = v15[4];
  v22 = *v8;
  std::recursive_mutex::lock(*v8);
  v44 = v8;
  v24 = *(uint64_t **)(*v8)[1].__m_.__opaque;
  v23 = *(uint64_t **)&(*v8)[1].__m_.__opaque[8];
  while (v24 != v23)
  {
    v25 = *v24++;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v20, v21, a7);
  }
  std::recursive_mutex::unlock(v22);
  a1 = v43;
  v8 = v44;
LABEL_19:
  v26 = *(_QWORD ***)(*a1 + 40);
  v27 = *(_QWORD *)(*a1 + 48) - (_QWORD)v26;
  if (!v27)
  {
LABEL_23:
    if (!v8)
    {
LABEL_42:
      v32 = 1;
      goto LABEL_43;
    }
    v29 = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v30 = (uint64_t *)*a1;
    v31 = *((_BYTE *)v30 + 23);
    if (v31 < 0)
    {
      if (!v30[1])
      {
LABEL_39:
        v36 = v30[3];
        v37 = v30[4];
        v38 = *v8;
        std::recursive_mutex::lock(*v8);
        v40 = *(_QWORD *)(*v8)[1].__m_.__opaque;
        for (i = *(_QWORD *)&(*v8)[1].__m_.__opaque[8]; i != v40; i -= 8)
        {
          v41 = *(_QWORD *)(i - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v41 + 24))(v41, v36, v37, a7);
        }
        std::recursive_mutex::unlock(v38);
        goto LABEL_42;
      }
    }
    else if (!*((_BYTE *)v30 + 23))
    {
      goto LABEL_39;
    }
    if (!*((_BYTE *)v30 + 32))
    {
      if (v31 >= 0)
        v33 = v30;
      else
        v33 = (uint64_t *)*v30;
      if (v31 >= 0)
        v34 = *((unsigned __int8 *)v30 + 23);
      else
        v34 = v30[1];
      mlir::OperationName::OperationName(&v46, v33, v34, v29);
      v35 = v46;
      if (!*((_BYTE *)v30 + 32))
        *((_BYTE *)v30 + 32) = 1;
      v30[3] = v35;
    }
    goto LABEL_39;
  }
  v28 = 8 * (v27 >> 3);
  while (mlir::detail::OpToOpPassAdaptor::run(*v26, (mlir *)a2, a3, a4, a5))
  {
    ++v26;
    v28 -= 8;
    if (!v28)
      goto LABEL_23;
  }
  v32 = 0;
LABEL_43:
  mlir::AnalysisManager::clear((uint64_t *)&v45);
  return v32;
}

double mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::PassWrapper(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  double result;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v14 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v5;
    a1 = v14;
    if (v6)
    {
      v15 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      v16 = 81;
      v7 = llvm::StringRef::find((uint64_t *)&v15, "DesiredTypeName = ", 0x12uLL, 0);
      if (v16 >= v7)
        v8 = v7;
      else
        v8 = v16;
      v9 = &v15[v8];
      v10 = v16 - v8;
      if (v16 - v8 >= 0x12)
        v11 = 18;
      else
        v11 = v16 - v8;
      v12 = v10 - v11;
      if (v12 >= v12 - 1)
        v13 = v12 - 1;
      else
        v13 = v12;
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v14;
    }
  }
  v3 = v2[128];
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0x400000000;
  *(_QWORD *)(a1 + 232) = a1 + 248;
  *(_QWORD *)(a1 + 240) = 0x400000000;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0x1000000000;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)a1 = &unk_1E0E25A38;
  *(_QWORD *)(a1 + 8) = v3;
  return result;
}

uint64_t llvm::SmallVectorImpl<mlir::OpPassManager>::emplace_back<mlir::OpPassManager>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::growAndEmplaceBack<mlir::OpPassManager>(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = 8 * v3;
  *(_QWORD *)(v4 + v5) = 0;
  v6 = *a2;
  *a2 = 0;
  v7 = *(_QWORD *)(v4 + 8 * v3);
  *(_QWORD *)(v4 + v5) = v6;
  if (v7)
  {
    v8 = *(_QWORD **)(v7 + 40);
    if (v8)
    {
      v9 = *(_QWORD **)(v7 + 48);
      v10 = *(void **)(v7 + 40);
      if (v9 != v8)
      {
        do
        {
          v12 = *--v9;
          v11 = v12;
          *v9 = 0;
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        }
        while (v9 != v8);
        v10 = *(void **)(v7 + 40);
      }
      *(_QWORD *)(v7 + 48) = v8;
      operator delete(v10);
    }
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    operator delete((void *)v7);
    LODWORD(v3) = *(_DWORD *)(a1 + 8);
  }
  v13 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v13;
  return *(_QWORD *)a1 + 8 * v13 - 8;
}

uint64_t mlir::detail::OpToOpPassAdaptor::getDependentDialects(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned int *)(result + 352);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD *)(result + 344);
    v5 = v4 + 8 * v2;
    do
    {
      v6 = *(uint64_t **)(*(_QWORD *)v4 + 40);
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 48) - (_QWORD)v6;
      if (v7)
      {
        v8 = 8 * (v7 >> 3);
        do
        {
          v9 = *v6++;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2);
          v8 -= 8;
        }
        while (v8);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return result;
}

void mlir::detail::OpToOpPassAdaptor::getAdaptorName(mlir::detail::OpToOpPassAdaptor *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  _BYTE *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  size_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  size_t v22;
  void *v23;
  _QWORD *v24;
  _BYTE *v25;
  _BYTE *v26;
  void **v27;
  __int128 v28;
  void *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  _WORD *v33;
  char v34;
  uint64_t v35;
  int v36;
  void **p_p;
  void *__p;
  __int128 v39;

  __p = operator new(0x19uLL);
  v39 = xmmword_181232CD0;
  strcpy((char *)__p, "Pipeline Collection : [");
  v30 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 1;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v29 = &unk_1E0E22B10;
  p_p = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v29, 0, 0, 0);
  v4 = *((unsigned int *)this + 88);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 43);
    v6 = v33;
    if ((unint64_t)v33 >= v32)
    {
      v7 = llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 39);
      v8 = *v5;
      v9 = *(unsigned __int8 *)(*v5 + 23);
      if ((*(char *)(*v5 + 23) & 0x80000000) == 0)
      {
LABEL_4:
        if (v9)
          goto LABEL_5;
        goto LABEL_16;
      }
    }
    else
    {
      v33 = (_WORD *)((char *)v33 + 1);
      *v6 = 39;
      v7 = (llvm::raw_ostream *)&v29;
      v8 = *v5;
      v9 = *(unsigned __int8 *)(*v5 + 23);
      if ((*(char *)(*v5 + 23) & 0x80000000) == 0)
        goto LABEL_4;
    }
    if (*(_QWORD *)(v8 + 8))
    {
LABEL_5:
      if ((v9 & 0x80u) == 0)
        v10 = (const char *)v8;
      else
        v10 = *(const char **)v8;
      if ((v9 & 0x80u) == 0)
        v11 = v9;
      else
        v11 = *(_QWORD *)(v8 + 8);
      v13 = (_QWORD *)((char *)v7 + 32);
      v12 = (void *)*((_QWORD *)v7 + 4);
      if (v11 <= *((_QWORD *)v7 + 3) - (_QWORD)v12)
      {
        if (!v11)
        {
LABEL_18:
          v14 = (_BYTE *)*((_QWORD *)v7 + 4);
          if ((unint64_t)v14 < *((_QWORD *)v7 + 3))
            goto LABEL_19;
          goto LABEL_22;
        }
LABEL_21:
        memcpy(v12, v10, v11);
        *v13 += v11;
        v14 = (_BYTE *)*((_QWORD *)v7 + 4);
        if ((unint64_t)v14 < *((_QWORD *)v7 + 3))
        {
LABEL_19:
          *((_QWORD *)v7 + 4) = v14 + 1;
          *v14 = 39;
          if ((_DWORD)v4 == 1)
            goto LABEL_49;
          goto LABEL_23;
        }
LABEL_22:
        llvm::raw_ostream::write(v7, 39);
        if ((_DWORD)v4 == 1)
          goto LABEL_49;
LABEL_23:
        v15 = v5 + 1;
        v16 = 8 * v4 - 8;
        while (1)
        {
          if (v32 - (unint64_t)v33 > 1)
          {
            *v33 = 8236;
            v17 = v33 + 1;
            v33 = v17;
            if ((unint64_t)v17 < v32)
              goto LABEL_39;
LABEL_27:
            v18 = llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 39);
            v19 = *v15;
            v20 = *(unsigned __int8 *)(*v15 + 23);
            if ((*(char *)(*v15 + 23) & 0x80000000) == 0)
              goto LABEL_28;
LABEL_40:
            if (!*(_QWORD *)(v19 + 8))
              goto LABEL_41;
LABEL_29:
            if ((v20 & 0x80u) == 0)
              v21 = (const char *)v19;
            else
              v21 = *(const char **)v19;
            if ((v20 & 0x80u) == 0)
              v22 = v20;
            else
              v22 = *(_QWORD *)(v19 + 8);
            v24 = (_QWORD *)((char *)v18 + 32);
            v23 = (void *)*((_QWORD *)v18 + 4);
            if (v22 > *((_QWORD *)v18 + 3) - (_QWORD)v23)
              goto LABEL_43;
            if (v22)
              goto LABEL_47;
LABEL_44:
            v25 = (_BYTE *)*((_QWORD *)v18 + 4);
            if ((unint64_t)v25 >= *((_QWORD *)v18 + 3))
              goto LABEL_48;
LABEL_24:
            *((_QWORD *)v18 + 4) = v25 + 1;
            *v25 = 39;
            ++v15;
            v16 -= 8;
            if (!v16)
              goto LABEL_49;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v29, ", ", 2uLL);
            v17 = v33;
            if ((unint64_t)v33 >= v32)
              goto LABEL_27;
LABEL_39:
            v33 = v17 + 1;
            *v17 = 39;
            v18 = (llvm::raw_ostream *)&v29;
            v19 = *v15;
            v20 = *(unsigned __int8 *)(*v15 + 23);
            if (*(char *)(*v15 + 23) < 0)
              goto LABEL_40;
LABEL_28:
            if (v20)
              goto LABEL_29;
LABEL_41:
            v24 = (_QWORD *)((char *)v18 + 32);
            v23 = (void *)*((_QWORD *)v18 + 4);
            if (*((_QWORD *)v18 + 3) - (_QWORD)v23 <= 2uLL)
            {
              v21 = "any";
              v22 = 3;
LABEL_43:
              v18 = llvm::raw_ostream::write(v18, v21, v22);
              goto LABEL_44;
            }
            v22 = 3;
            v21 = "any";
LABEL_47:
            memcpy(v23, v21, v22);
            *v24 += v22;
            v25 = (_BYTE *)*((_QWORD *)v18 + 4);
            if ((unint64_t)v25 < *((_QWORD *)v18 + 3))
              goto LABEL_24;
LABEL_48:
            llvm::raw_ostream::write(v18, 39);
            ++v15;
            v16 -= 8;
            if (!v16)
              goto LABEL_49;
          }
        }
      }
LABEL_17:
      v7 = llvm::raw_ostream::write(v7, v10, v11);
      goto LABEL_18;
    }
LABEL_16:
    v13 = (_QWORD *)((char *)v7 + 32);
    v12 = (void *)*((_QWORD *)v7 + 4);
    v10 = "any";
    v11 = 3;
    if (*((_QWORD *)v7 + 3) - (_QWORD)v12 > 2uLL)
      goto LABEL_21;
    goto LABEL_17;
  }
LABEL_49:
  v26 = v33;
  if ((unint64_t)v33 >= v32)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 93);
    v27 = p_p;
    if ((*((char *)p_p + 23) & 0x80000000) == 0)
    {
LABEL_51:
      v28 = *(_OWORD *)v27;
      a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v27[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v28;
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v29);
      if ((SHIBYTE(v39) & 0x80000000) == 0)
        return;
      goto LABEL_52;
    }
  }
  else
  {
    v33 = (_WORD *)((char *)v33 + 1);
    *v26 = 93;
    v27 = p_p;
    if ((*((char *)p_p + 23) & 0x80000000) == 0)
      goto LABEL_51;
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v27, (std::string::size_type)v27[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v29);
  if (SHIBYTE(v39) < 0)
LABEL_52:
    operator delete(__p);
}

void mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(mlir::detail::OpToOpPassAdaptor *this, char a2)
{
  uint64_t v3;
  uint64_t v4;
  mlir::MemRefType *Context;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t MemorySpace;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  mlir::Region *v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  mlir::Operation *v19;
  mlir::Operation *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  mlir::Block *v27;
  mlir::Block *ParentOp;
  uint64_t v29;
  uint64_t v30;
  mlir::Block *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  char *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  int v58;
  BOOL v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  void **v75;
  void **v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t v80;
  char v81;
  unsigned __int8 v82;
  char *v83;
  mlir::Region *v84;
  mlir::detail::OpToOpPassAdaptor *v85;
  mlir::GenericProgramPoint *v86;
  mlir::MemRefType *v87;
  unint64_t v88;
  uint64_t threadid;
  mlir::detail::OpToOpPassAdaptor *v90;
  void *__p[2];
  mlir::GenericProgramPoint *v92;
  llvm *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  char v97;
  std::shared_future<void> v98;
  uint64_t v99;
  unsigned __int8 v100;
  int v101;
  _BYTE v102[12];
  unsigned int v103;
  char *v104;
  __int128 v105;
  uint64_t v106;
  __int128 *v107;
  mlir::GenericProgramPoint *v108;
  __int128 v109;
  _QWORD v110[6];

  v110[4] = *MEMORY[0x1E0C80C00];
  v97 = a2;
  v3 = *((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 6);
  v96 = v4;
  Context = (mlir::MemRefType *)mlir::Attribute::getContext((mlir::Attribute *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24));
  v87 = Context;
  v85 = this;
  if (*((_DWORD *)this + 94))
  {
    v6 = (uint64_t *)*((_QWORD *)this + 46);
    v7 = *((unsigned int *)v6 + 2);
    if ((_DWORD)v7 == *((_DWORD *)this + 88))
    {
      if (!(_DWORD)v7)
        goto LABEL_9;
      v8 = *v6;
      v9 = *((_QWORD *)this + 43);
      while (*(_QWORD *)(*(_QWORD *)v8 + 48) - *(_QWORD *)(*(_QWORD *)v8 + 40) == *(_QWORD *)(*(_QWORD *)v9 + 48)
                                                                                     - *(_QWORD *)(*(_QWORD *)v9 + 40))
      {
        v9 += 8;
        v8 += 8;
        if (!--v7)
          goto LABEL_9;
      }
    }
  }
  MemorySpace = mlir::MemRefType::getMemorySpace(Context);
  llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::assign((uint64_t)this + 368, *(unsigned int *)(MemorySpace + 308), (uint64_t)this + 344);
LABEL_9:
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v11 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned int *)(v11 + 44);
  if ((v12 & 0x7FFFFF) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = (mlir::Region *)(((v11 + 16 * ((v12 >> 23) & 1) + ((v12 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                         + 32 * *(unsigned int *)(v11 + 40));
    v83 = (char *)v16 + 24 * (v12 & 0x7FFFFF);
    while (1)
    {
      mlir::Region::OpIterator::OpIterator(&v109, v16, 0);
      v84 = v16;
      mlir::Region::OpIterator::OpIterator(&v107, v16, 1);
      v17 = (mlir::GenericProgramPoint *)v110[0];
      v106 = v110[0];
      v105 = v109;
      *(_OWORD *)__p = v109;
      v92 = (mlir::GenericProgramPoint *)v110[0];
      v18 = v108;
      v86 = v108;
      while (v17 != v18)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v17);
        v20 = v19;
        v21 = *((_QWORD *)v19 + 6);
        v22 = v95;
        if (!v95)
          goto LABEL_78;
        v23 = ((v21 >> 4) ^ (v21 >> 9)) & (v95 - 1);
        v24 = (char *)v93 + 16 * v23;
        v25 = *(_QWORD *)v24;
        if (v21 == *(_QWORD *)v24)
          goto LABEL_18;
        v51 = 0;
        v52 = 1;
        while (v25 != -4096)
        {
          if (v51)
            v53 = 0;
          else
            v53 = v25 == -8192;
          if (v53)
            v51 = v24;
          v54 = v23 + v52++;
          v23 = v54 & (v95 - 1);
          v24 = (char *)v93 + 16 * v23;
          v25 = *(_QWORD *)v24;
          if (v21 == *(_QWORD *)v24)
            goto LABEL_18;
        }
        if (v51)
          v24 = v51;
        if (4 * (int)v94 + 4 < 3 * v95)
        {
          if (v95 + ~(_DWORD)v94 - HIDWORD(v94) > v95 >> 3)
            goto LABEL_38;
        }
        else
        {
LABEL_78:
          v22 = 2 * v95;
        }
        llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow((uint64_t)&v93, v22);
        v55 = (v95 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        v24 = (char *)v93 + 16 * v55;
        v56 = *(_QWORD *)v24;
        if (v21 == *(_QWORD *)v24)
        {
LABEL_80:
          LODWORD(v94) = v94 + 1;
          if (v21 == -4096)
            goto LABEL_40;
LABEL_39:
          --HIDWORD(v94);
          goto LABEL_40;
        }
        v57 = 0;
        v58 = 1;
        while (v56 != -4096)
        {
          if (v57)
            v59 = 0;
          else
            v59 = v56 == -8192;
          if (v59)
            v57 = v24;
          v60 = v55 + v58++;
          v55 = v60 & (v95 - 1);
          v24 = (char *)v93 + 16 * v55;
          v56 = *(_QWORD *)v24;
          if (v21 == *(_QWORD *)v24)
            goto LABEL_80;
        }
        if (v57)
          v24 = v57;
LABEL_38:
        v37 = *(_QWORD *)v24;
        LODWORD(v94) = v94 + 1;
        if (v37 != -4096)
          goto LABEL_39;
LABEL_40:
        *(_QWORD *)v24 = v21;
        v24[8] = 0;
        v24[12] = 0;
        v38 = *((_QWORD *)v85 + 43);
        v39 = *((unsigned int *)v85 + 88);
        if ((_DWORD)v39)
        {
          v40 = *((_QWORD *)v20 + 6);
          v41 = 8 * v39;
          v42 = (uint64_t **)*((_QWORD *)v85 + 43);
          while ((mlir::detail::OpPassManagerImpl::canScheduleOn(*v42, (uint64_t)v87, v40) & 1) == 0)
          {
            ++v42;
            v41 -= 8;
            if (!v41)
              goto LABEL_18;
          }
        }
        else
        {
          v42 = (uint64_t **)*((_QWORD *)v85 + 43);
        }
        if (v42 != (uint64_t **)(v38 + 8 * v39) && v42)
        {
          v50 = *((_QWORD *)v85 + 43);
          if (!v24[12])
            v24[12] = 1;
          *((_DWORD *)v24 + 2) = ((unint64_t)v42 - v50) >> 3;
        }
LABEL_18:
        if (!v24[12])
          goto LABEL_14;
        v26 = v96;
        v27 = *(mlir::Block **)(v96 + 24);
        ParentOp = (mlir::Block *)*((_QWORD *)v20 + 2);
        if (ParentOp)
          ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
        if (v27 == ParentOp)
        {
          v26 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&v96, v20);
          v36 = *((_DWORD *)v24 + 2);
          if (v14 < v15)
            goto LABEL_13;
        }
        else
        {
          *(_QWORD *)&v109 = v110;
          *((_QWORD *)&v109 + 1) = 0x400000000;
          v29 = (uint64_t)v20;
          do
          {
            while (1)
            {
              v30 = DWORD2(v109);
              if (DWORD2(v109) >= (unint64_t)HIDWORD(v109))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v110, DWORD2(v109) + 1, 8);
                v30 = DWORD2(v109);
              }
              *(_QWORD *)(v109 + 8 * v30) = v29;
              ++DWORD2(v109);
              v31 = *(mlir::Block **)(v29 + 16);
              if (!v31)
                break;
              v29 = mlir::Block::getParentOp(v31);
              if ((mlir::Block *)v29 == v27)
                goto LABEL_28;
            }
            v29 = 0;
          }
          while (v27);
LABEL_28:
          threadid = v26;
          v32 = (_QWORD *)v109;
          if (DWORD2(v109))
          {
            v33 = 8 * DWORD2(v109);
            v34 = v109 - 8;
            do
            {
              v35 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&threadid, *(mlir::Operation **)(v34 + v33));
              threadid = v35;
              v33 -= 8;
            }
            while (v33);
            v26 = v35;
            v32 = (_QWORD *)v109;
          }
          if (v32 != v110)
            free(v32);
          v36 = *((_DWORD *)v24 + 2);
          if (v14 < v15)
          {
LABEL_13:
            *(_DWORD *)v14 = v36;
            *((_QWORD *)v14 + 1) = v20;
            *((_QWORD *)v14 + 2) = v26;
            v14 += 24;
            goto LABEL_14;
          }
        }
        v43 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3) + 1;
        if (v43 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        if (0x5555555555555556 * ((v15 - v13) >> 3) > v43)
          v43 = 0x5555555555555556 * ((v15 - v13) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v15 - v13) >> 3) >= 0x555555555555555)
          v43 = 0xAAAAAAAAAAAAAAALL;
        if (v43 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v44 = 24 * v43;
        v45 = (char *)operator new(24 * v43);
        v46 = &v45[8 * ((v14 - v13) >> 3)];
        *(_DWORD *)v46 = v36;
        *((_QWORD *)v46 + 1) = v20;
        *((_QWORD *)v46 + 2) = v26;
        if (v14 == v13)
        {
          v49 = &v45[8 * ((v14 - v13) >> 3)];
          v15 = &v45[v44];
          v14 = v46 + 24;
          if (!v13)
            goto LABEL_57;
        }
        else
        {
          v47 = &v45[8 * ((v14 - v13) >> 3)];
          do
          {
            v48 = *(_OWORD *)(v14 - 24);
            v49 = v47 - 24;
            *((_QWORD *)v47 - 1) = *((_QWORD *)v14 - 1);
            *(_OWORD *)(v47 - 24) = v48;
            v14 -= 24;
            v47 -= 24;
          }
          while (v14 != v13);
          v15 = &v45[v44];
          v14 = v46 + 24;
          if (!v13)
            goto LABEL_57;
        }
        operator delete(v13);
LABEL_57:
        v13 = v49;
LABEL_14:
        mlir::Region::OpIterator::operator++((uint64_t *)__p);
        v17 = v92;
        v18 = v86;
      }
      v16 = (mlir::Region *)((char *)v84 + 24);
      if ((char *)v84 + 24 == v83)
      {
        v61 = v96;
        threadid = llvm::get_threadid(v17);
        v90 = v85;
        v62 = *(_QWORD *)(v61 + 72);
        v63 = v62 & 0xFFFFFFFFFFFFFFF8;
        if ((v62 & 4) != 0)
          goto LABEL_100;
        goto LABEL_97;
      }
    }
  }
  v14 = 0;
  v13 = 0;
  threadid = llvm::get_threadid(Context);
  v90 = v85;
  v64 = *(_QWORD *)(v4 + 72);
  v63 = v64 & 0xFFFFFFFFFFFFFFF8;
  if ((v64 & 4) != 0)
    goto LABEL_100;
LABEL_97:
  if (v63)
  {
    do
    {
      v65 = *(_QWORD *)(v63 + 72);
      v63 = v65 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v65 & 4) == 0 && v63);
  }
LABEL_100:
  v88 = v63;
  v66 = *((unsigned int *)v85 + 94);
  __p[1] = 0;
  v92 = 0;
  __p[0] = 0;
  if ((_DWORD)v66)
  {
    v67 = (unsigned __int8 *)operator new(v66);
    __p[0] = v67;
    v92 = (mlir::GenericProgramPoint *)&v67[v66];
    bzero(v67, v66);
    __p[1] = &v67[v66];
    v68 = v66 + 1;
    do
    {
      atomic_store(0, v67++);
      --v68;
    }
    while (v68 > 1);
  }
  *(_QWORD *)&v109 = __p;
  *((_QWORD *)&v109 + 1) = v85;
  v110[0] = &v97;
  v110[1] = &v88;
  v110[2] = &threadid;
  v104 = v13;
  v69 = -1431655765 * ((unint64_t)(v14 - v13) >> 3);
  v103 = v69;
  if (v69)
  {
    if (!mlir::MLIRContext::isMultithreadingEnabled(v87) || v69 == 1)
    {
      if (v13 == v14)
        goto LABEL_132;
      v75 = &__p[1];
      v76 = __p;
      while (1)
      {
        v77 = (unsigned __int8 *)*v76;
        v78 = (unsigned __int8 *)*v75;
        if (v77 == *v75)
        {
          LODWORD(v78) = (_DWORD)v77;
        }
        else
        {
          do
          {
            while (__ldaxr(v77))
            {
              __clrex();
              if (++v77 == v78)
                goto LABEL_124;
            }
          }
          while (__stlxr(1u, v77));
          LODWORD(v78) = (_DWORD)v77;
LABEL_124:
          v77 = *(unsigned __int8 **)v109;
        }
        v80 = ((_DWORD)v78 - (_DWORD)v77);
        v81 = mlir::detail::OpToOpPassAdaptor::runPipeline();
        v76 = (void **)v109;
        atomic_store(0, (unsigned __int8 *)(*(_QWORD *)v109 + v80));
        if (!v81)
          goto LABEL_131;
        v75 = v76 + 1;
        v104 += 24;
        if (v104 == v14)
          goto LABEL_132;
      }
    }
    mlir::ParallelDiagnosticHandler::ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)v102, v87);
    v101 = 0;
    v100 = 0;
    v70 = mlir::MemRefType::getMemorySpace(v87);
    v99 = v70;
    if (*(_DWORD *)(v70 + 308) < v69)
      v69 = *(_DWORD *)(v70 + 308);
    if (v69)
    {
      while (1)
      {
        v73 = v99;
        v74 = (__int128 *)operator new(0x38uLL);
        *(_QWORD *)v74 = off_1E0E50E68;
        *((_QWORD *)v74 + 1) = &v100;
        *((_QWORD *)v74 + 2) = &v101;
        *((_QWORD *)v74 + 3) = &v103;
        *((_QWORD *)v74 + 4) = v102;
        *((_QWORD *)v74 + 5) = &v109;
        *((_QWORD *)v74 + 6) = &v104;
        v107 = v74;
        llvm::ThreadPool::asyncImpl<void>(v73, &v105, (uint64_t)&v99, (std::future<void> *)&v98);
        v71 = v107;
        if (v107 == &v105)
        {
          v71 = &v105;
          v72 = 4;
        }
        else
        {
          if (!v107)
            goto LABEL_113;
          v72 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)v71 + 8 * v72))();
LABEL_113:
        std::shared_future<void>::~shared_future(&v98);
        if (!--v69)
        {
          v70 = v99;
          break;
        }
      }
    }
    llvm::ThreadPool::wait(v70, (uint64_t)&v99);
    v82 = atomic_load(&v100);
    llvm::ThreadPool::wait(v99, (uint64_t)&v99);
    mlir::ParallelDiagnosticHandler::~ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)v102);
    if ((v82 & 1) != 0)
LABEL_131:
      *((_QWORD *)v85 + 5) |= 4uLL;
  }
LABEL_132:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  llvm::deallocate_buffer(v93, (void *)(16 * v95));
}

uint64_t mlir::detail::OpToOpPassAdaptor::runOnOperationImpl(mlir::detail::OpToOpPassAdaptor *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mlir::GenericProgramPoint *v13;
  uint64_t v14;
  _QWORD *v15;
  mlir::Operation *v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v24;
  mlir::Block *v25;
  mlir::Block *ParentOp;
  uint64_t v27;
  uint64_t v28;
  mlir::Block *v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::GenericProgramPoint *v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[6];

  v45[4] = *MEMORY[0x1E0C80C00];
  v41 = *((_QWORD *)this + 6);
  result = llvm::get_threadid(this);
  v40[0] = result;
  v40[1] = this;
  v4 = *(_QWORD *)(v41 + 72);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0 && v5)
  {
    do
    {
      v6 = *(_QWORD *)(v5 + 72);
      v5 = v6 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v6 & 4) == 0 && v5);
  }
  v37 = v41;
  v7 = *((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned int *)(v7 + 44);
  v9 = v8 & 0x7FFFFF;
  if ((v8 & 0x7FFFFF) != 0)
  {
    v10 = ((v7 + 16 * ((v8 >> 23) & 1) + ((v8 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(v7 + 40);
    v34 = v10 + 24 * v9;
    while (1)
    {
      v11 = *(_QWORD *)(v10 + 8);
      v35 = v10;
      if (v11 != v10)
        break;
LABEL_8:
      v10 += 24;
      if (v10 == v34)
        return result;
    }
    while (1)
    {
      v12 = v11 - 8;
      v36 = v11;
      if (!v11)
        v12 = 0;
      v13 = *(mlir::GenericProgramPoint **)(v12 + 40);
      v39 = (mlir::GenericProgramPoint *)(v12 + 32);
      if (v13 != (mlir::GenericProgramPoint *)(v12 + 32))
        break;
LABEL_10:
      v10 = v35;
      v11 = *(_QWORD *)(v36 + 8);
      if (v11 == v35)
        goto LABEL_8;
    }
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v13);
      v16 = (mlir::Operation *)v15;
      v17 = (uint64_t **)*((_QWORD *)this + 43);
      v18 = *((unsigned int *)this + 88);
      v19 = v15[6];
      result = mlir::Attribute::getContext((mlir::Attribute *)(v15 + 3));
      if ((_DWORD)v18)
      {
        v20 = result;
        v21 = 8 * v18;
        v22 = v17;
        while (1)
        {
          result = mlir::detail::OpPassManagerImpl::canScheduleOn(*v22, v20, v19);
          if ((result & 1) != 0)
            break;
          ++v22;
          v21 -= 8;
          if (!v21)
            goto LABEL_17;
        }
      }
      else
      {
        v22 = v17;
      }
      if (v22 == &v17[v18] || v22 == 0)
        goto LABEL_17;
      v24 = *((unsigned int *)*v22 + 16);
      v25 = *(mlir::Block **)(v37 + 24);
      ParentOp = (mlir::Block *)*((_QWORD *)v16 + 2);
      if (ParentOp)
        ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
      if (v25 == ParentOp)
      {
        v14 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&v41, v16);
        goto LABEL_16;
      }
      v43 = v45;
      v44 = 0x400000000;
      v27 = (uint64_t)v16;
      do
      {
        while (1)
        {
          v28 = v44;
          if (v44 >= (unint64_t)HIDWORD(v44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v45, v44 + 1, 8);
            v28 = v44;
          }
          *((_QWORD *)v43 + v28) = v27;
          LODWORD(v44) = v44 + 1;
          v29 = *(mlir::Block **)(v27 + 16);
          if (!v29)
            break;
          v27 = mlir::Block::getParentOp(v29);
          if ((mlir::Block *)v27 == v25)
            goto LABEL_37;
        }
        v27 = 0;
      }
      while (v25);
LABEL_37:
      v42 = v37;
      v30 = v43;
      if (!(_DWORD)v44)
        break;
      v31 = 8 * v44;
      v32 = (char *)v43 - 8;
      do
      {
        v33 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&v42, *(mlir::Operation **)&v32[v31]);
        v42 = v33;
        v31 -= 8;
      }
      while (v31);
      v14 = v33;
      v30 = v43;
      if (v43 != v45)
        goto LABEL_43;
LABEL_16:
      result = mlir::detail::OpToOpPassAdaptor::runPipeline(v22, v16, v14, a2, v24, v5, v40);
      if (!(_BYTE)result)
      {
        *((_QWORD *)this + 5) |= 4uLL;
        return result;
      }
LABEL_17:
      v13 = (mlir::GenericProgramPoint *)*((_QWORD *)v13 + 1);
      if (v13 == v39)
        goto LABEL_10;
    }
    v14 = v37;
    if (v43 == v45)
      goto LABEL_16;
LABEL_43:
    free(v30);
    goto LABEL_16;
  }
  return result;
}

uint64_t mlir::AnalysisManager::nest(mlir::AnalysisManager *this, mlir::Block **a2)
{
  mlir::Operation *v2;
  mlir::Block *v4;
  mlir::Block *ParentOp;
  uint64_t v6;
  mlir::Block *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v2 = (mlir::Operation *)a2;
  v17[4] = *MEMORY[0x1E0C80C00];
  v4 = *(mlir::Block **)(*(_QWORD *)this + 24);
  ParentOp = a2[2];
  if (ParentOp)
    ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
  if (v4 == ParentOp)
    return mlir::AnalysisManager::nestImmediate(this, v2);
  v15 = v17;
  v16 = 0x400000000;
  do
  {
    while (1)
    {
      v6 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v16 + 1, 8);
        v6 = v16;
      }
      *((_QWORD *)v15 + v6) = v2;
      LODWORD(v16) = v16 + 1;
      v7 = (mlir::Block *)*((_QWORD *)v2 + 2);
      if (!v7)
        break;
      v2 = (mlir::Operation *)mlir::Block::getParentOp(v7);
      if (v2 == v4)
        goto LABEL_10;
    }
    v2 = 0;
  }
  while (v4);
LABEL_10:
  v8 = *(_QWORD *)this;
  v14 = v8;
  v9 = v15;
  if ((_DWORD)v16)
  {
    v10 = 8 * v16;
    v11 = (char *)v15 - 8;
    do
    {
      v12 = mlir::AnalysisManager::nestImmediate((mlir::AnalysisManager *)&v14, *(mlir::Operation **)&v11[v10]);
      v14 = v12;
      v10 -= 8;
    }
    while (v10);
    v8 = v12;
    v9 = v15;
  }
  if (v9 != v17)
    free(v9);
  return v8;
}

void llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::assign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  unint64_t v13;
  char **v14;

  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v8, a3);
        v8 += 24;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v12 = 24 * v6;
        v13 = 24 * a2 - v12;
        v14 = (char **)(v12 + *(_QWORD *)a1 - 24);
        do
        {
          v14 = llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(v14) - 3;
          v13 += 24;
        }
        while (v13);
      }
    }
    else
    {
      v10 = (_QWORD *)(*(_QWORD *)a1 + 24 * v6);
      do
      {
        *v10 = v10 + 2;
        v10[1] = 0x100000000;
        if (*(_DWORD *)(a3 + 8))
          llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v10, a3);
        v10 += 3;
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::growAndAssign(a1, a2, a3);
  }
}

int64x2_t mlir::PassManager::PassManager(_QWORD *a1, uint64_t a2, _BYTE *a3, size_t a4, int a5)
{
  _QWORD *v6;
  int64x2_t result;

  v6 = mlir::OpPassManager::OpPassManager(a1, a3, a4, a5);
  v6[1] = a2;
  *((_BYTE *)v6 + 16) = 0;
  *((_BYTE *)v6 + 20) = 0;
  v6[3] = 0;
  v6[4] = 0;
  result = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
  *(int64x2_t *)(v6 + 5) = result;
  *((_BYTE *)v6 + 56) = v6[7] & 0xFC | 2;
  return result;
}

uint64_t mlir::PassManager::PassManager(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t AttrData;
  unint64_t v8;
  size_t v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = operator new(0x48uLL);
  v15 = *(_QWORD *)(a2 + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v15);
  if (AttrData)
  {
    v9 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v10 = (const void *)AttrData;
    if (v8 >= 0x17)
    {
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      v6[1] = v9;
      v6[2] = v13 | 0x8000000000000000;
      *v6 = v11;
    }
    else
    {
      *((_BYTE *)v6 + 23) = v8;
      v11 = v6;
      if (!v8)
        goto LABEL_11;
    }
    memmove(v11, v10, v9);
LABEL_11:
    *((_BYTE *)v11 + v9) = 0;
    goto LABEL_12;
  }
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
LABEL_12:
  v6[3] = a2;
  *((_BYTE *)v6 + 32) = 1;
  v6[6] = 0;
  v6[7] = 0;
  v6[5] = 0;
  *((_DWORD *)v6 + 16) = 0;
  *((_DWORD *)v6 + 17) = a3;
  *(_QWORD *)a1 = v6;
  v15 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = mlir::Attribute::getContext((mlir::Attribute *)&v15);
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 56) & 0xFC | 2;
  return a1;
}

void mlir::PassManager::~PassManager(mlir::PassManager *this)
{
  mlir::detail::PassCrashReproducerGenerator::Impl **v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (mlir::detail::PassCrashReproducerGenerator::Impl **)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    mlir::detail::PassCrashReproducerGenerator::~PassCrashReproducerGenerator(v2);
    operator delete(v3);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    v5 = *v4;
    *v4 = 0;
    if (v5)
    {
      v6 = *(_QWORD **)(v5 + 72);
      if (v6)
      {
        v7 = *(_QWORD **)(v5 + 80);
        v8 = *(void **)(v5 + 72);
        if (v7 != v6)
        {
          do
          {
            v10 = *--v7;
            v9 = v10;
            *v7 = 0;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          }
          while (v7 != v6);
          v8 = *(void **)(v5 + 72);
        }
        *(_QWORD *)(v5 + 80) = v6;
        operator delete(v8);
      }
      std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v5);
      operator delete(v11);
    }
    operator delete(v4);
  }
  v12 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    v13 = *(_QWORD **)(v12 + 40);
    if (v13)
    {
      v14 = *(_QWORD **)(v12 + 48);
      v15 = *(void **)(v12 + 40);
      if (v14 != v13)
      {
        do
        {
          v17 = *--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
        while (v14 != v13);
        v15 = *(void **)(v12 + 40);
      }
      *(_QWORD *)(v12 + 48) = v13;
      operator delete(v15);
    }
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    operator delete((void *)v12);
  }
}

uint64_t mlir::PassManager::enableVerifier(uint64_t this, int a2)
{
  char v2;

  if (a2)
    v2 = 2;
  else
    v2 = 0;
  *(_BYTE *)(this + 56) = *(_BYTE *)(this + 56) & 0xFD | v2;
  return this;
}

uint64_t mlir::PassManager::run(mlir::PassManager *this, mlir::Operation *a2)
{
  mlir::MLIRContext *v4;
  uint64_t *v5;
  char v6;
  char ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  llvm *v16;
  char ***v17;
  char *v18;
  char *v19;
  __int128 v20;
  char ***v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void **v38;
  unint64_t RegistryHash;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  int v46;
  void *v47;
  size_t v48;
  char *v49;
  char **v50;
  BOOL v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  _QWORD **v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  char **v72;
  char *v73;
  uint64_t v74;
  void *v75;
  _QWORD *v76;
  llvm **v77;
  llvm *v78;
  uint64_t v79;
  int v80;
  void *v81;
  llvm *v82;
  uint64_t v83;
  unsigned int v84;
  void *v85;
  uint64_t v86;
  _QWORD v87[8];
  void *v88;
  _QWORD *v89;
  void *__p;
  _QWORD **v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t **)this;
  v4 = (mlir::MLIRContext *)*((_QWORD *)this + 1);
  v6 = *(_BYTE *)(*(_QWORD *)this + 23);
  if (v6 < 0)
  {
    if (!v5[1])
      goto LABEL_6;
  }
  else if (!*(_BYTE *)(*(_QWORD *)this + 23))
  {
LABEL_6:
    if (!*((_BYTE *)v5 + 32))
      goto LABEL_53;
    goto LABEL_7;
  }
  if (*((_BYTE *)v5 + 32))
    goto LABEL_6;
  if (v6 >= 0)
    v14 = *(uint64_t **)this;
  else
    v14 = (uint64_t *)*v5;
  if (v6 >= 0)
    v15 = *(unsigned __int8 *)(*(_QWORD *)this + 23);
  else
    v15 = v5[1];
  mlir::OperationName::OperationName(&v78, v14, v15, v4);
  v16 = v78;
  if (*((_BYTE *)v5 + 32))
  {
    v5[3] = (uint64_t)v78;
    if (!*((_BYTE *)v5 + 32))
      goto LABEL_53;
  }
  else
  {
    *((_BYTE *)v5 + 32) = 1;
    v5[3] = (uint64_t)v16;
  }
LABEL_7:
  if (*((_QWORD *)a2 + 6) != v5[3])
  {
    mlir::emitError(*((_QWORD *)a2 + 3), (uint64_t)&v78);
    if (v78)
    {
      LODWORD(v72) = 3;
      v73 = "can't run '";
      v74 = 11;
      v7 = &v72;
      v8 = (char *)v81;
      if (v82 >= HIDWORD(v82))
      {
        v66 = v82 + 1;
        if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
        {
          v69 = (char *)&v72 - (_BYTE *)v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v66, 24);
          v8 = (char *)v81;
          v7 = (char ***)((char *)v81 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v66, 24);
          v7 = &v72;
          v8 = (char *)v81;
        }
      }
      v9 = &v8[24 * v82];
      v10 = *(_OWORD *)v7;
      *((_QWORD *)v9 + 2) = v7[2];
      *(_OWORD *)v9 = v10;
      LODWORD(v82) = (_DWORD)v82 + 1;
    }
    v11 = *(const char **)this;
    v12 = *(unsigned __int8 *)(*(_QWORD *)this + 23);
    if (*(char *)(*(_QWORD *)this + 23) < 0)
    {
      if (*((_QWORD *)v11 + 1))
      {
LABEL_13:
        v13 = *((_QWORD *)v11 + 1);
        if ((v12 & 0x80u) != 0)
        {
          v11 = *(const char **)v11;
          v12 = v13;
        }
        if (!v78)
          goto LABEL_34;
        goto LABEL_28;
      }
    }
    else if (*(_BYTE *)(*(_QWORD *)this + 23))
    {
      goto LABEL_13;
    }
    v11 = "any";
    v12 = 3;
    if (!v78)
    {
LABEL_34:
      v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v78);
      if (v78)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
      if (v92)
      {
        v26 = (_QWORD **)__p;
        if (__p)
        {
          v27 = v91;
          v28 = __p;
          if (v91 != __p)
          {
            do
              v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            v28 = __p;
          }
          v91 = v26;
          operator delete(v28);
        }
        v29 = v88;
        if (v88)
        {
          v30 = v89;
          v31 = v88;
          if (v89 != v88)
          {
            do
            {
              v33 = (void *)*--v30;
              v32 = v33;
              *v30 = 0;
              if (v33)
                operator delete[](v32);
            }
            while (v30 != v29);
            v31 = v88;
          }
          v89 = v29;
          operator delete(v31);
        }
        if (v81 != &v83)
          free(v81);
      }
      return v25;
    }
LABEL_28:
    LOWORD(v76) = 261;
    v72 = (char **)v11;
    v73 = (char *)v12;
    mlir::Diagnostic::operator<<((uint64_t)&v79, (const void ***)&v72);
    if (v78)
    {
      LODWORD(v72) = 3;
      v73 = "' pass manager on '";
      v74 = 19;
      v17 = &v72;
      v18 = (char *)v81;
      if (v82 >= HIDWORD(v82))
      {
        v67 = v82 + 1;
        if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
        {
          v70 = (char *)&v72 - (_BYTE *)v81;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v67, 24);
          v18 = (char *)v81;
          v17 = (char ***)((char *)v81 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v67, 24);
          v17 = &v72;
          v18 = (char *)v81;
        }
      }
      v19 = &v18[24 * v82];
      v20 = *(_OWORD *)v17;
      *((_QWORD *)v19 + 2) = v17[2];
      *(_OWORD *)v19 = v20;
      LODWORD(v82) = (_DWORD)v82 + 1;
      if (v78)
      {
        mlir::Diagnostic::operator<<((uint64_t)&v79, *((_QWORD *)a2 + 6));
        if (v78)
        {
          LODWORD(v72) = 3;
          v73 = "' op";
          v74 = 4;
          v21 = &v72;
          v22 = (char *)v81;
          if (v82 >= HIDWORD(v82))
          {
            v68 = v82 + 1;
            if (v81 <= &v72 && (char *)v81 + 24 * v82 > (char *)&v72)
            {
              v71 = (char *)&v72 - (_BYTE *)v81;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v68, 24);
              v22 = (char *)v81;
              v21 = (char ***)((char *)v81 + v71);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v81, &v83, v68, 24);
              v21 = &v72;
              v22 = (char *)v81;
            }
          }
          v23 = &v22[24 * v82];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = v21[2];
          *(_OWORD *)v23 = v24;
          LODWORD(v82) = (_DWORD)v82 + 1;
        }
      }
    }
    goto LABEL_34;
  }
LABEL_53:
  mlir::DialectRegistry::DialectRegistry((mlir::DialectRegistry *)&v72);
  v34 = *(uint64_t **)(*(_QWORD *)this + 40);
  v35 = *(_QWORD *)(*(_QWORD *)this + 48) - (_QWORD)v34;
  if (v35)
  {
    v36 = 8 * (v35 >> 3);
    do
    {
      v37 = *v34++;
      (*(void (**)(uint64_t, char ***))(*(_QWORD *)v37 + 24))(v37, &v72);
      v36 -= 8;
    }
    while (v36);
  }
  mlir::MLIRContext::appendDialectRegistry(v4, (mlir::DialectRegistry **)&v72);
  v38 = (const void **)v72;
  if (v72 != &v73)
  {
    do
    {
      v46 = *((char *)v38 + 55);
      if (v46 >= 0)
        v47 = v38 + 4;
      else
        v47 = (void *)v38[4];
      if (v46 >= 0)
        v48 = *((unsigned __int8 *)v38 + 55);
      else
        v48 = (size_t)v38[5];
      mlir::MLIRContext::getOrLoadDialect((uint64_t)v4, v47, v48);
      v49 = (char *)v38[1];
      if (v49)
      {
        do
        {
          v50 = (char **)v49;
          v49 = *(char **)v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          v50 = (char **)v38[2];
          v51 = *v50 == (char *)v38;
          v38 = (const void **)v50;
        }
        while (!v51);
      }
      v38 = (const void **)v50;
    }
    while (v50 != &v73);
  }
  if (mlir::detail::OpPassManagerImpl::finalizePassList(*(mlir::detail::OpPassManagerImpl **)this, v4))
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v4);
    RegistryHash = mlir::MLIRContext::getRegistryHash(v4);
    v40 = mlir::OpPassManager::hash(this);
    if (RegistryHash == *((_QWORD *)this + 5) && v40 == *((_QWORD *)this + 6))
    {
LABEL_62:
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v82 = 0;
      v83 = 0;
      v81 = a2;
      v84 = 0;
      v41 = *((_QWORD *)this + 4);
      v42 = *((_QWORD *)this + 3) | 4;
      v86 = 0;
      v87[0] = v42;
      v85 = v87;
      if (v41)
      {
        mlir::PassManager::runWithCrashRecovery((uint64_t)this, (uint64_t)a2, (uint64_t)&v78);
        mlir::GenericProgramPoint::~GenericProgramPoint(v4);
        if (!*((_BYTE *)this + 20))
          goto LABEL_65;
      }
      else
      {
        v54 = *((unsigned __int8 *)this + 56);
        v55 = *(_QWORD *)this;
        v56 = *(_DWORD *)(*(_QWORD *)this + 64);
        v77 = &v78;
        v57 = *(_QWORD ***)(v55 + 40);
        v58 = *(_QWORD *)(v55 + 48) - (_QWORD)v57;
        if (v58)
        {
          v59 = 8 * (v58 >> 3);
          v60 = (v54 >> 1) & 1;
          do
          {
            if (!mlir::detail::OpToOpPassAdaptor::run(*v57, a2, (mlir::detail::NestedAnalysisMap *)&v78, v60, v56))break;
            ++v57;
            v59 -= 8;
          }
          while (v59);
        }
        mlir::AnalysisManager::clear((uint64_t *)&v77);
        mlir::GenericProgramPoint::~GenericProgramPoint(v4);
        if (!*((_BYTE *)this + 20))
        {
LABEL_65:
          v43 = v85;
          if ((_DWORD)v86)
          {
            v44 = (char *)v85 - 8;
            v45 = 16 * v86;
            do
            {
              v52 = *(_QWORD *)&v44[v45];
              *(_QWORD *)&v44[v45] = 0;
              if (v52)
                (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
              v45 -= 16;
            }
            while (v45);
            v43 = v85;
          }
          if (v43 != v87)
            free(v43);
          llvm::deallocate_buffer(v82, (void *)(16 * v84));
        }
      }
      mlir::PassManager::dumpStatistics(this);
      goto LABEL_65;
    }
    if (mlir::OpPassManager::initialize(this, v4, *(_DWORD *)(*(_QWORD *)this + 64) + 1))
    {
      *((_QWORD *)this + 5) = RegistryHash;
      goto LABEL_62;
    }
  }
  v25 = 0;
  v53 = v75;
  if (v75)
  {
    v61 = v76;
    v62 = v75;
    if (v76 != v75)
    {
      do
      {
        v64 = *--v61;
        v63 = v64;
        *v61 = 0;
        if (v64)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
      }
      while (v61 != v53);
      v62 = v75;
    }
    v76 = v53;
    operator delete(v62);
  }
  std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy((uint64_t)&v72, v73);
  return v25;
}

uint64_t mlir::PassManager::runPasses(unsigned __int8 *a1, mlir *a2, mlir::detail::NestedAnalysisMap *a3)
{
  unsigned int v3;
  uint64_t v4;
  int v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v10;
  int v11;
  uint64_t v12;
  mlir::detail::NestedAnalysisMap *v14;

  v3 = a1[56];
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 64);
  v14 = a3;
  v6 = *(_QWORD ***)(v4 + 40);
  v7 = *(_QWORD *)(v4 + 48) - (_QWORD)v6;
  if (v7)
  {
    v10 = 8 * (v7 >> 3);
    v11 = (v3 >> 1) & 1;
    while (mlir::detail::OpToOpPassAdaptor::run(*v6, a2, a3, v11, v5))
    {
      ++v6;
      v10 -= 8;
      if (!v10)
        goto LABEL_5;
    }
    v12 = 0;
  }
  else
  {
LABEL_5:
    v12 = 1;
  }
  mlir::AnalysisManager::clear((uint64_t *)&v14);
  return v12;
}

uint64_t mlir::PassManager::addInstrumentation(uint64_t a1, uint64_t *a2)
{
  std::recursive_mutex **v3;
  _OWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  std::recursive_mutex *v16;
  std::recursive_mutex *v17;
  uint64_t *v18;
  uint64_t result;
  uint64_t v20;

  v3 = *(std::recursive_mutex ***)(a1 + 24);
  if (!v3)
  {
    v3 = (std::recursive_mutex **)operator new(8uLL);
    v5 = operator new(0x60uLL);
    *v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    v5[4] = 0u;
    v5[5] = 0u;
    v6 = MEMORY[0x186DA1428]();
    *(_DWORD *)(v6 + 64) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 72) = 0;
    *v3 = (std::recursive_mutex *)v6;
    v7 = *(uint64_t **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    if (v7)
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        v9 = *(_QWORD **)(v8 + 72);
        if (v9)
        {
          v10 = *(_QWORD **)(v8 + 80);
          v11 = *(void **)(v8 + 72);
          if (v10 != v9)
          {
            do
            {
              v13 = *--v10;
              v12 = v13;
              *v10 = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            }
            while (v10 != v9);
            v11 = *(void **)(v8 + 72);
          }
          *(_QWORD *)(v8 + 80) = v9;
          operator delete(v11);
        }
        std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)v8);
        operator delete(v14);
      }
      operator delete(v7);
      v3 = *(std::recursive_mutex ***)(a1 + 24);
    }
  }
  v15 = *a2;
  *a2 = 0;
  v20 = v15;
  v16 = *v3;
  std::recursive_mutex::lock(*v3);
  v17 = *v3;
  v18 = *(uint64_t **)&(*v3)[1].__m_.__opaque[8];
  if ((unint64_t)v18 >= *(_QWORD *)&(*v3)[1].__m_.__opaque[16])
  {
    *(_QWORD *)&v17[1].__m_.__opaque[8] = std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(v17[1].__m_.__opaque, &v20);
    std::recursive_mutex::unlock(v16);
    result = v20;
    v20 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v20 = 0;
  *v18 = v15;
  *(_QWORD *)&v17[1].__m_.__opaque[8] = v18 + 1;
  std::recursive_mutex::unlock(v16);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::AnalysisManager::nestImmediate(mlir::AnalysisManager *this, mlir::Operation *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  mlir::Operation *v8;
  int v9;
  int v10;
  _QWORD *v11;
  unsigned int v12;
  mlir::Operation *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  mlir::Operation *v18;
  uint64_t v19;
  int v21;
  int v22;
  unsigned int v23;
  mlir::Operation *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;

  v3 = *(_QWORD *)this;
  v4 = **(_QWORD **)this;
  v5 = *(unsigned int *)(*(_QWORD *)this + 16);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = v4 + 16 * v6;
    v8 = *(mlir::Operation **)v7;
    if (*(mlir::Operation **)v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != (mlir::Operation *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(mlir::Operation **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = v4 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  v7 = v4 + 16 * v5;
LABEL_8:
  if (v7 == v4 + 16 * v5)
  {
    v11 = operator new(0x50uLL);
    *v11 = 0;
    v11[1] = 0;
    *((_DWORD *)v11 + 4) = 0;
    v11[4] = 0;
    v11[5] = 0;
    v11[3] = a2;
    *((_DWORD *)v11 + 12) = 0;
    v11[9] = v3 & 0xFFFFFFFFFFFFFFFBLL;
    v11[7] = v11 + 9;
    v11[8] = 0;
    v29 = (uint64_t)v11;
    if (!(_DWORD)v5)
      goto LABEL_30;
    v12 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = v4 + 16 * v12;
    v13 = *(mlir::Operation **)v7;
    if (*(mlir::Operation **)v7 == a2)
    {
LABEL_25:
      std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](&v29, 0);
      return *(_QWORD *)(v7 + 8);
    }
    v14 = 0;
    v15 = 1;
    while (v13 != (mlir::Operation *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (mlir::Operation *)-8192;
      if (v16)
        v14 = v7;
      v17 = v12 + v15++;
      v12 = v17 & (v5 - 1);
      v7 = v4 + 16 * v12;
      v13 = *(mlir::Operation **)v7;
      if (*(mlir::Operation **)v7 == a2)
        goto LABEL_25;
    }
    if (v14)
      v7 = v14;
    v21 = *(_DWORD *)(v3 + 8);
    if (4 * v21 + 4 < (3 * v5))
    {
      if ((int)v5 + ~v21 - *(_DWORD *)(v3 + 12) > v5 >> 3)
        goto LABEL_22;
    }
    else
    {
LABEL_30:
      LODWORD(v5) = 2 * v5;
    }
    llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::grow(v3, v5);
    v22 = *(_DWORD *)(v3 + 16) - 1;
    v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
    v7 = *(_QWORD *)v3 + 16 * v23;
    v24 = *(mlir::Operation **)v7;
    if (*(mlir::Operation **)v7 == a2)
    {
LABEL_32:
      ++*(_DWORD *)(v3 + 8);
      if (a2 == (mlir::Operation *)-4096)
        goto LABEL_24;
      goto LABEL_23;
    }
    v25 = 0;
    v26 = 1;
    while (v24 != (mlir::Operation *)-4096)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == (mlir::Operation *)-8192;
      if (v27)
        v25 = v7;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      v7 = *(_QWORD *)v3 + 16 * v23;
      v24 = *(mlir::Operation **)v7;
      if (*(mlir::Operation **)v7 == a2)
        goto LABEL_32;
    }
    if (v25)
      v7 = v25;
LABEL_22:
    v18 = *(mlir::Operation **)v7;
    ++*(_DWORD *)(v3 + 8);
    if (v18 == (mlir::Operation *)-4096)
    {
LABEL_24:
      *(_QWORD *)v7 = a2;
      v19 = v29;
      v29 = 0;
      *(_QWORD *)(v7 + 8) = v19;
      goto LABEL_25;
    }
LABEL_23:
    --*(_DWORD *)(v3 + 12);
    goto LABEL_24;
  }
  return *(_QWORD *)(v7 + 8);
}

void mlir::detail::NestedAnalysisMap::invalidate(mlir::detail::NestedAnalysisMap *this, const mlir::detail::PreservedAnalyses *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t i;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD v20[2];
  const void *v21[7];

  v21[6] = *(const void **)MEMORY[0x1E0C80C00];
  if (!mlir::detail::PreservedAnalyses::isAll(a2))
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v18, v21, a2);
    _ZN4llvm9MapVectorIN4mlir6TypeIDENSt3__110unique_ptrINS1_6detail15AnalysisConceptENS3_14default_deleteIS6_EEEENS_8DenseMapIS2_jNS_12DenseMapInfoIS2_vEENS_6detail12DenseMapPairIS2_jEEEENS_11SmallVectorINS3_4pairIS2_S9_EELj0EEEE9remove_ifIZNS5_11AnalysisMap10invalidateERKNS5_17PreservedAnalysesEEUlRT_E_EEvSR_((uint64_t)this + 32, (uint64_t)&v18);
    if (v19 != v18)
      free(v19);
    if (*((_DWORD *)a2 + 5) == *((_DWORD *)a2 + 6))
    {
      v4 = *((_DWORD *)this + 2);
      if (v4 || *((_DWORD *)this + 3))
      {
        v5 = *((unsigned int *)this + 4);
        if (v5 > 4 * v4 && v5 >= 0x41)
        {
          llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear((uint64_t *)this);
          return;
        }
        if ((_DWORD)v5)
        {
          v15 = (uint64_t *)(*(_QWORD *)this + 8);
          for (i = 16 * v5; i; i -= 16)
          {
            v17 = *(v15 - 1);
            if (v17 != -8192)
            {
              if (v17 == -4096)
                goto LABEL_35;
              std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v15, 0);
            }
            *(v15 - 1) = -4096;
LABEL_35:
            v15 += 2;
          }
        }
        *((_QWORD *)this + 1) = 0;
      }
    }
    else
    {
      v18 = v20;
      HIDWORD(v19) = 8;
      v20[0] = this;
      v6 = 1;
      do
      {
        v7 = (uint64_t *)*((_QWORD *)v18 + --v6);
        LODWORD(v19) = v6;
        if (*((_DWORD *)v7 + 2))
        {
          v8 = *v7;
          v9 = *((unsigned int *)v7 + 4);
          if ((_DWORD)v9)
          {
            v10 = 16 * v9;
            v11 = v8;
            while ((*(_QWORD *)v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v11 += 16;
              v10 -= 16;
              if (!v10)
                goto LABEL_12;
            }
          }
          else
          {
            v11 = v8;
          }
          v12 = v8 + 16 * v9;
          if (v11 != v12)
          {
LABEL_21:
            mlir::detail::NestedAnalysisMap::invalidate(*(mlir::detail::NestedAnalysisMap **)(v11 + 8), a2);
            v13 = *(_QWORD *)(v11 + 8);
            if (*(_DWORD *)(v13 + 8))
            {
              v14 = v19;
              if (v19 >= (unint64_t)HIDWORD(v19))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 8);
                v14 = v19;
              }
              *((_QWORD *)v18 + v14) = v13;
              LODWORD(v19) = (_DWORD)v19 + 1;
            }
            while (1)
            {
              v11 += 16;
              if (v11 == v12)
                break;
              if ((*(_QWORD *)v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v11 != v12)
                  goto LABEL_21;
                break;
              }
            }
            v6 = v19;
          }
        }
LABEL_12:
        ;
      }
      while (v6);
      if (v18 != v20)
        free(v18);
    }
  }
}

void mlir::PassInstrumentor::runBeforeAnalysis(std::recursive_mutex **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::recursive_mutex *v10;
  std::recursive_mutex *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v10 = *a1;
  std::recursive_mutex::lock(*a1);
  v11 = *a1;
  v12 = *(uint64_t **)(*a1)[1].__m_.__opaque;
  v13 = *(uint64_t **)&v11[1].__m_.__opaque[8];
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 56))(v14, a2, a3, a4, a5);
  }
  std::recursive_mutex::unlock(v10);
}

void mlir::PassInstrumentor::runAfterAnalysis(std::recursive_mutex **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::recursive_mutex *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;

  v10 = *a1;
  std::recursive_mutex::lock(*a1);
  v12 = *(_QWORD *)(*a1)[1].__m_.__opaque;
  for (i = *(_QWORD *)&(*a1)[1].__m_.__opaque[8]; i != v12; i -= 8)
  {
    v13 = *(_QWORD *)(i - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 64))(v13, a2, a3, a4, a5);
  }
  std::recursive_mutex::unlock(v10);
}

const char *mlir::tracing::ActionImpl<mlir::PassExecutionAction>::getTag()
{
  return "pass-execution";
}

uint64_t mlir::tracing::Action::getContextIRUnits(mlir::tracing::Action *this)
{
  return *((_QWORD *)this + 2);
}

void mlir::detail::OpToOpPassAdaptor::~OpToOpPassAdaptor(mlir::detail::OpToOpPassAdaptor *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)this = off_1E0E4E358;
  v2 = (char *)*((_QWORD *)this + 46);
  v3 = *((unsigned int *)this + 94);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = v2 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v5[v4]);
      v4 -= 24;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 46);
  }
  if (v2 != (char *)this + 384)
    free(v2);
  llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)this + 43);
  mlir::Pass::~Pass(this);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;

  *(_QWORD *)this = off_1E0E4E358;
  v2 = (char *)*((_QWORD *)this + 46);
  v3 = *((unsigned int *)this + 94);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = v2 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v5[v4]);
      v4 -= 24;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 46);
  }
  if (v2 != (char *)this + 384)
    free(v2);
  llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)this + 43);
  mlir::Pass::~Pass(this);
  operator delete(v6);
}

const char *mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::getName()
{
  unint64_t v0;
  unint64_t v1;
  const char *v2;
  uint64_t v3;
  const char *v5;
  unint64_t v6;

  v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
  v6 = 81;
  v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0)
    v1 = v0;
  else
    v1 = v6;
  v2 = &v5[v1];
  if (v6 - v1 >= 0x12)
    v3 = 18;
  else
    v3 = v6 - v1;
  return &v2[v3];
}

uint64_t mlir::OperationPass<void>::canScheduleOn()
{
  return 1;
}

uint64_t mlir::PassWrapper<mlir::detail::OpToOpPassAdaptor,mlir::OperationPass<void>>::clonePass@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t)operator new(0x240uLL);
  v5 = result;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(result + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 120) = 0;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = result + 200;
  *(_QWORD *)(result + 192) = 0x400000000;
  *(_QWORD *)(result + 232) = result + 248;
  *(_QWORD *)(result + 240) = 0x400000000;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 288) = 0;
  *(_DWORD *)(result + 296) = 0;
  *(_DWORD *)(result + 300) = 16;
  *(_OWORD *)(result + 304) = 0u;
  *(_OWORD *)(result + 320) = 0u;
  *(_QWORD *)result = off_1E0E4E358;
  *(_QWORD *)(result + 8) = v6;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = result + 360;
  *(_QWORD *)(result + 352) = 0x100000000;
  if (*(_DWORD *)(a1 + 352))
    result = llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(result + 344, a1 + 344);
  *(_QWORD *)(v5 + 368) = v5 + 384;
  *(_QWORD *)(v5 + 376) = 0x800000000;
  if (*(_DWORD *)(a1 + 376))
    result = llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::operator=(v5 + 368, a1 + 368);
  *a2 = v5;
  return result;
}

uint64_t mlir::detail::OpToOpPassAdaptor::tryMergeInto(mlir::MLIRContext *,mlir::detail::OpToOpPassAdaptor&)::$_2::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  const void *v4;
  size_t v5;
  _QWORD *v6;
  char v7;
  size_t v8;
  size_t v9;
  const void *v10;
  int v11;

  v2 = *a1;
  v3 = *(unsigned __int8 *)(*a1 + 23);
  if ((*(char *)(*a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(*a1 + 23))
      goto LABEL_3;
    return 1;
  }
  if (!*(_QWORD *)(v2 + 8))
    return 1;
LABEL_3:
  if ((v3 & 0x80u) == 0)
    v4 = (const void *)*a1;
  else
    v4 = *(const void **)v2;
  if ((v3 & 0x80u) == 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD **)a2;
  v7 = *(_BYTE *)(*(_QWORD *)a2 + 23);
  if ((v7 & 0x80000000) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + 23))
      goto LABEL_11;
    return 0xFFFFFFFFLL;
  }
  if (!v6[1])
    return 0xFFFFFFFFLL;
LABEL_11:
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
  else
    v8 = v6[1];
  if (v8 >= v5)
    v9 = v5;
  else
    v9 = v8;
  if (v9)
  {
    v10 = v7 >= 0 ? *(const void **)a2 : (const void *)*v6;
    v11 = memcmp(v4, v10, v9);
    if (v11)
      return (v11 >> 31) | 1u;
  }
  if (v5 == v8)
    return 0;
  if (v5 < v8)
    return 0xFFFFFFFFLL;
  return 1;
}

uint64_t _ZN4llvm9MapVectorIN4mlir6TypeIDENSt3__110unique_ptrINS1_6detail15AnalysisConceptENS3_14default_deleteIS6_EEEENS_8DenseMapIS2_jNS_12DenseMapInfoIS2_vEENS_6detail12DenseMapPairIS2_jEEEENS_11SmallVectorINS3_4pairIS2_S9_EELj0EEEE9remove_ifIZNS5_11AnalysisMap10invalidateERKNS5_17PreservedAnalysesEEUlRT_E_EEvSR_(uint64_t result, uint64_t a2)
{
  int32x2_t *v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  __int32 v8;
  unsigned int v9;
  uint64_t v10;
  __int32 v11;
  int32x2_t v12;
  __int32 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x2_t v19;
  __int32 v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;

  v2 = (int32x2_t *)result;
  v3 = *(int32x2_t *)(result + 24);
  v4 = *(unsigned int *)(result + 32);
  if (!(_DWORD)v4)
  {
    v7 = *(uint64_t **)(result + 24);
    goto LABEL_40;
  }
  v6 = *(_QWORD *)&v3 + 16 * v4;
  v7 = *(uint64_t **)(result + 24);
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)&v3 + 8) + 16))(*(_QWORD *)(*(_QWORD *)&v3 + 8), a2);
    if (!(_DWORD)result)
    {
      if ((uint64_t *)v3 == v7)
        goto LABEL_5;
      *v7 = **(_QWORD **)&v3;
      v17 = *(_QWORD *)(*(_QWORD *)&v3 + 8);
      *(_QWORD *)(*(_QWORD *)&v3 + 8) = 0;
      v18 = v7[1];
      v7[1] = v17;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v19 = v2[3];
      v20 = v2[2].i32[0];
      if (v20)
      {
        v8 = v20 - 1;
        v9 = ((*v7 >> 4) ^ (*v7 >> 9)) & v8;
        result = *(_QWORD *)v2 + 16 * v9;
        v10 = *(_QWORD *)result;
        if (*v7 == *(_QWORD *)result)
        {
LABEL_4:
          *(_DWORD *)(result + 8) = ((unint64_t)v7 - *(_QWORD *)&v19) >> 4;
LABEL_5:
          v7 += 2;
          goto LABEL_6;
        }
        v24 = 0;
        v25 = 1;
        while (v10 != -4096)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v10 == -8192;
          if (v26)
            v24 = result;
          v27 = v9 + v25++;
          v9 = v27 & v8;
          result = *(_QWORD *)v2 + 16 * v9;
          v10 = *(_QWORD *)result;
          if (*v7 == *(_QWORD *)result)
            goto LABEL_4;
        }
        if (v24)
          v21 = v24;
        else
          v21 = result;
      }
      else
      {
        v21 = 0;
      }
      result = llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::InsertIntoBucket<mlir::TypeID const&>((uint64_t)v2, v21, v7);
      goto LABEL_4;
    }
    v11 = v2[2].i32[0];
    if (v11)
    {
      v12 = *v2;
      v13 = v11 - 1;
      LODWORD(v14) = ((**(_QWORD **)&v3 >> 4) ^ (**(_QWORD **)&v3 >> 9)) & (v11 - 1);
      v15 = (uint64_t *)(*(_QWORD *)v2 + 16 * v14);
      v16 = *v15;
      if (**(_QWORD **)&v3 == *v15)
      {
LABEL_10:
        *v15 = -8192;
        v2[1] = vadd_s32(v2[1], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v22 = 1;
        while (v16 != -4096)
        {
          v23 = v14 + v22++;
          v14 = v23 & v13;
          v16 = *(_QWORD *)(*(_QWORD *)&v12 + 16 * v14);
          if (**(_QWORD **)&v3 == v16)
          {
            v15 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v14);
            goto LABEL_10;
          }
        }
      }
    }
LABEL_6:
    *(_QWORD *)&v3 += 16;
  }
  while (*(_QWORD *)&v3 != v6);
  v3 = v2[3];
  v28 = (uint64_t *)(*(_QWORD *)&v3 + 16 * v2[4].u32[0]);
  if (v28 != v7)
  {
    do
    {
      result = *(v28 - 1);
      *(v28 - 1) = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v28 -= 2;
    }
    while (v28 != v7);
    v3 = v2[3];
  }
LABEL_40:
  v2[4].i32[0] = ((unint64_t)v7 - *(_QWORD *)&v3) >> 4;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>,mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::InsertIntoBucket<mlir::TypeID const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *(_QWORD *)a2;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::Region *,unsigned int,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,unsigned int>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = *(_QWORD *)a1 + 16 * v11;
  v12 = *(_QWORD *)a2;
  if (*a3 != *(_QWORD *)a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = *(_QWORD *)a1 + 16 * (v16 & v10);
      v12 = *(_QWORD *)a2;
      if (v8 == *(_QWORD *)a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)a2 = *a3;
  *(_DWORD *)(a2 + 8) = 0;
  return a2;
}

char **llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = &v2[8 * v3];
    do
    {
      v6 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      v5 = v6;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        v7 = *(_QWORD **)(v5 + 40);
        if (v7)
        {
          v8 = *(_QWORD **)(v5 + 48);
          v9 = *(void **)(v5 + 40);
          if (v8 != v7)
          {
            do
            {
              v11 = *--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            }
            while (v8 != v7);
            v9 = *(void **)(v5 + 40);
          }
          *(_QWORD *)(v5 + 48) = v7;
          operator delete(v9);
        }
        if (*(char *)(v5 + 23) < 0)
          operator delete(*(void **)v5);
        operator delete((void *)v5);
      }
    }
    while (v4 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t *llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  llvm *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm *v13;
  _QWORD *v14;
  uint64_t v15;
  llvm *v16;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  v4 = (void *)(16 * v2);
  if ((_DWORD)v2)
  {
    v5 = (uint64_t *)(*result + 8);
    v6 = 16 * v2;
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v5, 0);
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  if (!v3)
  {
    if (!*((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      return result;
    }
LABEL_17:
    llvm::deallocate_buffer((llvm *)*v1, v4);
  }
  v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64)
    v8 = 64;
  else
    v8 = v7;
  if ((_DWORD)v8 != *((_DWORD *)v1 + 4))
    goto LABEL_17;
  v1[1] = 0;
  v9 = (llvm *)*v1;
  v10 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v10)
  {
    v13 = (llvm *)*v1;
LABEL_20:
    v16 = (llvm *)((char *)v9 + 16 * v8);
    do
    {
      *(_QWORD *)v13 = -4096;
      v13 = (llvm *)((char *)v13 + 16);
    }
    while (v13 != v16);
    return result;
  }
  v11 = v10 + 1;
  v12 = (v10 + 1) & 0x1FFFFFFFFFFFFFFELL;
  v13 = (llvm *)((char *)v9 + 16 * v12);
  v14 = (_QWORD *)((char *)v9 + 16);
  v15 = v12;
  do
  {
    *(v14 - 2) = -4096;
    *v14 = -4096;
    v14 += 4;
    v15 -= 2;
  }
  while (v15);
  if (v11 != v12)
    goto LABEL_20;
  return result;
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<llvm::StringLiteral const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5;
  int AsUnsignedInteger;
  unint64_t v7;
  const char *v8;
  size_t v9;
  llvm::raw_ostream *result;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 8);
  if (a4)
  {
    v11 = 0;
    AsUnsignedInteger = llvm::getAsUnsignedInteger(a3, a4, 0xAu, &v11);
    v7 = v11;
    if (AsUnsignedInteger)
      v7 = -1;
  }
  else
  {
    v7 = -1;
  }
  v8 = *(const char **)v5;
  if (*(_QWORD *)(v5 + 8) >= v7)
    v9 = v7;
  else
    v9 = *(_QWORD *)(v5 + 8);
  result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
  if (v9 > *((_QWORD *)a2 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(a2, v8, v9);
  if (v9)
  {
    result = (llvm::raw_ostream *)memcpy(result, v8, v9);
    *((_QWORD *)a2 + 4) += v9;
  }
  return result;
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<mlir::OperationName>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  return mlir::OperationName::print((mlir::OperationName *)&v3, a2);
}

std::string *mlir::detail::OpPassManagerImpl::OpPassManagerImpl(std::string *this, const mlir::detail::OpPassManagerImpl *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::pointer data;
  uint64_t v11;
  uint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(_OWORD *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  v6 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 6);
  while (v6 != v7)
  {
    v8 = *(_QWORD *)v6 + 152;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v6 + 80))(&v13);
    mlir::detail::PassOptions::copyOptionValuesFrom(v13 + 152, v8);
    v9 = v13;
    *(_QWORD *)(v13 + 336) = *(_QWORD *)v6;
    data = this[2].__r_.__value_.__l.__data_;
    if ((unint64_t)data >= this[2].__r_.__value_.__l.__size_)
    {
      this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)std::vector<std::unique_ptr<mlir::RewritePattern>>::__emplace_back_slow_path<std::unique_ptr<mlir::RewritePattern>>(&this[1].__r_.__value_.__r.__words[2], &v13);
      v11 = v13;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
LABEL_11:
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      goto LABEL_5;
    }
    v13 = 0;
    *(_QWORD *)data = v9;
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 8);
    v11 = v13;
    v13 = 0;
    if (v11)
      goto LABEL_11;
LABEL_5:
    v6 += 8;
  }
  return this;
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(mlir::OpPassManager &,mlir::Operation *)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_0>(uint64_t a1, mlir::OpPassManager *a2, Operation *a3)
{
  Operation *v6;
  mlir::detail::OpPassManagerImpl *v7;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v9;
  mlir::AnalysisManager *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  int64_t v27;
  const void **v28;
  __int16 v29;
  int v30;
  const char *v31;
  uint64_t v32;
  _QWORD v33[3];
  void *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE v37[96];
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD **v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = **(Operation ***)a1;
  if (v6 != a3 && (mlir::Operation::isProperAncestor(v6, a3) & 1) == 0)
  {
    v29 = 257;
    mlir::Operation::emitOpError((uint64_t *)a3, &v28, (uint64_t)v33);
    if (v33[0])
    {
      v30 = 3;
      v31 = "Trying to schedule a dynamic pipeline on an operation that isn't nested under the current operation the pass is processing";
      v32 = 122;
      v13 = &v30;
      v14 = (char *)v34;
      if (v35 >= v36)
      {
        v26 = v35 + 1;
        if (v34 <= &v30 && (char *)v34 + 24 * v35 > (char *)&v30)
        {
          v27 = (char *)&v30 - (_BYTE *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v26, 24);
          v14 = (char *)v34;
          v13 = (int *)((char *)v34 + v27);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v26, 24);
          v13 = &v30;
          v14 = (char *)v34;
        }
      }
      v15 = &v14[24 * v35];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v15 = v16;
      ++v35;
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v33);
    if (v33[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v33);
    if (v42)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v41;
        v19 = __p;
        if (v41 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v41 = v17;
        operator delete(v19);
      }
      v20 = v38;
      if (v38)
      {
        v21 = v39;
        v22 = v38;
        if (v39 != v38)
        {
          do
          {
            v24 = (void *)*--v21;
            v23 = v24;
            *v21 = 0;
            if (v24)
              operator delete[](v23);
          }
          while (v21 != v20);
          v22 = v38;
        }
        v39 = v20;
        operator delete(v22);
      }
      if (v34 != v37)
        free(v34);
    }
    return v12;
  }
  v7 = *(mlir::detail::OpPassManagerImpl **)a2;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((Operation *)((char *)a3 + 24));
  if (!mlir::detail::OpPassManagerImpl::finalizePassList(v7, Context))
    return 0;
  v9 = (mlir::MLIRContext *)mlir::Attribute::getContext((Operation *)((char *)a3 + 24));
  if (!mlir::OpPassManager::initialize(a2, v9, **(_DWORD **)(a1 + 8)))
    return 0;
  v10 = *(mlir::AnalysisManager **)(a1 + 16);
  if (**(Operation ***)a1 == a3)
    v11 = *(_QWORD *)v10;
  else
    v11 = mlir::AnalysisManager::nest(v10, (mlir::Block **)a3);
  return mlir::detail::OpToOpPassAdaptor::runPipeline(a2, a3, v11, **(unsigned __int8 **)(a1 + 24), **(unsigned int **)(a1 + 8), **(_QWORD **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t mlir::MLIRContext::executeActionInternal<mlir::PassExecutionAction,mlir::Pass &>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 v6;
  __guard *v7;
  unint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  const char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if ((v6 & 1) == 0)
  {
    v23 = a3;
    v24 = a1;
    v21 = a6;
    v22 = a2;
    v19 = a4;
    v20 = a5;
    a4 = v19;
    a5 = v20;
    a6 = v21;
    a2 = v22;
    v11 = v10;
    a3 = v23;
    a1 = v24;
    if (v11)
    {
      v25 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PassExecutionAction]";
      v26 = 75;
      v12 = llvm::StringRef::find((uint64_t *)&v25, "DesiredTypeName = ", 0x12uLL, 0);
      if (v26 >= v12)
        v13 = v12;
      else
        v13 = v26;
      v14 = &v25[v13];
      v15 = v26 - v13;
      if (v26 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v26 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::PassExecutionAction,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      a4 = v19;
      a5 = v20;
      a6 = v21;
      a2 = v22;
      a3 = v23;
      a1 = v24;
    }
  }
  v8 = v7[135];
  v27 = a4;
  v28 = a5;
  v25 = (const char *)off_1E0E2BCC8;
  v26 = v8;
  v29 = a6;
  return mlir::MLIRContext::executeActionInternal(a1, a2, a3, (uint64_t)&v25);
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::detail::OpToOpPassAdaptor::run(mlir::Pass *,mlir::Operation *,mlir::AnalysisManager,BOOL,unsigned int)::$_1>(mlir::detail::OpToOpPassAdaptor ***a1)
{
  mlir::detail::OpToOpPassAdaptor *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t result;
  int v7;
  mlir::MLIRContext *Context;
  int isMultithreadingEnabled;
  _BOOL4 v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;

  v2 = **a1;
  v3 = *((_QWORD *)v2 + 1);
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v19 = *((_QWORD *)v2 + 1);
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v19;
    if (v11)
    {
      v20 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      v21 = 81;
      v12 = llvm::StringRef::find((uint64_t *)&v20, "DesiredTypeName = ", 0x12uLL, 0);
      if (v21 >= v12)
        v13 = v12;
      else
        v13 = v21;
      v14 = &v20[v13];
      v15 = v21 - v13;
      if (v21 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v21 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v19;
    }
  }
  if (v3 == v5[128])
  {
    v7 = *(unsigned __int8 *)a1[1];
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)v2 + 5) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24));
    isMultithreadingEnabled = mlir::MLIRContext::isMultithreadingEnabled(Context);
    v10 = v7 != 0;
    if (isMultithreadingEnabled)
      mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(v2, v10);
    result = mlir::detail::OpToOpPassAdaptor::runOnOperationImpl(v2, v10);
  }
  else
  {
    result = (*(uint64_t (**)(mlir::detail::OpToOpPassAdaptor *))(*(_QWORD *)**a1 + 56))(**a1);
  }
  *(_BYTE *)a1[2] = (*((_BYTE *)**a1 + 40) & 4) != 0;
  return result;
}

uint64_t *mlir::AnalysisManager::clear(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t i;
  uint64_t v21;

  v1 = this;
  v2 = *this;
  v3 = *(_DWORD *)(*this + 40);
  if (*(_QWORD *)(*this + 40))
  {
    this = (uint64_t *)(v2 + 32);
    v4 = *(unsigned int *)(v2 + 48);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      this = (uint64_t *)llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear((uint64_t)this);
      goto LABEL_5;
    }
    if ((_DWORD)v4)
    {
      v6 = *this;
      v7 = (v4 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v7)
      {
        v8 = v7 + 1;
        v9 = (v7 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v10 = (_QWORD *)(v6 + 16 * v9);
        v11 = (_QWORD *)(v6 + 16);
        v12 = v9;
        do
        {
          *(v11 - 2) = -4096;
          *v11 = -4096;
          v11 += 4;
          v12 -= 2;
        }
        while (v12);
        if (v8 == v9)
          goto LABEL_16;
      }
      else
      {
        v10 = (_QWORD *)*this;
      }
      v13 = (_QWORD *)(v6 + 16 * v4);
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v13);
    }
LABEL_16:
    *(_QWORD *)(v2 + 40) = 0;
    v5 = *(unsigned int *)(v2 + 64);
    if (!(_DWORD)v5)
      goto LABEL_21;
    goto LABEL_17;
  }
LABEL_5:
  v5 = *(unsigned int *)(v2 + 64);
  if (!(_DWORD)v5)
    goto LABEL_21;
LABEL_17:
  v14 = *(_QWORD *)(v2 + 56) - 8;
  v15 = 16 * v5;
  do
  {
    this = *(uint64_t **)(v14 + v15);
    *(_QWORD *)(v14 + v15) = 0;
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    v15 -= 16;
  }
  while (v15);
LABEL_21:
  *(_DWORD *)(v2 + 64) = 0;
  v16 = *v1;
  v17 = *(_DWORD *)(v16 + 8);
  if (v17 || *(_DWORD *)(v16 + 12))
  {
    v18 = *(unsigned int *)(v16 + 16);
    if (v18 > 4 * v17 && v18 >= 0x41)
      return llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::shrink_and_clear((uint64_t *)v16);
    if ((_DWORD)v18)
    {
      v19 = (uint64_t *)(*(_QWORD *)v16 + 8);
      for (i = 16 * v18; i; i -= 16)
      {
        v21 = *(v19 - 1);
        if (v21 != -8192)
        {
          if (v21 == -4096)
            goto LABEL_29;
          this = std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](v19, 0);
        }
        *(v19 - 1) = -4096;
LABEL_29:
        v19 += 2;
      }
    }
    *(_QWORD *)(v16 + 8) = 0;
  }
  return this;
}

uint64_t llvm::DenseMap<mlir::TypeID,unsigned int,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,unsigned int>>::shrink_and_clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  llvm *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm *v9;
  _QWORD *v10;
  uint64_t v11;
  llvm *v12;

  v1 = *(unsigned int *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)result, (void *)(16 * v1));
  *(_QWORD *)(result + 8) = 0;
  if ((_DWORD)v1)
  {
    v5 = *(llvm **)result;
    v6 = (v1 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      v7 = v6 + 1;
      v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      v9 = (llvm *)((char *)v5 + 16 * v8);
      v10 = (_QWORD *)((char *)v5 + 16);
      v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8)
        return result;
    }
    else
    {
      v9 = *(llvm **)result;
    }
    v12 = (llvm *)((char *)v5 + 16 * v1);
    do
    {
      *(_QWORD *)v9 = -4096;
      v9 = (llvm *)((char *)v9 + 16);
    }
    while (v9 != v12);
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::growAndEmplaceBack<mlir::OpPassManager>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v17;

  v17 = 0;
  v4 = a1 + 16;
  v5 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 8, &v17);
  v6 = *(unsigned int *)(a1 + 8);
  v5[v6] = 0;
  v7 = *a2;
  *a2 = 0;
  v8 = v5[v6];
  v5[v6] = v7;
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 40);
    if (v9)
    {
      v10 = *(_QWORD **)(v8 + 48);
      v11 = *(void **)(v8 + 40);
      if (v10 != v9)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        while (v10 != v9);
        v11 = *(void **)(v8 + 40);
      }
      *(_QWORD *)(v8 + 48) = v9;
      operator delete(v11);
    }
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    operator delete((void *)v8);
  }
  llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, v5);
  v14 = v17;
  if (*(_QWORD *)a1 != v4)
    free(*(void **)a1);
  *(_QWORD *)a1 = v5;
  v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  return (uint64_t)&v5[v15 - 1];
}

void llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(uint64_t **)a1;
    v6 = *(_QWORD *)a1 + 8 * v2;
    do
    {
      *a2 = 0;
      v7 = *v5;
      *v5 = 0;
      v8 = *a2;
      *a2 = v7;
      if (v8)
      {
        v9 = *(_QWORD **)(v8 + 40);
        if (v9)
        {
          v10 = *(_QWORD **)(v8 + 48);
          v11 = *(void **)(v8 + 40);
          if (v10 != v9)
          {
            do
            {
              v13 = *--v10;
              v12 = v13;
              *v10 = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            }
            while (v10 != v9);
            v11 = *(void **)(v8 + 40);
          }
          *(_QWORD *)(v8 + 48) = v9;
          operator delete(v11);
        }
        if (*(char *)(v8 + 23) < 0)
          operator delete(*(void **)v8);
        operator delete((void *)v8);
      }
      ++a2;
      ++v5;
    }
    while (v5 != (uint64_t *)v6);
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = *(uint64_t **)a1;
      v16 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
      do
      {
        v18 = *--v16;
        v17 = v18;
        *v16 = 0;
        if (v18)
        {
          v19 = *(_QWORD **)(v17 + 40);
          if (v19)
          {
            v20 = *(_QWORD **)(v17 + 48);
            v21 = *(void **)(v17 + 40);
            if (v20 != v19)
            {
              do
              {
                v23 = *--v20;
                v22 = v23;
                *v20 = 0;
                if (v23)
                  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              }
              while (v20 != v19);
              v21 = *(void **)(v17 + 40);
            }
            *(_QWORD *)(v17 + 48) = v19;
            operator delete(v21);
          }
          if (*(char *)(v17 + 23) < 0)
            operator delete(*(void **)v17);
          operator delete((void *)v17);
        }
      }
      while (v16 != v15);
    }
  }
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v6 = (char *)(a1 + 16);
  v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v16);
  v8 = v7;
  if (a2)
  {
    v9 = v7;
    v10 = a2;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (*(_DWORD *)(a3 + 8))
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v9, a3);
      v9 += 3;
      --v10;
    }
    while (v10);
  }
  v11 = *(char **)a1;
  v12 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v12)
  {
    v13 = 24 * v12;
    v14 = v11 - 24;
    do
    {
      llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v14[v13]);
      v13 -= 24;
    }
    while (v13);
    v11 = *(char **)a1;
  }
  v15 = v16;
  if (v11 != v6)
    free(v11);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v15;
}

uint64_t llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  std::string **v6;
  std::string **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const mlir::detail::OpPassManagerImpl **v16;
  std::string **v17;
  std::string **v18;
  std::string **v19;
  std::string **v20;
  const mlir::detail::OpPassManagerImpl **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  std::string **v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  std::string **v33;
  const mlir::detail::OpPassManagerImpl **v34;
  uint64_t v35;
  std::string **v36;
  unint64_t v38;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v15 = 0;
        v16 = *(const mlir::detail::OpPassManagerImpl ***)a2;
        v17 = *(std::string ***)a1;
        do
        {
          mlir::OpPassManager::operator=(&v17[v15], &v16[v15]);
          ++v15;
        }
        while (v4 != v15);
        v18 = &v17[v15];
        v19 = *(std::string ***)a1;
        v5 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v19 = *(std::string ***)a1;
        v18 = *(std::string ***)a1;
      }
      v25 = &v19[v5];
      while (v25 != v18)
      {
        v27 = (uint64_t)*--v25;
        v26 = v27;
        *v25 = 0;
        if (v27)
        {
          v28 = *(_QWORD **)(v26 + 40);
          if (v28)
          {
            v29 = *(_QWORD **)(v26 + 48);
            v30 = *(void **)(v26 + 40);
            if (v29 != v28)
            {
              do
              {
                v32 = *--v29;
                v31 = v32;
                *v29 = 0;
                if (v32)
                  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
              }
              while (v29 != v28);
              v30 = *(void **)(v26 + 40);
            }
            *(_QWORD *)(v26 + 48) = v28;
            operator delete(v30);
          }
          if (*(char *)(v26 + 23) < 0)
            operator delete(*(void **)v26);
          operator delete((void *)v26);
        }
      }
      goto LABEL_50;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      v20 = *(std::string ***)a1;
      if ((_DWORD)v5)
      {
        v21 = *(const mlir::detail::OpPassManagerImpl ***)a2;
        v22 = 8 * v5;
        do
        {
          mlir::OpPassManager::operator=(v20++, v21++);
          v22 -= 8;
        }
        while (v22);
        v20 = *(std::string ***)a1;
        v23 = *(unsigned int *)(a2 + 8);
        if (v5 == v23)
          goto LABEL_50;
      }
      else
      {
        v5 = 0;
        v23 = *(unsigned int *)(a2 + 8);
        if (!*(_DWORD *)(a2 + 8))
        {
LABEL_50:
          *(_DWORD *)(a1 + 8) = v4;
          return a1;
        }
      }
    }
    else
    {
      if ((_DWORD)v5)
      {
        v6 = *(std::string ***)a1;
        v7 = (std::string **)(*(_QWORD *)a1 + 8 * v5);
        do
        {
          v9 = (uint64_t)*--v7;
          v8 = v9;
          *v7 = 0;
          if (v9)
          {
            v10 = *(_QWORD **)(v8 + 40);
            if (v10)
            {
              v11 = *(_QWORD **)(v8 + 48);
              v12 = *(void **)(v8 + 40);
              if (v11 != v10)
              {
                do
                {
                  v14 = *--v11;
                  v13 = v14;
                  *v11 = 0;
                  if (v14)
                    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
                }
                while (v11 != v10);
                v12 = *(void **)(v8 + 40);
              }
              *(_QWORD *)(v8 + 48) = v10;
              operator delete(v12);
            }
            if (*(char *)(v8 + 23) < 0)
              operator delete(*(void **)v8);
            operator delete((void *)v8);
          }
        }
        while (v7 != v6);
      }
      *(_DWORD *)(a1 + 8) = 0;
      v38 = 0;
      v20 = (std::string **)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v4, 8, &v38);
      llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, (uint64_t *)v20);
      v24 = v38;
      if (*(_QWORD *)a1 != a1 + 16)
        free(*(void **)a1);
      v5 = 0;
      *(_QWORD *)a1 = v20;
      *(_DWORD *)(a1 + 12) = v24;
      v23 = *(unsigned int *)(a2 + 8);
      if (!*(_DWORD *)(a2 + 8))
        goto LABEL_50;
    }
    v33 = &v20[v5];
    v34 = (const mlir::detail::OpPassManagerImpl **)(*(_QWORD *)a2 + 8 * v5);
    v35 = 8 * v23 - 8 * v5;
    v36 = v33;
    do
    {
      *v36++ = 0;
      mlir::OpPassManager::operator=(v33, v34++);
      v33 = v36;
      v35 -= 8;
    }
    while (v35);
    goto LABEL_50;
  }
  return a1;
}

{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v62;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      llvm::SmallVectorImpl<mlir::OpPassManager>::assignRemote((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v16 = *(char **)a1;
      if ((_DWORD)v5)
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>((uint64_t *)v4, (uint64_t *)&v4[8 * v5], (uint64_t *)v16);
        v18 = v17;
        v16 = *(char **)a1;
        v6 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v18 = *(char **)a1;
      }
      v23 = &v16[8 * v6];
      while (v23 != v18)
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        v24 = v25;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          v26 = *(_QWORD **)(v24 + 40);
          if (v26)
          {
            v27 = *(_QWORD **)(v24 + 48);
            v28 = *(void **)(v24 + 40);
            if (v27 != v26)
            {
              do
              {
                v30 = *--v27;
                v29 = v30;
                *v27 = 0;
                if (v30)
                  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
              }
              while (v27 != v26);
              v28 = *(void **)(v24 + 40);
            }
            *(_QWORD *)(v24 + 48) = v26;
            operator delete(v28);
          }
          if (*(char *)(v24 + 23) < 0)
            operator delete(*(void **)v24);
          operator delete((void *)v24);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v31 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v31)
      {
        v32 = *(char **)a2;
        v33 = (char *)(*(_QWORD *)a2 + 8 * v31);
        do
        {
          v35 = *((_QWORD *)v33 - 1);
          v33 -= 8;
          v34 = v35;
          *(_QWORD *)v33 = 0;
          if (v35)
          {
            v36 = *(_QWORD **)(v34 + 40);
            if (v36)
            {
              v37 = *(_QWORD **)(v34 + 48);
              v38 = *(void **)(v34 + 40);
              if (v37 != v36)
              {
                do
                {
                  v40 = *--v37;
                  v39 = v40;
                  *v37 = 0;
                  if (v40)
                    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
                }
                while (v37 != v36);
                v38 = *(void **)(v34 + 40);
              }
              *(_QWORD *)(v34 + 48) = v36;
              operator delete(v38);
            }
            if (*(char *)(v34 + 23) < 0)
              operator delete(*(void **)v34);
            operator delete((void *)v34);
          }
        }
        while (v33 != v32);
      }
      goto LABEL_91;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = (char *)(*(_QWORD *)a1 + 8 * v6);
        do
        {
          v10 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          v9 = v10;
          *(_QWORD *)v8 = 0;
          if (v10)
          {
            v11 = *(_QWORD **)(v9 + 40);
            if (v11)
            {
              v12 = *(_QWORD **)(v9 + 48);
              v13 = *(void **)(v9 + 40);
              if (v12 != v11)
              {
                do
                {
                  v15 = *--v12;
                  v14 = v15;
                  *v12 = 0;
                  if (v15)
                    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
                }
                while (v12 != v11);
                v13 = *(void **)(v9 + 40);
              }
              *(_QWORD *)(v9 + 48) = v11;
              operator delete(v13);
            }
            if (*(char *)(v9 + 23) < 0)
              operator delete(*(void **)v9);
            operator delete((void *)v9);
          }
        }
        while (v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      v62 = 0;
      v19 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v62);
      llvm::SmallVectorTemplateBase<mlir::OpPassManager,false>::moveElementsForGrow(a1, (uint64_t *)v19);
      v22 = v62;
      if (*(_QWORD *)a1 != a1 + 16)
        free(*(void **)a1);
      v6 = 0;
      *(_QWORD *)a1 = v19;
      *(_DWORD *)(a1 + 12) = v22;
      v20 = *(char **)a2;
      v21 = *(unsigned int *)(a2 + 8);
      if (!*(_DWORD *)(a2 + 8))
        goto LABEL_76;
      goto LABEL_61;
    }
    v19 = *(char **)a1;
    if ((_DWORD)v6)
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>((uint64_t *)v4, (uint64_t *)&v4[8 * v6], *(uint64_t **)a1);
      v19 = *(char **)a1;
      v20 = *(char **)a2;
      v21 = *(unsigned int *)(a2 + 8);
      if (v6 == v21)
      {
LABEL_76:
        *(_DWORD *)(a1 + 8) = v5;
        v52 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v52)
        {
          v53 = &v20[8 * v52];
          do
          {
            v55 = *((_QWORD *)v53 - 1);
            v53 -= 8;
            v54 = v55;
            *(_QWORD *)v53 = 0;
            if (v55)
            {
              v56 = *(_QWORD **)(v54 + 40);
              if (v56)
              {
                v57 = *(_QWORD **)(v54 + 48);
                v58 = *(void **)(v54 + 40);
                if (v57 != v56)
                {
                  do
                  {
                    v60 = *--v57;
                    v59 = v60;
                    *v57 = 0;
                    if (v60)
                      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
                  }
                  while (v57 != v56);
                  v58 = *(void **)(v54 + 40);
                }
                *(_QWORD *)(v54 + 48) = v56;
                operator delete(v58);
              }
              if (*(char *)(v54 + 23) < 0)
                operator delete(*(void **)v54);
              operator delete((void *)v54);
            }
          }
          while (v53 != v20);
        }
LABEL_91:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
    }
    else
    {
      v6 = 0;
      v20 = *(char **)a2;
      v21 = *(unsigned int *)(a2 + 8);
      if (!*(_DWORD *)(a2 + 8))
        goto LABEL_76;
    }
LABEL_61:
    v41 = &v20[8 * v21];
    v42 = 8 * v6;
    v43 = &v19[8 * v6];
    v44 = &v20[v42];
    do
    {
      *(_QWORD *)v43 = 0;
      v45 = *(_QWORD *)v44;
      *(_QWORD *)v44 = 0;
      v46 = *(_QWORD *)v43;
      *(_QWORD *)v43 = v45;
      if (v46)
      {
        v47 = *(_QWORD **)(v46 + 40);
        if (v47)
        {
          v48 = *(_QWORD **)(v46 + 48);
          v49 = *(void **)(v46 + 40);
          if (v48 != v47)
          {
            do
            {
              v51 = *--v48;
              v50 = v51;
              *v48 = 0;
              if (v51)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
            }
            while (v48 != v47);
            v49 = *(void **)(v46 + 40);
          }
          *(_QWORD *)(v46 + 48) = v47;
          operator delete(v49);
        }
        if (*(char *)(v46 + 23) < 0)
          operator delete(*(void **)v46);
        operator delete((void *)v46);
      }
      v43 += 8;
      v44 += 8;
    }
    while (v44 != v41);
    v20 = *(char **)a2;
    goto LABEL_76;
  }
  return a1;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_1E0E50E68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = off_1E0E50E68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::operator()(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned __int8 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 ***v7;
  uint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;

  v1 = atomic_load(*(unsigned __int8 **)(a1 + 8));
  if ((v1 & 1) == 0)
  {
    do
    {
      v4 = *(unsigned int **)(a1 + 16);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      if (v5 >= **(_DWORD **)(a1 + 24))
        break;
      v6 = v5;
      mlir::ParallelDiagnosticHandler::setOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(a1 + 32), v5);
      v7 = *(unsigned __int8 ****)(a1 + 40);
      v8 = **(_QWORD **)(a1 + 48);
      v9 = v7[1];
      v11 = **v7;
      v10 = (*v7)[1];
      if (v11 == v10)
      {
        v10 = **v7;
      }
      else
      {
        do
        {
          while (__ldaxr(v11))
          {
            __clrex();
            if (++v11 == v10)
              goto LABEL_12;
          }
        }
        while (__stlxr(1u, v11));
        LODWORD(v10) = (_DWORD)v11;
LABEL_12:
        v11 = **v7;
      }
      v13 = (unsigned int *)(v8 + 24 * v5);
      v14 = ((_DWORD)v10 - (_DWORD)v11);
      v15 = (uint64_t *)(*(_QWORD *)&v9[46][24 * v14] + 8 * *v13);
      v16 = mlir::detail::OpToOpPassAdaptor::runPipeline(v15, *(_QWORD *)(v8 + 24 * v6 + 8), *(mlir::detail::NestedAnalysisMap **)(v8 + 24 * v6 + 16), *(_BYTE *)v7[2], *(_DWORD *)(*v15 + 64), (std::recursive_mutex **)*v7[3], (uint64_t)v7[4]);
      atomic_store(0, &(**v7)[v14]);
      if (!v16)
        atomic_store(1u, *(unsigned __int8 **)(a1 + 8));
      mlir::ParallelDiagnosticHandler::eraseOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(a1 + 32));
      v3 = atomic_load(*(unsigned __int8 **)(a1 + 8));
    }
    while ((v3 & 1) == 0);
  }
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperati"
                     "onAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRConte"
                     "xtET_SD_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23r"
                                "unOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13Logical"
                                "ResultEPNS_11MLIRContextET_SD_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SD_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir23failableParallelForEachINSt3__111__wrap_iterIPZNS_6detail17OpToOpPassAdaptor23runOnOperationAsyncImplEbE8OpPMInfoEERZNS4_23runOnOperationAsyncImplEbE3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SD_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &>(mlir::MLIRContext *,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,std::__wrap_iter<mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::OpPMInfo *>,mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(BOOL)::$_0 &)::{lambda(void)#1},std::allocator<std::allocator>,void ()(void)>::target_type()
{
}

uint64_t *std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(char **)(v2 + 56);
    v4 = *(unsigned int *)(v2 + 64);
    if ((_DWORD)v4)
    {
      v5 = v3 - 8;
      v6 = 16 * v4;
      do
      {
        v7 = *(_QWORD *)&v5[v6];
        *(_QWORD *)&v5[v6] = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v6 -= 16;
      }
      while (v6);
      v3 = *(char **)(v2 + 56);
    }
    if (v3 != (char *)(v2 + 72))
      free(v3);
    llvm::deallocate_buffer(*(llvm **)(v2 + 32), (void *)(16 * *(unsigned int *)(v2 + 48)));
  }
  return result;
}

void sub_180569D2C()
{
  void *v0;

  operator delete(v0);
}

_QWORD *llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::detail::NestedAnalysisMap>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      v13 = result + 2;
      v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -4096;
        *v13 = -4096;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[2 * v11];
        do
        {
          *v10 = -4096;
          v10 += 2;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v24 = *(_QWORD *)v16;
        if ((*(_QWORD *)v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = *(_DWORD *)(a1 + 16) - 1;
          v26 = v25 & ((v24 >> 4) ^ (v24 >> 9));
          v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * v26);
          v27 = *v22;
          if (v24 != *v22)
          {
            v28 = 0;
            v29 = 1;
            while (v27 != -4096)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v27 == -8192;
              if (v30)
                v28 = v22;
              v31 = v26 + v29++;
              v26 = v31 & v25;
              v22 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v31 & v25));
              v27 = *v22;
              if (v24 == *v22)
                goto LABEL_24;
            }
            if (v28)
              v22 = v28;
          }
LABEL_24:
          *v22 = v24;
          v23 = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          v22[1] = v23;
          ++*(_DWORD *)(a1 + 8);
          std::unique_ptr<mlir::detail::NestedAnalysisMap>::reset[abi:nn180100]((uint64_t *)v16 + 1, 0);
        }
        v16 = (llvm *)((char *)v16 + 16);
      }
      while (v16 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_19;
    v18 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v10 = &result[2 * (v18 & 0x1FFFFFFFFFFFFFFELL)];
    v19 = result + 2;
    v20 = v18 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v19 - 2) = -4096;
      *v19 = -4096;
      v19 += 4;
      v20 -= 2;
    }
    while (v20);
    if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_19:
      v21 = &result[2 * v17];
      do
      {
        *v10 = -4096;
        v10 += 2;
      }
      while (v10 != v21);
    }
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::SmallVector<mlir::OpPassManager,1u>>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 < v4)
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        if ((_DWORD)v5)
        {
          v6 = 24 * v5;
          v7 = *(_QWORD *)a1 - 24;
          do
          {
            llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)(v7 + v6));
            v6 -= 24;
          }
          while (v6);
        }
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::grow(a1, v4);
        v5 = 0;
        v8 = *(unsigned int *)(a2 + 8);
        if (!*(_DWORD *)(a2 + 8))
          goto LABEL_18;
        goto LABEL_24;
      }
      if ((_DWORD)v5)
      {
        v13 = *(_QWORD *)a2;
        v14 = *(_QWORD *)a1;
        v15 = 24 * v5;
        do
        {
          llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v14, v13);
          v13 += 24;
          v14 += 24;
          v15 -= 24;
        }
        while (v15);
        v8 = *(unsigned int *)(a2 + 8);
        if (v5 == v8)
          goto LABEL_18;
LABEL_24:
        v17 = *(_QWORD *)a2;
        v18 = *(_QWORD *)a1;
        v19 = 24 * v5;
        v20 = 24 * v8;
        do
        {
          v21 = (_QWORD *)(v18 + v19);
          *v21 = v18 + v19 + 16;
          v21[1] = 0x100000000;
          if (*(_DWORD *)(v17 + v19 + 8))
            llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v21, v17 + v19);
          v18 += 24;
          v20 -= 24;
          v17 += 24;
        }
        while (v19 != v20);
        goto LABEL_18;
      }
      v5 = 0;
      v8 = *(unsigned int *)(a2 + 8);
      if (*(_DWORD *)(a2 + 8))
        goto LABEL_24;
LABEL_18:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    if ((_DWORD)v4)
    {
      v9 = *(_QWORD *)a2;
      v10 = *(_QWORD *)a1;
      v11 = 24 * v4;
      do
      {
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=(v10, v9);
        v9 += 24;
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
      v12 = (char **)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8));
      if (v12 == (char **)v10)
        goto LABEL_18;
    }
    else
    {
      v10 = *(_QWORD *)a1;
      v12 = (char **)(*(_QWORD *)a1 + 24 * v5);
      if (v12 == *(char ***)a1)
        goto LABEL_18;
    }
    do
      v12 = llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector(v12 - 3);
    while (v12 != (char **)v10);
    goto LABEL_18;
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<llvm::SmallVector<mlir::OpPassManager,1u>,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  unint64_t v14;

  v14 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v14);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = 24 * v7;
    v9 = v4;
    do
    {
      *v9 = v9 + 2;
      v9[1] = 0x100000000;
      if (v6[2])
        llvm::SmallVectorImpl<mlir::OpPassManager>::operator=((uint64_t)v9, (uint64_t)v6);
      v9 += 3;
      v6 += 6;
      v8 -= 24;
    }
    while (v8);
    v6 = *(_DWORD **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v10)
    {
      v11 = 6 * v10;
      v12 = v6 - 6;
      do
      {
        llvm::SmallVector<mlir::OpPassManager,1u>::~SmallVector((char **)&v12[v11]);
        v11 -= 6;
      }
      while (v11 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v13 = v14;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v13;
}

double llvm::SmallVectorImpl<mlir::OpPassManager>::assignRemote(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = &v4[8 * v5];
    do
    {
      v8 = *((_QWORD *)v6 - 1);
      v6 -= 8;
      v7 = v8;
      *(_QWORD *)v6 = 0;
      if (v8)
      {
        v9 = *(_QWORD **)(v7 + 40);
        if (v9)
        {
          v10 = *(_QWORD **)(v7 + 48);
          v11 = *(void **)(v7 + 40);
          if (v10 != v9)
          {
            do
            {
              v13 = *--v10;
              v12 = v13;
              *v10 = 0;
              if (v13)
                (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            }
            while (v10 != v9);
            v11 = *(void **)(v7 + 40);
          }
          *(_QWORD *)(v7 + 48) = v9;
          operator delete(v11);
        }
        if (*(char *)(v7 + 23) < 0)
          operator delete(*(void **)v7);
        operator delete((void *)v7);
      }
    }
    while (v6 != v4);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,mlir::OpPassManager *,mlir::OpPassManager *,mlir::OpPassManager *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
      {
        v8 = *(_QWORD **)(v7 + 40);
        if (v8)
        {
          v9 = *(_QWORD **)(v7 + 48);
          v10 = *(void **)(v7 + 40);
          if (v9 != v8)
          {
            do
            {
              v12 = *--v9;
              v11 = v12;
              *v9 = 0;
              if (v12)
                (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
            }
            while (v9 != v8);
            v10 = *(void **)(v7 + 40);
          }
          *(_QWORD *)(v7 + 48) = v8;
          operator delete(v10);
        }
        if (*(char *)(v7 + 23) < 0)
          operator delete(*(void **)v7);
        operator delete((void *)v7);
      }
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void mlir::detail::RecoveryReproducerContext::enable(mlir::detail::RecoveryReproducerContext *this)
{
  std::recursive_mutex *v3;
  llvm::CrashRecoveryContext *v4;
  unsigned __int8 v6;
  unsigned __int8 v7;
  void *v9;
  mlir::detail::RecoveryReproducerContext *v10;

  if (!atomic_load(mlir::detail::RecoveryReproducerContext::reproducerMutex))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerMutex, (void *(*)(void))llvm::object_creator<llvm::sys::SmartMutex<true>>::call, (void (*)(void *))llvm::object_deleter<llvm::sys::SmartMutex<true>>::call);
  v3 = (std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex[0];
  std::recursive_mutex::lock((std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex[0]);
  if (atomic_load(mlir::detail::RecoveryReproducerContext::reproducerSet))
  {
    if (*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32))
      goto LABEL_5;
LABEL_8:
    llvm::CrashRecoveryContext::Enable(v4);
    if ((v7 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  if (!*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32))
    goto LABEL_8;
LABEL_5:
  if ((v6 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  {
    llvm::sys::AddSignalHandler((llvm::sys *)mlir::detail::RecoveryReproducerContext::crashHandler, 0, v9);
  }
LABEL_9:
  if (!atomic_load(mlir::detail::RecoveryReproducerContext::reproducerSet))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  v10 = this;
  llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::insert((int64x2_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], (uint64_t *)&v10);
  std::recursive_mutex::unlock(v3);
}

void mlir::detail::RecoveryReproducerContext::disable(mlir::detail::RecoveryReproducerContext *this)
{
  std::recursive_mutex *v3;
  llvm::CrashRecoveryContext *v5;
  mlir::detail::RecoveryReproducerContext *v8;

  if (!atomic_load(mlir::detail::RecoveryReproducerContext::reproducerMutex))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerMutex, (void *(*)(void))llvm::object_creator<llvm::sys::SmartMutex<true>>::call, (void (*)(void *))llvm::object_deleter<llvm::sys::SmartMutex<true>>::call);
  v3 = (std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex[0];
  std::recursive_mutex::lock((std::recursive_mutex *)mlir::detail::RecoveryReproducerContext::reproducerMutex[0]);
  if (atomic_load(mlir::detail::RecoveryReproducerContext::reproducerSet))
  {
    v8 = this;
    v5 = (llvm::CrashRecoveryContext *)llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove((uint64_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], &v8);
    if (atomic_load(mlir::detail::RecoveryReproducerContext::reproducerSet))
      goto LABEL_5;
LABEL_8:
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
    if (*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32))
      goto LABEL_6;
LABEL_9:
    llvm::CrashRecoveryContext::Disable(v5);
    goto LABEL_6;
  }
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  v8 = this;
  v5 = (llvm::CrashRecoveryContext *)llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove((uint64_t *)mlir::detail::RecoveryReproducerContext::reproducerSet[0], &v8);
  if (!atomic_load(mlir::detail::RecoveryReproducerContext::reproducerSet))
    goto LABEL_8;
LABEL_5:
  if (!*(_DWORD *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32))
    goto LABEL_9;
LABEL_6:
  std::recursive_mutex::unlock(v3);
}

void mlir::detail::RecoveryReproducerContext::generate(mlir::detail::AsmStateImpl *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  size_t v8;
  const void *v9;
  size_t v10;
  void *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  const char **v17;
  llvm::raw_ostream *v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD v24[4];
  __int16 v25;
  mlir::detail::AsmStateImpl *v26[4];
  __int16 v27;
  uint64_t v28[4];
  __int16 v29;
  std::string __p;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  int v42;
  uint64_t v43;

  v36 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 1;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v35 = &unk_1E0E22B10;
  v43 = a2;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v35, 0, 0, 0);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v3 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 24);
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, char **))(*(_QWORD *)v3 + 48))(&v31, v3, &v32);
    v4 = v31;
    v5 = v38 - (_QWORD)v39;
    if (v31)
    {
      if (v5 > 0x18)
      {
        v39 += 25;
        v6 = (llvm::raw_ostream *)&v35;
      }
      else
      {
        v4 = v31;
      }
      v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v10 = v8;
      v11 = (void *)*((_QWORD *)v6 + 4);
      if (v8 <= *((_QWORD *)v6 + 3) - (_QWORD)v11)
      {
        if (v8)
        {
          memcpy(v11, v9, v8);
          *((_QWORD *)v6 + 4) += v10;
        }
      }
      else
      {
        v6 = llvm::raw_ostream::write(v6, (const char *)v9, v8);
      }
      v12 = (_BYTE *)*((_QWORD *)v6 + 4);
      if (*((_BYTE **)v6 + 3) == v12)
      {
      }
      else
      {
        *v12 = 96;
        ++*((_QWORD *)v6 + 4);
      }
      v28[0] = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 48) + 8);
      v25 = 773;
      v24[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v28);
      v24[1] = v13;
      v24[2] = "(";
      v26[0] = (mlir::detail::AsmStateImpl *)v24;
      v26[2] = a1;
      v27 = 1026;
      v28[0] = (uint64_t)v26;
      v28[2] = (uint64_t)")";
      v29 = 770;
      llvm::Twine::str((llvm::Twine *)v28, &__p);
      v14 = *((_QWORD *)a1 + 3);
      mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v28);
      mlir::AsmState::AsmState(v26, v14, v28, 0, 0);
      v15 = operator new(0x30uLL);
      v15[31] = 15;
      *(_QWORD *)v15 = off_1E0E52D38;
      strcpy(v15 + 8, "mlir_reproducer");
      *((_QWORD *)v15 + 4) = &__p;
      *((_QWORD *)v15 + 5) = a1;
      v28[0] = (uint64_t)v15;
      mlir::AsmState::attachResourcePrinter((uint64_t *)v26, v28);
      v16 = v28[0];
      v28[0] = 0;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = (const char **)*((_QWORD *)a1 + 3);
      v18 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
      mlir::Operation::print(v17, v18, (mlir::AsmState *)v26);
      mlir::AsmState::~AsmState(v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      if (v5 > 0x1F)
      {
        qmemcpy(v39, "failed to create output stream: ", 32);
        v39 += 32;
        v7 = (llvm::raw_ostream *)&v35;
      }
      else
      {
        v7 = llvm::raw_ostream::write((llvm::raw_ostream *)&v35, "failed to create output stream: ", 0x20uLL);
      }
      if (v34 >= 0)
        v19 = (const char *)&v32;
      else
        v19 = v32;
      if (v34 >= 0)
        v20 = HIBYTE(v34);
      else
        v20 = v33;
      llvm::raw_ostream::write(v7, v19, v20);
    }
    v21 = v31;
    v31 = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v35);
  }
  else
  {
    v22 = (uint64_t *)std::__throw_bad_function_call[abi:nn180100]();
    llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove(v22, v23);
  }
}

uint64_t llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::remove(uint64_t *a1, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *((_DWORD *)a1 + 4);
    if (v3)
    {
      v4 = *a1;
      v5 = v3 - 1;
      LODWORD(v6) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
      v7 = (uint64_t *)(*a1 + 8 * v6);
      v8 = *v7;
      if (*a2 == *v7)
      {
LABEL_4:
        *v7 = -8192;
        v9 = v2 - 1;
        v12 = *((_DWORD *)a1 + 8);
        v11 = a1 + 4;
        v10 = v12;
        v13 = *((_DWORD *)a1 + 3) + 1;
        *((_DWORD *)a1 + 2) = v9;
        *((_DWORD *)a1 + 3) = v13;
        v14 = (_QWORD *)a1[3];
        v15 = &v14[v12];
        if (v12)
        {
          v16 = 8 * v10;
          while (*v14 != *a2)
          {
            ++v14;
            v16 -= 8;
            if (!v16)
            {
              v14 = v15;
              break;
            }
          }
        }
        v17 = v14 + 1;
        v18 = (char *)v15 - (char *)(v14 + 1);
        if (v15 == v14 + 1)
        {
          *v11 = v10 - 1;
          return 1;
        }
        goto LABEL_21;
      }
      v25 = 1;
      while (v8 != -4096)
      {
        v26 = v6 + v25++;
        v6 = v26 & v5;
        v8 = *(_QWORD *)(v4 + 8 * v6);
        if (*a2 == v8)
        {
          v7 = (uint64_t *)(v4 + 8 * v6);
          goto LABEL_4;
        }
      }
    }
    return 0;
  }
  v21 = *((_DWORD *)a1 + 8);
  v11 = a1 + 4;
  v20 = v21;
  v22 = a1[3];
  v23 = (_QWORD *)(v22 + 8 * v21);
  if (v21)
  {
    v24 = 8 * v20;
    v14 = (_QWORD *)a1[3];
    while (*v14 != *a2)
    {
      ++v14;
      v24 -= 8;
      if (!v24)
      {
        v14 = v23;
        break;
      }
    }
    if (v20 == ((uint64_t)v14 - v22) >> 3)
      return 0;
  }
  else
  {
    v14 = (_QWORD *)a1[3];
    if (!v20)
      return 0;
  }
  v17 = v14 + 1;
  v18 = (char *)v23 - (char *)(v14 + 1);
  if (v23 != v14 + 1)
  {
LABEL_21:
    memmove(v14, v17, v18);
    LODWORD(v20) = *v11;
  }
  *v11 = v20 - 1;
  return 1;
}

uint64_t llvm::SetVector<mlir::detail::RecoveryReproducerContext *,llvm::SmallVector<mlir::detail::RecoveryReproducerContext *,1u>,llvm::DenseSet<mlir::detail::RecoveryReproducerContext *,llvm::DenseMapInfo<mlir::detail::RecoveryReproducerContext *,void>>,1u>::insert(int64x2_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  _BYTE v17[31];

  if (!a1->i32[2])
  {
    v7 = (uint64_t **)&a1[1].i64[1];
    v8 = (_QWORD *)a1[1].i64[1];
    v9 = a1[2].u32[0];
    v10 = v8;
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      v10 = (_QWORD *)a1[1].i64[1];
      while (*v10 != *a2)
      {
        ++v10;
        v11 -= 8;
        if (!v11)
        {
          v10 = &v8[v9];
          break;
        }
      }
    }
    if (v9 != v10 - v8)
      return 0;
    if (v9 >= a1[2].i32[1])
    {
      v15 = (uint64_t **)&a1[1].i64[1];
      v16 = *a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[1].i64[1], &a1[2].u64[1], v9 + 1, 8);
      v7 = v15;
      *(_QWORD *)(a1[1].i64[1] + 8 * a1[2].u32[0]) = v16;
      v12 = a1[2].i32[0] + 1;
      a1[2].i32[0] = v12;
      if (v12 >= 2)
      {
LABEL_15:
        v13 = *v7;
        v14 = 8 * v12;
        do
        {
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, v13++, (uint64_t)v17);
          v14 -= 8;
        }
        while (v14);
      }
    }
    else
    {
      v8[v9] = *a2;
      v12 = a1[2].i32[0] + 1;
      a1[2].i32[0] = v12;
      if (v12 >= 2)
        goto LABEL_15;
    }
    return 1;
  }
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, a2, (uint64_t)v17);
  if (v17[16])
  {
    v4 = *a2;
    v5 = a1[2].u32[0];
    if (v5 >= a1[2].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&a1[1].i64[1], &a1[2].u64[1], v5 + 1, 8);
      LODWORD(v5) = a1[2].i32[0];
    }
    *(_QWORD *)(a1[1].i64[1] + 8 * v5) = v4;
    ++a1[2].i32[0];
    return 1;
  }
  return 0;
}

void mlir::detail::RecoveryReproducerContext::crashHandler(mlir::detail::RecoveryReproducerContext *this, void *a2)
{
  uint64_t v3;
  mlir::detail::AsmStateImpl **v4;
  mlir::detail::AsmStateImpl **v5;
  mlir::detail::AsmStateImpl *v6;
  char *v7;
  void ***v8;
  char *v9;
  __int128 v10;
  char *v11;
  void ***v12;
  char *v13;
  __int128 v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  void *v27[2];
  uint64_t v28;
  void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!atomic_load(mlir::detail::RecoveryReproducerContext::reproducerSet))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)mlir::detail::RecoveryReproducerContext::reproducerSet, (void *(*)(void))llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call, (void (*)(void *))llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call);
  v3 = *(unsigned int *)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 32);
  if ((_DWORD)v3)
  {
    v4 = *(mlir::detail::AsmStateImpl ***)(mlir::detail::RecoveryReproducerContext::reproducerSet[0] + 24);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      v27[0] = 0;
      v27[1] = 0;
      v28 = 0;
      mlir::detail::RecoveryReproducerContext::generate(v6, (uint64_t)v27);
      mlir::emitError(*(_QWORD *)(*((_QWORD *)v6 + 3) + 24), (uint64_t)&v33);
      if (v33)
      {
        LODWORD(v29) = 3;
        v30 = "A signal was caught while processing the MLIR module:";
        v31 = 53;
        v7 = (char *)v35;
        if (v36 >= v37)
        {
          v23 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            v25 = (char *)&v29 - (_BYTE *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v23, 24);
            v7 = (char *)v35;
            v8 = (void ***)((char *)v35 + v25);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v23, 24);
            v8 = &v29;
            v7 = (char *)v35;
          }
        }
        else
        {
          v8 = &v29;
        }
        v9 = &v7[24 * v36];
        v10 = *(_OWORD *)v8;
        *((_QWORD *)v9 + 2) = v8[2];
        *(_OWORD *)v9 = v10;
        ++v36;
        if (v33)
        {
          v32 = 260;
          v29 = v27;
          mlir::Diagnostic::operator<<((uint64_t)&v34, (const void ***)&v29);
          if (v33)
          {
            LODWORD(v29) = 3;
            v30 = "; marking pass as failed";
            v31 = 24;
            v11 = (char *)v35;
            if (v36 >= v37)
            {
              v24 = v36 + 1;
              if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
              {
                v26 = (char *)&v29 - (_BYTE *)v35;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
                v11 = (char *)v35;
                v12 = (void ***)((char *)v35 + v26);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v24, 24);
                v12 = &v29;
                v11 = (char *)v35;
              }
            }
            else
            {
              v12 = &v29;
            }
            v13 = &v11[24 * v36];
            v14 = *(_OWORD *)v12;
            *((_QWORD *)v13 + 2) = v12[2];
            *(_OWORD *)v13 = v14;
            ++v36;
            if (v33)
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
          }
        }
      }
      if (v43)
      {
        v15 = (_QWORD **)__p;
        if (__p)
        {
          v16 = v42;
          v17 = __p;
          if (v42 != __p)
          {
            do
              v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
            while (v16 != v15);
            v17 = __p;
          }
          v42 = v15;
          operator delete(v17);
        }
        v18 = v39;
        if (v39)
        {
          v19 = v40;
          v20 = v39;
          if (v40 != v39)
          {
            do
            {
              v22 = (void *)*--v19;
              v21 = v22;
              *v19 = 0;
              if (v22)
                operator delete[](v21);
            }
            while (v19 != v18);
            v20 = v39;
          }
          v40 = v18;
          operator delete(v20);
        }
        if (v35 != v38)
          free(v35);
      }
      if (SHIBYTE(v28) < 0)
        operator delete(v27[0]);
      ++v4;
    }
    while (v4 != v5);
  }
}

void mlir::detail::PassCrashReproducerGenerator::~PassCrashReproducerGenerator(mlir::detail::PassCrashReproducerGenerator::Impl **this)
{
  mlir::detail::PassCrashReproducerGenerator::Impl *v2;

  v2 = *this;
  *this = 0;
  if (v2)
    mlir::detail::PassCrashReproducerGenerator::Impl::~Impl(v2);
}

void mlir::detail::PassCrashReproducerGenerator::prepareReproducerFor(uint64_t a1, mlir::Pass **a2, mlir::Pass **a3, uint64_t a4)
{
  mlir::Pass **v6;
  mlir::Pass *v7;
  mlir::Pass *v8;
  mlir::Pass *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  char v15;
  uint64_t v16;
  int v17;
  void **v18;
  void *__p[3];
  uint64_t v20;

  v20 = a4;
  memset(__p, 0, sizeof(__p));
  v11 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v10 = &unk_1E0E22B10;
  v18 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v10, 0, 0, 0);
  if (a2 != a3)
  {
    v7 = *a2;
    v6 = a2 + 1;
    mlir::Pass::printAsTextualPipeline(v7, (llvm::raw_ostream *)&v10);
    while (v6 != a3)
    {
      while ((unint64_t)(v13 - (_QWORD)v14) > 1)
      {
        *v14++ = 8236;
        v8 = *v6++;
        mlir::Pass::printAsTextualPipeline(v8, (llvm::raw_ostream *)&v10);
        if (v6 == a3)
          goto LABEL_7;
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v10, ", ", 2uLL);
      v9 = *v6++;
      mlir::Pass::printAsTextualPipeline(v9, (llvm::raw_ostream *)&v10);
    }
  }
LABEL_7:
  std::make_unique[abi:nn180100]<mlir::detail::RecoveryReproducerContext,std::string &,mlir::Operation *&,std::function<std::unique_ptr<mlir::PassManager::ReproducerStream> ()(std::string &)> &,BOOL &>((uint64_t)v18, &v20);
}

void mlir::detail::PassCrashReproducerGenerator::finalize(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v9;
  void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  mlir::detail::AsmStateImpl *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void ***v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void ***v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int64x2_t **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void ***v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void ***v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  int64x2_t **v71;
  uint64_t v72;
  int64x2_t *v73;
  unint64_t v74;
  int64x2_t *v75;
  unint64_t v76;
  int64x2_t *v77;
  int64x2_t v78;
  uint64_t v79;
  int64x2_t *v80;
  _QWORD **v81;
  _QWORD **v82;
  void *v83;
  _QWORD *v84;
  _QWORD *v85;
  void *v86;
  void *v87;
  void *v88;
  int64x2_t *v89;
  unint64_t v90;
  int64x2_t *v91;
  unint64_t v92;
  int64x2_t *v93;
  int64x2_t v94;
  uint64_t v95;
  int64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  unint64_t v105;
  BOOL v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  BOOL v110;
  int64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  const char *v120;
  uint64_t v121;
  void *__src;
  uint64_t v123;
  _BYTE v124[96];
  __int128 v125;
  uint64_t v126;
  __int128 __p;
  uint64_t v128;
  unsigned __int8 v129;
  void **v130;
  const char *v131;
  uint64_t v132;
  void *__dst;
  uint64_t v134;
  _BYTE v135[96];
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  char v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 48);
  if (!(_DWORD)v4)
    return;
  if (a3)
  {
    v5 = 8 * v4;
    v6 = *(_QWORD *)(v3 + 40) - 8;
    do
    {
      v7 = *(_QWORD *)(v6 + v5);
      *(_QWORD *)(v6 + v5) = 0;
      if (v7)
      {
        mlir::Operation::erase(*(mlir::Operation **)(v7 + 24));
        mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v7);
        if (*(char *)(v7 + 23) < 0)
          operator delete(*(void **)v7);
        operator delete((void *)v7);
      }
      v5 -= 8;
    }
    while (v5);
    *(_DWORD *)(v3 + 48) = 0;
    return;
  }
  mlir::emitError(*(_QWORD *)(a2 + 24), (uint64_t)&v119);
  v9 = v119;
  if (v119)
  {
    LODWORD(v130) = 3;
    v131 = "Failures have been detected while processing an MLIR pass pipeline";
    v132 = 66;
    v10 = &v130;
    v11 = (char *)__src;
    if (v123 >= HIDWORD(v123))
    {
      v102 = v123 + 1;
      if (__src <= &v130 && (char *)__src + 24 * v123 > (char *)&v130)
      {
        v111 = (char *)&v130 - (_BYTE *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v124, v102, 24);
        v11 = (char *)__src;
        v10 = (void ***)((char *)__src + v111);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v124, v102, 24);
        v10 = &v130;
        v11 = (char *)__src;
      }
    }
    v12 = &v11[24 * v123];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = v10[2];
    *(_OWORD *)v12 = v13;
    LODWORD(v123) = v123 + 1;
    v9 = v119;
  }
  v130 = v9;
  LOBYTE(v131) = 0;
  v140 = 0;
  if (v129)
  {
    v131 = v120;
    v14 = v123;
    LODWORD(v132) = v121;
    __dst = v135;
    v134 = 0x400000000;
    if (!(_DWORD)v123)
    {
      v15 = 1;
      goto LABEL_26;
    }
    if (__src != v124)
    {
      __dst = __src;
      v134 = v123;
      __src = v124;
      HIDWORD(v123) = 0;
      v15 = 1;
LABEL_25:
      LODWORD(v123) = 0;
LABEL_26:
      v136 = v125;
      v125 = 0uLL;
      v138 = __p;
      v137 = v126;
      v139 = v128;
      v126 = 0;
      __p = 0uLL;
      v128 = 0;
      v140 = 1;
      if (v15)
      {
        if (__src != v124)
          free(__src);
        v129 = 0;
      }
      goto LABEL_30;
    }
    if (v123 < 5)
    {
      v16 = v123;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v135, v123, 24);
      v16 = v123;
      if (!(_DWORD)v123)
        goto LABEL_24;
    }
    memcpy(__dst, __src, 24 * v16);
LABEL_24:
    LODWORD(v134) = v14;
    v15 = v129;
    goto LABEL_25;
  }
LABEL_30:
  mlir::InFlightDiagnostic::abandon(&v119);
  if (v119)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v119);
  if (v129)
  {
    v17 = (_QWORD **)__p;
    if ((_QWORD)__p)
    {
      v18 = (_QWORD **)*((_QWORD *)&__p + 1);
      v19 = (void *)__p;
      if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = (void *)__p;
      }
      *((_QWORD *)&__p + 1) = v17;
      operator delete(v19);
    }
    v20 = (_QWORD *)v125;
    if ((_QWORD)v125)
    {
      v21 = (_QWORD *)*((_QWORD *)&v125 + 1);
      v22 = (void *)v125;
      if (*((_QWORD *)&v125 + 1) != (_QWORD)v125)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = (void *)v125;
      }
      *((_QWORD *)&v125 + 1) = v20;
      operator delete(v22);
    }
    if (__src != v124)
      free(__src);
  }
  v25 = *a1;
  if (!*(_BYTE *)(*a1 + 32))
  {
    v116 = 0;
    v117 = 0;
    v118 = 0;
    mlir::detail::RecoveryReproducerContext::generate(**(mlir::detail::AsmStateImpl ***)(v25 + 40), (uint64_t)&v116);
    v50 = mlir::Diagnostic::attachNote((uint64_t *)&v131, 0, 0);
    v51 = v50;
    v53 = v50 + 16;
    v52 = *(_QWORD *)(v50 + 16);
    LODWORD(v119) = 3;
    v120 = "Pipeline failed while executing [";
    v121 = 33;
    v54 = *(unsigned int *)(v50 + 24);
    v55 = &v119;
    if (v54 >= *(_DWORD *)(v50 + 28))
    {
      v107 = v54 + 1;
      v108 = v52 + 24 * v54 > (unint64_t)&v119;
      if (v52 <= (unint64_t)&v119 && v108)
      {
        v114 = (char *)&v119 - v52;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v50 + 16, (void *)(v50 + 32), v107, 24);
        v52 = *(_QWORD *)(v51 + 16);
        v55 = (void ***)&v114[v52];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v50 + 16, (void *)(v50 + 32), v107, 24);
        v52 = *(_QWORD *)(v51 + 16);
        v55 = &v119;
      }
    }
    v56 = v52 + 24 * *(unsigned int *)(v51 + 24);
    v57 = *(_OWORD *)v55;
    *(_QWORD *)(v56 + 16) = v55[2];
    *(_OWORD *)v56 = v57;
    ++*(_DWORD *)(v51 + 24);
    v58 = *(unsigned int *)(*a1 + 136);
    if ((_DWORD)v58)
    {
      v59 = *(uint64_t **)(*a1 + 128);
      formatPassOpReproducerMessage(v51, *v59, v59[1]);
      if ((_DWORD)v58 != 1)
      {
        v60 = &v59[2 * v58];
        v61 = v59 + 2;
        do
        {
          LOWORD(v123) = 261;
          v119 = (void **)", ";
          v120 = (const char *)2;
          mlir::Diagnostic::operator<<(v51, (const void ***)&v119);
          v62 = *v61;
          v63 = v61[1];
          v61 += 2;
          formatPassOpReproducerMessage(v51, v62, v63);
        }
        while (v61 != v60);
      }
    }
    LODWORD(v119) = 3;
    v120 = "]: ";
    v121 = 3;
    v64 = *(unsigned int *)(v51 + 24);
    v65 = *(_QWORD *)(v51 + 16);
    v66 = &v119;
    if (v64 >= *(_DWORD *)(v51 + 28))
    {
      v109 = v64 + 1;
      v110 = v65 + 24 * v64 > (unint64_t)&v119;
      if (v65 <= (unint64_t)&v119 && v110)
      {
        v115 = (char *)&v119 - v65;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v53, (void *)(v51 + 32), v109, 24);
        v65 = *(_QWORD *)(v51 + 16);
        v66 = (void ***)&v115[v65];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v53, (void *)(v51 + 32), v109, 24);
        v65 = *(_QWORD *)(v51 + 16);
        v66 = &v119;
      }
    }
    v67 = v65 + 24 * *(unsigned int *)(v51 + 24);
    v68 = *(_OWORD *)v66;
    *(_QWORD *)(v67 + 16) = v66[2];
    *(_OWORD *)v67 = v68;
    ++*(_DWORD *)(v51 + 24);
    LOWORD(v123) = 260;
    v119 = &v116;
    mlir::Diagnostic::operator<<(v51, (const void ***)&v119);
    v69 = *a1;
    v70 = *(_DWORD *)(*a1 + 112);
    if (v70 || *(_DWORD *)(v69 + 116))
    {
      v71 = (int64x2_t **)(v69 + 104);
      v72 = *(unsigned int *)(v69 + 120);
      if (v72 <= 4 * v70 || v72 < 0x41)
      {
        if ((_DWORD)v72)
        {
          v89 = *v71;
          v90 = (v72 - 1) & 0xFFFFFFFFFFFFFFFLL;
          v91 = *v71;
          if (v90 < 3)
            goto LABEL_109;
          v92 = v90 + 1;
          v91 = &v89[v92 & 0x1FFFFFFFFFFFFFFCLL];
          v93 = v89 + 2;
          v94 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
          v95 = v92 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v93[-2] = v94;
            v93[-1] = v94;
            *v93 = v94;
            v93[1] = v94;
            v93 += 4;
            v95 -= 4;
          }
          while (v95);
          if (v92 != (v92 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_109:
            v96 = &v89[v72];
            do
            {
              v91->i64[0] = -4096;
              v91->i64[1] = -4096;
              ++v91;
            }
            while (v91 != v96);
          }
        }
        *(_QWORD *)(v69 + 112) = 0;
      }
      else
      {
        llvm::DenseMap<std::pair<mlir::Pass *,mlir::Operation *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::Pass *,mlir::Operation *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::Pass *,mlir::Operation *>>>::shrink_and_clear((uint64_t)v71);
      }
    }
    *(_DWORD *)(v69 + 136) = 0;
    v97 = *a1;
    v98 = *(unsigned int *)(*a1 + 48);
    if ((_DWORD)v98)
    {
      v99 = 8 * v98;
      v100 = *(_QWORD *)(v97 + 40) - 8;
      do
      {
        v101 = *(_QWORD *)(v100 + v99);
        *(_QWORD *)(v100 + v99) = 0;
        if (v101)
        {
          mlir::Operation::erase(*(mlir::Operation **)(v101 + 24));
          mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v101);
          if (*(char *)(v101 + 23) < 0)
            operator delete(*(void **)v101);
          operator delete((void *)v101);
        }
        v99 -= 8;
      }
      while (v99);
    }
    *(_DWORD *)(v97 + 48) = 0;
    if ((SHIBYTE(v118) & 0x80000000) == 0)
      goto LABEL_86;
    goto LABEL_85;
  }
  v26 = *(mlir::detail::AsmStateImpl **)(*(_QWORD *)(v25 + 40) + 8 * *(unsigned int *)(v25 + 48) - 8);
  v116 = 0;
  v117 = 0;
  v118 = 0;
  mlir::detail::RecoveryReproducerContext::generate(v26, (uint64_t)&v116);
  v27 = mlir::Diagnostic::attachNote((uint64_t *)&v131, 0, 0);
  v28 = v27;
  v30 = v27 + 16;
  v29 = *(_QWORD *)(v27 + 16);
  LODWORD(v119) = 3;
  v120 = "Pipeline failed while executing ";
  v121 = 32;
  v31 = *(unsigned int *)(v27 + 24);
  v32 = &v119;
  if (v31 >= *(_DWORD *)(v27 + 28))
  {
    v103 = v31 + 1;
    v104 = v29 + 24 * v31 > (unint64_t)&v119;
    if (v29 <= (unint64_t)&v119 && v104)
    {
      v112 = (char *)&v119 - v29;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 16, (void *)(v27 + 32), v103, 24);
      v29 = *(_QWORD *)(v28 + 16);
      v32 = (void ***)&v112[v29];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 16, (void *)(v27 + 32), v103, 24);
      v29 = *(_QWORD *)(v28 + 16);
      v32 = &v119;
    }
  }
  v33 = v29 + 24 * *(unsigned int *)(v28 + 24);
  v34 = *(_OWORD *)v32;
  *(_QWORD *)(v33 + 16) = v32[2];
  *(_OWORD *)v33 = v34;
  ++*(_DWORD *)(v28 + 24);
  v35 = *(_QWORD *)(*a1 + 128) + 16 * *(unsigned int *)(*a1 + 136);
  formatPassOpReproducerMessage(v28, *(_QWORD *)(v35 - 16), *(_QWORD *)(v35 - 8));
  LODWORD(v119) = 3;
  v120 = ": ";
  v121 = 2;
  v36 = *(unsigned int *)(v28 + 24);
  v37 = *(_QWORD *)(v28 + 16);
  v38 = &v119;
  if (v36 >= *(_DWORD *)(v28 + 28))
  {
    v105 = v36 + 1;
    v106 = v37 + 24 * v36 > (unint64_t)&v119;
    if (v37 <= (unint64_t)&v119 && v106)
    {
      v113 = (char *)&v119 - v37;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v30, (void *)(v28 + 32), v105, 24);
      v37 = *(_QWORD *)(v28 + 16);
      v38 = (void ***)&v113[v37];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v30, (void *)(v28 + 32), v105, 24);
      v37 = *(_QWORD *)(v28 + 16);
      v38 = &v119;
    }
  }
  v39 = v37 + 24 * *(unsigned int *)(v28 + 24);
  v40 = *(_OWORD *)v38;
  *(_QWORD *)(v39 + 16) = v38[2];
  *(_OWORD *)v39 = v40;
  ++*(_DWORD *)(v28 + 24);
  LOWORD(v123) = 260;
  v119 = &v116;
  mlir::Diagnostic::operator<<(v28, (const void ***)&v119);
  v41 = *a1;
  v42 = *(unsigned int *)(*a1 + 48);
  v43 = (_DWORD *)*a1;
  if ((_DWORD)v42)
  {
    v44 = 8 * v42;
    v45 = *(_QWORD *)(v41 + 40) - 8;
    do
    {
      v46 = *(_QWORD *)(v45 + v44);
      *(_QWORD *)(v45 + v44) = 0;
      if (v46)
      {
        mlir::Operation::erase(*(mlir::Operation **)(v46 + 24));
        mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v46);
        if (*(char *)(v46 + 23) < 0)
          operator delete(*(void **)v46);
        operator delete((void *)v46);
      }
      v44 -= 8;
    }
    while (v44);
    v43 = (_DWORD *)*a1;
  }
  *(_DWORD *)(v41 + 48) = 0;
  v47 = v43[28];
  if (v47 || v43[29])
  {
    v48 = (int64x2_t **)(v43 + 26);
    v49 = v43[30];
    if (v49 > 4 * v47 && v49 >= 0x41)
    {
      llvm::DenseMap<std::pair<mlir::Pass *,mlir::Operation *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::Pass *,mlir::Operation *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::Pass *,mlir::Operation *>>>::shrink_and_clear((uint64_t)v48);
      v43[34] = 0;
      if (SHIBYTE(v118) < 0)
        goto LABEL_85;
      goto LABEL_86;
    }
    if ((_DWORD)v49)
    {
      v73 = *v48;
      v74 = (v49 - 1) & 0xFFFFFFFFFFFFFFFLL;
      v75 = *v48;
      if (v74 < 3)
        goto LABEL_81;
      v76 = v74 + 1;
      v75 = &v73[v76 & 0x1FFFFFFFFFFFFFFCLL];
      v77 = v73 + 2;
      v78 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v79 = v76 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v77[-2] = v78;
        v77[-1] = v78;
        *v77 = v78;
        v77[1] = v78;
        v77 += 4;
        v79 -= 4;
      }
      while (v79);
      if (v76 != (v76 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_81:
        v80 = &v73[v49];
        do
        {
          v75->i64[0] = -4096;
          v75->i64[1] = -4096;
          ++v75;
        }
        while (v75 != v80);
      }
    }
    *((_QWORD *)v43 + 14) = 0;
  }
  v43[34] = 0;
  if (SHIBYTE(v118) < 0)
LABEL_85:
    operator delete(v116);
LABEL_86:
  if (v130)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v130);
  if (v140)
  {
    v81 = (_QWORD **)v138;
    if ((_QWORD)v138)
    {
      v82 = (_QWORD **)*((_QWORD *)&v138 + 1);
      v83 = (void *)v138;
      if (*((_QWORD *)&v138 + 1) != (_QWORD)v138)
      {
        do
          v82 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v82 - 1);
        while (v82 != v81);
        v83 = (void *)v138;
      }
      *((_QWORD *)&v138 + 1) = v81;
      operator delete(v83);
    }
    v84 = (_QWORD *)v136;
    if ((_QWORD)v136)
    {
      v85 = (_QWORD *)*((_QWORD *)&v136 + 1);
      v86 = (void *)v136;
      if (*((_QWORD *)&v136 + 1) != (_QWORD)v136)
      {
        do
        {
          v88 = (void *)*--v85;
          v87 = v88;
          *v85 = 0;
          if (v88)
            operator delete[](v87);
        }
        while (v85 != v84);
        v86 = (void *)v136;
      }
      *((_QWORD *)&v136 + 1) = v84;
      operator delete(v86);
    }
    if (__dst != v135)
      free(__dst);
  }
}

uint64_t formatPassOpReproducerMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void ***v9;
  uint64_t v10;
  __int128 v11;
  const void **v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t result;
  char v36;
  uint64_t v37;
  unint64_t v38;
  const void ***v39;
  uint64_t v40;
  __int128 v41;
  const void **AttrData;
  const char *v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  BOOL v51;
  unint64_t v52;
  BOOL v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  const void **canMapOperands;
  const char *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;

  v7 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  LODWORD(canMapOperands) = 3;
  v61 = 1;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &canMapOperands;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v44 = v8 + 1;
    v45 = v6 + 24 * v8 > (unint64_t)&canMapOperands;
    if (v6 <= (unint64_t)&canMapOperands && v45)
    {
      v54 = (char *)&canMapOperands - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v44, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = (const void ***)&v54[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v44, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = &canMapOperands;
    }
  }
  v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = v9[2];
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  v12 = (const void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v62 = 261;
  canMapOperands = v12;
  v60 = v13;
  v14 = mlir::Diagnostic::operator<<(a1, &canMapOperands);
  v15 = v14;
  v17 = v14 + 16;
  v16 = *(_QWORD *)(v14 + 16);
  LODWORD(v63) = 3;
  v65 = 5;
  v18 = *(unsigned int *)(v14 + 24);
  v19 = (char *)&v63;
  if (v18 >= *(_DWORD *)(v14 + 28))
  {
    v46 = v18 + 1;
    v47 = v16 + 24 * v18 > (unint64_t)&v63;
    if (v16 <= (unint64_t)&v63 && v47)
    {
      v55 = (char *)&v63 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 16, (void *)(v14 + 32), v46, 24);
      v16 = *(_QWORD *)(v15 + 16);
      v19 = &v55[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v14 + 16, (void *)(v14 + 32), v46, 24);
      v16 = *(_QWORD *)(v15 + 16);
      v19 = (char *)&v63;
    }
  }
  v20 = v16 + 24 * *(unsigned int *)(v15 + 24);
  v21 = *(_OWORD *)v19;
  *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 + 2);
  *(_OWORD *)v20 = v21;
  v22 = *(_DWORD *)(v15 + 28);
  v23 = (*(_DWORD *)(v15 + 24) + 1);
  *(_DWORD *)(v15 + 24) = v23;
  LODWORD(v63) = 3;
  v64 = "'";
  v65 = 1;
  v24 = *(_QWORD *)(v15 + 16);
  v25 = (char *)&v63;
  if (v23 >= v22)
  {
    v48 = v23 + 1;
    v49 = v24 + 24 * v23 > (unint64_t)&v63;
    if (v24 <= (unint64_t)&v63 && v49)
    {
      v56 = (char *)&v63 - v24;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(v15 + 32), v48, 24);
      v24 = *(_QWORD *)(v15 + 16);
      v25 = &v56[v24];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17, (void *)(v15 + 32), v48, 24);
      v24 = *(_QWORD *)(v15 + 16);
      v25 = (char *)&v63;
    }
  }
  v26 = v24 + 24 * *(unsigned int *)(v15 + 24);
  v27 = *(_OWORD *)v25;
  *(_QWORD *)(v26 + 16) = *((_QWORD *)v25 + 2);
  *(_OWORD *)v26 = v27;
  ++*(_DWORD *)(v15 + 24);
  v28 = mlir::Diagnostic::operator<<(v15, *(_QWORD *)(a3 + 48));
  v29 = v28 + 16;
  v30 = *(_QWORD *)(v28 + 16);
  LODWORD(v63) = 3;
  v64 = "' operation";
  v65 = 11;
  v31 = *(unsigned int *)(v28 + 24);
  v32 = (char *)&v63;
  if (v31 >= *(_DWORD *)(v28 + 28))
  {
    v50 = v31 + 1;
    v51 = v30 + 24 * v31 > (unint64_t)&v63;
    if (v30 <= (unint64_t)&v63 && v51)
    {
      v57 = (char *)&v63 - v30;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v29, (void *)(v28 + 32), v50, 24);
      v30 = *(_QWORD *)(v28 + 16);
      v32 = &v57[v30];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v29, (void *)(v28 + 32), v50, 24);
      v30 = *(_QWORD *)(v28 + 16);
      v32 = (char *)&v63;
    }
  }
  v33 = v30 + 24 * *(unsigned int *)(v28 + 24);
  v34 = *(_OWORD *)v32;
  *(_QWORD *)(v33 + 16) = *((_QWORD *)v32 + 2);
  *(_OWORD *)v33 = v34;
  ++*(_DWORD *)(v28 + 24);
  result = mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor(a3);
  if (!result)
    goto LABEL_9;
  if (*(_BYTE *)(a3 + 47) && (result = mlir::Operation::getInherentAttr(a3, (uint64_t)"sym_name", 8), v36))
  {
    if (!result)
    {
LABEL_9:
      v63 = 0;
      v64 = (const char *)result;
      return result;
    }
  }
  else if (!mlir::DictionaryAttr::contains(a3 + 56, "sym_name", 8uLL))
  {
    result = 0;
    v63 = 0;
    v64 = 0;
    return result;
  }
  result = mlir::OpInterface<mlir::SymbolOpInterface,mlir::detail::SymbolOpInterfaceInterfaceTraits>::getInterfaceFor(a3);
  v63 = a3;
  v64 = (const char *)result;
  if (a3)
  {
    LODWORD(canMapOperands) = 3;
    v60 = ": @";
    v61 = 3;
    v37 = *(unsigned int *)(a1 + 24);
    v38 = *(_QWORD *)(a1 + 16);
    v39 = &canMapOperands;
    if (v37 >= *(_DWORD *)(a1 + 28))
    {
      v52 = v37 + 1;
      v53 = v38 + 24 * v37 > (unint64_t)&canMapOperands;
      if (v38 <= (unint64_t)&canMapOperands && v53)
      {
        v58 = (char *)&canMapOperands - v38;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v52, 24);
        v38 = *(_QWORD *)(a1 + 16);
        v39 = (const void ***)&v58[v38];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v52, 24);
        v38 = *(_QWORD *)(a1 + 16);
        v39 = &canMapOperands;
      }
    }
    v40 = v38 + 24 * *(unsigned int *)(a1 + 24);
    v41 = *(_OWORD *)v39;
    *(_QWORD *)(v40 + 16) = v39[2];
    *(_OWORD *)v40 = v41;
    ++*(_DWORD *)(a1 + 24);
    canMapOperands = (const void **)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v63);
    AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&canMapOperands);
    v62 = 261;
    canMapOperands = AttrData;
    v60 = v43;
    return mlir::Diagnostic::operator<<(a1, &canMapOperands);
  }
  return result;
}

void std::make_unique[abi:nn180100]<mlir::detail::RecoveryReproducerContext,std::string &,mlir::Operation *&,std::function<std::unique_ptr<mlir::PassManager::ReproducerStream> ()(std::string &)> &,BOOL &>(uint64_t a1, uint64_t *a2)
{
  mlir::Operation::CloneOptions *v4;
  std::string *v5;
  uint64_t v6;
  char v7;
  std::string v8;

  v4 = (mlir::Operation::CloneOptions *)operator new(0x30uLL);
  v5 = (std::string *)v4;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v8 = *(std::string *)a1;
  v6 = *a2;
  *v5 = v8;
  memset(&v8, 0, sizeof(v8));
  v7 = mlir::Operation::CloneOptions::all(v4);
  mlir::Operation::clone(v6, v7);
}

void sub_18056C674(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  mlir::MLIRContext *Context;
  void *v29;
  char v30;

  *(_QWORD *)(v24 + 24) = a1;
  *(_QWORD *)(v24 + 32) = v25;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v27 + 24));
  *(_BYTE *)(v24 + 40) = mlir::MLIRContext::isMultithreadingEnabled(Context) ^ 1;
  *(_BYTE *)(v24 + 41) = v26;
  mlir::detail::RecoveryReproducerContext::enable((mlir::detail::RecoveryReproducerContext *)v24);
  *v23 = v24;
  if (v30 < 0)
    operator delete(v29);
}

uint64_t mlir::PassManager::runWithCrashRecovery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  mlir::Pass **v6;
  llvm::CrashRecoveryContext *MemorySpace;
  int v8;
  uint64_t v9;
  _QWORD v11[4];
  uint64_t v12[4];
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  v14 = a3;
  v13 = a2;
  v5 = *(uint64_t **)(a1 + 32);
  v6 = (mlir::Pass **)mlir::OpPassManager::begin((mlir::OpPassManager *)a1);
  MemorySpace = (llvm::CrashRecoveryContext *)mlir::MemRefType::getMemorySpace((mlir::MemRefType *)a1);
  v8 = (*(unsigned __int8 *)(a1 + 56) >> 1) & 1;
  llvm::CrashRecoveryContext::Enable(MemorySpace);
  v9 = *v5;
  *(_BYTE *)(v9 + 144) = v8;
  if (!*(_BYTE *)(v9 + 32))
    mlir::detail::PassCrashReproducerGenerator::prepareReproducerFor((uint64_t)v5, v6, (mlir::Pass **)MemorySpace, a2);
  v15 = 0;
  llvm::CrashRecoveryContext::CrashRecoveryContext((llvm::CrashRecoveryContext *)v12);
  v11[0] = &v15;
  v11[1] = a1;
  v11[2] = &v13;
  v11[3] = &v14;
  llvm::CrashRecoveryContext::RunSafelyOnThread(v12, (uint64_t)llvm::function_ref<void ()(void)>::callback_fn<mlir::PassManager::runWithCrashRecovery(mlir::Operation *,mlir::AnalysisManager)::$_0>, (uint64_t)v11, 0);
  mlir::detail::PassCrashReproducerGenerator::finalize(*(uint64_t **)(a1 + 32), v13, v15);
  llvm::CrashRecoveryContext::~CrashRecoveryContext((llvm::CrashRecoveryContext *)v12);
  return v15;
}

void mlir::AsmResourcePrinter::fromCallable<mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0>(llvm::StringRef,mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0 &&)::Printer::~Printer(void **a1)
{
  void *v1;

  mlir::AsmResourcePrinter::~AsmResourcePrinter(a1);
  operator delete(v1);
}

uint64_t mlir::AsmResourcePrinter::fromCallable<mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0>(llvm::StringRef,mlir::detail::RecoveryReproducerContext::generate(std::string &)::$_0 &&)::Printer::buildResources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(uint64_t **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *((char *)v4 + 23);
  if (v6 >= 0)
    v7 = *(_QWORD *)(a1 + 32);
  else
    v7 = *v4;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)v4 + 23);
  else
    v8 = v4[1];
  (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, "pipeline", 8, v7, v8);
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, "disable_threading", 17, *(unsigned __int8 *)(v5 + 40));
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, "verify_each", 11, *(unsigned __int8 *)(v5 + 41));
}

uint64_t llvm::object_creator<llvm::sys::SmartMutex<true>>::call()
{
  _OWORD *v0;
  uint64_t result;

  v0 = operator new(0x48uLL);
  *v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  *((_QWORD *)v0 + 8) = 0;
  result = MEMORY[0x186DA1428]();
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void llvm::object_deleter<llvm::sys::SmartMutex<true>>::call(std::recursive_mutex *a1)
{
  void *v1;

  if (a1)
  {
    std::recursive_mutex::~recursive_mutex(a1);
    operator delete(v1);
  }
}

double llvm::object_creator<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0x30uLL);
  result = 0.0;
  v0[1] = 0u;
  v0[2] = 0u;
  *v0 = 0u;
  *((_QWORD *)v0 + 3) = (char *)v0 + 40;
  *((_DWORD *)v0 + 9) = 1;
  return result;
}

uint64_t llvm::object_deleter<llvm::SmallSetVector<mlir::detail::RecoveryReproducerContext *,1u>>::call(uint64_t result)
{
  uint64_t v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 24);
    if (v2 != (void *)(v1 + 40))
      free(v2);
    llvm::deallocate_buffer(*(llvm **)v1, (void *)(8 * *(unsigned int *)(v1 + 16)));
  }
  return result;
}

void mlir::detail::PassCrashReproducerGenerator::Impl::~Impl(mlir::detail::PassCrashReproducerGenerator::Impl *this)
{
  char *v2;

  v2 = (char *)*((_QWORD *)this + 16);
  if (v2 != (char *)this + 144)
    free(v2);
  llvm::deallocate_buffer(*((llvm **)this + 13), (void *)(16 * *((unsigned int *)this + 30)));
}

void llvm::DenseMap<std::pair<mlir::Pass *,mlir::Operation *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::Pass *,mlir::Operation *>,void>,llvm::detail::DenseSetPair<std::pair<mlir::Pass *,mlir::Operation *>>>::shrink_and_clear(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  v1 = *(unsigned int *)(a1 + 16);
  v2 = *(_DWORD *)(a1 + 8);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != (_DWORD)v1)
    llvm::deallocate_buffer(*(llvm **)a1, (void *)(16 * v1));
  *(_QWORD *)(a1 + 8) = 0;
  if ((_DWORD)v1)
    memset_pattern16(*(void **)a1, &unk_181232E00, 16 * v1);
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::detail::RecoveryReproducerContext>,false>::grow(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;

  v24 = 0;
  v3 = (char *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 8, &v24);
  v5 = *(char **)a1;
  v6 = *(char **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v7)
    goto LABEL_21;
  v8 = (v7 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v9 = 8 * v7;
  if (v8 < 0xB)
  {
    v10 = v4;
LABEL_12:
    v19 = &v5[8 * v7];
    do
    {
      v20 = *(_QWORD *)v6;
      *(_QWORD *)v6 = 0;
      v6 += 8;
      *(_QWORD *)v10 = v20;
      v10 += 8;
    }
    while (v6 != v19);
    goto LABEL_14;
  }
  v11 = v5 >= &v4[v9] || v4 >= &v5[v9];
  v10 = v4;
  if (!v11)
    goto LABEL_12;
  v12 = v8 + 1;
  v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
  v10 = &v4[v13];
  v6 = &v5[v13];
  v14 = (__int128 *)(v5 + 16);
  v15 = v4 + 16;
  v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v17 = *(v14 - 1);
    v18 = *v14;
    *(v14 - 1) = 0uLL;
    *v14 = 0uLL;
    *(v15 - 1) = v17;
    *v15 = v18;
    v14 += 2;
    v15 += 2;
    v16 -= 4;
  }
  while (v16);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_12;
LABEL_14:
  v21 = *(_QWORD *)a1 - 8;
  do
  {
    v22 = *(_QWORD *)(v21 + v9);
    *(_QWORD *)(v21 + v9) = 0;
    if (v22)
    {
      mlir::Operation::erase(*(mlir::Operation **)(v22 + 24));
      mlir::detail::RecoveryReproducerContext::disable((mlir::detail::RecoveryReproducerContext *)v22);
      if (*(char *)(v22 + 23) < 0)
        operator delete(*(void **)v22);
      operator delete((void *)v22);
    }
    v9 -= 8;
  }
  while (v9);
  v6 = *(char **)a1;
LABEL_21:
  v23 = v24;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v23;
}

uint64_t llvm::function_ref<void ()(void)>::callback_fn<mlir::PassManager::runWithCrashRecovery(mlir::Operation *,mlir::AnalysisManager)::$_0>(uint64_t a1)
{
  uint64_t result;

  result = mlir::PassManager::runPasses(*(unsigned __int8 **)(a1 + 8), **(mlir ***)(a1 + 16), **(mlir::detail::NestedAnalysisMap ***)(a1 + 24));
  **(_BYTE **)a1 = result;
  return result;
}

uint64_t mlir::detail::pass_options::parseCommaSeparatedList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, unint64_t), uint64_t a7)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Operation *v14;
  mlir::OpAsmPrinter *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  llvm **v19;
  uint64_t v20;
  unint64_t v21;
  llvm **v22;
  llvm *v24[2];
  unint64_t v25;
  uint64_t v26;

  v9 = a5;
  v10 = a4;
  v26 = *MEMORY[0x1E0C80C00];
  v24[0] = (llvm *)v24;
  v25 = (unint64_t)llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallbacksHolder<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,void>::Callbacks
      + 2;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))(((unint64_t)llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallbacksHolder<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0,void>::Callbacks + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v24, a4, a5, 0, 0x2Cu);
  if (v11 == -1)
  {
LABEL_14:
    v20 = a6(a7, v10, v9);
    v21 = v25;
    if (v25 < 8)
      return v20;
    goto LABEL_17;
  }
  v12 = v11;
  while (1)
  {
    v13 = v9 >= v12 ? v12 : v9;
    if (!a6(a7, v10, v13))
      break;
    if (v9 >= v12 + 1)
      v18 = v12 + 1;
    else
      v18 = v9;
    v10 += v18;
    v9 -= v18;
    if ((v25 & 2) != 0)
      v19 = v24;
    else
      v19 = (llvm **)v24[0];
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unsigned __int8))(v25 & 0xFFFFFFFFFFFFFFF8))((uint64_t)v19, v10, v9, 0, 0x2Cu);
    if (v12 == -1)
      goto LABEL_14;
  }
  v20 = 0;
  v21 = v25;
  if (v25 >= 8)
  {
LABEL_17:
    if ((v21 & 4) != 0)
    {
      if ((v21 & 2) != 0)
        v22 = v24;
      else
        v22 = (llvm **)v24[0];
      (*(void (**)(uint64_t, Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 16))((uint64_t)v22, v14, v15, v16, v17);
    }
    if ((v21 & 2) == 0)
      llvm::deallocate_buffer(v24[0], v24[1]);
  }
  return v20;
}

uint64_t mlir::detail::PassOptions::copyOptionValuesFrom(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v2 = *(_QWORD *)(result + 160);
  v3 = *(_QWORD *)(result + 168);
  if (v2 != v3)
  {
    v4 = *(_QWORD *)(a2 + 160);
    v5 = *(_QWORD *)(a2 + 168);
    if (v4 != v5)
    {
      v6 = v4 + 8;
      v7 = v2 + 8;
      do
      {
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 - 8) + 40))(*(_QWORD *)(v7 - 8), *(_QWORD *)(v6 - 8));
        if (v7 == v3)
          break;
        v7 += 8;
        v8 = v6 == v5;
        v6 += 8;
      }
      while (!v8);
    }
  }
  return result;
}

uint64_t mlir::detail::PassOptions::parseFromString(uint64_t a1, __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t *v6;
  unint64_t i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t *v14;
  unint64_t v15;
  const unsigned __int8 *v16;
  const unsigned __int8 *v17;
  unint64_t v18;
  size_t v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t first_not_of;
  unint64_t v24;
  unint64_t v25;
  uint64_t last_not_of;
  unint64_t v27;
  const unsigned __int8 *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  int v36;
  char *v37;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  size_t v43;
  char *v44;
  int v45;
  char *v46;
  size_t v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  unint64_t v59;
  llvm *Key;
  uint64_t result;
  llvm::raw_ostream *v62;
  llvm::raw_ostream *v63;
  void *v64;
  void *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unint64_t v69;
  int8x16_t *v70;
  unint64_t v71;

  if (!a3)
    return 1;
  v3 = a3;
  v6 = (uint64_t *)(a1 + 128);
  while (2)
  {
    for (i = 0; i != v3; ++i)
    {
      v8 = a2[i];
      if (v8 == 61)
      {
        if (v3 >= i)
          v22 = i;
        else
          v22 = v3;
        v68 = (uint64_t)a2;
        v69 = v22;
        first_not_of = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
        if (first_not_of >= v69)
          v24 = v69;
        else
          v24 = first_not_of;
        v25 = v69 - v24;
        v70 = (int8x16_t *)(v68 + v24);
        v71 = v69 - v24;
        last_not_of = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
        v14 = v70;
        if (last_not_of + 1 < v71)
          v27 = last_not_of + 1;
        else
          v27 = v71;
        v28 = (const unsigned __int8 *)(v71 - v25 + v27);
        if (v71 >= (unint64_t)v28)
          v17 = v28;
        else
          v17 = (const unsigned __int8 *)v71;
        v70 = (int8x16_t *)&a2[v22];
        v71 = v3 - v22;
        v29 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
        if (v29 >= v71)
          v30 = v71;
        else
          v30 = v29;
        if (v71 <= v29)
          v31 = (uint64_t)v70->i64 + v30;
        else
          v31 = (uint64_t)v70->i64 + v30 + 1;
        v32 = 0;
        v33 = (__PAIR128__(v71, v29) - __PAIR128__(v30, v71)) >> 64;
        if (v71 - v30 == v71 > v29)
        {
LABEL_87:
          if (v33 >= (unint64_t)v32)
            v51 = (unint64_t)v32;
          else
            v51 = v33;
          v68 = v31;
          v69 = v51;
          v52 = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
          if (v52 >= v69)
            v53 = v69;
          else
            v53 = v52;
          v54 = v69 - v53;
          v70 = (int8x16_t *)(v68 + v53);
          v71 = v69 - v53;
          v55 = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
          v20 = v70;
          if (v55 + 1 < v71)
            v56 = v55 + 1;
          else
            v56 = v71;
          v57 = v71 - v54 + v56;
          if (v71 >= v57)
            v19 = v57;
          else
            v19 = v71;
          v70 = (int8x16_t *)(v31 + v51);
          v71 = v33 - v51;
          v58 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
          if (v58 >= v71)
            v59 = v71;
          else
            v59 = v58;
          a2 = &v70->i8[v59];
          v3 = v71 - v59;
          if (!v17)
            goto LABEL_3;
LABEL_103:
          Key = (llvm *)llvm::StringMapImpl::FindKey(v6, v14, v17);
          if ((_DWORD)Key != -1 && (int)Key != (unint64_t)*(unsigned int *)(a1 + 136))
          {
            if ((llvm::cl::ProvidePositionalOption(*(_QWORD *)(*(_QWORD *)(*v6 + 8 * (int)Key) + 8), v20, v19, 0) & 1) == 0)
              goto LABEL_3;
            return 0;
          }
          v62 = (llvm::raw_ostream *)llvm::errs(Key);
          v63 = v62;
          v64 = (void *)*((_QWORD *)v62 + 4);
          if (*((_QWORD *)v62 + 3) - (_QWORD)v64 > 0x25uLL)
          {
            qmemcpy(v64, "<Pass-Options-Parser>: no such option ", 38);
            v65 = (void *)(*((_QWORD *)v62 + 4) + 38);
            *((_QWORD *)v63 + 4) = v65;
            if ((unint64_t)v17 <= *((_QWORD *)v63 + 3) - (_QWORD)v65)
            {
LABEL_110:
              memcpy(v65, v14, (size_t)v17);
              v66 = (unsigned __int8 *)*((_QWORD *)v63 + 3);
              v67 = (unsigned __int8 *)&v17[*((_QWORD *)v63 + 4)];
              *((_QWORD *)v63 + 4) = v67;
              if (v66 != v67)
              {
LABEL_111:
                result = 0;
                *v67 = 10;
                ++*((_QWORD *)v63 + 4);
                return result;
              }
LABEL_115:
              llvm::raw_ostream::write(v63, "\n", 1uLL);
              return 0;
            }
          }
          else
          {
            v63 = llvm::raw_ostream::write(v62, "<Pass-Options-Parser>: no such option ", 0x26uLL);
            v65 = (void *)*((_QWORD *)v63 + 4);
            if ((unint64_t)v17 <= *((_QWORD *)v63 + 3) - (_QWORD)v65)
              goto LABEL_110;
          }
          v63 = llvm::raw_ostream::write(v63, v14->i8, (size_t)v17);
          v67 = (unsigned __int8 *)*((_QWORD *)v63 + 4);
          if (*((unsigned __int8 **)v63 + 3) != v67)
            goto LABEL_111;
          goto LABEL_115;
        }
        while (1)
        {
          v36 = v32[v31];
          switch(v36)
          {
            case '"':
              v48 = v33 - (_QWORD)(v32 + 1);
              if (v33 > (unint64_t)(v32 + 1))
              {
                v49 = &v32[v31 + 1];
                v50 = 34;
                goto LABEL_46;
              }
              break;
            case '\'':
              v48 = v33 - (_QWORD)(v32 + 1);
              if (v33 > (unint64_t)(v32 + 1))
              {
                v49 = &v32[v31 + 1];
                v50 = 39;
LABEL_46:
                v34 = (char *)memchr(v49, v50, v48);
                v35 = &v34[-v31] == (char *)-1 || v34 == 0;
                if (!v35)
                  v32 = &v34[-v31];
              }
              break;
            case ' ':
              goto LABEL_87;
            default:
              v37 = v32 + 1;
              if (v36 == 123 && v37 != (char *)v33)
              {
                v39 = 1;
                do
                {
                  v40 = v37[v31];
                  if (v40 > 0x7A)
                  {
                    if (v40 == 123)
                    {
                      ++v39;
                    }
                    else if (v40 == 125 && !--v39)
                    {
                      goto LABEL_51;
                    }
                  }
                  else if (v40 == 34)
                  {
                    v43 = v33 - (_QWORD)(v32 + 2);
                    if (v33 > (unint64_t)(v32 + 2))
                    {
                      v44 = &v32[v31 + 2];
                      v45 = 34;
LABEL_76:
                      v46 = (char *)memchr(v44, v45, v43);
                      if (&v46[-v31] != (char *)-1 && v46 != 0)
                        v37 = &v46[-v31];
                    }
                  }
                  else
                  {
                    v35 = v40 == 39;
                    v41 = v32 + 2;
                    if (v35 && v33 > (unint64_t)v41)
                    {
                      v43 = v33 - (_QWORD)v41;
                      v44 = &v41[v31];
                      v45 = 39;
                      goto LABEL_76;
                    }
                  }
                  v32 = v37++;
                }
                while (v37 != (char *)v33);
              }
              break;
          }
LABEL_51:
          if (++v32 == (char *)v33)
          {
            v32 = (char *)v33;
            goto LABEL_87;
          }
        }
      }
      if (v8 == 32)
        goto LABEL_9;
    }
    i = v3;
LABEL_9:
    if (v3 >= i)
      v9 = i;
    else
      v9 = v3;
    v68 = (uint64_t)a2;
    v69 = v9;
    v10 = llvm::StringRef::find_first_not_of(&v68, " \t\n\v\f\r", 6, 0);
    if (v10 >= v69)
      v11 = v69;
    else
      v11 = v10;
    v12 = v69 - v11;
    v70 = (int8x16_t *)(v68 + v11);
    v71 = v69 - v11;
    v13 = llvm::StringRef::find_last_not_of(&v70, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    v14 = v70;
    if (v13 + 1 < v71)
      v15 = v13 + 1;
    else
      v15 = v71;
    v16 = (const unsigned __int8 *)(v71 - v12 + v15);
    if (v71 >= (unint64_t)v16)
      v17 = v16;
    else
      v17 = (const unsigned __int8 *)v71;
    v70 = (int8x16_t *)&a2[v9];
    v71 = v3 - v9;
    v18 = llvm::StringRef::find_first_not_of(&v70, " \t\n\v\f\r", 6, 0);
    v19 = 0;
    v20 = 0;
    if (v18 >= v71)
      v21 = v71;
    else
      v21 = v18;
    a2 = &v70->i8[v21];
    v3 = v71 - v21;
    if (v17)
      goto LABEL_103;
LABEL_3:
    if (v3)
      continue;
    return 1;
  }
}

void mlir::detail::PassOptions::print(mlir::detail::PassOptions *this, llvm::raw_ostream *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  size_t v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *__base;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)this + 35))
    return;
  v4 = (char *)*((_QWORD *)this + 20);
  v3 = (char *)*((_QWORD *)this + 21);
  __base = v30;
  v29 = 0x400000000;
  v5 = v3 - v4;
  if ((unint64_t)(v3 - v4) < 0x21)
  {
    v6 = 0;
    v7 = 0;
    if (v4 == v3)
      goto LABEL_12;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v30, v5 >> 3, 8);
    v6 = v29;
    v7 = v29;
    if (v4 == v3)
      goto LABEL_12;
  }
  v8 = (char *)__base + 8 * v6;
  if ((unint64_t)(v5 - 8) < 0x38)
    goto LABEL_32;
  v9 = (char *)__base + 8 * v6;
  if ((unint64_t)(v9 - v4) < 0x20)
    goto LABEL_32;
  v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  v8 = (_QWORD *)((char *)v8 + v11);
  v12 = &v4[v11];
  v13 = (__int128 *)(v4 + 16);
  v14 = v9 + 16;
  v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16 = *v13;
    *(v14 - 1) = *(v13 - 1);
    *v14 = v16;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  v4 = v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_32:
    do
    {
      v17 = *(_QWORD *)v4;
      v4 += 8;
      *v8++ = v17;
    }
    while (v4 != v3);
  }
LABEL_12:
  v18 = v7 + ((unint64_t)v5 >> 3);
  LODWORD(v29) = v18;
  if (v18 >= 2)
    qsort(__base, v18, 8uLL, (int (__cdecl *)(const void *, const void *))mlir::detail::PassOptions::print(llvm::raw_ostream &)::$_0::__invoke);
  v19 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v19 < *((_QWORD *)a2 + 3))
  {
    *((_QWORD *)a2 + 4) = v19 + 1;
    *v19 = 123;
    v20 = v29;
    if (!(_DWORD)v29)
      goto LABEL_19;
LABEL_18:
    v21 = (char *)__base;
    (*(void (**)(_QWORD, llvm::raw_ostream *))(**(_QWORD **)__base + 24))(*(_QWORD *)__base, a2);
    if ((_DWORD)v20 != 1)
    {
      v24 = (uint64_t *)(v21 + 8);
      v25 = 8 * v20 - 8;
      do
      {
        v27 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v27)
        {
          llvm::raw_ostream::write(a2, " ", 1uLL);
        }
        else
        {
          *v27 = 32;
          ++*((_QWORD *)a2 + 4);
        }
        v26 = *v24++;
        (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)v26 + 24))(v26, a2);
        v25 -= 8;
      }
      while (v25);
    }
    goto LABEL_19;
  }
  llvm::raw_ostream::write(a2, 123);
  v20 = v29;
  if ((_DWORD)v29)
    goto LABEL_18;
LABEL_19:
  v22 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 125);
    v23 = __base;
    if (__base == v30)
      return;
  }
  else
  {
    *((_QWORD *)a2 + 4) = v22 + 1;
    *v22 = 125;
    v23 = __base;
    if (__base == v30)
      return;
  }
  free(v23);
}

uint64_t llvm::cl::OptionValue<mlir::OpPassManager>::~OptionValue(uint64_t a1)
{
  mlir::OpPassManager *v2;
  void *v3;

  v2 = *(mlir::OpPassManager **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
  {
    mlir::OpPassManager::~OpPassManager(v2);
    operator delete(v3);
  }
  return a1;
}

void mlir::parsePassPipeline(const char *a1@<X0>, size_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t first_not_of;
  unint64_t v7;
  size_t v8;
  uint64_t last_not_of;
  char *v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  void *v25;
  const char *v26;
  size_t v27;
  char *v28;
  unint64_t v29;

  v26 = a1;
  v27 = a2;
  first_not_of = llvm::StringRef::find_first_not_of(&v26, " \t\n\v\f\r", 6, 0);
  if (first_not_of >= v27)
    v7 = v27;
  else
    v7 = first_not_of;
  v8 = v27 - v7;
  v28 = (char *)&v26[v7];
  v29 = v27 - v7;
  last_not_of = llvm::StringRef::find_last_not_of(&v28, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  v10 = v28;
  if (last_not_of + 1 < v29)
    v11 = last_not_of + 1;
  else
    v11 = v29;
  v12 = v29 - v8 + v11;
  if (v29 >= v12)
    v13 = v12;
  else
    v13 = v29;
  v26 = v28;
  v27 = v13;
  if (v13
    && ((v14 = memchr(v28, 40, v13)) == 0 ? (v15 = -1) : (v15 = v14 - v10),
        (v16 = v15 + 1, v15 + 1 >= 2) && v10[v13 - 1] == 41))
  {
    v17 = v13 - 1;
    if (v13 < v13 - 1)
      v17 = v13;
    v27 = v17;
    v28 = v10;
    if (v17 <= v15)
      v18 = v17;
    else
      v18 = v14 - v10;
    v29 = v18;
    v19 = llvm::StringRef::find_last_not_of(&v28, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    if (v19 + 1 < v29)
      v20 = v19 + 1;
    else
      v20 = v29;
    v21 = v29 - v18 + v20;
    if (v29 >= v21)
      v22 = v21;
    else
      v22 = v29;
    mlir::OpPassManager::OpPassManager(&v28, v28, v22, 1);
    if (v27 >= v16)
      v23 = v16;
    else
      v23 = v27;
    if (mlir::parsePassPipeline(&v26[v23], v27 - v23, (mlir::OpPassManager *)&v28, a3))
    {
      mlir::OpPassManager::OpPassManager((uint64_t *)a4, (uint64_t *)&v28);
      v24 = 1;
    }
    else
    {
      v24 = 0;
      *(_BYTE *)a4 = 0;
    }
    *(_BYTE *)(a4 + 8) = v24;
    mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)&v28);
  }
  else
  {
    v25 = (void *)a3[2].n128_u64[0];
    if (a3[1].n128_u64[1] - (unint64_t)v25 > 0x5E)
    {
      qmemcpy(v25, "expected pass pipeline to be wrapped with the anchor operation type, e.g. 'builtin.module(...)'", 95);
      a3[2].n128_u64[0] += 95;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a3, "expected pass pipeline to be wrapped with the anchor operation type, e.g. 'builtin.module(...)'", 0x5FuLL);
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 0;
  }
}

BOOL llvm::cl::parser<mlir::OpPassManager>::parse(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, size_t a6, mlir::OpPassManager **a7)
{
  __n128 *v10;
  int v11;
  uint64_t *v12;
  mlir::OpPassManager *v13;
  void *v14;
  uint64_t v16;
  unsigned __int8 v17;

  v10 = (__n128 *)llvm::errs(a1);
  mlir::parsePassPipeline(a5, a6, v10, (uint64_t)&v16);
  v11 = v17;
  if (v17)
  {
    v12 = (uint64_t *)operator new(8uLL);
    mlir::OpPassManager::OpPassManager(v12, &v16);
    v13 = *a7;
    *a7 = (mlir::OpPassManager *)v12;
    if (v13)
    {
      mlir::OpPassManager::~OpPassManager(v13);
      operator delete(v14);
    }
    if (v17)
      mlir::OpPassManager::~OpPassManager((mlir::OpPassManager *)&v16);
  }
  return v11 == 0;
}

llvm::raw_ostream *llvm::cl::parser<mlir::OpPassManager>::print(llvm::raw_ostream *a1, const char **this)
{
  return mlir::OpPassManager::printAsTextualPipeline(this, a1);
}

mlir::OpPassManager **llvm::cl::parser<mlir::OpPassManager>::ParsedPassManager::~ParsedPassManager(mlir::OpPassManager **a1)
{
  mlir::OpPassManager *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    mlir::OpPassManager::~OpPassManager(v2);
    operator delete(v3);
  }
  return a1;
}

BOOL mlir::parsePassPipeline(const char *a1, uint64_t a2, mlir::OpPassManager *a3, __n128 *a4)
{
  char *v8;
  uint64_t v9;
  __n128 *v10;
  char *v11;
  _QWORD *v12;
  unsigned __int32 v13;
  unsigned __int8 *v14;
  _QWORD *i;
  void **v16;
  unint64_t first_of;
  unint64_t v18;
  unint64_t v19;
  unint64_t first_not_of;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t last_not_of;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  const char *v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  int v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  int v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  const char *v65;
  int v66;
  void *v67;
  _BOOL8 v68;
  char *v69;
  int v70;
  int Nesting;
  char v72;
  char *v73;
  void *v74;
  mlir::OpPassManager *v76;
  _QWORD *v77;
  __n128 *v78;
  void *__p;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  llvm::raw_ostream *v83;
  char *v84;
  __n128 *v85;
  __n128 *v86;
  unint64_t v87;
  const char *v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  __int16 v94;
  __n128 v95;
  _QWORD v96[6];

  v96[4] = *MEMORY[0x1E0C80C00];
  __p = 0;
  v80 = 0;
  v81 = 0;
  if (!a2)
  {
LABEL_96:
    v85 = a4;
    Nesting = mlir::OpPassManager::getNesting(a3);
    mlir::OpPassManager::setNesting((uint64_t)a3, 1);
    mlir::OpPassManager::setNesting((uint64_t)a3, Nesting);
    v68 = v72 != 0;
    v69 = (char *)__p;
    if (__p)
      goto LABEL_97;
    return v68;
  }
  llvm::SourceMgr::SourceMgr((llvm::SourceMgr *)&v85);
  llvm::MemoryBuffer::getMemBuffer((uint64_t)a1, a2, (uint64_t)"MLIR Textual PassPipeline Parser", 32, &v84);
  v96[0] = 0;
  v8 = v84;
  v84 = 0;
  v95 = (__n128)(unint64_t)v8;
  if ((unint64_t)v86 >= v87)
  {
    v10 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>(&v85, &v95);
  }
  else
  {
    llvm::SourceMgr::SrcBuffer::SrcBuffer(v86, &v95);
    v10 = (__n128 *)(v9 + 24);
  }
  v86 = v10;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v95);
  v11 = v84;
  v84 = 0;
  if (v11)
    (*(void (**)(char *))(*(_QWORD *)v11 + 8))(v11);
  v82 = (uint64_t *)&v85;
  v83 = (llvm::raw_ostream *)a4;
  v78 = a4;
  v90 = a1;
  v91 = a2;
  v12 = v96;
  v95.n128_u64[0] = (unint64_t)v96;
  v96[0] = &__p;
  v95.n128_u64[1] = 0x400000001;
  v13 = 1;
  v14 = " \t\n\v\f\r";
  for (i = v96; ; i = (_QWORD *)v95.n128_u64[0])
  {
LABEL_8:
    v16 = (void **)i[v13 - 1];
    first_of = llvm::StringRef::find_first_of(&v90, ",(){", 4, 0);
    v18 = first_of;
    v19 = v91;
    if (v91 >= first_of)
      v19 = first_of;
    v88 = v90;
    v89 = v19;
    first_not_of = llvm::StringRef::find_first_not_of(&v88, v14, 6, 0);
    if (first_not_of >= v89)
      v21 = v89;
    else
      v21 = first_not_of;
    v22 = v89 - v21;
    v92 = &v88[v21];
    v93 = v89 - v21;
    v23 = v14;
    last_not_of = llvm::StringRef::find_last_not_of(&v92, v14, 6, 0xFFFFFFFFFFFFFFFFLL);
    v26 = v92;
    if (last_not_of + 1 < v93)
      v27 = last_not_of + 1;
    else
      v27 = v93;
    v28 = v93 - v22 + v27;
    if (v93 >= v28)
      v29 = v28;
    else
      v29 = v93;
    v31 = (char *)v16[1];
    v30 = (unint64_t)v16[2];
    if ((unint64_t)v31 < v30)
    {
      *(_QWORD *)v31 = v92;
      *((_QWORD *)v31 + 1) = v29;
      *((_OWORD *)v31 + 1) = 0u;
      *((_OWORD *)v31 + 2) = 0u;
      v32 = v31 + 64;
      *((_OWORD *)v31 + 3) = 0u;
      v14 = v23;
      goto LABEL_43;
    }
    v76 = a3;
    v77 = v12;
    v33 = (char *)*v16;
    v34 = (v31 - (_BYTE *)*v16) >> 6;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 58)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v36 = v30 - (_QWORD)v33;
    if (v36 >> 5 > v35)
      v35 = v36 >> 5;
    v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFC0 ? 0x3FFFFFFFFFFFFFFLL : v35;
    if (v37)
    {
      if (v37 >> 58)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v38 = (char *)operator new(v37 << 6);
    }
    else
    {
      v38 = 0;
    }
    v39 = &v38[64 * v34];
    *(_QWORD *)v39 = v26;
    *((_QWORD *)v39 + 1) = v29;
    v40 = &v38[64 * v37];
    *((_OWORD *)v39 + 1) = 0u;
    *((_OWORD *)v39 + 2) = 0u;
    *((_OWORD *)v39 + 3) = 0u;
    v32 = v39 + 64;
    if (v31 == v33)
    {
      *v16 = v39;
      v16[1] = v32;
      v16[2] = v40;
      a3 = v76;
      v12 = v77;
      v14 = v23;
      if (v31)
        goto LABEL_42;
    }
    else
    {
      v14 = v23;
      do
      {
        v41 = *((_OWORD *)v31 - 4);
        v42 = *((_OWORD *)v31 - 3);
        *((_QWORD *)v39 - 4) = *((_QWORD *)v31 - 4);
        *((_OWORD *)v39 - 4) = v41;
        *((_OWORD *)v39 - 3) = v42;
        *((_QWORD *)v39 - 2) = 0;
        *((_QWORD *)v39 - 1) = 0;
        *(_OWORD *)(v39 - 24) = *(_OWORD *)(v31 - 24);
        *((_QWORD *)v39 - 1) = *((_QWORD *)v31 - 1);
        v39 -= 64;
        *((_QWORD *)v31 - 3) = 0;
        *((_QWORD *)v31 - 2) = 0;
        *((_QWORD *)v31 - 1) = 0;
        v31 -= 64;
      }
      while (v31 != v33);
      v31 = (char *)*v16;
      v43 = (char *)v16[1];
      *v16 = v39;
      v16[1] = v32;
      v16[2] = v40;
      if (v43 == v31)
      {
        a3 = v76;
      }
      else
      {
        a3 = v76;
        do
        while (v43 != v31);
      }
      v12 = v77;
      if (v31)
LABEL_42:
        operator delete(v31);
    }
LABEL_43:
    v16[1] = v32;
    if (v18 == -1)
      goto LABEL_85;
    v44 = v90;
    v45 = v91 >= v18 ? v18 : v91;
    v46 = &v90[v45];
    v47 = v91 - v45;
    v90 += v45;
    v91 -= v45;
    v48 = v44[v45];
    if (v48 != 40)
      break;
    if (v47)
      v62 = v46 + 1;
    else
      v62 = v46;
    v90 = v62;
    v91 = v47 - (v47 != 0);
    v63 = (char *)v16[1];
    v64 = v95.n128_u32[2];
    if (v95.n128_u32[2] >= (unint64_t)v95.n128_u32[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v12, v95.n128_u32[2] + 1, 8);
      v64 = v95.n128_u32[2];
    }
    *(_QWORD *)(v95.n128_u64[0] + 8 * v64) = v63 - 24;
    v13 = ++v95.n128_u32[2];
  }
  if (v48 != 123)
    goto LABEL_68;
  if (v47)
    v49 = v46 + 1;
  else
    v49 = v46;
  v50 = v47 - (v47 != 0);
  v90 = v49;
  v91 = v50;
  v51 = v47 - (v47 != 0);
  if ((_DWORD)v47 == (v47 != 0))
  {
LABEL_84:
    v65 = "missing closing '}' while processing pass options";
    v46 = v49 - 1;
    goto LABEL_90;
  }
  v52 = 0;
  v53 = 1;
  while (2)
  {
    v54 = v49[v52];
    if (v54 != 125)
    {
      if (v54 == 123)
        ++v53;
LABEL_56:
      if (v51 == ++v52)
        goto LABEL_84;
      continue;
    }
    break;
  }
  if (--v53)
    goto LABEL_56;
  if (v50 >= v52)
    v50 = v52;
  v55 = v16[1];
  *(v55 - 6) = v49;
  *(v55 - 5) = v50;
  if (v91 >= v52 + 1)
    v56 = v52 + 1;
  else
    v56 = v91;
  v90 += v56;
  v91 -= v56;
  v57 = llvm::StringRef::find_first_not_of(&v90, v14, 6, 0);
  if (v57 >= v91)
    v58 = v91;
  else
    v58 = v57;
  v46 = &v90[v58];
  v47 = v91 - v58;
  v90 += v58;
  v91 -= v58;
LABEL_68:
  if (v47)
  {
    while (1)
    {
      v59 = *(unsigned __int8 *)v46;
      if (v59 != 41)
        break;
      v90 = v46 + 1;
      v91 = v47 - 1;
      if (v95.n128_u32[2] == 1)
      {
        v65 = "encountered extra closing ')' creating unbalanced parentheses while parsing pipeline";
        goto LABEL_90;
      }
      --v95.n128_u32[2];
      v60 = llvm::StringRef::find_first_not_of(&v90, v14, 6, 0);
      if (v60 >= v91)
        v61 = v91;
      else
        v61 = v60;
      v46 = &v90[v61];
      v47 = v91 - v61;
      v90 += v61;
      v91 = v47;
      if (!v47)
        goto LABEL_85;
    }
    if (v59 == 44)
    {
      v90 = v46 + 1;
      v91 = v47 - 1;
      v13 = v95.n128_u32[2];
      i = (_QWORD *)v95.n128_u64[0];
      goto LABEL_8;
    }
    v65 = "expected ',' after parsing pipeline";
LABEL_90:
    v92 = v65;
    v94 = 259;
    v66 = 1;
    llvm::SourceMgr::PrintMessage(v82, v83, v46, 0, (llvm::Twine *)&v92, 0, 0, v25, 0, 0, 1);
    a4 = v78;
    v67 = (void *)v95.n128_u64[0];
    if ((_QWORD *)v95.n128_u64[0] != v12)
LABEL_91:
      free(v67);
    goto LABEL_92;
  }
LABEL_85:
  a4 = v78;
  if (v95.n128_u32[2] < 2)
  {
    v66 = 0;
    v67 = (void *)v95.n128_u64[0];
    if ((_QWORD *)v95.n128_u64[0] != v12)
      goto LABEL_91;
  }
  else
  {
    v92 = "encountered unbalanced parentheses while parsing pipeline";
    v94 = 259;
    v66 = 1;
    llvm::SourceMgr::PrintMessage(v82, v83, v90, 0, (llvm::Twine *)&v92, 0, 0, v25, 0, 0, 1);
    v67 = (void *)v95.n128_u64[0];
    if ((_QWORD *)v95.n128_u64[0] != v12)
      goto LABEL_91;
  }
LABEL_92:
  if (!v66)
  {
    llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)&v85);
    if (!v70)
    {
      v68 = 0;
      v69 = (char *)__p;
      if (!__p)
        return v68;
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)&v85);
  v68 = 0;
  v69 = (char *)__p;
  if (!__p)
    return v68;
LABEL_97:
  v73 = v80;
  v74 = v69;
  if (v80 != v69)
  {
    do
    while (v73 != v69);
    v74 = __p;
  }
  v80 = v69;
  operator delete(v74);
  return v68;
}

const char *llvm::cl::parser<mlir::OpPassManager>::getValueName()
{
  return "pass-manager";
}

uint64_t mlir::detail::PassOptions::print(llvm::raw_ostream &)::$_0::__invoke(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  int v9;
  unsigned int v11;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
  v4 = *(const void **)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 >= v5)
    v8 = v5;
  else
    v8 = *(_QWORD *)(v6 + 24);
  if (v8)
  {
    v9 = memcmp(v4, *(const void **)(v6 + 16), v8);
    if (v9)
      return (v9 >> 31) | 1u;
  }
  if (v5 < v7)
    v11 = -1;
  else
    v11 = 1;
  if (v5 == v7)
    return 0;
  else
    return v11;
}

uint64_t `anonymous namespace'::TextualPipeline::resolvePipelineElements(uint64_t a1, uint64_t a2, unsigned __int8 (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *i;
  int8x16_t *v8;
  const unsigned __int8 *v9;
  uint64_t v11;
  int Key;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int8x16_t *v17;
  const unsigned __int8 *v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v29[4];
  __int16 v30;
  int v31;
  __int16 v32;
  _QWORD *v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;

  if (!a2)
    return 1;
  v6 = a2 << 6;
  for (i = (_QWORD *)(a1 + 32); i[1] != i[2]; i += 8)
  {
      return 0;
LABEL_4:
    v6 -= 64;
    if (!v6)
      return 1;
  }
  v8 = (int8x16_t *)*(i - 4);
  v9 = (const unsigned __int8 *)*(i - 3);
  if (!atomic_load(_MergedGlobals_44))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)_MergedGlobals_44, (void *(*)(void))llvm::object_creator<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call, (void (*)(void *))llvm::object_deleter<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call);
  v11 = _MergedGlobals_44[0];
  Key = llvm::StringMapImpl::FindKey((uint64_t *)_MergedGlobals_44[0], v8, v9);
  v13 = *(_QWORD *)v11;
  if (Key != -1)
  {
    v14 = Key;
    if (atomic_load(_MergedGlobals_44))
      goto LABEL_13;
    goto LABEL_12;
  }
  v14 = *(unsigned int *)(v11 + 8);
  if (!atomic_load(_MergedGlobals_44))
LABEL_12:
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)_MergedGlobals_44, (void *(*)(void))llvm::object_creator<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call, (void (*)(void *))llvm::object_deleter<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call);
LABEL_13:
  v16 = (_QWORD *)(v13 + 8 * v14);
  if (v16 != (_QWORD *)(*(_QWORD *)_MergedGlobals_44[0] + 8 * *(unsigned int *)(_MergedGlobals_44[0] + 8)))
  {
LABEL_3:
    *i = *v16 + 8;
    goto LABEL_4;
  }
  *i = 0;
  v17 = (int8x16_t *)*(i - 4);
  v18 = (const unsigned __int8 *)*(i - 3);
  if (!atomic_load((unint64_t *)&qword_1ECD32E10))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ECD32E10, (void *(*)(void))llvm::object_creator<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call, (void (*)(void *))llvm::object_deleter<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call);
  v20 = qword_1ECD32E10;
  v21 = llvm::StringMapImpl::FindKey((uint64_t *)qword_1ECD32E10, v17, v18);
  v22 = *(_QWORD *)v20;
  if (v21 != -1)
  {
    v23 = v21;
    if (atomic_load((unint64_t *)&qword_1ECD32E10))
      goto LABEL_19;
    goto LABEL_18;
  }
  v23 = *(unsigned int *)(v20 + 8);
  if (!atomic_load((unint64_t *)&qword_1ECD32E10))
LABEL_18:
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ECD32E10, (void *(*)(void))llvm::object_creator<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call, (void (*)(void *))llvm::object_deleter<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call);
LABEL_19:
  v16 = (_QWORD *)(v22 + 8 * v23);
  if (v16 != (_QWORD *)(*(_QWORD *)qword_1ECD32E10 + 8 * *(unsigned int *)(qword_1ECD32E10 + 8)))
    goto LABEL_3;
  *i = 0;
  v25 = *(i - 4);
  v30 = 1283;
  v29[0] = "'";
  v29[2] = v25;
  v29[3] = *(i - 3);
  v33 = v29;
  v34 = "' does not refer to a registered pass or pass pipeline";
  v35 = 770;
  v36 = v31;
  v37 = v32;
  if (a3(a4))
    goto LABEL_4;
  return 0;
}

void `anonymous namespace'::TextualPipeline::PipelineElement::~PipelineElement(_anonymous_namespace_::TextualPipeline::PipelineElement *this)
{
  char *v2;
  char *v3;
  char *v4;

  v2 = (char *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (char *)*((_QWORD *)this + 6);
    v4 = v2;
    if (v3 != v2)
    {
      do
      while (v3 != v2);
      v4 = (char *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(char const*,llvm::Twine)>::callback_fn<`anonymous namespace'::TextualPipeline::initialize(llvm::StringRef,llvm::raw_ostream &)::$_0>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v8;
  _OWORD v10[2];
  uint64_t v11;

  v8 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v8;
  v11 = *(_QWORD *)(a3 + 32);
  llvm::SourceMgr::PrintMessage(*(uint64_t **)a1, *(llvm::raw_ostream **)(a1 + 8), a2, 0, (llvm::Twine *)v10, 0, 0, a8, 0, 0, 1);
  return 0;
}

uint64_t `anonymous namespace'::TextualPipeline::addToPipeline(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t, __int128 *), uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  _QWORD v25[2];
  const char *v26;
  __int16 v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  const char *v33;
  __int16 v34;

  if (!a2)
    return 1;
  v8 = (uint64_t *)(a1 + 24);
  v9 = a2 << 6;
  while (1)
  {
    v13 = v8[1];
    if (v13)
      break;
    v10 = v8[2];
    v11 = (v8[3] - v10) >> 6;
    v12 = mlir::OpPassManager::nest(a3, (_BYTE *)*(v8 - 3), *(v8 - 2));
    {
      v24 = 1283;
      v22 = *(v8 - 3);
      v23 = *(v8 - 2);
      v25[0] = v21;
      v27 = 770;
      v20 = *(v8 - 1);
      v19 = *v8;
      v28[0] = v25;
      v29 = v20;
      v30 = v19;
      v31 = 1282;
      goto LABEL_11;
    }
LABEL_4:
    v8 += 8;
    v9 -= 64;
    if (!v9)
      return 1;
  }
  v32 = *(_OWORD *)(v8 - 1);
  v28[0] = a4;
  v28[1] = a5;
  v14 = *(_QWORD *)(v13 + 72);
  if (v14)
  {
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, __int128 *, _QWORD *))(*(_QWORD *)v14 + 48))(v14, a3, &v32, v28))
    {
      v24 = 1283;
      v22 = *(v8 - 3);
      v23 = *(v8 - 2);
      v25[0] = v21;
      v27 = 770;
      v16 = *(v8 - 1);
      v15 = *v8;
      v28[0] = v25;
      v29 = v16;
      v30 = v15;
      v31 = 1282;
LABEL_11:
      *(_QWORD *)&v32 = v28;
      v33 = v17;
      v34 = 770;
      return a4(a5, &v32);
    }
    goto LABEL_4;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return (uint64_t)llvm::object_creator<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call();
}

_QWORD *llvm::object_creator<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call()
{
  _QWORD *result;

  result = operator new(0x18uLL);
  *result = 0;
  result[1] = 0;
  result[2] = 0x7800000000;
  return result;
}

void llvm::object_deleter<llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>>::call(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>::~StringMap(a1);
    operator delete(v1);
  }
}

uint64_t llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      while (1)
      {
        v4 = *(uint64_t **)(*(_QWORD *)a1 + v3);
        if (v4 != (uint64_t *)-8 && v4 != 0)
          break;
        v3 += 8;
        if (8 * v2 == v3)
          goto LABEL_25;
      }
      v6 = *v4;
      v7 = (uint64_t *)v4[14];
      if (v7 == v4 + 11)
      {
        v7 = v4 + 11;
        v8 = 4;
      }
      else
      {
        if (!v7)
          goto LABEL_15;
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_15:
      v9 = (uint64_t *)v4[10];
      if (v9 == v4 + 7)
      {
        v9 = v4 + 7;
        v10 = 4;
      }
      else
      {
        if (!v9)
          goto LABEL_20;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_20:
      if (*((char *)v4 + 55) < 0)
      {
        operator delete((void *)v4[4]);
        if ((*((char *)v4 + 31) & 0x80000000) == 0)
          goto LABEL_4;
      }
      else if ((*((char *)v4 + 31) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete((void *)v4[1]);
LABEL_4:
      llvm::deallocate_buffer((llvm *)v4, (void *)(v6 + 121));
    }
  }
LABEL_25:
  free(*(void **)a1);
  return a1;
}

_QWORD *llvm::object_creator<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call()
{
  _QWORD *result;

  result = operator new(0x18uLL);
  *result = 0;
  result[1] = 0;
  result[2] = 0x7800000000;
  return result;
}

void llvm::object_deleter<llvm::StringMap<mlir::PassInfo,llvm::MallocAllocator>>::call(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)llvm::StringMap<mlir::PassPipelineInfo,llvm::MallocAllocator>::~StringMap(a1);
    operator delete(v1);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<unsigned long,llvm::StringRef,unsigned long,char>::CallImpl<mlir::detail::pass_options::parseCommaSeparatedList(llvm::cl::Option &,llvm::StringRef,llvm::StringRef,llvm::function_ref<mlir::LogicalResult ()(llvm::StringRef)>)::$_0>(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 a5)
{
  int v8;
  uint64_t (*v9)(void);
  int v10;
  size_t v11;
  void *v12;
  int v13;
  void *v14;

  if (a3 <= a4)
    return -1;
  v8 = a5;
  while (1)
  {
    v10 = *(unsigned __int8 *)(a2 + a4);
    if (v10 == v8)
      return a4;
    if (*(unsigned __int8 *)(a2 + a4) <= 0x27u)
    {
      if (v10 == 34)
      {
        v11 = a3 - (a4 + 1);
        if (a3 > a4 + 1)
        {
          v12 = (void *)(a2 + a4 + 1);
          v13 = 34;
LABEL_19:
          v14 = memchr(v12, v13, v11);
          if (v14)
            a4 = (unint64_t)v14 - a2;
          else
            a4 = -1;
          goto LABEL_4;
        }
        goto LABEL_22;
      }
      if (v10 == 39)
      {
        v11 = a3 - (a4 + 1);
        if (a3 > a4 + 1)
        {
          v12 = (void *)(a2 + a4 + 1);
          v13 = 39;
          goto LABEL_19;
        }
LABEL_22:
        a4 = -1;
      }
    }
    else
    {
      switch(v10)
      {
        case '(':
          v9 = *(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        case '[':
          v9 = *(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        case '{':
          v9 = *(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 24) & 0xFFFFFFFFFFFFFFF8);
          break;
        default:
          goto LABEL_4;
      }
      a4 = v9();
    }
LABEL_4:
    if (++a4 >= a3)
      return -1;
  }
}

uint64_t llvm::function_ref<mlir::LogicalResult ()(llvm::Twine const&)>::callback_fn<mlir::parsePassPipeline(llvm::StringRef,mlir::OpPassManager &,llvm::raw_ostream &)::$_0>(llvm::raw_ostream **a1, uint64_t a2)
{
  __int128 v2;
  llvm::raw_ostream *v3;
  _BYTE *v4;
  _OWORD v6[2];
  uint64_t v7;

  v2 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v2;
  v7 = *(_QWORD *)(a2 + 32);
  v3 = *a1;
  llvm::Twine::print((llvm::Twine *)v6, *a1);
  v4 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v4)
  {
    llvm::raw_ostream::write(v3, "\n", 1uLL);
  }
  else
  {
    *v4 = 10;
    ++*((_QWORD *)v3 + 4);
  }
  return 0;
}

void llvm::cl::alias::done(llvm::cl::alias *this)
{
  llvm::cl::alias *v1;
  uint64_t v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;

  v1 = this;
  if (*((_QWORD *)this + 3))
  {
    if (*((_QWORD *)this + 16))
      goto LABEL_3;
  }
  else
  {
    v11[0] = "cl::alias must have argument name specified!";
    v12 = 259;
    v3 = (llvm::raw_ostream *)llvm::errs(this);
    this = (llvm::cl::alias *)llvm::cl::Option::error(v1, (llvm::Twine *)v11, 0, 0, v3);
    if (*((_QWORD *)v1 + 16))
    {
LABEL_3:
      if (*((_DWORD *)v1 + 27) == *((_DWORD *)v1 + 28))
        goto LABEL_4;
LABEL_8:
      v11[0] = "cl::alias must not have cl::sub(), aliased option's cl::sub() will be used!";
      v12 = 259;
      v5 = (llvm::raw_ostream *)llvm::errs(this);
      llvm::cl::Option::error(v1, (llvm::Twine *)v11, 0, 0, v5);
      v2 = *((_QWORD *)v1 + 16);
      if ((llvm::cl::alias *)v2 == v1)
        goto LABEL_20;
      goto LABEL_9;
    }
  }
  v11[0] = "cl::alias must have an cl::aliasopt(option) specified!";
  v12 = 259;
  v4 = (llvm::raw_ostream *)llvm::errs(this);
  this = (llvm::cl::alias *)llvm::cl::Option::error(v1, (llvm::Twine *)v11, 0, 0, v4);
  if (*((_DWORD *)v1 + 27) != *((_DWORD *)v1 + 28))
    goto LABEL_8;
LABEL_4:
  v2 = *((_QWORD *)v1 + 16);
  if ((llvm::cl::alias *)v2 == v1)
    goto LABEL_20;
LABEL_9:
  llvm::SmallPtrSetImplBase::CopyFrom((llvm::cl::alias *)((char *)v1 + 88), (const llvm::SmallPtrSetImplBase *)(v2 + 88));
  v6 = *((_QWORD *)v1 + 16);
  if ((llvm::cl::alias *)v6 != v1)
  {
    v7 = (void **)((char *)v1 + 64);
    v8 = *(unsigned int *)(v6 + 72);
    v9 = *((unsigned int *)v1 + 18);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*v7, *(const void **)(v6 + 64), 8 * v8);
      goto LABEL_19;
    }
    if (*((_DWORD *)v1 + 19) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*v7, *(const void **)(v6 + 64), 8 * v9);
        v10 = *(unsigned int *)(v6 + 72);
        if (v9 == v10)
        {
LABEL_19:
          *((_DWORD *)v1 + 18) = v8;
          goto LABEL_20;
        }
      }
      else
      {
        v9 = 0;
        v10 = *(unsigned int *)(v6 + 72);
        if (!*(_DWORD *)(v6 + 72))
          goto LABEL_19;
      }
    }
    else
    {
      *((_DWORD *)v1 + 18) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1 + 64, (char *)v1 + 80, v8, 8);
      v9 = 0;
      v10 = *(unsigned int *)(v6 + 72);
      if (!*(_DWORD *)(v6 + 72))
        goto LABEL_19;
    }
    memcpy((char *)*v7 + 8 * v9, (const void *)(*(_QWORD *)(v6 + 64) + 8 * v9), 8 * v10 - 8 * v9);
    goto LABEL_19;
  }
LABEL_20:
  llvm::cl::Option::addArgument(v1);
}

mlir::Pass::Statistic *mlir::Pass::Statistic::Statistic(mlir::Pass::Statistic *this, mlir::Pass *a2, const char *a3, const char *a4)
{
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v7 = (char *)*((_QWORD *)a2 + 17);
  v6 = *((_QWORD *)a2 + 18);
  v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *(_QWORD *)v7 = this;
    v9 = (uint64_t)(v7 + 8);
    goto LABEL_23;
  }
  v10 = (char *)*((_QWORD *)a2 + 16);
  v11 = (v7 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    abort();
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v15 = (char *)operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = this;
    v9 = (uint64_t)(v16 + 8);
    v18 = (char *)(v7 - v10);
    if (v7 == v10)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (char *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = this;
  v9 = 8 * v11 + 8;
  v18 = (char *)(v7 - v10);
  if (v7 != v10)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_28;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v7[-v21];
    v16 -= v21;
    v22 = &v15[8 * v11 - 16];
    v23 = (__int128 *)(v7 - 16);
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *v23;
      *((_OWORD *)v22 - 1) = *(v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 2;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v26 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v16 - 1) = v26;
        v16 -= 8;
      }
      while (v8 != v10);
    }
    v8 = (char *)*((_QWORD *)a2 + 16);
  }
LABEL_21:
  *((_QWORD *)a2 + 16) = v16;
  *((_QWORD *)a2 + 17) = v9;
  *((_QWORD *)a2 + 18) = v17;
  if (v8)
    operator delete(v8);
LABEL_23:
  *((_QWORD *)a2 + 17) = v9;
  return this;
}

void mlir::OpPassManager::mergeStatisticsInto(mlir::OpPassManager *this, mlir::OpPassManager *a2)
{
  uint64_t v4;
  uint64_t MemorySpace;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  mlir::OpPassManager *v16;
  mlir::OpPassManager *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;

  v4 = mlir::OpPassManager::begin(this);
  MemorySpace = mlir::MemRefType::getMemorySpace(this);
  v6 = (uint64_t *)mlir::OpPassManager::begin(a2);
  v7 = mlir::MemRefType::getMemorySpace(a2);
  if (v4 != MemorySpace)
  {
    v8 = (uint64_t *)v7;
    if ((uint64_t *)v7 != v6)
    {
      do
      {
        v9 = *(_QWORD *)v4;
        v10 = *v6;
        v11 = *(_QWORD *)(*(_QWORD *)v4 + 8);
        if ((v12 & 1) == 0
        {
          v28 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
          v29 = 81;
          v21 = llvm::StringRef::find((uint64_t *)&v28, "DesiredTypeName = ", 0x12uLL, 0);
          if (v29 >= v21)
            v22 = v21;
          else
            v22 = v29;
          v23 = &v28[v22];
          v24 = v29 - v22;
          v25 = 18;
          if (v24 < 0x12)
            v25 = v24;
          v26 = v24 - v25;
          if (v26 >= v26 - 1)
            v27 = v26 - 1;
          else
            v27 = v26;
          mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v23[v25], v27);
        }
        if (v11 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
        {
          v13 = *(unsigned int *)(v9 + 352);
          v14 = *(unsigned int *)(v10 + 352);
          if ((_DWORD)v13 && (_DWORD)v14 != 0)
          {
            v16 = *(mlir::OpPassManager **)(v9 + 344);
            v17 = *(mlir::OpPassManager **)(v10 + 344);
            v18 = 8 * v14 - 8;
            v19 = 8 * v13 - 8;
            do
            {
              mlir::OpPassManager::mergeStatisticsInto(v16, v17);
              if (!v19)
                break;
              v16 = (mlir::OpPassManager *)((char *)v16 + 8);
              v17 = (mlir::OpPassManager *)((char *)v17 + 8);
              v20 = v18;
              v18 -= 8;
              v19 -= 8;
            }
            while (v20);
          }
        }
        v4 += 8;
        if (v4 == MemorySpace)
          break;
        ++v6;
      }
      while (v6 != v8);
    }
  }
}

llvm::raw_ostream *mlir::PassManager::dumpStatistics(mlir::PassManager *this)
{
  int v2;
  llvm::raw_ostream *v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  llvm::raw_ostream *v7;
  _DWORD *v8;
  llvm::raw_ostream *v9;
  void *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  __int128 v16;
  llvm::raw_ostream *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t MemorySpace;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  prepareStatistics(this);
  v2 = *((_DWORD *)this + 4);
  llvm::CreateInfoOutputFile(&v27);
  v3 = v27;
  v4 = *((_QWORD *)v27 + 4);
  if ((unint64_t)(*((_QWORD *)v27 + 3) - v4) > 2)
  {
    *(_BYTE *)(v4 + 2) = 61;
    *(_WORD *)v4 = 15677;
    *((_QWORD *)v3 + 4) += 3;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v27, "===", 3uLL);
  }
  v5 = operator new(0x50uLL);
  *(_QWORD *)&v6 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v6 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v5 = v6;
  v5[1] = v6;
  v5[2] = v6;
  v5[3] = v6;
  *(_OWORD *)((char *)v5 + 57) = v6;
  *((_BYTE *)v5 + 73) = 0;
  v7 = llvm::raw_ostream::write(v3, (const char *)v5, 0x49uLL);
  v8 = (_DWORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 3uLL)
  {
    *v8 = 171785533;
    *((_QWORD *)v7 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v7, "===\n", 4uLL);
  }
  operator delete(v5);
  v9 = llvm::raw_ostream::indent(v27, 0x19u);
  v10 = (void *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 <= 0x1DuLL)
  {
    v9 = llvm::raw_ostream::write(v9, "... Pass statistics report ...", 0x1EuLL);
    v11 = (_BYTE *)*((_QWORD *)v9 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v9 + 3))
      goto LABEL_9;
LABEL_12:
    *((_QWORD *)v9 + 4) = v11 + 1;
    *v11 = 10;
    v12 = v27;
    v13 = *((_QWORD *)v27 + 4);
    if ((unint64_t)(*((_QWORD *)v27 + 3) - v13) > 2)
      goto LABEL_10;
    goto LABEL_13;
  }
  qmemcpy(v10, "... Pass statistics report ...", 30);
  v14 = *((_QWORD *)v9 + 3);
  v11 = (_BYTE *)(*((_QWORD *)v9 + 4) + 30);
  *((_QWORD *)v9 + 4) = v11;
  if ((unint64_t)v11 < v14)
    goto LABEL_12;
LABEL_9:
  llvm::raw_ostream::write(v9, 10);
  v12 = v27;
  v13 = *((_QWORD *)v27 + 4);
  if ((unint64_t)(*((_QWORD *)v27 + 3) - v13) > 2)
  {
LABEL_10:
    *(_BYTE *)(v13 + 2) = 61;
    *(_WORD *)v13 = 15677;
    *((_QWORD *)v12 + 4) += 3;
    goto LABEL_14;
  }
LABEL_13:
  v12 = llvm::raw_ostream::write(v12, "===", 3uLL);
LABEL_14:
  v15 = operator new(0x50uLL);
  *(_QWORD *)&v16 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v16 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v15 = v16;
  v15[1] = v16;
  v15[2] = v16;
  v15[3] = v16;
  *(_OWORD *)((char *)v15 + 57) = v16;
  *((_BYTE *)v15 + 73) = 0;
  v17 = llvm::raw_ostream::write(v12, (const char *)v15, 0x49uLL);
  v18 = (_DWORD *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 3uLL)
  {
    *v18 = 171785533;
    *((_QWORD *)v17 + 4) += 4;
    operator delete(v15);
    if (v2)
      goto LABEL_27;
  }
  else
  {
    llvm::raw_ostream::write(v17, "===\n", 4uLL);
    operator delete(v15);
    if (v2)
      goto LABEL_27;
  }
  v29[0] = off_1E0E502A8;
  v29[1] = v29;
  v30 = v29;
  v19 = (uint64_t *)mlir::OpPassManager::begin(this);
  MemorySpace = mlir::MemRefType::getMemorySpace(this);
  if (v19 != (uint64_t *)MemorySpace)
  {
    v21 = (uint64_t *)MemorySpace;
    do
    {
      v28 = *v19;
      if (!v30)
        std::__throw_bad_function_call[abi:nn180100]();
      (*(void (**)(_QWORD *, uint64_t *))(*v30 + 48))(v30, &v28);
      ++v19;
    }
    while (v19 != v21);
  }
  v22 = v30;
  if (v30 == v29)
  {
    v23 = 4;
    v22 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_27;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_27:
  v24 = v27;
  v25 = (_BYTE *)*((_QWORD *)v27 + 4);
  if (*((_BYTE **)v27 + 3) != v25)
  {
    *v25 = 10;
    ++*((_QWORD *)v24 + 4);
    result = v27;
    if (*((_QWORD *)v27 + 4) != *((_QWORD *)v27 + 2))
      goto LABEL_29;
LABEL_32:
    v27 = 0;
    return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 8))(result);
  }
  llvm::raw_ostream::write(v27, "\n", 1uLL);
  result = v27;
  if (*((_QWORD *)v27 + 4) == *((_QWORD *)v27 + 2))
    goto LABEL_32;
LABEL_29:
  llvm::raw_ostream::flush_nonempty(result);
  result = v27;
  v27 = 0;
  if (result)
    return (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)result + 8))(result);
  return result;
}

void prepareStatistics(mlir::OpPassManager *a1)
{
  uint64_t v2;
  uint64_t MemorySpace;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  mlir::OpPassManager *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;

  v2 = mlir::OpPassManager::begin(a1);
  MemorySpace = mlir::MemRefType::getMemorySpace(a1);
  if (v2 != MemorySpace)
  {
    v4 = MemorySpace;
    do
    {
      v5 = *(_QWORD *)v2;
      v6 = *(_QWORD *)(*(_QWORD *)v2 + 8);
      if ((v7 & 1) == 0
      {
        v24 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
        v25 = 81;
        v17 = llvm::StringRef::find((uint64_t *)&v24, "DesiredTypeName = ", 0x12uLL, 0);
        if (v25 >= v17)
          v18 = v17;
        else
          v18 = v25;
        v19 = &v24[v18];
        v20 = v25 - v18;
        v21 = 18;
        if (v20 < 0x12)
          v21 = v20;
        v22 = v20 - v21;
        if (v22 >= v22 - 1)
          v23 = v22 - 1;
        else
          v23 = v22;
        mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v19[v21], v23);
      }
      if (v6 == mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id)
      {
        v8 = *(mlir::OpPassManager **)(v5 + 344);
        v9 = *(unsigned int *)(v5 + 352);
        v10 = *(_DWORD *)(v5 + 376);
        if (v10)
        {
          v11 = *(_QWORD *)(v5 + 368);
          v12 = v11 + 24 * v10;
          do
          {
            v13 = *(unsigned int *)(v11 + 8);
            if ((_DWORD)v13)
            {
              v14 = 0;
              v15 = 8 * v13;
              do
              {
                prepareStatistics((mlir::OpPassManager *)(*(_QWORD *)v11 + v14));
                mlir::OpPassManager::mergeStatisticsInto((mlir::OpPassManager *)(*(_QWORD *)v11 + v14), (mlir::OpPassManager *)((char *)v8 + v14));
                v14 += 8;
              }
              while (v15 != v14);
            }
            v11 += 24;
          }
          while (v11 != v12);
        }
        if ((_DWORD)v9)
        {
          v16 = 8 * v9;
          do
          {
            prepareStatistics(v8);
            v8 = (mlir::OpPassManager *)((char *)v8 + 8);
            v16 -= 8;
          }
          while (v16);
        }
      }
      v2 += 8;
    }
    while (v2 != v4);
  }
}

_QWORD *std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E0E502A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E0E502A8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const char **v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t MemorySpace;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;

  v3 = *a2;
  v4 = *(const char ***)(*a2 + 8);
  v6 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v5 & 1) == 0)
    goto LABEL_13;
  while (v4 == (const char **)v6[128])
  {
    v7 = *(unsigned int *)(v3 + 352);
    if (!(_DWORD)v7)
      break;
    v3 = *(_QWORD *)(v3 + 344);
    v8 = v3 + 8 * v7;
    while (1)
    {
      v4 = (const char **)mlir::OpPassManager::begin((mlir::OpPassManager *)v3);
      MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)v3);
      if (v4 != (const char **)MemorySpace)
        break;
LABEL_6:
      v3 += 8;
      if (v3 == v8)
        return;
    }
    v6 = (uint64_t *)MemorySpace;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 8);
      v19 = *v4;
      v11 = *(_QWORD *)(v10 + 24);
      if (!v11)
        break;
      (*(void (**)(uint64_t, const char **))(*(_QWORD *)v11 + 48))(v11, &v19);
      if (++v4 == (const char **)v6)
        goto LABEL_6;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_13:
    {
      v19 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      v20 = 81;
      v12 = llvm::StringRef::find((uint64_t *)&v19, "DesiredTypeName = ", 0x12uLL, 0);
      if (v20 >= v12)
        v13 = v12;
      else
        v13 = v20;
      v14 = &v19[v13];
      v15 = v20 - v13;
      if (v20 - v13 >= 0x12)
        v16 = 18;
      else
        v16 = v20 - v13;
      v17 = v15 - v16;
      if (v17 >= v17 - 1)
        v18 = v17 - 1;
      else
        v18 = v17;
      v6[128] = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v14[v16], v18);
    }
  }
}

uint64_t std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZL18printResultsAsListRN4llvm11raw_ostreamERN4mlir13OpPassManagerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0,std::allocator<printResultsAsList(llvm::raw_ostream &,mlir::OpPassManager &)::$_0>,void ()(mlir::Pass *)>::target_type()
{
}

char *mlir::PassManager::enableTiming(mlir::PassManager *this)
{
  mlir::DefaultTimingManager *v2;
  uint64_t v3;
  char *v4;
  char *result;
  char *v6;

  v2 = (mlir::DefaultTimingManager *)operator new(0x18uLL);
  v3 = mlir::DefaultTimingManager::DefaultTimingManager(v2);
  mlir::DefaultTimingManager::setEnabled(v3, 1);
  if (!mlir::TimingManager::getRootTimer(v2))
    return (char *)(*(uint64_t (**)(mlir::DefaultTimingManager *))(*(_QWORD *)v2 + 8))(v2);
  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = off_1E0E15130;
  *((_DWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_DWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 7) = v2;
  mlir::TimingManager::getRootScope(v2, (mlir::TimingManager **)v4 + 8);
  *((_QWORD *)v4 + 10) = v4 + 64;
  v6 = v4;
  mlir::PassManager::addInstrumentation((uint64_t)this, (uint64_t *)&v6);
  result = v6;
  v6 = 0;
  if (result)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  return result;
}

void `anonymous namespace'::PassTiming::~PassTiming(_anonymous_namespace_::PassTiming *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E0E15130;
  v3 = (_QWORD *)((char *)this + 64);
  v2 = *((_QWORD *)this + 8);
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, *((_QWORD *)this + 9));
  *v3 = 0;
  v3[1] = 0;
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_DWORD *)this + 12);
  v6 = *((_QWORD *)this + 4);
  if (v5)
  {
    v7 = v6 + 88 * v5;
    do
    {
      if (*(_QWORD *)v6 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = *(char **)(v6 + 8);
        v9 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v9)
        {
          v10 = 16 * v9;
          do
          {
            v11 = *(_QWORD *)&v8[v10 - 16];
            if (v11)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, *(_QWORD *)&v8[v10 - 8]);
            *(_QWORD *)&v8[v10 - 16] = 0;
            *(_QWORD *)&v8[v10 - 8] = 0;
            v10 -= 16;
          }
          while (v10);
          v8 = *(char **)(v6 + 8);
        }
        if (v8 != (char *)(v6 + 24))
          free(v8);
      }
      v6 += 88;
    }
    while (v6 != v7);
    v6 = *((_QWORD *)this + 4);
    v12 = 88 * *((unsigned int *)this + 12);
  }
  else
  {
    v12 = 0;
  }
  llvm::deallocate_buffer((llvm *)v6, (void *)v12);
}

{
}

void sub_18056F76C()
{
  uint64_t v0;

  llvm::deallocate_buffer(*(llvm **)(v0 + 8), (void *)(24 * *(unsigned int *)(v0 + 24)));
}

void sub_18056F784(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  mlir::GenericProgramPoint *v16;

  mlir::GenericProgramPoint::~GenericProgramPoint(v16);
}

void sub_18056F7A8(void *__p)
{
  operator delete(__p);
}

uint64_t `anonymous namespace'::PassTiming::runBeforePipeline(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t *a4)
{
  uint64_t threadid;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t *inserted;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _OWORD *Address;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  threadid = llvm::get_threadid((llvm *)a1);
  v41 = threadid;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 48);
  if (!v10)
  {
    v19 = 0;
LABEL_13:
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(a1 + 32, v19, &v41);
    goto LABEL_14;
  }
  v11 = v10 - 1;
  v12 = v11 & (37 * threadid);
  inserted = (uint64_t *)(v9 + 88 * v12);
  v14 = *inserted;
  if (threadid != *inserted)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != -1)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -2;
      if (v17)
        v15 = inserted;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      inserted = (uint64_t *)(v9 + 88 * v12);
      v14 = *inserted;
      if (threadid == *inserted)
        goto LABEL_14;
    }
    if (v15)
      v19 = v15;
    else
      v19 = inserted;
    goto LABEL_13;
  }
LABEL_14:
  v42 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::LookupBucketFor<mlir::PassInstrumentation::PipelineParentInfo>((uint64_t *)(a1 + 8), a4, &v42))
  {
    v20 = v42;
    if (v42 != *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 24))
    {
      v21 = *(_DWORD *)(a1 + 48);
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 32);
        v23 = v21 - 1;
        v24 = (37 * *a4) & v23;
        v25 = (uint64_t *)(v22 + 88 * v24);
        v26 = *v25;
        if (*a4 == *v25)
          goto LABEL_34;
        v27 = 0;
        v28 = 1;
        while (v26 != -1)
        {
          if (v27)
            v29 = 0;
          else
            v29 = v26 == -2;
          if (v29)
            v27 = v25;
          v30 = v24 + v28++;
          v24 = v30 & v23;
          v25 = (uint64_t *)(v22 + 88 * v24);
          v26 = *v25;
          if (*a4 == *v25)
            goto LABEL_34;
        }
        if (v27)
          v36 = v27;
        else
          v36 = v25;
      }
      else
      {
        v36 = 0;
      }
      v25 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(a1 + 32, v36, a4);
LABEL_34:
      v31 = (uint64_t *)(v25[1] + 16 * *(unsigned int *)(v20 + 16));
      v32 = a3;
      v42 = a2;
      v43 = a3;
      v33 = *v31;
      if (!*v31)
        goto LABEL_35;
      goto LABEL_28;
    }
  }
  v31 = *(uint64_t **)(a1 + 80);
  v32 = a3;
  v42 = a2;
  v43 = a3;
  v33 = *v31;
  if (!*v31)
  {
LABEL_35:
    v35 = 0;
    goto LABEL_36;
  }
LABEL_28:
  if (v32)
    v34 = a2;
  else
    v34 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 24))(v33, v35);
LABEL_36:
  v39 = v33;
  v40 = v35;
  Address = llvm::SmallVectorTemplateBase<mlir::TimingScope,false>::reserveForParamAndGetAddress((uint64_t)(inserted + 1), (unint64_t)&v39, 1);
  *(_OWORD *)(inserted[1] + 16 * *((unsigned int *)inserted + 4)) = *Address;
  *(_QWORD *)Address = 0;
  *((_QWORD *)Address + 1) = 0;
  ++*((_DWORD *)inserted + 4);
  result = v39;
  if (v39)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 32))(v39, v40);
  return result;
}

uint64_t `anonymous namespace'::PassTiming::runAfterPipeline(llvm *a1)
{
  uint64_t threadid;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t *inserted;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;

  threadid = llvm::get_threadid(a1);
  v5 = *((_QWORD *)a1 + 4);
  v4 = (uint64_t)a1 + 32;
  v3 = v5;
  v19 = threadid;
  v6 = *(_DWORD *)(v4 + 16);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = (v6 - 1) & (37 * threadid);
    inserted = (uint64_t *)(v3 + 88 * v8);
    v10 = *inserted;
    if (threadid == *inserted)
      goto LABEL_14;
    v11 = 0;
    v12 = 1;
    while (v10 != -1)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -2;
      if (v13)
        v11 = inserted;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      inserted = (uint64_t *)(v3 + 88 * (v14 & v7));
      v10 = *inserted;
      if (threadid == *inserted)
        goto LABEL_14;
    }
    if (v11)
      v15 = v11;
    else
      v15 = inserted;
  }
  else
  {
    v15 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(v4, v15, &v19);
LABEL_14:
  v16 = *((_DWORD *)inserted + 4) - 1;
  *((_DWORD *)inserted + 4) = v16;
  v17 = (uint64_t *)(inserted[1] + 16 * v16);
  result = *v17;
  if (*v17)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, v17[1]);
  *v17 = 0;
  v17[1] = 0;
  return result;
}

uint64_t `anonymous namespace'::PassTiming::runBeforePass(_anonymous_namespace_::PassTiming *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t threadid;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t *inserted;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t *v21;
  unsigned __int8 v22;
  mlir::Pass *v23;
  uint64_t v24;
  mlir::Pass *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  mlir::Pass *v39;
  _QWORD *v41;
  int v42;
  BOOL v43;
  unsigned int v45;
  _OWORD *Address;
  uint64_t result;
  _QWORD *v49;
  mlir::Pass *v50;
  uint64_t v51;
  mlir::Pass *v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  mlir::Pass *v64;

  threadid = llvm::get_threadid(this);
  v62 = threadid;
  v6 = *((_QWORD *)this + 4);
  v7 = *((_DWORD *)this + 12);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = v8 & (37 * threadid);
    inserted = (uint64_t *)(v6 + 88 * v9);
    v11 = *inserted;
    if (threadid == *inserted)
      goto LABEL_14;
    v12 = 0;
    v13 = 1;
    while (v11 != -1)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -2;
      if (v14)
        v12 = inserted;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      inserted = (uint64_t *)(v6 + 88 * v9);
      v11 = *inserted;
      if (threadid == *inserted)
        goto LABEL_14;
    }
    if (v12)
      v16 = v12;
    else
      v16 = inserted;
  }
  else
  {
    v16 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>((uint64_t)this + 32, v16, &v62);
LABEL_14:
  v17 = *((unsigned int *)inserted + 4);
  if ((_DWORD)v17)
  {
    v18 = (_QWORD *)(inserted[1] + 16 * v17 - 16);
    v19 = *((_QWORD *)a2 + 1);
    v21 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v20 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v18 = (_QWORD *)*((_QWORD *)this + 10);
    v19 = *((_QWORD *)a2 + 1);
    v21 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v22 & 1) != 0)
      goto LABEL_18;
  }
  v21 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if (v54)
  {
    *(_QWORD *)&v63 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
    *((_QWORD *)&v63 + 1) = 81;
    v55 = llvm::StringRef::find((uint64_t *)&v63, "DesiredTypeName = ", 0x12uLL, 0);
    if (*((_QWORD *)&v63 + 1) >= v55)
      v56 = v55;
    else
      v56 = *((_QWORD *)&v63 + 1);
    v57 = v63 + v56;
    v58 = *((_QWORD *)&v63 + 1) - v56;
    if (*((_QWORD *)&v63 + 1) - v56 >= 0x12)
      v59 = 18;
    else
      v59 = *((_QWORD *)&v63 + 1) - v56;
    v60 = v58 - v59;
    if (v60 >= v60 - 1)
      v61 = v60 - 1;
    else
      v61 = v60;
    mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v57 + v59, v61);
    v21 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  }
LABEL_18:
  if (v19 != v21[128])
  {
    v23 = (mlir::Pass *)*((_QWORD *)a2 + 42);
    v64 = a2;
    v24 = *v18;
    if (*v18)
    {
      if (v23)
        v25 = v23;
      else
        v25 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v26);
    }
    else
    {
      v26 = 0;
    }
    *(_QWORD *)&v63 = v24;
    *((_QWORD *)&v63 + 1) = v26;
    goto LABEL_47;
  }
  v27 = *((_DWORD *)inserted + 4);
  v30 = *((_QWORD *)this + 1);
  v29 = (char *)this + 8;
  v28 = v30;
  *(_QWORD *)&v63 = v62;
  *((_QWORD *)&v63 + 1) = a2;
  v31 = *((_DWORD *)v29 + 4);
  if (!v31)
  {
    v49 = 0;
LABEL_51:
    v37 = llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::InsertIntoBucketImpl<mlir::PassInstrumentation::PipelineParentInfo>((uint64_t)v29, (uint64_t)&v63, &v63, v49);
    *(_OWORD *)v37 = v63;
    *((_DWORD *)v37 + 4) = 0;
    goto LABEL_52;
  }
  v32 = ((0x2500000000 * v62) | (a2 >> 4) ^ (a2 >> 9))
      + ~((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32);
  v33 = (v32 ^ (v32 >> 22)) + ~((v32 ^ (v32 >> 22)) << 13);
  v34 = (9 * (v33 ^ (v33 >> 8))) ^ ((9 * (v33 ^ (v33 >> 8))) >> 15);
  v35 = v31 - 1;
  v36 = v35 & (((v34 + ~(v34 << 27)) >> 31) ^ (v34 + ~((_DWORD)v34 << 27)));
  v37 = (_QWORD *)(v28 + 24 * v36);
  v38 = *v37;
  v39 = (mlir::Pass *)v37[1];
  if (v62 != *v37 || v39 != a2)
  {
    v41 = 0;
    v42 = 1;
    while (v38 != -1 || v39 != (mlir::Pass *)-4096)
    {
      if (v41)
        v43 = 0;
      else
        v43 = v39 == (mlir::Pass *)-8192;
      if (v43 && v38 == -2)
        v41 = v37;
      v45 = v36 + v42++;
      v36 = v45 & v35;
      v37 = (_QWORD *)(v28 + 24 * v36);
      v38 = *v37;
      v39 = (mlir::Pass *)v37[1];
      if (v62 == *v37 && v39 == a2)
        goto LABEL_52;
    }
    if (v41)
      v49 = v41;
    else
      v49 = v37;
    goto LABEL_51;
  }
LABEL_52:
  *((_DWORD *)v37 + 4) = v27;
  v50 = (mlir::Pass *)*((_QWORD *)a2 + 42);
  v64 = a2;
  v51 = *v18;
  if (*v18)
  {
    if (v50)
      v52 = v50;
    else
      v52 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 24))(v51, v53);
    *(_QWORD *)&v63 = v51;
    *((_QWORD *)&v63 + 1) = v53;
    if (*((_DWORD *)a2 + 88) <= 1u)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 48))(v51, v53);
  }
  else
  {
    v63 = 0uLL;
  }
LABEL_47:
  Address = llvm::SmallVectorTemplateBase<mlir::TimingScope,false>::reserveForParamAndGetAddress((uint64_t)(inserted + 1), (unint64_t)&v63, 1);
  *(_OWORD *)(inserted[1] + 16 * *((unsigned int *)inserted + 4)) = *Address;
  *(_QWORD *)Address = 0;
  *((_QWORD *)Address + 1) = 0;
  ++*((_DWORD *)inserted + 4);
  result = v63;
  if ((_QWORD)v63)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v63 + 32))(v63, *((_QWORD *)&v63 + 1));
  return result;
}

uint64_t `anonymous namespace'::PassTiming::runAfterPass(int32x2_t *this, mlir::Pass *a2, mlir::Operation *a3)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  __int32 v8;
  int32x2_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int32 v13;
  unsigned int v14;
  uint64_t *v15;
  mlir::Pass *v16;
  uint64_t v17;
  int32x2_t v19;
  int32x2_t *v20;
  int32x2_t v21;
  __int32 v22;
  __int32 v23;
  unsigned int v24;
  uint64_t *inserted;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t result;
  int v35;
  unsigned int v36;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t threadid;
  const char *v48;
  unint64_t v49;

  threadid = llvm::get_threadid((llvm *)this);
  v5 = *((_QWORD *)a2 + 1);
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v46 = *((_QWORD *)a2 + 1);
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v5 = v46;
    if (v38)
    {
      v48 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::OpToOpPassAdaptor]";
      v49 = 81;
      v39 = llvm::StringRef::find((uint64_t *)&v48, "DesiredTypeName = ", 0x12uLL, 0);
      if (v49 >= v39)
        v40 = v39;
      else
        v40 = v49;
      v41 = &v48[v40];
      v42 = v49 - v40;
      if (v49 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v49 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::detail::OpToOpPassAdaptor,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v5 = v46;
    }
  }
  if (v5 == v7[128])
  {
    v8 = this[3].i32[0];
    if (v8)
    {
      v9 = this[1];
      v10 = ~((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32)
          + ((a2 >> 4) ^ (a2 >> 9))
          + 0x2500000000 * threadid;
      v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
      v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
      v13 = v8 - 1;
      v14 = v13 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
      v15 = (uint64_t *)(*(_QWORD *)&v9 + 24 * v14);
      v17 = *v15;
      v16 = (mlir::Pass *)v15[1];
      if (threadid == *v15 && v16 == a2)
      {
LABEL_9:
        *(_OWORD *)v15 = xmmword_181241670;
        this[2] = vadd_s32(this[2], (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v35 = 1;
        while (v17 != -1 || v16 != (mlir::Pass *)-4096)
        {
          v36 = v14 + v35++;
          v14 = v36 & v13;
          v15 = (uint64_t *)(*(_QWORD *)&v9 + 24 * v14);
          v17 = *v15;
          v16 = (mlir::Pass *)v15[1];
          if (threadid == *v15 && v16 == a2)
            goto LABEL_9;
        }
      }
    }
  }
  v21 = this[4];
  v20 = this + 4;
  v19 = v21;
  v22 = v20[2].i32[0];
  if (v22)
  {
    v23 = v22 - 1;
    v24 = (37 * threadid) & v23;
    inserted = (uint64_t *)(*(_QWORD *)&v19 + 88 * v24);
    v26 = *inserted;
    if (threadid == *inserted)
      goto LABEL_23;
    v27 = 0;
    v28 = 1;
    while (v26 != -1)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -2;
      if (v29)
        v27 = inserted;
      v30 = v24 + v28++;
      v24 = v30 & v23;
      inserted = (uint64_t *)(*(_QWORD *)&v19 + 88 * v24);
      v26 = *inserted;
      if (threadid == *inserted)
        goto LABEL_23;
    }
    if (v27)
      v31 = v27;
    else
      v31 = inserted;
  }
  else
  {
    v31 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>((uint64_t)v20, v31, &threadid);
LABEL_23:
  v32 = *((_DWORD *)inserted + 4) - 1;
  *((_DWORD *)inserted + 4) = v32;
  v33 = (uint64_t *)(inserted[1] + 16 * v32);
  result = *v33;
  if (*v33)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, v33[1]);
  *v33 = 0;
  v33[1] = 0;
  return result;
}

uint64_t `anonymous namespace'::PassTiming::runAfterPassFailed(_anonymous_namespace_::PassTiming *this, mlir::Pass *a2, mlir::Operation *a3)
{
  return (*(uint64_t (**)(_anonymous_namespace_::PassTiming *, mlir::Pass *, mlir::Operation *))(*(_QWORD *)this + 40))(this, a2, a3);
}

uint64_t `anonymous namespace'::PassTiming::runBeforeAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t threadid;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t *inserted;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *Address;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  threadid = llvm::get_threadid((llvm *)a1);
  v30 = threadid;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 48);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = v11 & (37 * threadid);
    inserted = (uint64_t *)(v9 + 88 * v12);
    v14 = *inserted;
    if (threadid == *inserted)
      goto LABEL_14;
    v15 = 0;
    v16 = 1;
    while (v14 != -1)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -2;
      if (v17)
        v15 = inserted;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      inserted = (uint64_t *)(v9 + 88 * v12);
      v14 = *inserted;
      if (threadid == *inserted)
        goto LABEL_14;
    }
    if (v15)
      v19 = v15;
    else
      v19 = inserted;
  }
  else
  {
    v19 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(a1 + 32, v19, &v30);
LABEL_14:
  v20 = *((unsigned int *)inserted + 4);
  if ((_DWORD)v20)
  {
    v21 = inserted[1] + 16 * v20;
    v31 = a2;
    v32 = a3;
    v24 = *(_QWORD *)(v21 - 16);
    v22 = (uint64_t *)(v21 - 16);
    v23 = v24;
    if (v24)
    {
LABEL_16:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v25);
      goto LABEL_19;
    }
  }
  else
  {
    v22 = *(uint64_t **)(a1 + 80);
    v31 = a2;
    v32 = a3;
    v23 = *v22;
    if (*v22)
      goto LABEL_16;
  }
  v25 = 0;
LABEL_19:
  v28 = v23;
  v29 = v25;
  Address = llvm::SmallVectorTemplateBase<mlir::TimingScope,false>::reserveForParamAndGetAddress((uint64_t)(inserted + 1), (unint64_t)&v28, 1);
  *(_OWORD *)(inserted[1] + 16 * *((unsigned int *)inserted + 4)) = *Address;
  *(_QWORD *)Address = 0;
  *((_QWORD *)Address + 1) = 0;
  ++*((_DWORD *)inserted + 4);
  result = v28;
  if (v28)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, v29);
  return result;
}

uint64_t `anonymous namespace'::PassTiming::runAfterAnalysis(llvm *a1)
{
  uint64_t threadid;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t *inserted;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;

  threadid = llvm::get_threadid(a1);
  v5 = *((_QWORD *)a1 + 4);
  v4 = (uint64_t)a1 + 32;
  v3 = v5;
  v19 = threadid;
  v6 = *(_DWORD *)(v4 + 16);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = (v6 - 1) & (37 * threadid);
    inserted = (uint64_t *)(v3 + 88 * v8);
    v10 = *inserted;
    if (threadid == *inserted)
      goto LABEL_14;
    v11 = 0;
    v12 = 1;
    while (v10 != -1)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -2;
      if (v13)
        v11 = inserted;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      inserted = (uint64_t *)(v3 + 88 * (v14 & v7));
      v10 = *inserted;
      if (threadid == *inserted)
        goto LABEL_14;
    }
    if (v11)
      v15 = v11;
    else
      v15 = inserted;
  }
  else
  {
    v15 = 0;
  }
  inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(v4, v15, &v19);
LABEL_14:
  v16 = *((_DWORD *)inserted + 4) - 1;
  *((_DWORD *)inserted + 4) = v16;
  v17 = (uint64_t *)(inserted[1] + 16 * v16);
  result = *v17;
  if (*v17)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, v17[1]);
  *v17 = 0;
  v17[1] = 0;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::InsertIntoBucket<unsigned long long const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *buffer;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  BOOL v27;
  unsigned int v28;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v9 = 2 * v6;
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a2;
      goto LABEL_4;
    }
    v9 = *(_DWORD *)(a1 + 16);
  }
  v10 = *(uint64_t **)a1;
  v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40)
    v14 = v13 + 1;
  else
    v14 = 64;
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(88 * v14, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (v10)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::moveFromOldBuckets(a1, v10, &v10[11 * v6]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(88 * v6));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(_DWORD *)(a1 + 16);
  v17 = 88 * v16 - 88;
  v18 = buffer;
  if (v17 < 0x58)
    goto LABEL_34;
  v19 = v17 / 0x58 + 1;
  v18 = &buffer[11 * (v19 & 0x7FFFFFFFFFFFFFELL)];
  v20 = v19 & 0x7FFFFFFFFFFFFFELL;
  v21 = buffer;
  do
  {
    *v21 = -1;
    v21[11] = -1;
    v21 += 22;
    v20 -= 2;
  }
  while (v20);
  if (v19 != (v19 & 0x7FFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *v18 = -1;
      v18 += 11;
    }
    while (v18 != &buffer[11 * v16]);
  }
  v7 = *a3;
  v22 = v16 - 1;
  v23 = (37 * *a3) & v22;
  a2 = &buffer[11 * v23];
  v24 = *a2;
  if (*a3 != *a2)
  {
    v25 = 0;
    v26 = 1;
    while (v24 != -1)
    {
      if (v25)
        v27 = 0;
      else
        v27 = v24 == -2;
      if (v27)
        v25 = a2;
      v28 = v23 + v26++;
      v23 = v28 & v22;
      a2 = &buffer[11 * v23];
      v24 = *a2;
      if (v7 == *a2)
        goto LABEL_4;
    }
    if (v25)
      a2 = v25;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  a2[1] = (uint64_t)(a2 + 3);
  a2[2] = 0x400000000;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>,unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::SmallVector<mlir::TimingScope,4u>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 88 * v6 - 88;
    if (v8 < 0x58)
    {
      v9 = *(_QWORD **)a1;
LABEL_7:
      v13 = &v7[11 * v6];
      do
      {
        *v9 = -1;
        v9 += 11;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    v10 = v8 / 0x58 + 1;
    v9 = &v7[11 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    v12 = *(_QWORD **)a1;
    do
    {
      *v12 = -1;
      v12[11] = -1;
      v12 += 22;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL))
      goto LABEL_7;
  }
LABEL_9:
  if (a2 != a3)
  {
    while (1)
    {
      v14 = *v4;
      if ((unint64_t)*v4 <= 0xFFFFFFFFFFFFFFFDLL)
        break;
LABEL_11:
      v4 += 11;
      if (v4 == a3)
        return;
    }
    v15 = *(_DWORD *)(a1 + 16) - 1;
    v16 = v15 & (37 * v14);
    v17 = (unint64_t *)(*(_QWORD *)a1 + 88 * v16);
    v18 = *v17;
    if (v14 != *v17)
    {
      v23 = 0;
      v24 = 1;
      while (v18 != -1)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v18 == -2;
        if (v25)
          v23 = v17;
        v26 = v16 + v24++;
        v16 = v26 & v15;
        v17 = (unint64_t *)(*(_QWORD *)a1 + 88 * (v26 & v15));
        v18 = *v17;
        if (v14 == *v17)
          goto LABEL_14;
      }
      if (v23)
        v17 = v23;
    }
LABEL_14:
    *v17 = v14;
    v17[1] = (unint64_t)(v17 + 3);
    v17[2] = 0x400000000;
    if (*((_DWORD *)v4 + 4))
    {
      llvm::SmallVectorImpl<mlir::TimingScope>::operator=((uint64_t)(v17 + 1), v4 + 1);
      v19 = *((unsigned int *)v4 + 4);
      ++*(_DWORD *)(a1 + 8);
      v20 = (char *)v4[1];
      if (!(_DWORD)v19)
        goto LABEL_22;
      v21 = 16 * v19;
      do
      {
        v22 = *(_QWORD *)&v20[v21 - 16];
        if (v22)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 32))(v22, *(_QWORD *)&v20[v21 - 8]);
        *(_QWORD *)&v20[v21 - 16] = 0;
        *(_QWORD *)&v20[v21 - 8] = 0;
        v21 -= 16;
      }
      while (v21);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
    }
    v20 = (char *)v4[1];
LABEL_22:
    if (v20 != (char *)(v4 + 3))
      free(v20);
    goto LABEL_11;
  }
}

uint64_t llvm::SmallVectorImpl<mlir::TimingScope>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  if ((uint64_t *)a1 != a2)
  {
    v4 = a2 + 2;
    v5 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(_QWORD **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 2 * v7;
        do
        {
          v9 = v6[v8 - 2];
          if (v9)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v6[v8 - 1]);
          v6[v8 - 2] = 0;
          v6[v8 - 1] = 0;
          v8 -= 2;
        }
        while (v8 * 8);
        v6 = *(_QWORD **)a1;
      }
      if (v6 != (_QWORD *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *a2;
      v10 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v4;
      *((_DWORD *)a2 + 3) = 0;
LABEL_12:
      *v10 = 0;
      return a1;
    }
    v10 = a2 + 1;
    v12 = *((unsigned int *)a2 + 2);
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 < v12)
    {
      if (*(_DWORD *)(a1 + 12) >= v12)
      {
        v24 = *(_QWORD **)a1;
        if ((_DWORD)v13)
        {
          v25 = 16 * v13;
          do
          {
            if (*v24)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v24 + 32))(*v24, v24[1]);
            *v24 = 0;
            v24[1] = 0;
            *(_OWORD *)v24 = *(_OWORD *)v5;
            v24 += 2;
            *(_QWORD *)v5 = 0;
            *(_QWORD *)(v5 + 8) = 0;
            v5 += 16;
            v25 -= 16;
          }
          while (v25);
          v24 = *(_QWORD **)a1;
        }
        else
        {
          v13 = 0;
        }
      }
      else
      {
        if ((_DWORD)v13)
        {
          v14 = *(_QWORD **)a1;
          v15 = 2 * v13;
          do
          {
            v16 = v14[v15 - 2];
            if (v16)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, v14[v15 - 1]);
            v14[v15 - 2] = 0;
            v14[v15 - 1] = 0;
            v15 -= 2;
          }
          while (v15 * 8);
        }
        *(_DWORD *)(a1 + 8) = 0;
        v50 = 0;
        v26 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v12, 16, &v50);
        v24 = v26;
        v27 = *(_QWORD **)a1;
        v28 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v28)
        {
          v29 = 16 * v28;
          v30 = v26;
          do
          {
            *v30++ = *(_OWORD *)v27;
            *v27 = 0;
            v27[1] = 0;
            v27 += 2;
            v29 -= 16;
          }
          while (v29);
          v27 = *(_QWORD **)a1;
          v31 = *(unsigned int *)(a1 + 8);
          if ((_DWORD)v31)
          {
            v32 = 2 * v31;
            do
            {
              v33 = v27[v32 - 2];
              if (v33)
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 32))(v33, v27[v32 - 1]);
              v27[v32 - 2] = 0;
              v27[v32 - 1] = 0;
              v32 -= 2;
            }
            while (v32 * 8);
            v27 = *(_QWORD **)a1;
          }
        }
        v41 = v50;
        if (v27 != (_QWORD *)(a1 + 16))
          free(v27);
        v13 = 0;
        *(_QWORD *)a1 = v24;
        *(_DWORD *)(a1 + 12) = v41;
      }
      v42 = *a2;
      v43 = *((unsigned int *)a2 + 2);
      if (v13 != v43)
      {
        v44 = &v24[2 * v13];
        v45 = v42 + 16 * v13;
        v46 = 16 * v43 - 16 * v13;
        do
        {
          *v44++ = *(_OWORD *)v45;
          *(_QWORD *)v45 = 0;
          *(_QWORD *)(v45 + 8) = 0;
          v45 += 16;
          v46 -= 16;
        }
        while (v46);
        v42 = *a2;
      }
      *(_DWORD *)(a1 + 8) = v12;
      v47 = *v10;
      if ((_DWORD)v47)
      {
        v48 = 16 * v47;
        do
        {
          v49 = *(_QWORD *)(v42 + v48 - 16);
          if (v49)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v49 + 32))(v49, *(_QWORD *)(v42 + v48 - 8));
          *(_QWORD *)(v42 + v48 - 16) = 0;
          *(_QWORD *)(v42 + v48 - 8) = 0;
          v48 -= 16;
        }
        while (v48);
      }
      goto LABEL_12;
    }
    v17 = *(_QWORD **)a1;
    if ((_DWORD)v12)
    {
      v18 = 0;
      do
      {
        v20 = &v17[v18];
        v21 = v17[v18];
        if (v21)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, v20[1]);
        v19 = (_QWORD *)(v5 + v18 * 8);
        *v20 = 0;
        v20[1] = 0;
        *(_OWORD *)v20 = *(_OWORD *)(v5 + v18 * 8);
        *v19 = 0;
        v19[1] = 0;
        v18 += 2;
      }
      while (2 * v12 != v18);
      v22 = &v17[v18];
      v23 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 8);
      if ((_QWORD *)v23 == &v17[v18])
        goto LABEL_46;
    }
    else
    {
      v22 = *(_QWORD **)a1;
      v23 = (uint64_t)&v17[2 * v13];
      if ((_QWORD *)v23 == v17)
      {
LABEL_46:
        *(_DWORD *)(a1 + 8) = v12;
        v37 = *((unsigned int *)a2 + 2);
        if ((_DWORD)v37)
        {
          v38 = *a2;
          v39 = 16 * v37;
          do
          {
            v40 = *(_QWORD *)(v38 + v39 - 16);
            if (v40)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 32))(v40, *(_QWORD *)(v38 + v39 - 8));
            *(_QWORD *)(v38 + v39 - 16) = 0;
            *(_QWORD *)(v38 + v39 - 8) = 0;
            v39 -= 16;
          }
          while (v39);
        }
        goto LABEL_12;
      }
    }
    v34 = (_QWORD *)v23;
    do
    {
      v36 = *(v34 - 2);
      v34 -= 2;
      v35 = v36;
      if (v36)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 32))(v35, *(_QWORD *)(v23 - 8));
      *v34 = 0;
      v34[1] = 0;
      v23 = (uint64_t)v34;
    }
    while (v34 != v22);
    goto LABEL_46;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::LookupBucketFor<mlir::PassInstrumentation::PipelineParentInfo>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = a2[1];
    v6 = ((0x2500000000 * *a2) | (v5 >> 4) ^ (v5 >> 9))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = (_QWORD *)(*a1 + 24 * v11);
    v13 = *v12;
    v14 = v12[1];
    if (*a2 == *v12 && v5 == v14)
    {
      result = 1;
      *a3 = v12;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -1 || v14 != -4096)
      {
        if (v16)
          v19 = 0;
        else
          v19 = v14 == -8192;
        if (v19 && v13 == -2)
          v16 = v12;
        v21 = v11 + v17++;
        v11 = v21 & v10;
        v12 = (_QWORD *)(v4 + 24 * (v21 & v10));
        v13 = *v12;
        v14 = v12[1];
        if (*a2 == *v12 && v5 == v14)
        {
          *a3 = v12;
          return result;
        }
      }
      result = 0;
      if (v16)
        v12 = v16;
      *a3 = v12;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

_OWORD *llvm::SmallVectorTemplateBase<mlir::TimingScope,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  _QWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 16 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v21 = a2 - *(_QWORD *)a1;
      v34 = 0;
      v22 = (_QWORD *)(a1 + 16);
      v23 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v34);
      v24 = v23;
      v25 = *(_QWORD **)a1;
      v26 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v26)
      {
        v27 = 16 * v26;
        v28 = v23;
        do
        {
          *v28++ = *(_OWORD *)v25;
          *v25 = 0;
          v25[1] = 0;
          v25 += 2;
          v27 -= 16;
        }
        while (v27);
        v25 = *(_QWORD **)a1;
        v29 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v29)
        {
          v30 = 2 * v29;
          do
          {
            v31 = v25[v30 - 2];
            if (v31)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, v25[v30 - 1]);
            v25[v30 - 2] = 0;
            v25[v30 - 1] = 0;
            v30 -= 2;
          }
          while (v30 * 8);
          v25 = *(_QWORD **)a1;
        }
      }
      v32 = v21 >> 4;
      v33 = v34;
      if (v25 != v22)
        free(v25);
      *(_QWORD *)a1 = v24;
      *(_DWORD *)(a1 + 12) = v33;
      return &v24[v32];
    }
    else
    {
      v34 = 0;
      v10 = (_QWORD *)(a1 + 16);
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 16, &v34);
      v12 = v11;
      v13 = *(_QWORD **)a1;
      v14 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v14)
      {
        v15 = 16 * v14;
        v16 = v11;
        do
        {
          *v16++ = *(_OWORD *)v13;
          *v13 = 0;
          v13[1] = 0;
          v13 += 2;
          v15 -= 16;
        }
        while (v15);
        v13 = *(_QWORD **)a1;
        v17 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v17)
        {
          v18 = 2 * v17;
          do
          {
            v19 = v13[v18 - 2];
            if (v19)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, v13[v18 - 1]);
            v13[v18 - 2] = 0;
            v13[v18 - 1] = 0;
            v18 -= 2;
          }
          while (v18 * 8);
          v13 = *(_QWORD **)a1;
        }
      }
      v20 = v34;
      if (v13 != v10)
        free(v13);
      *(_QWORD *)a1 = v12;
      *(_DWORD *)(a1 + 12) = v20;
    }
  }
  return (_OWORD *)v3;
}

void llvm::function_ref<std::string ()(void)>::callback_fn<`anonymous namespace'::PassTiming::runBeforePipeline(std::optional<mlir::OperationName>,mlir::PassInstrumentation::PipelineParentInfo const&)::{lambda(void)#1}>(_BYTE *a1@<X0>, std::string *a2@<X8>)
{
  const char *AttrData;
  uint64_t v4;
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  if (a1[8])
  {
    v7[0] = *(_QWORD *)(*(_QWORD *)a1 + 8);
    AttrData = (const char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v7);
  }
  else
  {
    AttrData = "any";
    v4 = 3;
  }
  v6 = 1283;
  v5[0] = "'";
  v5[2] = AttrData;
  v5[3] = v4;
  v7[0] = v5;
  v7[2] = "' Pipeline";
  v8 = 770;
  llvm::Twine::str((llvm::Twine *)v7, a2);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::InsertIntoBucketImpl<mlir::PassInstrumentation::PipelineParentInfo>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    ++*(_DWORD *)(a1 + 8);
    if (*a4 != -1)
      goto LABEL_8;
    goto LABEL_4;
  }
  llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::LookupBucketFor<mlir::PassInstrumentation::PipelineParentInfo>((uint64_t *)a1, a3, &v9);
  a4 = v9;
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    goto LABEL_8;
LABEL_4:
  if (a4[1] == -4096)
    return a4;
LABEL_8:
  --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unsigned int v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  llvm *v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (!v10)
      goto LABEL_16;
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v18 = result;
      do
      {
        *v18 = xmmword_181241680;
        *(_OWORD *)((char *)v18 + 24) = xmmword_181241680;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if ((_DWORD)v3)
        {
          v20 = 24 * v3;
          v21 = v4;
          do
          {
            v23 = *((_QWORD *)v21 + 1);
            if ((*(_QWORD *)v21 != -1 || v23 != -4096) && (*(_QWORD *)v21 != -2 || v23 != -8192))
            {
              v28 = 0;
              llvm::DenseMapBase<llvm::DenseMap<mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>,mlir::PassInstrumentation::PipelineParentInfo,unsigned int,llvm::DenseMapInfo<mlir::PassInstrumentation::PipelineParentInfo,void>,llvm::detail::DenseMapPair<mlir::PassInstrumentation::PipelineParentInfo,unsigned int>>::LookupBucketFor<mlir::PassInstrumentation::PipelineParentInfo>((uint64_t *)a1, v21, &v28);
              v22 = v28;
              *v28 = *(_OWORD *)v21;
              *((_DWORD *)v22 + 4) = *((_DWORD *)v21 + 4);
              ++*(_DWORD *)(a1 + 8);
            }
            v21 = (llvm *)((char *)v21 + 24);
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      v12 = result;
    }
    v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *v12 = xmmword_181241680;
      v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      v15 = result;
LABEL_29:
      v27 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *v15 = xmmword_181241680;
        v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v27);
      return result;
    }
    v24 = v14 / 0x18 + 1;
    v15 = (_OWORD *)((char *)result + 24 * (v24 & 0x1FFFFFFFFFFFFFFELL));
    v25 = v24 & 0x1FFFFFFFFFFFFFFELL;
    v26 = result;
    do
    {
      *v26 = xmmword_181241680;
      *(_OWORD *)((char *)v26 + 24) = xmmword_181241680;
      v26 += 3;
      v25 -= 2;
    }
    while (v25);
    if (v24 != (v24 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_29;
  }
  return result;
}

void llvm::function_ref<std::string ()(void)>::callback_fn<`anonymous namespace'::PassTiming::runBeforePass(mlir::Pass *,mlir::Operation *)::{lambda(void)#1}>(mlir::detail::OpToOpPassAdaptor **a1@<X0>, std::string *a2@<X8>)
{
  mlir::detail::OpToOpPassAdaptor::getAdaptorName(*a1, a2);
}

void *llvm::function_ref<std::string ()(void)>::callback_fn<`anonymous namespace'::PassTiming::runBeforePass(mlir::Pass *,mlir::Operation *)::{lambda(void)#2}>@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = memmove(a2, v5, v6);
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

void llvm::function_ref<std::string ()(void)>::callback_fn<`anonymous namespace'::PassTiming::runBeforeAnalysis(llvm::StringRef,mlir::TypeID,mlir::Operation *)::{lambda(void)#1}>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const void *v3;
  std::string::size_type v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  std::string __dst;

  v3 = *(const void **)a1;
  if (!*(_QWORD *)a1)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(a1 + 8);
    p_dst = &__dst;
    if (!v4)
      goto LABEL_11;
  }
  memmove(p_dst, v3, v4);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
LABEL_12:
  v8 = std::string::insert(&__dst, 0, "(A) ");
  *a2 = *v8;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

mlir::pdl::PDLDialect *mlir::pdl::PDLDialect::PDLDialect(mlir::pdl::PDLDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"pdl", 3, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::PDLDialect,void>::id);
  *v3 = off_1E0E4BDB0;
  mlir::Dialect::addOperations<mlir::pdl::ApplyNativeConstraintOp,mlir::pdl::ApplyNativeRewriteOp,mlir::pdl::AttributeOp,mlir::pdl::EraseOp,mlir::pdl::OperandOp,mlir::pdl::OperandsOp,mlir::pdl::OperationOp,mlir::pdl::PatternOp,mlir::pdl::RangeOp,mlir::pdl::ReplaceOp,mlir::pdl::ResultOp,mlir::pdl::ResultsOp,mlir::pdl::RewriteOp,mlir::pdl::TypeOp,mlir::pdl::TypesOp>((uint64_t)v3);
  mlir::pdl::PDLDialect::registerTypes(this);
  return this;
}

void mlir::pdl::PDLDialect::~PDLDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_1805714D8(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::pdl::ApplyNativeConstraintOp,mlir::pdl::ApplyNativeRewriteOp,mlir::pdl::AttributeOp,mlir::pdl::EraseOp,mlir::pdl::OperandOp,mlir::pdl::OperandsOp,mlir::pdl::OperationOp,mlir::pdl::PatternOp,mlir::pdl::RangeOp,mlir::pdl::ReplaceOp,mlir::pdl::ResultOp,mlir::pdl::ResultsOp,mlir::pdl::RewriteOp,mlir::pdl::TypeOp,mlir::pdl::TypesOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;

  mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeConstraintOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeRewriteOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::AttributeOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::EraseOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::OperandOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::OperandsOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::OperationOp>(a1);
  v2 = operator new(0x70uLL);
  v9 = mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v9, (uint64_t)&mlir::pdl::PatternOp::getAttributeNames(void)::attrNames, 2);
  v3 = (uint64_t)v9;
  v9 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  mlir::RegisteredOperationName::insert<mlir::pdl::RangeOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::ReplaceOp>(a1);
  v4 = operator new(0x70uLL);
  v9 = mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v9, (uint64_t)&mlir::pdl::ResultOp::getAttributeNames(void)::attrNames, 1);
  v5 = (uint64_t)v9;
  v9 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v9 = mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v9, (uint64_t)&mlir::pdl::ResultsOp::getAttributeNames(void)::attrNames, 1);
  v7 = (uint64_t)v9;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  mlir::RegisteredOperationName::insert<mlir::pdl::RewriteOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::pdl::TypeOp>(a1);
  return mlir::RegisteredOperationName::insert<mlir::pdl::TypesOp>(a1);
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::verify(uint64_t **this)
{
  uint64_t v1;
  _QWORD **v3;
  _QWORD **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  const void **v11;
  __int16 v12;
  _QWORD v13[3];
  void *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *__p;
  _QWORD **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && *((_DWORD *)*this + 17))
    return 1;
  v11 = (const void **)"expected at least one argument";
  v12 = 259;
  mlir::OpState::emitOpError(this, &v11, (uint64_t)v13);
  v1 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v13);
  if (v13[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
  if (v20)
  {
    v3 = (_QWORD **)__p;
    if (__p)
    {
      v4 = v19;
      v5 = __p;
      if (v19 != __p)
      {
        do
          v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
        while (v4 != v3);
        v5 = __p;
      }
      v19 = v3;
      operator delete(v5);
    }
    v6 = v16;
    if (v16)
    {
      v7 = v17;
      v8 = v16;
      if (v17 != v16)
      {
        do
        {
          v10 = (void *)*--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            operator delete[](v9);
        }
        while (v7 != v6);
        v8 = v16;
      }
      v17 = v6;
      operator delete(v8);
    }
    if (v14 != &v15)
      free(v14);
  }
  return v1;
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void **v12;
  __int16 v13;
  _QWORD v14[3];
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *__p;
  _QWORD **v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && *((_DWORD *)v1 + 17) || *((_DWORD *)v1 + 9))
    return 1;
  v12 = (const void **)"expected at least one argument or result";
  v13 = 259;
  mlir::OpState::emitOpError(this, &v12, (uint64_t)v14);
  v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v14);
  if (v14[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v14);
  if (v21)
  {
    v4 = (_QWORD **)__p;
    if (__p)
    {
      v5 = v20;
      v6 = __p;
      if (v20 != __p)
      {
        do
          v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        v6 = __p;
      }
      v20 = v4;
      operator delete(v6);
    }
    v7 = v17;
    if (v17)
    {
      v8 = v18;
      v9 = v17;
      if (v18 != v17)
      {
        do
        {
          v11 = (void *)*--v8;
          v10 = v11;
          *v8 = 0;
          if (v11)
            operator delete[](v10);
        }
        while (v8 != v7);
        v9 = v17;
      }
      v18 = v7;
      operator delete(v9);
    }
    if (v15 != &v16)
      free(v15);
  }
  return v2;
}

uint64_t mlir::pdl::AttributeOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  const void **v21[4];
  __int16 v22;
  _QWORD v23[3];
  void *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *__p;
  _QWORD **v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *((unsigned int *)*this + 11);
  if ((v3 & 0x800000) != 0 && *((_DWORD *)v2 + 17))
  {
    v4 = *(_QWORD *)(v2[9] + 24);
    if (v2[2 * ((v3 >> 23) & 1) + 8])
    {
LABEL_4:
      if (v4)
      {
        v22 = 259;
        mlir::OpState::emitOpError(this, v21, (uint64_t)v23);
        v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
        if (v23[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
        if (!v30)
          return v5;
        v6 = (_QWORD **)__p;
        if (__p)
        {
          v7 = v29;
          v8 = __p;
          if (v29 != __p)
          {
            do
              v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
            while (v7 != v6);
            v8 = __p;
          }
          v29 = v6;
          operator delete(v8);
        }
        v9 = v26;
        if (!v26)
          goto LABEL_39;
        v10 = v27;
        v11 = v26;
        if (v27 == v26)
          goto LABEL_38;
        do
        {
          v13 = (void *)*--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            operator delete[](v12);
        }
        while (v10 != v9);
        goto LABEL_37;
      }
      return 1;
    }
  }
  else
  {
    v4 = 0;
    if (v2[2 * ((v3 >> 23) & 1) + 8])
      goto LABEL_4;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)(mlir::Block::getParentOp((mlir::Block *)v2[2]) + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
    return verifyHasBindingUse((mlir::Operation *)*this);
  v22 = 259;
  mlir::OpState::emitOpError(this, v21, (uint64_t)v23);
  v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  if (v30)
  {
    v15 = (_QWORD **)__p;
    if (__p)
    {
      v16 = v29;
      v17 = __p;
      if (v29 != __p)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = __p;
      }
      v29 = v15;
      operator delete(v17);
    }
    v9 = v26;
    if (!v26)
      goto LABEL_39;
    v18 = v27;
    v11 = v26;
    if (v27 == v26)
    {
LABEL_38:
      v27 = v9;
      operator delete(v11);
LABEL_39:
      if (v24 != &v25)
        free(v24);
      return v5;
    }
    do
    {
      v20 = (void *)*--v18;
      v19 = v20;
      *v18 = 0;
      if (v20)
        operator delete[](v19);
    }
    while (v18 != v9);
LABEL_37:
    v11 = v26;
    goto LABEL_38;
  }
  return v5;
}

uint64_t mlir::pdl::AttributeOp::getValueType(mlir::pdl::AttributeOp *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0 && *(_DWORD *)(v1 + 68))
    return *(_QWORD *)(*(_QWORD *)(v1 + 72) + 24);
  else
    return 0;
}

uint64_t verifyHasBindingUse(mlir::Operation *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  uint64_t v4;
  _QWORD **v6;
  _QWORD **v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  const void **v14;
  __int16 v15;
  _QWORD v16[3];
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *__p;
  _QWORD **v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)*((_QWORD *)a1 + 2);
  if (!v2)
    return 1;
  ParentOp = mlir::Block::getParentOp(v2);
  if (!ParentOp
    || *(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id
    || (hasBindingUse(a1) & 1) != 0)
  {
    return 1;
  }
  v15 = 259;
  mlir::Operation::emitOpError((uint64_t *)a1, &v14, (uint64_t)v16);
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v16);
  if (v16[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v16);
  if (v23)
  {
    v6 = (_QWORD **)__p;
    if (__p)
    {
      v7 = v22;
      v8 = __p;
      if (v22 != __p)
      {
        do
          v7 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v7 - 1);
        while (v7 != v6);
        v8 = __p;
      }
      v22 = v6;
      operator delete(v8);
    }
    v9 = v19;
    if (v19)
    {
      v10 = v20;
      v11 = v19;
      if (v20 != v19)
      {
        do
        {
          v13 = (void *)*--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            operator delete[](v12);
        }
        while (v10 != v9);
        v11 = v19;
      }
      v20 = v9;
      operator delete(v11);
    }
    if (v17 != &v18)
      free(v17);
  }
  return v4;
}

uint64_t mlir::pdl::OperationOp::verify(mlir::Operation **this)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  mlir::Operation *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AttrData;
  uint64_t v16;
  uint64_t v17;
  uint64_t Context;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  _QWORD *i;
  uint64_t v29;
  BOOL v30;
  uint64_t DefiningOp;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  const char *v36;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char **v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _QWORD **v57;
  _QWORD **v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  BOOL v83;
  const char *v85;
  char *v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  BOOL v93;
  uint64_t v95;
  char v96;
  _QWORD **v97;
  _QWORD **v98;
  void *v99;
  _QWORD *v100;
  _QWORD *v101;
  void *v102;
  void *v103;
  void *v104;
  _QWORD **v105;
  _QWORD **v106;
  void *v107;
  _QWORD *v108;
  void *v109;
  void *v110;
  char *v111;
  int8x16_t *v112;
  const unsigned __int8 *v113;
  const unsigned __int8 *v114;
  uint64_t *v115;
  const char *v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  uint64_t v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  BOOL v125;
  unint64_t v126;
  BOOL v127;
  unint64_t v128;
  BOOL v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  const char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  mlir::Operation *v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162[4];
  uint64_t v163;
  void *v164;
  _QWORD *v165;
  void *__p;
  _QWORD **v167;
  char v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)*((_QWORD *)*this + 2);
  if (!v2
    || (ParentOp = mlir::Block::getParentOp(v2)) == 0
    || *(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v65 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v65 = 0;
  *(_QWORD *)&v159 = *(_QWORD *)(v65 + 8);
  if ((_QWORD)v159)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v159);
    v4 = 1;
LABEL_5:
    v5 = *((unsigned int *)*this + 11);
    v6 = (uint64_t)*this + 16 * ((v5 >> 23) & 1);
    v8 = *(_QWORD *)(v6 + 64);
    v7 = v6 + 64;
    v149 = v8;
    if (!BYTE3(v5))
      v7 = 0;
    v9 = (*(_DWORD *)(v7 + 20) + *(_DWORD *)(v7 + 16)) - (unint64_t)*(unsigned int *)(v7 + 16);
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v149);
    if (v10 == v9)
    {
      if (!v4)
        return verifyHasBindingUse(*this);
      v11 = *this;
      v12 = *((unsigned int *)*this + 11);
      v13 = (v12 >> 23) & 1;
      v14 = (uint64_t)*this + 16 * v13 + 64;
      if (!HIBYTE(*((_DWORD *)*this + 11)))
        v14 = 0;
      *(_QWORD *)&v159 = *(_QWORD *)(v14 + 8);
      if ((_QWORD)v159)
      {
        AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v159);
        v17 = v16;
        Context = mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
        mlir::OperationName::OperationName(&v159, AttrData, v17, Context);
        if (mlir::OperationName::mightHaveInterface<mlir::InferTypeOpInterface>((uint64_t *)&v159))
          return verifyHasBindingUse(*this);
        v11 = *this;
        v12 = *((unsigned int *)*this + 11);
        v13 = (v12 >> 23) & 1;
      }
      v19 = (_DWORD *)((char *)v11 + 16 * v13 + 64);
      if (!BYTE3(v12))
        v19 = 0;
      if ((v12 & 0x800000) != 0)
        v20 = *((_QWORD *)v11 + 9);
      else
        v20 = 0;
      v21 = v19[4];
      v22 = v19[5];
      v23 = v19[6];
      v155 = v11;
      v24 = *((_QWORD *)v11 + 2);
      v25 = *((_DWORD *)v11 + 9);
      v26 = (char *)v11 - 16;
      if (v25)
        v27 = (uint64_t)v26;
      else
        v27 = 0;
      for (i = *(_QWORD **)mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0); i; i = (_QWORD *)*i)
      {
        v29 = i[2];
        if (v29)
          v30 = *(_QWORD *)(*(_QWORD *)(v29 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::ReplaceOp,void>::id;
        else
          v30 = 0;
        if (v30)
        {
          if (mlir::OpOperand::getOperandNumber((unint64_t)i))
          {
            *(_QWORD *)&v159 = *(_QWORD *)(*(_QWORD *)(v29 + 72) + 24);
            DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v159);
            if (*(_QWORD *)(DefiningOp + 16) != v24
              || mlir::Operation::isBeforeInBlock((mlir::Block **)DefiningOp, v155))
            {
              return verifyHasBindingUse(*this);
            }
          }
        }
      }
      if (v23)
      {
        v66 = 0;
        v67 = (v22 + v21);
        v68 = (v23 + v67);
        v69 = v20 + 32 * v67;
        v70 = (char *)(v68 - v67);
        while (1)
        {
          v71 = *(_QWORD *)(v69 + 32 * (_QWORD)v66 + 24);
          v153 = v66;
          v154 = v71;
          v72 = mlir::Value::getDefiningOp((mlir::Value *)&v154);
          v73 = *(void **)(*(_QWORD *)(v72 + 48) + 16);
          if (v73 != &mlir::detail::TypeIDResolver<mlir::pdl::ApplyNativeRewriteOp,void>::id)
          {
            v74 = v72;
            if (v73 == &mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id)
            {
              *(_QWORD *)&v159 = *(_QWORD *)(v72 + 16 * (((unint64_t)*(unsigned int *)(v72 + 44) >> 23) & 1) + 64);
              if (!(_QWORD)v159)
              {
                v85 = (const char *)*(unsigned int *)(v72 + 36);
                if ((_DWORD)v85)
                  v86 = (char *)(v72 - 16);
                else
                  v86 = 0;
                v150 = v86;
                v151 = v85;
                mlir::ResultRange::use_begin((uint64_t *)&v150, (uint64_t *)&v156);
                v87 = (const char *)*(unsigned int *)(v74 + 36);
                if ((_DWORD)v87)
                  v88 = (char *)(v74 - 16);
                else
                  v88 = 0;
                v150 = v88;
                v151 = v87;
                mlir::ResultRange::use_end((uint64_t *)&v150, v162);
                v89 = v158;
                v161 = v158;
                v159 = v156;
                v160 = v157;
                v90 = v163;
                while (v89 != v90)
                {
                  v91 = *(_QWORD *)(v89 + 16);
                  if (*(_QWORD *)(v91 + 16) != v24)
                  {
                    v92 = *(void **)(*(_QWORD *)(v91 + 48) + 16);
                    v93 = v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
                       || v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id;
                    if (v93 || v92 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
                      goto LABEL_67;
                  }
                  mlir::ResultRange::UseIterator::operator++((uint64_t *)&v156);
                  v89 = v158;
                }
LABEL_110:
                LOWORD(v158) = 259;
                mlir::OpState::emitOpError((uint64_t **)&v155, (const void ***)&v156, (uint64_t)&v159);
                v95 = mlir::Diagnostic::attachNote((uint64_t *)&v159 + 1, 0, 0);
                v150 = v153;
                mlir::Diagnostic::append<char const(&)[18],unsigned long,char const(&)[8]>(v95, "result type #", &v150, " was not constrained");
                v96 = mlir::Diagnostic::operator mlir::LogicalResult();
                if ((_QWORD)v159)
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
                if (v168)
                {
                  v97 = (_QWORD **)__p;
                  if (__p)
                  {
                    v98 = v167;
                    v99 = __p;
                    if (v167 != __p)
                    {
                      do
                        v98 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v98 - 1);
                      while (v98 != v97);
                      v99 = __p;
                    }
                    v167 = v97;
                    operator delete(v99);
                  }
                  v100 = v164;
                  if (v164)
                  {
                    v101 = v165;
                    v102 = v164;
                    if (v165 != v164)
                    {
                      do
                      {
                        v104 = (void *)*--v101;
                        v103 = v104;
                        *v101 = 0;
                        if (v104)
                          operator delete[](v103);
                      }
                      while (v101 != v100);
                      v102 = v164;
                    }
                    v165 = v100;
                    operator delete(v102);
                  }
                  if (*((uint64_t **)&v160 + 1) != v162)
                    free(*((void **)&v160 + 1));
                }
                if (v96)
                  return verifyHasBindingUse(*this);
                return 0;
              }
              mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v159);
            }
            else
            {
              if (v73 != &mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id)
                goto LABEL_110;
              if (!*(_QWORD *)(v72 + 16 * (((unint64_t)*(unsigned int *)(v72 + 44) >> 23) & 1) + 64))
              {
                v75 = (const char *)*(unsigned int *)(v72 + 36);
                if ((_DWORD)v75)
                  v76 = (char *)(v72 - 16);
                else
                  v76 = 0;
                v150 = v76;
                v151 = v75;
                mlir::ResultRange::use_begin((uint64_t *)&v150, (uint64_t *)&v156);
                v77 = (const char *)*(unsigned int *)(v74 + 36);
                if ((_DWORD)v77)
                  v78 = (char *)(v74 - 16);
                else
                  v78 = 0;
                v150 = v78;
                v151 = v77;
                mlir::ResultRange::use_end((uint64_t *)&v150, v162);
                v79 = v158;
                v161 = v158;
                v159 = v156;
                v160 = v157;
                v80 = v163;
                while (v79 != v80)
                {
                  v81 = *(_QWORD *)(v79 + 16);
                  if (*(_QWORD *)(v81 + 16) != v24)
                  {
                    v82 = *(void **)(*(_QWORD *)(v81 + 48) + 16);
                    v83 = v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
                       || v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id;
                    if (v83 || v82 == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
                      goto LABEL_67;
                  }
                  mlir::ResultRange::UseIterator::operator++((uint64_t *)&v156);
                  v79 = v158;
                }
                goto LABEL_110;
              }
            }
          }
LABEL_67:
          if (++v66 == v70)
            return verifyHasBindingUse(*this);
        }
      }
      v111 = (char *)v155 + 16 * (((unint64_t)*((unsigned int *)v155 + 11) >> 23) & 1) + 64;
      if (!HIBYTE(*((_DWORD *)v155 + 11)))
        v111 = 0;
      *(_QWORD *)&v159 = *((_QWORD *)v111 + 1);
      if (!(_QWORD)v159)
        return verifyHasBindingUse(*this);
      v112 = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v159);
      v114 = v113;
      v115 = (uint64_t *)mlir::Attribute::getContext((mlir::Operation *)((char *)v155 + 24));
      v150 = (char *)mlir::RegisteredOperationName::lookup(v112, v114, v115);
      v151 = v116;
      if (!(_BYTE)v116)
        return verifyHasBindingUse(*this);
      if ((v117 & 1) == 0
      {
        *(_QWORD *)&v159 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
        *((_QWORD *)&v159 + 1) = 83;
        v135 = llvm::StringRef::find((uint64_t *)&v159, "DesiredTypeName = ", 0x12uLL, 0);
        if (*((_QWORD *)&v159 + 1) >= v135)
          v136 = v135;
        else
          v136 = *((_QWORD *)&v159 + 1);
        v137 = v159 + v136;
        v138 = *((_QWORD *)&v159 + 1) - v136;
        if (*((_QWORD *)&v159 + 1) - v136 >= 0x12)
          v139 = 18;
        else
          v139 = *((_QWORD *)&v159 + 1) - v136;
        v140 = v138 - v139;
        if (v140 >= v140 - 1)
          v141 = v140 - 1;
        else
          v141 = v140;
        mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v137 + v139, v141);
      }
      if (((*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v150 + 32))(v150, mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) != 0)return verifyHasBindingUse(*this);
      if ((v118 & 1) == 0
      {
        *(_QWORD *)&v159 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
        *((_QWORD *)&v159 + 1) = 87;
        v142 = llvm::StringRef::find((uint64_t *)&v159, "DesiredTypeName = ", 0x12uLL, 0);
        if (*((_QWORD *)&v159 + 1) >= v142)
          v143 = v142;
        else
          v143 = *((_QWORD *)&v159 + 1);
        v144 = v159 + v143;
        v145 = *((_QWORD *)&v159 + 1) - v143;
        if (*((_QWORD *)&v159 + 1) - v143 >= 0x12)
          v146 = 18;
        else
          v146 = *((_QWORD *)&v159 + 1) - v143;
        v147 = v145 - v146;
        if (v147 >= v147 - 1)
          v148 = v147 - 1;
        else
          v148 = v147;
        mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v144 + v146, v148);
      }
      if (((*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v150 + 32))(v150, mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) != 0)return verifyHasBindingUse(*this);
      LOWORD(v158) = 259;
      mlir::OpState::emitOpError((uint64_t **)&v155, (const void ***)&v156, (uint64_t)&v159);
      v120 = mlir::Diagnostic::attachNote((uint64_t *)&v159 + 1, 0, 0);
      mlir::Diagnostic::append<char const(&)[56],mlir::RegisteredOperationName &,char const(&)[42]>(v120, "operation is created in a non-inferrable context, but '", (uint64_t *)&v150, "' does not implement InferTypeOpInterface");
      v121 = mlir::Diagnostic::operator mlir::LogicalResult();
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v159);
      if (v121)
        return verifyHasBindingUse(*this);
      return 0;
    }
    LOWORD(v158) = 257;
    mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v156, (uint64_t)&v159);
    if ((_QWORD)v159)
    {
      LODWORD(v150) = 3;
      v151 = "expected the same number of attribute values and attribute names, got ";
      v152 = 70;
      v32 = &v150;
      v33 = *((_QWORD *)&v160 + 1);
      if (v161 >= HIDWORD(v161))
      {
        v122 = v161 + 1;
        if (*((_QWORD *)&v160 + 1) <= (unint64_t)&v150
          && *((_QWORD *)&v160 + 1) + 24 * (unint64_t)v161 > (unint64_t)&v150)
        {
          v130 = (char *)&v150 - *((_QWORD *)&v160 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v122, 24);
          v33 = *((_QWORD *)&v160 + 1);
          v32 = (char **)&v130[*((_QWORD *)&v160 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v122, 24);
          v32 = &v150;
          v33 = *((_QWORD *)&v160 + 1);
        }
      }
      v34 = v33 + 24 * v161;
      v35 = *(_OWORD *)v32;
      *(_QWORD *)(v34 + 16) = v32[2];
      *(_OWORD *)v34 = v35;
      LODWORD(v161) = v161 + 1;
    }
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v149);
    if ((_QWORD)v159)
    {
      LODWORD(v150) = 5;
      v151 = v36;
      v37 = &v150;
      v38 = *((_QWORD *)&v160 + 1);
      if (v161 >= HIDWORD(v161))
      {
        v123 = v161 + 1;
        if (*((_QWORD *)&v160 + 1) <= (unint64_t)&v150
          && *((_QWORD *)&v160 + 1) + 24 * (unint64_t)v161 > (unint64_t)&v150)
        {
          v131 = (char *)&v150 - *((_QWORD *)&v160 + 1);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v123, 24);
          v38 = *((_QWORD *)&v160 + 1);
          v37 = (char **)&v131[*((_QWORD *)&v160 + 1)];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v123, 24);
          v37 = &v150;
          v38 = *((_QWORD *)&v160 + 1);
        }
      }
      v39 = v38 + 24 * v161;
      v40 = *(_OWORD *)v37;
      *(_QWORD *)(v39 + 16) = v37[2];
      *(_OWORD *)v39 = v40;
      v41 = (v161 + 1);
      LODWORD(v161) = v161 + 1;
      if ((_QWORD)v159)
      {
        LODWORD(v150) = 3;
        v151 = " names and ";
        v152 = 11;
        v42 = &v150;
        v43 = *((_QWORD *)&v160 + 1);
        if (v41 >= HIDWORD(v161))
        {
          v124 = v41 + 1;
          v125 = *((_QWORD *)&v160 + 1) + 24 * (unint64_t)v41 > (unint64_t)&v150;
          if (*((_QWORD *)&v160 + 1) <= (unint64_t)&v150 && v125)
          {
            v132 = (char *)&v150 - *((_QWORD *)&v160 + 1);
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v124, 24);
            v43 = *((_QWORD *)&v160 + 1);
            v42 = (char **)&v132[*((_QWORD *)&v160 + 1)];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v124, 24);
            v42 = &v150;
            v43 = *((_QWORD *)&v160 + 1);
          }
        }
        v44 = v43 + 24 * v161;
        v45 = *(_OWORD *)v42;
        *(_QWORD *)(v44 + 16) = v42[2];
        *(_OWORD *)v44 = v45;
        v46 = (v161 + 1);
        LODWORD(v161) = v161 + 1;
        if ((_QWORD)v159)
        {
          LODWORD(v150) = 5;
          v151 = (const char *)v9;
          v47 = &v150;
          v48 = *((_QWORD *)&v160 + 1);
          if (v46 >= HIDWORD(v161))
          {
            v126 = v46 + 1;
            v127 = *((_QWORD *)&v160 + 1) + 24 * (unint64_t)v46 > (unint64_t)&v150;
            if (*((_QWORD *)&v160 + 1) <= (unint64_t)&v150 && v127)
            {
              v133 = (char *)&v150 - *((_QWORD *)&v160 + 1);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v126, 24);
              v48 = *((_QWORD *)&v160 + 1);
              v47 = (char **)&v133[*((_QWORD *)&v160 + 1)];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v126, 24);
              v47 = &v150;
              v48 = *((_QWORD *)&v160 + 1);
            }
          }
          v49 = v48 + 24 * v161;
          v50 = *(_OWORD *)v47;
          *(_QWORD *)(v49 + 16) = v47[2];
          *(_OWORD *)v49 = v50;
          v51 = (v161 + 1);
          LODWORD(v161) = v161 + 1;
          if ((_QWORD)v159)
          {
            LODWORD(v150) = 3;
            v151 = " values";
            v152 = 7;
            v52 = &v150;
            v53 = *((_QWORD *)&v160 + 1);
            if (v51 >= HIDWORD(v161))
            {
              v128 = v51 + 1;
              v129 = *((_QWORD *)&v160 + 1) + 24 * (unint64_t)v51 > (unint64_t)&v150;
              if (*((_QWORD *)&v160 + 1) <= (unint64_t)&v150 && v129)
              {
                v134 = (char *)&v150 - *((_QWORD *)&v160 + 1);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v128, 24);
                v53 = *((_QWORD *)&v160 + 1);
                v52 = (char **)&v134[*((_QWORD *)&v160 + 1)];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160 + 8, v162, v128, 24);
                v52 = &v150;
                v53 = *((_QWORD *)&v160 + 1);
              }
            }
            v54 = v53 + 24 * v161;
            v55 = *(_OWORD *)v52;
            *(_QWORD *)(v54 + 16) = v52[2];
            *(_OWORD *)v54 = v55;
            LODWORD(v161) = v161 + 1;
          }
        }
      }
    }
    v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v159);
    if ((_QWORD)v159)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
    if (v168)
    {
      v57 = (_QWORD **)__p;
      if (__p)
      {
        v58 = v167;
        v59 = __p;
        if (v167 != __p)
        {
          do
            v58 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v58 - 1);
          while (v58 != v57);
          v59 = __p;
        }
        v167 = v57;
        operator delete(v59);
      }
      v60 = v164;
      if (!v164)
        goto LABEL_140;
      v61 = v165;
      v62 = v164;
      if (v165 == v164)
      {
LABEL_139:
        v165 = v60;
        operator delete(v62);
LABEL_140:
        if (*((uint64_t **)&v160 + 1) != v162)
          free(*((void **)&v160 + 1));
        return v56;
      }
      do
      {
        v64 = (void *)*--v61;
        v63 = v64;
        *v61 = 0;
        if (v64)
          operator delete[](v63);
      }
      while (v61 != v60);
LABEL_138:
      v62 = v164;
      goto LABEL_139;
    }
    return v56;
  }
  LOWORD(v158) = 259;
  mlir::OpState::emitOpError((uint64_t **)this, (const void ***)&v156, (uint64_t)&v159);
  v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v159);
  if ((_QWORD)v159)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v159);
  if (v168)
  {
    v105 = (_QWORD **)__p;
    if (__p)
    {
      v106 = v167;
      v107 = __p;
      if (v167 != __p)
      {
        do
          v106 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v106 - 1);
        while (v106 != v105);
        v107 = __p;
      }
      v167 = v105;
      operator delete(v107);
    }
    v60 = v164;
    if (!v164)
      goto LABEL_140;
    v108 = v165;
    v62 = v164;
    if (v165 == v164)
      goto LABEL_139;
    do
    {
      v110 = (void *)*--v108;
      v109 = v110;
      *v108 = 0;
      if (v110)
        operator delete[](v109);
    }
    while (v108 != v60);
    goto LABEL_138;
  }
  return v56;
}

uint64_t mlir::pdl::OperationOp::getOpName@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v3 = 0;
  v5 = *(_QWORD *)(v3 + 8);
  if (v5)
  {
    this = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v5);
    *(_QWORD *)a2 = this;
    *(_QWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t mlir::pdl::OperationOp::getAttributeValues(mlir::pdl::OperationOp *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = *(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = *(unsigned int *)(v2 + 16);
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

uint64_t mlir::pdl::OperationOp::getTypeValues(mlir::pdl::OperationOp *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = *(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = (*(_DWORD *)(v2 + 20) + *(_DWORD *)(v2 + 16));
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

BOOL mlir::pdl::OperationOp::hasTypeInference(mlir::pdl::OperationOp *this)
{
  unint64_t v1;
  uint64_t AttrData;
  uint64_t v4;
  uint64_t v5;
  uint64_t Context;
  uint64_t v8;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v8 = *(_QWORD *)(v1 + 8);
  if (!v8)
    return 0;
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v8);
  v5 = v4;
  Context = mlir::Attribute::getContext((mlir::Attribute *)(*(_QWORD *)this + 24));
  mlir::OperationName::OperationName(&v8, AttrData, v5, Context);
  return mlir::OperationName::hasInterface<mlir::InferTypeOpInterface>((uint64_t)&v8);
}

BOOL mlir::OperationName::hasInterface<mlir::InferTypeOpInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v23 = 76;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(*(_QWORD *)a1 + 40);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[153];
  v5 = *(_QWORD **)(*(_QWORD *)a1 + 32);
  v6 = &v5[2 * v3];
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  return v5 != v6 && *v5 == v4 && v5[1] != 0;
}

BOOL mlir::OperationName::mightHaveInterface<mlir::InferTypeOpInterface>(uint64_t *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const char *v23;
  unint64_t v24;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v22 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v14 = v13;
    a1 = v22;
    if (v14)
    {
      v23 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      v24 = 76;
      v15 = llvm::StringRef::find((uint64_t *)&v23, "DesiredTypeName = ", 0x12uLL, 0);
      if (v24 >= v15)
        v16 = v15;
      else
        v16 = v24;
      v17 = &v23[v16];
      v18 = v24 - v16;
      if (v24 - v16 >= 0x12)
        v19 = 18;
      else
        v19 = v24 - v16;
      v20 = v18 - v19;
      if (v20 >= v20 - 1)
        v21 = v20 - 1;
      else
        v21 = v20;
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v17[v19], v21);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v22;
    }
  }
  v3 = *a1;
  if (*(_UNKNOWN **)(*a1 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    return 1;
  v4 = *(unsigned int *)(v3 + 40);
  if (!(_DWORD)v4)
    return 0;
  v5 = v2[153];
  v6 = *(_QWORD **)(v3 + 32);
  v7 = &v6[2 * v4];
  do
  {
    v8 = v4 >> 1;
    v9 = &v6[2 * (v4 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v4 += ~(v4 >> 1);
    if (v11 < v5)
      v6 = v10;
    else
      v4 = v8;
  }
  while (v4);
  return v6 != v7 && *v6 == v5 && v6[1] != 0;
}

uint64_t mlir::pdl::PatternOp::verifyRegions(uint64_t **this)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  mlir::GenericProgramPoint **v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  mlir::GenericProgramPoint *v28;
  mlir::GenericProgramPoint *v29;
  mlir::GenericProgramPoint *v30;
  mlir::ForwardIterator *v31;
  int v32;
  unint64_t v33;
  mlir::GenericProgramPoint *v34;
  mlir::GenericProgramPoint *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  mlir::GenericProgramPoint *v40;
  mlir::GenericProgramPoint *v41;
  char v42;
  _QWORD **v43;
  _QWORD **v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  int *v52;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  mlir::Block *v66;
  unint64_t Parent;
  unsigned int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  __int128 v79;
  _QWORD **v80;
  _QWORD **v81;
  void *v82;
  _QWORD *v83;
  _QWORD *v84;
  void *v85;
  void *v86;
  void *v87;
  unint64_t v88;
  BOOL v89;
  unint64_t v90;
  BOOL v91;
  char *v92;
  char *v93;
  int64x2_t v94;
  unsigned int v95;
  _OWORD v96[2];
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104[12];
  void *v105;
  _QWORD *v106;
  void *__p;
  _QWORD **v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)*this + 11);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = (((unint64_t)&(*this)[2 * ((v2 >> 23) & 1) + 8] + ((v2 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)*this + 10);
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    v5 = (mlir::GenericProgramPoint **)(v4 - 8);
  else
    v5 = 0;
  mlir::Block::getTerminator(v5);
  if (v6)
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id;
  else
    v7 = 0;
  if (v7)
  {
    *(_QWORD *)&v101 = this;
    v25 = *(_QWORD *)(v3 + 8);
    v26 = v3;
    if (v25 != v3)
    {
      do
      {
        v27 = v25 - 8;
        if (!v25)
          v27 = 0;
        v28 = (mlir::GenericProgramPoint *)(v27 + 32);
        v29 = *(mlir::GenericProgramPoint **)(v27 + 40);
        while (v29 != v28)
        {
          v30 = (mlir::GenericProgramPoint *)*((_QWORD *)v29 + 1);
          mlir::GenericProgramPoint::~GenericProgramPoint(v29);
          v32 = mlir::detail::walk<mlir::ForwardIterator>(v31, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::pdl::PatternOp::verifyRegions(void)::$_0>, (uint64_t)&v101, 1);
          v29 = v30;
          if (!v32)
            return 0;
        }
        v25 = *(_QWORD *)(v25 + 8);
      }
      while (v25 != v3);
      v26 = *(_QWORD *)(v3 + 8);
    }
    if (v26)
      v33 = v26 - 8;
    else
      v33 = 0;
    v34 = (mlir::GenericProgramPoint *)(v33 + 32);
    v35 = *(mlir::GenericProgramPoint **)(v33 + 40);
    if (v35 != (mlir::GenericProgramPoint *)(v33 + 32))
    {
      while (1)
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(v35);
        if (*(_UNKNOWN **)(*(_QWORD *)(v36 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
          break;
        v35 = (mlir::GenericProgramPoint *)*((_QWORD *)v35 + 1);
        if (v35 == v34)
          goto LABEL_52;
      }
      if (v35 != v34)
      {
        v95 = 0;
        v94 = 0uLL;
        v38 = *(_QWORD *)(v3 + 8);
        if (v38)
          v39 = v38 - 8;
        else
          v39 = 0;
        v40 = (mlir::GenericProgramPoint *)(v39 + 32);
        v41 = *(mlir::GenericProgramPoint **)(v39 + 40);
        if (v41 == (mlir::GenericProgramPoint *)(v39 + 32))
          goto LABEL_109;
        v42 = 1;
LABEL_69:
        mlir::GenericProgramPoint::~GenericProgramPoint(v41);
        v52 = *(int **)(*(_QWORD *)(v51 + 48) + 16);
        if (v52 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id
          && v52 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id
          && v52 != &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id
          && v52 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id
          && v52 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
        {
          goto LABEL_68;
        }
        v57 = v51;
        v58 = (const char *)*(unsigned int *)(v51 + 36);
        v59 = v51 - 16;
        if ((_DWORD)v58)
          v60 = v51 - 16;
        else
          v60 = 0;
        v98 = v60;
        v99 = v58;
        mlir::ResultRange::use_begin(&v98, (uint64_t *)v96);
        v61 = (const char *)*(unsigned int *)(v57 + 36);
        if ((_DWORD)v61)
          v62 = v59;
        else
          v62 = 0;
        v98 = v62;
        v99 = v61;
        mlir::ResultRange::use_end(&v98, v104);
        v63 = v97;
        v103 = v97;
        v101 = v96[0];
        v102 = v96[1];
        v64 = v104[4];
        while (1)
        {
          if (v63 == v64)
            goto LABEL_68;
          v65 = *(_QWORD *)(v63 + 16);
          v66 = *(mlir::Block **)(v65 + 16);
          if (v66)
          {
            Parent = mlir::Block::getParent(v66);
            if (*(_UNKNOWN **)(*(_QWORD *)(v65 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id
              || Parent
              && *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(Parent + 16) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
            {
LABEL_97:
              if ((v42 & 1) != 0)
              {
                visit(v57, &v94);
              }
              else
              {
                if (!v95)
                  goto LABEL_110;
                v68 = (v95 - 1) & ((v57 >> 4) ^ (v57 >> 9));
                v69 = *(_QWORD *)(v94.i64[0] + 8 * v68);
                if (v69 != v57)
                {
                  v70 = 1;
                  while (v69 != -4096)
                  {
                    v42 = 0;
                    v71 = v68 + v70++;
                    v68 = v71 & (v95 - 1);
                    v69 = *(_QWORD *)(v94.i64[0] + 8 * v68);
                    if (v69 == v57)
                      goto LABEL_68;
                  }
LABEL_110:
                  *(_QWORD *)&v96[0] = "the operations must form a connected component";
                  LOWORD(v97) = 259;
                  mlir::OpState::emitOpError(this, (const void ***)v96, (uint64_t)&v101);
                  v73 = mlir::Diagnostic::attachNote((uint64_t *)&v101 + 1, *(_QWORD *)(v57 + 24), 1);
                  v74 = v73 + 16;
                  v75 = *(_QWORD *)(v73 + 16);
                  LODWORD(v98) = 3;
                  v99 = "see a disconnected value / operation here";
                  v100 = 41;
                  v76 = *(unsigned int *)(v73 + 24);
                  v77 = &v98;
                  if (v76 >= *(_DWORD *)(v73 + 28))
                  {
                    v90 = v76 + 1;
                    v91 = v75 + 24 * v76 > (unint64_t)&v98;
                    if (v75 <= (unint64_t)&v98 && v91)
                    {
                      v93 = (char *)&v98 - v75;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 32), v90, 24);
                      v75 = *(_QWORD *)(v73 + 16);
                      v77 = (uint64_t *)&v93[v75];
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v74, (void *)(v73 + 32), v90, 24);
                      v75 = *(_QWORD *)(v73 + 16);
                      v77 = &v98;
                    }
                  }
                  v78 = v75 + 24 * *(unsigned int *)(v73 + 24);
                  v79 = *(_OWORD *)v77;
                  *(_QWORD *)(v78 + 16) = v77[2];
                  *(_OWORD *)v78 = v79;
                  ++*(_DWORD *)(v73 + 24);
                  mlir::Diagnostic::operator mlir::LogicalResult();
                  if ((_QWORD)v101)
                    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
                  if (v109)
                  {
                    v80 = (_QWORD **)__p;
                    if (__p)
                    {
                      v81 = v108;
                      v82 = __p;
                      if (v108 != __p)
                      {
                        do
                          v81 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v81 - 1);
                        while (v81 != v80);
                        v82 = __p;
                      }
                      v108 = v80;
                      operator delete(v82);
                    }
                    v83 = v105;
                    if (v105)
                    {
                      v84 = v106;
                      v85 = v105;
                      if (v106 != v105)
                      {
                        do
                        {
                          v87 = (void *)*--v84;
                          v86 = v87;
                          *v84 = 0;
                          if (v87)
                            operator delete[](v86);
                        }
                        while (v84 != v83);
                        v85 = v105;
                      }
                      v106 = v83;
                      operator delete(v85);
                    }
                    if (*((uint64_t **)&v102 + 1) != v104)
                      free(*((void **)&v102 + 1));
                  }
LABEL_109:
                  llvm::deallocate_buffer((llvm *)v94.i64[0], (void *)(8 * v95));
                }
              }
              v42 = 0;
LABEL_68:
              v41 = (mlir::GenericProgramPoint *)*((_QWORD *)v41 + 1);
              if (v41 == v40)
                goto LABEL_109;
              goto LABEL_69;
            }
          }
          else if (*(_UNKNOWN **)(*(_QWORD *)(v65 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
          {
            goto LABEL_97;
          }
          mlir::ResultRange::UseIterator::operator++((uint64_t *)v96);
          v63 = v97;
        }
      }
    }
LABEL_52:
    LOWORD(v97) = 259;
    mlir::OpState::emitOpError(this, (const void ***)v96, (uint64_t)&v101);
    v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v101);
    if ((_QWORD)v101)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
    if (v109)
    {
      v43 = (_QWORD **)__p;
      if (__p)
      {
        v44 = v108;
        v45 = __p;
        if (v108 != __p)
        {
          do
            v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
          while (v44 != v43);
          v45 = __p;
        }
        v108 = v43;
        operator delete(v45);
      }
      v46 = v105;
      if (v105)
      {
        v47 = v106;
        v48 = v105;
        if (v106 != v105)
        {
          do
          {
            v50 = (void *)*--v47;
            v49 = v50;
            *v47 = 0;
            if (v50)
              operator delete[](v49);
          }
          while (v47 != v46);
          v48 = v105;
        }
        v106 = v46;
        operator delete(v48);
      }
      v37 = (void *)*((_QWORD *)&v102 + 1);
      if (*((uint64_t **)&v102 + 1) != v104)
        goto LABEL_107;
    }
  }
  else
  {
    v8 = v6;
    LOWORD(v97) = 259;
    mlir::OpState::emitOpError(this, (const void ***)v96, (uint64_t)&v101);
    v9 = mlir::Diagnostic::attachNote((uint64_t *)&v101 + 1, *(_QWORD *)(v8 + 24), 1);
    v10 = v9 + 16;
    v11 = *(_QWORD *)(v9 + 16);
    LODWORD(v98) = 3;
    v99 = "see terminator defined here";
    v100 = 27;
    v12 = *(unsigned int *)(v9 + 24);
    v13 = &v98;
    if (v12 >= *(_DWORD *)(v9 + 28))
    {
      v88 = v12 + 1;
      v89 = v11 + 24 * v12 > (unint64_t)&v98;
      if (v11 <= (unint64_t)&v98 && v89)
      {
        v92 = (char *)&v98 - v11;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 32), v88, 24);
        v11 = *(_QWORD *)(v9 + 16);
        v13 = (uint64_t *)&v92[v11];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 32), v88, 24);
        v11 = *(_QWORD *)(v9 + 16);
        v13 = &v98;
      }
    }
    v14 = v11 + 24 * *(unsigned int *)(v9 + 24);
    v15 = *(_OWORD *)v13;
    *(_QWORD *)(v14 + 16) = v13[2];
    *(_OWORD *)v14 = v15;
    ++*(_DWORD *)(v9 + 24);
    v16 = mlir::Diagnostic::operator mlir::LogicalResult();
    if ((_QWORD)v101)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v101);
    if (v109)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v108;
        v19 = __p;
        if (v108 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v108 = v17;
        operator delete(v19);
      }
      v20 = v105;
      if (v105)
      {
        v21 = v106;
        v22 = v105;
        if (v106 != v105)
        {
          do
          {
            v24 = (void *)*--v21;
            v23 = v24;
            *v21 = 0;
            if (v24)
              operator delete[](v23);
          }
          while (v21 != v20);
          v22 = v105;
        }
        v106 = v20;
        operator delete(v22);
      }
      v37 = (void *)*((_QWORD *)&v102 + 1);
      if (*((uint64_t **)&v102 + 1) != v104)
LABEL_107:
        free(v37);
    }
  }
  return v16;
}

uint64_t *visit(uint64_t a1, int64x2_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t DefiningOp;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t v31[4];
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36[2];

  v33 = a1;
  result = (uint64_t *)mlir::Block::getParentOp(*(mlir::Block **)(a1 + 16));
  if (*(_UNKNOWN **)(result[6] + 16) != &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id
    || *(_UNKNOWN **)(*(_QWORD *)(a1 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
  {
    return result;
  }
  v5 = a2->i64[0];
  v6 = a2[1].u32[0];
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v8 = (uint64_t *)(v5 + 8 * v7);
    v9 = *v8;
    if (*v8 == a1)
      goto LABEL_11;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 8 * v7);
      if (v9 == a1)
      {
        v8 = (uint64_t *)(v5 + 8 * v7);
        goto LABEL_11;
      }
    }
  }
  v8 = (uint64_t *)(v5 + 8 * v6);
LABEL_11:
  if (v8 != (uint64_t *)(v5 + 8 * v6))
    return result;
  llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2, &v33, (uint64_t)v29);
  v12 = *(int **)(*(_QWORD *)(v33 + 48) + 16);
  if (!v33 || v12 != (int *)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id)
  {
    *(_QWORD *)&v34[0] = a2;
    if (v33 && v12 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id)
    {
      *(_QWORD *)&v29[0] = *(_QWORD *)(*(_QWORD *)(v33 + 72) + 24);
      DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v29);
      visit(DefiningOp, a2);
    }
    else if (v33 && v12 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id)
    {
      visit(mlir::Operation *,llvm::DenseSet<mlir::Operation *,llvm::DenseMapInfo<mlir::Operation *,void>> &)::$_1::operator()<mlir::pdl::ResultsOp>(v34, v33);
    }
    goto LABEL_27;
  }
  v13 = *(unsigned int *)(v33 + 44);
  v14 = v33 + 16 * ((v13 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(v33 + 44)))
    v14 = 0;
  v15 = *(unsigned int *)(v14 + 16);
  if ((v13 & 0x800000) != 0)
  {
    v16 = *(_QWORD *)(v33 + 72);
    if (!(_DWORD)v15)
      goto LABEL_27;
  }
  else
  {
    v16 = 0;
    if (!(_DWORD)v15)
      goto LABEL_27;
  }
  v17 = (uint64_t *)(v16 + 24);
  do
  {
    v18 = *v17;
    v17 += 4;
    *(_QWORD *)&v29[0] = v18;
    v19 = mlir::Value::getDefiningOp((mlir::Value *)v29);
    visit(v19, a2);
    --v15;
  }
  while (v15);
LABEL_27:
  v21 = v33;
  v22 = *(unsigned int *)(v33 + 36);
  v23 = v33 - 16;
  if ((_DWORD)v22)
    v24 = v33 - 16;
  else
    v24 = 0;
  *(_QWORD *)&v29[0] = v24;
  *((_QWORD *)&v29[0] + 1) = v22;
  mlir::ResultRange::use_begin((uint64_t *)v29, (uint64_t *)v34);
  v25 = *(unsigned int *)(v21 + 36);
  if ((_DWORD)v25)
    v26 = v23;
  else
    v26 = 0;
  v36[0] = v26;
  v36[1] = v25;
  result = mlir::ResultRange::use_end(v36, v31);
  v27 = v35;
  v30 = v35;
  v29[0] = v34[0];
  v29[1] = v34[1];
  for (i = v32; v35 != i; v27 = v35)
  {
    visit(*(_QWORD *)(v27 + 16), a2);
    result = mlir::ResultRange::UseIterator::operator++((uint64_t *)v34);
  }
  return result;
}

_OWORD *mlir::Region::emplaceBlock(mlir::Region *this)
{
  _OWORD *v2;
  uint64_t v3;

  v2 = operator new(0x48uLL);
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = v2 + 2;
  *((_QWORD *)v2 + 5) = v2 + 2;
  *((_QWORD *)v2 + 7) = 0;
  *((_QWORD *)v2 + 8) = 0;
  *((_QWORD *)v2 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)this, (uint64_t)v2);
  v3 = *(_QWORD *)this;
  *((_QWORD *)v2 + 2) = this;
  *((_QWORD *)v2 + 1) = v3;
  *(_QWORD *)(v3 + 8) = (char *)v2 + 8;
  *(_QWORD *)this = (char *)v2 + 8;
  return v2;
}

void mlir::pdl::PatternOp::getRewriter(mlir::pdl::PatternOp *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(((*(_QWORD *)this
                   + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(_QWORD *)this + 40)
                 + 8);
  if (v1)
    mlir::Block::getTerminator((mlir::GenericProgramPoint **)(v1 - 8));
  else
    mlir::Block::getTerminator(0);
}

uint64_t mlir::pdl::RangeOp::verify(uint64_t **this)
{
  uint64_t Value;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *RangeElementTypeOrSelf;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  const void **v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53[3];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[96];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v53[0] = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v53);
  v3 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v4 = v3[9];
    v5 = *((unsigned int *)v3 + 17);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v53[0] = v4;
  v53[1] = v5;
  mlir::OperandRange::getTypes(v53, &v46);
  v6 = v46;
  v7 = v48;
  if (v46 == v48 && v47 == v49)
    return 1;
  v8 = v46 + 32 * v47 + 24;
  v9 = ~v47 + v49;
  while (1)
  {
    RangeElementTypeOrSelf = mlir::pdl::getRangeElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF8));
    if (RangeElementTypeOrSelf != (_QWORD *)Value)
      break;
    v12 = v9-- != 0;
    v8 += 32;
    if (v6 == v7 && !v12)
      return 1;
  }
  v15 = (uint64_t)RangeElementTypeOrSelf;
  v44 = (const void **)"expected operand to have element type ";
  v45 = 259;
  mlir::OpState::emitOpError(this, &v44, (uint64_t)v53);
  if (v53[0])
  {
    v16 = &v50;
    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, Value);
    v17 = (char *)v54;
    if (v55 >= v56)
    {
      v37 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        v41 = (char *)&v50 - (_BYTE *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        v17 = (char *)v54;
        v16 = (int *)((char *)v54 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v37, 24);
        v16 = &v50;
        v17 = (char *)v54;
      }
    }
    v18 = &v17[24 * v55];
    v19 = *(_OWORD *)v16;
    *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
    *(_OWORD *)v18 = v19;
    v20 = ++v55;
    if (v53[0])
    {
      v50 = 3;
      v51 = ", but got ";
      v52 = 10;
      v21 = &v50;
      v22 = (char *)v54;
      if (v20 >= v56)
      {
        v38 = v20 + 1;
        v39 = (char *)v54 + 24 * v20 > (char *)&v50;
        if (v54 <= &v50 && v39)
        {
          v42 = (char *)&v50 - (_BYTE *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          v22 = (char *)v54;
          v21 = (int *)((char *)v54 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
          v21 = &v50;
          v22 = (char *)v54;
        }
      }
      v23 = &v22[24 * v55];
      v24 = *(_OWORD *)v21;
      *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v23 = v24;
      ++v55;
      if (v53[0])
      {
        v25 = &v50;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, v15);
        v26 = (char *)v54;
        if (v55 >= v56)
        {
          v40 = v55 + 1;
          if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
          {
            v43 = (char *)&v50 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            v26 = (char *)v54;
            v25 = (int *)((char *)v54 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v40, 24);
            v25 = &v50;
            v26 = (char *)v54;
          }
        }
        v27 = &v26[24 * v55];
        v28 = *(_OWORD *)v25;
        *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
        *(_OWORD *)v27 = v28;
        ++v55;
      }
    }
  }
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  if (v62)
  {
    v29 = (_QWORD **)__p;
    if (__p)
    {
      v30 = v61;
      v31 = __p;
      if (v61 != __p)
      {
        do
          v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        v31 = __p;
      }
      v61 = v29;
      operator delete(v31);
    }
    v32 = v58;
    if (v58)
    {
      v33 = v59;
      v34 = v58;
      if (v59 != v58)
      {
        do
        {
          v36 = (void *)*--v33;
          v35 = v36;
          *v33 = 0;
          if (v36)
            operator delete[](v35);
        }
        while (v33 != v32);
        v34 = v58;
      }
      v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57)
      free(v54);
  }
  return v13;
}

uint64_t mlir::pdl::ReplaceOp::verify(uint64_t **this)
{
  unint64_t v1;
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  const void **v21;
  __int16 v22;
  int v23;
  const char *v24;
  uint64_t v25;
  _QWORD v26[3];
  void *v27;
  unsigned int v28;
  unsigned int v29;
  _BYTE v30[96];
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD **v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)*this + 11);
  v2 = &(*this)[2 * ((v1 >> 23) & 1) + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v2 = 0;
  v3 = *((_DWORD *)v2 + 1);
  if ((v1 & 0x800000) == 0)
  {
    v4 = 0;
    if (v3)
      goto LABEL_5;
    return 1;
  }
  v4 = (*this)[9];
  if (!v3)
    return 1;
LABEL_5:
  if (!*(_QWORD *)(v4 + 32 * *(unsigned int *)v2 + 24) || !*((_DWORD *)v2 + 2))
    return 1;
  v22 = 257;
  mlir::OpState::emitOpError(this, &v21, (uint64_t)v26);
  if (v26[0])
  {
    v23 = 3;
    v24 = "expected no replacement values to be provided when the replacement operation is present";
    v25 = 87;
    v5 = &v23;
    v6 = (char *)v27;
    if (v28 >= v29)
    {
      v19 = v28 + 1;
      if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
      {
        v20 = (char *)&v23 - (_BYTE *)v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v19, 24);
        v6 = (char *)v27;
        v5 = (int *)((char *)v27 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v19, 24);
        v5 = &v23;
        v6 = (char *)v27;
      }
    }
    v7 = &v6[24 * v28];
    v8 = *(_OWORD *)v5;
    *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
    *(_OWORD *)v7 = v8;
    ++v28;
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
  if (v26[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
  if (v35)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v34;
      v12 = __p;
      if (v34 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v34 = v10;
      operator delete(v12);
    }
    v13 = v31;
    if (v31)
    {
      v14 = v32;
      v15 = v31;
      if (v32 != v31)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v31;
      }
      v32 = v13;
      operator delete(v15);
    }
    if (v27 != v30)
      free(v27);
  }
  return v9;
}

uint64_t mlir::pdl::ReplaceOp::getReplOperation(mlir::pdl::ReplaceOp *this)
{
  unint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = (unsigned int *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = v2[1];
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 32 * *v2 + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 32 * *v2 + 24);
  }
  return 0;
}

uint64_t mlir::pdl::ReplaceOp::getReplValues(mlir::pdl::ReplaceOp *this)
{
  unint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = (_DWORD *)(*(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64);
  else
    v2 = 0;
  v3 = (v2[1] + *v2);
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

uint64_t mlir::pdl::ResultsOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v3;
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  const void **v27[4];
  __int16 v28;
  int v29;
  const char *v30;
  uint64_t v31;
  void *__p;
  unsigned int v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE v37[96];
  void *v38;
  _QWORD *v39;
  void *v40;
  _QWORD **v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = *this;
  v27[0] = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v27[0])
  {
    mlir::IntegerAttr::getValue(v27, (llvm::APInt *)&__p);
    if (v33 >= 0x41 && __p != 0)
      operator delete[](__p);
    return 1;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)(*(v1 - 1) & 0xFFFFFFFFFFFFFFF8) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
    return 1;
  v28 = 257;
  mlir::OpState::emitOpError(this, v27, (uint64_t)&__p);
  if (__p)
  {
    v29 = 3;
    v31 = 77;
    v6 = &v29;
    v7 = (char *)v34;
    if (v35 >= v36)
    {
      v23 = v35 + 1;
      if (v34 <= &v29 && (char *)v34 + 24 * v35 > (char *)&v29)
      {
        v25 = (char *)&v29 - (_BYTE *)v34;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
        v7 = (char *)v34;
        v6 = (int *)((char *)v34 + v25);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v23, 24);
        v6 = &v29;
        v7 = (char *)v34;
      }
    }
    v8 = &v7[24 * v35];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v35;
    if (__p)
    {
      v10 = *(*this - 1) & 0xFFFFFFFFFFFFFFF8;
      v11 = &v29;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v29, v10);
      v12 = (char *)v34;
      if (v35 >= v36)
      {
        v24 = v35 + 1;
        if (v34 <= &v29 && (char *)v34 + 24 * v35 > (char *)&v29)
        {
          v26 = (char *)&v29 - (_BYTE *)v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          v12 = (char *)v34;
          v11 = (int *)((char *)v34 + v26);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v37, v24, 24);
          v11 = &v29;
          v12 = (char *)v34;
        }
      }
      v13 = &v12[24 * v35];
      v14 = *(_OWORD *)v11;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
      *(_OWORD *)v13 = v14;
      ++v35;
    }
  }
  v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  if (v42)
  {
    v15 = (_QWORD **)v40;
    if (v40)
    {
      v16 = v41;
      v17 = v40;
      if (v41 != v40)
      {
        do
          v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        v17 = v40;
      }
      v41 = v15;
      operator delete(v17);
    }
    v18 = v38;
    if (v38)
    {
      v19 = v39;
      v20 = v38;
      if (v39 != v38)
      {
        do
        {
          v22 = (void *)*--v19;
          v21 = v22;
          *v19 = 0;
          if (v22)
            operator delete[](v21);
        }
        while (v19 != v18);
        v20 = v38;
      }
      v39 = v18;
      operator delete(v20);
    }
    if (v34 != v37)
      free(v34);
  }
  return v3;
}

uint64_t mlir::pdl::ResultsOp::getIndex(mlir::pdl::ResultsOp *this)
{
  unsigned int *p_p;
  uint64_t v2;
  void *__p;
  unsigned int v6;
  uint64_t v7;

  v7 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (!v7)
    return 0;
  mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&__p);
  if (v6 >= 0x41)
    p_p = (unsigned int *)__p;
  else
    p_p = (unsigned int *)&__p;
  v2 = *p_p;
  if (v6 >= 0x41 && __p != 0)
    operator delete[](__p);
  return v2 | 0x100000000;
}

uint64_t mlir::pdl::RewriteOp::verifyRegions(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  int *v35;
  char *v36;
  char *v37;
  __int128 v38;
  _QWORD **v39;
  _QWORD **v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  const void **v52[4];
  __int16 v53;
  int v54;
  const char *v55;
  uint64_t v56;
  _QWORD v57[3];
  void *v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE v61[96];
  void *v62;
  _QWORD *v63;
  void *__p;
  _QWORD **v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *((unsigned int *)*this + 11);
  if ((v3 & 0x7FFFFF) != 0)
  {
    v4 = (v3 >> 23) & 1;
    v5 = (_QWORD *)((((unint64_t)&v2[2 * v4 + 8] + ((v3 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v2 + 10));
    v6 = &v2[2 * v4];
    v8 = v6[8];
    v7 = v6 + 8;
    v57[0] = v8;
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v5 = 0;
    v22 = &v2[2 * ((v3 >> 23) & 1)];
    v23 = v22[8];
    v7 = v22 + 8;
    v57[0] = v23;
    if (v23)
    {
LABEL_3:
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v57);
      if ((_QWORD *)*v5 != v5)
      {
        v53 = 257;
        mlir::OpState::emitOpError(this, v52, (uint64_t)v57);
        if (v57[0])
        {
          v54 = 3;
          v55 = "expected rewrite region to be empty when rewrite is external";
          v56 = 60;
          v9 = &v54;
          v10 = (char *)v58;
          if (v59 >= v60)
          {
            v46 = v59 + 1;
            if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
            {
              v49 = (char *)&v54 - (_BYTE *)v58;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
              v10 = (char *)v58;
              v9 = (int *)((char *)v58 + v49);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
              v9 = &v54;
              v10 = (char *)v58;
            }
          }
          v11 = &v10[24 * v59];
          v12 = *(_OWORD *)v9;
          *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
          *(_OWORD *)v11 = v12;
          ++v59;
        }
        v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
        if (v57[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
        if (v66)
        {
          v14 = (_QWORD **)__p;
          if (__p)
          {
            v15 = v65;
            v16 = __p;
            if (v65 != __p)
            {
              do
                v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
              while (v15 != v14);
              v16 = __p;
            }
            v65 = v14;
            operator delete(v16);
          }
          v17 = v62;
          if (!v62)
            goto LABEL_64;
          v18 = v63;
          v19 = v62;
          if (v63 == v62)
          {
LABEL_63:
            v63 = v17;
            operator delete(v19);
LABEL_64:
            if (v58 != v61)
              free(v58);
            return v13;
          }
          do
          {
            v21 = (void *)*--v18;
            v20 = v21;
            *v18 = 0;
            if (v21)
              operator delete[](v20);
          }
          while (v18 != v17);
LABEL_62:
          v19 = v62;
          goto LABEL_63;
        }
        return v13;
      }
      return 1;
    }
  }
  if ((_QWORD *)*v5 == v5)
  {
    v53 = 257;
    mlir::OpState::emitOpError(this, v52, (uint64_t)v57);
    if (v57[0])
    {
      v54 = 3;
      v55 = "expected rewrite region to be non-empty if external name is not specified";
      v56 = 73;
      v35 = &v54;
      v36 = (char *)v58;
      if (v59 >= v60)
      {
        v48 = v59 + 1;
        if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
        {
          v51 = (char *)&v54 - (_BYTE *)v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v48, 24);
          v36 = (char *)v58;
          v35 = (int *)((char *)v58 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v48, 24);
          v35 = &v54;
          v36 = (char *)v58;
        }
      }
      v37 = &v36[24 * v59];
      v38 = *(_OWORD *)v35;
      *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
      *(_OWORD *)v37 = v38;
      ++v59;
    }
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
    if (v57[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
    if (v66)
    {
      v39 = (_QWORD **)__p;
      if (__p)
      {
        v40 = v65;
        v41 = __p;
        if (v65 != __p)
        {
          do
            v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
          while (v40 != v39);
          v41 = __p;
        }
        v65 = v39;
        operator delete(v41);
      }
      v17 = v62;
      if (!v62)
        goto LABEL_64;
      v42 = v63;
      v19 = v62;
      if (v63 == v62)
        goto LABEL_63;
      do
      {
        v44 = (void *)*--v42;
        v43 = v44;
        *v42 = 0;
        if (v44)
          operator delete[](v43);
      }
      while (v42 != v17);
      goto LABEL_62;
    }
    return v13;
  }
  if (BYTE3(v3))
    v24 = v7;
  else
    v24 = 0;
  if (!*((_DWORD *)v24 + 3))
    return 1;
  v53 = 257;
  mlir::OpState::emitOpError(this, v52, (uint64_t)v57);
  if (v57[0])
  {
    v54 = 3;
    v55 = "expected no external arguments when the rewrite is specified inline";
    v56 = 67;
    v25 = &v54;
    v26 = (char *)v58;
    if (v59 >= v60)
    {
      v47 = v59 + 1;
      if (v58 <= &v54 && (char *)v58 + 24 * v59 > (char *)&v54)
      {
        v50 = (char *)&v54 - (_BYTE *)v58;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v47, 24);
        v26 = (char *)v58;
        v25 = (int *)((char *)v58 + v50);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v47, 24);
        v25 = &v54;
        v26 = (char *)v58;
      }
    }
    v27 = &v26[24 * v59];
    v28 = *(_OWORD *)v25;
    *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
    *(_OWORD *)v27 = v28;
    ++v59;
  }
  v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v57);
  if (v57[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v57);
  if (v66)
  {
    v29 = (_QWORD **)__p;
    if (__p)
    {
      v30 = v65;
      v31 = __p;
      if (v65 != __p)
      {
        do
          v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        v31 = __p;
      }
      v65 = v29;
      operator delete(v31);
    }
    v17 = v62;
    if (!v62)
      goto LABEL_64;
    v32 = v63;
    v19 = v62;
    if (v63 == v62)
      goto LABEL_63;
    do
    {
      v34 = (void *)*--v32;
      v33 = v34;
      *v32 = 0;
      if (v34)
        operator delete[](v33);
    }
    while (v32 != v17);
    goto LABEL_62;
  }
  return v13;
}

uint64_t mlir::pdl::RewriteOp::getExternalArgs(mlir::pdl::RewriteOp *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = *(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64;
  else
    v2 = 0;
  v3 = *(unsigned int *)(v2 + 8);
  if ((v1 & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 32 * v3;
  else
    return 32 * v3;
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  int *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  int v76;
  const char *v77;
  uint64_t v78;
  _QWORD v79[3];
  void *v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE v83[96];
  void *v84;
  _QWORD *v85;
  void *__p;
  _QWORD **v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v77 = "expected DictionaryAttr to set properties";
      v78 = 41;
      v28 = &v76;
      v29 = (char *)v80;
      if (v81 >= v82)
      {
        v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v69 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          v29 = (char *)v80;
          v28 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          v28 = &v76;
          v29 = (char *)v80;
        }
      }
      v30 = &v29[24 * v81];
      v31 = *(_OWORD *)v28;
      *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
      *(_OWORD *)v30 = v31;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88)
      return 0;
    v32 = (_QWORD **)__p;
    if (__p)
    {
      v33 = v87;
      v34 = __p;
      if (v87 != __p)
      {
        do
          v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
        while (v33 != v32);
        v34 = __p;
      }
      v87 = v32;
      operator delete(v34);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_80;
    v35 = v85;
    v25 = v84;
    if (v85 == v84)
      goto LABEL_79;
    do
    {
      v37 = (void *)*--v35;
      v36 = v37;
      *v35 = 0;
      if (v37)
        operator delete[](v36);
    }
    while (v35 != v23);
    goto LABEL_78;
  }
  v8 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v75, "isNegated", 9uLL);
  if (v8)
  {
    v9 = (uint64_t)v8;
    if (!mlir::BoolAttr::classof(v8))
    {
      a3(v79, a4);
      if (v79[0])
      {
        v76 = 3;
        v78 = 54;
        v38 = &v76;
        v39 = (char *)v80;
        if (v81 >= v82)
        {
          v64 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            v70 = (char *)&v76 - (_BYTE *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            v39 = (char *)v80;
            v38 = (int *)((char *)v80 + v70);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
            v38 = &v76;
            v39 = (char *)v80;
          }
        }
        v40 = &v39[24 * v81];
        v41 = *(_OWORD *)v38;
        *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
        *(_OWORD *)v40 = v41;
        ++v81;
        if (v79[0])
        {
          v42 = &v76;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
          v43 = (char *)v80;
          if (v81 >= v82)
          {
            v67 = v81 + 1;
            if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
            {
              v73 = (char *)&v76 - (_BYTE *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
              v43 = (char *)v80;
              v42 = (int *)((char *)v80 + v73);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
              v42 = &v76;
              v43 = (char *)v80;
            }
          }
          v44 = &v43[24 * v81];
          v45 = *(_OWORD *)v42;
          *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
          *(_OWORD *)v44 = v45;
          ++v81;
          if (v79[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
        }
      }
      if (!v88)
        return 0;
      v46 = (_QWORD **)__p;
      if (__p)
      {
        v47 = v87;
        v48 = __p;
        if (v87 != __p)
        {
          do
            v47 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v47 - 1);
          while (v47 != v46);
          v48 = __p;
        }
        v87 = v46;
        operator delete(v48);
      }
      v23 = v84;
      if (!v84)
        goto LABEL_80;
      v49 = v85;
      v25 = v84;
      if (v85 == v84)
        goto LABEL_79;
      do
      {
        v51 = (void *)*--v49;
        v50 = v51;
        *v49 = 0;
        if (v51)
          operator delete[](v50);
      }
      while (v49 != v23);
      goto LABEL_78;
    }
    *a1 = v9;
  }
  v10 = mlir::DictionaryAttr::get((uint64_t)&v75, "name", 4uLL);
  if (!v10)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v77 = "expected key entry for name in DictionaryAttr to set Properties.";
      v78 = 64;
      v52 = &v76;
      v53 = (char *)v80;
      if (v81 >= v82)
      {
        v66 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v72 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
          v53 = (char *)v80;
          v52 = (int *)((char *)v80 + v72);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
          v52 = &v76;
          v53 = (char *)v80;
        }
      }
      v54 = &v53[24 * v81];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
      *(_OWORD *)v54 = v55;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88)
      return 0;
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v87;
      v58 = __p;
      if (v87 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v87 = v56;
      operator delete(v58);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_80;
    v59 = v85;
    v25 = v84;
    if (v85 == v84)
      goto LABEL_79;
    do
    {
      v61 = (void *)*--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        operator delete[](v60);
    }
    while (v59 != v23);
    goto LABEL_78;
  }
  v11 = v10;
  if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v10;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    v76 = 3;
    v78 = 49;
    v12 = &v76;
    v13 = (char *)v80;
    if (v81 >= v82)
    {
      v65 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        v71 = (char *)&v76 - (_BYTE *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
        v13 = (char *)v80;
        v12 = (int *)((char *)v80 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
        v12 = &v76;
        v13 = (char *)v80;
      }
    }
    v14 = &v13[24 * v81];
    v15 = *(_OWORD *)v12;
    *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v14 = v15;
    ++v81;
    if (v79[0])
    {
      v16 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v11);
      v17 = (char *)v80;
      if (v81 >= v82)
      {
        v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v74 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          v17 = (char *)v80;
          v16 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          v16 = &v76;
          v17 = (char *)v80;
        }
      }
      v18 = &v17[24 * v81];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
  }
  if (v88)
  {
    v20 = (_QWORD **)__p;
    if (__p)
    {
      v21 = v87;
      v22 = __p;
      if (v87 != __p)
      {
        do
          v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        v22 = __p;
      }
      v87 = v20;
      operator delete(v22);
    }
    v23 = v84;
    if (!v84)
      goto LABEL_80;
    v24 = v85;
    v25 = v84;
    if (v85 == v84)
    {
LABEL_79:
      v85 = v23;
      operator delete(v25);
LABEL_80:
      if (v80 != v83)
        free(v80);
      return 0;
    }
    do
    {
      v27 = (void *)*--v24;
      v26 = v27;
      *v24 = 0;
      if (v27)
        operator delete[](v26);
    }
    while (v24 != v23);
LABEL_78:
    v25 = v84;
    goto LABEL_79;
  }
  return 0;
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t DictionaryAttr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  mlir::DictionaryAttr *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v19 = v21;
  v20 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"isNegated", 9, *a2);
    v5 = v4;
    v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      v6 = v20;
    }
    v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *v7 = NamedAttr;
    v7[1] = v5;
    v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      v10 = (mlir::MLIRContext *)v19;
      if (v8)
        goto LABEL_6;
LABEL_13:
      DictionaryAttr = 0;
      if (v10 == (mlir::MLIRContext *)v21)
        return DictionaryAttr;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_5;
  }
  v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"name", 4, v9);
  v15 = v14;
  v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    v16 = v20;
  }
  v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  v8 = v20 + 1;
  LODWORD(v20) = v8;
  v10 = (mlir::MLIRContext *)v19;
  if (!v8)
    goto LABEL_13;
LABEL_6:
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  v10 = (mlir::MLIRContext *)v19;
  if (v19 != v21)
LABEL_7:
    free(v10);
  return DictionaryAttr;
}

BOOL mlir::pdl::ApplyNativeConstraintOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _BOOL8 result;

  v8 = (_QWORD *)mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v8, (const void **)"isNegated", (const char *)9, a3, a4))
  {
    v9 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"name", (const char *)4, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorB"
              "ase::Properties]";
        v15 = 122;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[185];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::getName(mlir::pdl::ApplyNativeConstraintOp *this)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v3 = *(_QWORD *)(v1 + 8);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v3);
}

BOOL mlir::pdl::ApplyNativeConstraintOp::getIsNegated(mlir::pdl::ApplyNativeConstraintOp *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&v2);
}

uint64_t mlir::pdl::ApplyNativeConstraintOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _QWORD **v11;
  _QWORD **v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  const void **v20;
  __int16 v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = (unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
  {
    v5 = *(_QWORD **)v3;
    v22[0] = v2;
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v4, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))return 0;
    v22[0] = *this;
    if (!mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v5, (const void **)"isNegated", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v22))return 0;
    v6 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v7 = *((unsigned int *)v6 + 17);
      if ((_DWORD)v7)
      {
        v8 = 0;
        for (i = v6[9] + 24;
              mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v8);
              i += 32)
        {
          if (v7 == ++v8)
            return 1;
        }
        return 0;
      }
    }
    return 1;
  }
  else
  {
    v20 = (const void **)"requires attribute 'name'";
    v21 = 259;
    mlir::OpState::emitOpError(this, &v20, (uint64_t)v22);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v11 = (_QWORD **)__p;
      if (__p)
      {
        v12 = v28;
        v13 = __p;
        if (v28 != __p)
        {
          do
            v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
          while (v12 != v11);
          v13 = __p;
        }
        v28 = v11;
        operator delete(v13);
      }
      v14 = v25;
      if (v25)
      {
        v15 = v26;
        v16 = v25;
        if (v26 != v25)
        {
          do
          {
            v18 = (void *)*--v15;
            v17 = v18;
            *v15 = 0;
            if (v18)
              operator delete[](v17);
          }
          while (v15 != v14);
          v16 = v25;
        }
        v26 = v14;
        operator delete(v16);
      }
      if (v23 != &v24)
        free(v23);
    }
  }
  return v10;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v10;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  const void **v48[4];
  __int16 v49;
  int v50;
  const char *v51;
  uint64_t v52;
  _QWORD v53[3];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[96];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (mlir::pdl::PDLType::classof(a2))
    return 1;
  v49 = 261;
  v48[0] = a3;
  v48[1] = a4;
  mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
  if (v53[0])
  {
    v50 = 3;
    v51 = " #";
    v52 = 2;
    v11 = &v50;
    v12 = (char *)v54;
    if (v55 >= v56)
    {
      v38 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        v44 = (char *)&v50 - (_BYTE *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        v12 = (char *)v54;
        v11 = (int *)((char *)v54 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        v11 = &v50;
        v12 = (char *)v54;
      }
    }
    v13 = &v12[24 * v55];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
    *(_OWORD *)v13 = v14;
    v15 = ++v55;
    if (v53[0])
    {
      v50 = 5;
      v51 = (const char *)a5;
      v16 = &v50;
      v17 = (char *)v54;
      if (v15 >= v56)
      {
        v39 = v15 + 1;
        v40 = (char *)v54 + 24 * v15 > (char *)&v50;
        if (v54 <= &v50 && v40)
        {
          v45 = (char *)&v50 - (_BYTE *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          v17 = (char *)v54;
          v16 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          v16 = &v50;
          v17 = (char *)v54;
        }
      }
      v18 = &v17[24 * v55];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      v20 = ++v55;
      if (v53[0])
      {
        v50 = 3;
        v51 = " must be variadic of pdl type, but got ";
        v52 = 39;
        v21 = &v50;
        v22 = (char *)v54;
        if (v20 >= v56)
        {
          v41 = v20 + 1;
          v42 = (char *)v54 + 24 * v20 > (char *)&v50;
          if (v54 <= &v50 && v42)
          {
            v46 = (char *)&v50 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            v22 = (char *)v54;
            v21 = (int *)((char *)v54 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            v21 = &v50;
            v22 = (char *)v54;
          }
        }
        v23 = &v22[24 * v55];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        ++v55;
        if (v53[0])
        {
          v25 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
          v26 = (char *)v54;
          if (v55 >= v56)
          {
            v43 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              v47 = (char *)&v50 - (_BYTE *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              v26 = (char *)v54;
              v25 = (int *)((char *)v54 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              v25 = &v50;
              v26 = (char *)v54;
            }
          }
          v27 = &v26[24 * v55];
          v28 = *(_OWORD *)v25;
          *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v27 = v28;
          ++v55;
        }
      }
    }
  }
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  if (v62)
  {
    v29 = (_QWORD **)__p;
    if (__p)
    {
      v30 = v61;
      v31 = __p;
      if (v61 != __p)
      {
        do
          v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        v31 = __p;
      }
      v61 = v29;
      operator delete(v31);
    }
    v32 = v58;
    if (v58)
    {
      v33 = v59;
      v34 = v58;
      if (v59 != v58)
      {
        do
        {
          v36 = (void *)*--v33;
          v35 = v36;
          *v33 = 0;
          if (v36)
            operator delete[](v35);
        }
        while (v33 != v32);
        v34 = v58;
      }
      v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57)
      free(v54);
  }
  return v10;
}

BOOL mlir::pdl::ApplyNativeConstraintOp::parse(uint64_t a1, _QWORD *a2)
{
  mlir::NoneType **v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  v17[0] = v18;
  v17[1] = (void *)0x400000000;
  v14 = 0;
  v15[0] = &v16;
  v15[1] = (void *)0x100000000;
  v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v14, v6))
    goto LABEL_12;
  if (v14)
  {
    v7 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(a2);
    *(_QWORD *)(v7 + 8) = v14;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
    && (v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, v17, 0, 1, 0xFFFFFFFFLL))&& (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v15)&& (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1)&& (v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1), (*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))&& (v9 = a2[1], v12[0] = a1, v12[1] = &v13, v12[2] = a2, mlir::pdl::ApplyNativeConstraintOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ApplyNativeConstraintOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v12)))
  {
    v10 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v17, (uint64_t)v15, v8, (uint64_t)(a2 + 2)) != 0;
  }
  else
  {
LABEL_12:
    v10 = 0;
  }
  if (v15[0] != &v16)
    free(v15[0]);
  if (v17[0] != v18)
    free(v17[0]);
  return v10;
}

void mlir::pdl::ApplyNativeConstraintOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  unint64_t v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  mlir::Operation *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  mlir::Operation *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  uint64_t v24;
  mlir::Operation *v25;
  mlir::ArrayAttr *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t Value;
  uint64_t v30;
  uint64_t v31[2];
  mlir::BoolAttr *v32[2];
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  v6 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v6 = 0;
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(v6 + 8));
  v7 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v8 = (_BYTE *)*((_QWORD *)v7 + 4);
  if (*((_BYTE **)v7 + 3) == v8)
  {
    llvm::raw_ostream::write(v7, "(", 1uLL);
    v9 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
      goto LABEL_8;
  }
  else
  {
    *v8 = 40;
    ++*((_QWORD *)v7 + 4);
    v9 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
LABEL_8:
      v10 = *((unsigned int *)v9 + 17);
      v11 = *((_QWORD *)v9 + 9);
      goto LABEL_9;
    }
  }
  v11 = 0;
  v10 = 0;
LABEL_9:
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v33 = ", ";
  v34 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v11, 0, v11, v10, (uint64_t)a2, v12, (uint64_t)&v33);
  v13 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 32);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 32;
  }
  v15 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if (*((_BYTE **)v15 + 3) == v16)
  {
    llvm::raw_ostream::write(v15, ":", 1uLL);
  }
  else
  {
    *v16 = 58;
    ++*((_QWORD *)v15 + 4);
  }
  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = 32;
  }
  v19 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v20 = *((unsigned int *)v19 + 17);
    v21 = *((_QWORD *)v19 + 9);
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  v31[0] = v21;
  v31[1] = v20;
  mlir::OperandRange::getTypes(v31, (uint64_t *)&v33);
  v32[0] = (mlir::BoolAttr *)", ";
  v32[1] = (mlir::BoolAttr *)2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v33, v34, (uint64_t)v35, v36, (uint64_t)a2, (uint64_t)a2, (uint64_t)v32);
  v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if (*((_BYTE **)v22 + 3) == v23)
  {
    llvm::raw_ostream::write(v22, ")", 1uLL);
  }
  else
  {
    *v23 = 41;
    ++*((_QWORD *)v22 + 4);
  }
  v33 = &v35;
  v35 = "name";
  v36 = 4;
  v34 = 0x200000001;
  v32[0] = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)*this + 24));
  v24 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (v24 && v24 == mlir::Builder::getBoolAttr(v32, 0))
  {
    v27 = v34;
    if (v34 >= HIDWORD(v34))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, &v35, v34 + 1, 16);
      v27 = v34;
    }
    v28 = (char *)v33 + 16 * v27;
    *v28 = "isNegated";
    v28[1] = 9;
    LODWORD(v34) = v34 + 1;
    v25 = *this;
    if (!*((_BYTE *)*this + 47))
      goto LABEL_28;
  }
  else
  {
    v25 = *this;
    if (!*((_BYTE *)*this + 47))
    {
LABEL_28:
      v26 = (mlir::Operation *)((char *)v25 + 56);
      goto LABEL_33;
    }
  }
  v32[0] = (mlir::BoolAttr *)mlir::Operation::getAttrDictionary(v25);
  v26 = (mlir::ArrayAttr *)v32;
LABEL_33:
  Value = mlir::ArrayAttr::getValue(v26);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v30, v33, v34);
  if (v33 != &v35)
    free(v33);
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::getResults(mlir::pdl::ApplyNativeRewriteOp *this)
{
  if (*(_DWORD *)(*(_QWORD *)this + 36))
    return *(_QWORD *)this - 16;
  else
    return 0;
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v26 = &v56;
      v27 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v27 = (char *)v60;
          v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v26 = &v56;
          v27 = (char *)v60;
        }
      }
      v28 = &v27[24 * v61];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v67;
      v32 = __p;
      if (v67 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v67 = v30;
      operator delete(v32);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v33 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "name", 4uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for name in DictionaryAttr to set Properties.";
      v58 = 64;
      v36 = &v56;
      v37 = (char *)v60;
      if (v61 >= v62)
      {
        v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v37 = (char *)v60;
          v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v36 = &v56;
          v37 = (char *)v60;
        }
      }
      v38 = &v37[24 * v61];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v67;
      v42 = __p;
      if (v67 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v67 = v40;
      operator delete(v42);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v43 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 49;
    v10 = &v56;
    v11 = (char *)v60;
    if (v61 >= v62)
    {
      v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v11 = (char *)v60;
        v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v10 = &v56;
        v11 = (char *)v60;
      }
    }
    v12 = &v11[24 * v61];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v61;
    if (v59[0])
    {
      v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v15 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v15 = (char *)v60;
          v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v14 = &v56;
          v15 = (char *)v60;
        }
      }
      v16 = &v15[24 * v61];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v67;
      v20 = __p;
      if (v67 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v67 = v18;
      operator delete(v20);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v22 = v65;
    v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
LABEL_57:
    v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties]";
        v15 = 119;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[187];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::ApplyNativeRewriteOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NextResultAtOffset;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  void *v21;
  const void **v23;
  __int16 v24;
  _QWORD v25[3];
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *__p;
  _QWORD **v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v25[0] = v2;
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v3, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v25))return 0;
    v4 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v5 = *((unsigned int *)v4 + 17);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = v4[9] + 24;
        while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v6))
        {
          ++v6;
          v7 += 32;
          if (v5 == v6)
          {
            v4 = *this;
            goto LABEL_9;
          }
        }
        return 0;
      }
    }
LABEL_9:
    v8 = *((unsigned int *)v4 + 9);
    v9 = (uint64_t)(v4 - 2);
    if (v8)
      v10 = v9;
    else
      v10 = 0;
    if ((_DWORD)v8)
    {
      v11 = 0;
      while (1)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, v11);
        if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, v11))break;
        if (v8 == ++v11)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  else
  {
    v23 = (const void **)"requires attribute 'name'";
    v24 = 259;
    mlir::OpState::emitOpError(this, &v23, (uint64_t)v25);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
    if (v25[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v25);
    if (v32)
    {
      v14 = (_QWORD **)__p;
      if (__p)
      {
        v15 = v31;
        v16 = __p;
        if (v31 != __p)
        {
          do
            v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
          while (v15 != v14);
          v16 = __p;
        }
        v31 = v14;
        operator delete(v16);
      }
      v17 = v28;
      if (v28)
      {
        v18 = v29;
        v19 = v28;
        if (v29 != v28)
        {
          do
          {
            v21 = (void *)*--v18;
            v20 = v21;
            *v18 = 0;
            if (v21)
              operator delete[](v20);
          }
          while (v18 != v17);
          v19 = v28;
        }
        v29 = v17;
        operator delete(v19);
      }
      if (v26 != &v27)
        free(v26);
    }
  }
  return v13;
}

BOOL mlir::pdl::ApplyNativeRewriteOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::NoneType **v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL8 v15;
  void *v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  void *__src;
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  void *v26[2];
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v26[0] = v27;
  v26[1] = (void *)0x400000000;
  v24[0] = &v25;
  v24[1] = (void *)0x100000000;
  v20 = 0;
  __src = &v23;
  v22 = 0x100000000;
  v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = mlir::NoneType::get(*v4, v5);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v20, v6))
    goto LABEL_22;
  if (v20)
  {
    v7 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v7 = v20;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
  {
    v8 = 0;
    if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      goto LABEL_13;
    goto LABEL_12;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, v26, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v24)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
  {
LABEL_22:
    v15 = 0;
    v16 = __src;
    if (__src == &v23)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    goto LABEL_13;
LABEL_12:
  if (!mlir::AsmParser::parseTypeList(a1, (uint64_t)&__src))
    goto LABEL_22;
LABEL_13:
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    goto LABEL_22;
  v9 = *(_QWORD *)(a2 + 8);
  v18[0] = a1;
  v18[1] = &v19;
  v18[2] = a2;
  v10 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v9 + 96));
  if (v10)
  {
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v10, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ApplyNativeRewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v18))goto LABEL_22;
  }
  v11 = __src;
  v12 = v22;
  v13 = *(unsigned int *)(a2 + 72);
  v14 = v13 + v22;
  if (v14 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v12)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v13), v11, 8 * v12);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v13 + v12;
  v15 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)v26, (uint64_t)v24, v8, a2 + 16) != 0;
  v16 = __src;
  if (__src != &v23)
LABEL_23:
    free(v16);
LABEL_24:
  if (v24[0] != &v25)
    free(v24[0]);
  if (v26[0] != v27)
    free(v26[0]);
  return v15;
}

void mlir::pdl::ApplyNativeRewriteOp::print(mlir::pdl::ApplyNativeRewriteOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *AttrDictionary;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64));
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) == 0 || !*(_DWORD *)(*(_QWORD *)this + 68))
    goto LABEL_24;
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    llvm::raw_ostream::write(v6, "(", 1uLL);
    v8 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
      goto LABEL_8;
LABEL_15:
    v10 = 0;
    v9 = 0;
    goto LABEL_9;
  }
  *v7 = 40;
  ++*((_QWORD *)v6 + 4);
  v8 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) == 0)
    goto LABEL_15;
LABEL_8:
  v9 = *(unsigned int *)(v8 + 68);
  v10 = *(_QWORD *)(v8 + 72);
LABEL_9:
  v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v39 = ", ";
  v40 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v10, 0, v10, v9, (uint64_t)a2, v11, (uint64_t)&v39);
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 32;
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, ":", 1uLL);
  }
  else
  {
    *v15 = 58;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = *(_QWORD *)this;
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
  {
    v19 = *(unsigned int *)(v18 + 68);
    v20 = *(_QWORD *)(v18 + 72);
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v35 = v20;
  v36 = v19;
  mlir::OperandRange::getTypes(&v35, (uint64_t *)&v39);
  AttrDictionary = ", ";
  v38 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, (uint64_t)v41, v42, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v22 = (_BYTE *)*((_QWORD *)v21 + 4);
  if (*((_BYTE **)v21 + 3) == v22)
  {
    llvm::raw_ostream::write(v21, ")", 1uLL);
    v23 = *(_BYTE **)this;
    if (!*(_DWORD *)(*(_QWORD *)this + 36))
      goto LABEL_37;
    goto LABEL_25;
  }
  *v22 = 41;
  ++*((_QWORD *)v21 + 4);
LABEL_24:
  v23 = *(_BYTE **)this;
  if (!*(_DWORD *)(*(_QWORD *)this + 36))
    goto LABEL_37;
LABEL_25:
  v24 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v25 = (_BYTE *)*((_QWORD *)v24 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
  {
    llvm::raw_ostream::write(v24, 32);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 32;
  }
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if (*((_BYTE **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ":", 1uLL);
  }
  else
  {
    *v27 = 58;
    ++*((_QWORD *)v26 + 4);
  }
  v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if ((unint64_t)v29 >= *((_QWORD *)v28 + 3))
  {
    llvm::raw_ostream::write(v28, 32);
  }
  else
  {
    *((_QWORD *)v28 + 4) = v29 + 1;
    *v29 = 32;
  }
  v30 = *(unsigned int *)(*(_QWORD *)this + 36);
  v31 = *(_QWORD *)this - 16;
  if (!(_DWORD)v30)
    v31 = 0;
  v35 = v31;
  v36 = v30;
  mlir::OperandRange::getTypes(&v35, (uint64_t *)&v39);
  AttrDictionary = ", ";
  v38 = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::ResultRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::ResultRange>,mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::AsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::ResultRange> const&,mlir::AsmPrinter &,mlir::AsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, (uint64_t)v41, v42, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  v23 = *(_BYTE **)this;
LABEL_37:
  v39 = &v41;
  v41 = "name";
  v42 = 4;
  v40 = 0x200000001;
  if (v23[47])
  {
    AttrDictionary = (const char *)mlir::Operation::getAttrDictionary((mlir::Operation *)v23);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v23 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v34, v39, v40);
  if (v39 != &v41)
    free(v39);
}

uint64_t mlir::pdl::AttributeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int *v8;
  char *v9;
  char *v10;
  __int128 v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  _QWORD v26[3];
  void *v27;
  unsigned int v28;
  unsigned int v29;
  _BYTE v30[96];
  void *v31;
  _QWORD *v32;
  void *__p;
  _QWORD **v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v4 = a2;
  else
    v4 = 0;
  v22 = v4;
  if (v4)
  {
    v6 = mlir::DictionaryAttr::get((uint64_t)&v22, "value", 5uLL);
    if (v6)
      *a1 = v6;
    return 1;
  }
  else
  {
    a3(v26, a4);
    if (v26[0])
    {
      v23 = 3;
      v24 = "expected DictionaryAttr to set properties";
      v25 = 41;
      v8 = &v23;
      v9 = (char *)v27;
      if (v28 >= v29)
      {
        v20 = v28 + 1;
        if (v27 <= &v23 && (char *)v27 + 24 * v28 > (char *)&v23)
        {
          v21 = (char *)&v23 - (_BYTE *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v20, 24);
          v9 = (char *)v27;
          v8 = (int *)((char *)v27 + v21);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v30, v20, 24);
          v8 = &v23;
          v9 = (char *)v27;
        }
      }
      v10 = &v9[24 * v28];
      v11 = *(_OWORD *)v8;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v10 = v11;
      ++v28;
      if (v26[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    }
    if (v35)
    {
      v12 = (_QWORD **)__p;
      if (__p)
      {
        v13 = v34;
        v14 = __p;
        if (v34 != __p)
        {
          do
            v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
          while (v13 != v12);
          v14 = __p;
        }
        v34 = v12;
        operator delete(v14);
      }
      v15 = v31;
      if (v31)
      {
        v16 = v32;
        v17 = v31;
        if (v32 != v31)
        {
          do
          {
            v19 = (void *)*--v16;
            v18 = v19;
            *v16 = 0;
            if (v19)
              operator delete[](v18);
          }
          while (v16 != v15);
          v17 = v31;
        }
        v32 = v15;
        operator delete(v17);
      }
      if (v27 != v30)
        free(v27);
    }
    return 0;
  }
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[189];
    return a1[32];
  }
  return result;
}

BOOL mlir::pdl::AttributeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const char *v3;
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  int *v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  int *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  int *v40;
  char *v41;
  char *v42;
  __int128 v43;
  int *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char v48;
  _QWORD **v49;
  _QWORD **v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  void *v56;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  const void **v76[4];
  __int16 v77;
  int v78;
  const char *v79;
  uint64_t v80;
  _QWORD v81[3];
  void *v82;
  unsigned int v83;
  unsigned int v84;
  _BYTE v85[96];
  void *v86;
  _QWORD *v87;
  void *__p;
  _QWORD **v89;
  char v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if ((*((_BYTE *)v2 + 46) & 0x80) == 0)
    goto LABEL_27;
  v3 = (const char *)*((unsigned int *)v2 + 17);
  if (v3 < 2)
  {
    if ((_DWORD)v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(v2, *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
      v2 = *this;
    }
LABEL_27:
    if (*((_DWORD *)v2 + 9))
      v27 = (uint64_t)(v2 - 2);
    else
      v27 = 0;
    v28 = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(_QWORD *)v28 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
      return 1;
    v29 = *this;
    v77 = 261;
    v76[0] = (const void **)"result";
    v76[1] = (const void **)6;
    mlir::Operation::emitOpError(v29, v76, (uint64_t)v81);
    if (v81[0])
    {
      v78 = 3;
      v79 = " #";
      v80 = 2;
      v30 = &v78;
      v31 = (char *)v82;
      if (v83 >= v84)
      {
        v61 = v83 + 1;
        if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
        {
          v71 = (char *)&v78 - (_BYTE *)v82;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v61, 24);
          v31 = (char *)v82;
          v30 = (int *)((char *)v82 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v61, 24);
          v30 = &v78;
          v31 = (char *)v82;
        }
      }
      v32 = &v31[24 * v83];
      v33 = *(_OWORD *)v30;
      *((_QWORD *)v32 + 2) = *((_QWORD *)v30 + 2);
      *(_OWORD *)v32 = v33;
      v34 = ++v83;
      if (v81[0])
      {
        v78 = 5;
        v79 = 0;
        v35 = &v78;
        v36 = (char *)v82;
        if (v34 >= v84)
        {
          v64 = v34 + 1;
          v65 = (char *)v82 + 24 * v34 > (char *)&v78;
          if (v82 <= &v78 && v65)
          {
            v73 = (char *)&v78 - (_BYTE *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v64, 24);
            v36 = (char *)v82;
            v35 = (int *)((char *)v82 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v64, 24);
            v35 = &v78;
            v36 = (char *)v82;
          }
        }
        v37 = &v36[24 * v83];
        v38 = *(_OWORD *)v35;
        *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
        *(_OWORD *)v37 = v38;
        v39 = ++v83;
        if (v81[0])
        {
          v78 = 3;
          v80 = 53;
          v40 = &v78;
          v41 = (char *)v82;
          if (v39 >= v84)
          {
            v66 = v39 + 1;
            v67 = (char *)v82 + 24 * v39 > (char *)&v78;
            if (v82 <= &v78 && v67)
            {
              v74 = (char *)&v78 - (_BYTE *)v82;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
              v41 = (char *)v82;
              v40 = (int *)((char *)v82 + v74);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v66, 24);
              v40 = &v78;
              v41 = (char *)v82;
            }
          }
          v42 = &v41[24 * v83];
          v43 = *(_OWORD *)v40;
          *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 2);
          *(_OWORD *)v42 = v43;
          ++v83;
          if (v81[0])
          {
            v44 = &v78;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v78, v28);
            v45 = (char *)v82;
            if (v83 >= v84)
            {
              v68 = v83 + 1;
              if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
              {
                v75 = (char *)&v78 - (_BYTE *)v82;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v68, 24);
                v45 = (char *)v82;
                v44 = (int *)((char *)v82 + v75);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v68, 24);
                v44 = &v78;
                v45 = (char *)v82;
              }
            }
            v46 = &v45[24 * v83];
            v47 = *(_OWORD *)v44;
            *((_QWORD *)v46 + 2) = *((_QWORD *)v44 + 2);
            *(_OWORD *)v46 = v47;
            ++v83;
          }
        }
      }
    }
    v48 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v81);
    if (v81[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v81);
    if (v90)
    {
      v49 = (_QWORD **)__p;
      if (__p)
      {
        v50 = v89;
        v51 = __p;
        if (v89 != __p)
        {
          do
            v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          v51 = __p;
        }
        v89 = v49;
        operator delete(v51);
      }
      v52 = v86;
      if (v86)
      {
        v53 = v87;
        v54 = v86;
        if (v87 != v86)
        {
          do
          {
            v56 = (void *)*--v53;
            v55 = v56;
            *v53 = 0;
            if (v56)
              operator delete[](v55);
          }
          while (v53 != v52);
          v54 = v86;
        }
        v87 = v52;
        operator delete(v54);
      }
      if (v82 != v85)
        free(v82);
    }
    return v48 != 0;
  }
  v76[0] = (const void **)"operand group starting at #";
  v77 = 259;
  mlir::OpState::emitOpError(this, v76, (uint64_t)v81);
  if (v81[0])
  {
    v78 = 5;
    v79 = 0;
    v4 = &v78;
    v5 = (char *)v82;
    if (v83 >= v84)
    {
      v58 = v83 + 1;
      if (v82 <= &v78 && (char *)v82 + 24 * v83 > (char *)&v78)
      {
        v69 = (char *)&v78 - (_BYTE *)v82;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v58, 24);
        v5 = (char *)v82;
        v4 = (int *)((char *)v82 + v69);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v58, 24);
        v4 = &v78;
        v5 = (char *)v82;
      }
    }
    v6 = &v5[24 * v83];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    v8 = ++v83;
    if (v81[0])
    {
      v78 = 3;
      v79 = " requires 0 or 1 element, but found ";
      v80 = 36;
      v9 = &v78;
      v10 = (char *)v82;
      if (v8 >= v84)
      {
        v59 = v8 + 1;
        v60 = (char *)v82 + 24 * v8 > (char *)&v78;
        if (v82 <= &v78 && v60)
        {
          v70 = (char *)&v78 - (_BYTE *)v82;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v59, 24);
          v10 = (char *)v82;
          v9 = (int *)((char *)v82 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v59, 24);
          v9 = &v78;
          v10 = (char *)v82;
        }
      }
      v11 = &v10[24 * v83];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v83;
      if (v81[0])
      {
        v78 = 5;
        v79 = v3;
        v14 = &v78;
        v15 = (char *)v82;
        if (v13 >= v84)
        {
          v62 = v13 + 1;
          v63 = (char *)v82 + 24 * v13 > (char *)&v78;
          if (v82 <= &v78 && v63)
          {
            v72 = (char *)&v78 - (_BYTE *)v82;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v62, 24);
            v15 = (char *)v82;
            v14 = (int *)((char *)v82 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, v85, v62, 24);
            v14 = &v78;
            v15 = (char *)v82;
          }
        }
        v16 = &v15[24 * v83];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v83;
      }
    }
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v81);
  if (v81[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v81);
  if (v90)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v89;
      v21 = __p;
      if (v89 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v89 = v19;
      operator delete(v21);
    }
    v22 = v86;
    if (v86)
    {
      v23 = v87;
      v24 = v86;
      if (v87 != v86)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v86;
      }
      v87 = v22;
      operator delete(v24);
    }
    if (v82 != v85)
      free(v82);
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  const void **v45[4];
  __int16 v46;
  int v47;
  const char *v48;
  uint64_t v49;
  _QWORD v50[3];
  void *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[96];
  void *v55;
  _QWORD *v56;
  void *__p;
  _QWORD **v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
    return 1;
  v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    v47 = 3;
    v48 = " #";
    v49 = 2;
    v7 = &v47;
    v8 = (char *)v51;
    if (v52 >= v53)
    {
      v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        v41 = (char *)&v47 - (_BYTE *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v8 = (char *)v51;
        v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v7 = &v47;
        v8 = (char *)v51;
      }
    }
    v9 = &v8[24 * v52];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    v11 = ++v52;
    if (v50[0])
    {
      v47 = 5;
      v48 = (const char *)a5;
      v12 = &v47;
      v13 = (char *)v51;
      if (v11 >= v53)
      {
        v36 = v11 + 1;
        v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          v42 = (char *)&v47 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v13 = (char *)v51;
          v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v12 = &v47;
          v13 = (char *)v51;
        }
      }
      v14 = &v13[24 * v52];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      v16 = ++v52;
      if (v50[0])
      {
        v47 = 3;
        v49 = 48;
        v17 = &v47;
        v18 = (char *)v51;
        if (v16 >= v53)
        {
          v38 = v16 + 1;
          v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            v43 = (char *)&v47 - (_BYTE *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v18 = (char *)v51;
            v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v17 = &v47;
            v18 = (char *)v51;
          }
        }
        v19 = &v18[24 * v52];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        ++v52;
        if (v50[0])
        {
          v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          v22 = (char *)v51;
          if (v52 >= v53)
          {
            v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              v44 = (char *)&v47 - (_BYTE *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v22 = (char *)v51;
              v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v21 = &v47;
              v22 = (char *)v51;
            }
          }
          v23 = &v22[24 * v52];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          ++v52;
        }
      }
    }
  }
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  if (v59)
  {
    v26 = (_QWORD **)__p;
    if (__p)
    {
      v27 = v58;
      v28 = __p;
      if (v58 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v58 = v26;
      operator delete(v28);
    }
    v29 = v55;
    if (v55)
    {
      v30 = v56;
      v31 = v55;
      if (v56 != v55)
      {
        do
        {
          v33 = (void *)*--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v30 != v29);
        v31 = v55;
      }
      v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54)
      free(v51);
  }
  return v25;
}

uint64_t mlir::pdl::AttributeOp::parse(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4;
  _OWORD *v5;
  char *v6;
  char *v7;
  __int128 v8;
  _QWORD *v9;
  mlir::MLIRContext **v10;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  mlir::MLIRContext **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v23;
  int64_t v24;
  _QWORD v25[4];
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[17];

  v29[16] = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = v29;
  v28 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    memset(v25, 0, 24);
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 680))(a1, v25, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4)
        goto LABEL_19;
      v5 = v25;
      v6 = (char *)v27;
      if (v28 >= HIDWORD(v28))
      {
        v23 = v28 + 1;
        if (v27 <= v25 && (char *)v27 + 32 * v28 > (char *)v25)
        {
          v24 = (char *)v25 - (_BYTE *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v23, 32);
          v6 = (char *)v27;
          v5 = (char *)v27 + v24;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v23, 32);
          v5 = v25;
          v6 = (char *)v27;
        }
      }
      v7 = &v6[32 * v28];
      v8 = v5[1];
      *(_OWORD *)v7 = *v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v28) = v28 + 1;
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
  {
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 408))(a1, &v26, 0))
      goto LABEL_19;
    if (v26)
    {
      v9 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>((_QWORD *)a2);
      *v9 = v26;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 464))(a1, a2 + 112))
  {
    mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96));
    v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
    SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
    v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v14 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
    v15 = mlir::StorageUniquer::getSingletonImpl(v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    v16 = *(unsigned int *)(a2 + 72);
    if (v16 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v16 + 1, 8);
      LODWORD(v16) = *(_DWORD *)(a2 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v16) = SingletonImpl;
    ++*(_DWORD *)(a2 + 72);
    if (!(_DWORD)v28)
    {
LABEL_17:
      v20 = 1;
      v21 = v27;
      if (v27 == v29)
        return v20;
      goto LABEL_20;
    }
    v17 = a2 + 16;
    v18 = (char *)v27;
    v19 = 32 * v28;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, v15, v17))
    {
      v18 += 32;
      v19 -= 32;
      if (!v19)
        goto LABEL_17;
    }
  }
LABEL_19:
  v20 = 0;
  v21 = v27;
  if (v27 != v29)
LABEL_20:
    free(v21);
  return v20;
}

void mlir::pdl::AttributeOp::print(mlir::pdl::AttributeOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4;
  unsigned int v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v20;
  unint64_t AttrDictionary;
  void *v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(_QWORD *)(*(_QWORD *)(v4 + 72) + 24))
  {
    v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 32;
    }
    v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (*((_BYTE **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, ":", 1uLL);
    }
    else
    {
      *v9 = 58;
      ++*((_QWORD *)v8 + 4);
    }
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
    v4 = *(_QWORD *)this;
    v5 = *(_DWORD *)(*(_QWORD *)this + 44);
    if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(_QWORD *)(*(_QWORD *)(v4 + 72) + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 160))(a2);
      v4 = *(_QWORD *)this;
      v5 = *(_DWORD *)(*(_QWORD *)this + 44);
    }
  }
  if (*(_QWORD *)(v4 + 16 * ((v5 >> 23) & 1) + 64))
  {
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 32;
    }
    v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if (*((_BYTE **)v14 + 3) == v15)
    {
      llvm::raw_ostream::write(v14, "=", 1uLL);
    }
    else
    {
      *v15 = 61;
      ++*((_QWORD *)v14 + 4);
    }
    v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, 32);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64));
    v4 = *(_QWORD *)this;
    v5 = *(_DWORD *)(*(_QWORD *)this + 44);
  }
  v22 = v24;
  v24[0] = "value";
  v24[1] = 5;
  v23 = 0x200000001;
  if (HIBYTE(v5))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 200))(a2, Value, v20, v22, v23);
  if (v22 != v24)
    free(v22);
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  const void **v45[4];
  __int16 v46;
  int v47;
  const char *v48;
  uint64_t v49;
  _QWORD v50[3];
  void *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[96];
  void *v55;
  _QWORD *v56;
  void *__p;
  _QWORD **v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id)
    return 1;
  v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    v47 = 3;
    v48 = " #";
    v49 = 2;
    v7 = &v47;
    v8 = (char *)v51;
    if (v52 >= v53)
    {
      v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        v41 = (char *)&v47 - (_BYTE *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v8 = (char *)v51;
        v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v7 = &v47;
        v8 = (char *)v51;
      }
    }
    v9 = &v8[24 * v52];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    v11 = ++v52;
    if (v50[0])
    {
      v47 = 5;
      v48 = (const char *)a5;
      v12 = &v47;
      v13 = (char *)v51;
      if (v11 >= v53)
      {
        v36 = v11 + 1;
        v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          v42 = (char *)&v47 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v13 = (char *)v51;
          v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v12 = &v47;
          v13 = (char *)v51;
        }
      }
      v14 = &v13[24 * v52];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      v16 = ++v52;
      if (v50[0])
      {
        v47 = 3;
        v49 = 55;
        v17 = &v47;
        v18 = (char *)v51;
        if (v16 >= v53)
        {
          v38 = v16 + 1;
          v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            v43 = (char *)&v47 - (_BYTE *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v18 = (char *)v51;
            v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v17 = &v47;
            v18 = (char *)v51;
          }
        }
        v19 = &v18[24 * v52];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        ++v52;
        if (v50[0])
        {
          v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          v22 = (char *)v51;
          if (v52 >= v53)
          {
            v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              v44 = (char *)&v47 - (_BYTE *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v22 = (char *)v51;
              v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v21 = &v47;
              v22 = (char *)v51;
            }
          }
          v23 = &v22[24 * v52];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          ++v52;
        }
      }
    }
  }
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  if (v59)
  {
    v26 = (_QWORD **)__p;
    if (__p)
    {
      v27 = v58;
      v28 = __p;
      if (v58 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v58 = v26;
      operator delete(v28);
    }
    v29 = v55;
    if (v55)
    {
      v30 = v56;
      v31 = v55;
      if (v56 != v55)
      {
        do
        {
          v33 = (void *)*--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v30 != v29);
        v31 = v55;
      }
      v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54)
      free(v51);
  }
  return v25;
}

BOOL mlir::pdl::EraseOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::MLIRContext **v4;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  _QWORD v8[5];

  v8[4] = *MEMORY[0x1E0C80C00];
  memset(v8, 0, 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8, 1))
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v4 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v4);
  SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v8, SingletonImpl, a2 + 16) != 0;
}

void mlir::pdl::EraseOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v9;
  unint64_t AttrDictionary;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v11 = v13;
  v12 = 0x200000000;
  v6 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v6);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v6 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v9, v11, v12);
  if (v11 != v13)
    free(v11);
}

BOOL mlir::pdl::OperandOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const char *v3;
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t NextResultAtOffset;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  BOOL v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  const void **v38;
  __int16 v39;
  int v40;
  const char *v41;
  uint64_t v42;
  _QWORD v43[3];
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48;
  _QWORD *v49;
  void *__p;
  _QWORD **v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if ((*((_BYTE *)v2 + 46) & 0x80) == 0)
  {
LABEL_27:
    if (*((_DWORD *)v2 + 9))
      v27 = (uint64_t)(v2 - 2);
    else
      v27 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
    return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  v3 = (const char *)*((unsigned int *)v2 + 17);
  if (v3 < 2)
  {
    if ((_DWORD)v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1(v2, *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
      v2 = *this;
    }
    goto LABEL_27;
  }
  v38 = (const void **)"operand group starting at #";
  v39 = 259;
  mlir::OpState::emitOpError(this, &v38, (uint64_t)v43);
  if (v43[0])
  {
    v40 = 5;
    v41 = 0;
    v4 = &v40;
    v5 = (char *)v44;
    if (v45 >= v46)
    {
      v30 = v45 + 1;
      if (v44 <= &v40 && (char *)v44 + 24 * v45 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
        v5 = (char *)v44;
        v4 = (int *)((char *)v44 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v30, 24);
        v4 = &v40;
        v5 = (char *)v44;
      }
    }
    v6 = &v5[24 * v45];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    v8 = ++v45;
    if (v43[0])
    {
      v40 = 3;
      v41 = " requires 0 or 1 element, but found ";
      v42 = 36;
      v9 = &v40;
      v10 = (char *)v44;
      if (v8 >= v46)
      {
        v31 = v8 + 1;
        v32 = (char *)v44 + 24 * v8 > (char *)&v40;
        if (v44 <= &v40 && v32)
        {
          v36 = (char *)&v40 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
          v10 = (char *)v44;
          v9 = (int *)((char *)v44 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
          v9 = &v40;
          v10 = (char *)v44;
        }
      }
      v11 = &v10[24 * v45];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v45;
      if (v43[0])
      {
        v40 = 5;
        v41 = v3;
        v14 = &v40;
        v15 = (char *)v44;
        if (v13 >= v46)
        {
          v33 = v13 + 1;
          v34 = (char *)v44 + 24 * v13 > (char *)&v40;
          if (v44 <= &v40 && v34)
          {
            v37 = (char *)&v40 - (_BYTE *)v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            v15 = (char *)v44;
            v14 = (int *)((char *)v44 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
            v14 = &v40;
            v15 = (char *)v44;
          }
        }
        v16 = &v15[24 * v45];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v45;
      }
    }
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
  if (v43[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
  if (v52)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v51;
      v21 = __p;
      if (v51 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v51 = v19;
      operator delete(v21);
    }
    v22 = v48;
    if (v48)
    {
      v23 = v49;
      v24 = v48;
      if (v49 != v48)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v48;
      }
      v49 = v22;
      operator delete(v24);
    }
    if (v44 != v47)
      free(v44);
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  const void **v45[4];
  __int16 v46;
  int v47;
  const char *v48;
  uint64_t v49;
  _QWORD v50[3];
  void *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[96];
  void *v55;
  _QWORD *v56;
  void *__p;
  _QWORD **v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
    return 1;
  v46 = 261;
  v45[0] = a3;
  v45[1] = a4;
  mlir::Operation::emitOpError(a1, v45, (uint64_t)v50);
  if (v50[0])
  {
    v47 = 3;
    v48 = " #";
    v49 = 2;
    v7 = &v47;
    v8 = (char *)v51;
    if (v52 >= v53)
    {
      v35 = v52 + 1;
      if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
      {
        v41 = (char *)&v47 - (_BYTE *)v51;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v8 = (char *)v51;
        v7 = (int *)((char *)v51 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v35, 24);
        v7 = &v47;
        v8 = (char *)v51;
      }
    }
    v9 = &v8[24 * v52];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v9 = v10;
    v11 = ++v52;
    if (v50[0])
    {
      v47 = 5;
      v48 = (const char *)a5;
      v12 = &v47;
      v13 = (char *)v51;
      if (v11 >= v53)
      {
        v36 = v11 + 1;
        v37 = (char *)v51 + 24 * v11 > (char *)&v47;
        if (v51 <= &v47 && v37)
        {
          v42 = (char *)&v47 - (_BYTE *)v51;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v13 = (char *)v51;
          v12 = (int *)((char *)v51 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v36, 24);
          v12 = &v47;
          v13 = (char *)v51;
        }
      }
      v14 = &v13[24 * v52];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      v16 = ++v52;
      if (v50[0])
      {
        v47 = 3;
        v49 = 50;
        v17 = &v47;
        v18 = (char *)v51;
        if (v16 >= v53)
        {
          v38 = v16 + 1;
          v39 = (char *)v51 + 24 * v16 > (char *)&v47;
          if (v51 <= &v47 && v39)
          {
            v43 = (char *)&v47 - (_BYTE *)v51;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v18 = (char *)v51;
            v17 = (int *)((char *)v51 + v43);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v38, 24);
            v17 = &v47;
            v18 = (char *)v51;
          }
        }
        v19 = &v18[24 * v52];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        ++v52;
        if (v50[0])
        {
          v21 = &v47;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v47, a2);
          v22 = (char *)v51;
          if (v52 >= v53)
          {
            v40 = v52 + 1;
            if (v51 <= &v47 && (char *)v51 + 24 * v52 > (char *)&v47)
            {
              v44 = (char *)&v47 - (_BYTE *)v51;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v22 = (char *)v51;
              v21 = (int *)((char *)v51 + v44);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, v54, v40, 24);
              v21 = &v47;
              v22 = (char *)v51;
            }
          }
          v23 = &v22[24 * v52];
          v24 = *(_OWORD *)v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          ++v52;
        }
      }
    }
  }
  v25 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v50);
  if (v50[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v50);
  if (v59)
  {
    v26 = (_QWORD **)__p;
    if (__p)
    {
      v27 = v58;
      v28 = __p;
      if (v58 != __p)
      {
        do
          v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        v28 = __p;
      }
      v58 = v26;
      operator delete(v28);
    }
    v29 = v55;
    if (v55)
    {
      v30 = v56;
      v31 = v55;
      if (v56 != v55)
      {
        do
        {
          v33 = (void *)*--v30;
          v32 = v33;
          *v30 = 0;
          if (v33)
            operator delete[](v32);
        }
        while (v30 != v29);
        v31 = v55;
      }
      v56 = v29;
      operator delete(v31);
    }
    if (v51 != v54)
      free(v51);
  }
  return v25;
}

uint64_t mlir::pdl::OperandOp::parse(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4;
  void **v5;
  char *v6;
  char *v7;
  __int128 v8;
  mlir::MLIRContext **v9;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  mlir::MLIRContext **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v22;
  int64_t v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    memset(v24, 0, 24);
    v4 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 680))(a1, v24, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4)
        goto LABEL_15;
      v5 = v24;
      v6 = (char *)v25;
      if (v26 >= HIDWORD(v26))
      {
        v22 = v26 + 1;
        if (v25 <= v24 && (char *)v25 + 32 * v26 > (char *)v24)
        {
          v23 = (char *)v24 - (_BYTE *)v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v22, 32);
          v6 = (char *)v25;
          v5 = (void **)((char *)v25 + v23);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v27, v22, 32);
          v5 = v24;
          v6 = (char *)v25;
        }
      }
      v7 = &v6[32 * v26];
      v8 = *((_OWORD *)v5 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v26) = v26 + 1;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
  {
    v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    v12 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v13 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v12);
    v14 = mlir::StorageUniquer::getSingletonImpl(v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    v15 = *(unsigned int *)(a2 + 72);
    if (v15 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a2 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v15) = SingletonImpl;
    ++*(_DWORD *)(a2 + 72);
    if (!(_DWORD)v26)
    {
LABEL_13:
      v19 = 1;
      v20 = v25;
      if (v25 == v27)
        return v19;
      goto LABEL_16;
    }
    v16 = a2 + 16;
    v17 = (char *)v25;
    v18 = 32 * v26;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, v14, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18)
        goto LABEL_13;
    }
  }
LABEL_15:
  v19 = 0;
  v20 = v25;
  if (v25 != v27)
LABEL_16:
    free(v20);
  return v19;
}

void mlir::pdl::OperandOp::print(mlir::pdl::OperandOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4;
  unsigned int v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v14;
  unint64_t AttrDictionary;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  v5 = *(_DWORD *)(v4 + 44);
  if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(_QWORD *)(*(_QWORD *)(v4 + 72) + 24))
  {
    v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v7 = (_BYTE *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
    {
      llvm::raw_ostream::write(v6, 32);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v7 + 1;
      *v7 = 32;
    }
    v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if (*((_BYTE **)v8 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, ":", 1uLL);
    }
    else
    {
      *v9 = 58;
      ++*((_QWORD *)v8 + 4);
    }
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
    v4 = *(_QWORD *)this;
    v5 = *(_DWORD *)(*(_QWORD *)this + 44);
    if ((v5 & 0x800000) != 0 && *(_DWORD *)(v4 + 68) && *(_QWORD *)(*(_QWORD *)(v4 + 72) + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 160))(a2);
      v4 = *(_QWORD *)this;
      v5 = *(_DWORD *)(*(_QWORD *)this + 44);
    }
  }
  v16 = v18;
  v17 = 0x200000000;
  if (HIBYTE(v5))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v14, v16, v17);
  if (v16 != v18)
    free(v16);
}

BOOL mlir::pdl::OperandsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const char *v3;
  int *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD **v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t NextResultAtOffset;
  uint64_t *v29;
  unint64_t v30;
  int *v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  int *v41;
  char *v42;
  char *v43;
  __int128 v44;
  int *v45;
  char *v46;
  char *v47;
  __int128 v48;
  char v49;
  _QWORD **v50;
  _QWORD **v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  void *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  const void **v77[4];
  __int16 v78;
  int v79;
  const char *v80;
  uint64_t v81;
  _QWORD v82[3];
  void *v83;
  unsigned int v84;
  unsigned int v85;
  _BYTE v86[96];
  void *v87;
  _QWORD *v88;
  void *__p;
  _QWORD **v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if ((*((_BYTE *)v2 + 46) & 0x80) == 0)
    goto LABEL_27;
  v3 = (const char *)*((unsigned int *)v2 + 17);
  if (v3 < 2)
  {
    if ((_DWORD)v3)
    {
      if (!mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(v2, *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
      v2 = *this;
    }
LABEL_27:
    if (*((_DWORD *)v2 + 9))
      v27 = (uint64_t)(v2 - 2);
    else
      v27 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v27, 0);
    v29 = *this;
    v30 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(_QWORD *)v30 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v82[0] = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v82) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        return 1;
    }
    v78 = 261;
    v77[0] = (const void **)"result";
    v77[1] = (const void **)6;
    mlir::Operation::emitOpError(v29, v77, (uint64_t)v82);
    if (v82[0])
    {
      v79 = 3;
      v80 = " #";
      v81 = 2;
      v31 = &v79;
      v32 = (char *)v83;
      if (v84 >= v85)
      {
        v60 = v84 + 1;
        if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
        {
          v71 = (char *)&v79 - (_BYTE *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v60, 24);
          v32 = (char *)v83;
          v31 = (int *)((char *)v83 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v60, 24);
          v31 = &v79;
          v32 = (char *)v83;
        }
      }
      v33 = &v32[24 * v84];
      v34 = *(_OWORD *)v31;
      *((_QWORD *)v33 + 2) = *((_QWORD *)v31 + 2);
      *(_OWORD *)v33 = v34;
      v35 = ++v84;
      if (v82[0])
      {
        v79 = 5;
        v80 = 0;
        v36 = &v79;
        v37 = (char *)v83;
        if (v35 >= v85)
        {
          v63 = v35 + 1;
          v64 = (char *)v83 + 24 * v35 > (char *)&v79;
          if (v83 <= &v79 && v64)
          {
            v73 = (char *)&v79 - (_BYTE *)v83;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v63, 24);
            v37 = (char *)v83;
            v36 = (int *)((char *)v83 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v63, 24);
            v36 = &v79;
            v37 = (char *)v83;
          }
        }
        v38 = &v37[24 * v84];
        v39 = *(_OWORD *)v36;
        *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
        *(_OWORD *)v38 = v39;
        v40 = ++v84;
        if (v82[0])
        {
          v79 = 3;
          v81 = 66;
          v41 = &v79;
          v42 = (char *)v83;
          if (v40 >= v85)
          {
            v67 = v40 + 1;
            v68 = (char *)v83 + 24 * v40 > (char *)&v79;
            if (v83 <= &v79 && v68)
            {
              v75 = (char *)&v79 - (_BYTE *)v83;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v67, 24);
              v42 = (char *)v83;
              v41 = (int *)((char *)v83 + v75);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v67, 24);
              v41 = &v79;
              v42 = (char *)v83;
            }
          }
          v43 = &v42[24 * v84];
          v44 = *(_OWORD *)v41;
          *((_QWORD *)v43 + 2) = *((_QWORD *)v41 + 2);
          *(_OWORD *)v43 = v44;
          ++v84;
          if (v82[0])
          {
            v45 = &v79;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v79, v30);
            v46 = (char *)v83;
            if (v84 >= v85)
            {
              v69 = v84 + 1;
              if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
              {
                v76 = (char *)&v79 - (_BYTE *)v83;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v69, 24);
                v46 = (char *)v83;
                v45 = (int *)((char *)v83 + v76);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v69, 24);
                v45 = &v79;
                v46 = (char *)v83;
              }
            }
            v47 = &v46[24 * v84];
            v48 = *(_OWORD *)v45;
            *((_QWORD *)v47 + 2) = *((_QWORD *)v45 + 2);
            *(_OWORD *)v47 = v48;
            ++v84;
          }
        }
      }
    }
    v49 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v82);
    if (v82[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
    if (v91)
    {
      v50 = (_QWORD **)__p;
      if (__p)
      {
        v51 = v90;
        v52 = __p;
        if (v90 != __p)
        {
          do
            v51 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v51 - 1);
          while (v51 != v50);
          v52 = __p;
        }
        v90 = v50;
        operator delete(v52);
      }
      v53 = v87;
      if (v87)
      {
        v54 = v88;
        v55 = v87;
        if (v88 != v87)
        {
          do
          {
            v57 = (void *)*--v54;
            v56 = v57;
            *v54 = 0;
            if (v57)
              operator delete[](v56);
          }
          while (v54 != v53);
          v55 = v87;
        }
        v88 = v53;
        operator delete(v55);
      }
      if (v83 != v86)
        free(v83);
    }
    return v49 != 0;
  }
  v77[0] = (const void **)"operand group starting at #";
  v78 = 259;
  mlir::OpState::emitOpError(this, v77, (uint64_t)v82);
  if (v82[0])
  {
    v79 = 5;
    v80 = 0;
    v4 = &v79;
    v5 = (char *)v83;
    if (v84 >= v85)
    {
      v59 = v84 + 1;
      if (v83 <= &v79 && (char *)v83 + 24 * v84 > (char *)&v79)
      {
        v70 = (char *)&v79 - (_BYTE *)v83;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v59, 24);
        v5 = (char *)v83;
        v4 = (int *)((char *)v83 + v70);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v59, 24);
        v4 = &v79;
        v5 = (char *)v83;
      }
    }
    v6 = &v5[24 * v84];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *(_OWORD *)v6 = v7;
    v8 = ++v84;
    if (v82[0])
    {
      v79 = 3;
      v80 = " requires 0 or 1 element, but found ";
      v81 = 36;
      v9 = &v79;
      v10 = (char *)v83;
      if (v8 >= v85)
      {
        v61 = v8 + 1;
        v62 = (char *)v83 + 24 * v8 > (char *)&v79;
        if (v83 <= &v79 && v62)
        {
          v72 = (char *)&v79 - (_BYTE *)v83;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v61, 24);
          v10 = (char *)v83;
          v9 = (int *)((char *)v83 + v72);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v61, 24);
          v9 = &v79;
          v10 = (char *)v83;
        }
      }
      v11 = &v10[24 * v84];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v11 = v12;
      v13 = ++v84;
      if (v82[0])
      {
        v79 = 5;
        v80 = v3;
        v14 = &v79;
        v15 = (char *)v83;
        if (v13 >= v85)
        {
          v65 = v13 + 1;
          v66 = (char *)v83 + 24 * v13 > (char *)&v79;
          if (v83 <= &v79 && v66)
          {
            v74 = (char *)&v79 - (_BYTE *)v83;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v65, 24);
            v15 = (char *)v83;
            v14 = (int *)((char *)v83 + v74);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v86, v65, 24);
            v14 = &v79;
            v15 = (char *)v83;
          }
        }
        v16 = &v15[24 * v84];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v84;
      }
    }
  }
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v82);
  if (v82[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v82);
  if (v91)
  {
    v19 = (_QWORD **)__p;
    if (__p)
    {
      v20 = v90;
      v21 = __p;
      if (v90 != __p)
      {
        do
          v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
        while (v20 != v19);
        v21 = __p;
      }
      v90 = v19;
      operator delete(v21);
    }
    v22 = v87;
    if (v87)
    {
      v23 = v88;
      v24 = v87;
      if (v88 != v87)
      {
        do
        {
          v26 = (void *)*--v23;
          v25 = v26;
          *v23 = 0;
          if (v26)
            operator delete[](v25);
        }
        while (v23 != v22);
        v24 = v87;
      }
      v88 = v22;
      operator delete(v24);
    }
    if (v83 != v86)
      free(v83);
  }
  return v18;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps5(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  const void **v48[4];
  __int16 v49;
  int v50;
  const char *v51;
  uint64_t v52;
  _QWORD v53[3];
  void *v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[96];
  void *v58;
  _QWORD *v59;
  void *__p;
  _QWORD **v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v53[0] = a2;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v53) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
      return 1;
  }
  v49 = 261;
  v48[0] = a3;
  v48[1] = a4;
  mlir::Operation::emitOpError(a1, v48, (uint64_t)v53);
  if (v53[0])
  {
    v50 = 3;
    v51 = " #";
    v52 = 2;
    v10 = &v50;
    v11 = (char *)v54;
    if (v55 >= v56)
    {
      v38 = v55 + 1;
      if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
      {
        v44 = (char *)&v50 - (_BYTE *)v54;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        v11 = (char *)v54;
        v10 = (int *)((char *)v54 + v44);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v38, 24);
        v10 = &v50;
        v11 = (char *)v54;
      }
    }
    v12 = &v11[24 * v55];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    v14 = ++v55;
    if (v53[0])
    {
      v50 = 5;
      v51 = (const char *)a5;
      v15 = &v50;
      v16 = (char *)v54;
      if (v14 >= v56)
      {
        v39 = v14 + 1;
        v40 = (char *)v54 + 24 * v14 > (char *)&v50;
        if (v54 <= &v50 && v40)
        {
          v45 = (char *)&v50 - (_BYTE *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          v16 = (char *)v54;
          v15 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v39, 24);
          v15 = &v50;
          v16 = (char *)v54;
        }
      }
      v17 = &v16[24 * v55];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      v19 = ++v55;
      if (v53[0])
      {
        v50 = 3;
        v52 = 64;
        v20 = &v50;
        v21 = (char *)v54;
        if (v19 >= v56)
        {
          v41 = v19 + 1;
          v42 = (char *)v54 + 24 * v19 > (char *)&v50;
          if (v54 <= &v50 && v42)
          {
            v46 = (char *)&v50 - (_BYTE *)v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            v21 = (char *)v54;
            v20 = (int *)((char *)v54 + v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v41, 24);
            v20 = &v50;
            v21 = (char *)v54;
          }
        }
        v22 = &v21[24 * v55];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v22 = v23;
        ++v55;
        if (v53[0])
        {
          v24 = &v50;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v50, a2);
          v25 = (char *)v54;
          if (v55 >= v56)
          {
            v43 = v55 + 1;
            if (v54 <= &v50 && (char *)v54 + 24 * v55 > (char *)&v50)
            {
              v47 = (char *)&v50 - (_BYTE *)v54;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              v25 = (char *)v54;
              v24 = (int *)((char *)v54 + v47);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v43, 24);
              v24 = &v50;
              v25 = (char *)v54;
            }
          }
          v26 = &v25[24 * v55];
          v27 = *(_OWORD *)v24;
          *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
          *(_OWORD *)v26 = v27;
          ++v55;
        }
      }
    }
  }
  v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v53);
  if (v53[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v53);
  if (v62)
  {
    v29 = (_QWORD **)__p;
    if (__p)
    {
      v30 = v61;
      v31 = __p;
      if (v61 != __p)
      {
        do
          v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        v31 = __p;
      }
      v61 = v29;
      operator delete(v31);
    }
    v32 = v58;
    if (v58)
    {
      v33 = v59;
      v34 = v58;
      if (v59 != v58)
      {
        do
        {
          v36 = (void *)*--v33;
          v35 = v36;
          *v33 = 0;
          if (v36)
            operator delete[](v35);
        }
        while (v33 != v32);
        v34 = v58;
      }
      v59 = v32;
      operator delete(v34);
    }
    if (v54 != v57)
      free(v54);
  }
  return v28;
}

uint64_t mlir::pdl::OperandsOp::parse(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4;
  void **v5;
  char *v6;
  char *v7;
  __int128 v8;
  mlir::MLIRContext **v9;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  uint64_t v12;
  mlir::MLIRContext **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v24;
  int64_t v25;
  void *v26[4];
  void *v27;
  uint64_t v28;
  _QWORD v29[17];

  v29[16] = *MEMORY[0x1E0C80C00];
  v27 = v29;
  v28 = 0x400000000;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    memset(v26, 0, 24);
    v4 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 680))(a1, v26, 1);
    if (v4 >= 0x100u)
    {
      if (!(_BYTE)v4)
        goto LABEL_15;
      v5 = v26;
      v6 = (char *)v27;
      if (v28 >= HIDWORD(v28))
      {
        v24 = v28 + 1;
        if (v27 <= v26 && (char *)v27 + 32 * v28 > (char *)v26)
        {
          v25 = (char *)v26 - (_BYTE *)v27;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v24, 32);
          v6 = (char *)v27;
          v5 = (void **)((char *)v27 + v25);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v24, 32);
          v5 = v26;
          v6 = (char *)v27;
        }
      }
      v7 = &v6[32 * v28];
      v8 = *((_OWORD *)v5 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v5;
      *((_OWORD *)v7 + 1) = v8;
      LODWORD(v28) = v28 + 1;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
  {
    v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    v12 = mlir::pdl::RangeType::get(SingletonImpl);
    v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v14 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
    v15 = mlir::StorageUniquer::getSingletonImpl(v14, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
    v16 = mlir::pdl::RangeType::get(v15);
    v17 = *(unsigned int *)(a2 + 72);
    if (v17 >= *(_DWORD *)(a2 + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17 + 1, 8);
      LODWORD(v17) = *(_DWORD *)(a2 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v17) = v12;
    ++*(_DWORD *)(a2 + 72);
    if (!(_DWORD)v28)
    {
LABEL_13:
      v21 = 1;
      v22 = v27;
      if (v27 == v29)
        return v21;
      goto LABEL_16;
    }
    v18 = a2 + 16;
    v19 = (char *)v27;
    v20 = 32 * v28;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v19, v16, v18))
    {
      v19 += 32;
      v20 -= 32;
      if (!v20)
        goto LABEL_13;
    }
  }
LABEL_15:
  v21 = 0;
  v22 = v27;
  if (v27 != v29)
LABEL_16:
    free(v22);
  return v21;
}

uint64_t mlir::pdl::OperationOp::getOperandValues(mlir::pdl::OperationOp *this)
{
  if ((*(_DWORD *)(*(_QWORD *)this + 44) & 0x800000) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72);
  else
    return 0;
}

BOOL mlir::pdl::OperationOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  int *v64;
  char *v65;
  char *v66;
  __int128 v67;
  _QWORD **v68;
  _QWORD **v69;
  void *v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  int v89;
  const char *v90;
  uint64_t v91;
  _QWORD v92[3];
  void *v93;
  unsigned int v94;
  unsigned int v95;
  _BYTE v96[96];
  void *v97;
  _QWORD *v98;
  void *__p;
  _QWORD **v100;
  char v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v88 = v6;
  if (!v6)
  {
    a3(v92, a4);
    if (v92[0])
    {
      v89 = 3;
      v90 = "expected DictionaryAttr to set properties";
      v91 = 41;
      v26 = &v89;
      v27 = (char *)v93;
      if (v94 >= v95)
      {
        v74 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          v81 = (char *)&v89 - (_BYTE *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          v27 = (char *)v93;
          v26 = (int *)((char *)v93 + v81);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v74, 24);
          v26 = &v89;
          v27 = (char *)v93;
        }
      }
      v28 = &v27[24 * v94];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v94;
      if (v92[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
    }
    if (!v101)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v100;
      v32 = __p;
      if (v100 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v100 = v30;
      operator delete(v32);
    }
    v21 = v97;
    if (!v97)
      goto LABEL_100;
    v33 = v98;
    v23 = v97;
    if (v98 == v97)
    {
LABEL_99:
      v98 = v21;
      operator delete(v23);
LABEL_100:
      if (v93 != v96)
        free(v93);
      return 0;
    }
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
LABEL_98:
    v23 = v97;
    goto LABEL_99;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v88, "attributeValueNames", 0x13uLL);
  if (!v8)
  {
    a3(v92, a4);
    if (v92[0])
    {
      v89 = 3;
      v90 = "expected key entry for attributeValueNames in DictionaryAttr to set Properties.";
      v91 = 79;
      v36 = &v89;
      v37 = (char *)v93;
      if (v94 >= v95)
      {
        v76 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          v83 = (char *)&v89 - (_BYTE *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          v37 = (char *)v93;
          v36 = (int *)((char *)v93 + v83);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v76, 24);
          v36 = &v89;
          v37 = (char *)v93;
        }
      }
      v38 = &v37[24 * v94];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v94;
      if (v92[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
    }
    if (!v101)
      return 0;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v100;
      v42 = __p;
      if (v100 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v100 = v40;
      operator delete(v42);
    }
    v21 = v97;
    if (!v97)
      goto LABEL_100;
    v43 = v98;
    v23 = v97;
    if (v98 == v97)
      goto LABEL_99;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v21);
    goto LABEL_98;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    a3(v92, a4);
    if (v92[0])
    {
      v89 = 3;
      v91 = 64;
      v10 = &v89;
      v11 = (char *)v93;
      if (v94 >= v95)
      {
        v75 = v94 + 1;
        if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
        {
          v82 = (char *)&v89 - (_BYTE *)v93;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          v11 = (char *)v93;
          v10 = (int *)((char *)v93 + v82);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v75, 24);
          v10 = &v89;
          v11 = (char *)v93;
        }
      }
      v12 = &v11[24 * v94];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v94;
      if (v92[0])
      {
        v14 = &v89;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v9);
        v15 = (char *)v93;
        if (v94 >= v95)
        {
          v77 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            v84 = (char *)&v89 - (_BYTE *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            v15 = (char *)v93;
            v14 = (int *)((char *)v93 + v84);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v77, 24);
            v14 = &v89;
            v15 = (char *)v93;
          }
        }
        v16 = &v15[24 * v94];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v94;
        if (v92[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
    }
    if (!v101)
      return 0;
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v100;
      v20 = __p;
      if (v100 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v100 = v18;
      operator delete(v20);
    }
    v21 = v97;
    if (!v97)
      goto LABEL_100;
    v22 = v98;
    v23 = v97;
    if (v98 == v97)
      goto LABEL_99;
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
    goto LABEL_98;
  }
  *a1 = v8;
  v46 = mlir::DictionaryAttr::get((uint64_t)&v88, "opName", 6uLL);
  if (v46)
  {
    v47 = v46;
    if (*(_UNKNOWN **)(*(_QWORD *)v46 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v92, a4);
      if (v92[0])
      {
        v89 = 3;
        v91 = 51;
        v48 = &v89;
        v49 = (char *)v93;
        if (v94 >= v95)
        {
          v78 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            v85 = (char *)&v89 - (_BYTE *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            v49 = (char *)v93;
            v48 = (int *)((char *)v93 + v85);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v78, 24);
            v48 = &v89;
            v49 = (char *)v93;
          }
        }
        v50 = &v49[24 * v94];
        v51 = *(_OWORD *)v48;
        *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
        *(_OWORD *)v50 = v51;
        ++v94;
        if (v92[0])
        {
          v52 = &v89;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v89, v47);
          v53 = (char *)v93;
          if (v94 >= v95)
          {
            v79 = v94 + 1;
            if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
            {
              v86 = (char *)&v89 - (_BYTE *)v93;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              v53 = (char *)v93;
              v52 = (int *)((char *)v93 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v79, 24);
              v52 = &v89;
              v53 = (char *)v93;
            }
          }
          v54 = &v53[24 * v94];
          v55 = *(_OWORD *)v52;
          *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
          *(_OWORD *)v54 = v55;
          ++v94;
          if (v92[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
        }
      }
      if (!v101)
        return 0;
      v56 = (_QWORD **)__p;
      if (__p)
      {
        v57 = v100;
        v58 = __p;
        if (v100 != __p)
        {
          do
            v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
          while (v57 != v56);
          v58 = __p;
        }
        v100 = v56;
        operator delete(v58);
      }
      v21 = v97;
      if (!v97)
        goto LABEL_100;
      v59 = v98;
      v23 = v97;
      if (v98 == v97)
        goto LABEL_99;
      do
      {
        v61 = (void *)*--v59;
        v60 = v61;
        *v59 = 0;
        if (v61)
          operator delete[](v60);
      }
      while (v59 != v21);
      goto LABEL_98;
    }
    a1[1] = v46;
  }
  v62 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v88, "operandSegmentSizes", 0x13uLL);
  if (!v62)
  {
    v62 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v88, "operand_segment_sizes", 0x15uLL);
    if (!v62)
    {
      a3(v92, a4);
      if (v92[0])
      {
        v89 = 3;
        v90 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        v91 = 79;
        v64 = &v89;
        v65 = (char *)v93;
        if (v94 >= v95)
        {
          v80 = v94 + 1;
          if (v93 <= &v89 && (char *)v93 + 24 * v94 > (char *)&v89)
          {
            v87 = (char *)&v89 - (_BYTE *)v93;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            v65 = (char *)v93;
            v64 = (int *)((char *)v93 + v87);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, v96, v80, 24);
            v64 = &v89;
            v65 = (char *)v93;
          }
        }
        v66 = &v65[24 * v94];
        v67 = *(_OWORD *)v64;
        *((_QWORD *)v66 + 2) = *((_QWORD *)v64 + 2);
        *(_OWORD *)v66 = v67;
        ++v94;
        if (v92[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v92);
      }
      if (!v101)
        return 0;
      v68 = (_QWORD **)__p;
      if (__p)
      {
        v69 = v100;
        v70 = __p;
        if (v100 != __p)
        {
          do
            v69 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v69 - 1);
          while (v69 != v68);
          v70 = __p;
        }
        v100 = v68;
        operator delete(v70);
      }
      v21 = v97;
      if (!v97)
        goto LABEL_100;
      v71 = v98;
      v23 = v97;
      if (v98 == v97)
        goto LABEL_99;
      do
      {
        v73 = (void *)*--v71;
        v72 = v73;
        *v71 = 0;
        if (v73)
          operator delete[](v72);
      }
      while (v71 != v21);
      goto LABEL_98;
    }
  }
  return mlir::convertFromAttribute(a1 + 2, (const char *)3, v62, a3, a4) != 0;
}

uint64_t mlir::pdl::OperationOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t DictionaryAttr;
  void *v24;
  mlir::DictionaryAttr *v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[7];

  v29[6] = *MEMORY[0x1E0C80C00];
  v26 = a1;
  v27 = v29;
  v28 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v26, (uint64_t)"attributeValueNames", 19, *a2);
    v6 = v5;
    v7 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      v7 = v28;
    }
    v8 = (uint64_t *)((char *)v27 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v28) = v28 + 1;
  }
  v9 = a2[1];
  if (v9)
  {
    v10 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"opName", 6, v9);
    v12 = v11;
    v13 = v28;
    if (v28 >= HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
      v13 = v28;
    }
    v14 = (uint64_t *)((char *)v27 + 16 * v13);
    *v14 = v10;
    v14[1] = v12;
    LODWORD(v28) = v28 + 1;
  }
  v15 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
  v16 = mlir::Builder::getNamedAttr(&v26, (uint64_t)"operandSegmentSizes", 19, v15);
  v18 = v17;
  v19 = v28;
  if (v28 >= HIDWORD(v28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, v29, v28 + 1, 16);
    v19 = v28;
  }
  v20 = (uint64_t *)((char *)v27 + 16 * v19);
  *v20 = v16;
  v20[1] = v18;
  v21 = __CFADD__((_DWORD)v28, 1);
  v22 = (v28 + 1);
  LODWORD(v28) = v28 + 1;
  if (v21)
  {
    DictionaryAttr = 0;
    v24 = v27;
    if (v27 == v29)
      return DictionaryAttr;
    goto LABEL_16;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v26, (mlir::MLIRContext *)v27, v22);
  v24 = v27;
  if (v27 != v29)
LABEL_16:
    free(v24);
  return DictionaryAttr;
}

uint64_t mlir::pdl::OperationOp::getInherentAttr(mlir::MLIRContext *a1, _QWORD *a2, char *__s1, size_t __n)
{
  if (__n == 6)
  {
    if (!memcmp(__s1, "opName", 6uLL))
      return a2[1];
    return 0;
  }
  if (__n == 21)
  {
    if (!memcmp(__s1, "operand_segment_sizes", 0x15uLL))
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
    return 0;
  }
  if (__n != 19)
    return 0;
  if (*(_QWORD *)__s1 != 0x7475626972747461
    || *((_QWORD *)__s1 + 1) != 0x614E65756C615665
    || *(_QWORD *)(__s1 + 11) != 0x73656D614E65756CLL)
  {
    if (!memcmp(__s1, "operandSegmentSizes", 0x13uLL))
      return mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 2), 3);
    return 0;
  }
  return *a2;
}

uint64_t mlir::pdl::OperationOp::setInherentAttr(uint64_t result, char *__s1, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = result;
  if (a3 == 6)
  {
    result = memcmp(__s1, "opName", 6uLL);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
          v8 = a4;
        else
          v8 = 0;
        *(_QWORD *)(v5 + 8) = v8;
      }
      else
      {
        *(_QWORD *)(v5 + 8) = 0;
      }
    }
  }
  else
  {
    if (a3 == 21)
    {
      result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      if (a3 != 19)
        return result;
      if (*(_QWORD *)__s1 == 0x7475626972747461
        && *((_QWORD *)__s1 + 1) == 0x614E65756C615665
        && *(_QWORD *)(__s1 + 11) == 0x73656D614E65756CLL)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
            v11 = a4;
          else
            v11 = 0;
          *(_QWORD *)result = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
        return result;
      }
      result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
      if ((_DWORD)result)
        return result;
    }
    if (a4)
    {
      result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
      if ((_DWORD)result)
        v9 = a4;
      else
        v9 = 0;
      v12 = v9;
      if ((_DWORD)result)
      {
        result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
        if (result == 3)
        {
          result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v12);
          if (v10)
            return (uint64_t)memmove((void *)(v5 + 16), (const void *)result, 4 * v10);
        }
      }
    }
  }
  return result;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  const void **v35;
  const char *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    v39 = a1;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v39);
    v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(_QWORD *)Value
           && *(_UNKNOWN **)(**(_QWORD **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
      {
        Value += 8;
        if (Value == v29)
          return 1;
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    v36 = "attribute '";
    v37 = 11;
    v9 = &v35;
    v10 = (char *)v41;
    if (v42 >= v43)
    {
      v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        v33 = (char *)&v35 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v10 = (char *)v41;
        v9 = (const void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v9 = &v35;
        v10 = (char *)v41;
      }
    }
    v11 = &v10[24 * v42];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v42;
    if (v39)
    {
      v38 = 261;
      v35 = a2;
      v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        v36 = "' failed to satisfy constraint: string array attribute";
        v37 = 54;
        v13 = &v35;
        v14 = (char *)v41;
        if (v42 >= v43)
        {
          v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            v34 = (char *)&v35 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v14 = (char *)v41;
            v13 = (const void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v13 = &v35;
            v14 = (char *)v41;
          }
        }
        v15 = &v14[24 * v42];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v42;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  if (v49)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v17;
}

BOOL mlir::pdl::OperationOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readAttribute<mlir::ArrayAttr>(a1, v3)
    || !mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1))
  {
    return 0;
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 2, v12, 4 * v13);
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 4, (const char *)3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  __guard *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x20uLL);
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    *((_DWORD *)v3 + 6) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v5 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties]";
        v15 = 110;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v4[191];
    return a1[32];
  }
  return result;
}

BOOL mlir::pdl::OperationOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  char *v34;
  int *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  int *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  int *v45;
  char *v46;
  __int128 v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  char v52;
  _QWORD **v53;
  _QWORD **v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t *v82;
  char *v83;
  int *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  int *v89;
  char *v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  int *v94;
  char *v95;
  __int128 v96;
  int *v97;
  char *v98;
  char *v99;
  __int128 v100;
  char v101;
  _QWORD **v102;
  _QWORD **v103;
  void *v104;
  _QWORD *v105;
  _QWORD *v106;
  void *v107;
  void *v108;
  void *v109;
  unint64_t v110;
  unint64_t v111;
  BOOL v112;
  unint64_t v113;
  BOOL v114;
  unint64_t v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t NextResultAtOffset;
  const void **v125;
  uint64_t v126;
  __int16 v127;
  int v128;
  const char *v129;
  uint64_t v130;
  _QWORD v131[3];
  void *v132;
  unsigned int v133;
  unsigned int v134;
  _BYTE v135[96];
  void *v136;
  _QWORD *v137;
  void *__p;
  _QWORD **v139;
  char v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *v3;
  if (*v3)
  {
    v5 = v3[1];
    v131[0] = v2;
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"opName", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v131))return 0;
    v131[0] = *this;
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v4, (const void **)"attributeValueNames", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v131))return 0;
    v6 = *this;
    v7 = *((unsigned int *)*this + 11);
    v8 = (v7 >> 23) & 1;
    v9 = (uint64_t)&(*this)[2 * v8 + 8];
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v9 = 0;
    v10 = *(unsigned int *)(v9 + 16);
    if ((v7 & 0x800000) != 0)
    {
      v11 = v6[9];
      if ((_DWORD)v10)
        goto LABEL_11;
    }
    else
    {
      v11 = 0;
      if ((_DWORD)v10)
      {
LABEL_11:
        v12 = 0;
        v13 = v11 + 24;
        while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(*this, *(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v12))
        {
          ++v12;
          v13 += 32;
          if (v10 == v12)
          {
            v6 = *this;
            v7 = *((unsigned int *)*this + 11);
            v8 = (v7 >> 23) & 1;
            v14 = v7 & 0x800000;
            goto LABEL_35;
          }
        }
        return 0;
      }
    }
    v14 = v7 & 0x800000;
LABEL_35:
    v24 = (uint64_t)&v6[2 * v8 + 8];
    if (BYTE3(v7))
      v25 = v24;
    else
      v25 = 0;
    v26 = *(_DWORD *)(v25 + 20);
    if (v14)
    {
      v27 = v6[9];
      if (v26)
        goto LABEL_40;
    }
    else
    {
      v27 = 0;
      if (v26)
      {
LABEL_40:
        v28 = 0;
        v29 = *(unsigned int *)(v25 + 16);
        v30 = v27 + 32 * v29;
        v31 = (v26 + v29) - v29;
        do
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v30 + 32 * v28 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
          if (*(_UNKNOWN **)(*(_QWORD *)v32 + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id)
          {
            v33 = *this;
            v127 = 261;
            v125 = (const void **)"operand";
            v126 = 7;
            mlir::Operation::emitOpError(v33, &v125, (uint64_t)v131);
            if (v131[0])
            {
              v128 = 3;
              v129 = " #";
              v130 = 2;
              v34 = (char *)v132;
              if (v133 >= v134)
              {
                v61 = v133 + 1;
                if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                {
                  v67 = (char *)&v128 - (_BYTE *)v132;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v61, 24);
                  v34 = (char *)v132;
                  v35 = (int *)((char *)v132 + v67);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v61, 24);
                  v35 = &v128;
                  v34 = (char *)v132;
                }
              }
              else
              {
                v35 = &v128;
              }
              v36 = &v34[24 * v133];
              v37 = *(_OWORD *)v35;
              *((_QWORD *)v36 + 2) = *((_QWORD *)v35 + 2);
              *(_OWORD *)v36 = v37;
              v38 = ++v133;
              if (v131[0])
              {
                v128 = 5;
                v129 = (const char *)v10;
                v39 = (char *)v132;
                if (v38 >= v134)
                {
                  v62 = v38 + 1;
                  v63 = (char *)v132 + 24 * v38 > (char *)&v128;
                  if (v132 <= &v128 && v63)
                  {
                    v68 = (char *)&v128 - (_BYTE *)v132;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v62, 24);
                    v39 = (char *)v132;
                    v40 = (int *)((char *)v132 + v68);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v62, 24);
                    v40 = &v128;
                    v39 = (char *)v132;
                  }
                }
                else
                {
                  v40 = &v128;
                }
                v41 = &v39[24 * v133];
                v42 = *(_OWORD *)v40;
                *((_QWORD *)v41 + 2) = *((_QWORD *)v40 + 2);
                *(_OWORD *)v41 = v42;
                v43 = ++v133;
                if (v131[0])
                {
                  v128 = 3;
                  v130 = 65;
                  v44 = (char *)v132;
                  if (v43 >= v134)
                  {
                    v64 = v43 + 1;
                    v65 = (char *)v132 + 24 * v43 > (char *)&v128;
                    if (v132 <= &v128 && v65)
                    {
                      v69 = (char *)&v128 - (_BYTE *)v132;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v64, 24);
                      v44 = (char *)v132;
                      v45 = (int *)((char *)v132 + v69);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v64, 24);
                      v45 = &v128;
                      v44 = (char *)v132;
                    }
                  }
                  else
                  {
                    v45 = &v128;
                  }
                  v46 = &v44[24 * v133];
                  v47 = *(_OWORD *)v45;
                  *((_QWORD *)v46 + 2) = *((_QWORD *)v45 + 2);
                  *(_OWORD *)v46 = v47;
                  ++v133;
                  if (v131[0])
                  {
                    v48 = &v128;
                    mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v128, v32);
                    v49 = (char *)v132;
                    if (v133 >= v134)
                    {
                      v66 = v133 + 1;
                      if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                      {
                        v70 = (char *)&v128 - (_BYTE *)v132;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v66, 24);
                        v49 = (char *)v132;
                        v48 = (int *)((char *)v132 + v70);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v66, 24);
                        v48 = &v128;
                        v49 = (char *)v132;
                      }
                    }
                    v50 = &v49[24 * v133];
                    v51 = *(_OWORD *)v48;
                    *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
                    *(_OWORD *)v50 = v51;
                    ++v133;
                  }
                }
              }
            }
            v52 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
            if (v131[0])
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
            if (v140)
            {
              v53 = (_QWORD **)__p;
              if (__p)
              {
                v54 = v139;
                v55 = __p;
                if (v139 != __p)
                {
                  do
                    v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
                  while (v54 != v53);
                  v55 = __p;
                }
                v139 = v53;
                operator delete(v55);
              }
              v56 = v136;
              if (v136)
              {
                v57 = v137;
                v58 = v136;
                if (v137 != v136)
                {
                  do
                  {
                    v60 = (void *)*--v57;
                    v59 = v60;
                    *v57 = 0;
                    if (v60)
                      operator delete[](v59);
                  }
                  while (v57 != v56);
                  v58 = v136;
                }
                v137 = v56;
                operator delete(v58);
              }
              if (v132 != v135)
                free(v132);
            }
            if (!v52)
              return 0;
          }
          LODWORD(v10) = v10 + 1;
        }
        while (++v28 != v31);
      }
    }
    v71 = *this;
    v72 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11)))
      v73 = &(*this)[2 * ((v72 >> 23) & 1) + 8];
    else
      v73 = 0;
    v74 = *((_DWORD *)v73 + 6);
    if ((v72 & 0x800000) != 0)
    {
      v75 = v71[9];
      if (v74)
        goto LABEL_96;
    }
    else
    {
      v75 = 0;
      if (v74)
      {
LABEL_96:
        v76 = 0;
        v77 = (*((_DWORD *)v73 + 5) + *((_DWORD *)v73 + 4));
        v78 = v75 + 32 * v77;
        v79 = (v74 + v77) - v77;
        while (1)
        {
          v80 = *(_QWORD *)(*(_QWORD *)(v78 + 32 * v76 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
          v81 = *(void **)(*(_QWORD *)v80 + 136);
          if (v81 != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
          {
            v82 = *this;
            if (v81 != &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id
              || (v131[0] = *(_QWORD *)(*(_QWORD *)(v78 + 32 * v76 + 24) + 8) & 0xFFFFFFFFFFFFFFF8,
                  *(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v131) + 136) != &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id))
            {
              v127 = 261;
              v125 = (const void **)"operand";
              v126 = 7;
              mlir::Operation::emitOpError(v82, &v125, (uint64_t)v131);
              if (v131[0])
              {
                v128 = 3;
                v129 = " #";
                v130 = 2;
                v83 = (char *)v132;
                if (v133 >= v134)
                {
                  v110 = v133 + 1;
                  if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                  {
                    v116 = (char *)&v128 - (_BYTE *)v132;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v110, 24);
                    v83 = (char *)v132;
                    v84 = (int *)((char *)v132 + v116);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v110, 24);
                    v84 = &v128;
                    v83 = (char *)v132;
                  }
                }
                else
                {
                  v84 = &v128;
                }
                v85 = &v83[24 * v133];
                v86 = *(_OWORD *)v84;
                *((_QWORD *)v85 + 2) = *((_QWORD *)v84 + 2);
                *(_OWORD *)v85 = v86;
                v87 = ++v133;
                if (v131[0])
                {
                  v128 = 5;
                  v129 = (const char *)v10;
                  v88 = (char *)v132;
                  if (v87 >= v134)
                  {
                    v111 = v87 + 1;
                    v112 = (char *)v132 + 24 * v87 > (char *)&v128;
                    if (v132 <= &v128 && v112)
                    {
                      v117 = (char *)&v128 - (_BYTE *)v132;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v111, 24);
                      v88 = (char *)v132;
                      v89 = (int *)((char *)v132 + v117);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v111, 24);
                      v89 = &v128;
                      v88 = (char *)v132;
                    }
                  }
                  else
                  {
                    v89 = &v128;
                  }
                  v90 = &v88[24 * v133];
                  v91 = *(_OWORD *)v89;
                  *((_QWORD *)v90 + 2) = *((_QWORD *)v89 + 2);
                  *(_OWORD *)v90 = v91;
                  v92 = ++v133;
                  if (v131[0])
                  {
                    v128 = 3;
                    v130 = 87;
                    v93 = (char *)v132;
                    if (v92 >= v134)
                    {
                      v113 = v92 + 1;
                      v114 = (char *)v132 + 24 * v92 > (char *)&v128;
                      if (v132 <= &v128 && v114)
                      {
                        v118 = (char *)&v128 - (_BYTE *)v132;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v113, 24);
                        v93 = (char *)v132;
                        v94 = (int *)((char *)v132 + v118);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v113, 24);
                        v94 = &v128;
                        v93 = (char *)v132;
                      }
                    }
                    else
                    {
                      v94 = &v128;
                    }
                    v95 = &v93[24 * v133];
                    v96 = *(_OWORD *)v94;
                    *((_QWORD *)v95 + 2) = *((_QWORD *)v94 + 2);
                    *(_OWORD *)v95 = v96;
                    ++v133;
                    if (v131[0])
                    {
                      v97 = &v128;
                      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v128, v80);
                      v98 = (char *)v132;
                      if (v133 >= v134)
                      {
                        v115 = v133 + 1;
                        if (v132 <= &v128 && (char *)v132 + 24 * v133 > (char *)&v128)
                        {
                          v119 = (char *)&v128 - (_BYTE *)v132;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v115, 24);
                          v98 = (char *)v132;
                          v97 = (int *)((char *)v132 + v119);
                        }
                        else
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v135, v115, 24);
                          v97 = &v128;
                          v98 = (char *)v132;
                        }
                      }
                      v99 = &v98[24 * v133];
                      v100 = *(_OWORD *)v97;
                      *((_QWORD *)v99 + 2) = *((_QWORD *)v97 + 2);
                      *(_OWORD *)v99 = v100;
                      ++v133;
                    }
                  }
                }
              }
              v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
              if (v131[0])
                mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
              if (v140)
              {
                v102 = (_QWORD **)__p;
                if (__p)
                {
                  v103 = v139;
                  v104 = __p;
                  if (v139 != __p)
                  {
                    do
                      v103 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v103 - 1);
                    while (v103 != v102);
                    v104 = __p;
                  }
                  v139 = v102;
                  operator delete(v104);
                }
                v105 = v136;
                if (v136)
                {
                  v106 = v137;
                  v107 = v136;
                  if (v137 != v136)
                  {
                    do
                    {
                      v109 = (void *)*--v106;
                      v108 = v109;
                      *v106 = 0;
                      if (v109)
                        operator delete[](v108);
                    }
                    while (v106 != v105);
                    v107 = v136;
                  }
                  v137 = v105;
                  operator delete(v107);
                }
                if (v132 != v135)
                  free(v132);
              }
              if (!v101)
                return 0;
            }
          }
          LODWORD(v10) = v10 + 1;
          if (++v76 == v79)
          {
            v71 = *this;
            break;
          }
        }
      }
    }
    v120 = *((_DWORD *)v71 + 9);
    v121 = v71 - 2;
    if (v120)
      v122 = (uint64_t)v121;
    else
      v122 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v122, 0);
    return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
  }
  else
  {
    v125 = (const void **)"requires attribute 'attributeValueNames'";
    v127 = 259;
    mlir::OpState::emitOpError(this, &v125, (uint64_t)v131);
    v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v131);
    if (v131[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v131);
    if (v140)
    {
      v16 = (_QWORD **)__p;
      if (__p)
      {
        v17 = v139;
        v18 = __p;
        if (v139 != __p)
        {
          do
            v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
          while (v17 != v16);
          v18 = __p;
        }
        v139 = v16;
        operator delete(v18);
      }
      v19 = v136;
      if (v136)
      {
        v20 = v137;
        v21 = v136;
        if (v137 != v136)
        {
          do
          {
            v23 = (void *)*--v20;
            v22 = v23;
            *v20 = 0;
            if (v23)
              operator delete[](v22);
          }
          while (v20 != v19);
          v21 = v136;
        }
        v137 = v19;
        operator delete(v21);
      }
      if (v132 != v135)
        free(v132);
    }
  }
  return v15;
}

uint64_t mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  void *v5;
  int *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  const void **v49[4];
  __int16 v50;
  int v51;
  const char *v52;
  uint64_t v53;
  _QWORD v54[3];
  void *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[96];
  void *v59;
  _QWORD *v60;
  void *__p;
  _QWORD **v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(*(_QWORD *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
    return 1;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v54[0] = a2;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v54) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
      return 1;
  }
  v50 = 261;
  v49[0] = a3;
  v49[1] = a4;
  mlir::Operation::emitOpError(a1, v49, (uint64_t)v54);
  if (v54[0])
  {
    v51 = 3;
    v52 = " #";
    v53 = 2;
    v11 = &v51;
    v12 = (char *)v55;
    if (v56 >= v57)
    {
      v39 = v56 + 1;
      if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
      {
        v45 = (char *)&v51 - (_BYTE *)v55;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        v12 = (char *)v55;
        v11 = (int *)((char *)v55 + v45);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v39, 24);
        v11 = &v51;
        v12 = (char *)v55;
      }
    }
    v13 = &v12[24 * v56];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
    *(_OWORD *)v13 = v14;
    v15 = ++v56;
    if (v54[0])
    {
      v51 = 5;
      v52 = (const char *)a5;
      v16 = &v51;
      v17 = (char *)v55;
      if (v15 >= v57)
      {
        v40 = v15 + 1;
        v41 = (char *)v55 + 24 * v15 > (char *)&v51;
        if (v55 <= &v51 && v41)
        {
          v46 = (char *)&v51 - (_BYTE *)v55;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          v17 = (char *)v55;
          v16 = (int *)((char *)v55 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v40, 24);
          v16 = &v51;
          v17 = (char *)v55;
        }
      }
      v18 = &v17[24 * v56];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      v20 = ++v56;
      if (v54[0])
      {
        v51 = 3;
        v53 = 89;
        v21 = &v51;
        v22 = (char *)v55;
        if (v20 >= v57)
        {
          v42 = v20 + 1;
          v43 = (char *)v55 + 24 * v20 > (char *)&v51;
          if (v55 <= &v51 && v43)
          {
            v47 = (char *)&v51 - (_BYTE *)v55;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            v22 = (char *)v55;
            v21 = (int *)((char *)v55 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v42, 24);
            v21 = &v51;
            v22 = (char *)v55;
          }
        }
        v23 = &v22[24 * v56];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        ++v56;
        if (v54[0])
        {
          v25 = &v51;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v51, a2);
          v26 = (char *)v55;
          if (v56 >= v57)
          {
            v44 = v56 + 1;
            if (v55 <= &v51 && (char *)v55 + 24 * v56 > (char *)&v51)
            {
              v48 = (char *)&v51 - (_BYTE *)v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v26 = (char *)v55;
              v25 = (int *)((char *)v55 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v25 = &v51;
              v26 = (char *)v55;
            }
          }
          v27 = &v26[24 * v56];
          v28 = *(_OWORD *)v25;
          *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v27 = v28;
          ++v56;
        }
      }
    }
  }
  v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v54);
  if (v54[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v54);
  if (v63)
  {
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v62;
      v32 = __p;
      if (v62 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v62 = v30;
      operator delete(v32);
    }
    v33 = v59;
    if (v59)
    {
      v34 = v60;
      v35 = v59;
      if (v60 != v59)
      {
        do
        {
          v37 = (void *)*--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v34 != v33);
        v35 = v59;
      }
      v60 = v33;
      operator delete(v35);
    }
    if (v55 != v58)
      free(v55);
  }
  return v29;
}

BOOL mlir::pdl::OperationOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::NoneType **v4;
  mlir::MLIRContext *v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  mlir::MLIRContext **v10;
  uint64_t ArrayAttr;
  char v12;
  void *v13;
  _BOOL8 v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  mlir::MLIRContext **v25;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  mlir::MLIRContext **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  void *v39[2];
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[128];
  void *v44;
  uint64_t v45;
  _BYTE v46[128];
  void *v47[2];
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _BYTE v51[128];
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[6];

  v54[4] = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v49 = v51;
  v50 = 0x400000000;
  v47[0] = &v48;
  v47[1] = (void *)0x100000000;
  v44 = v46;
  v45 = 0x400000000;
  v41 = v43;
  v42 = 0x400000000;
  v39[0] = &v40;
  v39[1] = (void *)0x100000000;
  v4 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = mlir::NoneType::get(*v4, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 440))(a1, &v37, v6);
  if (v7 >= 0x100u)
  {
    if (!(_BYTE)v7)
      goto LABEL_18;
    if (v37)
    {
      v8 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>((_QWORD *)a2);
      *(_QWORD *)(v8 + 8) = v37;
    }
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v49, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v47)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    {
      goto LABEL_18;
    }
  }
  else
  {
    v9 = 0;
  }
  v36 = v9;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v52 = v54;
  v53 = 0x400000000;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1)
    || (v38[0] = a1,
        v38[1] = &v52,
        v38[2] = &v44,
        (*(unsigned __int8 (**)(uint64_t, _QWORD, uint64_t (*)(uint64_t *), _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 360))(a1, 0, llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseOperationOpAttributes(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::ArrayAttr &)::$_0>, v38, 0, 0))&& (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))
  {
    ArrayAttr = mlir::Builder::getArrayAttr(v10, (uint64_t)v52, v53);
    v12 = 0;
    v13 = v52;
    if (v52 == v54)
      goto LABEL_17;
    goto LABEL_16;
  }
  ArrayAttr = 0;
  v12 = 1;
  v13 = v52;
  if (v52 != v54)
LABEL_16:
    free(v13);
LABEL_17:
  if ((v12 & 1) != 0)
    goto LABEL_18;
  *(_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>((_QWORD *)a2) = ArrayAttr;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
  {
    if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
      goto LABEL_18;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v41, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v39)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    {
      goto LABEL_18;
    }
  }
  else
  {
    v17 = 0;
  }
  v38[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    goto LABEL_18;
  v18 = *(_QWORD *)(a2 + 8);
  v52 = (_QWORD *)a1;
  v53 = (uint64_t)v38;
  v54[0] = a2;
  v19 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v18 + 96));
  if (v19)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v19, (const void **)"attributeValueNames", (const char *)0x13, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::OperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v52))goto LABEL_18;
  }
  v20 = mlir::NamedAttrList::get(a2 + 112, *(_QWORD *)(*(_QWORD *)(v18 + 96) + 8));
  if (v20)
  {
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v20, (const void **)"opName", (const char *)6, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::OperationOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v52))goto LABEL_18;
  }
  v35 = v17;
  v21 = v50;
  v22 = v45;
  v23 = v42;
  v24 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::OperationOpGenericAdaptorBase::Properties>((_QWORD *)a2);
  v24[4] = v21;
  v24[5] = v22;
  v24[6] = v23;
  v25 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v25);
  SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  v28 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v29 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v28);
  v30 = mlir::StorageUniquer::getSingletonImpl(v29, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeType,void>::id);
  v31 = *(unsigned int *)(a2 + 72);
  if (v31 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v31 + 1, 8);
    LODWORD(v31) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v31) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  v32 = a2 + 16;
  if (!mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v49, (uint64_t)v47, v36, v32))
  {
LABEL_18:
    v14 = 0;
    v15 = v39[0];
    if (v39[0] == &v40)
      goto LABEL_20;
    goto LABEL_19;
  }
  if ((_DWORD)v45)
  {
    v33 = (char *)v44;
    v34 = 32 * v45;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v33, v30, v32))
    {
      v33 += 32;
      v34 -= 32;
      if (!v34)
        goto LABEL_51;
    }
    goto LABEL_18;
  }
LABEL_51:
  v14 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v41, (uint64_t)v39, v35, v32) != 0;
  v15 = v39[0];
  if (v39[0] != &v40)
LABEL_19:
    free(v15);
LABEL_20:
  if (v41 != v43)
    free(v41);
  if (v44 != v46)
    free(v44);
  if (v47[0] != &v48)
    free(v47[0]);
  if (v49 != v51)
    free(v49);
  return v14;
}

void mlir::pdl::OperationOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  mlir::Operation *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  unint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::raw_ostream *v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD *Value;
  llvm::raw_ostream *v45;
  uint64_t v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  unint64_t v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  llvm::raw_ostream *v52;
  _WORD *v53;
  llvm::raw_ostream *v54;
  _BYTE *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  unint64_t v58;
  _DWORD *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::raw_ostream *v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  unint64_t v74;
  _DWORD *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  llvm::raw_ostream *v81;
  _BYTE *v82;
  _QWORD *v83;
  mlir::Operation *v84;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm::raw_ostream *v92;
  _WORD *v93;
  uint64_t v94;
  llvm::raw_ostream *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *AttrDictionary;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v4 = *this;
  v5 = *((unsigned int *)*this + 11);
  v6 = (v5 >> 23) & 1;
  v7 = (uint64_t)*this + 16 * v6 + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v7 = 0;
  if (*(_QWORD *)(v7 + 8))
  {
    v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 32;
    }
    v10 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v10 = 0;
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(v10 + 8));
    v4 = *this;
    v5 = *((unsigned int *)*this + 11);
    v6 = (v5 >> 23) & 1;
  }
  v11 = (uint64_t)v4 + 16 * v6 + 64;
  if (!BYTE3(v5))
    v11 = 0;
  if (*(_DWORD *)(v11 + 16))
  {
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if (*((_BYTE **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, "(", 1uLL);
    }
    else
    {
      *v13 = 40;
      ++*((_QWORD *)v12 + 4);
    }
    v14 = *((unsigned int *)*this + 11);
    v15 = (uint64_t)*this + 16 * ((v14 >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v15 = 0;
    v16 = *(unsigned int *)(v15 + 16);
    if ((v14 & 0x800000) != 0)
      v17 = *((_QWORD *)*this + 9);
    else
      v17 = 0;
    v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v102 = ", ";
    v103 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v17, 0, v17, v16, (uint64_t)a2, v18, (uint64_t)&v102);
    v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v20 = (_BYTE *)*((_QWORD *)v19 + 4);
    if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
    {
      llvm::raw_ostream::write(v19, 32);
    }
    else
    {
      *((_QWORD *)v19 + 4) = v20 + 1;
      *v20 = 32;
    }
    v21 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v22 = (_BYTE *)*((_QWORD *)v21 + 4);
    if (*((_BYTE **)v21 + 3) == v22)
    {
      llvm::raw_ostream::write(v21, ":", 1uLL);
    }
    else
    {
      *v22 = 58;
      ++*((_QWORD *)v21 + 4);
    }
    v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v24 = (_BYTE *)*((_QWORD *)v23 + 4);
    if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
    {
      llvm::raw_ostream::write(v23, 32);
    }
    else
    {
      *((_QWORD *)v23 + 4) = v24 + 1;
      *v24 = 32;
    }
    v25 = *((unsigned int *)*this + 11);
    v26 = (uint64_t)*this + 16 * ((v25 >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v26 = 0;
    v27 = *(unsigned int *)(v26 + 16);
    if ((v25 & 0x800000) != 0)
      v28 = *((_QWORD *)*this + 9);
    else
      v28 = 0;
    v98 = v28;
    v99 = v27;
    mlir::OperandRange::getTypes(&v98, (uint64_t *)&v102);
    AttrDictionary = ", ";
    v101 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v102, v103, (uint64_t)v104, v105, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
    v29 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v30 = (_BYTE *)*((_QWORD *)v29 + 4);
    if (*((_BYTE **)v29 + 3) == v30)
    {
      llvm::raw_ostream::write(v29, ")", 1uLL);
    }
    else
    {
      *v30 = 41;
      ++*((_QWORD *)v29 + 4);
    }
  }
  v31 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v32 = (_BYTE *)*((_QWORD *)v31 + 4);
  if ((unint64_t)v32 >= *((_QWORD *)v31 + 3))
  {
    llvm::raw_ostream::write(v31, 32);
  }
  else
  {
    *((_QWORD *)v31 + 4) = v32 + 1;
    *v32 = 32;
  }
  v33 = *((unsigned int *)*this + 11);
  v34 = (void **)((char *)*this + 16 * ((v33 >> 23) & 1) + 64);
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v35 = (uint64_t)*this + 16 * ((v33 >> 23) & 1) + 64;
  else
    v35 = 0;
  if ((v33 & 0x800000) != 0)
  {
    v36 = *((_QWORD *)*this + 9);
    v37 = *(unsigned int *)(v35 + 16);
    v102 = *v34;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    if (!v38)
      goto LABEL_56;
  }
  else
  {
    v36 = 0;
    v37 = *(unsigned int *)(v35 + 16);
    v102 = *v34;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    if (!v97)
      goto LABEL_56;
  }
  v39 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v40 = (_WORD *)*((_QWORD *)v39 + 4);
  if (*((_QWORD *)v39 + 3) - (_QWORD)v40 > 1uLL)
  {
    *v40 = 31520;
    *((_QWORD *)v39 + 4) += 2;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    v42 = v41 << 32;
    if (!(v41 << 32))
      goto LABEL_53;
LABEL_49:
    v43 = v41;
    Value = (_QWORD *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *Value);
    v45 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v46 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v46) > 2)
    {
      *(_BYTE *)(v46 + 2) = 32;
      *(_WORD *)v46 = 15648;
      *((_QWORD *)v45 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v45, " = ", 3uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(v36 + 32 * v37 + 24));
    if (v42 != 0x100000000)
    {
      v88 = v36 + 32 * v37;
      v89 = 1;
      v90 = v43;
      v91 = 0x100000000;
      do
      {
        v92 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v93 = (_WORD *)*((_QWORD *)v92 + 4);
        if (*((_QWORD *)v92 + 3) - (_QWORD)v93 > 1uLL)
        {
          *v93 = 8236;
          *((_QWORD *)v92 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v92, ", ", 2uLL);
        }
        v94 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
        (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(v94 + 8 * v89));
        v95 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
        v96 = *((_QWORD *)v95 + 4);
        if ((unint64_t)(*((_QWORD *)v95 + 3) - v96) > 2)
        {
          *(_BYTE *)(v96 + 2) = 32;
          *(_WORD *)v96 = 15648;
          *((_QWORD *)v95 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v95, " = ", 3uLL);
        }
        (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(v88 + (v91 >> 27) + 24));
        ++v89;
        v91 += 0x100000000;
      }
      while (v90 != v89);
    }
    goto LABEL_53;
  }
  llvm::raw_ostream::write(v39, " {", 2uLL);
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v102);
  v42 = v41 << 32;
  if (v41 << 32)
    goto LABEL_49;
LABEL_53:
  v47 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v48 = (_BYTE *)*((_QWORD *)v47 + 4);
  if ((unint64_t)v48 >= *((_QWORD *)v47 + 3))
  {
    llvm::raw_ostream::write(v47, 125);
  }
  else
  {
    *((_QWORD *)v47 + 4) = v48 + 1;
    *v48 = 125;
  }
LABEL_56:
  v49 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v49 = 0;
  if (*(_DWORD *)(v49 + 24))
  {
    v50 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v51 = (_BYTE *)*((_QWORD *)v50 + 4);
    if ((unint64_t)v51 >= *((_QWORD *)v50 + 3))
    {
      llvm::raw_ostream::write(v50, 32);
    }
    else
    {
      *((_QWORD *)v50 + 4) = v51 + 1;
      *v51 = 32;
    }
    v52 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v53 = (_WORD *)*((_QWORD *)v52 + 4);
    if (*((_QWORD *)v52 + 3) - (_QWORD)v53 > 1uLL)
    {
      *v53 = 15917;
      *((_QWORD *)v52 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v52, "->", 2uLL);
    }
    v54 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v55 = (_BYTE *)*((_QWORD *)v54 + 4);
    if ((unint64_t)v55 >= *((_QWORD *)v54 + 3))
    {
      llvm::raw_ostream::write(v54, 32);
    }
    else
    {
      *((_QWORD *)v54 + 4) = v55 + 1;
      *v55 = 32;
    }
    v56 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v57 = (_BYTE *)*((_QWORD *)v56 + 4);
    if (*((_BYTE **)v56 + 3) == v57)
    {
      llvm::raw_ostream::write(v56, "(", 1uLL);
    }
    else
    {
      *v57 = 40;
      ++*((_QWORD *)v56 + 4);
    }
    v58 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11)))
      v59 = (_DWORD *)((char *)*this + 16 * ((v58 >> 23) & 1) + 64);
    else
      v59 = 0;
    v60 = v59[4];
    v61 = v59[5];
    v62 = v59[6];
    if ((v58 & 0x800000) != 0)
      v63 = *((_QWORD *)*this + 9);
    else
      v63 = 0;
    v64 = (v61 + v60);
    v65 = v63 + 32 * v64;
    v66 = (v62 + v64) - v64;
    v67 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v102 = ", ";
    v103 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v65, 0, v65, v66, (uint64_t)a2, v67, (uint64_t)&v102);
    v68 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v69 = (_BYTE *)*((_QWORD *)v68 + 4);
    if ((unint64_t)v69 >= *((_QWORD *)v68 + 3))
    {
      llvm::raw_ostream::write(v68, 32);
    }
    else
    {
      *((_QWORD *)v68 + 4) = v69 + 1;
      *v69 = 32;
    }
    v70 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v71 = (_BYTE *)*((_QWORD *)v70 + 4);
    if (*((_BYTE **)v70 + 3) == v71)
    {
      llvm::raw_ostream::write(v70, ":", 1uLL);
    }
    else
    {
      *v71 = 58;
      ++*((_QWORD *)v70 + 4);
    }
    v72 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v73 = (_BYTE *)*((_QWORD *)v72 + 4);
    if ((unint64_t)v73 >= *((_QWORD *)v72 + 3))
    {
      llvm::raw_ostream::write(v72, 32);
    }
    else
    {
      *((_QWORD *)v72 + 4) = v73 + 1;
      *v73 = 32;
    }
    v74 = *((unsigned int *)*this + 11);
    if (HIBYTE(*((_DWORD *)*this + 11)))
      v75 = (_DWORD *)((char *)*this + 16 * ((v74 >> 23) & 1) + 64);
    else
      v75 = 0;
    v76 = v75[4];
    v77 = v75[5];
    v78 = v75[6];
    if ((v74 & 0x800000) != 0)
      v79 = *((_QWORD *)*this + 9);
    else
      v79 = 0;
    v80 = (v77 + v76);
    v98 = v79 + 32 * v80;
    v99 = (v78 + v80) - v80;
    mlir::OperandRange::getTypes(&v98, (uint64_t *)&v102);
    AttrDictionary = ", ";
    v101 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v102, v103, (uint64_t)v104, v105, (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
    v81 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v82 = (_BYTE *)*((_QWORD *)v81 + 4);
    if (*((_BYTE **)v81 + 3) == v82)
    {
      llvm::raw_ostream::write(v81, ")", 1uLL);
    }
    else
    {
      *v82 = 41;
      ++*((_QWORD *)v81 + 4);
    }
  }
  v102 = &v104;
  v104 = "operandSegmentSizes";
  v105 = 19;
  v106 = "opName";
  v107 = 6;
  v103 = 0x200000002;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, &v104, 3uLL, 16);
  v83 = (char *)v102 + 16 * v103;
  *v83 = "attributeValueNames";
  v83[1] = 19;
  LODWORD(v103) = v103 + 1;
  v84 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v84);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v84 + 56);
  }
  v86 = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, v86, v87, v102, v103);
  if (v102 != &v104)
    free(v102);
}

uint64_t mlir::pdl::PatternOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  char *v49;
  char *v50;
  __int128 v51;
  int *v52;
  char *v53;
  char *v54;
  __int128 v55;
  _QWORD **v56;
  _QWORD **v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  int v76;
  const char *v77;
  uint64_t v78;
  _QWORD v79[3];
  void *v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE v83[96];
  void *v84;
  _QWORD *v85;
  void *__p;
  _QWORD **v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v75 = v6;
  if (!v6)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v77 = "expected DictionaryAttr to set properties";
      v78 = 41;
      v26 = &v76;
      v27 = (char *)v80;
      if (v81 >= v82)
      {
        v63 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v69 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          v27 = (char *)v80;
          v26 = (int *)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v63, 24);
          v26 = &v76;
          v27 = (char *)v80;
        }
      }
      v28 = &v27[24 * v81];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v87;
      v32 = __p;
      if (v87 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v87 = v30;
      operator delete(v32);
    }
    v21 = v84;
    if (!v84)
      goto LABEL_79;
    v33 = v85;
    v23 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_77;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v75, "benefit", 7uLL);
  if (!v8)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v77 = "expected key entry for benefit in DictionaryAttr to set Properties.";
      v78 = 67;
      v36 = &v76;
      v37 = (char *)v80;
      if (v81 >= v82)
      {
        v65 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v71 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          v37 = (char *)v80;
          v36 = (int *)((char *)v80 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
          v36 = &v76;
          v37 = (char *)v80;
        }
      }
      v38 = &v37[24 * v81];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
    if (!v88)
      return 0;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v87;
      v42 = __p;
      if (v87 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v87 = v40;
      operator delete(v42);
    }
    v21 = v84;
    if (!v84)
      goto LABEL_79;
    v43 = v85;
    v23 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v21);
    goto LABEL_77;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    a3(v79, a4);
    if (v79[0])
    {
      v76 = 3;
      v78 = 52;
      v10 = &v76;
      v11 = (char *)v80;
      if (v81 >= v82)
      {
        v64 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v70 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          v11 = (char *)v80;
          v10 = (int *)((char *)v80 + v70);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
          v10 = &v76;
          v11 = (char *)v80;
        }
      }
      v12 = &v11[24 * v81];
      v13 = *(_OWORD *)v10;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v81;
      if (v79[0])
      {
        v14 = &v76;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v9);
        v15 = (char *)v80;
        if (v81 >= v82)
        {
          v66 = v81 + 1;
          if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
          {
            v72 = (char *)&v76 - (_BYTE *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            v15 = (char *)v80;
            v14 = (int *)((char *)v80 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v66, 24);
            v14 = &v76;
            v15 = (char *)v80;
          }
        }
        v16 = &v15[24 * v81];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v81;
        if (v79[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
      }
    }
    if (!v88)
      return 0;
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v87;
      v20 = __p;
      if (v87 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v87 = v18;
      operator delete(v20);
    }
    v21 = v84;
    if (!v84)
      goto LABEL_79;
    v22 = v85;
    v23 = v84;
    if (v85 == v84)
      goto LABEL_78;
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
    goto LABEL_77;
  }
  *a1 = v8;
  v46 = mlir::DictionaryAttr::get((uint64_t)&v75, "sym_name", 8uLL);
  if (!v46)
    return 1;
  v47 = v46;
  if (*(_UNKNOWN **)(*(_QWORD *)v46 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    a1[1] = v46;
    return 1;
  }
  a3(v79, a4);
  if (v79[0])
  {
    v76 = 3;
    v78 = 53;
    v48 = &v76;
    v49 = (char *)v80;
    if (v81 >= v82)
    {
      v67 = v81 + 1;
      if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
      {
        v73 = (char *)&v76 - (_BYTE *)v80;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        v49 = (char *)v80;
        v48 = (int *)((char *)v80 + v73);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v67, 24);
        v48 = &v76;
        v49 = (char *)v80;
      }
    }
    v50 = &v49[24 * v81];
    v51 = *(_OWORD *)v48;
    *((_QWORD *)v50 + 2) = *((_QWORD *)v48 + 2);
    *(_OWORD *)v50 = v51;
    ++v81;
    if (v79[0])
    {
      v52 = &v76;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v76, v47);
      v53 = (char *)v80;
      if (v81 >= v82)
      {
        v68 = v81 + 1;
        if (v80 <= &v76 && (char *)v80 + 24 * v81 > (char *)&v76)
        {
          v74 = (char *)&v76 - (_BYTE *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          v53 = (char *)v80;
          v52 = (int *)((char *)v80 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v68, 24);
          v52 = &v76;
          v53 = (char *)v80;
        }
      }
      v54 = &v53[24 * v81];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = *((_QWORD *)v52 + 2);
      *(_OWORD *)v54 = v55;
      ++v81;
      if (v79[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v79);
    }
  }
  if (v88)
  {
    v56 = (_QWORD **)__p;
    if (__p)
    {
      v57 = v87;
      v58 = __p;
      if (v87 != __p)
      {
        do
          v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
        while (v57 != v56);
        v58 = __p;
      }
      v87 = v56;
      operator delete(v58);
    }
    v21 = v84;
    if (!v84)
      goto LABEL_79;
    v59 = v85;
    v23 = v84;
    if (v85 == v84)
    {
LABEL_78:
      v85 = v21;
      operator delete(v23);
LABEL_79:
      if (v80 != v83)
        free(v80);
      return 0;
    }
    do
    {
      v61 = (void *)*--v59;
      v60 = v61;
      *v59 = 0;
      if (v61)
        operator delete[](v60);
    }
    while (v59 != v21);
LABEL_77:
    v23 = v84;
    goto LABEL_78;
  }
  return 0;
}

uint64_t mlir::pdl::PatternOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  mlir::MLIRContext *v10;
  uint64_t DictionaryAttr;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  mlir::DictionaryAttr *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v19 = v21;
  v20 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v18, (uint64_t)"benefit", 7, *a2);
    v5 = v4;
    v6 = v20;
    if (v20 >= HIDWORD(v20))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
      v6 = v20;
    }
    v7 = (uint64_t *)((char *)v19 + 16 * v6);
    *v7 = NamedAttr;
    v7[1] = v5;
    v8 = v20 + 1;
    LODWORD(v20) = v20 + 1;
    v9 = a2[1];
    if (!v9)
    {
LABEL_5:
      v10 = (mlir::MLIRContext *)v19;
      if (v8)
        goto LABEL_6;
LABEL_13:
      DictionaryAttr = 0;
      if (v10 == (mlir::MLIRContext *)v21)
        return DictionaryAttr;
      goto LABEL_7;
    }
  }
  else
  {
    v8 = 0;
    v9 = a2[1];
    if (!v9)
      goto LABEL_5;
  }
  v13 = mlir::Builder::getNamedAttr(&v18, (uint64_t)"sym_name", 8, v9);
  v15 = v14;
  v16 = v20;
  if (v20 >= HIDWORD(v20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
    v16 = v20;
  }
  v17 = (uint64_t *)((char *)v19 + 16 * v16);
  *v17 = v13;
  v17[1] = v15;
  v8 = v20 + 1;
  LODWORD(v20) = v8;
  v10 = (mlir::MLIRContext *)v19;
  if (!v8)
    goto LABEL_13;
LABEL_6:
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v18, v10, v8);
  v10 = (mlir::MLIRContext *)v19;
  if (v19 != v21)
LABEL_7:
    free(v10);
  return DictionaryAttr;
}

BOOL mlir::pdl::PatternOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v8 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v8, (const void **)"benefit", (const char *)7, (void (*)(void **__return_ptr, uint64_t))a3, a4))
  {
    v9 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"sym_name", (const char *)8, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(uint64_t a1, const void **a2, const char *a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5)
{
  unsigned int v10;
  void **p_p;
  uint64_t v12;
  const void ***p_Value;
  char *v14;
  char *v15;
  __int128 v16;
  const void ***v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD **v22;
  _QWORD **v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  void *v29;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void **Value;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  void *__p;
  unsigned int v42[4];
  void *v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE v46[96];
  void *v47;
  _QWORD *v48;
  void *v49;
  _QWORD **v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    goto LABEL_11;
  v36 = a1;
  Value = (const void **)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v36);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 16))
    goto LABEL_11;
  v35 = a1;
  mlir::IntegerAttr::getValue(&v35, (llvm::APInt *)&__p);
  v10 = v42[0] - 1;
  if (v42[0] >= 0x41)
    p_p = (void **)((char *)__p + 8 * (v10 >> 6));
  else
    p_p = &__p;
  v12 = (1 << v10) & (unint64_t)*p_p;
  if (v42[0] >= 0x41 && __p)
    operator delete[](__p);
  if (!v12)
    return 1;
LABEL_11:
  a4(&__p, a5);
  if (__p)
  {
    LODWORD(Value) = 3;
    v38 = "attribute '";
    v39 = 11;
    p_Value = &Value;
    v14 = (char *)v43;
    if (v44 >= v45)
    {
      v31 = v44 + 1;
      if (v43 <= &Value && (char *)v43 + 24 * v44 > (char *)&Value)
      {
        v33 = (char *)&Value - (_BYTE *)v43;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
        v14 = (char *)v43;
        p_Value = (const void ***)((char *)v43 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
        p_Value = &Value;
        v14 = (char *)v43;
      }
    }
    v15 = &v14[24 * v44];
    v16 = *(_OWORD *)p_Value;
    *((_QWORD *)v15 + 2) = p_Value[2];
    *(_OWORD *)v15 = v16;
    ++v44;
    if (__p)
    {
      v40 = 261;
      Value = a2;
      v38 = a3;
      mlir::Diagnostic::operator<<((uint64_t)v42, &Value);
      if (__p)
      {
        LODWORD(Value) = 3;
        v38 = "' failed to satisfy constraint: 16-bit signless integer attribute whose value is non-negative";
        v39 = 93;
        v17 = &Value;
        v18 = (char *)v43;
        if (v44 >= v45)
        {
          v32 = v44 + 1;
          if (v43 <= &Value && (char *)v43 + 24 * v44 > (char *)&Value)
          {
            v34 = (char *)&Value - (_BYTE *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            v18 = (char *)v43;
            v17 = (const void ***)((char *)v43 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
            v17 = &Value;
            v18 = (char *)v43;
          }
        }
        v19 = &v18[24 * v44];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = v17[2];
        *(_OWORD *)v19 = v20;
        ++v44;
      }
    }
  }
  v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  if (v51)
  {
    v22 = (_QWORD **)v49;
    if (v49)
    {
      v23 = v50;
      v24 = v49;
      if (v50 != v49)
      {
        do
          v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
        while (v23 != v22);
        v24 = v49;
      }
      v50 = v22;
      operator delete(v24);
    }
    v25 = v47;
    if (v47)
    {
      v26 = v48;
      v27 = v47;
      if (v48 != v47)
      {
        do
        {
          v29 = (void *)*--v26;
          v28 = v29;
          *v26 = 0;
          if (v29)
            operator delete[](v28);
        }
        while (v26 != v25);
        v27 = v47;
      }
      v48 = v25;
      operator delete(v27);
    }
    if (v43 != v46)
      free(v43);
  }
  return v21;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[193];
    return a1[32];
  }
  return result;
}

BOOL mlir::pdl::PatternOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  BOOL v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  int64_t v40;
  _QWORD v41[4];
  __int16 v42;
  const void **v43[4];
  __int16 v44;
  const void **v45[4];
  __int16 v46;
  int v47;
  const char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[96];
  void *v56;
  _QWORD *v57;
  void *__p;
  _QWORD **v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *v3;
  if (*v3)
  {
    v5 = v3[1];
    v50 = v2;
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v4, (const void **)"benefit", (const char *)7, (void (*)(void **__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v50))return 0;
    v50 = *this;
    if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v50))return 0;
    v6 = *this;
    v7 = (((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
         + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)*this + 10);
    v8 = *(_QWORD *)(v7 + 8);
    if (v8 != v7 && *(_QWORD *)(v8 + 8) == v7)
      return 1;
    v45[0] = (const void **)"region #";
    v46 = 259;
    mlir::Operation::emitOpError(v6, v45, (uint64_t)&v50);
    if (v50)
    {
      LODWORD(v43[0]) = 5;
      v43[1] = 0;
      v9 = v43;
      v10 = (char *)v52;
      if (v53 >= v54)
      {
        v37 = v53 + 1;
        if (v52 <= v43 && (char *)v52 + 24 * v53 > (char *)v43)
        {
          v39 = (char *)v43 - (_BYTE *)v52;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
          v10 = (char *)v52;
          v9 = (const void ***)((char *)v52 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v37, 24);
          v9 = v43;
          v10 = (char *)v52;
        }
      }
      v11 = &v10[24 * v53];
      v12 = *(_OWORD *)v9;
      *((_QWORD *)v11 + 2) = v9[2];
      *(_OWORD *)v11 = v12;
      ++v53;
      v13 = v50 == 0;
    }
    else
    {
      v13 = 1;
    }
    v42 = 1283;
    v41[0] = " ('";
    v41[2] = "bodyRegion";
    v41[3] = 10;
    v43[0] = (const void **)v41;
    v43[2] = (const void **)"') ";
    v44 = 770;
    if (!v13)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v51, v43);
      if (v50)
      {
        v47 = 3;
        v48 = "failed to verify constraint: region with 1 blocks";
        v49 = 49;
        v23 = &v47;
        v24 = (char *)v52;
        if (v53 >= v54)
        {
          v38 = v53 + 1;
          if (v52 <= &v47 && (char *)v52 + 24 * v53 > (char *)&v47)
          {
            v40 = (char *)&v47 - (_BYTE *)v52;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            v24 = (char *)v52;
            v23 = (int *)((char *)v52 + v40);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, v55, v38, 24);
            v23 = &v47;
            v24 = (char *)v52;
          }
        }
        v25 = &v24[24 * v53];
        v26 = *(_OWORD *)v23;
        *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
        *(_OWORD *)v25 = v26;
        ++v53;
      }
    }
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v50);
    if (v50)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v50);
    if (v60)
    {
      v28 = (_QWORD **)__p;
      if (__p)
      {
        v29 = v59;
        v30 = __p;
        if (v59 != __p)
        {
          do
            v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          v30 = __p;
        }
        v59 = v28;
        operator delete(v30);
      }
      v31 = v56;
      if (v56)
      {
        v32 = v57;
        v33 = v56;
        if (v57 != v56)
        {
          do
          {
            v35 = (void *)*--v32;
            v34 = v35;
            *v32 = 0;
            if (v35)
              operator delete[](v34);
          }
          while (v32 != v31);
          v33 = v56;
        }
        v57 = v31;
        operator delete(v33);
      }
      if (v52 != v55)
        free(v52);
    }
    return v27 != 0;
  }
  else
  {
    v45[0] = (const void **)"requires attribute 'benefit'";
    v46 = 259;
    mlir::OpState::emitOpError(this, v45, (uint64_t)&v50);
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v50);
    if (v50)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v50);
    if (v60)
    {
      v15 = (_QWORD **)__p;
      if (__p)
      {
        v16 = v59;
        v17 = __p;
        if (v59 != __p)
        {
          do
            v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
          while (v16 != v15);
          v17 = __p;
        }
        v59 = v15;
        operator delete(v17);
      }
      v18 = v56;
      if (v56)
      {
        v19 = v57;
        v20 = v56;
        if (v57 != v56)
        {
          do
          {
            v22 = (void *)*--v19;
            v21 = v22;
            *v19 = 0;
            if (v22)
              operator delete[](v21);
          }
          while (v19 != v18);
          v20 = v56;
        }
        v57 = v18;
        operator delete(v20);
      }
      if (v52 != v55)
        free(v52);
    }
  }
  return v14;
}

uint64_t mlir::pdl::PatternOp::parse(uint64_t a1, _QWORD *a2)
{
  mlir::Region *v4;
  uint64_t v5;
  mlir::Builder *v6;
  uint64_t IntegerType;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  mlir::Region *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;

  v15 = 0;
  v16 = 0;
  v4 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v4 = v4;
  *((_QWORD *)v4 + 1) = v4;
  *((_QWORD *)v4 + 2) = 0;
  v14 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 496))(a1, &v16);
  if (v16)
  {
    v5 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(a2);
    *(_QWORD *)(v5 + 8) = v16;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    goto LABEL_17;
  v18 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "benefit", 7, v17))goto LABEL_17;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1))
    goto LABEL_17;
  v6 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IntegerType = mlir::Builder::getIntegerType(v6, 0x10u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v15, IntegerType))
    goto LABEL_17;
  if (v15)
  {
    v8 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(a2);
    *v8 = v15;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1)
    || (v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 464))(a1, a2 + 14))
    || (v9 = a2[1],
        v17[0] = a1,
        v17[1] = &v13,
        v17[2] = a2,
        !mlir::pdl::PatternOp::verifyInherentAttrs(v9, (uint64_t)(a2 + 14), (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::PatternOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v17))|| !(*(unsigned __int8 (**)(uint64_t, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))
  {
LABEL_17:
    v10 = 0;
    v14 = 0;
LABEL_18:
    mlir::Region::~Region(v4);
    operator delete(v11);
    return v10;
  }
  if (*(mlir::Region **)v4 == v4)
    mlir::Region::emplaceBlock(v4);
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v14);
  v4 = v14;
  v14 = 0;
  v10 = 1;
  if (v4)
    goto LABEL_18;
  return v10;
}

void mlir::pdl::PatternOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  unint64_t v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t AttrData;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _DWORD *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  mlir::Operation *v22;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  unint64_t AttrDictionary;
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v4 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v4 = 0;
  if (*(_QWORD *)(v4 + 8))
  {
    v5 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 32);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 32;
    }
    v7 = (unint64_t)*this + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 64;
    if (!HIBYTE(*((_DWORD *)*this + 11)))
      v7 = 0;
    v29 = *(void **)(v7 + 8);
    AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v29);
    (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, AttrData, v9);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v13)
  {
    llvm::raw_ostream::write(v12, ":", 1uLL);
  }
  else
  {
    *v13 = 58;
    ++*((_QWORD *)v12 + 4);
  }
  v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v15 + 1;
    *v15 = 32;
  }
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_DWORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v17 > 6uLL)
  {
    *(_DWORD *)((char *)v17 + 3) = 1953064549;
    *v17 = 1701733730;
    *((_QWORD *)v16 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v16, "benefit", 7uLL);
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v19)
  {
    llvm::raw_ostream::write(v18, "(", 1uLL);
  }
  else
  {
    *v19 = 40;
    ++*((_QWORD *)v18 + 4);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if (*((_BYTE **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, ")", 1uLL);
  }
  else
  {
    *v21 = 41;
    ++*((_QWORD *)v20 + 4);
  }
  v29 = v31;
  v31[0] = "sym_name";
  v31[1] = 8;
  v31[2] = "benefit";
  v31[3] = 7;
  v30 = 0x200000002;
  v22 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v22);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v22 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 200))(a2, Value, v25, v29, v30);
  v26 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v27 + 1;
    *v27 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)*this+ 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 71) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), 1, 1, 0);
  if (v29 != v31)
    free(v29);
}

uint64_t mlir::pdl::RangeOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t *v10;
  const void **v11;
  int *v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  int *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  char v30;
  _QWORD **v31;
  _QWORD **v32;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  const void **v50[4];
  __int16 v51;
  int v52;
  const char *v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && (v3 = *((unsigned int *)v2 + 17), (_DWORD)v3))
  {
    v4 = 0;
    v5 = v2[9] + 24;
    while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v4))
    {
      ++v4;
      v5 += 32;
      if (v3 == v4)
      {
        v2 = *this;
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    v6 = *((_DWORD *)v2 + 9);
    v7 = v2 - 2;
    if (v6)
      v8 = (uint64_t)v7;
    else
      v8 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    v10 = *this;
    v11 = (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    if (*((_UNKNOWN **)*v11 + 17) == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
    {
      v55[0] = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v55) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id)
        return 1;
      v50[0] = v11;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v50) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
        return 1;
    }
    v51 = 261;
    v50[0] = (const void **)"result";
    v50[1] = (const void **)6;
    mlir::Operation::emitOpError(v10, v50, (uint64_t)v55);
    if (v55[0])
    {
      v52 = 3;
      v53 = " #";
      v54 = 2;
      v12 = &v52;
      v13 = (char *)v56;
      if (v57 >= v58)
      {
        v40 = v57 + 1;
        if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
        {
          v46 = (char *)&v52 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          v13 = (char *)v56;
          v12 = (int *)((char *)v56 + v46);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v40, 24);
          v12 = &v52;
          v13 = (char *)v56;
        }
      }
      v14 = &v13[24 * v57];
      v15 = *(_OWORD *)v12;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v14 = v15;
      v16 = ++v57;
      if (v55[0])
      {
        v52 = 5;
        v53 = 0;
        v17 = &v52;
        v18 = (char *)v56;
        if (v16 >= v58)
        {
          v41 = v16 + 1;
          v42 = (char *)v56 + 24 * v16 > (char *)&v52;
          if (v56 <= &v52 && v42)
          {
            v47 = (char *)&v52 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            v18 = (char *)v56;
            v17 = (int *)((char *)v56 + v47);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v41, 24);
            v17 = &v52;
            v18 = (char *)v56;
          }
        }
        v19 = &v18[24 * v57];
        v20 = *(_OWORD *)v17;
        *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
        *(_OWORD *)v19 = v20;
        v21 = ++v57;
        if (v55[0])
        {
          v52 = 3;
          v54 = 99;
          v22 = &v52;
          v23 = (char *)v56;
          if (v21 >= v58)
          {
            v43 = v21 + 1;
            v44 = (char *)v56 + 24 * v21 > (char *)&v52;
            if (v56 <= &v52 && v44)
            {
              v48 = (char *)&v52 - (_BYTE *)v56;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              v23 = (char *)v56;
              v22 = (int *)((char *)v56 + v48);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
              v22 = &v52;
              v23 = (char *)v56;
            }
          }
          v24 = &v23[24 * v57];
          v25 = *(_OWORD *)v22;
          *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
          *(_OWORD *)v24 = v25;
          ++v57;
          if (v55[0])
          {
            v26 = &v52;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)v11);
            v27 = (char *)v56;
            if (v57 >= v58)
            {
              v45 = v57 + 1;
              if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
              {
                v49 = (char *)&v52 - (_BYTE *)v56;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                v27 = (char *)v56;
                v26 = (int *)((char *)v56 + v49);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
                v26 = &v52;
                v27 = (char *)v56;
              }
            }
            v28 = &v27[24 * v57];
            v29 = *(_OWORD *)v26;
            *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
            *(_OWORD *)v28 = v29;
            ++v57;
          }
        }
      }
    }
    v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
    if (v55[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
    if (v64)
    {
      v31 = (_QWORD **)__p;
      if (__p)
      {
        v32 = v63;
        v33 = __p;
        if (v63 != __p)
        {
          do
            v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          v33 = __p;
        }
        v63 = v31;
        operator delete(v33);
      }
      v34 = v60;
      if (v60)
      {
        v35 = v61;
        v36 = v60;
        if (v61 != v60)
        {
          do
          {
            v38 = (void *)*--v35;
            v37 = v38;
            *v35 = 0;
            if (v38)
              operator delete[](v37);
          }
          while (v35 != v34);
          v36 = v60;
        }
        v61 = v34;
        operator delete(v36);
      }
      if (v56 != v59)
        free(v56);
    }
    if (v30)
      return 1;
  }
  return 0;
}

BOOL mlir::pdl::RangeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *RangeElementTypeOrSelf;
  uint64_t v7;
  _BOOL8 v8;
  void *v9;
  unint64_t v11[2];
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x400000000;
  v12 = 0;
  v13 = &v15;
  v14 = 0x100000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v16, 0, 1, 0xFFFFFFFFLL)|| (_DWORD)v17&& (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)&v13)))
  {
    goto LABEL_13;
  }
  mlir::ValueRange::ValueRange(v11, (uint64_t)v13, v14);
  if (v11[1])
  {
    v5 = (_QWORD *)mlir::TypeRange::dereference_iterator(v11[0], 0);
    RangeElementTypeOrSelf = mlir::pdl::getRangeElementTypeOrSelf(v5);
    v12 = mlir::pdl::RangeType::get((uint64_t)RangeElementTypeOrSelf);
  }
  else if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v12))
  {
    goto LABEL_13;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
  {
LABEL_13:
    v8 = 0;
    v9 = v13;
    if (v13 == &v15)
      goto LABEL_15;
    goto LABEL_14;
  }
  v7 = *(unsigned int *)(a2 + 72);
  if (v7 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v7) = v12;
  ++*(_DWORD *)(a2 + 72);
  v8 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v16, (uint64_t)&v13, v4, a2 + 16) != 0;
  v9 = v13;
  if (v13 != &v15)
LABEL_14:
    free(v9);
LABEL_15:
  if (v16 != v18)
    free(v16);
  return v8;
}

void mlir::pdl::RangeOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  mlir::Operation *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  mlir::Operation *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  mlir::Operation *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t NextResultAtOffset;
  unint64_t v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  mlir::Operation *v29;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];
  const char *AttrDictionary;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41[4];
  unint64_t v42[3];

  v42[2] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)*this + 46) & 0x80) != 0 && *((_DWORD *)*this + 17))
  {
    v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v5 + 1;
      *v5 = 32;
    }
    v6 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v7 = *((unsigned int *)v6 + 17);
      v8 = *((_QWORD *)v6 + 9);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    v9 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v39 = ", ";
    v40 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v8, 0, v8, v7, (uint64_t)a2, v9, (uint64_t)&v39);
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if (*((_BYTE **)v12 + 3) == v13)
    {
      llvm::raw_ostream::write(v12, ":", 1uLL);
    }
    else
    {
      *v13 = 58;
      ++*((_QWORD *)v12 + 4);
    }
    v14 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v15 = (_BYTE *)*((_QWORD *)v14 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
    {
      llvm::raw_ostream::write(v14, 32);
    }
    else
    {
      *((_QWORD *)v14 + 4) = v15 + 1;
      *v15 = 32;
    }
    v16 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v17 = *((unsigned int *)v16 + 17);
      v18 = *((_QWORD *)v16 + 9);
    }
    else
    {
      v18 = 0;
      v17 = 0;
    }
    v36[0] = v18;
    v36[1] = v17;
    mlir::OperandRange::getTypes(v36, (uint64_t *)&v39);
    AttrDictionary = ", ";
    v38 = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v39, v40, v41[0], v41[1], (uint64_t)a2, (uint64_t)a2, (uint64_t)&AttrDictionary);
  }
  v19 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 32);
  }
  else
  {
    *((_QWORD *)v19 + 4) = v20 + 1;
    *v20 = 32;
  }
  v21 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v22 = *((unsigned int *)v21 + 17);
    v23 = (const char *)*((_QWORD *)v21 + 9);
  }
  else
  {
    v23 = 0;
    v22 = 0;
  }
  AttrDictionary = v23;
  v38 = v22;
  mlir::OperandRange::getTypes((uint64_t *)&AttrDictionary, &v33);
  mlir::ValueRange::ValueRange((unint64_t *)&v39, v33 + 32 * v34, v35 - v34);
  mlir::TypeRange::TypeRange(v42, (uint64_t)v39, v40);
  if (*((_DWORD *)*this + 9))
    v24 = (uint64_t)*this - 16;
  else
    v24 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v24, 0);
  if (!v42[1])
  {
    v26 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v28 = (_WORD *)*((_QWORD *)v27 + 4);
    if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
    {
      *v28 = 8250;
      *((_QWORD *)v27 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v27, ": ", 2uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, v26);
  }
  v39 = v41;
  v40 = 0x200000000;
  v29 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = (const char *)mlir::Operation::getAttrDictionary(v29);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v29 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v32, v39, v40);
  if (v39 != v41)
    free(v39);
}

BOOL mlir::pdl::ReplaceOp::readProperties(uint64_t a1, _QWORD *a2)
{
  _DWORD *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(a2);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 4)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3, v12, 4 * v13);
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, v3, (const char *)3);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _DWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0xCuLL);
    *(_QWORD *)v3 = 0;
    v3[2] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[195];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::ReplaceOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  int *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  BOOL v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  const void **v55;
  __int16 v56;
  int v57;
  const char *v58;
  uint64_t v59;
  _QWORD v60[3];
  void *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[96];
  void *v65;
  _QWORD *v66;
  void *__p;
  _QWORD **v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *((unsigned int *)*this + 11);
  v4 = (v3 >> 23) & 1;
  v5 = (const char *)LODWORD((*this)[2 * v4 + 8]);
  if ((v3 & 0x800000) != 0)
  {
    v6 = v2[9];
    if ((_DWORD)v5)
      goto LABEL_3;
  }
  else
  {
    v6 = 0;
    if ((_DWORD)v5)
    {
LABEL_3:
      v7 = 0;
      v8 = v6 + 24;
      while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(_QWORD *)(*(_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v7))
      {
        ++v7;
        v8 += 32;
        if (v5 == v7)
        {
          v2 = *this;
          v3 = *((unsigned int *)*this + 11);
          v4 = (v3 >> 23) & 1;
          v9 = v3 & 0x800000;
          goto LABEL_9;
        }
      }
      return 0;
    }
  }
  v9 = v3 & 0x800000;
LABEL_9:
  if (BYTE3(v3))
    v10 = &v2[2 * v4 + 8];
  else
    v10 = 0;
  v11 = *(unsigned int *)v10;
  v12 = *((_DWORD *)v10 + 1);
  if (v9)
  {
    v13 = v2[9];
    v14 = v12 + v11 - v11;
    if (v14 > 1)
    {
LABEL_14:
      v55 = (const void **)"operand group starting at #";
      v56 = 259;
      mlir::OpState::emitOpError(this, &v55, (uint64_t)v60);
      if (v60[0])
      {
        v57 = 5;
        v58 = v5;
        v15 = &v57;
        v16 = (char *)v61;
        if (v62 >= v63)
        {
          v47 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            v52 = (char *)&v57 - (_BYTE *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            v16 = (char *)v61;
            v15 = (int *)((char *)v61 + v52);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v47, 24);
            v15 = &v57;
            v16 = (char *)v61;
          }
        }
        v17 = &v16[24 * v62];
        v18 = *(_OWORD *)v15;
        *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v17 = v18;
        v19 = ++v62;
        if (v60[0])
        {
          v57 = 3;
          v58 = " requires 0 or 1 element, but found ";
          v59 = 36;
          v20 = &v57;
          v21 = (char *)v61;
          if (v19 >= v63)
          {
            v48 = v19 + 1;
            v49 = (char *)v61 + 24 * v19 > (char *)&v57;
            if (v61 <= &v57 && v49)
            {
              v53 = (char *)&v57 - (_BYTE *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
              v21 = (char *)v61;
              v20 = (int *)((char *)v61 + v53);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
              v20 = &v57;
              v21 = (char *)v61;
            }
          }
          v22 = &v21[24 * v62];
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v24 = ++v62;
          if (v60[0])
          {
            v57 = 5;
            v58 = (const char *)v14;
            v25 = &v57;
            v26 = (char *)v61;
            if (v24 >= v63)
            {
              v50 = v24 + 1;
              v51 = (char *)v61 + 24 * v24 > (char *)&v57;
              if (v61 <= &v57 && v51)
              {
                v54 = (char *)&v57 - (_BYTE *)v61;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
                v26 = (char *)v61;
                v25 = (int *)((char *)v61 + v54);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
                v25 = &v57;
                v26 = (char *)v61;
              }
            }
            v27 = &v26[24 * v62];
            v28 = *(_OWORD *)v25;
            *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
            *(_OWORD *)v27 = v28;
            ++v62;
          }
        }
      }
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v60);
      if (v60[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      if (v69)
      {
        v30 = (_QWORD **)__p;
        if (__p)
        {
          v31 = v68;
          v32 = __p;
          if (v68 != __p)
          {
            do
              v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
            while (v31 != v30);
            v32 = __p;
          }
          v68 = v30;
          operator delete(v32);
        }
        v33 = v65;
        if (v65)
        {
          v34 = v66;
          v35 = v65;
          if (v66 != v65)
          {
            do
            {
              v37 = (void *)*--v34;
              v36 = v37;
              *v34 = 0;
              if (v37)
                operator delete[](v36);
            }
            while (v34 != v33);
            v35 = v65;
          }
          v66 = v33;
          operator delete(v35);
        }
        if (v61 != v64)
          free(v61);
      }
      return v29;
    }
  }
  else
  {
    v13 = 0;
    v14 = v12 + v11 - v11;
    if (v14 > 1)
      goto LABEL_14;
  }
  if (!v12)
  {
LABEL_45:
    v39 = (uint64_t)&v2[2 * v4 + 8];
    if (BYTE3(v3))
      v40 = (_DWORD *)v39;
    else
      v40 = 0;
    v41 = v40[2];
    if (v9)
    {
      v42 = v2[9];
      if (v41)
        goto LABEL_50;
    }
    else
    {
      v42 = 0;
      if (v41)
      {
LABEL_50:
        v43 = (v40[1] + *v40);
        v44 = (v41 + v43) - v43;
        for (i = v42 + 32 * v43 + 24;
              mlir::pdl::__mlir_ods_local_type_constraint_PDLOps7(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v5);
              i += 32)
        {
          LODWORD(v5) = (_DWORD)v5 + 1;
          if (!--v44)
            return 1;
        }
        return 0;
      }
    }
    return 1;
  }
  v38 = v13 + 32 * v11 + 24;
  while (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(_QWORD *)(*(_QWORD *)v38 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v5))
  {
    LODWORD(v5) = (_DWORD)v5 + 1;
    v38 += 32;
    if (!--v14)
    {
      v2 = *this;
      v3 = *((unsigned int *)*this + 11);
      v4 = (v3 >> 23) & 1;
      v9 = v3 & 0x800000;
      goto LABEL_45;
    }
  }
  return 0;
}

BOOL mlir::pdl::ReplaceOp::parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned __int16 v5;
  _OWORD *v6;
  char *v7;
  char *v8;
  __int128 v9;
  int v10;
  int v11;
  _DWORD *v12;
  mlir::MLIRContext **v13;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BOOL8 v19;
  void *v20;
  unint64_t v22;
  int64_t v23;
  _QWORD v24[4];
  __int16 v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[128];
  void *v29[2];
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[128];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x1E0C80C00];
  memset(v34, 0, 24);
  v31 = v33;
  v32 = 0x400000000;
  v29[0] = &v30;
  v29[1] = (void *)0x100000000;
  v26 = v28;
  v27 = 0x400000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v34, 1))
    goto LABEL_22;
  v25 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "with", 4, v24))goto LABEL_22;
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v31, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v29)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
    {
      goto LABEL_22;
    }
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  memset(v24, 0, 24);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 680))(a1, v24, 1);
  if (v5 >= 0x100u)
  {
    if (!(_BYTE)v5)
      goto LABEL_22;
    v6 = v24;
    v7 = (char *)v26;
    if (v27 >= HIDWORD(v27))
    {
      v22 = v27 + 1;
      if (v26 <= v24 && (char *)v26 + 32 * v27 > (char *)v24)
      {
        v23 = (char *)v24 - (_BYTE *)v26;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v22, 32);
        v7 = (char *)v26;
        v6 = (char *)v26 + v23;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v22, 32);
        v6 = v24;
        v7 = (char *)v26;
      }
    }
    v8 = &v7[32 * v27];
    v9 = v6[1];
    *(_OWORD *)v8 = *v6;
    *((_OWORD *)v8 + 1) = v9;
    LODWORD(v27) = v27 + 1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 456))(a1, a2 + 14))
    goto LABEL_22;
  v10 = v27;
  v11 = v32;
  v12 = (_DWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ReplaceOpGenericAdaptorBase::Properties>(a2);
  *v12 = 1;
  v12[1] = v10;
  v12[2] = v11;
  v13 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v13);
  SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  v16 = (uint64_t)(a2 + 2);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v34, SingletonImpl, v16))
  {
LABEL_22:
    v19 = 0;
    v20 = v26;
    if (v26 == v28)
      goto LABEL_24;
    goto LABEL_23;
  }
  if ((_DWORD)v27)
  {
    v17 = (char *)v26;
    v18 = 32 * v27;
    while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v17, SingletonImpl, v16))
    {
      v17 += 32;
      v18 -= 32;
      if (!v18)
        goto LABEL_20;
    }
    goto LABEL_22;
  }
LABEL_20:
  v19 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v31, (uint64_t)v29, v4, v16) != 0;
  v20 = v26;
  if (v26 != v28)
LABEL_23:
    free(v20);
LABEL_24:
  if (v29[0] != &v30)
    free(v29[0]);
  if (v31 != v33)
    free(v31);
  return v19;
}

void mlir::pdl::ReplaceOp::print(mlir::pdl::ReplaceOp *this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _DWORD *v9;
  unint64_t v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  unint64_t v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  unint64_t v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  _QWORD *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  mlir::ArrayAttr *v48;
  uint64_t Value;
  uint64_t v50;
  uint64_t v51[2];
  _QWORD v52[2];
  void *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 24));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 3uLL)
  {
    *v9 = 1752459639;
    *((_QWORD *)v8 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v8, "with", 4uLL);
  }
  v10 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v10 = 0;
  if (*(_DWORD *)(v10 + 8))
  {
    v11 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if (*((_BYTE **)v11 + 3) == v12)
    {
      llvm::raw_ostream::write(v11, "(", 1uLL);
    }
    else
    {
      *v12 = 40;
      ++*((_QWORD *)v11 + 4);
    }
    v13 = *(unsigned int *)(*(_QWORD *)this + 44);
    if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v14 = (int *)(*(_QWORD *)this + 16 * ((v13 >> 23) & 1) + 64);
    else
      v14 = 0;
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    if ((v13 & 0x800000) != 0)
      v18 = *(_QWORD *)(*(_QWORD *)this + 72);
    else
      v18 = 0;
    v19 = (v16 + v15);
    v20 = v18 + 32 * v19;
    v21 = (v17 + v19) - v19;
    v22 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v53 = ", ";
    v54 = 2;
    llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v20, 0, v20, v21, (uint64_t)a2, v22, (uint64_t)&v53);
    v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v24 = (_BYTE *)*((_QWORD *)v23 + 4);
    if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
    {
      llvm::raw_ostream::write(v23, 32);
    }
    else
    {
      *((_QWORD *)v23 + 4) = v24 + 1;
      *v24 = 32;
    }
    v25 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v26 = (_BYTE *)*((_QWORD *)v25 + 4);
    if (*((_BYTE **)v25 + 3) == v26)
    {
      llvm::raw_ostream::write(v25, ":", 1uLL);
    }
    else
    {
      *v26 = 58;
      ++*((_QWORD *)v25 + 4);
    }
    v27 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
    {
      llvm::raw_ostream::write(v27, 32);
    }
    else
    {
      *((_QWORD *)v27 + 4) = v28 + 1;
      *v28 = 32;
    }
    v29 = *(unsigned int *)(*(_QWORD *)this + 44);
    if (HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
      v30 = (int *)(*(_QWORD *)this + 16 * ((v29 >> 23) & 1) + 64);
    else
      v30 = 0;
    v31 = *v30;
    v32 = v30[1];
    v33 = v30[2];
    if ((v29 & 0x800000) != 0)
      v34 = *(_QWORD *)(*(_QWORD *)this + 72);
    else
      v34 = 0;
    v35 = (v32 + v31);
    v51[0] = v34 + 32 * v35;
    v51[1] = (v33 + v35) - v35;
    mlir::OperandRange::getTypes(v51, (uint64_t *)&v53);
    v52[0] = ", ";
    v52[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v53, v54, (uint64_t)v55, v56, (uint64_t)a2, (uint64_t)a2, (uint64_t)v52);
    v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v37 = (_BYTE *)*((_QWORD *)v36 + 4);
    if (*((_BYTE **)v36 + 3) == v37)
    {
      llvm::raw_ostream::write(v36, ")", 1uLL);
    }
    else
    {
      *v37 = 41;
      ++*((_QWORD *)v36 + 4);
    }
  }
  v38 = *(_QWORD **)this;
  v39 = *(unsigned int *)(*(_QWORD *)this + 44);
  v40 = (unsigned int *)(*(_QWORD *)this + 16 * ((v39 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v40 = 0;
  v41 = v40[1];
  if ((v39 & 0x800000) != 0)
  {
    v42 = v38[9];
    if (!v41)
      goto LABEL_52;
  }
  else
  {
    v42 = 0;
    if (!v41)
      goto LABEL_52;
  }
  if (!*(_QWORD *)(v42 + 32 * *v40 + 24))
    goto LABEL_52;
  v43 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v44 = (_BYTE *)*((_QWORD *)v43 + 4);
  if ((unint64_t)v44 >= *((_QWORD *)v43 + 3))
  {
    llvm::raw_ostream::write(v43, 32);
  }
  else
  {
    *((_QWORD *)v43 + 4) = v44 + 1;
    *v44 = 32;
  }
  v38 = *(_QWORD **)this;
  v39 = *(unsigned int *)(*(_QWORD *)this + 44);
  v45 = (unsigned int *)(*(_QWORD *)this + 16 * ((v39 >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v45 = 0;
  v46 = v45[1];
  if ((v39 & 0x800000) != 0)
  {
    v47 = v38[9];
    if (!v46)
      goto LABEL_52;
  }
  else
  {
    v47 = 0;
    if (!v46)
      goto LABEL_52;
  }
  if (*(_QWORD *)(v47 + 32 * *v45 + 24))
  {
    (*(void (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 160))(a2);
    v38 = *(_QWORD **)this;
    LODWORD(v39) = *(_DWORD *)(*(_QWORD *)this + 44);
  }
LABEL_52:
  v53 = &v55;
  v55 = "operandSegmentSizes";
  v56 = 19;
  v54 = 0x200000001;
  if (BYTE3(v39))
  {
    v52[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v38);
    v48 = (mlir::ArrayAttr *)v52;
  }
  else
  {
    v48 = (mlir::ArrayAttr *)(v38 + 7);
  }
  Value = mlir::ArrayAttr::getValue(v48);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v50, v53, v54);
  if (v53 != &v55)
    free(v53);
}

uint64_t mlir::pdl::ResultOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  int *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  uint64_t v58;
  _QWORD v59[3];
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[96];
  void *v64;
  _QWORD *v65;
  void *__p;
  _QWORD **v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v55 = v6;
  if (!v6)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected DictionaryAttr to set properties";
      v58 = 41;
      v26 = &v56;
      v27 = (char *)v60;
      if (v61 >= v62)
      {
        v47 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v51 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v27 = (char *)v60;
          v26 = (int *)((char *)v60 + v51);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          v26 = &v56;
          v27 = (char *)v60;
        }
      }
      v28 = &v27[24 * v61];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v67;
      v32 = __p;
      if (v67 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v67 = v30;
      operator delete(v32);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v33 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_57;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v55, "index", 5uLL);
  if (!v8)
  {
    a3(v59, a4);
    if (v59[0])
    {
      v56 = 3;
      v57 = "expected key entry for index in DictionaryAttr to set Properties.";
      v58 = 65;
      v36 = &v56;
      v37 = (char *)v60;
      if (v61 >= v62)
      {
        v49 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v53 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v37 = (char *)v60;
          v36 = (int *)((char *)v60 + v53);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v49, 24);
          v36 = &v56;
          v37 = (char *)v60;
        }
      }
      v38 = &v37[24 * v61];
      v39 = *(_OWORD *)v36;
      *((_QWORD *)v38 + 2) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v38 = v39;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
    if (!v68)
      return 0;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v67;
      v42 = __p;
      if (v67 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v67 = v40;
      operator delete(v42);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v43 = v65;
    v23 = v64;
    if (v65 == v64)
      goto LABEL_58;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v21);
    goto LABEL_57;
  }
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v59, a4);
  if (v59[0])
  {
    v56 = 3;
    v58 = 50;
    v10 = &v56;
    v11 = (char *)v60;
    if (v61 >= v62)
    {
      v48 = v61 + 1;
      if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
      {
        v52 = (char *)&v56 - (_BYTE *)v60;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v11 = (char *)v60;
        v10 = (int *)((char *)v60 + v52);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v48, 24);
        v10 = &v56;
        v11 = (char *)v60;
      }
    }
    v12 = &v11[24 * v61];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v61;
    if (v59[0])
    {
      v14 = &v56;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v56, v9);
      v15 = (char *)v60;
      if (v61 >= v62)
      {
        v50 = v61 + 1;
        if (v60 <= &v56 && (char *)v60 + 24 * v61 > (char *)&v56)
        {
          v54 = (char *)&v56 - (_BYTE *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v15 = (char *)v60;
          v14 = (int *)((char *)v60 + v54);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v50, 24);
          v14 = &v56;
          v15 = (char *)v60;
        }
      }
      v16 = &v15[24 * v61];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v61;
      if (v59[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v59);
    }
  }
  if (v68)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v67;
      v20 = __p;
      if (v67 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v67 = v18;
      operator delete(v20);
    }
    v21 = v64;
    if (!v64)
      goto LABEL_59;
    v22 = v65;
    v23 = v64;
    if (v65 == v64)
    {
LABEL_58:
      v65 = v21;
      operator delete(v23);
LABEL_59:
      if (v60 != v63)
        free(v60);
      return 0;
    }
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
LABEL_57:
    v23 = v64;
    goto LABEL_58;
  }
  return 0;
}

uint64_t mlir::pdl::ResultOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"index", 5, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(const void **a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  const void ***v10;
  char *v11;
  char *v12;
  __int128 v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  const void **v31;
  const char *v32;
  uint64_t v33;
  __int16 v34;
  uint64_t Value;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE v40[96];
  void *v41;
  _QWORD *v42;
  void *__p;
  _QWORD **v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v31 = a1;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
    if (mlir::Type::isSignlessInteger((mlir::Type *)&Value, 32))
      return 1;
  }
  a4(&Value, a5);
  if (Value)
  {
    LODWORD(v31) = 3;
    v32 = "attribute '";
    v33 = 11;
    v10 = &v31;
    v11 = (char *)v37;
    if (v38 >= v39)
    {
      v27 = v38 + 1;
      if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
      {
        v29 = (char *)&v31 - (_BYTE *)v37;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v11 = (char *)v37;
        v10 = (const void ***)((char *)v37 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v27, 24);
        v10 = &v31;
        v11 = (char *)v37;
      }
    }
    v12 = &v11[24 * v38];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = v10[2];
    *(_OWORD *)v12 = v13;
    ++v38;
    if (Value)
    {
      v34 = 261;
      v31 = a2;
      v32 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v36, &v31);
      if (Value)
      {
        LODWORD(v31) = 3;
        v32 = "' failed to satisfy constraint: 32-bit signless integer attribute";
        v33 = 65;
        v14 = &v31;
        v15 = (char *)v37;
        if (v38 >= v39)
        {
          v28 = v38 + 1;
          if (v37 <= &v31 && (char *)v37 + 24 * v38 > (char *)&v31)
          {
            v30 = (char *)&v31 - (_BYTE *)v37;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v15 = (char *)v37;
            v14 = (const void ***)((char *)v37 + v30);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v40, v28, 24);
            v14 = &v31;
            v15 = (char *)v37;
          }
        }
        v16 = &v15[24 * v38];
        v17 = *(_OWORD *)v14;
        *((_QWORD *)v16 + 2) = v14[2];
        *(_OWORD *)v16 = v17;
        ++v38;
      }
    }
  }
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  if (v45)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v44;
      v20 = __p;
      if (v44 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v44 = v18;
      operator delete(v20);
    }
    v21 = v41;
    if (v41)
    {
      v22 = v42;
      v23 = v41;
      if (v42 != v41)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v41;
      }
      v42 = v21;
      operator delete(v23);
    }
    if (v37 != v40)
      free(v37);
  }
  return v9;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties]";
        v15 = 107;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[197];
    return a1[32];
  }
  return result;
}

void *mlir::pdl::ResultOp::getIndex(mlir::pdl::ResultOp *this)
{
  uint64_t v2;
  void *__p;
  unsigned int v4;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v2 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v2;
}

BOOL mlir::pdl::ResultOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  const void **v16;
  __int16 v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  if (v3)
  {
    v18[0] = v2;
    if (mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v3, (const void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v18)&& mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v4 = (uint64_t)(*this - 2);
      else
        v4 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
      return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps4(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v16 = (const void **)"requires attribute 'index'";
    v17 = 259;
    mlir::OpState::emitOpError(this, &v16, (uint64_t)v18);
    v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v18);
    if (v18[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
    if (v25)
    {
      v7 = (_QWORD **)__p;
      if (__p)
      {
        v8 = v24;
        v9 = __p;
        if (v24 != __p)
        {
          do
            v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
          while (v8 != v7);
          v9 = __p;
        }
        v24 = v7;
        operator delete(v9);
      }
      v10 = v21;
      if (v21)
      {
        v11 = v22;
        v12 = v21;
        if (v22 != v21)
        {
          do
          {
            v14 = (void *)*--v11;
            v13 = v14;
            *v11 = 0;
            if (v14)
              operator delete[](v13);
          }
          while (v11 != v10);
          v12 = v21;
        }
        v22 = v10;
        operator delete(v12);
      }
      if (v19 != &v20)
        free(v19);
    }
  }
  return v6;
}

BOOL mlir::pdl::ResultOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::Builder *v4;
  uint64_t IntegerType;
  _QWORD *v6;
  uint64_t v7;
  const void **v8;
  mlir::MLIRContext **v9;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  mlir::MLIRContext **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v18 = 0;
  memset(v21, 0, 24);
  v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  IntegerType = mlir::Builder::getIntegerType(v4, 0x20u);
  if (!mlir::AsmParser::parseAttribute<mlir::IntegerAttr>(a1, &v18, IntegerType))
    return 0;
  if (v18)
  {
    v6 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>((_QWORD *)a2);
    *v6 = v18;
  }
  v20 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "of", 2, v19))return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v21, 1))
    return 0;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v19[0] = a1;
  v19[1] = &v17;
  v19[2] = a2;
  v8 = (const void **)mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v7 + 96));
  if (v8)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v8, (const void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ResultOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v19))return 0;
  }
  v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
  SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
  v12 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v13 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v12);
  v14 = mlir::StorageUniquer::getSingletonImpl(v13, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  v15 = *(unsigned int *)(a2 + 72);
  if (v15 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v15) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v21, v14, a2 + 16) != 0;
}

void mlir::pdl::ResultOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  mlir::Operation *v12;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v15;
  unint64_t AttrDictionary;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 32);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 26223;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v17 = v19;
  v19[0] = "index";
  v19[1] = 5;
  v18 = 0x200000001;
  v12 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v12);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v12 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v15, v17, v18);
  if (v17 != v19)
    free(v17);
}

uint64_t mlir::pdl::ResultsOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[3];
  void *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[96];
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD **v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      v44 = 3;
      v45 = "expected DictionaryAttr to set properties";
      v46 = 41;
      v26 = &v44;
      v27 = (char *)v48;
      if (v49 >= v50)
      {
        v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v40 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v27 = (char *)v48;
          v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v26 = &v44;
          v27 = (char *)v48;
        }
      }
      v28 = &v27[24 * v49];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
    if (!v56)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v55;
      v32 = __p;
      if (v55 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v55 = v30;
      operator delete(v32);
    }
    v21 = v52;
    if (!v52)
      goto LABEL_43;
    v33 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "index", 5uLL);
  if (!v8)
    return 1;
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    v44 = 3;
    v46 = 50;
    v10 = &v44;
    v11 = (char *)v48;
    if (v49 >= v50)
    {
      v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        v41 = (char *)&v44 - (_BYTE *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v11 = (char *)v48;
        v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v10 = &v44;
        v11 = (char *)v48;
      }
    }
    v12 = &v11[24 * v49];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v49;
    if (v47[0])
    {
      v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      v15 = (char *)v48;
      if (v49 >= v50)
      {
        v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v42 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v15 = (char *)v48;
          v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v14 = &v44;
          v15 = (char *)v48;
        }
      }
      v16 = &v15[24 * v49];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
  }
  if (!v56)
    return 0;
  v18 = (_QWORD **)__p;
  if (__p)
  {
    v19 = v55;
    v20 = __p;
    if (v55 != __p)
    {
      do
        v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      v20 = __p;
    }
    v55 = v18;
    operator delete(v20);
  }
  v21 = v52;
  if (v52)
  {
    v22 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
LABEL_41:
    v23 = v52;
LABEL_42:
    v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51)
    free(v48);
  return 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[199];
    return a1[32];
  }
  return result;
}

BOOL mlir::pdl::ResultsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  uint64_t v4;
  uint64_t NextResultAtOffset;
  unint64_t v6;
  void *v7;
  uint64_t *v8;
  int *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char v27;
  _QWORD **v28;
  _QWORD **v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  const void **v47[4];
  __int16 v48;
  int v49;
  const char *v50;
  uint64_t v51;
  _QWORD v52[3];
  void *v53;
  unsigned int v54;
  unsigned int v55;
  _BYTE v56[96];
  void *v57;
  _QWORD *v58;
  void *__p;
  _QWORD **v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (const void **)(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v52[0] = v2;
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v3, (const void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v52)|| !mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
  {
    return 0;
  }
  v4 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 0);
  v6 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(void **)(*(_QWORD *)v6 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
    return 1;
  v8 = *this;
  if (v7 == &mlir::detail::TypeIDResolver<mlir::pdl::RangeType,void>::id)
  {
    v52[0] = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v52) + 136) == &mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id)
      return 1;
  }
  v48 = 261;
  v47[0] = (const void **)"result";
  v47[1] = (const void **)6;
  mlir::Operation::emitOpError(v8, v47, (uint64_t)v52);
  if (v52[0])
  {
    v49 = 3;
    v50 = " #";
    v51 = 2;
    v9 = &v49;
    v10 = (char *)v53;
    if (v54 >= v55)
    {
      v37 = v54 + 1;
      if (v53 <= &v49 && (char *)v53 + 24 * v54 > (char *)&v49)
      {
        v43 = (char *)&v49 - (_BYTE *)v53;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v37, 24);
        v10 = (char *)v53;
        v9 = (int *)((char *)v53 + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v37, 24);
        v9 = &v49;
        v10 = (char *)v53;
      }
    }
    v11 = &v10[24 * v54];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v9 + 2);
    *(_OWORD *)v11 = v12;
    v13 = ++v54;
    if (v52[0])
    {
      v49 = 5;
      v50 = 0;
      v14 = &v49;
      v15 = (char *)v53;
      if (v13 >= v55)
      {
        v38 = v13 + 1;
        v39 = (char *)v53 + 24 * v13 > (char *)&v49;
        if (v53 <= &v49 && v39)
        {
          v44 = (char *)&v49 - (_BYTE *)v53;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v38, 24);
          v15 = (char *)v53;
          v14 = (int *)((char *)v53 + v44);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v38, 24);
          v14 = &v49;
          v15 = (char *)v53;
        }
      }
      v16 = &v15[24 * v54];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      v18 = ++v54;
      if (v52[0])
      {
        v49 = 3;
        v51 = 77;
        v19 = &v49;
        v20 = (char *)v53;
        if (v18 >= v55)
        {
          v40 = v18 + 1;
          v41 = (char *)v53 + 24 * v18 > (char *)&v49;
          if (v53 <= &v49 && v41)
          {
            v45 = (char *)&v49 - (_BYTE *)v53;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
            v20 = (char *)v53;
            v19 = (int *)((char *)v53 + v45);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v40, 24);
            v19 = &v49;
            v20 = (char *)v53;
          }
        }
        v21 = &v20[24 * v54];
        v22 = *(_OWORD *)v19;
        *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v21 = v22;
        ++v54;
        if (v52[0])
        {
          v23 = &v49;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v49, v6);
          v24 = (char *)v53;
          if (v54 >= v55)
          {
            v42 = v54 + 1;
            if (v53 <= &v49 && (char *)v53 + 24 * v54 > (char *)&v49)
            {
              v46 = (char *)&v49 - (_BYTE *)v53;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v42, 24);
              v24 = (char *)v53;
              v23 = (int *)((char *)v53 + v46);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, v56, v42, 24);
              v23 = &v49;
              v24 = (char *)v53;
            }
          }
          v25 = &v24[24 * v54];
          v26 = *(_OWORD *)v23;
          *((_QWORD *)v25 + 2) = *((_QWORD *)v23 + 2);
          *(_OWORD *)v25 = v26;
          ++v54;
        }
      }
    }
  }
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v52);
  if (v52[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v52);
  if (v61)
  {
    v28 = (_QWORD **)__p;
    if (__p)
    {
      v29 = v60;
      v30 = __p;
      if (v60 != __p)
      {
        do
          v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        v30 = __p;
      }
      v60 = v28;
      operator delete(v30);
    }
    v31 = v57;
    if (v57)
    {
      v32 = v58;
      v33 = v57;
      if (v58 != v57)
      {
        do
        {
          v35 = (void *)*--v32;
          v34 = v35;
          *v32 = 0;
          if (v35)
            operator delete[](v34);
        }
        while (v32 != v31);
        v33 = v57;
      }
      v58 = v31;
      operator delete(v33);
    }
    if (v53 != v56)
      free(v53);
  }
  return v27 != 0;
}

BOOL mlir::pdl::ResultsOp::parse(uint64_t *a1, uint64_t a2)
{
  mlir::Builder *v4;
  uint64_t IntegerType;
  unsigned __int16 v6;
  _QWORD *v7;
  uint64_t v8;
  mlir::MLIRContext **v9;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  uint64_t v12;
  const void **v13;
  mlir::MLIRContext **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23;
  _QWORD v24[5];

  v24[4] = *MEMORY[0x1E0C80C00];
  v20 = 0;
  memset(v24, 0, 24);
  v23 = 0;
  v4 = (mlir::Builder *)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  IntegerType = mlir::Builder::getIntegerType(v4, 0x20u);
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(*a1 + 424))(a1, &v20, IntegerType);
  if (v6 >= 0x100u)
  {
    if (!(_BYTE)v6)
      return 0;
    if (v20)
    {
      v7 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>((_QWORD *)a2);
      *v7 = v20;
    }
  }
  v22 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t *, const char *, uint64_t, _QWORD *))(*a1 + 368))(a1, "of", 2, v21))
    return 0;
  (*(void (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 672))(a1, v24, 1))
    return 0;
  v8 = *a1;
  if (v20)
  {
    if (!(*(unsigned __int8 (**)(uint64_t *))(v8 + 56))(a1)
      || !(*(unsigned __int8 (**)(uint64_t *, uint64_t *))(*a1 + 504))(a1, &v23))
    {
      return 0;
    }
  }
  else
  {
    v9 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t *))(v8 + 32))(a1);
    TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v9);
    SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ValueType,void>::id);
    v23 = mlir::pdl::RangeType::get(SingletonImpl);
  }
  v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t *, uint64_t))(*a1 + 456))(a1, a2 + 112))
    return 0;
  v12 = *(_QWORD *)(a2 + 8);
  v21[0] = a1;
  v21[1] = &v19;
  v21[2] = a2;
  v13 = (const void **)mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v12 + 96));
  if (v13)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v13, (const void **)"index", (const char *)5, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::ResultsOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v21))return 0;
  }
  v14 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  v15 = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v14);
  v16 = mlir::StorageUniquer::getSingletonImpl(v15, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
  v17 = *(unsigned int *)(a2 + 72);
  if (v17 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v17) = v23;
  ++*(_DWORD *)(a2 + 72);
  return (*(unsigned __int8 (**)(uint64_t *, _QWORD *, uint64_t, uint64_t))(*a1 + 696))(a1, v24, v16, a2 + 16) != 0;
}

void mlir::pdl::ResultsOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  unint64_t v17;
  llvm::raw_ostream *v18;
  _DWORD *v19;
  mlir::Operation *v20;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v23;
  unint64_t AttrDictionary;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8))
  {
    v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v5 = (_BYTE *)*((_QWORD *)v4 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 32);
    }
    else
    {
      *((_QWORD *)v4 + 4) = v5 + 1;
      *v5 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8));
  }
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 26223;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, "of", 2uLL);
  }
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 32);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 32;
  }
  v14 = *((_QWORD *)*this + 2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8);
  if (*((_DWORD *)*this + 9))
    v15 = (uint64_t)*this - 16;
  else
    v15 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
  if (v14)
  {
    v17 = *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8;
    v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v19 = (_DWORD *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 3uLL)
    {
      *v19 = 540945696;
      *((_QWORD *)v18 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v18, " -> ", 4uLL);
    }
    (*(void (**)(mlir::OpAsmPrinter *, unint64_t))(*(_QWORD *)a2 + 32))(a2, v17);
  }
  v25 = v27;
  v27[0] = "index";
  v27[1] = 5;
  v26 = 0x200000001;
  v20 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v20);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v20 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v23, v25, v26);
  if (v25 != v27)
    free(v25);
}

uint64_t mlir::pdl::RewriteOp::getRoot(mlir::pdl::RewriteOp *this)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)this + 44);
  v2 = *(_QWORD *)this + 16 * ((v1 >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v2 = 0;
  v3 = *(_DWORD *)(v2 + 8);
  if ((v1 & 0x800000) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)this + 72);
    if (v3)
      return *(_QWORD *)(v4 + 24);
  }
  else
  {
    v4 = 0;
    if (v3)
      return *(_QWORD *)(v4 + 24);
  }
  return 0;
}

BOOL mlir::pdl::RewriteOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  int *v38;
  char *v39;
  char *v40;
  __int128 v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  int v57;
  const char *v58;
  uint64_t v59;
  _QWORD v60[3];
  void *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[96];
  void *v65;
  _QWORD *v66;
  void *__p;
  _QWORD **v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v56 = v6;
  if (!v6)
  {
    a3(v60, a4);
    if (v60[0])
    {
      v57 = 3;
      v58 = "expected DictionaryAttr to set properties";
      v59 = 41;
      v26 = &v57;
      v27 = (char *)v61;
      if (v62 >= v63)
      {
        v48 = v62 + 1;
        if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
        {
          v52 = (char *)&v57 - (_BYTE *)v61;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          v27 = (char *)v61;
          v26 = (int *)((char *)v61 + v52);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v48, 24);
          v26 = &v57;
          v27 = (char *)v61;
        }
      }
      v28 = &v27[24 * v62];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v62;
      if (v60[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
    }
    if (!v69)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v68;
      v32 = __p;
      if (v68 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v68 = v30;
      operator delete(v32);
    }
    v21 = v65;
    if (!v65)
      goto LABEL_64;
    v33 = v66;
    v23 = v65;
    if (v66 == v65)
    {
LABEL_63:
      v66 = v21;
      operator delete(v23);
LABEL_64:
      if (v61 != v64)
        free(v61);
      return 0;
    }
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
LABEL_62:
    v23 = v65;
    goto LABEL_63;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v56, "name", 4uLL);
  if (v8)
  {
    v9 = v8;
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    {
      a3(v60, a4);
      if (v60[0])
      {
        v57 = 3;
        v59 = 49;
        v10 = &v57;
        v11 = (char *)v61;
        if (v62 >= v63)
        {
          v49 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            v53 = (char *)&v57 - (_BYTE *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            v11 = (char *)v61;
            v10 = (int *)((char *)v61 + v53);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v49, 24);
            v10 = &v57;
            v11 = (char *)v61;
          }
        }
        v12 = &v11[24 * v62];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v12 = v13;
        ++v62;
        if (v60[0])
        {
          v14 = &v57;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v57, v9);
          v15 = (char *)v61;
          if (v62 >= v63)
          {
            v50 = v62 + 1;
            if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
            {
              v54 = (char *)&v57 - (_BYTE *)v61;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              v15 = (char *)v61;
              v14 = (int *)((char *)v61 + v54);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v50, 24);
              v14 = &v57;
              v15 = (char *)v61;
            }
          }
          v16 = &v15[24 * v62];
          v17 = *(_OWORD *)v14;
          *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v16 = v17;
          ++v62;
          if (v60[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
        }
      }
      if (!v69)
        return 0;
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v68;
        v20 = __p;
        if (v68 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v68 = v18;
        operator delete(v20);
      }
      v21 = v65;
      if (!v65)
        goto LABEL_64;
      v22 = v66;
      v23 = v65;
      if (v66 == v65)
        goto LABEL_63;
      do
      {
        v25 = (void *)*--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          operator delete[](v24);
      }
      while (v22 != v21);
      goto LABEL_62;
    }
    *a1 = v8;
  }
  v36 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v56, "operandSegmentSizes", 0x13uLL);
  if (!v36)
  {
    v36 = (_QWORD *)mlir::DictionaryAttr::get((uint64_t)&v56, "operand_segment_sizes", 0x15uLL);
    if (!v36)
    {
      a3(v60, a4);
      if (v60[0])
      {
        v57 = 3;
        v58 = "expected key entry for operandSegmentSizes in DictionaryAttr to set Properties.";
        v59 = 79;
        v38 = &v57;
        v39 = (char *)v61;
        if (v62 >= v63)
        {
          v51 = v62 + 1;
          if (v61 <= &v57 && (char *)v61 + 24 * v62 > (char *)&v57)
          {
            v55 = (char *)&v57 - (_BYTE *)v61;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            v39 = (char *)v61;
            v38 = (int *)((char *)v61 + v55);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v64, v51, 24);
            v38 = &v57;
            v39 = (char *)v61;
          }
        }
        v40 = &v39[24 * v62];
        v41 = *(_OWORD *)v38;
        *((_QWORD *)v40 + 2) = *((_QWORD *)v38 + 2);
        *(_OWORD *)v40 = v41;
        ++v62;
        if (v60[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v60);
      }
      if (!v69)
        return 0;
      v42 = (_QWORD **)__p;
      if (__p)
      {
        v43 = v68;
        v44 = __p;
        if (v68 != __p)
        {
          do
            v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
          while (v43 != v42);
          v44 = __p;
        }
        v68 = v42;
        operator delete(v44);
      }
      v21 = v65;
      if (!v65)
        goto LABEL_64;
      v45 = v66;
      v23 = v65;
      if (v66 == v65)
        goto LABEL_63;
      do
      {
        v47 = (void *)*--v45;
        v46 = v47;
        *v45 = 0;
        if (v47)
          operator delete[](v46);
      }
      while (v45 != v21);
      goto LABEL_62;
    }
  }
  return mlir::convertFromAttribute(a1 + 1, (const char *)2, v36, a3, a4) != 0;
}

uint64_t mlir::pdl::RewriteOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t DictionaryAttr;
  void *v18;
  mlir::DictionaryAttr *v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[7];

  v23[6] = *MEMORY[0x1E0C80C00];
  v20 = a1;
  v21 = v23;
  v22 = 0x300000000;
  if (*a2)
  {
    NamedAttr = mlir::Builder::getNamedAttr(&v20, (uint64_t)"name", 4, *a2);
    v6 = v5;
    v7 = v22;
    if (v22 >= HIDWORD(v22))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
      v7 = v22;
    }
    v8 = (uint64_t *)((char *)v21 + 16 * v7);
    *v8 = NamedAttr;
    v8[1] = v6;
    LODWORD(v22) = v22 + 1;
  }
  v9 = mlir::detail::DenseArrayAttrImpl<int>::get(a1, (uint64_t)(a2 + 1), 2);
  v10 = mlir::Builder::getNamedAttr(&v20, (uint64_t)"operandSegmentSizes", 19, v9);
  v12 = v11;
  v13 = v22;
  if (v22 >= HIDWORD(v22))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v22 + 1, 16);
    v13 = v22;
  }
  v14 = (uint64_t *)((char *)v21 + 16 * v13);
  *v14 = v10;
  v14[1] = v12;
  v15 = __CFADD__((_DWORD)v22, 1);
  v16 = (v22 + 1);
  LODWORD(v22) = v22 + 1;
  if (v15)
  {
    DictionaryAttr = 0;
    v18 = v21;
    if (v21 == v23)
      return DictionaryAttr;
    goto LABEL_12;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v20, (mlir::MLIRContext *)v21, v16);
  v18 = v21;
  if (v21 != v23)
LABEL_12:
    free(v18);
  return DictionaryAttr;
}

uint64_t mlir::pdl::RewriteOp::setInherentAttr(uint64_t result, _DWORD *__s1, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v5 = result;
  if (a3 == 21)
  {
    result = memcmp(__s1, "operand_segment_sizes", 0x15uLL);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    if (a3 != 19)
    {
      if (a3 == 4 && *__s1 == 1701667182)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
            v8 = a4;
          else
            v8 = 0;
          *(_QWORD *)result = v8;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      return result;
    }
    result = memcmp(__s1, "operandSegmentSizes", 0x13uLL);
    if ((_DWORD)result)
      return result;
  }
  if (a4)
  {
    result = mlir::detail::DenseArrayAttrImpl<int>::classof(a4);
    v6 = (_DWORD)result ? a4 : 0;
    v9 = v6;
    if ((_DWORD)result)
    {
      result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v9);
      if (result == 2)
      {
        result = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v9);
        if (v7)
          return (uint64_t)memmove((void *)(v5 + 8), (const void *)result, 4 * v7);
      }
    }
  }
  return result;
}

BOOL mlir::pdl::RewriteOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD **v4;
  _QWORD **v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[3];
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  void *__p;
  _QWORD **v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(a2);
  if (!mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3))
    return 0;
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) <= 5)
  {
    v17 = 0;
    if (!mlir::DialectBytecodeReader::readAttribute<mlir::detail::DenseArrayAttrImpl<int>>(a1, &v17))
      return 0;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v17) >= 3)
    {
      v15 = "size mismatch for operand/result_segment_size";
      v16 = 259;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const char **))(*(_QWORD *)a1 + 16))(v18, a1, &v15);
      if (v18[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v18);
      if (v25)
      {
        v4 = (_QWORD **)__p;
        if (__p)
        {
          v5 = v24;
          v6 = __p;
          if (v24 != __p)
          {
            do
              v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
            while (v5 != v4);
            v6 = __p;
          }
          v24 = v4;
          operator delete(v6);
        }
        v7 = v21;
        if (v21)
        {
          v8 = v22;
          v9 = v21;
          if (v22 != v21)
          {
            do
            {
              v11 = (void *)*--v8;
              v10 = v11;
              *v8 = 0;
              if (v11)
                operator delete[](v10);
            }
            while (v8 != v7);
            v9 = v21;
          }
          v22 = v7;
          operator delete(v9);
        }
        if (v19 != &v20)
          free(v19);
      }
      return 0;
    }
    v12 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
    if (v13)
      memmove(v3 + 1, v12, 4 * v13);
  }
  return (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 6
      || mlir::DialectBytecodeReader::readSparseArray<int>(a1, (_DWORD *)v3 + 2, (const char *)2);
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties]";
        v15 = 108;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[201];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::RewriteOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int *v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t i;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  BOOL v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  const void **v50;
  __int16 v51;
  int v52;
  const char *v53;
  uint64_t v54;
  _QWORD v55[3];
  void *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[96];
  void *v60;
  _QWORD *v61;
  void *__p;
  _QWORD **v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = (*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  v55[0] = v2;
  if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v3, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v55))return 0;
  v4 = *this;
  v5 = *((unsigned int *)*this + 11);
  v6 = (v5 >> 23) & 1;
  v7 = (uint64_t)&(*this)[2 * v6 + 8];
  if (!HIBYTE(*((_DWORD *)*this + 11)))
    v7 = 0;
  v8 = (const char *)*(unsigned int *)(v7 + 8);
  if ((v5 & 0x800000) == 0)
  {
    v9 = 0;
    if (v8 > 1)
      goto LABEL_6;
    goto LABEL_32;
  }
  v9 = v4[9];
  if (v8 <= 1)
  {
LABEL_32:
    if (!(_DWORD)v8)
    {
      v33 = v5 & 0x800000;
LABEL_36:
      v34 = (uint64_t)&v4[2 * v6 + 8];
      if (BYTE3(v5))
        v35 = v34;
      else
        v35 = 0;
      v36 = *(_DWORD *)(v35 + 12);
      if (v33)
      {
        v37 = v4[9];
        if (v36)
          goto LABEL_41;
      }
      else
      {
        v37 = 0;
        if (v36)
        {
LABEL_41:
          v38 = *(unsigned int *)(v35 + 8);
          v39 = (v36 + v38) - v38;
          for (i = v37 + 32 * v38 + 24;
                mlir::pdl::__mlir_ods_local_type_constraint_PDLOps0(*this, *(_QWORD *)(*(_QWORD *)i + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, v8);
                i += 32)
          {
            LODWORD(v8) = (_DWORD)v8 + 1;
            if (!--v39)
              return 1;
          }
          return 0;
        }
      }
      return 1;
    }
    if (mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3(v4, *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      v4 = *this;
      v5 = *((unsigned int *)*this + 11);
      v6 = (v5 >> 23) & 1;
      v33 = v5 & 0x800000;
      LODWORD(v8) = 1;
      goto LABEL_36;
    }
    return 0;
  }
LABEL_6:
  v50 = (const void **)"operand group starting at #";
  v51 = 259;
  mlir::OpState::emitOpError(this, &v50, (uint64_t)v55);
  if (v55[0])
  {
    v52 = 5;
    v53 = 0;
    v10 = &v52;
    v11 = (char *)v56;
    if (v57 >= v58)
    {
      v42 = v57 + 1;
      if (v56 <= &v52 && (char *)v56 + 24 * v57 > (char *)&v52)
      {
        v47 = (char *)&v52 - (_BYTE *)v56;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v42, 24);
        v11 = (char *)v56;
        v10 = (int *)((char *)v56 + v47);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v42, 24);
        v10 = &v52;
        v11 = (char *)v56;
      }
    }
    v12 = &v11[24 * v57];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    v14 = ++v57;
    if (v55[0])
    {
      v52 = 3;
      v53 = " requires 0 or 1 element, but found ";
      v54 = 36;
      v15 = &v52;
      v16 = (char *)v56;
      if (v14 >= v58)
      {
        v43 = v14 + 1;
        v44 = (char *)v56 + 24 * v14 > (char *)&v52;
        if (v56 <= &v52 && v44)
        {
          v48 = (char *)&v52 - (_BYTE *)v56;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
          v16 = (char *)v56;
          v15 = (int *)((char *)v56 + v48);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v43, 24);
          v15 = &v52;
          v16 = (char *)v56;
        }
      }
      v17 = &v16[24 * v57];
      v18 = *(_OWORD *)v15;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v17 = v18;
      v19 = ++v57;
      if (v55[0])
      {
        v52 = 5;
        v53 = v8;
        v20 = &v52;
        v21 = (char *)v56;
        if (v19 >= v58)
        {
          v45 = v19 + 1;
          v46 = (char *)v56 + 24 * v19 > (char *)&v52;
          if (v56 <= &v52 && v46)
          {
            v49 = (char *)&v52 - (_BYTE *)v56;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
            v21 = (char *)v56;
            v20 = (int *)((char *)v56 + v49);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
            v20 = &v52;
            v21 = (char *)v56;
          }
        }
        v22 = &v21[24 * v57];
        v23 = *(_OWORD *)v20;
        *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
        *(_OWORD *)v22 = v23;
        ++v57;
      }
    }
  }
  v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v55);
  if (v55[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v55);
  if (v64)
  {
    v25 = (_QWORD **)__p;
    if (__p)
    {
      v26 = v63;
      v27 = __p;
      if (v63 != __p)
      {
        do
          v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
        while (v26 != v25);
        v27 = __p;
      }
      v63 = v25;
      operator delete(v27);
    }
    v28 = v60;
    if (v60)
    {
      v29 = v61;
      v30 = v60;
      if (v61 != v60)
      {
        do
        {
          v32 = (void *)*--v29;
          v31 = v32;
          *v29 = 0;
          if (v32)
            operator delete[](v31);
        }
        while (v29 != v28);
        v30 = v60;
      }
      v61 = v28;
      operator delete(v30);
    }
    if (v56 != v59)
      free(v56);
  }
  return v24;
}

BOOL mlir::pdl::RewriteOp::parse(uint64_t a1, _QWORD *a2)
{
  mlir::Region *v4;
  unsigned __int16 v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  __int128 v9;
  mlir::NoneType **v10;
  mlir::MLIRContext *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int16 v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  mlir::MLIRContext **v21;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  mlir::Region *v28;
  void *v29;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  mlir::Region *v37;
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[128];
  void *v44;
  uint64_t v45;
  _QWORD v46[17];

  v46[16] = *MEMORY[0x1E0C80C00];
  v44 = v46;
  v45 = 0x400000000;
  v41 = v43;
  v42 = 0x400000000;
  v38 = 0;
  v39[0] = &v40;
  v39[1] = (void *)0x100000000;
  v4 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v4 = v4;
  *((_QWORD *)v4 + 1) = v4;
  *((_QWORD *)v4 + 2) = 0;
  v37 = v4;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 680))(a1, &v34, 1);
  if (v5 >= 0x100u)
  {
    if (!(_BYTE)v5)
      goto LABEL_26;
    v6 = &v34;
    v7 = (char *)v44;
    if (v45 >= HIDWORD(v45))
    {
      v31 = v45 + 1;
      if (v44 <= &v34 && (char *)v44 + 32 * v45 > (char *)&v34)
      {
        v32 = (char *)&v34 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v31, 32);
        v7 = (char *)v44;
        v6 = (uint64_t *)((char *)v44 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v46, v31, 32);
        v6 = &v34;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[32 * v45];
    v9 = *((_OWORD *)v6 + 1);
    *(_OWORD *)v8 = *(_OWORD *)v6;
    *((_OWORD *)v8 + 1) = v9;
    LODWORD(v45) = v45 + 1;
  }
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "with", 4))
  {
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  v10 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v12 = mlir::NoneType::get(*v10, v11);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(a1, &v38, v12))
  {
LABEL_26:
    v16 = 0;
    goto LABEL_27;
  }
  if (v38)
  {
    v13 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(a2);
    *v13 = v38;
  }
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1))
    goto LABEL_15;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v41, 0, 1, 0xFFFFFFFFLL)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v39)|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1))
  {
    goto LABEL_26;
  }
LABEL_16:
  v15 = (*(uint64_t (**)(uint64_t, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 752))(a1, v4, 0, 0, 0);
  if (v15 < 0x100u || (v16 = 0, (_BYTE)v15))
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 464))(a1, a2 + 14))
    {
      v17 = a2[1];
      v34 = a1;
      v35 = &v33;
      v36 = a2;
      v18 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v17 + 96));
      if (!v18
        || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v18, (const void **)"name", (const char *)4, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::RewriteOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v34))
      {
        mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v37);
        v19 = v45;
        v20 = v42;
        *(_QWORD *)(mlir::OperationState::getOrAddProperties<mlir::pdl::detail::RewriteOpGenericAdaptorBase::Properties>(a2)
                  + 8) = v19 | (v20 << 32);
        v21 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
        TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v21);
        SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationType,void>::id);
        v24 = (uint64_t)(a2 + 2);
        if (!(_DWORD)v45)
        {
LABEL_25:
          v16 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v41, (uint64_t)v39, v14, v24) != 0;
          goto LABEL_27;
        }
        v25 = SingletonImpl;
        v26 = (char *)v44;
        v27 = 32 * v45;
        while ((*(unsigned __int8 (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v26, v25, v24))
        {
          v26 += 32;
          v27 -= 32;
          if (!v27)
            goto LABEL_25;
        }
      }
    }
    goto LABEL_26;
  }
LABEL_27:
  v28 = v37;
  v37 = 0;
  if (v28)
  {
    mlir::Region::~Region(v28);
    operator delete(v29);
  }
  if (v39[0] != &v40)
    free(v39[0]);
  if (v41 != v43)
    free(v41);
  if (v44 != v46)
    free(v44);
  return v16;
}

void mlir::pdl::RewriteOp::print(unsigned int **this, mlir::OpAsmPrinter *a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _DWORD *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  unint64_t v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  llvm::raw_ostream *v35;
  _BYTE *v36;
  llvm::raw_ostream *v37;
  _BYTE *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  llvm::raw_ostream *v44;
  _BYTE *v45;
  unsigned int *v46;
  unint64_t v47;
  _QWORD *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  mlir::ArrayAttr *v51;
  uint64_t Value;
  uint64_t v53;
  uint64_t v54[2];
  _QWORD v55[2];
  void *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = *this;
  v5 = (*this)[11];
  v6 = (v5 >> 23) & 1;
  v7 = (uint64_t)&(*this)[4 * v6 + 16];
  if (!HIBYTE((*this)[11]))
    v7 = 0;
  v8 = *(_DWORD *)(v7 + 8);
  if ((v5 & 0x800000) != 0)
  {
    v9 = *((_QWORD *)v4 + 9);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    v9 = 0;
    if (!v8)
      goto LABEL_15;
  }
  if (*(_QWORD *)(v9 + 24))
  {
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
    {
      llvm::raw_ostream::write(v10, 32);
    }
    else
    {
      *((_QWORD *)v10 + 4) = v11 + 1;
      *v11 = 32;
    }
    v4 = *this;
    v12 = (*this)[11];
    v6 = (v12 >> 23) & 1;
    v13 = (uint64_t)&(*this)[4 * v6 + 16];
    if (!HIBYTE((*this)[11]))
      v13 = 0;
    v14 = *(_DWORD *)(v13 + 8);
    if ((v12 & 0x800000) != 0)
    {
      v15 = *((_QWORD *)v4 + 9);
      if (!v14)
        goto LABEL_15;
    }
    else
    {
      v15 = 0;
      if (!v14)
        goto LABEL_15;
    }
    if (*(_QWORD *)(v15 + 24))
    {
      (*(void (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 160))(a2);
      v4 = *this;
      v6 = ((unint64_t)(*this)[11] >> 23) & 1;
    }
  }
LABEL_15:
  if (!*(_QWORD *)&v4[4 * v6 + 16])
    goto LABEL_52;
  v16 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v17 = (_BYTE *)*((_QWORD *)v16 + 4);
  if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
  {
    llvm::raw_ostream::write(v16, 32);
  }
  else
  {
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = 32;
  }
  v18 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v19 = (_DWORD *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 3uLL)
  {
    *v19 = 1752459639;
    *((_QWORD *)v18 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v18, "with", 4uLL);
  }
  v20 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, 32);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v21 + 1;
    *v21 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 16]);
  v22 = (unint64_t)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 16];
  if (!HIBYTE((*this)[11]))
    v22 = 0;
  if (!*(_DWORD *)(v22 + 12))
  {
LABEL_52:
    v46 = *this;
    v47 = (*this)[11];
    if ((v47 & 0x7FFFFF) != 0)
      goto LABEL_53;
    goto LABEL_56;
  }
  v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if (*((_BYTE **)v23 + 3) == v24)
  {
    llvm::raw_ostream::write(v23, "(", 1uLL);
  }
  else
  {
    *v24 = 40;
    ++*((_QWORD *)v23 + 4);
  }
  v25 = (*this)[11];
  if (HIBYTE((*this)[11]))
    v26 = (uint64_t)&(*this)[4 * ((v25 >> 23) & 1) + 16];
  else
    v26 = 0;
  v27 = *(unsigned int *)(v26 + 8);
  v28 = *(_DWORD *)(v26 + 12);
  if ((v25 & 0x800000) != 0)
    v29 = *((_QWORD *)*this + 9);
  else
    v29 = 0;
  v30 = v29 + 32 * v27;
  v31 = (v28 + v27) - v27;
  v32 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v56 = ", ";
  v57 = 2;
  llvm::interleave<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},void llvm::interleave<llvm::iterator_range<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::raw_ostream,mlir::Value>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator const&,llvm::raw_ostream &,void mlir::OpAsmPrinter::printOperands<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>(llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator,llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator)::{lambda(mlir::Value)#1},llvm::StringRef const&)::{lambda(void)#1},void>(v30, 0, v30, v31, (uint64_t)a2, v32, (uint64_t)&v56);
  v33 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v34 = (_BYTE *)*((_QWORD *)v33 + 4);
  if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
  {
    llvm::raw_ostream::write(v33, 32);
  }
  else
  {
    *((_QWORD *)v33 + 4) = v34 + 1;
    *v34 = 32;
  }
  v35 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v36 = (_BYTE *)*((_QWORD *)v35 + 4);
  if (*((_BYTE **)v35 + 3) == v36)
  {
    llvm::raw_ostream::write(v35, ":", 1uLL);
  }
  else
  {
    *v36 = 58;
    ++*((_QWORD *)v35 + 4);
  }
  v37 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v38 = (_BYTE *)*((_QWORD *)v37 + 4);
  if ((unint64_t)v38 >= *((_QWORD *)v37 + 3))
  {
    llvm::raw_ostream::write(v37, 32);
  }
  else
  {
    *((_QWORD *)v37 + 4) = v38 + 1;
    *v38 = 32;
  }
  v39 = (*this)[11];
  if (HIBYTE((*this)[11]))
    v40 = (uint64_t)&(*this)[4 * ((v39 >> 23) & 1) + 16];
  else
    v40 = 0;
  v41 = *(unsigned int *)(v40 + 8);
  v42 = *(_DWORD *)(v40 + 12);
  if ((v39 & 0x800000) != 0)
    v43 = *((_QWORD *)*this + 9);
  else
    v43 = 0;
  v54[0] = v43 + 32 * v41;
  v54[1] = (v42 + v41) - v41;
  mlir::OperandRange::getTypes(v54, (uint64_t *)&v56);
  v55[0] = ", ";
  v55[1] = 2;
  llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>((uint64_t)v56, v57, (uint64_t)v58, v59, (uint64_t)a2, (uint64_t)a2, (uint64_t)v55);
  v44 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v45 = (_BYTE *)*((_QWORD *)v44 + 4);
  if (*((_BYTE **)v44 + 3) != v45)
  {
    *v45 = 41;
    ++*((_QWORD *)v44 + 4);
    goto LABEL_52;
  }
  llvm::raw_ostream::write(v44, ")", 1uLL);
  v46 = *this;
  v47 = (*this)[11];
  if ((v47 & 0x7FFFFF) != 0)
  {
LABEL_53:
    v48 = (_QWORD *)((((unint64_t)&v46[4 * ((v47 >> 23) & 1) + 17] + ((v47 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * v46[10]);
    if ((_QWORD *)*v48 == v48)
      goto LABEL_61;
    goto LABEL_57;
  }
LABEL_56:
  if (!MEMORY[0])
    goto LABEL_61;
LABEL_57:
  v49 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v50 = (_BYTE *)*((_QWORD *)v49 + 4);
  if ((unint64_t)v50 >= *((_QWORD *)v49 + 3))
  {
    llvm::raw_ostream::write(v49, 32);
  }
  else
  {
    *((_QWORD *)v49 + 4) = v50 + 1;
    *v50 = 32;
  }
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 224))(a2, (((unint64_t)&(*this)[4 * (((unint64_t)(*this)[11] >> 23) & 1) + 17]+ (((unint64_t)(*this)[11] >> 21) & 0x7F8)+ 3) & 0xFFFFFFFFFFFFFFF8)+ 32 * (*this)[10], 1, 1, 0);
  v46 = *this;
  LODWORD(v47) = (*this)[11];
LABEL_61:
  v56 = &v58;
  v58 = "operandSegmentSizes";
  v59 = 19;
  v60 = "name";
  v61 = 4;
  v57 = 0x200000002;
  if (BYTE3(v47))
  {
    v55[0] = mlir::Operation::getAttrDictionary((mlir::Operation *)v46);
    v51 = (mlir::ArrayAttr *)v55;
  }
  else
  {
    v51 = (mlir::ArrayAttr *)(v46 + 14);
  }
  Value = mlir::ArrayAttr::getValue(v51);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 200))(a2, Value, v53, v56, v57);
  if (v56 != &v58)
    free(v56);
}

uint64_t mlir::pdl::TypeOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[3];
  void *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[96];
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD **v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      v44 = 3;
      v45 = "expected DictionaryAttr to set properties";
      v46 = 41;
      v26 = &v44;
      v27 = (char *)v48;
      if (v49 >= v50)
      {
        v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v40 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v27 = (char *)v48;
          v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v26 = &v44;
          v27 = (char *)v48;
        }
      }
      v28 = &v27[24 * v49];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
    if (!v56)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v55;
      v32 = __p;
      if (v55 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v55 = v30;
      operator delete(v32);
    }
    v21 = v52;
    if (!v52)
      goto LABEL_43;
    v33 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "constantType", 0xCuLL);
  if (!v8)
    return 1;
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    v44 = 3;
    v46 = 57;
    v10 = &v44;
    v11 = (char *)v48;
    if (v49 >= v50)
    {
      v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        v41 = (char *)&v44 - (_BYTE *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v11 = (char *)v48;
        v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v10 = &v44;
        v11 = (char *)v48;
      }
    }
    v12 = &v11[24 * v49];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v49;
    if (v47[0])
    {
      v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      v15 = (char *)v48;
      if (v49 >= v50)
      {
        v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v42 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v15 = (char *)v48;
          v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v14 = &v44;
          v15 = (char *)v48;
        }
      }
      v16 = &v15[24 * v49];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
  }
  if (!v56)
    return 0;
  v18 = (_QWORD **)__p;
  if (__p)
  {
    v19 = v55;
    v20 = __p;
    if (v55 != __p)
    {
      do
        v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      v20 = __p;
    }
    v55 = v18;
    operator delete(v20);
  }
  v21 = v52;
  if (v52)
  {
    v22 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
LABEL_41:
    v23 = v52;
LABEL_42:
    v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51)
    free(v48);
  return 0;
}

uint64_t mlir::pdl::TypeOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"constantType", 12, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(uint64_t a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v7;
  char *v8;
  char *v9;
  __int128 v10;
  const void ***v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  const void **v29;
  const char *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE v38[96];
  void *v39;
  _QWORD *v40;
  void *__p;
  _QWORD **v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    v33 = a1;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v33);
    return 1;
  }
  a4(&v33, a5);
  if (v33)
  {
    LODWORD(v29) = 3;
    v30 = "attribute '";
    v31 = 11;
    v7 = &v29;
    v8 = (char *)v35;
    if (v36 >= v37)
    {
      v25 = v36 + 1;
      if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
      {
        v27 = (char *)&v29 - (_BYTE *)v35;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v8 = (char *)v35;
        v7 = (const void ***)((char *)v35 + v27);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v25, 24);
        v7 = &v29;
        v8 = (char *)v35;
      }
    }
    v9 = &v8[24 * v36];
    v10 = *(_OWORD *)v7;
    *((_QWORD *)v9 + 2) = v7[2];
    *(_OWORD *)v9 = v10;
    ++v36;
    if (v33)
    {
      v32 = 261;
      v29 = a2;
      v30 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v34, &v29);
      if (v33)
      {
        LODWORD(v29) = 3;
        v30 = "' failed to satisfy constraint: any type attribute";
        v31 = 50;
        v11 = &v29;
        v12 = (char *)v35;
        if (v36 >= v37)
        {
          v26 = v36 + 1;
          if (v35 <= &v29 && (char *)v35 + 24 * v36 > (char *)&v29)
          {
            v28 = (char *)&v29 - (_BYTE *)v35;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v12 = (char *)v35;
            v11 = (const void ***)((char *)v35 + v28);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v38, v26, 24);
            v11 = &v29;
            v12 = (char *)v35;
          }
        }
        v13 = &v12[24 * v36];
        v14 = *(_OWORD *)v11;
        *((_QWORD *)v13 + 2) = v11[2];
        *(_OWORD *)v13 = v14;
        ++v36;
      }
    }
  }
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v33);
  if (v33)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
  if (v43)
  {
    v16 = (_QWORD **)__p;
    if (__p)
    {
      v17 = v42;
      v18 = __p;
      if (v42 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v42 = v16;
      operator delete(v18);
    }
    v19 = v39;
    if (v39)
    {
      v20 = v40;
      v21 = v39;
      if (v40 != v39)
      {
        do
        {
          v23 = (void *)*--v20;
          v22 = v23;
          *v20 = 0;
          if (v23)
            operator delete[](v22);
        }
        while (v20 != v19);
        v21 = v39;
      }
      v40 = v19;
      operator delete(v21);
    }
    if (v35 != v38)
      free(v35);
  }
  return v15;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties]";
        v15 = 105;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[203];
    return a1[32];
  }
  return result;
}

uint64_t mlir::DialectBytecodeReader::readOptionalAttribute<mlir::TypeAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 56))(a1, &v39))
    return 0;
  v4 = v39;
  if (!v39)
    return 1;
  v5 = *(void **)(*(_QWORD *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    v4 = 0;
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v6 = &v40;
    v7 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v7 = (char *)v46;
        v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v6 = &v40;
        v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::TypeAttr]";
  v41 = 64;
  v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10)
      v11 = v10;
    else
      v11 = v41;
    v12 = 18;
    if (v41 - v11 < 0x12)
      v12 = v41 - v11;
    v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1)
      --v13;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49)
      free(v46);
  }
  return v22;
}

uint64_t mlir::pdl::TypeOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  mlir::NoneType **v6;
  mlir::MLIRContext *v7;
  uint64_t v8;
  _QWORD *v9;
  mlir::MLIRContext **v10;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v17 = 0;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  v15[0] = a1;
  v15[1] = &v16;
  v15[2] = a2;
  v5 = mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v4 + 96));
  if (v5)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v5, (const void **)"constantType", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::TypeOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v15))return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    v6 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v8 = mlir::NoneType::get(*v6, v7);
    if (mlir::AsmParser::parseAttribute<mlir::TypeAttr>(a1, &v17, v8))
    {
      if (v17)
      {
        v9 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>((_QWORD *)a2);
        *v9 = v17;
      }
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  v13 = *(unsigned int *)(a2 + 72);
  if (v13 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v13) = SingletonImpl;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl::TypeOp::print(mlir::pdl::TypeOp *this, mlir::OpAsmPrinter *a2)
{
  _BYTE *v4;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unint64_t AttrDictionary;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v17[0] = "constantType";
  v17[1] = 12;
  v16 = 0x200000001;
  v4 = *(_BYTE **)this;
  if (v4[47])
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v7, v15, v16);
  if (*(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64))
  {
    v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 32;
    }
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if (*((_BYTE **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, ":", 1uLL);
    }
    else
    {
      *v11 = 58;
      ++*((_QWORD *)v10 + 4);
    }
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64));
  }
  if (v15 != v17)
    free(v15);
}

uint64_t mlir::pdl::TypesOp::setPropertiesFromAttr(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  int *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  int *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[3];
  void *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[96];
  void *v52;
  _QWORD *v53;
  void *__p;
  _QWORD **v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
    v6 = a2;
  else
    v6 = 0;
  v43 = v6;
  if (!v6)
  {
    a3(v47, a4);
    if (v47[0])
    {
      v44 = 3;
      v45 = "expected DictionaryAttr to set properties";
      v46 = 41;
      v26 = &v44;
      v27 = (char *)v48;
      if (v49 >= v50)
      {
        v37 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v40 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v27 = (char *)v48;
          v26 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v37, 24);
          v26 = &v44;
          v27 = (char *)v48;
        }
      }
      v28 = &v27[24 * v49];
      v29 = *(_OWORD *)v26;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v26 + 2);
      *(_OWORD *)v28 = v29;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
    if (!v56)
      return 0;
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v55;
      v32 = __p;
      if (v55 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v55 = v30;
      operator delete(v32);
    }
    v21 = v52;
    if (!v52)
      goto LABEL_43;
    v33 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v35 = (void *)*--v33;
      v34 = v35;
      *v33 = 0;
      if (v35)
        operator delete[](v34);
    }
    while (v33 != v21);
    goto LABEL_41;
  }
  v8 = mlir::DictionaryAttr::get((uint64_t)&v43, "constantTypes", 0xDuLL);
  if (!v8)
    return 1;
  v9 = v8;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    *a1 = v8;
    return 1;
  }
  a3(v47, a4);
  if (v47[0])
  {
    v44 = 3;
    v46 = 58;
    v10 = &v44;
    v11 = (char *)v48;
    if (v49 >= v50)
    {
      v38 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        v41 = (char *)&v44 - (_BYTE *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v11 = (char *)v48;
        v10 = (int *)((char *)v48 + v41);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
        v10 = &v44;
        v11 = (char *)v48;
      }
    }
    v12 = &v11[24 * v49];
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    ++v49;
    if (v47[0])
    {
      v14 = &v44;
      mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v44, v9);
      v15 = (char *)v48;
      if (v49 >= v50)
      {
        v39 = v49 + 1;
        if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
        {
          v42 = (char *)&v44 - (_BYTE *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v15 = (char *)v48;
          v14 = (int *)((char *)v48 + v42);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v39, 24);
          v14 = &v44;
          v15 = (char *)v48;
        }
      }
      v16 = &v15[24 * v49];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v16 = v17;
      ++v49;
      if (v47[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
    }
  }
  if (!v56)
    return 0;
  v18 = (_QWORD **)__p;
  if (__p)
  {
    v19 = v55;
    v20 = __p;
    if (v55 != __p)
    {
      do
        v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
      while (v19 != v18);
      v20 = __p;
    }
    v55 = v18;
    operator delete(v20);
  }
  v21 = v52;
  if (v52)
  {
    v22 = v53;
    v23 = v52;
    if (v53 == v52)
      goto LABEL_42;
    do
    {
      v25 = (void *)*--v22;
      v24 = v25;
      *v22 = 0;
      if (v25)
        operator delete[](v24);
    }
    while (v22 != v21);
LABEL_41:
    v23 = v52;
LABEL_42:
    v53 = v21;
    operator delete(v23);
  }
LABEL_43:
  if (v48 != v51)
    free(v48);
  return 0;
}

uint64_t mlir::pdl::TypesOp::getPropertiesAsAttr(mlir::DictionaryAttr *a1, uint64_t *a2)
{
  uint64_t NamedAttr;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t DictionaryAttr;
  mlir::DictionaryAttr *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = v15;
  v14 = 0x300000000;
  if (!*a2)
    return 0;
  NamedAttr = mlir::Builder::getNamedAttr(&v12, (uint64_t)"constantTypes", 13, *a2);
  v4 = v3;
  v5 = v14;
  if (v14 >= HIDWORD(v14))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, v15, v14 + 1, 16);
    v5 = v14;
  }
  v6 = (uint64_t *)((char *)v13 + 16 * v5);
  *v6 = NamedAttr;
  v6[1] = v4;
  v7 = v13;
  v8 = __CFADD__((_DWORD)v14, 1);
  v9 = (v14 + 1);
  LODWORD(v14) = v14 + 1;
  if (v8)
  {
    DictionaryAttr = 0;
    if (v13 == v15)
      return DictionaryAttr;
    goto LABEL_10;
  }
  DictionaryAttr = mlir::Builder::getDictionaryAttr(&v12, (mlir::MLIRContext *)v13, v9);
  v7 = v13;
  if (v13 != v15)
LABEL_10:
    free(v7);
  return DictionaryAttr;
}

uint64_t mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(const void **a1, const void **a2, const char *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void ***v9;
  char *v10;
  char *v11;
  __int128 v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t Value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  const void **v35;
  const char *v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 1;
  if (*((_UNKNOWN **)*a1 + 17) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    v35 = a1;
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    v27 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v35);
    v29 = v27 + 8 * v28;
    if (v29 != Value)
    {
      while (*(_QWORD *)Value
           && *(_UNKNOWN **)(**(_QWORD **)Value + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
      {
        v39 = *(_QWORD *)Value;
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39);
        Value += 8;
        if (Value == v29)
          return 1;
      }
      goto LABEL_3;
    }
    return 1;
  }
LABEL_3:
  a4(&v39, a5);
  if (v39)
  {
    LODWORD(v35) = 3;
    v36 = "attribute '";
    v37 = 11;
    v9 = &v35;
    v10 = (char *)v41;
    if (v42 >= v43)
    {
      v31 = v42 + 1;
      if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
      {
        v33 = (char *)&v35 - (_BYTE *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v10 = (char *)v41;
        v9 = (const void ***)((char *)v41 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v31, 24);
        v9 = &v35;
        v10 = (char *)v41;
      }
    }
    v11 = &v10[24 * v42];
    v12 = *(_OWORD *)v9;
    *((_QWORD *)v11 + 2) = v9[2];
    *(_OWORD *)v11 = v12;
    ++v42;
    if (v39)
    {
      v38 = 261;
      v35 = a2;
      v36 = a3;
      mlir::Diagnostic::operator<<((uint64_t)&v40, &v35);
      if (v39)
      {
        LODWORD(v35) = 3;
        v36 = "' failed to satisfy constraint: type array attribute";
        v37 = 52;
        v13 = &v35;
        v14 = (char *)v41;
        if (v42 >= v43)
        {
          v32 = v42 + 1;
          if (v41 <= &v35 && (char *)v41 + 24 * v42 > (char *)&v35)
          {
            v34 = (char *)&v35 - (_BYTE *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v14 = (char *)v41;
            v13 = (const void ***)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v32, 24);
            v13 = &v35;
            v14 = (char *)v41;
          }
        }
        v15 = &v14[24 * v42];
        v16 = *(_OWORD *)v13;
        *((_QWORD *)v15 + 2) = v13[2];
        *(_OWORD *)v15 = v16;
        ++v42;
      }
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v39);
  if (v39)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  if (v49)
  {
    v18 = (_QWORD **)__p;
    if (__p)
    {
      v19 = v48;
      v20 = __p;
      if (v48 != __p)
      {
        do
          v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        v20 = __p;
      }
      v48 = v18;
      operator delete(v20);
    }
    v21 = v45;
    if (v45)
    {
      v22 = v46;
      v23 = v45;
      if (v46 != v45)
      {
        do
        {
          v25 = (void *)*--v22;
          v24 = v25;
          *v22 = 0;
          if (v25)
            operator delete[](v24);
        }
        while (v22 != v21);
        v23 = v45;
      }
      v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44)
      free(v41);
  }
  return v17;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  __guard *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(8uLL);
    *v3 = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    if ((v4 & 1) == 0)
    {
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties]";
        v15 = 106;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      }
    }
    a1[33] = v5[205];
    return a1[32];
  }
  return result;
}

uint64_t mlir::pdl::TypesOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void **v5;
  mlir::NoneType **v6;
  mlir::MLIRContext *v7;
  uint64_t v8;
  _QWORD *v9;
  mlir::MLIRContext **v10;
  uint64_t *TypeUniquer;
  uint64_t SingletonImpl;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v18 = 0;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  v16[0] = a1;
  v16[1] = &v17;
  v16[2] = a2;
  v5 = (const void **)mlir::NamedAttrList::get(a2 + 112, **(_QWORD **)(v4 + 96));
  if (v5)
  {
    if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v5, (const void **)"constantTypes", (const char *)0xD, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::TypesOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v16))return 0;
  }
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
  {
    v6 = (mlir::NoneType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v8 = mlir::NoneType::get(*v6, v7);
    if (mlir::AsmParser::parseAttribute<mlir::ArrayAttr>(a1, &v18, v8))
    {
      if (v18)
      {
        v9 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>((_QWORD *)a2);
        *v9 = v18;
      }
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  v10 = (mlir::MLIRContext **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*v10);
  SingletonImpl = mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeType,void>::id);
  v13 = mlir::pdl::RangeType::get(SingletonImpl);
  v14 = *(unsigned int *)(a2 + 72);
  if (v14 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v14) = v13;
  ++*(_DWORD *)(a2 + 72);
  return 1;
}

void mlir::pdl::TypesOp::print(mlir::pdl::TypesOp *this, mlir::OpAsmPrinter *a2)
{
  _BYTE *v4;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t Value;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unint64_t AttrDictionary;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];

  v17[4] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v17[0] = "constantTypes";
  v17[1] = 13;
  v16 = 0x200000001;
  v4 = *(_BYTE **)this;
  if (v4[47])
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v4 + 56);
  }
  Value = mlir::ArrayAttr::getValue(p_AttrDictionary);
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v7, v15, v16);
  if (*(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64))
  {
    v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      llvm::raw_ostream::write(v8, 32);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 32;
    }
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if (*((_BYTE **)v10 + 3) == v11)
    {
      llvm::raw_ostream::write(v10, ":", 1uLL);
    }
    else
    {
      *v11 = 58;
      ++*((_QWORD *)v10 + 4);
    }
    v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
    {
      llvm::raw_ostream::write(v12, 32);
    }
    else
    {
      *((_QWORD *)v12 + 4) = v13 + 1;
      *v13 = 32;
    }
    (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64));
  }
  if (v15 != v17)
    free(v15);
}

uint64_t hasBindingUse(mlir::Operation *a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  mlir::Operation *v9;
  int *v10;
  BOOL v11;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15[4];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19[2];

  v2 = *((unsigned int *)a1 + 9);
  v3 = (char *)a1 - 16;
  if ((_DWORD)v2)
    v4 = (char *)a1 - 16;
  else
    v4 = 0;
  *(_QWORD *)&v13[0] = v4;
  *((_QWORD *)&v13[0] + 1) = v2;
  mlir::ResultRange::use_begin((uint64_t *)v13, (uint64_t *)v17);
  v5 = *((unsigned int *)a1 + 9);
  if ((_DWORD)v5)
    v6 = (uint64_t)v3;
  else
    v6 = 0;
  v19[0] = v6;
  v19[1] = v5;
  mlir::ResultRange::use_end(v19, v15);
  v7 = v18;
  v14 = v18;
  v13[0] = v17[0];
  v13[1] = v17[1];
  v8 = v16;
  if (v18 == v16)
    return 0;
  while (1)
  {
    v9 = *(mlir::Operation **)(v7 + 16);
    v10 = *(int **)(*((_QWORD *)v9 + 6) + 16);
    v11 = v10 == &mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id
       || v10 == (int *)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id;
    if (!v11 || (hasBindingUse(v9) & 1) != 0)
      break;
    mlir::ResultRange::UseIterator::operator++((uint64_t *)v17);
    v7 = v18;
    if (v18 == v8)
      return 0;
  }
  return 1;
}

uint64_t mlir::Diagnostic::append<char const(&)[56],mlir::RegisteredOperationName &,char const(&)[42]>(uint64_t a1, char *__s, uint64_t *a3, const char *a4)
{
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  char *v20;
  size_t v21;

  v8 = strlen(__s);
  v9 = a1 + 16;
  v10 = *(_QWORD *)(a1 + 16);
  v19 = 3;
  v20 = __s;
  v21 = v8;
  v11 = *(unsigned int *)(a1 + 24);
  v12 = &v19;
  if (v11 >= *(_DWORD *)(a1 + 28))
  {
    v16 = v11 + 1;
    v17 = v10 + 24 * v11 > (unint64_t)&v19;
    if (v10 <= (unint64_t)&v19 && v17)
    {
      v18 = (char *)&v19 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = (int *)&v18[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v16, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v12 = &v19;
    }
  }
  v13 = v10 + 24 * *(unsigned int *)(a1 + 24);
  v14 = *(_OWORD *)v12;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
  *(_OWORD *)v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<mlir::RegisteredOperationName &,char const(&)[42]>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<mlir::RegisteredOperationName &,char const(&)[42]>(uint64_t a1, uint64_t *a2, const char *a3)
{
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  int v16;
  const char *v17;
  size_t v18;

  mlir::Diagnostic::operator<<(a1, *a2);
  v5 = strlen(a3);
  v6 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  v16 = 3;
  v17 = a3;
  v18 = v5;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v8 + 1;
    v14 = v7 + 24 * v8 > (unint64_t)&v16;
    if (v7 <= (unint64_t)&v16 && v14)
    {
      v15 = (char *)&v16 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v13, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v15[v7];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6, (void *)(a1 + 32), v13, 24);
      v7 = *(_QWORD *)(a1 + 16);
      v9 = &v16;
    }
  }
  v10 = v7 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t visit(mlir::Operation *,llvm::DenseSet<mlir::Operation *,llvm::DenseMapInfo<mlir::Operation *,void>> &)::$_1::operator()<mlir::pdl::ResultsOp>(_QWORD *a1, uint64_t a2)
{
  uint64_t DefiningOp;
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v5);
  return visit(DefiningOp, *a1);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t llvm::function_ref<mlir::ParseResult ()(void)>::callback_fn<parseOperationOpAttributes(mlir::OpAsmParser &,llvm::SmallVectorImpl<mlir::OpAsmParser::UnresolvedOperand> &,mlir::ArrayAttr &)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _OWORD *v9;
  __int128 v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;

  v18 = 0;
  memset(v17, 0, 24);
  if (!mlir::AsmParser::parseAttribute<mlir::StringAttr>(*a1, &v18, 0)
    || !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)*a1 + 136))(*a1)
    || !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)*a1 + 672))(*a1, v17, 1))
  {
    return 0;
  }
  v2 = a1[1];
  v3 = v18;
  v4 = *(unsigned int *)(v2 + 8);
  if (v4 >= *(_DWORD *)(v2 + 12))
  {
    v15 = v18;
    v16 = a1[1];
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2, (void *)(v2 + 16), v4 + 1, 8);
    v3 = v15;
    v2 = v16;
    LODWORD(v4) = *(_DWORD *)(v16 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v2 + 8 * v4) = v3;
  ++*(_DWORD *)(v2 + 8);
  v5 = a1[2];
  v6 = *(unsigned int *)(v5 + 8);
  v7 = *(_QWORD *)v5;
  v8 = (char *)v17;
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v12 = v6 + 1;
    v13 = v7 + 32 * v6 > (unint64_t)v17;
    if (v7 <= (unint64_t)v17 && v13)
    {
      v14 = (char *)v17 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v12, 32);
      v7 = *(_QWORD *)v5;
      v8 = &v14[*(_QWORD *)v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v12, 32);
      v7 = *(_QWORD *)v5;
      v8 = (char *)v17;
    }
  }
  v9 = (_OWORD *)(v7 + 32 * *(unsigned int *)(v5 + 8));
  v10 = *((_OWORD *)v8 + 1);
  *v9 = *(_OWORD *)v8;
  v9[1] = v10;
  ++*(_DWORD *)(v5 + 8);
  return 1;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeConstraintOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.apply_native_constraint", 27, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ApplyNativeConstraintOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39798;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::ApplyNativeConstraintOp::getAttributeNames(void)::attrNames, 2);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::ApplyNativeRewriteOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.apply_native_rewrite", 24, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ApplyNativeRewriteOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E396D0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::ApplyNativeRewriteOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::AttributeOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.attribute", 13, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::AttributeOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39540;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::AttributeOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::EraseOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.erase", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::EraseOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39928;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::OperandOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.operand", 11, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperandOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39C48;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::OperandsOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.operands", 12, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperandsOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39478;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::OperationOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.operation", 13, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::OperationOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39608;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::OperationOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::RangeOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::RangeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::RangeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.range", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::RangeOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E399F0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::ReplaceOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.replace", 11, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ReplaceOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39DD8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::ReplaceOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::RewriteOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.rewrite", 11, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39F68;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::RewriteOp::getAttributeNames(void)::attrNames, 2);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::TypeOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.type", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypeOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39860;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::TypeOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::pdl::TypesOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"pdl.types", 9, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::TypesOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &unk_1E0E39AB8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::pdl::TypesOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::pdl::ApplyNativeConstraintOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44)))
    v7 = 0;
  if (a4 == 4)
  {
    if (*(_DWORD *)a3 != 1701667182)
      return 0;
    return v7[1];
  }
  else
  {
    if (a4 != 9)
      return 0;
    if (*(_QWORD *)a3 != 0x65746167654E7369 || *(_BYTE *)(a3 + 8) != 100)
      return 0;
    return *v7;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v11);
  if (v7 == 4)
  {
    if (*(_DWORD *)result == 1701667182)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
          v9 = a4;
        else
          v9 = 0;
        v5[1] = v9;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 9 && *(_QWORD *)result == 0x65746167654E7369 && *(_BYTE *)(result + 8) == 100)
  {
    if (a4)
    {
      result = mlir::BoolAttr::classof(a4);
      if ((_DWORD)result)
        v10 = a4;
      else
        v10 = 0;
      *v5 = v10;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  if (*v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"isNegated", 9, *v5);
  v6 = v5[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v6);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _BOOL8 result;

  v9 = (_QWORD *)mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  result = 0;
  if (!v9
    || mlir::memref::__mlir_ods_local_attr_constraint_MemRefOps2(v9, (const void **)"isNegated", (const char *)9, a4, a5))
  {
    v10 = mlir::NamedAttrList::get(a3, *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8));
    if (!v10
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v10, (const void **)"name", (const char *)4, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getOpPropertyByteSize()
{
  return 16;
}

mlir::BoolAttr *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  mlir::BoolAttr *result;
  mlir::BoolAttr *v6;

  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  v6 = *(mlir::BoolAttr **)(a2 + 8);
  result = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v6);
  v6 = result;
  if (!*(_QWORD *)a3)
  {
    result = (mlir::BoolAttr *)mlir::Builder::getBoolAttr(&v6, 0);
    *(_QWORD *)a3 = result;
  }
  return result;
}

mlir::BoolAttr *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::populateDefaultProperties(uint64_t a1, uint64_t a2, mlir::BoolAttr **a3)
{
  mlir::BoolAttr *result;
  mlir::BoolAttr *v5;

  v5 = *(mlir::BoolAttr **)(a2 + 8);
  result = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v5);
  v5 = result;
  if (!*a3)
  {
    result = (mlir::BoolAttr *)mlir::Builder::getBoolAttr(&v5, 0);
    *a3 = result;
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeConstraintOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::ApplyNativeConstraintOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeConstraintOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeConstraintOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::BoolAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeConstraintOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *v4);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v4[1]);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __guard v92;
  __guard v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v120 = 83;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v120 = 88;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[198];
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      v120 = 109;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[137];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v120 = 89;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || p_vtable[481] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::ApplyNativeConstraintOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t *)a1))
    return 0;
  v6 = a1;
  if (!mlir::pdl::ApplyNativeConstraintOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::pdl::ApplyNativeConstraintOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "pdl.pattern";
  v37[1] = 11;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t mlir::Op<mlir::pdl::ApplyNativeConstraintOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ApplyNativeRewriteOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 4 && *a3 == 1701667182)
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

_DWORD *mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 4 && *result == 1701667182)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
        v8 = a4;
      else
        v8 = 0;
      *v5 = v8;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v7, (const void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ApplyNativeRewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::memref::GetGlobalOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ApplyNativeRewriteOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ApplyNativeRewriteOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ApplyNativeRewriteOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  __guard *v5;
  __guard v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __guard v92;
  __guard v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __guard v101;
  __guard v102;
  __guard v103;
  __guard v104;
  __guard v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      v120 = 87;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[299];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v120 = 88;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[198];
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      v120 = 109;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[143];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v120 = 89;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || p_vtable[481] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::ApplyNativeRewriteOp::print((mlir::pdl::ApplyNativeRewriteOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::OpTrait::impl *v5;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3))
    return 0;
  if (!mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t *)a1))
    return 0;
  v5 = a1;
  if (!mlir::pdl::ApplyNativeRewriteOp::verifyInvariantsImpl((uint64_t **)&v5))
    return 0;
  v5 = a1;
  return mlir::pdl::ApplyNativeRewriteOp::verify((uint64_t **)&v5) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  const char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const char **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  char *v30;
  const char *v31;
  const void **v32;
  __int16 v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[3];
  void *v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE v42[96];
  void *v43;
  _QWORD *v44;
  void *__p;
  _QWORD **v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::pdl::RewriteOp,void>::id)
        return 1;
    }
  }
  v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    v35 = "expects parent op ";
    v36 = 18;
    v4 = &v34;
    v5 = (char *)v39;
    if (v40 >= v41)
    {
      v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        v29 = (char *)&v34 - (_BYTE *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v5 = (char *)v39;
        v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        v4 = &v34;
        v5 = (char *)v39;
      }
    }
    v6 = &v5[24 * v40];
    v7 = *(_OWORD *)v4;
    *((_QWORD *)v6 + 2) = v4[2];
    *(_OWORD *)v6 = v7;
    ++v40;
  }
  v31 = "'";
  v8 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  v9 = (uint64_t)v8;
  v37[0] = "pdl.rewrite";
  v37[1] = 11;
  if (*v8)
  {
    v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(_QWORD *)v9)
    {
      v10 = v9 + 24;
      v11 = *(_QWORD *)(v9 + 24);
      LODWORD(v34) = 3;
      v35 = "'";
      v36 = 1;
      v12 = *(unsigned int *)(v9 + 32);
      v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        v27 = v12 + 1;
        v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          v11 = *(_QWORD *)(v9 + 24);
          v13 = &v34;
        }
      }
      v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      v15 = *(_OWORD *)v13;
      *(_QWORD *)(v14 + 16) = v13[2];
      *(_OWORD *)v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  if (v47)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v46;
      v19 = __p;
      if (v46 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v46 = v17;
      operator delete(v19);
    }
    v20 = v43;
    if (v43)
    {
      v21 = v44;
      v22 = v43;
      if (v44 != v43)
      {
        do
        {
          v24 = (void *)*--v21;
          v23 = v24;
          *v21 = 0;
          if (v24)
            operator delete[](v23);
        }
        while (v21 != v20);
        v22 = v43;
      }
      v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42)
      free(v39);
  }
  return v16;
}

uint64_t mlir::Op<mlir::pdl::ApplyNativeRewriteOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::AttributeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1970037110 ? (v7 = *(_BYTE *)(a3 + 4) == 101) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  if (v7 == 5 && *(_DWORD *)result == 1970037110 && *(_BYTE *)(result + 4) == 101)
    *v5 = a4;
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"value", 5, v5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::AttributeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::arith::ConstantOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::AttributeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = mlir::OperationState::getOrAddProperties<mlir::pdl::detail::AttributeOpGenericAdaptorBase::Properties>(a2);
  return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::AttributeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __guard v97;
  __guard v98;
  __guard v99;
  __guard v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v120 = 81;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<Empty>]";
      v120 = 118;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[147];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v120 = 88;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[198];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v120 = 89;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || p_vtable[481] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::AttributeOp::print((mlir::pdl::AttributeOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  v6 = a1;
  if (!mlir::pdl::AttributeOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::pdl::AttributeOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::AttributeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::AttributeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::EraseOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::EraseOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  const char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  const char *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  const char *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __guard v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  unint64_t v100;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v93 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v25 = v24;
    a1 = v93;
    if (v25)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v100 = 83;
      v26 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v26)
        v27 = v26;
      else
        v27 = v100;
      v28 = &v99[v27];
      v29 = v100 - v27;
      if (v100 - v27 >= 0x12)
        v30 = 18;
      else
        v30 = v100 - v27;
      v31 = v29 - v30;
      if (v31 >= v31 - 1)
        v32 = v31 - 1;
      else
        v32 = v31;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v93;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v88 = v3;
    v94 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v34 = v33;
    v3 = v88;
    a1 = v94;
    if (v34)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v100 = 83;
      v35 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v35)
        v36 = v35;
      else
        v36 = v100;
      v37 = &v99[v36];
      v38 = v100 - v36;
      if (v100 - v36 >= 0x12)
        v39 = 18;
      else
        v39 = v100 - v36;
      v40 = v38 - v39;
      if (v40 >= v40 - 1)
        v41 = v40 - 1;
      else
        v41 = v40;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v88;
      a1 = v94;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v89 = v3;
    v95 = a1;
    v84 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v84;
    v3 = v89;
    v43 = v42;
    a1 = v95;
    if (v43)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v100 = 86;
      v44 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v44)
        v45 = v44;
      else
        v45 = v100;
      v46 = &v99[v45];
      v47 = v100 - v45;
      if (v100 - v45 >= 0x12)
        v48 = 18;
      else
        v48 = v100 - v45;
      v49 = v47 - v48;
      if (v49 >= v49 - 1)
        v50 = v49 - 1;
      else
        v50 = v49;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v84;
      v3 = v89;
      a1 = v95;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v90 = v3;
    v96 = a1;
    v81 = v9;
    v85 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v81;
    v6 = v85;
    v52 = v51;
    v3 = v90;
    a1 = v96;
    if (v52)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v100 = 82;
      v53 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v53)
        v54 = v53;
      else
        v54 = v100;
      v55 = &v99[v54];
      v56 = v100 - v54;
      if (v100 - v54 >= 0x12)
        v57 = 18;
      else
        v57 = v100 - v54;
      v58 = v56 - v57;
      if (v58 >= v58 - 1)
        v59 = v58 - 1;
      else
        v59 = v58;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v81;
      v6 = v85;
      v3 = v90;
      a1 = v96;
    }
  }
  v12 = v11[181];
  if ((v13 & 1) == 0)
  {
    v91 = v3;
    v97 = a1;
    v82 = v9;
    v86 = v6;
    v79 = v12;
    v12 = v79;
    v9 = v82;
    v6 = v86;
    v3 = v91;
    v61 = v60;
    a1 = v97;
    if (v61)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      v100 = 109;
      v62 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v62)
        v63 = v62;
      else
        v63 = v100;
      v64 = &v99[v63];
      v65 = v100 - v63;
      if (v100 - v63 >= 0x12)
        v66 = 18;
      else
        v66 = v100 - v63;
      v67 = v65 - v66;
      if (v67 >= v67 - 1)
        v68 = v67 - 1;
      else
        v68 = v67;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      v12 = v79;
      v9 = v82;
      v6 = v86;
      v3 = v91;
      a1 = v97;
    }
  }
  v15 = v14[143];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v92 = v3;
    v98 = a1;
    v83 = v9;
    v87 = v6;
    v78 = v15;
    v80 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v78;
    v12 = v80;
    v9 = v83;
    v6 = v87;
    v70 = v69;
    v3 = v92;
    a1 = v98;
    if (v70)
    {
      v99 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v100 = 84;
      v71 = llvm::StringRef::find((uint64_t *)&v99, "DesiredTypeName = ", 0x12uLL, 0);
      if (v100 >= v71)
        v72 = v71;
      else
        v72 = v100;
      v73 = &v99[v72];
      v74 = v100 - v72;
      if (v100 - v72 >= 0x12)
        v75 = 18;
      else
        v75 = v100 - v72;
      v76 = v74 - v75;
      if (v76 >= v76 - 1)
        v77 = v76 - 1;
      else
        v77 = v76;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v78;
      v12 = v80;
      v9 = v83;
      v6 = v87;
      v3 = v92;
      a1 = v98;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v17[192] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::EraseOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroResults<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::EraseOp>,mlir::OpTrait::OneOperand<mlir::pdl::EraseOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::EraseOp>,mlir::OpTrait::OpInvariants<mlir::pdl::EraseOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroResults<mlir::pdl::EraseOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::EraseOp>,mlir::OpTrait::OneOperand<mlir::pdl::EraseOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::EraseOp>,mlir::OpTrait::OpInvariants<mlir::pdl::EraseOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t *)a1)
      && mlir::pdl::__mlir_ods_local_type_constraint_PDLOps3((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl::EraseOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::OperandOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __guard v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __guard v97;
  __guard v98;
  __guard v99;
  __guard v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v120 = 81;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<Empty>]";
      v120 = 114;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[151];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v120 = 88;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[198];
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      v120 = 109;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[137];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v20[192] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::OperandOp::print((mlir::pdl::OperandOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t *)a1)
    && (v6 = a1, mlir::pdl::OperandOp::verifyInvariantsImpl((uint64_t **)&v6)))
  {
    return verifyHasBindingUse(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl::OperandOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::OperandsOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperandsOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  __guard v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __guard v97;
  __guard v98;
  __guard v99;
  __guard v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v120 = 81;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      v120 = 114;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[153];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v120 = 88;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[198];
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      v120 = 109;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[137];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return v3 == a1 || v6 == a1 || v9 == a1 || v12 == a1 || v15 == a1 || v18 == a1 || v20[192] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::OperandOp::print((mlir::pdl::OperandOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::Operation *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v6;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t *)a1)
    && (v6 = a1, mlir::pdl::OperandsOp::verifyInvariantsImpl((uint64_t **)&v6)))
  {
    return verifyHasBindingUse(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::pdl::OperandsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::OperationOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::getInherentAttr(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  mlir::MLIRContext *Context;
  _QWORD *v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v8 = 0;
  return mlir::pdl::OperationOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl::OperationOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  if (*v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"attributeValueNames", 19, *v6);
  v7 = v6[1];
  if (v7)
    mlir::NamedAttrList::append(a3, (uint64_t)"opName", 6, v7);
  v8 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 2), 3);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v8);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;

  v9 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  result = 0;
  if (!v9
    || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps3(v9, (const void **)"attributeValueNames", (const char *)0x13, a4, a5))
  {
    v10 = mlir::NamedAttrList::get(a3, *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8));
    if (!v10
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v10, (const void **)"opName", (const char *)6, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::getOpPropertyByteSize()
{
  return 32;
}

double mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::initProperties(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;

  if (a4)
  {
    v4 = *a4;
    v5 = a4[1];
    *a3 = *a4;
    a3[1] = v5;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return *(double *)&v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::OperationOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::OperationOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)a3;
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(a3 + 12);
  *(__n128 *)a2 = result;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  return *(_QWORD *)(a3 + 16) == *(_QWORD *)(a2 + 16)
      && *(_DWORD *)(a3 + 24) == (unint64_t)*(unsigned int *)(a2 + 24);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::OperationOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::cf::SwitchOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::OperationOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a2;
  return mlir::cf::SwitchOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __guard v105;
  __guard v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __guard v114;
  __guard v115;
  __guard v116;
  __guard v117;
  __guard v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  const char *v140;
  unint64_t v141;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v132 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v32;
    a1 = v132;
    if (v33)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v141 = 83;
      v34 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v34)
        v35 = v34;
      else
        v35 = v141;
      v36 = &v140[v35];
      v37 = v141 - v35;
      if (v141 - v35 >= 0x12)
        v38 = 18;
      else
        v38 = v141 - v35;
      v39 = v37 - v38;
      if (v39 >= v39 - 1)
        v40 = v39 - 1;
      else
        v40 = v39;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v132;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v133 = a1;
    v125 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v125;
    v42 = v41;
    a1 = v133;
    if (v42)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v141 = 81;
      v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v43)
        v44 = v43;
      else
        v44 = v141;
      v45 = &v140[v44];
      v46 = v141 - v44;
      if (v141 - v44 >= 0x12)
        v47 = 18;
      else
        v47 = v141 - v44;
      v48 = v46 - v47;
      if (v48 >= v48 - 1)
        v49 = v48 - 1;
      else
        v49 = v48;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v125;
      a1 = v133;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v134 = a1;
    v119 = v6;
    v126 = v3;
    v6 = v119;
    v3 = v126;
    v51 = v50;
    a1 = v134;
    if (v51)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<Empty>]";
      v141 = 118;
      v52 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v52)
        v53 = v52;
      else
        v53 = v141;
      v54 = &v140[v53];
      v55 = v141 - v53;
      if (v141 - v53 >= 0x12)
        v56 = 18;
      else
        v56 = v141 - v53;
      v57 = v55 - v56;
      if (v57 >= v57 - 1)
        v58 = v57 - 1;
      else
        v58 = v57;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v54[v56], v58);
      v6 = v119;
      v3 = v126;
      a1 = v134;
    }
  }
  v9 = v8[155];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v135 = a1;
    v120 = v6;
    v127 = v3;
    v114 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v114;
    v6 = v120;
    v3 = v127;
    v60 = v59;
    a1 = v135;
    if (v60)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v141 = 86;
      v61 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v61)
        v62 = v61;
      else
        v62 = v141;
      v63 = &v140[v62];
      v64 = v141 - v62;
      if (v141 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v141 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v114;
      v6 = v120;
      v3 = v127;
      a1 = v135;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v136 = a1;
    v121 = v6;
    v128 = v3;
    v110 = v12;
    v115 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v110;
    v9 = v115;
    v6 = v121;
    v3 = v128;
    v69 = v68;
    a1 = v136;
    if (v69)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v141 = 88;
      v70 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v70)
        v71 = v70;
      else
        v71 = v141;
      v72 = &v140[v71];
      v73 = v141 - v71;
      if (v141 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v141 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v110;
      v9 = v115;
      v6 = v121;
      v3 = v128;
      a1 = v136;
    }
  }
  v15 = v14[198];
  if ((v16 & 1) == 0)
  {
    v137 = a1;
    v122 = v6;
    v129 = v3;
    v111 = v12;
    v116 = v9;
    v107 = v15;
    v15 = v107;
    v12 = v111;
    v9 = v116;
    v6 = v122;
    v3 = v129;
    v78 = v77;
    a1 = v137;
    if (v78)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v141 = 96;
      v79 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v79)
        v80 = v79;
      else
        v80 = v141;
      v81 = &v140[v80];
      v82 = v141 - v80;
      if (v141 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v141 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v15 = v107;
      v12 = v111;
      v9 = v116;
      v6 = v122;
      v3 = v129;
      a1 = v137;
    }
  }
  v18 = v17[423];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v138 = a1;
    v123 = v6;
    v130 = v3;
    v112 = v12;
    v117 = v9;
    v105 = v18;
    v108 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v105;
    v15 = v108;
    v12 = v112;
    v9 = v117;
    v6 = v123;
    v3 = v130;
    v87 = v86;
    a1 = v138;
    if (v87)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v141 = 84;
      v88 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v88)
        v89 = v88;
      else
        v89 = v141;
      v90 = &v140[v89];
      v91 = v141 - v89;
      if (v141 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v141 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v105;
      v15 = v108;
      v12 = v112;
      v9 = v117;
      v6 = v123;
      v3 = v130;
      a1 = v138;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v139 = a1;
    v124 = v6;
    v131 = v3;
    v113 = v12;
    v118 = v9;
    v106 = v18;
    v109 = v15;
    v104 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v104;
    v18 = v106;
    v15 = v109;
    v12 = v113;
    v9 = v118;
    v6 = v124;
    v3 = v131;
    v96 = v95;
    a1 = v139;
    if (v96)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v141 = 89;
      v97 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v97)
        v98 = v97;
      else
        v98 = v141;
      v99 = &v140[v98];
      v100 = v141 - v98;
      if (v141 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v141 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v104;
      v18 = v106;
      v15 = v109;
      v12 = v113;
      v9 = v118;
      v6 = v124;
      v3 = v131;
      a1 = v139;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || p_vtable[481] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::OperationOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
    return 0;
  v6 = a1;
  if (!mlir::pdl::OperationOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::pdl::OperationOp::verify(&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::OperationOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::OperationType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl.pattern", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::PatternOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E39D10;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::pdl::PatternOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v7 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(a2 + 44)))
    v7 = 0;
  if (a4 == 8)
  {
    if (*(_QWORD *)a3 != 0x656D616E5F6D7973)
      return 0;
    return v7[1];
  }
  else
  {
    if (a4 != 7)
      return 0;
    if (*(_DWORD *)a3 != 1701733730 || *(_DWORD *)(a3 + 3) != 1953064549)
      return 0;
    return *v7;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v11);
  if (v7 == 8)
  {
    if (*(_QWORD *)result == 0x656D616E5F6D7973)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
          v9 = a4;
        else
          v9 = 0;
        v5[1] = v9;
      }
      else
      {
        v5[1] = 0;
      }
    }
  }
  else if (v7 == 7 && *(_DWORD *)result == 1701733730 && *(_DWORD *)(result + 3) == 1953064549)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v10 = a4;
      else
        v10 = 0;
      *v5 = v10;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  if (*v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"benefit", 7, *v5);
  v6 = v5[1];
  if (v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, v6);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;

  v9 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  result = 0;
  if (!v9
    || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps4(v9, (const void **)"benefit", (const char *)7, (void (*)(void **__return_ptr, uint64_t))a4, a5))
  {
    v10 = mlir::NamedAttrList::get(a3, *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8));
    if (!v10
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v10, (const void **)"sym_name", (const char *)8, a4, a5))
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::PatternOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::PatternOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::PatternOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::ModuleOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::PatternOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *v4);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, v4[1]);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x80uLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isDeclaration;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface]";
      v15 = 73;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[143], v2);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isOptionalSymbol()
{
  return 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::isDeclaration()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::PatternOp>::getDefaultDialect()
{
  return "pdl";
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v186 = 81;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[210];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v186 = 83;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v186 = 84;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[193];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v186 = 83;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[184];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = p_vtable[481];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
      v186 = 91;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[201];
  v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolOpInterface::Trait<Empty>]";
      v186 = 87;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[142];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v186 = 86;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v29[138] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::PatternOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroResults<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::PatternOp>,mlir::OpTrait::SingleBlock<mlir::pdl::PatternOp>,mlir::OpTrait::OpInvariants<mlir::pdl::PatternOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::PatternOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::pdl::PatternOp>,mlir::SymbolOpInterface::Trait<mlir::pdl::PatternOp>,mlir::OpAsmOpInterface::Trait<mlir::pdl::PatternOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroResults<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::PatternOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::PatternOp>,mlir::OpTrait::SingleBlock<mlir::pdl::PatternOp>,mlir::OpTrait::OpInvariants<mlir::pdl::PatternOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::PatternOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::pdl::PatternOp>,mlir::SymbolOpInterface::Trait<mlir::pdl::PatternOp>,mlir::OpAsmOpInterface::Trait<mlir::pdl::PatternOp>>(mlir::detail *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::detail *v7;

  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands(a1, v5)
    && mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    && (v7 = a1, mlir::pdl::PatternOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::op_definition_impl::verifyTrait<mlir::SymbolOpInterface::Trait<mlir::ModuleOp>>(a1);
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::pdl::PatternOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::SymbolOpInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2))
    return 0;
  v4 = a1;
  return mlir::pdl::PatternOp::verifyRegions((uint64_t **)&v4) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::RangeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  int *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[3];
  void *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE v28[96];
  void *v29;
  _QWORD *v30;
  void *__p;
  _QWORD **v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  a5(v24, a6);
  if (v24[0])
  {
    v21 = 3;
    v22 = "this operation does not support properties";
    v23 = 42;
    v6 = &v21;
    v7 = (char *)v25;
    if (v26 >= v27)
    {
      v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        v20 = (char *)&v21 - (_BYTE *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v7 = (char *)v25;
        v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        v6 = &v21;
        v7 = (char *)v25;
      }
    }
    v8 = &v7[24 * v26];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v8 = v9;
    ++v26;
    if (v24[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    v10 = (_QWORD **)__p;
    if (__p)
    {
      v11 = v32;
      v12 = __p;
      if (v32 != __p)
      {
        do
          v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        v12 = __p;
      }
      v32 = v10;
      operator delete(v12);
    }
    v13 = v29;
    if (v29)
    {
      v14 = v30;
      v15 = v29;
      if (v30 != v29)
      {
        do
        {
          v17 = (void *)*--v14;
          v16 = v17;
          *v14 = 0;
          if (v17)
            operator delete[](v16);
        }
        while (v14 != v13);
        v15 = v29;
      }
      v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28)
      free(v25);
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RangeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::RangeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::RangeOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::RangeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::RangeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::RangeOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __guard v136;
  __guard v137;
  __guard v138;
  __guard v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __guard v151;
  __guard v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      v186 = 114;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[153];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v186 = 88;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[198];
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      v186 = 109;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[143];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = p_vtable[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == a1
      || v27 == a1
      || v29[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::RangeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t *)a1))
    return 0;
  v6 = a1;
  if (!mlir::pdl::RangeOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::pdl::RangeOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::RangeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::pdl::ReplaceOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unint64_t v8;
  BOOL v9;
  uint64_t v14;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = *(unsigned int *)(a2 + 44);
  if (a4 == 19)
  {
    if (*a3 != 0x53646E617265706FLL
      || a3[1] != 0x6953746E656D6765
      || *(_QWORD *)((char *)a3 + 11) != 0x73657A6953746E65)
    {
      return 0;
    }
  }
  else
  {
    if (a4 != 21)
      return 0;
    v9 = *a3 == 0x5F646E617265706FLL && a3[1] == 0x5F746E656D676573;
    if (!v9 || *(_QWORD *)((char *)a3 + 13) != 0x73657A69735F746ELL)
      return 0;
  }
  if (BYTE3(v8))
    v14 = a2 + 16 * ((v8 >> 23) & 1) + 64;
  else
    v14 = 0;
  return mlir::detail::DenseArrayAttrImpl<int>::get(Context, v14, 3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::cf::CondBranchOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t v6;
  uint64_t v7;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v6 = 0;
  v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v6, 3);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v7);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::getOpPropertyByteSize()
{
  return 12;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  if (a4)
  {
    v4 = *a4;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = v4;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::cf::CondBranchOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v4 = 0;
  return mlir::cf::CondBranchOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::copyProperties(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::compareProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_QWORD *)a3 == *(_QWORD *)a2 && *(_DWORD *)(a3 + 8) == (unint64_t)*(unsigned int *)(a2 + 8);
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ReplaceOp>::hashProperties(uint64_t a1, _QWORD *a2)
{
  return mlir::cf::CondBranchOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ReplaceOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v5;
  mlir::MLIRContext *Context;
  uint64_t v7;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (int *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)v5, 3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v7);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a3, v5, 3);
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  __guard *v17;
  __guard v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  void **p_vtable;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  const char *v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __guard v105;
  __guard v106;
  __guard v107;
  __guard v108;
  __guard v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  const char *v140;
  unint64_t v141;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v132 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v32;
    a1 = v132;
    if (v33)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v141 = 83;
      v34 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v34)
        v35 = v34;
      else
        v35 = v141;
      v36 = &v140[v35];
      v37 = v141 - v35;
      if (v141 - v35 >= 0x12)
        v38 = 18;
      else
        v38 = v141 - v35;
      v39 = v37 - v38;
      if (v39 >= v39 - 1)
        v40 = v39 - 1;
      else
        v40 = v39;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v36[v38], v40);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v132;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v133 = a1;
    v125 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v125;
    v42 = v41;
    a1 = v133;
    if (v42)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v141 = 83;
      v43 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v43)
        v44 = v43;
      else
        v44 = v141;
      v45 = &v140[v44];
      v46 = v141 - v44;
      if (v141 - v44 >= 0x12)
        v47 = 18;
      else
        v47 = v141 - v44;
      v48 = v46 - v47;
      if (v48 >= v48 - 1)
        v49 = v48 - 1;
      else
        v49 = v48;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v45[v47], v49);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v125;
      a1 = v133;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v134 = a1;
    v119 = v6;
    v126 = v3;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v119;
    v3 = v126;
    v51 = v50;
    a1 = v134;
    if (v51)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v141 = 86;
      v52 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v52)
        v53 = v52;
      else
        v53 = v141;
      v54 = &v140[v53];
      v55 = v141 - v53;
      if (v141 - v53 >= 0x12)
        v56 = 18;
      else
        v56 = v141 - v53;
      v57 = v55 - v56;
      if (v57 >= v57 - 1)
        v58 = v57 - 1;
      else
        v58 = v57;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v54[v56], v58);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v119;
      v3 = v126;
      a1 = v134;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v135 = a1;
    v120 = v6;
    v127 = v3;
    v114 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v114;
    v6 = v120;
    v3 = v127;
    v60 = v59;
    a1 = v135;
    if (v60)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      v141 = 97;
      v61 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v61)
        v62 = v61;
      else
        v62 = v141;
      v63 = &v140[v62];
      v64 = v141 - v62;
      if (v141 - v62 >= 0x12)
        v65 = 18;
      else
        v65 = v141 - v62;
      v66 = v64 - v65;
      if (v66 >= v66 - 1)
        v67 = v66 - 1;
      else
        v67 = v66;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v63[v65], v67);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v114;
      v6 = v120;
      v3 = v127;
      a1 = v135;
    }
  }
  v12 = v11[197];
  if ((v13 & 1) == 0)
  {
    v136 = a1;
    v121 = v6;
    v128 = v3;
    v110 = v12;
    v115 = v9;
    v12 = v110;
    v9 = v115;
    v6 = v121;
    v3 = v128;
    v69 = v68;
    a1 = v136;
    if (v69)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v141 = 96;
      v70 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v70)
        v71 = v70;
      else
        v71 = v141;
      v72 = &v140[v71];
      v73 = v141 - v71;
      if (v141 - v71 >= 0x12)
        v74 = 18;
      else
        v74 = v141 - v71;
      v75 = v73 - v74;
      if (v75 >= v75 - 1)
        v76 = v75 - 1;
      else
        v76 = v75;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v72[v74], v76);
      v12 = v110;
      v9 = v115;
      v6 = v121;
      v3 = v128;
      a1 = v136;
    }
  }
  v15 = v14[423];
  if ((v16 & 1) == 0)
  {
    v137 = a1;
    v122 = v6;
    v129 = v3;
    v111 = v12;
    v116 = v9;
    v107 = v15;
    v15 = v107;
    v12 = v111;
    v9 = v116;
    v6 = v122;
    v3 = v129;
    v78 = v77;
    a1 = v137;
    if (v78)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<Empty>]";
      v141 = 109;
      v79 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v79)
        v80 = v79;
      else
        v80 = v141;
      v81 = &v140[v80];
      v82 = v141 - v80;
      if (v141 - v80 >= 0x12)
        v83 = 18;
      else
        v83 = v141 - v80;
      v84 = v82 - v83;
      if (v84 >= v84 - 1)
        v85 = v84 - 1;
      else
        v85 = v84;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v81[v83], v85);
      v15 = v107;
      v12 = v111;
      v9 = v116;
      v6 = v122;
      v3 = v129;
      a1 = v137;
    }
  }
  v18 = v17[143];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v138 = a1;
    v123 = v6;
    v130 = v3;
    v112 = v12;
    v117 = v9;
    v105 = v18;
    v108 = v15;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v105;
    v15 = v108;
    v12 = v112;
    v9 = v117;
    v6 = v123;
    v3 = v130;
    v87 = v86;
    a1 = v138;
    if (v87)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v141 = 84;
      v88 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v88)
        v89 = v88;
      else
        v89 = v141;
      v90 = &v140[v89];
      v91 = v141 - v89;
      if (v141 - v89 >= 0x12)
        v92 = 18;
      else
        v92 = v141 - v89;
      v93 = v91 - v92;
      if (v93 >= v93 - 1)
        v94 = v93 - 1;
      else
        v94 = v93;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v90[v92], v94);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v105;
      v15 = v108;
      v12 = v112;
      v9 = v117;
      v6 = v123;
      v3 = v130;
      a1 = v138;
    }
  }
  v21 = v20[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v139 = a1;
    v124 = v6;
    v131 = v3;
    v113 = v12;
    v118 = v9;
    v106 = v18;
    v109 = v15;
    v104 = v21;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v104;
    v18 = v106;
    v15 = v109;
    v12 = v113;
    v9 = v118;
    v6 = v124;
    v3 = v131;
    v96 = v95;
    a1 = v139;
    if (v96)
    {
      v140 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v141 = 89;
      v97 = llvm::StringRef::find((uint64_t *)&v140, "DesiredTypeName = ", 0x12uLL, 0);
      if (v141 >= v97)
        v98 = v97;
      else
        v98 = v141;
      v99 = &v140[v98];
      v100 = v141 - v98;
      if (v141 - v98 >= 0x12)
        v101 = 18;
      else
        v101 = v141 - v98;
      v102 = v100 - v101;
      if (v102 >= v102 - 1)
        v103 = v102 - 1;
      else
        v103 = v102;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v99[v101], v103);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v104;
      v18 = v106;
      v15 = v109;
      v12 = v113;
      v9 = v118;
      v6 = v124;
      v3 = v131;
      a1 = v139;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || p_vtable[481] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::ReplaceOp::print((mlir::pdl::ReplaceOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::ReplaceOp>,mlir::OpTrait::ZeroResults<mlir::pdl::ReplaceOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::ReplaceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::pdl::ReplaceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl::ReplaceOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ReplaceOp>,mlir::OpTrait::OpInvariants<mlir::pdl::ReplaceOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::ReplaceOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::pdl::ReplaceOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::ReplaceOp>,mlir::OpTrait::ZeroResults<mlir::pdl::ReplaceOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::ReplaceOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::pdl::ReplaceOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl::ReplaceOp>,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ReplaceOp>,mlir::OpTrait::OpInvariants<mlir::pdl::ReplaceOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::ReplaceOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    || !mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl<mlir::pdl::ApplyNativeRewriteOp>::verifyTrait((uint64_t *)a1))
  {
    return 0;
  }
  v6 = a1;
  return mlir::pdl::ReplaceOp::verifyInvariantsImpl((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::pdl::ReplaceOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::HasParent<mlir::pdl::RewriteOp>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl.result", 10, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ResultOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E39B80;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ResultOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (v7 = *(_BYTE *)(a3 + 4) == 120) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(_BYTE *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void **v7;

  v7 = (const void **)mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v7, (const void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __guard v151;
  __guard v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<Empty>]";
      v186 = 114;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[151];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = p_vtable[481];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::ResultOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::pdl::ResultOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::pdl::ResultOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::ValueType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultsOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"pdl.results", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::pdl::ResultsOp,void>::id, (uint64_t)&v9);
  v4 = v9;
  if ((_DWORD)v10)
  {
    v5 = 16 * v10;
    v6 = (void **)((char *)v9 + 8);
    do
    {
      v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    v4 = v9;
  }
  if (v4 != v11)
    free(v4);
  *a1 = &unk_1E0E39EA0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::ResultsOp::parse;
  a1[3] = (BOOL (*)(uint64_t *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 5 && (*(_DWORD *)a3 == 1701080681 ? (v7 = *(_BYTE *)(a3 + 4) == 120) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 5 && *(_DWORD *)result == 1701080681 && *(_BYTE *)(result + 4) == 120)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"index", 5, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void **v7;

  v7 = (const void **)mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps5(v7, (const void **)"index", (const char *)5, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::ResultsOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::ResultOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::ResultsOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::ResultsOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::IntegerAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultsOp>::getSpeculatability;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      v15 = 81;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[487], v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::pdl::ResultsOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::pdl::ResultsOp>::getEffects;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      v15 = 79;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[159], v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  void *v21;
  unsigned __int8 v22;
  void **v23;
  void *v24;
  unsigned __int8 v25;
  void **v26;
  void *v27;
  unsigned __int8 v28;
  uint64_t *v29;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  const char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  const char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  const char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  const char *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  const char *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  const char *v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __guard v151;
  __guard v152;
  __guard v153;
  __guard v154;
  __guard v155;
  __guard v156;
  __guard v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  const char *v185;
  unint64_t v186;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v175 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v41 = v40;
    a1 = v175;
    if (v41)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v186 = 83;
      v42 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v42)
        v43 = v42;
      else
        v43 = v186;
      v44 = &v185[v43];
      v45 = v186 - v43;
      if (v186 - v43 >= 0x12)
        v46 = 18;
      else
        v46 = v186 - v43;
      v47 = v45 - v46;
      if (v47 >= v47 - 1)
        v48 = v47 - 1;
      else
        v48 = v47;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v44[v46], v48);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v175;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v166 = v3;
    v176 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v50 = v49;
    v3 = v166;
    a1 = v176;
    if (v50)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v186 = 81;
      v51 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v51)
        v52 = v51;
      else
        v52 = v186;
      v53 = &v185[v52];
      v54 = v186 - v52;
      if (v186 - v52 >= 0x12)
        v55 = 18;
      else
        v55 = v186 - v52;
      v56 = v54 - v55;
      if (v56 >= v56 - 1)
        v57 = v56 - 1;
      else
        v57 = v56;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v53[v55], v57);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v166;
      a1 = v176;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v167 = v3;
    v177 = a1;
    v158 = v6;
    v6 = v158;
    v59 = v58;
    v3 = v167;
    a1 = v177;
    if (v59)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl<Empty>]";
      v186 = 112;
      v60 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v60)
        v61 = v60;
      else
        v61 = v186;
      v62 = &v185[v61];
      v63 = v186 - v61;
      if (v186 - v61 >= 0x12)
        v64 = 18;
      else
        v64 = v186 - v61;
      v65 = v63 - v64;
      if (v65 >= v65 - 1)
        v66 = v65 - 1;
      else
        v66 = v65;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v62[v64], v66);
      v6 = v158;
      v3 = v167;
      a1 = v177;
    }
  }
  v9 = v8[171];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v168 = v3;
    v178 = a1;
    v151 = v9;
    v159 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v151;
    v6 = v159;
    v68 = v67;
    v3 = v168;
    a1 = v178;
    if (v68)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v186 = 86;
      v69 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v69)
        v70 = v69;
      else
        v70 = v186;
      v71 = &v185[v70];
      v72 = v186 - v70;
      if (v186 - v70 >= 0x12)
        v73 = 18;
      else
        v73 = v186 - v70;
      v74 = v72 - v73;
      if (v74 >= v74 - 1)
        v75 = v74 - 1;
      else
        v75 = v74;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v71[v73], v75);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v151;
      v6 = v159;
      v3 = v168;
      a1 = v178;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v169 = v3;
    v179 = a1;
    v152 = v9;
    v160 = v6;
    v145 = v12;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v145;
    v9 = v152;
    v6 = v160;
    v77 = v76;
    v3 = v169;
    a1 = v179;
    if (v77)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      v186 = 82;
      v78 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v78)
        v79 = v78;
      else
        v79 = v186;
      v80 = &v185[v79];
      v81 = v186 - v79;
      if (v186 - v79 >= 0x12)
        v82 = 18;
      else
        v82 = v186 - v79;
      v83 = v81 - v82;
      if (v83 >= v83 - 1)
        v84 = v83 - 1;
      else
        v84 = v83;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v80[v82], v84);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v145;
      v9 = v152;
      v6 = v160;
      v3 = v169;
      a1 = v179;
    }
  }
  v15 = v14[181];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v170 = v3;
    v180 = a1;
    v153 = v9;
    v161 = v6;
    v140 = v15;
    v146 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v140;
    v12 = v146;
    v9 = v153;
    v6 = v161;
    v86 = v85;
    v3 = v170;
    a1 = v180;
    if (v86)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v186 = 84;
      v87 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v87)
        v88 = v87;
      else
        v88 = v186;
      v89 = &v185[v88];
      v90 = v186 - v88;
      if (v186 - v88 >= 0x12)
        v91 = 18;
      else
        v91 = v186 - v88;
      v92 = v90 - v91;
      if (v92 >= v92 - 1)
        v93 = v92 - 1;
      else
        v93 = v92;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v89[v91], v93);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v140;
      v12 = v146;
      v9 = v153;
      v6 = v161;
      v3 = v170;
      a1 = v180;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v171 = v3;
    v181 = a1;
    v154 = v9;
    v162 = v6;
    v141 = v15;
    v147 = v12;
    v136 = v18;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v136;
    v15 = v141;
    v12 = v147;
    v9 = v154;
    v6 = v162;
    v95 = v94;
    v3 = v171;
    a1 = v181;
    if (v95)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v186 = 89;
      v96 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v96)
        v97 = v96;
      else
        v97 = v186;
      v98 = &v185[v97];
      v99 = v186 - v97;
      if (v186 - v97 >= 0x12)
        v100 = 18;
      else
        v100 = v186 - v97;
      v101 = v99 - v100;
      if (v101 >= v101 - 1)
        v102 = v101 - 1;
      else
        v102 = v101;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v98[v100], v102);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v136;
      v15 = v141;
      v12 = v147;
      v9 = v154;
      v6 = v162;
      v3 = v171;
      a1 = v181;
    }
  }
  v21 = p_vtable[481];
  v23 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v22 & 1) == 0)
  {
    v172 = v3;
    v182 = a1;
    v155 = v9;
    v163 = v6;
    v142 = v15;
    v148 = v12;
    v133 = v21;
    v137 = v18;
    v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v21 = v133;
    v18 = v137;
    v15 = v142;
    v12 = v148;
    v9 = v155;
    v6 = v163;
    v104 = v103;
    v3 = v172;
    a1 = v182;
    if (v104)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      v186 = 95;
      v105 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v105)
        v106 = v105;
      else
        v106 = v186;
      v107 = &v185[v106];
      v108 = v186 - v106;
      if (v186 - v106 >= 0x12)
        v109 = 18;
      else
        v109 = v186 - v106;
      v110 = v108 - v109;
      if (v110 >= v110 - 1)
        v111 = v110 - 1;
      else
        v111 = v110;
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v107[v109], v111);
      v23 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v21 = v133;
      v18 = v137;
      v15 = v142;
      v12 = v148;
      v9 = v155;
      v6 = v163;
      v3 = v172;
      a1 = v182;
    }
  }
  v24 = v23[486];
  v26 = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v25 & 1) == 0)
  {
    v173 = v3;
    v183 = a1;
    v156 = v9;
    v164 = v6;
    v143 = v15;
    v149 = v12;
    v134 = v21;
    v138 = v18;
    v131 = v24;
    v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v24 = v131;
    v21 = v134;
    v18 = v138;
    v15 = v143;
    v12 = v149;
    v9 = v156;
    v6 = v164;
    v113 = v112;
    v3 = v173;
    a1 = v183;
    if (v113)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      v186 = 99;
      v114 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v114)
        v115 = v114;
      else
        v115 = v186;
      v116 = &v185[v115];
      v117 = v186 - v115;
      if (v186 - v115 >= 0x12)
        v118 = 18;
      else
        v118 = v186 - v115;
      v119 = v117 - v118;
      if (v119 >= v119 - 1)
        v120 = v119 - 1;
      else
        v120 = v119;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v116[v118], v120);
      v26 = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v24 = v131;
      v21 = v134;
      v18 = v138;
      v15 = v143;
      v12 = v149;
      v9 = v156;
      v6 = v164;
      v3 = v173;
      a1 = v183;
    }
  }
  v27 = v26[504];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v174 = v3;
    v184 = a1;
    v157 = v9;
    v165 = v6;
    v144 = v15;
    v150 = v12;
    v135 = v21;
    v139 = v18;
    v130 = v27;
    v132 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v130;
    v24 = v132;
    v21 = v135;
    v18 = v139;
    v15 = v144;
    v12 = v150;
    v9 = v157;
    v6 = v165;
    v122 = v121;
    v3 = v174;
    a1 = v184;
    if (v122)
    {
      v185 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      v186 = 93;
      v123 = llvm::StringRef::find((uint64_t *)&v185, "DesiredTypeName = ", 0x12uLL, 0);
      if (v186 >= v123)
        v124 = v123;
      else
        v124 = v186;
      v125 = &v185[v124];
      v126 = v186 - v124;
      if (v186 - v124 >= 0x12)
        v127 = 18;
      else
        v127 = v186 - v124;
      v128 = v126 - v127;
      if (v128 >= v128 - 1)
        v129 = v128 - 1;
      else
        v129 = v128;
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v125[v127], v129);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v130;
      v24 = v132;
      v21 = v135;
      v18 = v139;
      v15 = v144;
      v12 = v150;
      v9 = v157;
      v6 = v165;
      v3 = v174;
      a1 = v184;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == a1
      || v24 == a1
      || v27 == a1
      || v29[158] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::ResultsOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::pdl::ResultsOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::pdl::ResultsOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::pdl::ResultsOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::PDLType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::getParseAssemblyFn(_QWORD *a1@<X8>)
{
  *a1 = mlir::pdl::RewriteOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::printAssembly(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, unsigned int *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                           + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  unint64_t v8;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v8 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v8 = 0;
  if (a4 == 21)
  {
    if (*a3 != 0x5F646E617265706FLL
      || a3[1] != 0x5F746E656D676573
      || *(_QWORD *)((char *)a3 + 13) != 0x73657A69735F746ELL)
    {
      return 0;
    }
  }
  else
  {
    if (a4 != 19)
    {
      if (a4 == 4 && *(_DWORD *)a3 == 1701667182)
        return *(_QWORD *)v8;
      return 0;
    }
    if (*a3 != 0x53646E617265706FLL
      || a3[1] != 0x6953746E656D6765
      || *(_QWORD *)((char *)a3 + 11) != 0x73657A6953746E65)
    {
      return 0;
    }
  }
  return mlir::detail::DenseArrayAttrImpl<int>::get(Context, v8 + 8, 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _DWORD *AttrData;
  uint64_t v7;
  uint64_t v9;

  v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::pdl::RewriteOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  uint64_t *v6;
  uint64_t v7;

  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v6 = 0;
  if (*v6)
    mlir::NamedAttrList::append(a3, (uint64_t)"name", 4, *v6);
  v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)(v6 + 1), 2);
  mlir::NamedAttrList::append(a3, (uint64_t)"operandSegmentSizes", 19, v7);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v7, (const void **)"name", (const char *)4, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::RewriteOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::RewriteOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::RewriteOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::AllocOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  mlir::MLIRContext *Context;
  uint64_t v7;
  uint64_t result;

  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  else
    v5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)v5);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3) <= 5)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v7 = mlir::detail::DenseArrayAttrImpl<int>::get(Context, v5 + 8, 2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v7);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 104))(a3);
  if (result >= 6)
    return mlir::DialectBytecodeWriter::writeSparseArray<int>(a3, (int *)(v5 + 8), 2);
  return result;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  uint64_t *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x20uLL);
  *v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getAsmBlockArgumentNames;
  v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getDefaultDialect;
  v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v15 = 72;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      v4 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v4[139], v2);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::pdl::RewriteOp>::getDefaultDialect()
{
  return "pdl";
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  __guard *v14;
  __guard v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned __int8 v25;
  __guard *v26;
  __guard v27;
  unsigned __int8 v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned __int8 v31;
  void **p_vtable;
  void *v33;
  unsigned __int8 v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t *v38;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  const char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  const char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  const char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  const char *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  const char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  const char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  const char *v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  const char *v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __guard v175;
  __guard v176;
  __guard v177;
  __guard v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __guard v197;
  __guard v198;
  __guard v199;
  __guard v200;
  __guard v201;
  __guard v202;
  __guard v203;
  __guard v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  void *v248;
  void *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  const char *v260;
  unint64_t v261;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v247 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v53 = v52;
    a1 = v247;
    if (v53)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      v261 = 81;
      v54 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v54)
        v55 = v54;
      else
        v55 = v261;
      v56 = &v260[v55];
      v57 = v261 - v55;
      if (v261 - v55 >= 0x12)
        v58 = 18;
      else
        v58 = v261 - v55;
      v59 = v57 - v58;
      if (v59 >= v59 - 1)
        v60 = v59 - 1;
      else
        v60 = v59;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v56[v58], v60);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v247;
    }
  }
  v3 = v2[210];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v235 = v3;
    v248 = a1;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v62 = v61;
    v3 = v235;
    a1 = v248;
    if (v62)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      v261 = 83;
      v63 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v63)
        v64 = v63;
      else
        v64 = v261;
      v65 = &v260[v64];
      v66 = v261 - v64;
      if (v261 - v64 >= 0x12)
        v67 = 18;
      else
        v67 = v261 - v64;
      v68 = v66 - v67;
      if (v68 >= v68 - 1)
        v69 = v68 - 1;
      else
        v69 = v68;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v65[v67], v69);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v235;
      a1 = v248;
    }
  }
  v6 = v5[188];
  v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v7 & 1) == 0)
  {
    v236 = v3;
    v249 = a1;
    v224 = v6;
    v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v6 = v224;
    v3 = v236;
    v71 = v70;
    a1 = v249;
    if (v71)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v261 = 86;
      v72 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v72)
        v73 = v72;
      else
        v73 = v261;
      v74 = &v260[v73];
      v75 = v261 - v73;
      if (v261 - v73 >= 0x12)
        v76 = 18;
      else
        v76 = v261 - v73;
      v77 = v75 - v76;
      if (v77 >= v77 - 1)
        v78 = v77 - 1;
      else
        v78 = v77;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      v8 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v6 = v224;
      v3 = v236;
      a1 = v249;
    }
  }
  v9 = v8[196];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v237 = v3;
    v250 = a1;
    v214 = v9;
    v225 = v6;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v214;
    v6 = v225;
    v80 = v79;
    v3 = v237;
    a1 = v250;
    if (v80)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      v261 = 88;
      v81 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v81)
        v82 = v81;
      else
        v82 = v261;
      v83 = &v260[v82];
      v84 = v261 - v82;
      if (v261 - v82 >= 0x12)
        v85 = 18;
      else
        v85 = v261 - v82;
      v86 = v84 - v85;
      if (v86 >= v86 - 1)
        v87 = v86 - 1;
      else
        v87 = v86;
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v83[v85], v87);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v214;
      v6 = v225;
      v3 = v237;
      a1 = v250;
    }
  }
  v12 = v11[198];
  if ((v13 & 1) == 0)
  {
    v238 = v3;
    v251 = a1;
    v215 = v9;
    v226 = v6;
    v205 = v12;
    v12 = v205;
    v9 = v215;
    v6 = v226;
    v89 = v88;
    v3 = v238;
    a1 = v251;
    if (v89)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<Empty>]";
      v261 = 109;
      v90 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v90)
        v91 = v90;
      else
        v91 = v261;
      v92 = &v260[v91];
      v93 = v261 - v91;
      if (v261 - v91 >= 0x12)
        v94 = 18;
      else
        v94 = v261 - v91;
      v95 = v93 - v94;
      if (v95 >= v95 - 1)
        v96 = v95 - 1;
      else
        v96 = v95;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v92[v94], v96);
      v12 = v205;
      v9 = v215;
      v6 = v226;
      v3 = v238;
      a1 = v251;
    }
  }
  v15 = v14[137];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v239 = v3;
    v252 = a1;
    v216 = v9;
    v227 = v6;
    v197 = v15;
    v206 = v12;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v197;
    v12 = v206;
    v9 = v216;
    v6 = v227;
    v98 = v97;
    v3 = v239;
    a1 = v252;
    if (v98)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      v261 = 84;
      v99 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v99)
        v100 = v99;
      else
        v100 = v261;
      v101 = &v260[v100];
      v102 = v261 - v100;
      if (v261 - v100 >= 0x12)
        v103 = 18;
      else
        v103 = v261 - v100;
      v104 = v102 - v103;
      if (v104 >= v104 - 1)
        v105 = v104 - 1;
      else
        v105 = v104;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v101[v103], v105);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v197;
      v12 = v206;
      v9 = v216;
      v6 = v227;
      v3 = v239;
      a1 = v252;
    }
  }
  v18 = v17[191];
  v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v19 & 1) == 0)
  {
    v240 = v3;
    v253 = a1;
    v217 = v9;
    v228 = v6;
    v198 = v15;
    v207 = v12;
    v190 = v18;
    v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v18 = v190;
    v15 = v198;
    v12 = v207;
    v9 = v217;
    v6 = v228;
    v107 = v106;
    v3 = v240;
    a1 = v253;
    if (v107)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      v261 = 89;
      v108 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v108)
        v109 = v108;
      else
        v109 = v261;
      v110 = &v260[v109];
      v111 = v261 - v109;
      if (v261 - v109 >= 0x12)
        v112 = 18;
      else
        v112 = v261 - v109;
      v113 = v111 - v112;
      if (v113 >= v113 - 1)
        v114 = v113 - 1;
      else
        v114 = v113;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v110[v112], v114);
      v20 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v18 = v190;
      v15 = v198;
      v12 = v207;
      v9 = v217;
      v6 = v228;
      v3 = v240;
      a1 = v253;
    }
  }
  v21 = v20[199];
  v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v22 & 1) == 0)
  {
    v241 = v3;
    v254 = a1;
    v218 = v9;
    v229 = v6;
    v199 = v15;
    v208 = v12;
    v184 = v21;
    v191 = v18;
    v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v21 = v184;
    v18 = v191;
    v15 = v199;
    v12 = v208;
    v9 = v218;
    v6 = v229;
    v116 = v115;
    v3 = v241;
    a1 = v254;
    if (v116)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      v261 = 83;
      v117 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v117)
        v118 = v117;
      else
        v118 = v261;
      v119 = &v260[v118];
      v120 = v261 - v118;
      if (v261 - v118 >= 0x12)
        v121 = 18;
      else
        v121 = v261 - v118;
      v122 = v120 - v121;
      if (v122 >= v122 - 1)
        v123 = v122 - 1;
      else
        v123 = v122;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v119[v121], v123);
      v23 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v21 = v184;
      v18 = v191;
      v15 = v199;
      v12 = v208;
      v9 = v218;
      v6 = v229;
      v3 = v241;
      a1 = v254;
    }
  }
  v24 = v23[184];
  if ((v25 & 1) == 0)
  {
    v242 = v3;
    v255 = a1;
    v219 = v9;
    v230 = v6;
    v200 = v15;
    v209 = v12;
    v185 = v21;
    v192 = v18;
    v179 = v24;
    v24 = v179;
    v21 = v185;
    v18 = v192;
    v15 = v200;
    v12 = v209;
    v9 = v219;
    v6 = v230;
    v125 = v124;
    v3 = v242;
    a1 = v255;
    if (v125)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v261 = 96;
      v126 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v126)
        v127 = v126;
      else
        v127 = v261;
      v128 = &v260[v127];
      v129 = v261 - v127;
      if (v261 - v127 >= 0x12)
        v130 = 18;
      else
        v130 = v261 - v127;
      v131 = v129 - v130;
      if (v131 >= v131 - 1)
        v132 = v131 - 1;
      else
        v132 = v131;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v128[v130], v132);
      v24 = v179;
      v21 = v185;
      v18 = v192;
      v15 = v200;
      v12 = v209;
      v9 = v219;
      v6 = v230;
      v3 = v242;
      a1 = v255;
    }
  }
  v27 = v26[423];
  v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v28 & 1) == 0)
  {
    v243 = v3;
    v256 = a1;
    v220 = v9;
    v231 = v6;
    v201 = v15;
    v210 = v12;
    v186 = v21;
    v193 = v18;
    v175 = v27;
    v180 = v24;
    v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v27 = v175;
    v24 = v180;
    v21 = v186;
    v18 = v193;
    v15 = v201;
    v12 = v210;
    v9 = v220;
    v6 = v231;
    v134 = v133;
    v3 = v243;
    a1 = v256;
    if (v134)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v261 = 84;
      v135 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v135)
        v136 = v135;
      else
        v136 = v261;
      v137 = &v260[v136];
      v138 = v261 - v136;
      if (v261 - v136 >= 0x12)
        v139 = 18;
      else
        v139 = v261 - v136;
      v140 = v138 - v139;
      if (v140 >= v140 - 1)
        v141 = v140 - 1;
      else
        v141 = v140;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v137[v139], v141);
      v29 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v27 = v175;
      v24 = v180;
      v21 = v186;
      v18 = v193;
      v15 = v201;
      v12 = v210;
      v9 = v220;
      v6 = v231;
      v3 = v243;
      a1 = v256;
    }
  }
  v30 = v29[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v31 & 1) == 0)
  {
    v244 = v3;
    v257 = a1;
    v221 = v9;
    v232 = v6;
    v202 = v15;
    v211 = v12;
    v187 = v21;
    v194 = v18;
    v176 = v27;
    v181 = v24;
    v172 = v30;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v30 = v172;
    v27 = v176;
    v24 = v181;
    v21 = v187;
    v18 = v194;
    v15 = v202;
    v12 = v211;
    v9 = v221;
    v6 = v232;
    v143 = v142;
    v3 = v244;
    a1 = v257;
    if (v143)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v261 = 89;
      v144 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v144)
        v145 = v144;
      else
        v145 = v261;
      v146 = &v260[v145];
      v147 = v261 - v145;
      if (v261 - v145 >= 0x12)
        v148 = 18;
      else
        v148 = v261 - v145;
      v149 = v147 - v148;
      if (v149 >= v149 - 1)
        v150 = v149 - 1;
      else
        v150 = v149;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v146[v148], v150);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v30 = v172;
      v27 = v176;
      v24 = v181;
      v21 = v187;
      v18 = v194;
      v15 = v202;
      v12 = v211;
      v9 = v221;
      v6 = v232;
      v3 = v244;
      a1 = v257;
    }
  }
  v33 = p_vtable[481];
  v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v34 & 1) == 0)
  {
    v245 = v3;
    v258 = a1;
    v222 = v9;
    v233 = v6;
    v203 = v15;
    v212 = v12;
    v188 = v21;
    v195 = v18;
    v177 = v27;
    v182 = v24;
    v170 = v33;
    v173 = v30;
    v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v33 = v170;
    v30 = v173;
    v27 = v177;
    v24 = v182;
    v21 = v188;
    v18 = v195;
    v15 = v203;
    v12 = v212;
    v9 = v222;
    v6 = v233;
    v152 = v151;
    v3 = v245;
    a1 = v258;
    if (v152)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      v261 = 84;
      v153 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v153)
        v154 = v153;
      else
        v154 = v261;
      v155 = &v260[v154];
      v156 = v261 - v154;
      if (v261 - v154 >= 0x12)
        v157 = 18;
      else
        v157 = v261 - v154;
      v158 = v156 - v157;
      if (v158 >= v158 - 1)
        v159 = v158 - 1;
      else
        v159 = v158;
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v155[v157], v159);
      v35 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v33 = v170;
      v30 = v173;
      v27 = v177;
      v24 = v182;
      v21 = v188;
      v18 = v195;
      v15 = v203;
      v12 = v212;
      v9 = v222;
      v6 = v233;
      v3 = v245;
      a1 = v258;
    }
  }
  v36 = v35[190];
  v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v37 & 1) == 0)
  {
    v246 = v3;
    v259 = a1;
    v223 = v9;
    v234 = v6;
    v204 = v15;
    v213 = v12;
    v189 = v21;
    v196 = v18;
    v178 = v27;
    v183 = v24;
    v171 = v33;
    v174 = v30;
    v169 = v36;
    v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v36 = v169;
    v33 = v171;
    v30 = v174;
    v27 = v178;
    v24 = v183;
    v21 = v189;
    v18 = v196;
    v15 = v204;
    v12 = v213;
    v9 = v223;
    v6 = v234;
    v161 = v160;
    v3 = v246;
    a1 = v259;
    if (v161)
    {
      v260 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v261 = 86;
      v162 = llvm::StringRef::find((uint64_t *)&v260, "DesiredTypeName = ", 0x12uLL, 0);
      if (v261 >= v162)
        v163 = v162;
      else
        v163 = v261;
      v164 = &v260[v163];
      v165 = v261 - v163;
      if (v261 - v163 >= 0x12)
        v166 = 18;
      else
        v166 = v261 - v163;
      v167 = v165 - v166;
      if (v167 >= v167 - 1)
        v168 = v167 - 1;
      else
        v168 = v167;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v164[v166], v168);
      v38 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v36 = v169;
      v33 = v171;
      v30 = v174;
      v27 = v178;
      v24 = v183;
      v21 = v189;
      v18 = v196;
      v15 = v204;
      v12 = v213;
      v9 = v223;
      v6 = v234;
      v3 = v246;
      a1 = v259;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || v21 == (_QWORD)a1
      || v24 == (_QWORD)a1
      || v27 == (_QWORD)a1
      || v30 == (_QWORD)a1
      || v33 == a1
      || v36 == (_QWORD)a1
      || v38[138] == (_QWORD)a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, unsigned int *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v7;

  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::RewriteOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl::RewriteOp>,mlir::OpTrait::ZeroResults<mlir::pdl::RewriteOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::RewriteOp>,mlir::OpTrait::VariadicOperands<mlir::pdl::RewriteOp>,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::RewriteOp>,mlir::OpTrait::NoTerminator<mlir::pdl::RewriteOp>,mlir::OpTrait::NoRegionArguments<mlir::pdl::RewriteOp>,mlir::OpTrait::SingleBlock<mlir::pdl::RewriteOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl::RewriteOp>,mlir::OpTrait::OpInvariants<mlir::pdl::RewriteOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::RewriteOp>,mlir::OpTrait::IsTerminator<mlir::pdl::RewriteOp>,mlir::OpAsmOpInterface::Trait<mlir::pdl::RewriteOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::pdl::RewriteOp>,mlir::OpTrait::ZeroResults<mlir::pdl::RewriteOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::RewriteOp>,mlir::OpTrait::VariadicOperands<mlir::pdl::RewriteOp>,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::RewriteOp>,mlir::OpTrait::NoTerminator<mlir::pdl::RewriteOp>,mlir::OpTrait::NoRegionArguments<mlir::pdl::RewriteOp>,mlir::OpTrait::SingleBlock<mlir::pdl::RewriteOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::pdl::RewriteOp>,mlir::OpTrait::OpInvariants<mlir::pdl::RewriteOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::RewriteOp>,mlir::OpTrait::IsTerminator<mlir::pdl::RewriteOp>,mlir::OpAsmOpInterface::Trait<mlir::pdl::RewriteOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl<mlir::pdl::ApplyNativeConstraintOp>::verifyTrait((uint64_t *)a1)
    && mlir::OpTrait::impl::verifyNoRegionArguments(a1, v5)
    && mlir::OpTrait::SingleBlock<mlir::ModuleOp>::verifyTrait((uint64_t)a1)
    && mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)
    && (v8 = a1, mlir::pdl::RewriteOp::verifyInvariantsImpl((uint64_t **)&v8)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::pdl::RewriteOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::pdl::PatternOp>::Impl,mlir::OpTrait::NoTerminator,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::SingleBlock,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::IsTerminator,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(uint64_t *a1)
{
  uint64_t *v2;

  v2 = a1;
  return mlir::pdl::RewriteOp::verifyRegions(&v2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::TypeOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 12 && (*(_QWORD *)a3 == 0x746E6174736E6F63 ? (v7 = *(_DWORD *)(a3 + 8) == 1701869908) : (v7 = 0), v7))
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 12 && *(_QWORD *)result == 0x746E6174736E6F63 && *(_DWORD *)(result + 8) == 1701869908)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"constantType", 12, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  uint64_t v7;

  v7 = mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v7, (const void **)"constantType", (const char *)0xC, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::TypeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::TypeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypeOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::TypeAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __guard v97;
  __guard v98;
  __guard v99;
  __guard v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v120 = 81;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<Empty>]";
      v120 = 113;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[179];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v120 = 84;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[193];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v120 = 89;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || p_vtable[481] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  v7 = a2;
  mlir::pdl::TypeOp::print((mlir::pdl::TypeOp *)&v7, a3);
}

BOOL mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(unsigned int *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::TypeOp>,mlir::OpTrait::OneResult<mlir::pdl::TypeOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::pdl::TypeOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::TypeOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::TypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl::TypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::TypeOp>>((mlir::OpTrait::impl *)a1, a2))return 0;
  if (*(_QWORD *)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 16])
    return 1;
  return verifyHasBindingUse((mlir::Operation *)a1) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::pdl::TypeOp>,mlir::OpTrait::OneResult<mlir::pdl::TypeOp>,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl<mlir::pdl::TypeOp>,mlir::OpTrait::ZeroSuccessors<mlir::pdl::TypeOp>,mlir::OpTrait::ZeroOperands<mlir::pdl::TypeOp>,mlir::OpTrait::OpInvariants<mlir::pdl::TypeOp>,mlir::BytecodeOpInterface::Trait<mlir::pdl::TypeOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t NextResultAtOffset;
  mlir::OpTrait::impl *v10;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
    return 0;
  v6 = *((_QWORD *)a1 + 2 * (((unint64_t)*((unsigned int *)a1 + 11) >> 23) & 1) + 8);
  v10 = a1;
  if (!mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(v6, (const void **)"constantType", (const char *)0xC, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps6(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v10))return 0;
  if (*((_DWORD *)a1 + 9))
    v7 = (uint64_t)a1 - 16;
  else
    v7 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  return mlir::pdl::__mlir_ods_local_type_constraint_PDLOps1((uint64_t *)a1, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::Op<mlir::pdl::TypeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::TypeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::pdl::TypesOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::getInherentAttr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  BOOL v7;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (a4 == 13
    && (*a3 == 0x746E6174736E6F63 ? (v7 = *(_QWORD *)((char *)a3 + 5) == 0x7365707954746E61) : (v7 = 0), v7))
  {
    return *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64) & 0xFFFFFFFFFFFFFF00 | *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else
  {
    return 0;
  }
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v10 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v5 = (_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v5 = 0;
  result = (_QWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  if (v7 == 13 && *result == 0x746E6174736E6F63 && *(_QWORD *)((char *)result + 5) == 0x7365707954746E61)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
        v9 = a4;
      else
        v9 = 0;
      *v5 = v9;
    }
    else
    {
      *v5 = 0;
    }
  }
  return result;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"constantTypes", 13, v5);
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  const void **v7;

  v7 = (const void **)mlir::NamedAttrList::get(a3, **(_QWORD **)(a2 + 96));
  return !v7
      || mlir::pdl::__mlir_ods_local_attr_constraint_PDLOps7(v7, (const void **)"constantTypes", (const char *)0xD, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::initProperties(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  if (a4)
    *a3 = *a4;
  else
    *a3 = 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(_QWORD *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::pdl::TypesOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  mlir::DictionaryAttr *Context;
  uint64_t *v4;

  Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44)))
    v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  else
    v4 = 0;
  return mlir::pdl::TypesOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::copyProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::compareProperties(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::pdl::TypesOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>>(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 v3;
  void **p_vtable;
  int v5;
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;

  v2 = malloc(0x10uLL);
  *v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>::writeProperties;
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v13 = v2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v2 = v13;
    if (v5)
    {
      v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      v15 = 75;
      v6 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
      if (v15 >= v6)
        v7 = v6;
      else
        v7 = v15;
      v8 = &v14[v7];
      v9 = v15 - v7;
      if (v15 - v7 >= 0x12)
        v10 = 18;
      else
        v10 = v15 - v7;
      v11 = v9 - v10;
      if (v11 >= v11 - 1)
        v12 = v11 - 1;
      else
        v12 = v11;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v8[v10], v12);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v2 = v13;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, (unint64_t)p_vtable[482], v2);
}

BOOL mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::pdl::detail::TypesOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3) != 0;
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::pdl::TypesOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64));
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::pdl::TypesOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(void *a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned __int8 v7;
  __guard *v8;
  __guard v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v19;
  void **p_vtable;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  const char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  const char *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __guard v97;
  __guard v98;
  __guard v99;
  __guard v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  const char *v119;
  unint64_t v120;

  v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v1 & 1) == 0)
  {
    v112 = a1;
    v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v29 = v28;
    a1 = v112;
    if (v29)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      v120 = 83;
      v30 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v30)
        v31 = v30;
      else
        v31 = v120;
      v32 = &v119[v31];
      v33 = v120 - v31;
      if (v120 - v31 >= 0x12)
        v34 = 18;
      else
        v34 = v120 - v31;
      v35 = v33 - v34;
      if (v35 >= v35 - 1)
        v36 = v35 - 1;
      else
        v36 = v35;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v32[v34], v36);
      v2 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      a1 = v112;
    }
  }
  v3 = v2[187];
  v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v4 & 1) == 0)
  {
    v113 = a1;
    v106 = v3;
    v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v3 = v106;
    v38 = v37;
    a1 = v113;
    if (v38)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      v120 = 81;
      v39 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v39)
        v40 = v39;
      else
        v40 = v120;
      v41 = &v119[v40];
      v42 = v120 - v40;
      if (v120 - v40 >= 0x12)
        v43 = 18;
      else
        v43 = v120 - v40;
      v44 = v42 - v43;
      if (v44 >= v44 - 1)
        v45 = v44 - 1;
      else
        v45 = v44;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v41[v43], v45);
      v5 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v3 = v106;
      a1 = v113;
    }
  }
  v6 = v5[211];
  if ((v7 & 1) == 0)
  {
    v114 = a1;
    v101 = v6;
    v107 = v3;
    v6 = v101;
    v3 = v107;
    v47 = v46;
    a1 = v114;
    if (v47)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<Empty>]";
      v120 = 114;
      v48 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v48)
        v49 = v48;
      else
        v49 = v120;
      v50 = &v119[v49];
      v51 = v120 - v49;
      if (v120 - v49 >= 0x12)
        v52 = 18;
      else
        v52 = v120 - v49;
      v53 = v51 - v52;
      if (v53 >= v53 - 1)
        v54 = v53 - 1;
      else
        v54 = v53;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::pdl::RangeType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v50[v52], v54);
      v6 = v101;
      v3 = v107;
      a1 = v114;
    }
  }
  v9 = v8[153];
  v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v10 & 1) == 0)
  {
    v115 = a1;
    v102 = v6;
    v108 = v3;
    v97 = v9;
    v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v9 = v97;
    v6 = v102;
    v3 = v108;
    v56 = v55;
    a1 = v115;
    if (v56)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      v120 = 86;
      v57 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v57)
        v58 = v57;
      else
        v58 = v120;
      v59 = &v119[v58];
      v60 = v120 - v58;
      if (v120 - v58 >= 0x12)
        v61 = 18;
      else
        v61 = v120 - v58;
      v62 = v60 - v61;
      if (v62 >= v62 - 1)
        v63 = v62 - 1;
      else
        v63 = v62;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v59[v61], v63);
      v11 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v9 = v97;
      v6 = v102;
      v3 = v108;
      a1 = v115;
    }
  }
  v12 = v11[196];
  v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v13 & 1) == 0)
  {
    v116 = a1;
    v103 = v6;
    v109 = v3;
    v94 = v12;
    v98 = v9;
    v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v94;
    v9 = v98;
    v6 = v103;
    v3 = v109;
    v65 = v64;
    a1 = v116;
    if (v65)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      v120 = 84;
      v66 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v66)
        v67 = v66;
      else
        v67 = v120;
      v68 = &v119[v67];
      v69 = v120 - v67;
      if (v120 - v67 >= 0x12)
        v70 = 18;
      else
        v70 = v120 - v67;
      v71 = v69 - v70;
      if (v71 >= v71 - 1)
        v72 = v71 - 1;
      else
        v72 = v71;
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v68[v70], v72);
      v14 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v94;
      v9 = v98;
      v6 = v103;
      v3 = v109;
      a1 = v116;
    }
  }
  v15 = v14[193];
  v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v16 & 1) == 0)
  {
    v117 = a1;
    v104 = v6;
    v110 = v3;
    v95 = v12;
    v99 = v9;
    v92 = v15;
    v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v15 = v92;
    v12 = v95;
    v9 = v99;
    v6 = v104;
    v3 = v110;
    v74 = v73;
    a1 = v117;
    if (v74)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      v120 = 84;
      v75 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v75)
        v76 = v75;
      else
        v76 = v120;
      v77 = &v119[v76];
      v78 = v120 - v76;
      if (v120 - v76 >= 0x12)
        v79 = 18;
      else
        v79 = v120 - v76;
      v80 = v78 - v79;
      if (v80 >= v80 - 1)
        v81 = v80 - 1;
      else
        v81 = v80;
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v77[v79], v81);
      v17 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v15 = v92;
      v12 = v95;
      v9 = v99;
      v6 = v104;
      v3 = v110;
      a1 = v117;
    }
  }
  v18 = v17[192];
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v19 & 1) == 0)
  {
    v118 = a1;
    v105 = v6;
    v111 = v3;
    v96 = v12;
    v100 = v9;
    v91 = v18;
    v93 = v15;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v18 = v91;
    v15 = v93;
    v12 = v96;
    v9 = v100;
    v6 = v105;
    v3 = v111;
    v83 = v82;
    a1 = v118;
    if (v83)
    {
      v119 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      v120 = 89;
      v84 = llvm::StringRef::find((uint64_t *)&v119, "DesiredTypeName = ", 0x12uLL, 0);
      if (v120 >= v84)
        v85 = v84;
      else
        v85 = v120;
      v86 = &v119[v85];
      v87 = v120 - v85;
      if (v120 - v85 >= 0x12)
        v88 = 18;
      else
        v88 = v120 - v85;
      v89 = v87 - v88;
      if (v89 >= v89 - 1)
        v90 = v89 - 1;
      else
        v90 = v89;
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v86[v88], v90);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v18 = v91;
      v15 = v93;
      v12 = v96;
      v9 = v100;
      v6 = v105;
      v3 = v111;
      a1 = v118;
    }
  }
  return (void *)v3 == a1
      || v6 == (_QWORD)a1
      || v9 == (_QWORD)a1
      || v12 == (_QWORD)a1
      || v15 == (_QWORD)a1
      || v18 == (_QWORD)a1
      || p_vtable[481] == a1;
}

