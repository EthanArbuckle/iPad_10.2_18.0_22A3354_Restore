void mlir::intrange::extUIRange(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3;
  const void **v6;
  const void **v7;
  void *__p;
  unsigned int v9;
  void *v10;
  unsigned int v11;

  v3 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  llvm::APInt::zext(v6, v3, (uint64_t)&v10);
  v7 = (const void **)mlir::ConstantIntRanges::umax(this);
  llvm::APInt::zext(v7, v3, (uint64_t)&__p);
  mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v10, (const llvm::APInt *)&__p, a3);
  if (v9 >= 0x41 && __p)
    operator delete[](__p);
  if (v11 >= 0x41)
  {
    if (v10)
      operator delete[](v10);
  }
}

void mlir::intrange::extSIRange(mlir::intrange *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3;
  const void **v6;
  const void **v7;
  void *__p;
  unsigned int v9;
  void *v10;
  unsigned int v11;

  v3 = a2;
  v6 = (const void **)mlir::ConstantIntRanges::smin(this);
  llvm::APInt::sext(v6, v3, (uint64_t)&v10);
  v7 = (const void **)mlir::ConstantIntRanges::smax(this);
  llvm::APInt::sext(v7, v3, (uint64_t)&__p);
  mlir::ConstantIntRanges::fromSigned((mlir::ConstantIntRanges *)&v10, (const llvm::APInt *)&__p, a3);
  if (v9 >= 0x41 && __p)
    operator delete[](__p);
  if (v11 >= 0x41)
  {
    if (v10)
      operator delete[](v10);
  }
}

void mlir::intrange::inferAdd(mlir::GenericProgramPoint *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::GenericProgramPoint *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  void *__p;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  void *v27;
  unsigned int v28;
  void *v29;
  unsigned int v30;

  v4 = (mlir::GenericProgramPoint *)((char *)a1 + 64);
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  v6 = v5;
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  v8 = v7;
  v9 = mlir::ConstantIntRanges::umax(a1);
  v10 = mlir::ConstantIntRanges::umax(v4);
  computeBoundsBy(&v23, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v23, v6, v8, v9, v10, 0);
  v11 = mlir::ConstantIntRanges::smin(a1);
  v12 = mlir::ConstantIntRanges::smin(v4);
  v13 = mlir::ConstantIntRanges::smax(a1);
  v14 = mlir::ConstantIntRanges::smax(v4);
  computeBoundsBy(&v15, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v23, v11, v12, v13, v14, (const llvm::APInt *)1);
  mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v23, (const mlir::ConstantIntRanges *)&v15, a2);
  if (v22 >= 0x41 && __p)
    operator delete[](__p);
  if (v20 >= 0x41 && v19)
    operator delete[](v19);
  if (v18 >= 0x41 && v17)
    operator delete[](v17);
  if (v16 >= 0x41 && v15)
    operator delete[](v15);
  if (v30 >= 0x41 && v29)
    operator delete[](v29);
  if (v28 >= 0x41 && v27)
    operator delete[](v27);
  if (v26 >= 0x41 && v25)
    operator delete[](v25);
  if (v24 >= 0x41)
  {
    if (v23)
      operator delete[](v23);
  }
}

void computeBoundsBy(_DWORD *a1, void (*a2)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const llvm::APInt *a8)
{
  BOOL v15;
  void *__p;
  unsigned int v17;
  char v18;
  void *v19;
  unsigned int v20;
  char v21;

  a2(&v19, a3, a4, a5);
  a2(&__p, a3, a6, a7);
  if (v21)
    v15 = v18 == 0;
  else
    v15 = 1;
  if (v15)
  {
    mlir::ConstantIntRanges::maxRange((mlir::ConstantIntRanges *)*(unsigned int *)(a4 + 8), a1);
    if (!v18)
      goto LABEL_12;
  }
  else
  {
    mlir::ConstantIntRanges::range((mlir::ConstantIntRanges *)&v19, (const llvm::APInt *)&__p, a8, a1);
    if (!v18)
      goto LABEL_12;
  }
  if (v17 >= 0x41 && __p)
    operator delete[](__p);
LABEL_12:
  if (v21 && v20 >= 0x41)
  {
    if (v19)
      operator delete[](v19);
  }
}

void mlir::intrange::inferSub(mlir::GenericProgramPoint *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::ConstantIntRanges *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  void *__p;
  unsigned int v21;
  void *v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  void *v28;
  unsigned int v29;

  v4 = (mlir::GenericProgramPoint *)((char *)a1 + 64);
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  v6 = v5;
  v7 = mlir::ConstantIntRanges::umax(v4);
  v8 = mlir::ConstantIntRanges::umax(a1);
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  computeBoundsBy(&v22, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v22, v6, v7, v8, v9, 0);
  v10 = mlir::ConstantIntRanges::smin(a1);
  v11 = mlir::ConstantIntRanges::smax(v4);
  v12 = mlir::ConstantIntRanges::smax(a1);
  v13 = mlir::ConstantIntRanges::smin(v4);
  computeBoundsBy(&v14, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v22, v10, v11, v12, v13, (const llvm::APInt *)1);
  mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v22, (const mlir::ConstantIntRanges *)&v14, a2);
  if (v21 >= 0x41 && __p)
    operator delete[](__p);
  if (v19 >= 0x41 && v18)
    operator delete[](v18);
  if (v17 >= 0x41 && v16)
    operator delete[](v16);
  if (v15 >= 0x41 && v14)
    operator delete[](v14);
  if (v29 >= 0x41 && v28)
    operator delete[](v28);
  if (v27 >= 0x41 && v26)
    operator delete[](v26);
  if (v25 >= 0x41 && v24)
    operator delete[](v24);
  if (v23 >= 0x41)
  {
    if (v22)
      operator delete[](v22);
  }
}

void mlir::intrange::inferMul(mlir::GenericProgramPoint *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::GenericProgramPoint *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  void *__p;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  void *v35;
  unsigned int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::GenericProgramPoint *)((char *)a1 + 64);
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  v26 = *(_DWORD *)(v5 + 8);
  if (v26 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, (const void **)v5);
  else
    v25 = *(void **)v5;
  v6 = mlir::ConstantIntRanges::umax(a1);
  v28 = *(_DWORD *)(v6 + 8);
  if (v28 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v6);
  else
    __p = *(void **)v6;
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  v34 = *(_DWORD *)(v7 + 8);
  if (v34 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v33, (const void **)v7);
  else
    v33 = *(void **)v7;
  v8 = mlir::ConstantIntRanges::umax(v4);
  v36 = *(_DWORD *)(v8 + 8);
  if (v36 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v35, (const void **)v8);
  else
    v35 = *(void **)v8;
  minMaxBy(&v13, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v13, (uint64_t)&v25, 2, (uint64_t)&v33, 2, 0);
  if (v36 >= 0x41 && v35)
    operator delete[](v35);
  if (v34 >= 0x41 && v33)
    operator delete[](v33);
  if (v28 >= 0x41 && __p)
    operator delete[](__p);
  if (v26 >= 0x41 && v25)
    operator delete[](v25);
  v9 = mlir::ConstantIntRanges::smin(a1);
  v34 = *(_DWORD *)(v9 + 8);
  if (v34 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v33, (const void **)v9);
  else
    v33 = *(void **)v9;
  v10 = mlir::ConstantIntRanges::smax(a1);
  v36 = *(_DWORD *)(v10 + 8);
  if (v36 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v35, (const void **)v10);
  else
    v35 = *(void **)v10;
  v11 = mlir::ConstantIntRanges::smin(v4);
  v22 = *(_DWORD *)(v11 + 8);
  if (v22 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, (const void **)v11);
  else
    v21 = *(void **)v11;
  v12 = mlir::ConstantIntRanges::smax(v4);
  v24 = *(_DWORD *)(v12 + 8);
  if (v24 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const void **)v12);
  else
    v23 = *(void **)v12;
  minMaxBy(&v25, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>, (uint64_t)&v13, (uint64_t)&v33, 2, (uint64_t)&v21, 2, (llvm::APInt *)1);
  if (v24 >= 0x41 && v23)
    operator delete[](v23);
  if (v22 >= 0x41 && v21)
    operator delete[](v21);
  if (v36 >= 0x41 && v35)
    operator delete[](v35);
  if (v34 >= 0x41 && v33)
    operator delete[](v33);
  mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v13, (const mlir::ConstantIntRanges *)&v25, a2);
  if (v32 >= 0x41 && v31)
    operator delete[](v31);
  if (v30 >= 0x41 && v29)
    operator delete[](v29);
  if (v28 >= 0x41 && __p)
    operator delete[](__p);
  if (v26 >= 0x41 && v25)
    operator delete[](v25);
  if (v20 >= 0x41 && v19)
    operator delete[](v19);
  if (v18 >= 0x41 && v17)
    operator delete[](v17);
  if (v16 >= 0x41 && v15)
    operator delete[](v15);
  if (v14 >= 0x41)
  {
    if (v13)
      operator delete[](v13);
  }
}

void minMaxBy(_DWORD *a1, void (*a2)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, llvm::APInt *a8)
{
  uint64_t v12;
  mlir::ConstantIntRanges *v16;
  unint64_t v17;
  void *v18;
  void **v19;
  unsigned int v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void **p_p;
  unsigned int v26;
  void **v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  unsigned int v33;
  void *v34;
  unsigned int v35;
  unsigned __int8 v36;
  void *v37;
  unsigned int v38;
  void *v39;
  unsigned int v40;

  v12 = a4;
  v16 = (mlir::ConstantIntRanges *)*(unsigned int *)(a4 + 8);
  v40 = *(_DWORD *)(a4 + 8);
  if ((_DWORD)a8)
  {
    if (v16 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v39, -1, 1);
      LODWORD(v17) = (_DWORD)v16 - 1;
      if (v40 > 0x40)
      {
        v19 = (void **)((char *)v39 + 8 * (v17 >> 6));
LABEL_16:
        *v19 = (void *)((unint64_t)*v19 & ~(1 << v17));
        v38 = v16;
        if (v16 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v37, 0, 0);
          v20 = (_DWORD)v16 - 1;
          if (v38 > 0x40)
          {
            v21 = (void **)((char *)v37 + 8 * (v20 >> 6));
LABEL_21:
            *v21 = (void *)((1 << v20) | (unint64_t)*v21);
            if (!a5)
              goto LABEL_55;
            goto LABEL_22;
          }
        }
        else
        {
          v37 = 0;
          LOBYTE(v20) = (_BYTE)v16 - 1;
        }
        v21 = &v37;
        goto LABEL_21;
      }
    }
    else
    {
      v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
      if (!(_DWORD)v16)
        v17 = 0;
      v39 = (void *)v17;
      LOBYTE(v17) = (_BYTE)v16 - 1;
    }
    v19 = &v39;
    goto LABEL_16;
  }
  if (v16 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v39, -1, 1);
    v38 = v16;
    llvm::APInt::initSlowCase((llvm::APInt *)&v37, 0, 0);
    if (!a5)
      goto LABEL_55;
  }
  else
  {
    v18 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
    if (!(_DWORD)v16)
      v18 = 0;
    v39 = v18;
    v38 = v16;
    v37 = 0;
    if (!a5)
      goto LABEL_55;
  }
LABEL_22:
  if (a7)
  {
    v22 = 16 * a7;
    v29 = v12 + 16 * a5;
    v30 = 16 * a7;
    v31 = a6;
    do
    {
      v23 = a6;
      do
      {
        a2(&v34, a3, v12, v23);
        v24 = v36;
        if (!v36)
        {
          mlir::ConstantIntRanges::maxRange(v16, a1);
          goto LABEL_48;
        }
        v33 = v35;
        __p = v34;
        v35 = 0;
        p_p = &__p;
        if ((_DWORD)a8)
        {
          if ((llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)&v39) & 0x80000000) != 0)
            goto LABEL_32;
LABEL_31:
          p_p = &v39;
          goto LABEL_32;
        }
        if ((llvm::APInt::compare((llvm::APInt *)&__p, (const llvm::APInt *)&v39) & 0x80000000) == 0)
          goto LABEL_31;
LABEL_32:
        if (v40 > 0x40 || (v26 = *((_DWORD *)p_p + 2), v26 > 0x40))
        {
          llvm::APInt::assignSlowCase((const void **)&v39, (const void **)p_p);
          v27 = &__p;
          if (!(_DWORD)a8)
          {
LABEL_35:
            if ((int)llvm::APInt::compare((llvm::APInt *)&__p, (const llvm::APInt *)&v37) > 0)
              goto LABEL_39;
            goto LABEL_41;
          }
        }
        else
        {
          v39 = *p_p;
          v40 = v26;
          v27 = &__p;
          if (!(_DWORD)a8)
            goto LABEL_35;
        }
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&__p, (const llvm::APInt *)&v37) > 0)
        {
LABEL_39:
          if (v38 > 0x40)
            goto LABEL_45;
          goto LABEL_42;
        }
LABEL_41:
        v27 = &v37;
        if (v38 > 0x40)
          goto LABEL_45;
LABEL_42:
        v28 = *((_DWORD *)v27 + 2);
        if (v28 > 0x40)
        {
LABEL_45:
          llvm::APInt::assignSlowCase((const void **)&v37, (const void **)v27);
          if (v33 < 0x41)
            goto LABEL_48;
          goto LABEL_46;
        }
        v37 = *v27;
        v38 = v28;
        if (v33 < 0x41)
          goto LABEL_48;
LABEL_46:
        if (__p)
          operator delete[](__p);
LABEL_48:
        if (v36 && v35 >= 0x41 && v34)
          operator delete[](v34);
        if (!v24)
          goto LABEL_56;
        v23 += 16;
        v22 -= 16;
      }
      while (v22);
      v12 += 16;
      v22 = v30;
      a6 = v31;
    }
    while (v12 != v29);
  }
LABEL_55:
  mlir::ConstantIntRanges::range((mlir::ConstantIntRanges *)&v39, (const llvm::APInt *)&v37, a8, a1);
LABEL_56:
  if (v38 >= 0x41 && v37)
    operator delete[](v37);
  if (v40 >= 0x41)
  {
    if (v39)
      operator delete[](v39);
  }
}

void mlir::intrange::inferDivU(mlir::GenericProgramPoint *this@<X0>, _DWORD *a2@<X8>)
{
  char v2;

  inferDivURange(a2, this, (mlir::GenericProgramPoint *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v2);
}

void inferDivURange(_DWORD *a1, mlir::GenericProgramPoint *this, mlir::GenericProgramPoint *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  mlir::ConstantIntRanges *v14;
  _QWORD *v15;
  _QWORD v16[2];
  void *v17;
  unsigned int v18;
  void *__p;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v16[0] = a4;
  v16[1] = a5;
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  v9 = v8;
  v10 = mlir::ConstantIntRanges::umax(this);
  mlir::GenericProgramPoint::~GenericProgramPoint(a3);
  v12 = v11;
  v13 = mlir::ConstantIntRanges::umax(a3);
  v14 = (mlir::ConstantIntRanges *)v12[2];
  if (v14 <= 0x40)
  {
    if (*(_QWORD *)v12)
      goto LABEL_3;
LABEL_9:
    mlir::ConstantIntRanges::maxRange(v14, a1);
    return;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v12) == (_DWORD)v14)
    goto LABEL_9;
LABEL_3:
  v15 = v16;
  v22 = *(_DWORD *)(v9 + 8);
  if (v22 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, (const void **)v9);
    v24 = *(_DWORD *)(v10 + 8);
    if (v24 > 0x40)
    {
LABEL_5:
      llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const void **)v10);
      v18 = v12[2];
      if (v18 > 0x40)
        goto LABEL_6;
LABEL_12:
      v17 = *(void **)v12;
      v20 = *(_DWORD *)(v13 + 8);
      if (v20 > 0x40)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else
  {
    v21 = *(void **)v9;
    v24 = *(_DWORD *)(v10 + 8);
    if (v24 > 0x40)
      goto LABEL_5;
  }
  v23 = *(void **)v10;
  v18 = v12[2];
  if (v18 <= 0x40)
    goto LABEL_12;
LABEL_6:
  llvm::APInt::initSlowCase((llvm::APInt *)&v17, (const void **)v12);
  v20 = *(_DWORD *)(v13 + 8);
  if (v20 > 0x40)
  {
LABEL_7:
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v13);
    goto LABEL_14;
  }
LABEL_13:
  __p = *(void **)v13;
LABEL_14:
  minMaxBy(a1, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivURange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>, (uint64_t)&v15, (uint64_t)&v21, 2, (uint64_t)&v17, 2, 0);
  if (v20 >= 0x41 && __p)
    operator delete[](__p);
  if (v18 >= 0x41 && v17)
    operator delete[](v17);
  if (v24 >= 0x41 && v23)
    operator delete[](v23);
  if (v22 >= 0x41)
  {
    if (v21)
      operator delete[](v21);
  }
}

void mlir::intrange::inferCeilDivU(mlir::GenericProgramPoint *this@<X0>, _DWORD *a2@<X8>)
{
  char v2;

  inferDivURange(a2, this, (mlir::GenericProgramPoint *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v2);
}

void mlir::intrange::inferDivS(mlir::ConstantIntRanges *this@<X0>, _DWORD *a2@<X8>)
{
  char v2;

  inferDivSRange(a2, this, (mlir::ConstantIntRanges *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v2);
}

void inferDivSRange(_DWORD *a1, mlir::ConstantIntRanges *this, mlir::ConstantIntRanges *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  mlir::ConstantIntRanges *v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v18[2];
  void *v19;
  unsigned int v20;
  void *__p;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18[0] = a4;
  v18[1] = a5;
  v8 = mlir::ConstantIntRanges::smin(this);
  v9 = mlir::ConstantIntRanges::smax(this);
  v10 = (unsigned int *)mlir::ConstantIntRanges::smin(a3);
  v11 = mlir::ConstantIntRanges::smax(a3);
  v12 = (mlir::ConstantIntRanges *)v10[2];
  v13 = (_DWORD)v12 - 1;
  if (v12 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)v10 + 8 * (v13 >> 6)) >> v13) & 1) == 0
      && llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v10) != (_DWORD)v12)
    {
      goto LABEL_11;
    }
  }
  else if (((*(_QWORD *)v10 >> v13) & 1) == 0 && *(_QWORD *)v10)
  {
    goto LABEL_11;
  }
  v14 = *(_DWORD *)(v11 + 8);
  v15 = v14 - 1;
  if (v14 >= 0x41)
    v16 = (_QWORD *)(*(_QWORD *)v11 + 8 * ((v14 - 1) >> 6));
  else
    v16 = (_QWORD *)v11;
  if (((*v16 >> v15) & 1) == 0)
  {
    mlir::ConstantIntRanges::maxRange(v12, a1);
    return;
  }
LABEL_11:
  v17 = v18;
  v24 = *(_DWORD *)(v8 + 8);
  if (v24 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const void **)v8);
    v26 = *(_DWORD *)(v9 + 8);
    if (v26 > 0x40)
    {
LABEL_13:
      llvm::APInt::initSlowCase((llvm::APInt *)&v25, (const void **)v9);
      v20 = v10[2];
      if (v20 > 0x40)
        goto LABEL_14;
LABEL_18:
      v19 = *(void **)v10;
      v22 = *(_DWORD *)(v11 + 8);
      if (v22 > 0x40)
        goto LABEL_15;
      goto LABEL_19;
    }
  }
  else
  {
    v23 = *(void **)v8;
    v26 = *(_DWORD *)(v9 + 8);
    if (v26 > 0x40)
      goto LABEL_13;
  }
  v25 = *(void **)v9;
  v20 = v10[2];
  if (v20 <= 0x40)
    goto LABEL_18;
LABEL_14:
  llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)v10);
  v22 = *(_DWORD *)(v11 + 8);
  if (v22 > 0x40)
  {
LABEL_15:
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v11);
    goto LABEL_20;
  }
LABEL_19:
  __p = *(void **)v11;
LABEL_20:
  minMaxBy(a1, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivSRange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>, (uint64_t)&v17, (uint64_t)&v23, 2, (uint64_t)&v19, 2, (llvm::APInt *)1);
  if (v22 >= 0x41 && __p)
    operator delete[](__p);
  if (v20 >= 0x41 && v19)
    operator delete[](v19);
  if (v26 >= 0x41 && v25)
    operator delete[](v25);
  if (v24 >= 0x41)
  {
    if (v23)
      operator delete[](v23);
  }
}

void mlir::intrange::inferCeilDivS(mlir::ConstantIntRanges *this@<X0>, _DWORD *a2@<X8>)
{
  char v2;

  inferDivSRange(a2, this, (mlir::ConstantIntRanges *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v2);
}

void mlir::intrange::inferFloorDivS(mlir::ConstantIntRanges *this@<X0>, _DWORD *a2@<X8>)
{
  char v2;

  inferDivSRange(a2, this, (mlir::ConstantIntRanges *)((char *)this + 64), (uint64_t)llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferFloorDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v2);
}

void mlir::intrange::inferRemS(mlir::ConstantIntRanges *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::ConstantIntRanges *v4;
  uint64_t v5;
  llvm::APInt *v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  _QWORD *v20;
  unsigned int v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  void **v37;
  void **v38;
  const void **v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  int v43;
  void *v44;
  unsigned int v45;
  void *__p;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  uint64_t *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  unint64_t *v54;
  unsigned int v55;
  void *v56;
  unsigned int v57;
  void *v58;
  unsigned int v59;
  void *v60;
  unsigned int v61;
  char *v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;

  v4 = (mlir::ConstantIntRanges *)((char *)a1 + 64);
  v5 = mlir::ConstantIntRanges::smin(a1);
  v6 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  v7 = (llvm::APInt *)mlir::ConstantIntRanges::smin(v4);
  v8 = mlir::ConstantIntRanges::smax(v4);
  v9 = *(_DWORD *)(v8 + 8);
  v65 = v9;
  if (v9 < 0x41)
  {
    v64 = 1 << (v9 - 1);
    v63 = v9;
    v10 = (char *)(0xFFFFFFFFFFFFFFFFLL >> ((v9 - 1) & 0x3F ^ 0x3F));
    if (!v9)
      v10 = 0;
    v62 = v10;
    LOBYTE(v11) = v9 - 1;
    goto LABEL_9;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v64, 0, 0);
  v11 = v9 - 1;
  if (v65 >= 0x41)
  {
    v12 = v11 >> 6;
    *(_QWORD *)(v64 + 8 * v12) |= 1 << v11;
    v63 = v9;
  }
  else
  {
    v64 |= 1 << v11;
    v63 = v9;
    v12 = v11 >> 6;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v62, -1, 1);
  if (v63 <= 0x40)
  {
LABEL_9:
    v13 = (char *)&v62;
    goto LABEL_11;
  }
  v13 = &v62[8 * v12];
LABEL_11:
  *(_QWORD *)v13 &= ~(1 << v11);
  v14 = *((_DWORD *)v7 + 2);
  v15 = v14 - 1;
  if (v14 > 0x40)
  {
    v17 = *(_QWORD *)v7;
    if (((*(_QWORD *)(*(_QWORD *)v7 + 8 * (v15 >> 6)) >> v15) & 1) == 0
      && llvm::APInt::countLeadingZerosSlowCase(v7) != v14)
    {
      goto LABEL_22;
    }
    v16 = v17;
  }
  else
  {
    v16 = *(_QWORD *)v7;
    if (((*(_QWORD *)v7 >> v15) & 1) == 0 && v16)
      goto LABEL_26;
    v17 = *(_QWORD *)v7;
  }
  v18 = *(_DWORD *)(v8 + 8);
  v19 = v18 - 1;
  if (v18 >= 0x41)
    v20 = (_QWORD *)(*(_QWORD *)v8 + 8 * ((v18 - 1) >> 6));
  else
    v20 = (_QWORD *)v8;
  if (((*v20 >> v19) & 1) == 0)
    goto LABEL_114;
  if (v14 <= 0x40)
  {
LABEL_26:
    if (((v16 >> v15) & 1) == 0 && v16)
      goto LABEL_28;
    goto LABEL_30;
  }
LABEL_22:
  if (((*(_QWORD *)(v17 + 8 * (v15 >> 6)) >> v15) & 1) == 0
    && llvm::APInt::countLeadingZerosSlowCase(v7) != v14)
  {
LABEL_28:
    v61 = *(_DWORD *)(v8 + 8);
    if (v61 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v60, (const void **)v8);
    else
      v60 = *(void **)v8;
    goto LABEL_32;
  }
LABEL_30:
  llvm::APInt::abs((uint64_t **)v7, (llvm::APInt *)&v60);
LABEL_32:
  v21 = *(_DWORD *)(v5 + 8);
  v22 = v21 - 1;
  if (v21 >= 0x41)
    v23 = (uint64_t *)(*(_QWORD *)v5 + 8 * ((v21 - 1) >> 6));
  else
    v23 = (uint64_t *)v5;
  v24 = *v23;
  v25 = *((_DWORD *)v6 + 2);
  v26 = v25 - 1;
  if (v25 <= 0x40)
  {
    if (((*(_QWORD *)v6 >> v26) & 1) == 0)
    {
      v27 = *(_QWORD *)v6 == 0;
      goto LABEL_42;
    }
LABEL_39:
    v28 = 0;
    v29 = 1 << v22;
    v30 = v61;
    v59 = v61;
    if (v61 > 0x40)
      goto LABEL_46;
LABEL_40:
    v58 = 0;
    v55 = v30;
LABEL_47:
    v54 = (unint64_t *)v60;
    goto LABEL_49;
  }
  if (((*(_QWORD *)(*(_QWORD *)v6 + 8 * (v26 >> 6)) >> v26) & 1) != 0)
    goto LABEL_39;
  v27 = llvm::APInt::countLeadingZerosSlowCase(v6) == v25;
LABEL_42:
  v31 = v27;
  v28 = v31 ^ 1;
  v29 = 1 << v22;
  v30 = v61;
  v59 = v61;
  if (v61 <= 0x40)
    goto LABEL_40;
LABEL_46:
  llvm::APInt::initSlowCase((llvm::APInt *)&v58, 0, 0);
  v55 = v61;
  if (v61 <= 0x40)
    goto LABEL_47;
  llvm::APInt::initSlowCase((llvm::APInt *)&v54, (const void **)&v60);
LABEL_49:
  v32 = v29 & v24;
  llvm::APInt::operator-=(&v54, 1uLL);
  v33 = v55;
  v57 = v55;
  v34 = (unint64_t)v54;
  v56 = v54;
  v55 = 0;
  v51 = v57;
  if (v57 < 0x41)
  {
LABEL_52:
    if (v33)
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v33;
    else
      v35 = 0;
    v50 = (uint64_t *)(v35 & ~v34);
    goto LABEL_57;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v50, (const void **)&v56);
  v33 = v51;
  if (v51 <= 0x40)
  {
    v34 = (unint64_t)v50;
    goto LABEL_52;
  }
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v50);
LABEL_57:
  llvm::APInt::operator++(&v50);
  v36 = v51;
  v53 = v51;
  v52 = v50;
  v51 = 0;
  if (v32)
    v37 = &v52;
  else
    v37 = &v58;
  if (v65 > 0x40)
    goto LABEL_65;
  if (!v32)
    v36 = v59;
  if (v36 > 0x40)
  {
LABEL_65:
    llvm::APInt::assignSlowCase((const void **)&v64, (const void **)v37);
  }
  else
  {
    v64 = (uint64_t)*v37;
    v65 = v36;
  }
  v38 = &v58;
  if (v28)
    v39 = (const void **)&v56;
  else
    v39 = (const void **)&v58;
  if (v63 <= 0x40)
  {
    if (v28)
      v38 = &v56;
    v40 = *((_DWORD *)v38 + 2);
    if (v40 <= 0x40)
    {
      v62 = (char *)*v39;
      v63 = v40;
      if (*((_DWORD *)v7 + 2) > 0x40u)
        goto LABEL_74;
LABEL_77:
      if (*(_QWORD *)v7 != *(_QWORD *)v8)
        goto LABEL_102;
LABEL_78:
      v47 = *((_DWORD *)v6 + 2);
      if (v47 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v6);
      else
        __p = *(void **)v6;
      llvm::APInt::operator-=((uint64_t)&__p, (_QWORD **)v5);
      v41 = v47;
      v49 = v47;
      v42 = __p;
      v48 = __p;
      v47 = 0;
      v43 = llvm::APInt::compare((llvm::APInt *)&v48, (const llvm::APInt *)&v60);
      if (v41 >= 0x41)
      {
        if (v42)
        {
          operator delete[](v42);
          if (v47 >= 0x41)
          {
            if (__p)
              operator delete[](__p);
          }
        }
      }
      if (v43 < 0)
      {
        llvm::APInt::srem((llvm::APInt **)v5, (size_t)&v60, (llvm::APInt *)&v48);
        llvm::APInt::srem((llvm::APInt **)v6, (size_t)&v60, (llvm::APInt *)&v44);
        if ((int)llvm::APInt::compareSigned((llvm::APInt *)&v48, (const llvm::APInt *)&v44) <= 0)
        {
          if (v65 > 0x40 || v49 > 0x40)
          {
            llvm::APInt::assignSlowCase((const void **)&v64, (const void **)&v48);
          }
          else
          {
            v64 = (uint64_t)v48;
            v65 = v49;
          }
          if (v63 > 0x40 || v45 > 0x40)
          {
            llvm::APInt::assignSlowCase((const void **)&v62, (const void **)&v44);
          }
          else
          {
            v62 = (char *)v44;
            v63 = v45;
          }
        }
        if (v45 >= 0x41 && v44)
          operator delete[](v44);
        if (v49 >= 0x41 && v48)
          operator delete[](v48);
      }
      goto LABEL_102;
    }
  }
  llvm::APInt::assignSlowCase((const void **)&v62, v39);
  if (*((_DWORD *)v7 + 2) <= 0x40u)
    goto LABEL_77;
LABEL_74:
  if (llvm::APInt::equalSlowCase((const void **)v7, (const void **)v8))
    goto LABEL_78;
LABEL_102:
  if (v53 >= 0x41 && v52)
    operator delete[](v52);
  if (v57 >= 0x41 && v56)
    operator delete[](v56);
  if (v59 >= 0x41 && v58)
    operator delete[](v58);
  if (v61 >= 0x41 && v60)
    operator delete[](v60);
LABEL_114:
  mlir::ConstantIntRanges::fromSigned((mlir::ConstantIntRanges *)&v64, (const llvm::APInt *)&v62, a2);
  if (v63 >= 0x41 && v62)
    operator delete[](v62);
  if (v65 >= 0x41)
  {
    if (v64)
      operator delete[]((void *)v64);
  }
}

uint64_t **llvm::APInt::abs@<X0>(uint64_t **this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v3 = *((_DWORD *)this + 2);
  v4 = v3 - 1;
  if (v3 <= 0x40)
  {
    v5 = *this;
    if ((((unint64_t)*this >> v4) & 1) == 0)
    {
      *((_DWORD *)a2 + 2) = v3;
      *(_QWORD *)a2 = v5;
      return this;
    }
    v8 = *((_DWORD *)this + 2);
    v7 = (unint64_t)v5;
LABEL_6:
    if (v3)
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    else
      v6 = 0;
    v7 = v6 & ~v7;
    goto LABEL_13;
  }
  if ((((unint64_t)(*this)[v4 >> 6] >> v4) & 1) == 0)
  {
    *((_DWORD *)a2 + 2) = v3;
    return (uint64_t **)llvm::APInt::initSlowCase(a2, (const void **)this);
  }
  v8 = *((_DWORD *)this + 2);
  llvm::APInt::initSlowCase((llvm::APInt *)&v7, (const void **)this);
  v3 = v8;
  if (v8 <= 0x40)
    goto LABEL_6;
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v7);
LABEL_13:
  this = llvm::APInt::operator++((uint64_t **)&v7);
  *((_DWORD *)a2 + 2) = v8;
  *(_QWORD *)a2 = v7;
  return this;
}

void mlir::intrange::inferRemU(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::ConstantIntRanges *v4;
  llvm::APInt *v5;
  llvm::APInt *v6;
  size_t v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  llvm::APInt **v13;
  llvm::APInt **v14;
  uint64_t v15;
  llvm::APInt **v16;
  unsigned int v17;
  void *v18;
  int v19;
  void *v20;
  unsigned int v21;
  void *v22;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  void *v26;
  unsigned int v27;
  void *__p;
  unsigned int v29;
  void *v30;
  unsigned int v31;

  v4 = (mlir::ConstantIntRanges *)(a1 + 64);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)(a1 + 64));
  v6 = v5;
  v7 = mlir::ConstantIntRanges::umax(v4);
  v8 = *((_DWORD *)v6 + 2);
  v31 = v8;
  if (v8 <= 0x40)
  {
    v30 = 0;
    v29 = v8;
    v9 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v8);
    if (!v8)
      v9 = 0;
    __p = v9;
LABEL_6:
    if (!*(_QWORD *)v6)
      goto LABEL_46;
    goto LABEL_9;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
  v29 = v8;
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, -1, 1);
  v10 = *((_DWORD *)v6 + 2);
  if (v10 <= 0x40)
    goto LABEL_6;
  if (llvm::APInt::countLeadingZerosSlowCase(v6) == v10)
    goto LABEL_46;
LABEL_9:
  v27 = *(_DWORD *)(v7 + 8);
  if (v27 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, (const void **)v7);
  else
    v26 = *(void **)v7;
  llvm::APInt::operator-=((unint64_t **)&v26, 1uLL);
  v11 = v27;
  v12 = v26;
  v27 = 0;
  if (v29 <= 0x40 || !__p)
  {
    __p = v26;
    v29 = v11;
    if (*((_DWORD *)v6 + 2) <= 0x40u)
      goto LABEL_18;
LABEL_21:
    if (!llvm::APInt::equalSlowCase((const void **)v6, (const void **)v7))
      goto LABEL_46;
    goto LABEL_22;
  }
  operator delete[](__p);
  __p = v12;
  v29 = v11;
  if (v27 >= 0x41 && v26)
    operator delete[](v26);
  if (*((_DWORD *)v6 + 2) > 0x40u)
    goto LABEL_21;
LABEL_18:
  if (*(_QWORD *)v6 != *(_QWORD *)v7)
    goto LABEL_46;
LABEL_22:
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a1);
  v14 = v13;
  v15 = mlir::ConstantIntRanges::umax((mlir::ConstantIntRanges *)a1);
  v16 = (llvm::APInt **)v15;
  v23 = *(_DWORD *)(v15 + 8);
  if (v23 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v22, (const void **)v15);
  else
    v22 = *(void **)v15;
  llvm::APInt::operator-=((uint64_t)&v22, (_QWORD **)v14);
  v17 = v23;
  v25 = v23;
  v18 = v22;
  v24 = v22;
  v23 = 0;
  v19 = llvm::APInt::compare((llvm::APInt *)&v24, (const llvm::APInt *)v7);
  if (v17 >= 0x41)
  {
    if (v18)
    {
      operator delete[](v18);
      if (v23 >= 0x41)
      {
        if (v22)
          operator delete[](v22);
      }
    }
  }
  if (v19 < 0)
  {
    llvm::APInt::urem(v14, v7, (llvm::APInt *)&v24);
    llvm::APInt::urem(v16, v7, (llvm::APInt *)&v20);
    if ((int)llvm::APInt::compare((llvm::APInt *)&v24, (const llvm::APInt *)&v20) <= 0)
    {
      if (v31 > 0x40 || v25 > 0x40)
      {
        llvm::APInt::assignSlowCase((const void **)&v30, (const void **)&v24);
      }
      else
      {
        v30 = v24;
        v31 = v25;
      }
      if (v29 > 0x40 || v21 > 0x40)
      {
        llvm::APInt::assignSlowCase((const void **)&__p, (const void **)&v20);
      }
      else
      {
        __p = v20;
        v29 = v21;
      }
    }
    if (v21 >= 0x41 && v20)
      operator delete[](v20);
    if (v25 >= 0x41 && v24)
      operator delete[](v24);
  }
LABEL_46:
  mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v30, (const llvm::APInt *)&__p, a2);
  if (v29 >= 0x41 && __p)
    operator delete[](__p);
  if (v31 >= 0x41)
  {
    if (v30)
      operator delete[](v30);
  }
}

void mlir::intrange::inferMaxS(mlir::ConstantIntRanges *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::ConstantIntRanges *v4;
  llvm::APInt *v5;
  const llvm::APInt *v6;
  mlir::ConstantIntRanges *v7;
  mlir::ConstantIntRanges *v8;
  llvm::APInt *v9;
  const llvm::APInt *v10;
  mlir::ConstantIntRanges *v11;
  const llvm::APInt *v12;

  v4 = (mlir::ConstantIntRanges *)((char *)a1 + 64);
  v5 = (llvm::APInt *)mlir::ConstantIntRanges::smin(a1);
  v6 = (const llvm::APInt *)mlir::ConstantIntRanges::smin(v4);
  if ((int)llvm::APInt::compareSigned(v5, v6) <= 0)
    v7 = v4;
  else
    v7 = a1;
  v8 = (mlir::ConstantIntRanges *)mlir::ConstantIntRanges::smin(v7);
  v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v4);
  if ((int)llvm::APInt::compareSigned(v9, v10) <= 0)
    v11 = v4;
  else
    v11 = a1;
  v12 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v11);
  mlir::ConstantIntRanges::fromSigned(v8, v12, a2);
}

void mlir::intrange::inferMaxU(mlir::GenericProgramPoint *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::GenericProgramPoint *v4;
  llvm::APInt *v5;
  llvm::APInt *v6;
  const llvm::APInt *v7;
  mlir::GenericProgramPoint *v8;
  mlir::ConstantIntRanges *v9;
  mlir::ConstantIntRanges *v10;
  llvm::APInt *v11;
  const llvm::APInt *v12;
  mlir::ConstantIntRanges *v13;
  const llvm::APInt *v14;

  v4 = (mlir::GenericProgramPoint *)((char *)a1 + 64);
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  v6 = v5;
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  if ((int)llvm::APInt::compare(v6, v7) <= 0)
    v8 = v4;
  else
    v8 = a1;
  mlir::GenericProgramPoint::~GenericProgramPoint(v8);
  v10 = v9;
  v11 = (llvm::APInt *)mlir::ConstantIntRanges::umax(a1);
  v12 = (const llvm::APInt *)mlir::ConstantIntRanges::umax(v4);
  if ((int)llvm::APInt::compare(v11, v12) <= 0)
    v13 = v4;
  else
    v13 = a1;
  v14 = (const llvm::APInt *)mlir::ConstantIntRanges::umax(v13);
  mlir::ConstantIntRanges::fromUnsigned(v10, v14, a2);
}

void mlir::intrange::inferMinS(mlir::ConstantIntRanges *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::ConstantIntRanges *v4;
  llvm::APInt *v5;
  const llvm::APInt *v6;
  mlir::ConstantIntRanges *v7;
  mlir::ConstantIntRanges *v8;
  llvm::APInt *v9;
  const llvm::APInt *v10;
  mlir::ConstantIntRanges *v11;
  const llvm::APInt *v12;

  v4 = (mlir::ConstantIntRanges *)((char *)a1 + 64);
  v5 = (llvm::APInt *)mlir::ConstantIntRanges::smin(a1);
  v6 = (const llvm::APInt *)mlir::ConstantIntRanges::smin(v4);
  if ((int)llvm::APInt::compareSigned(v5, v6) >= 0)
    v7 = v4;
  else
    v7 = a1;
  v8 = (mlir::ConstantIntRanges *)mlir::ConstantIntRanges::smin(v7);
  v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(a1);
  v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v4);
  if ((int)llvm::APInt::compareSigned(v9, v10) >= 0)
    v11 = v4;
  else
    v11 = a1;
  v12 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(v11);
  mlir::ConstantIntRanges::fromSigned(v8, v12, a2);
}

void mlir::intrange::inferMinU(mlir::GenericProgramPoint *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::GenericProgramPoint *v4;
  llvm::APInt *v5;
  llvm::APInt *v6;
  const llvm::APInt *v7;
  mlir::GenericProgramPoint *v8;
  mlir::ConstantIntRanges *v9;
  mlir::ConstantIntRanges *v10;
  llvm::APInt *v11;
  const llvm::APInt *v12;
  mlir::ConstantIntRanges *v13;
  const llvm::APInt *v14;

  v4 = (mlir::GenericProgramPoint *)((char *)a1 + 64);
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  v6 = v5;
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  if ((int)llvm::APInt::compare(v6, v7) >= 0)
    v8 = v4;
  else
    v8 = a1;
  mlir::GenericProgramPoint::~GenericProgramPoint(v8);
  v10 = v9;
  v11 = (llvm::APInt *)mlir::ConstantIntRanges::umax(a1);
  v12 = (const llvm::APInt *)mlir::ConstantIntRanges::umax(v4);
  if ((int)llvm::APInt::compare(v11, v12) >= 0)
    v13 = v4;
  else
    v13 = a1;
  v14 = (const llvm::APInt *)mlir::ConstantIntRanges::umax(v13);
  mlir::ConstantIntRanges::fromUnsigned(v10, v14, a2);
}

void mlir::intrange::inferAnd(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  char v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *__p;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v9, (mlir::GenericProgramPoint *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v5, (mlir::GenericProgramPoint *)(a1 + 64));
  v18 = v10;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v17, (const void **)&v9);
    v20 = v12;
    if (v12 > 0x40)
    {
LABEL_3:
      llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)&v11);
      v14 = v6;
      if (v6 > 0x40)
        goto LABEL_4;
LABEL_8:
      v13 = v5;
      v16 = v8;
      if (v8 > 0x40)
        goto LABEL_5;
LABEL_9:
      __p = v7;
      goto LABEL_10;
    }
  }
  else
  {
    v17 = v9;
    v20 = v12;
    if (v12 > 0x40)
      goto LABEL_3;
  }
  v19 = v11;
  v14 = v6;
  if (v6 <= 0x40)
    goto LABEL_8;
LABEL_4:
  llvm::APInt::initSlowCase((llvm::APInt *)&v13, (const void **)&v5);
  v16 = v8;
  if (v8 <= 0x40)
    goto LABEL_9;
LABEL_5:
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v7);
LABEL_10:
  minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAnd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v4, (uint64_t)&v17, 2, (uint64_t)&v13, 2, 0);
  if (v16 >= 0x41 && __p)
    operator delete[](__p);
  if (v14 >= 0x41 && v13)
    operator delete[](v13);
  if (v20 >= 0x41 && v19)
    operator delete[](v19);
  if (v18 >= 0x41 && v17)
    operator delete[](v17);
  if (v8 >= 0x41 && v7)
    operator delete[](v7);
  if (v6 >= 0x41 && v5)
    operator delete[](v5);
  if (v12 >= 0x41 && v11)
    operator delete[](v11);
  if (v10 >= 0x41)
  {
    if (v9)
      operator delete[](v9);
  }
}

void widenBitwiseBounds(const mlir::ConstantIntRanges *a1, mlir::GenericProgramPoint *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void **p_p;
  unsigned int v8;
  void *v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  void *__p;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  const void *v19;
  unsigned int v20;

  mlir::GenericProgramPoint::~GenericProgramPoint(a2);
  v20 = *(_DWORD *)(v4 + 8);
  if (v20 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)v4);
  else
    v19 = *(const void **)v4;
  v5 = mlir::ConstantIntRanges::umax(a2);
  v18 = *(_DWORD *)(v5 + 8);
  if (v18 <= 0x40)
  {
    v17 = *(_QWORD *)v5;
    v6 = v20;
    v14 = v20;
    if (v20 >= 0x41)
      goto LABEL_6;
LABEL_13:
    p_p = (void **)&v19;
    v8 = v6;
    goto LABEL_14;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v17, (const void **)v5);
  v6 = v20;
  v14 = v20;
  if (v20 < 0x41)
    goto LABEL_13;
LABEL_6:
  p_p = &__p;
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, &v19);
  v8 = v14;
  if (v14 <= 0x40)
  {
LABEL_14:
    v9 = (void *)((unint64_t)*p_p ^ v17);
    __p = v9;
    v14 = 0;
    goto LABEL_15;
  }
  llvm::APInt::xorAssignSlowCase((uint64_t)&__p, (const llvm::APInt *)&v17);
  v8 = v14;
  v9 = __p;
  v16 = v14;
  v15 = __p;
  v14 = 0;
  if (v16 <= 0x40)
  {
LABEL_15:
    v10 = v8 + __clz((unint64_t)v9) - 64;
    goto LABEL_16;
  }
  v10 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v15);
  if (v9)
  {
    operator delete[](v9);
    if (v14 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
  }
LABEL_16:
  llvm::APInt::clearLowBits((llvm::APInt *)&v19, v6 - v10);
  v11 = v6 - v10;
  if (v6 != v10)
  {
    if (v11 > 0x40)
    {
      llvm::APInt::setBitsSlowCase(&v17, 0, v11);
    }
    else
    {
      v12 = 0xFFFFFFFFFFFFFFFFLL >> (v10 - v6);
      if (v18 > 0x40)
        *(_QWORD *)v17 |= v12;
      else
        v17 |= v12;
    }
  }
  *((_DWORD *)a1 + 2) = v20;
  *(_QWORD *)a1 = v19;
  *((_DWORD *)a1 + 6) = v18;
  *((_QWORD *)a1 + 2) = v17;
}

void mlir::intrange::inferOr(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  char v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *__p;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v9, (mlir::GenericProgramPoint *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v5, (mlir::GenericProgramPoint *)(a1 + 64));
  v18 = v10;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v17, (const void **)&v9);
    v20 = v12;
    if (v12 > 0x40)
    {
LABEL_3:
      llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)&v11);
      v14 = v6;
      if (v6 > 0x40)
        goto LABEL_4;
LABEL_8:
      v13 = v5;
      v16 = v8;
      if (v8 > 0x40)
        goto LABEL_5;
LABEL_9:
      __p = v7;
      goto LABEL_10;
    }
  }
  else
  {
    v17 = v9;
    v20 = v12;
    if (v12 > 0x40)
      goto LABEL_3;
  }
  v19 = v11;
  v14 = v6;
  if (v6 <= 0x40)
    goto LABEL_8;
LABEL_4:
  llvm::APInt::initSlowCase((llvm::APInt *)&v13, (const void **)&v5);
  v16 = v8;
  if (v8 <= 0x40)
    goto LABEL_9;
LABEL_5:
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v7);
LABEL_10:
  minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferOr(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v4, (uint64_t)&v17, 2, (uint64_t)&v13, 2, 0);
  if (v16 >= 0x41 && __p)
    operator delete[](__p);
  if (v14 >= 0x41 && v13)
    operator delete[](v13);
  if (v20 >= 0x41 && v19)
    operator delete[](v19);
  if (v18 >= 0x41 && v17)
    operator delete[](v17);
  if (v8 >= 0x41 && v7)
    operator delete[](v7);
  if (v6 >= 0x41 && v5)
    operator delete[](v5);
  if (v12 >= 0x41 && v11)
    operator delete[](v11);
  if (v10 >= 0x41)
  {
    if (v9)
      operator delete[](v9);
  }
}

void mlir::intrange::inferXor(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  char v4;
  void *v5;
  unsigned int v6;
  void *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *__p;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v9, (mlir::GenericProgramPoint *)a1);
  widenBitwiseBounds((const mlir::ConstantIntRanges *)&v5, (mlir::GenericProgramPoint *)(a1 + 64));
  v18 = v10;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v17, (const void **)&v9);
    v20 = v12;
    if (v12 > 0x40)
    {
LABEL_3:
      llvm::APInt::initSlowCase((llvm::APInt *)&v19, (const void **)&v11);
      v14 = v6;
      if (v6 > 0x40)
        goto LABEL_4;
LABEL_8:
      v13 = v5;
      v16 = v8;
      if (v8 > 0x40)
        goto LABEL_5;
LABEL_9:
      __p = v7;
      goto LABEL_10;
    }
  }
  else
  {
    v17 = v9;
    v20 = v12;
    if (v12 > 0x40)
      goto LABEL_3;
  }
  v19 = v11;
  v14 = v6;
  if (v6 <= 0x40)
    goto LABEL_8;
LABEL_4:
  llvm::APInt::initSlowCase((llvm::APInt *)&v13, (const void **)&v5);
  v16 = v8;
  if (v8 <= 0x40)
    goto LABEL_9;
LABEL_5:
  llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)&v7);
LABEL_10:
  minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferXor(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v4, (uint64_t)&v17, 2, (uint64_t)&v13, 2, 0);
  if (v16 >= 0x41 && __p)
    operator delete[](__p);
  if (v14 >= 0x41 && v13)
    operator delete[](v13);
  if (v20 >= 0x41 && v19)
    operator delete[](v19);
  if (v18 >= 0x41 && v17)
    operator delete[](v17);
  if (v8 >= 0x41 && v7)
    operator delete[](v7);
  if (v6 >= 0x41 && v5)
    operator delete[](v5);
  if (v12 >= 0x41 && v11)
    operator delete[](v11);
  if (v10 >= 0x41)
  {
    if (v9)
      operator delete[](v9);
  }
}

void mlir::intrange::inferShl(mlir::GenericProgramPoint *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::GenericProgramPoint *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;
  void *v21;
  unsigned int v22;
  void *v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  void *__p;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  void *v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  void *v35;
  unsigned int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::GenericProgramPoint *)((char *)a1 + 64);
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  v26 = *(_DWORD *)(v5 + 8);
  if (v26 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, (const void **)v5);
  else
    v25 = *(void **)v5;
  v6 = mlir::ConstantIntRanges::umax(a1);
  v28 = *(_DWORD *)(v6 + 8);
  if (v28 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v6);
  else
    __p = *(void **)v6;
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  v34 = *(_DWORD *)(v7 + 8);
  if (v34 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v33, (const void **)v7);
  else
    v33 = *(void **)v7;
  v8 = mlir::ConstantIntRanges::umax(v4);
  v36 = *(_DWORD *)(v8 + 8);
  if (v36 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v35, (const void **)v8);
  else
    v35 = *(void **)v8;
  minMaxBy(&v13, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v13, (uint64_t)&v25, 2, (uint64_t)&v33, 2, 0);
  if (v36 >= 0x41 && v35)
    operator delete[](v35);
  if (v34 >= 0x41 && v33)
    operator delete[](v33);
  if (v28 >= 0x41 && __p)
    operator delete[](__p);
  if (v26 >= 0x41 && v25)
    operator delete[](v25);
  v9 = mlir::ConstantIntRanges::smin(a1);
  v34 = *(_DWORD *)(v9 + 8);
  if (v34 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v33, (const void **)v9);
  else
    v33 = *(void **)v9;
  v10 = mlir::ConstantIntRanges::smax(a1);
  v36 = *(_DWORD *)(v10 + 8);
  if (v36 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v35, (const void **)v10);
  else
    v35 = *(void **)v10;
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  v22 = *(_DWORD *)(v11 + 8);
  if (v22 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v21, (const void **)v11);
  else
    v21 = *(void **)v11;
  v12 = mlir::ConstantIntRanges::umax(v4);
  v24 = *(_DWORD *)(v12 + 8);
  if (v24 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v23, (const void **)v12);
  else
    v23 = *(void **)v12;
  minMaxBy(&v25, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v13, (uint64_t)&v33, 2, (uint64_t)&v21, 2, (llvm::APInt *)1);
  if (v24 >= 0x41 && v23)
    operator delete[](v23);
  if (v22 >= 0x41 && v21)
    operator delete[](v21);
  if (v36 >= 0x41 && v35)
    operator delete[](v35);
  if (v34 >= 0x41 && v33)
    operator delete[](v33);
  mlir::ConstantIntRanges::intersection((mlir::ConstantIntRanges *)&v13, (const mlir::ConstantIntRanges *)&v25, a2);
  if (v32 >= 0x41 && v31)
    operator delete[](v31);
  if (v30 >= 0x41 && v29)
    operator delete[](v29);
  if (v28 >= 0x41 && __p)
    operator delete[](__p);
  if (v26 >= 0x41 && v25)
    operator delete[](v25);
  if (v20 >= 0x41 && v19)
    operator delete[](v19);
  if (v18 >= 0x41 && v17)
    operator delete[](v17);
  if (v16 >= 0x41 && v15)
    operator delete[](v15);
  if (v14 >= 0x41)
  {
    if (v13)
      operator delete[](v13);
  }
}

void mlir::intrange::inferShrS(mlir::ConstantIntRanges *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::GenericProgramPoint *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  void *__p;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::ConstantIntRanges *)((char *)a1 + 64);
  v5 = mlir::ConstantIntRanges::smin(a1);
  v14 = *(_DWORD *)(v5 + 8);
  if (v14 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v13, (const void **)v5);
  else
    v13 = *(void **)v5;
  v6 = mlir::ConstantIntRanges::smax(a1);
  v16 = *(_DWORD *)(v6 + 8);
  if (v16 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, (const void **)v6);
  else
    v15 = *(void **)v6;
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  v10 = *(_DWORD *)(v7 + 8);
  if (v10 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v9, (const void **)v7);
  else
    v9 = *(void **)v7;
  v8 = mlir::ConstantIntRanges::umax(v4);
  v12 = *(_DWORD *)(v8 + 8);
  if (v12 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v8);
  else
    __p = *(void **)v8;
  minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v13, (uint64_t)&v13, 2, (uint64_t)&v9, 2, (llvm::APInt *)1);
  if (v12 >= 0x41 && __p)
    operator delete[](__p);
  if (v10 >= 0x41 && v9)
    operator delete[](v9);
  if (v16 >= 0x41 && v15)
    operator delete[](v15);
  if (v14 >= 0x41)
  {
    if (v13)
      operator delete[](v13);
  }
}

void mlir::intrange::inferShrU(mlir::GenericProgramPoint *a1@<X0>, _DWORD *a2@<X8>)
{
  mlir::GenericProgramPoint *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  void *__p;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::GenericProgramPoint *)((char *)a1 + 64);
  mlir::GenericProgramPoint::~GenericProgramPoint(a1);
  v14 = *(_DWORD *)(v5 + 8);
  if (v14 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v13, (const void **)v5);
  else
    v13 = *(void **)v5;
  v6 = mlir::ConstantIntRanges::umax(a1);
  v16 = *(_DWORD *)(v6 + 8);
  if (v16 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v15, (const void **)v6);
  else
    v15 = *(void **)v6;
  mlir::GenericProgramPoint::~GenericProgramPoint(v4);
  v10 = *(_DWORD *)(v7 + 8);
  if (v10 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v9, (const void **)v7);
  else
    v9 = *(void **)v7;
  v8 = mlir::ConstantIntRanges::umax(v4);
  v12 = *(_DWORD *)(v8 + 8);
  if (v12 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v8);
  else
    __p = *(void **)v8;
  minMaxBy(a2, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>, (uint64_t)&v13, (uint64_t)&v13, 2, (uint64_t)&v9, 2, 0);
  if (v12 >= 0x41 && __p)
    operator delete[](__p);
  if (v10 >= 0x41 && v9)
    operator delete[](v9);
  if (v16 >= 0x41 && v15)
    operator delete[](v15);
  if (v14 >= 0x41)
  {
    if (v13)
      operator delete[](v13);
  }
}

uint64_t mlir::intrange::evaluatePred(uint64_t a1, mlir::ConstantIntRanges *a2, mlir::ConstantIntRanges *a3)
{
  if (isStaticallyTrue(a1, a2, a3))
    return 257;
  else
    return isStaticallyTrue(qword_181247A48[a1], a2, a3) << 8;
}

BOOL isStaticallyTrue(uint64_t a1, mlir::ConstantIntRanges *this, mlir::ConstantIntRanges *a3)
{
  int v5;
  int v6;
  BOOL v7;
  _BOOL8 v8;
  llvm::APInt *v9;
  const llvm::APInt *v10;
  _BOOL8 result;
  llvm::APInt *v12;
  const llvm::APInt *v13;
  int v14;
  llvm::APInt *v15;
  const llvm::APInt *v16;
  int v17;
  llvm::APInt *v18;
  const llvm::APInt *v19;
  llvm::APInt *v20;
  llvm::APInt *v21;
  const llvm::APInt *v22;
  int v23;
  llvm::APInt *v24;
  const llvm::APInt *v25;
  llvm::APInt *v26;
  const llvm::APInt *v27;
  _BOOL4 v28;
  llvm::APInt *v29;
  const llvm::APInt *v30;
  llvm::APInt *v31;
  const llvm::APInt *v32;
  llvm::APInt *v33;
  llvm::APInt *v34;
  const llvm::APInt *v35;
  llvm::APInt *v36;
  const llvm::APInt *v37;
  llvm::APInt *v38;
  llvm::APInt *v39;
  const llvm::APInt *v40;
  _BOOL4 v41;
  void *__p;
  unsigned int v43;
  unsigned __int8 v44;
  void *v45;
  unsigned int v46;
  unsigned __int8 v47;

  switch(a1)
  {
    case 0:
      mlir::ConstantIntRanges::getConstantValue((uint64_t)this, (uint64_t)&v45);
      mlir::ConstantIntRanges::getConstantValue((uint64_t)a3, (uint64_t)&__p);
      v5 = v47;
      v6 = v44;
      if (v47)
        v7 = v44 == 0;
      else
        v7 = 1;
      if (v7)
      {
        v8 = 0;
      }
      else if (v46 > 0x40)
      {
        v8 = llvm::APInt::equalSlowCase((const void **)&v45, (const void **)&__p);
      }
      else
      {
        v8 = v45 == __p;
      }
      if (v6 && v43 >= 0x41 && __p)
      {
        operator delete[](__p);
        v5 = v47;
      }
      if (!v5 || v46 < 0x41 || !v45)
        return v8;
      operator delete[](v45);
      return v8;
    case 1:
      v24 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      v25 = (const llvm::APInt *)mlir::ConstantIntRanges::smin(a3);
      if ((llvm::APInt::compareSigned(v24, v25) & 0x80000000) != 0)
      {
        v28 = 1;
      }
      else
      {
        v26 = (llvm::APInt *)mlir::ConstantIntRanges::smin(this);
        v27 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
        v28 = (int)llvm::APInt::compareSigned(v26, v27) > 0;
      }
      v36 = (llvm::APInt *)mlir::ConstantIntRanges::umax(this);
      mlir::GenericProgramPoint::~GenericProgramPoint(a3);
      if ((llvm::APInt::compare(v36, v37) & 0x80000000) != 0)
      {
        v41 = 1;
      }
      else
      {
        mlir::GenericProgramPoint::~GenericProgramPoint(this);
        v39 = v38;
        v40 = (const llvm::APInt *)mlir::ConstantIntRanges::umax(a3);
        v41 = (int)llvm::APInt::compare(v39, v40) > 0;
      }
      return v28 & v41;
    case 2:
      v9 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      v10 = (const llvm::APInt *)mlir::ConstantIntRanges::smin(a3);
      return llvm::APInt::compareSigned(v9, v10) >> 31;
    case 3:
      v12 = (llvm::APInt *)mlir::ConstantIntRanges::smax(this);
      v13 = (const llvm::APInt *)mlir::ConstantIntRanges::smin(a3);
      v14 = llvm::APInt::compareSigned(v12, v13);
      return v14 < 1;
    case 4:
      v15 = (llvm::APInt *)mlir::ConstantIntRanges::smin(this);
      v16 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
      v17 = llvm::APInt::compareSigned(v15, v16);
      goto LABEL_22;
    case 5:
      v29 = (llvm::APInt *)mlir::ConstantIntRanges::smin(this);
      v30 = (const llvm::APInt *)mlir::ConstantIntRanges::smax(a3);
      v23 = llvm::APInt::compareSigned(v29, v30);
      goto LABEL_19;
    case 6:
      v31 = (llvm::APInt *)mlir::ConstantIntRanges::umax(this);
      mlir::GenericProgramPoint::~GenericProgramPoint(a3);
      return llvm::APInt::compare(v31, v32) >> 31;
    case 7:
      v18 = (llvm::APInt *)mlir::ConstantIntRanges::umax(this);
      mlir::GenericProgramPoint::~GenericProgramPoint(a3);
      v14 = llvm::APInt::compare(v18, v19);
      return v14 < 1;
    case 8:
      mlir::GenericProgramPoint::~GenericProgramPoint(this);
      v34 = v33;
      v35 = (const llvm::APInt *)mlir::ConstantIntRanges::umax(a3);
      v17 = llvm::APInt::compare(v34, v35);
LABEL_22:
      result = v17 > 0;
      break;
    case 9:
      mlir::GenericProgramPoint::~GenericProgramPoint(this);
      v21 = v20;
      v22 = (const llvm::APInt *)mlir::ConstantIntRanges::umax(a3);
      v23 = llvm::APInt::compare(v21, v22);
LABEL_19:
      result = v23 >= 0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivURange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>(uint64_t *a1, llvm::APInt **this, size_t __sz)
{
  uint64_t v5;
  void *__p;
  unsigned int v7;

  v5 = *a1;
  llvm::APInt::udiv(this, __sz, (llvm::APInt *)&__p);
  (*(void (**)(_QWORD, llvm::APInt **, size_t, void **))v5)(*(_QWORD *)(v5 + 8), this, __sz, &__p);
  if (v7 >= 0x41)
  {
    if (__p)
      operator delete[](__p);
  }
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<inferDivSRange(mlir::ConstantIntRanges const&,mlir::ConstantIntRanges const&,llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>)::$_0>(llvm::APInt **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X0>, _BYTE *a4@<X8>)
{
  void *__p;
  unsigned int v9;
  BOOL v10;

  v10 = 0;
  llvm::APInt::sdiv_ov(this, (size_t)a2, &v10, (llvm::APInt *)&__p);
  if (v10)
  {
    *a4 = 0;
    a4[16] = 0;
    if (v9 < 0x41)
      return;
  }
  else
  {
    (**(void (***)(_QWORD, llvm::APInt **, llvm::APInt *, void **))a3)(*(_QWORD *)(*(_QWORD *)a3 + 8), this, a2, &__p);
    if (v9 < 0x41)
      return;
  }
  if (__p)
    operator delete[](__p);
}

void llvm::APInt::clearLowBits(llvm::APInt *this, int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  void *__p;
  unsigned int v8;

  v4 = *((_DWORD *)this + 2);
  v8 = v4;
  if (v4 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
    v5 = v8;
    if (v4 == a2)
      goto LABEL_8;
  }
  else
  {
    __p = 0;
    v5 = v4;
    if (v4 == a2)
    {
LABEL_8:
      if (*((_DWORD *)this + 2) <= 0x40u)
        goto LABEL_9;
LABEL_12:
      llvm::APInt::andAssignSlowCase((uint64_t)this, (const llvm::APInt *)&__p);
      if (v8 < 0x41)
        return;
      goto LABEL_13;
    }
  }
  v6 = v5 - (v4 - a2);
  if (v5 <= 0x40 && v6 <= 0x3F)
  {
    __p = (void *)((unint64_t)__p | (0xFFFFFFFFFFFFFFFFLL >> (a2 - v4) << v6));
    goto LABEL_8;
  }
  llvm::APInt::setBitsSlowCase(&__p, v6, v5);
  if (*((_DWORD *)this + 2) > 0x40u)
    goto LABEL_12;
LABEL_9:
  *(_QWORD *)this &= (unint64_t)__p;
  if (v8 < 0x41)
    return;
LABEL_13:
  if (__p)
    operator delete[](__p);
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const void **this@<X1>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  void *__p;
  unsigned int v6;
  BOOL v7;

  v7 = 0;
  llvm::APInt::uadd_ov(this, a2, &v7, (uint64_t)&__p);
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v6 < 0x41)
      return;
  }
  else
  {
    v4 = v6;
    *(_DWORD *)(a3 + 8) = v6;
    if (v4 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&__p);
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a3 = __p;
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAdd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>(const void **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  void *__p;
  unsigned int v6;
  BOOL v7;

  v7 = 0;
  llvm::APInt::sadd_ov(this, a2, &v7, (uint64_t)&__p);
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v6 < 0x41)
      return;
  }
  else
  {
    v4 = v6;
    *(_DWORD *)(a3 + 8) = v6;
    if (v4 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&__p);
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a3 = __p;
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(const void **this@<X1>, unint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  void *__p;
  unsigned int v6;
  BOOL v7;

  v7 = 0;
  llvm::APInt::usub_ov(this, a2, &v7, (uint64_t)&__p);
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v6 < 0x41)
      return;
  }
  else
  {
    v4 = v6;
    *(_DWORD *)(a3 + 8) = v6;
    if (v4 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&__p);
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a3 = __p;
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferSub(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>(const void **this@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  void *__p;
  unsigned int v6;
  BOOL v7;

  v7 = 0;
  llvm::APInt::ssub_ov(this, a2, &v7, (uint64_t)&__p);
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v6 < 0x41)
      return;
  }
  else
  {
    v4 = v6;
    *(_DWORD *)(a3 + 8) = v6;
    if (v4 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&__p);
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a3 = __p;
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *this@<X1>, const unint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  void *__p;
  unsigned int v6;
  BOOL v7;

  v7 = 0;
  llvm::APInt::umul_ov(this, a2, &v7, (uint64_t *)&__p);
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v6 < 0x41)
      return;
  }
  else
  {
    v4 = v6;
    *(_DWORD *)(a3 + 8) = v6;
    if (v4 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&__p);
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a3 = __p;
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferMul(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_1>(unint64_t **this@<X1>, size_t __sz@<X2>, uint64_t a3@<X8>)
{
  unsigned int v4;
  void *__p;
  unsigned int v6;
  BOOL v7;

  v7 = 0;
  llvm::APInt::smul_ov(this, __sz, &v7, (uint64_t)&__p);
  if (v7)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    if (v6 < 0x41)
      return;
  }
  else
  {
    v4 = v6;
    *(_DWORD *)(a3 + 8) = v6;
    if (v4 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&__p);
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a3 = __p;
      *(_BYTE *)(a3 + 16) = 1;
      if (v6 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(llvm::APInt *a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v3;
  void *result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = *((_DWORD *)a1 + 2);
  v7 = v3;
  if (v3 >= 0x41)
  {
    result = llvm::APInt::initSlowCase((llvm::APInt *)&v6, (const void **)a1);
    v3 = v7;
    a1 = (llvm::APInt *)&v6;
  }
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt **this@<X1>, size_t __sz@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  BOOL v13;
  void *__p;
  unsigned int v15;

  llvm::APInt::urem(this, __sz, (llvm::APInt *)&__p);
  v6 = v15;
  if (v15 > 0x40)
  {
    v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
    if (__p)
      operator delete[](__p);
    if (v8 != v6)
      goto LABEL_3;
LABEL_8:
    v9 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a4 + 8) = v9;
    if (v9 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)a3);
    else
      *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  if (!__p)
    goto LABEL_8;
LABEL_3:
  v13 = 0;
  v7 = *(_DWORD *)(a3 + 8);
  v12 = v7;
  if (v7 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v11, 1, 0);
  else
    v11 = (void *)(v7 != 0);
  llvm::APInt::uadd_ov((const void **)a3, (uint64_t **)&v11, &v13, (uint64_t)&__p);
  if (v12 >= 0x41 && v11)
    operator delete[](v11);
  if (v13)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (v15 < 0x41)
      return;
  }
  else
  {
    v10 = v15;
    *(_DWORD *)(a4 + 8) = v15;
    if (v10 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)&__p);
      *(_BYTE *)(a4 + 16) = 1;
      if (v15 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a4 = __p;
      *(_BYTE *)(a4 + 16) = 1;
      if (v15 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

void *llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(llvm::APInt *a1@<X3>, uint64_t a2@<X8>)
{
  unsigned int v3;
  void *result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v3 = *((_DWORD *)a1 + 2);
  v7 = v3;
  if (v3 >= 0x41)
  {
    result = llvm::APInt::initSlowCase((llvm::APInt *)&v6, (const void **)a1);
    v3 = v7;
    a1 = (llvm::APInt *)&v6;
  }
  v5 = *(_QWORD *)a1;
  *(_DWORD *)(a2 + 8) = v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferCeilDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt **this@<X1>, size_t __sz@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  llvm::APInt **v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  _QWORD *v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  BOOL v22;
  void *__p;
  unsigned int v24;

  llvm::APInt::srem(this, __sz, (llvm::APInt *)&__p);
  v8 = v24;
  if (v24 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v8)
    {
      if (__p)
        operator delete[](__p);
      goto LABEL_17;
    }
  }
  else if (!__p)
  {
LABEL_17:
    v17 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a4 + 8) = v17;
    if (v17 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)a3);
    else
      *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v9 = *((_DWORD *)this + 2);
  v10 = v9 - 1;
  if (v9 >= 0x41)
    v11 = (llvm::APInt **)((char *)*this + 8 * ((v9 - 1) >> 6));
  else
    v11 = this;
  v12 = (((unint64_t)*v11 >> v10) & 1) == 0;
  v13 = *(_DWORD *)(__sz + 8);
  v14 = v13 - 1;
  if (v13 >= 0x41)
    v15 = (_QWORD *)(*(_QWORD *)__sz + 8 * ((v13 - 1) >> 6));
  else
    v15 = (_QWORD *)__sz;
  v16 = v12 ^ (((*v15 >> v14) & 1) == 0);
  if (v8 >= 0x41 && __p)
    operator delete[](__p);
  if ((v16 & 1) != 0)
    goto LABEL_17;
  v22 = 0;
  v18 = *(_DWORD *)(a3 + 8);
  v21 = v18;
  if (v18 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, 1, 0);
  else
    v20 = (void *)(v18 != 0);
  llvm::APInt::sadd_ov((const void **)a3, (const llvm::APInt *)&v20, &v22, (uint64_t)&__p);
  if (v21 >= 0x41 && v20)
    operator delete[](v20);
  if (v22)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (v24 < 0x41)
      return;
  }
  else
  {
    v19 = v24;
    *(_DWORD *)(a4 + 8) = v24;
    if (v19 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)&__p);
      *(_BYTE *)(a4 + 16) = 1;
      if (v24 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a4 = __p;
      *(_BYTE *)(a4 + 16) = 1;
      if (v24 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferFloorDivS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt **this@<X1>, size_t __sz@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  llvm::APInt **v11;
  _BOOL4 v12;
  unsigned int v13;
  char v14;
  _QWORD *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  BOOL v22;
  void *__p;
  unsigned int v24;

  llvm::APInt::srem(this, __sz, (llvm::APInt *)&__p);
  v8 = v24;
  if (v24 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v8)
    {
      if (__p)
        operator delete[](__p);
      goto LABEL_19;
    }
  }
  else if (!__p)
  {
LABEL_19:
    v18 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a4 + 8) = v18;
    if (v18 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)a3);
    else
      *(_QWORD *)a4 = *(_QWORD *)a3;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v9 = *((_DWORD *)this + 2);
  v10 = v9 - 1;
  if (v9 >= 0x41)
    v11 = (llvm::APInt **)((char *)*this + 8 * ((v9 - 1) >> 6));
  else
    v11 = this;
  v12 = (((unint64_t)*v11 >> v10) & 1) == 0;
  v13 = *(_DWORD *)(__sz + 8);
  v14 = v13 - 1;
  if (v13 >= 0x41)
    v15 = (_QWORD *)(*(_QWORD *)__sz + 8 * ((v13 - 1) >> 6));
  else
    v15 = (_QWORD *)__sz;
  v16 = v12 ^ (((*v15 >> v14) & 1) == 0);
  if (v8 >= 0x41 && __p)
    operator delete[](__p);
  if (!v16)
    goto LABEL_19;
  v22 = 0;
  v17 = *(_DWORD *)(a3 + 8);
  v21 = v17;
  if (v17 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, 1, 0);
  else
    v20 = (void *)(v17 != 0);
  llvm::APInt::ssub_ov((const void **)a3, (const llvm::APInt *)&v20, &v22, (uint64_t)&__p);
  if (v21 >= 0x41 && v20)
    operator delete[](v20);
  if (v22)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
    if (v24 < 0x41)
      return;
  }
  else
  {
    v19 = v24;
    *(_DWORD *)(a4 + 8) = v24;
    if (v19 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a4, (const void **)&__p);
      *(_BYTE *)(a4 + 16) = 1;
      if (v24 < 0x41)
        return;
    }
    else
    {
      *(_QWORD *)a4 = __p;
      *(_BYTE *)(a4 + 16) = 1;
      if (v24 < 0x41)
        return;
    }
  }
  if (__p)
    operator delete[](__p);
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferAnd(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(uint64_t *a1@<X1>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v5 = *((_DWORD *)a1 + 2);
  v9 = v5;
  if (v5 >= 0x41)
  {
    result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
    v5 = v9;
    if (v9 > 0x40)
    {
      result = llvm::APInt::andAssignSlowCase((uint64_t)&v8, a2);
      v5 = v9;
      v7 = v8;
      goto LABEL_6;
    }
    a1 = &v8;
  }
  v7 = *(_QWORD *)a2 & *a1;
LABEL_6:
  *(_DWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferOr(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(uint64_t *a1@<X1>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v5 = *((_DWORD *)a1 + 2);
  v9 = v5;
  if (v5 >= 0x41)
  {
    result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
    v5 = v9;
    if (v9 > 0x40)
    {
      result = llvm::APInt::orAssignSlowCase((uint64_t)&v8, a2);
      v5 = v9;
      v7 = v8;
      goto LABEL_6;
    }
    a1 = &v8;
  }
  v7 = *(_QWORD *)a2 | *a1;
LABEL_6:
  *(_DWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferXor(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>@<X0>(uint64_t *a1@<X1>, const llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v5 = *((_DWORD *)a1 + 2);
  v9 = v5;
  if (v5 >= 0x41)
  {
    result = (uint64_t)llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
    v5 = v9;
    if (v9 > 0x40)
    {
      result = llvm::APInt::xorAssignSlowCase((uint64_t)&v8, a2);
      v5 = v9;
      v7 = v8;
      goto LABEL_6;
    }
    a1 = &v8;
  }
  v7 = *(_QWORD *)a2 ^ *a1;
LABEL_6:
  *(_DWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShl(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *this@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;

  v6 = *((unsigned int *)this + 2);
  v7 = this;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(this) > 0x40)
    {
LABEL_7:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return;
    }
    v7 = *(llvm::APInt **)this;
  }
  if (*(_QWORD *)v7 >= v6)
    goto LABEL_7;
  v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
  else
    v8 = *(_QWORD *)a1;
  llvm::APInt::operator<<=((uint64_t)&v8, (uint64_t)this);
  *(_DWORD *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrS(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;

  v6 = *((unsigned int *)a2 + 2);
  v7 = a2;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(a2) > 0x40)
    {
LABEL_7:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return;
    }
    v7 = *(llvm::APInt **)a2;
  }
  if (*(_QWORD *)v7 >= v6)
    goto LABEL_7;
  v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
  else
    v8 = *(_QWORD *)a1;
  llvm::APInt::ashrInPlace((unsigned int *)&v8, (unint64_t **)a2);
  *(_DWORD *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 16) = 1;
}

void llvm::function_ref<std::optional<llvm::APInt> ()(llvm::APInt const&,llvm::APInt const&)>::callback_fn<mlir::intrange::inferShrU(llvm::ArrayRef<mlir::ConstantIntRanges>)::$_0>(llvm::APInt *a1@<X1>, llvm::APInt *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6;
  llvm::APInt *v7;
  uint64_t v8;
  unsigned int v9;

  v6 = *((unsigned int *)a2 + 2);
  v7 = a2;
  if (v6 >= 0x41)
  {
    if (v6 - llvm::APInt::countLeadingZerosSlowCase(a2) > 0x40)
    {
LABEL_7:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 16) = 0;
      return;
    }
    v7 = *(llvm::APInt **)a2;
  }
  if (*(_QWORD *)v7 >= v6)
    goto LABEL_7;
  v9 = *((_DWORD *)a1 + 2);
  if (v9 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v8, (const void **)a1);
  else
    v8 = *(_QWORD *)a1;
  llvm::APInt::lshrInPlace((llvm::APInt *)&v8, a2);
  *(_DWORD *)(a3 + 8) = v9;
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 16) = 1;
}

mlir::mpsx::MPSXDialect *mlir::mpsx::MPSXDialect::MPSXDialect(mlir::mpsx::MPSXDialect *this, mlir::MLIRContext *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v3 = (_QWORD *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"mpsx", 4, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::MPSXDialect,void>::id);
  *v3 = off_1E0E4DAB8;
  mlir::Dialect::addOperations<mlir::mpsx::ANEOp,mlir::mpsx::CPUOp,mlir::mpsx::DeinterleaveOp,mlir::mpsx::FPToIntClampedOp,mlir::mpsx::FileBackedConstantOp,mlir::mpsx::GPUOp,mlir::mpsx::InterleaveOp,mlir::mpsx::ListPopBackOp,mlir::mpsx::ListPushBackOp,mlir::mpsx::MakeListOp,mlir::mpsx::QuantizedGatherOp,mlir::mpsx::QuantizedMatMulOp,mlir::mpsx::RMSNormOp,mlir::mpsx::RegionReturnOp,mlir::mpsx::ReturnStitchedOp,mlir::mpsx::ScaledDotProductAttentionOp,mlir::mpsx::SparseDenseMatMulOp,mlir::mpsx::StitchedOp,mlir::mpsx::VarHandleOp>((uint64_t)v3);
  v4 = operator new(0x18uLL);
  v5 = mlir::TypeID::get<mlir::DialectFoldInterface>();
  v4[1] = this;
  v4[2] = v5;
  *v4 = off_1E0E4DB38;
  v8 = v4;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v8);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  mlir::Dialect::addType<mlir::mpsx::ListType>((uint64_t)this);
  return this;
}

void mlir::mpsx::MPSXDialect::~MPSXDialect(llvm **this)
{
  mlir::Dialect::~Dialect(this);
}

void sub_18082347C(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::mpsx::ANEOp,mlir::mpsx::CPUOp,mlir::mpsx::DeinterleaveOp,mlir::mpsx::FPToIntClampedOp,mlir::mpsx::FileBackedConstantOp,mlir::mpsx::GPUOp,mlir::mpsx::InterleaveOp,mlir::mpsx::ListPopBackOp,mlir::mpsx::ListPushBackOp,mlir::mpsx::MakeListOp,mlir::mpsx::QuantizedGatherOp,mlir::mpsx::QuantizedMatMulOp,mlir::mpsx::RMSNormOp,mlir::mpsx::RegionReturnOp,mlir::mpsx::ReturnStitchedOp,mlir::mpsx::ScaledDotProductAttentionOp,mlir::mpsx::SparseDenseMatMulOp,mlir::mpsx::StitchedOp,mlir::mpsx::VarHandleOp>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v27;

  mlir::RegisteredOperationName::insert<mlir::mpsx::ANEOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::CPUOp>(a1);
  v2 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, (uint64_t)&mlir::mpsx::DeinterleaveOp::getAttributeNames(void)::attrNames, 1);
  v3 = (uint64_t)v27;
  v27 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, (uint64_t)&mlir::mpsx::FPToIntClampedOp::getAttributeNames(void)::attrNames, 1);
  v5 = (uint64_t)v27;
  v27 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, (uint64_t)&mlir::mpsx::FileBackedConstantOp::getAttributeNames(void)::attrNames, 3);
  v7 = (uint64_t)v27;
  v27 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  mlir::RegisteredOperationName::insert<mlir::mpsx::GPUOp>(a1);
  v8 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, (uint64_t)&mlir::mpsx::InterleaveOp::getAttributeNames(void)::attrNames, 1);
  v9 = (uint64_t)v27;
  v27 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  mlir::RegisteredOperationName::insert<mlir::mpsx::ListPopBackOp>(a1);
  v10 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, 0, 0);
  v11 = (uint64_t)v27;
  v27 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, (uint64_t)&mlir::mpsx::MakeListOp::getAttributeNames(void)::attrNames, 2);
  v13 = (uint64_t)v27;
  v27 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, (uint64_t)&mlir::mpsx::QuantizedGatherOp::getAttributeNames(void)::attrNames, 4);
  v15 = (uint64_t)v27;
  v27 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, (uint64_t)&mlir::mpsx::QuantizedMatMulOp::getAttributeNames(void)::attrNames, 6);
  v17 = (uint64_t)v27;
  v27 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, 0, 0);
  v19 = (uint64_t)v27;
  v27 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  mlir::RegisteredOperationName::insert<mlir::mpsx::RegionReturnOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::mpsx::ReturnStitchedOp>(a1);
  v20 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, 0, 0);
  v21 = (uint64_t)v27;
  v27 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, (uint64_t)&mlir::mpsx::SparseDenseMatMulOp::getAttributeNames(void)::attrNames, 3);
  v23 = (uint64_t)v27;
  v27 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = operator new(0x70uLL);
  v27 = mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v27, 0, 0);
  v25 = (uint64_t)v27;
  v27 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return mlir::RegisteredOperationName::insert<mlir::mpsx::VarHandleOp>(a1);
}

uint64_t *mlir::mpsx::MPSXDialect::materializeConstant(uint64_t a1, mlir::OpBuilder *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  _QWORD *v8;
  _QWORD *v9[2];
  uint64_t v10;

  v10 = a4;
  result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3);
  v9[0] = result;
  v9[1] = v8;
  if (result)
    return (uint64_t *)mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::Type &,mlir::ElementsAttr &>(a2, a5, &v10, v9);
  return result;
}

BOOL mlir::mpsx::QuantizedMatMulOp::isInputAffneQuantized(mlir::Operation **this)
{
  mlir::Operation *v1;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;
  mlir::Operation *v5;

  v5 = *this;
  v1 = v5;
  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v5, 1);
  if ((*((_BYTE *)v1 + 46) & 0x80) != 0)
    v3 = *((_QWORD *)v1 + 9);
  else
    v3 = 0;
  return HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength != (unint64_t)ODSOperandIndexAndLength
      && *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24) != 0;
}

uint64_t *mlir::mpsx::QuantizedMatMulOp::getInputDequantizedType(mlir::Operation **this)
{
  mlir::Operation *v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Value;
  uint64_t v15[2];
  mlir::Operation *v16;
  __int128 v17;
  char v18;

  v16 = *this;
  v1 = v16;
  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 9)
                                         + 32
                                         * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v16, 0)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
    goto LABEL_10;
  v3 = *v2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v15[0] = (uint64_t)v2;
  v15[1] = v12;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(v2) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    *(_QWORD *)&v17 = mlir::placement::ReplacedOps::getReplacedByAttr(&v16);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
    LOBYTE(v17) = 0;
    v18 = 0;
    return (uint64_t *)mlir::ShapedType::cloneWith(v15, &v17, Value);
  }
  return v2;
}

BOOL mlir::mpsx::QuantizedMatMulOp::isWeightsAffineQuantized(mlir::Operation **this)
{
  mlir::Operation *v1;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  mlir::Operation *v7;

  v7 = *this;
  v1 = v7;
  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v7, 5);
  if ((*((_BYTE *)v1 + 46) & 0x80) != 0)
    v3 = *((_QWORD *)v1 + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength
    || !*(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24))
  {
    return 0;
  }
  v4 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v7, 9);
  if ((*((_BYTE *)v1 + 46) & 0x80) != 0)
    v5 = *((_QWORD *)v1 + 9);
  else
    v5 = 0;
  return HIDWORD(v4) + (_DWORD)v4 == (unint64_t)v4
      || *(_QWORD *)(v5 + 32 * v4 + 24) == 0;
}

BOOL mlir::mpsx::QuantizedMatMulOp::isWeightsDoubleAffineQuantized(mlir::Operation **this)
{
  mlir::Operation *v1;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;
  mlir::Operation *v5;

  v5 = *this;
  v1 = v5;
  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v5, 9);
  if ((*((_BYTE *)v1 + 46) & 0x80) != 0)
    v3 = *((_QWORD *)v1 + 9);
  else
    v3 = 0;
  return HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength != (unint64_t)ODSOperandIndexAndLength
      && *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24) != 0;
}

_QWORD *mlir::mpsx::QuantizedMatMulOp::getWeightsDequantizedType(mlir::Operation **this)
{
  mlir::Operation *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *ArgAttrsAttr;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t Value;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  size_t v55;
  int v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t OperandRange;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  _QWORD *v73;
  uint64_t v74;
  mlir::Operation *v75;
  uint64_t WeightsQuantParamsAxisAttr;
  __int128 __p;
  _BYTE v78[40];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v75 = *this;
  v1 = v75;
  v2 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 9)
                                        + 32
                                        * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v75, 4)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
    goto LABEL_10;
  v3 = *v2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v73 = v2;
  v74 = v12;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(v2) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    *(_QWORD *)&__p = v1;
    ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&__p, 8);
    if ((*((_BYTE *)v1 + 46) & 0x80) != 0)
      v14 = *((_QWORD *)v1 + 9);
    else
      v14 = 0;
    if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength != (unint64_t)ODSOperandIndexAndLength
      && *(_QWORD *)(v14 + 32 * ODSOperandIndexAndLength + 24))
    {
      v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 9)
                                              + 32
                                              * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v75, 8)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v15)
        goto LABEL_25;
      v16 = *v15;
      v17 = mlir::TypeID::get<mlir::ShapedType>();
      v18 = *(unsigned int *)(v16 + 16);
      if (!(_DWORD)v18)
        goto LABEL_25;
      v19 = *(_QWORD **)(v16 + 8);
      v20 = &v19[2 * v18];
      do
      {
        v21 = v18 >> 1;
        v22 = &v19[2 * (v18 >> 1)];
        v24 = *v22;
        v23 = v22 + 2;
        v18 += ~(v18 >> 1);
        if (v24 < v17)
          v19 = v23;
        else
          v18 = v21;
      }
      while (v18);
      if (v19 != v20 && *v19 == v17)
        v25 = v19[1];
      else
LABEL_25:
        v25 = 0;
      v72[0] = v15;
      v72[1] = v25;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v72))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v72);
        if (v27)
        {
          v28 = 8 * v27;
          while (*ArgAttrsAttr != 0x8000000000000000)
          {
            ++ArgAttrsAttr;
            v28 -= 8;
            if (!v28)
              goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v73))
          {
            v29 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
            if (!v30)
            {
LABEL_36:
              WeightsQuantParamsAxisAttr = mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(&v75);
              if (WeightsQuantParamsAxisAttr)
              {
                mlir::IntegerAttr::getValue(&WeightsQuantParamsAxisAttr, (llvm::APInt *)&__p);
                if (DWORD2(__p) > 0x40)
                {
                  LODWORD(v32) = *(_DWORD *)__p;
                  operator delete[]((void *)__p);
                }
                else
                {
                  v32 = (uint64_t)((_QWORD)__p << -(uint64_t)DWORD2(__p)) >> -(uint64_t)DWORD2(__p);
                }
                v48 = v32 | 0x100000000;
              }
              else
              {
                v48 = 0;
              }
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v72);
              if (v49 != 1 && (v48 & 0x100000000) != 0)
              {
                v50 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v72)
                                + 8 * (v49 - 1));
                if (v50 >= 2)
                {
                  if ((int)v48 <= 0)
                  {
                    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
                    LODWORD(v48) = v51 + v48;
                  }
                  v53 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v73);
                  v54 = v52;
                  *(_QWORD *)&__p = v78;
                  *((_QWORD *)&__p + 1) = 0x500000000;
                  v55 = 8 * v52;
                  if ((unint64_t)(8 * v52) < 0x29)
                  {
                    v56 = 0;
                    v57 = v78;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v78, (8 * v52) >> 3, 8);
                    v56 = DWORD2(__p);
                    v57 = (_BYTE *)__p;
                  }
                  if (v54)
                  {
                    memcpy(&v57[8 * v56], v53, v55);
                    v56 = DWORD2(__p);
                    v57 = (_BYTE *)__p;
                  }
                  v58 = v56 + (v55 >> 3);
                  DWORD2(__p) = v58;
                  *(_QWORD *)&v57[8 * (int)v48] *= v50;
                  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
                  v60 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v57, v58, OperandRange, 0);
                  v61 = (uint64_t)v60;
                  if (!v60)
                    goto LABEL_77;
                  v62 = *v60;
                  v63 = mlir::TypeID::get<mlir::ShapedType>();
                  v64 = *(unsigned int *)(v62 + 16);
                  if (!(_DWORD)v64)
                    goto LABEL_77;
                  v65 = *(_QWORD **)(v62 + 8);
                  v66 = &v65[2 * v64];
                  do
                  {
                    v67 = v64 >> 1;
                    v68 = &v65[2 * (v64 >> 1)];
                    v70 = *v68;
                    v69 = v68 + 2;
                    v64 += ~(v64 >> 1);
                    if (v70 < v63)
                      v65 = v69;
                    else
                      v64 = v67;
                  }
                  while (v64);
                  if (v65 != v66 && *v65 == v63)
                    v71 = v65[1];
                  else
LABEL_77:
                    v71 = 0;
                  v73 = (_QWORD *)v61;
                  v74 = v71;
                  if ((_BYTE *)__p != v78)
                    free((void *)__p);
                }
              }
              goto LABEL_50;
            }
            v31 = 8 * v30;
            while (*v29 != 0x8000000000000000)
            {
              ++v29;
              v31 -= 8;
              if (!v31)
                goto LABEL_36;
            }
          }
        }
      }
      v33 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v73);
      v34 = (uint64_t *)mlir::UnrankedTensorType::get(v33);
      v35 = (uint64_t)v34;
      if (!v34)
        goto LABEL_48;
      v36 = *v34;
      v37 = mlir::TypeID::get<mlir::ShapedType>();
      v38 = *(unsigned int *)(v36 + 16);
      if (!(_DWORD)v38)
        goto LABEL_48;
      v39 = *(_QWORD **)(v36 + 8);
      v40 = &v39[2 * v38];
      do
      {
        v41 = v38 >> 1;
        v42 = &v39[2 * (v38 >> 1)];
        v44 = *v42;
        v43 = v42 + 2;
        v38 += ~(v38 >> 1);
        if (v44 < v37)
          v39 = v43;
        else
          v38 = v41;
      }
      while (v38);
      if (v39 != v40 && *v39 == v37)
        v45 = v39[1];
      else
LABEL_48:
        v45 = 0;
      v73 = (_QWORD *)v35;
      v74 = v45;
    }
LABEL_50:
    *(_QWORD *)&__p = mlir::placement::ReplacedOps::getReplacedByAttr(&v75);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
    LOBYTE(__p) = 0;
    v78[0] = 0;
    return (_QWORD *)mlir::ShapedType::cloneWith((uint64_t *)&v73, &__p, Value);
  }
  return v2;
}

BOOL mlir::mpsx::QuantizedMatMulOp::verify(uint64_t **this)
{
  uint64_t *v2;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  void *v17;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t *InputDequantizedType;
  uint64_t v77;
  _QWORD *WeightsDequantizedType;
  uint64_t v79;
  uint64_t *ArgAttrsAttr;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _BOOL4 Value;
  uint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  uint64_t **v95;
  unint64_t v96;
  unint64_t v97;
  __int128 v98;
  char v99;
  unsigned int v101;
  void *v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  void *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t *v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  const void **v178[4];
  __int16 v179;
  _QWORD v180[2];
  _QWORD v181[2];
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  void *__p;
  _DWORD v186[4];
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  _QWORD v190[20];

  v190[19] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v183 = v2;
  __p = v2;
  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&__p, 1);
  if ((*((_BYTE *)v2 + 46) & 0x80) != 0)
    v4 = v2[9];
  else
    v4 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength
    || !*(_QWORD *)(v4 + 32 * ODSOperandIndexAndLength + 24))
  {
    v12 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 1);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v13 = v183[9];
    else
      v13 = 0;
    if (HIDWORD(v12) + (_DWORD)v12 != (unint64_t)v12
      && *(_QWORD *)(v13 + 32 * v12 + 24)
      || ((v14 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 2),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v15 = 0)
        : (v15 = v183[9]),
          HIDWORD(v14) + (_DWORD)v14 != (unint64_t)v14
       && *(_QWORD *)(v15 + 32 * v14 + 24)))
    {
      v11 = "no input quantization parameters must be set when input isn't quantized";
      goto LABEL_155;
    }
    v16 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 0);
    v17 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9] + 32 * v16 + 24)
                                                                                + 8) & 0xFFFFFFFFFFFFFFF8))
                   + 136);
    if (v17 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v17 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      v11 = "unquantized input must be float type";
      goto LABEL_155;
    }
  }
  else
  {
    __p = v2;
    mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&__p, 1);
    v5 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 1);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v6 = v183[9];
    else
      v6 = 0;
    if (HIDWORD(v5) + (_DWORD)v5 == (unint64_t)v5
      || !*(_QWORD *)(v6 + 32 * v5 + 24)
      || ((v7 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 2),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v8 = 0)
        : (v8 = v183[9]),
          HIDWORD(v7) + (_DWORD)v7 == (unint64_t)v7
       || !*(_QWORD *)(v8 + 32 * v7 + 24)))
    {
      v11 = "quantization parameters missing for affine quantized input";
      goto LABEL_155;
    }
    v9 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 0);
    v10 = v183;
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9] + 32 * v9 + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      v11 = "quantized input must be quantized type";
      goto LABEL_155;
    }
    v103 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 0);
    v104 = *(_QWORD *)(v183[9] + 32 * v103 + 24);
    v105 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 1);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v106 = v183[9];
    else
      v106 = 0;
    if (HIDWORD(v105) + (_DWORD)v105 == (unint64_t)v105)
      v107 = 0;
    else
      v107 = *(_QWORD *)(v106 + 32 * v105 + 24);
    v109 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 2);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v110 = v183[9];
    else
      v110 = 0;
    if (HIDWORD(v109) + (_DWORD)v109 == (unint64_t)v109)
      v111 = 0;
    else
      v111 = *(_QWORD *)(v110 + 32 * v109 + 24);
    v112 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 3);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v113 = v183[9];
    else
      v113 = 0;
    if (HIDWORD(v112) + (_DWORD)v112 == (unint64_t)v112)
      v114 = 0;
    else
      v114 = *(_QWORD *)(v113 + 32 * v112 + 24);
    v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr((mlir::Operation **)&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&__p);
      if (v186[0] > 0x40u)
      {
        LODWORD(v115) = *(_DWORD *)__p;
        operator delete[](__p);
      }
      else
      {
        v115 = (uint64_t)((_QWORD)__p << -(uint64_t)v186[0]) >> -(uint64_t)v186[0];
      }
      v116 = v115 | 0x100000000;
    }
    else
    {
      v116 = 0;
    }
      return 0;
  }
  if (!mlir::mpsx::QuantizedMatMulOp::isWeightsQuantized((mlir::Operation **)&v183))
  {
    v45 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v46 = v183[9];
    else
      v46 = 0;
    if (HIDWORD(v45) + (_DWORD)v45 != (unint64_t)v45
      && *(_QWORD *)(v46 + 32 * v45 + 24))
    {
      goto LABEL_110;
    }
    v47 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6);
    v48 = (*((_BYTE *)v183 + 46) & 0x80) != 0 ? v183[9] : 0;
    if ((HIDWORD(v47) + (_DWORD)v47 == (unint64_t)v47
       || !*(_QWORD *)(v48 + 32 * v47 + 24))
      && ((v49 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 8),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v50 = 0)
        : (v50 = v183[9]),
          (HIDWORD(v49) + (_DWORD)v49 == (unint64_t)v49
        || !*(_QWORD *)(v50 + 32 * v49 + 24))
       && ((v51 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9),
            (*((_BYTE *)v183 + 46) & 0x80) == 0)
         ? (v52 = 0)
         : (v52 = v183[9]),
           (HIDWORD(v51) + (_DWORD)v51 == (unint64_t)v51
         || !*(_QWORD *)(v52 + 32 * v51 + 24))
        && ((v53 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10),
             (*((_BYTE *)v183 + 46) & 0x80) == 0)
          ? (v54 = 0)
          : (v54 = v183[9]),
            HIDWORD(v53) + (_DWORD)v53 == (unint64_t)v53
         || !*(_QWORD *)(v54 + 32 * v53 + 24)))))
    {
      v101 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
      v102 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                               + 32 * v101
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136);
      if (v102 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        || v102 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        goto LABEL_158;
      }
      v11 = "unquantized weights must be float type";
    }
    else
    {
LABEL_110:
      v11 = "no weight quantization parameters must be set when weight isn't quantized";
    }
    goto LABEL_155;
  }
  v29 = v183;
  __p = v183;
  v30 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&__p, 5);
  if ((*((_BYTE *)v29 + 46) & 0x80) != 0)
    v31 = v29[9];
  else
    v31 = 0;
  if (HIDWORD(v30) + (_DWORD)v30 != (unint64_t)v30
    && *(_QWORD *)(v31 + 32 * v30 + 24))
  {
    v32 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&__p, 9);
    v33 = (*((_BYTE *)v29 + 46) & 0x80) != 0 ? v29[9] : 0;
    if (HIDWORD(v32) + (_DWORD)v32 == (unint64_t)v32
      || !*(_QWORD *)(v33 + 32 * v32 + 24))
    {
      v65 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v66 = v183[9];
      else
        v66 = 0;
      if (HIDWORD(v65) + (_DWORD)v65 == (unint64_t)v65
        || !*(_QWORD *)(v66 + 32 * v65 + 24)
        || ((v67 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6),
             (*((_BYTE *)v183 + 46) & 0x80) == 0)
          ? (v68 = 0)
          : (v68 = v183[9]),
            HIDWORD(v67) + (_DWORD)v67 == (unint64_t)v67
         || !*(_QWORD *)(v68 + 32 * v67 + 24)))
      {
        v11 = "quantization parameters missing for affine quantized weights";
        goto LABEL_155;
      }
      v69 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 8);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v70 = v183[9];
      else
        v70 = 0;
      if (HIDWORD(v69) + (_DWORD)v69 != (unint64_t)v69
        && *(_QWORD *)(v70 + 32 * v69 + 24)
        || ((v71 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9),
             (*((_BYTE *)v183 + 46) & 0x80) == 0)
          ? (v72 = 0)
          : (v72 = v183[9]),
            HIDWORD(v71) + (_DWORD)v71 != (unint64_t)v71
         && *(_QWORD *)(v72 + 32 * v71 + 24)
         || ((v73 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10),
              (*((_BYTE *)v183 + 46) & 0x80) == 0)
           ? (v74 = 0)
           : (v74 = v183[9]),
             HIDWORD(v73) + (_DWORD)v73 != (unint64_t)v73
          && *(_QWORD *)(v74 + 32 * v73 + 24))))
      {
        v11 = "extra quantization parameters set when weight is affine quantized";
        goto LABEL_155;
      }
      v125 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                                 + 32 * v125
                                                                                                 + 24)
                                                                                     + 8) & 0xFFFFFFFFFFFFFFF8))
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
        goto LABEL_202;
      v126 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
      v127 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                               + 32 * v126
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136);
      if (v127 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        && v127 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        v11 = "weights affine quantization scale must be float";
        goto LABEL_155;
      }
      v130 = v183;
      v131 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
      v132 = *(_QWORD *)(v183[9] + 32 * v131 + 24);
      v133 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v134 = v183[9];
      else
        v134 = 0;
      if (HIDWORD(v133) + (_DWORD)v133 == (unint64_t)v133)
        v135 = 0;
      else
        v135 = *(_QWORD *)(v134 + 32 * v133 + 24);
      v136 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v137 = v183[9];
      else
        v137 = 0;
      if (HIDWORD(v136) + (_DWORD)v136 == (unint64_t)v136)
        v138 = 0;
      else
        v138 = *(_QWORD *)(v137 + 32 * v136 + 24);
      v139 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 7);
      if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
        v140 = v183[9];
      else
        v140 = 0;
      if (HIDWORD(v139) + (_DWORD)v139 == (unint64_t)v139)
        v141 = 0;
      else
        v141 = *(_QWORD *)(v140 + 32 * v139 + 24);
      v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr((mlir::Operation **)&v183);
      if (v178[0])
      {
        mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&__p);
        if (v186[0] > 0x40u)
        {
          LODWORD(v142) = *(_DWORD *)__p;
          operator delete[](__p);
        }
        else
        {
          v142 = (uint64_t)((_QWORD)__p << -(uint64_t)v186[0]) >> -(uint64_t)v186[0];
        }
        v143 = v142 | 0x100000000;
      }
      else
      {
        v143 = 0;
      }
      v144 = v130;
      v145 = v132;
      v146 = v135;
      v147 = v138;
      v148 = v141;
LABEL_278:
        return 0;
      goto LABEL_158;
    }
  }
  v34 = v183;
  __p = v183;
  v35 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&__p, 8);
  if ((*((_BYTE *)v34 + 46) & 0x80) != 0)
    v36 = v34[9];
  else
    v36 = 0;
  if (HIDWORD(v35) + (_DWORD)v35 == (unint64_t)v35
    || !*(_QWORD *)(v36 + 32 * v35 + 24))
  {
    __p = v183;
    mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&__p, 9);
    v55 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v56 = v183[9];
    else
      v56 = 0;
    if (HIDWORD(v55) + (_DWORD)v55 == (unint64_t)v55
      || !*(_QWORD *)(v56 + 32 * v55 + 24)
      || ((v57 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v58 = 0)
        : (v58 = v183[9]),
          HIDWORD(v57) + (_DWORD)v57 == (unint64_t)v57
       || !*(_QWORD *)(v58 + 32 * v57 + 24)
       || ((v59 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9),
            (*((_BYTE *)v183 + 46) & 0x80) == 0)
         ? (v60 = 0)
         : (v60 = v183[9]),
           HIDWORD(v59) + (_DWORD)v59 == (unint64_t)v59
        || !*(_QWORD *)(v60 + 32 * v59 + 24)
        || ((v61 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10),
             (*((_BYTE *)v183 + 46) & 0x80) == 0)
          ? (v62 = 0)
          : (v62 = v183[9]),
            HIDWORD(v61) + (_DWORD)v61 == (unint64_t)v61
         || !*(_QWORD *)(v62 + 32 * v61 + 24)))))
    {
      v11 = "quantization parameters missing for double affine quantized weights";
      goto LABEL_155;
    }
    v63 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 8);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v64 = v183[9];
    else
      v64 = 0;
    if (HIDWORD(v63) + (_DWORD)v63 != (unint64_t)v63
      && *(_QWORD *)(v64 + 32 * v63 + 24))
    {
      v11 = "extra quantization parameters set when weight is double affine quantized";
      goto LABEL_155;
    }
    v128 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                               + 32 * v128
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      goto LABEL_202;
    v129 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9]
                                                                                               + 32 * v129
                                                                                               + 24)
                                                                                   + 8) & 0xFFFFFFFFFFFFFFF8))
                      + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      v11 = "weights double affine quantization scale must be quantized";
LABEL_155:
      v178[0] = (const void **)v11;
      v179 = 259;
      mlir::OpState::emitOpError(&v183, v178, (uint64_t)&__p);
      v75 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
      if (__p)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v186);
      if (!v75)
        return 0;
      goto LABEL_158;
    }
    v149 = v183;
    v150 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
    v151 = *(_QWORD *)(v183[9] + 32 * v150 + 24);
    v152 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v153 = v183[9];
    else
      v153 = 0;
    if (HIDWORD(v152) + (_DWORD)v152 == (unint64_t)v152)
      v154 = 0;
    else
      v154 = *(_QWORD *)(v153 + 32 * v152 + 24);
    v155 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v156 = v183[9];
    else
      v156 = 0;
    if (HIDWORD(v155) + (_DWORD)v155 == (unint64_t)v155)
      v157 = 0;
    else
      v157 = *(_QWORD *)(v156 + 32 * v155 + 24);
    v158 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 7);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v159 = v183[9];
    else
      v159 = 0;
    if (HIDWORD(v158) + (_DWORD)v158 == (unint64_t)v158)
      v160 = 0;
    else
      v160 = *(_QWORD *)(v159 + 32 * v158 + 24);
    v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr((mlir::Operation **)&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&__p);
      if (v186[0] > 0x40u)
      {
        LODWORD(v161) = *(_DWORD *)__p;
        operator delete[](__p);
      }
      else
      {
        v161 = (uint64_t)((_QWORD)__p << -(uint64_t)v186[0]) >> -(uint64_t)v186[0];
      }
      v163 = v161 | 0x100000000;
    }
    else
    {
      v163 = 0;
    }
      return 0;
    v164 = v183;
    v165 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v166 = v183[9];
    else
      v166 = 0;
    if (HIDWORD(v165) + (_DWORD)v165 == (unint64_t)v165)
      v167 = 0;
    else
      v167 = *(_QWORD *)(v166 + 32 * v165 + 24);
    v168 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v169 = v183[9];
    else
      v169 = 0;
    if (HIDWORD(v168) + (_DWORD)v168 == (unint64_t)v168)
      v170 = 0;
    else
      v170 = *(_QWORD *)(v169 + 32 * v168 + 24);
    v171 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10);
    if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
      v172 = v183[9];
    else
      v172 = 0;
    if (HIDWORD(v171) + (_DWORD)v171 == (unint64_t)v171)
      v173 = 0;
    else
      v173 = *(_QWORD *)(v172 + 32 * v171 + 24);
    v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr((mlir::Operation **)&v183);
    if (v178[0])
    {
      mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&__p);
      if (v186[0] > 0x40u)
      {
        LODWORD(v174) = *(_DWORD *)__p;
        operator delete[](__p);
      }
      else
      {
        v174 = (uint64_t)((_QWORD)__p << -(uint64_t)v186[0]) >> -(uint64_t)v186[0];
      }
      v143 = v174 | 0x100000000;
    }
    else
    {
      v143 = 0;
    }
    v144 = v164;
    v145 = v167;
    v146 = v170;
    v147 = v173;
    v148 = 0;
    goto LABEL_278;
  }
  v37 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 5);
  if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
    v38 = v183[9];
  else
    v38 = 0;
  if (HIDWORD(v37) + (_DWORD)v37 != (unint64_t)v37
    && *(_QWORD *)(v38 + 32 * v37 + 24)
    || ((v39 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 6),
         (*((_BYTE *)v183 + 46) & 0x80) == 0)
      ? (v40 = 0)
      : (v40 = v183[9]),
        HIDWORD(v39) + (_DWORD)v39 != (unint64_t)v39
     && *(_QWORD *)(v40 + 32 * v39 + 24)
     || ((v41 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 9),
          (*((_BYTE *)v183 + 46) & 0x80) == 0)
       ? (v42 = 0)
       : (v42 = v183[9]),
         HIDWORD(v41) + (_DWORD)v41 != (unint64_t)v41
      && *(_QWORD *)(v42 + 32 * v41 + 24)
      || ((v43 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 10),
           (*((_BYTE *)v183 + 46) & 0x80) == 0)
        ? (v44 = 0)
        : (v44 = v183[9]),
          HIDWORD(v43) + (_DWORD)v43 != (unint64_t)v43
       && *(_QWORD *)(v44 + 32 * v43 + 24)))))
  {
    v11 = "extra quantization parameters set when weight is LUT quantized";
    goto LABEL_155;
  }
  v108 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183[9] + 32 * v108 + 24)
                                                                                 + 8) & 0xFFFFFFFFFFFFFFF8))
                    + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
LABEL_202:
    v11 = "quantized weights must be quantized type";
    goto LABEL_155;
  }
  v117 = v183;
  v118 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 4);
  v119 = *(_QWORD *)(v183[9] + 32 * v118 + 24);
  v120 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength((mlir::Operation **)&v183, 8);
  if ((*((_BYTE *)v183 + 46) & 0x80) != 0)
    v121 = v183[9];
  else
    v121 = 0;
  if (HIDWORD(v120) + (_DWORD)v120 == (unint64_t)v120)
    v122 = 0;
  else
    v122 = *(_QWORD *)(v121 + 32 * v120 + 24);
  v178[0] = (const void **)mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr((mlir::Operation **)&v183);
  if (v178[0])
  {
    mlir::IntegerAttr::getValue(v178, (llvm::APInt *)&__p);
    if (v186[0] > 0x40u)
    {
      LODWORD(v123) = *(_DWORD *)__p;
      operator delete[](__p);
    }
    else
    {
      v123 = (uint64_t)((_QWORD)__p << -(uint64_t)v186[0]) >> -(uint64_t)v186[0];
    }
    v124 = v123 | 0x100000000;
  }
  else
  {
    v124 = 0;
  }
  if (!mlir::mps::verifyDequantLUT(v117, v119, v122, v124))
    return 0;
LABEL_158:
  v182 = *this;
  InputDequantizedType = mlir::mpsx::QuantizedMatMulOp::getInputDequantizedType((mlir::Operation **)&v182);
  v181[0] = InputDequantizedType;
  v181[1] = v77;
  WeightsDequantizedType = mlir::mpsx::QuantizedMatMulOp::getWeightsDequantizedType((mlir::Operation **)&v182);
  v180[0] = WeightsDequantizedType;
  v180[1] = v79;
  if (*(_UNKNOWN **)(*InputDequantizedType + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*WeightsDequantizedType + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    return 1;
  }
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v181);
  v82 = v81;
  v84 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v180);
  v85 = v83;
  if (v82)
  {
    if (v82 != 1)
    {
      __p = (void *)mlir::mpsx::QuantizedMatMulOp::getTransposeLhsAttr((mlir::Operation **)&v182);
      ArgAttrsAttr = &ArgAttrsAttr[v82 - 1 + ((uint64_t)mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p) << 63 >> 63)];
    }
    v86 = *ArgAttrsAttr;
    if (v85)
      goto LABEL_164;
LABEL_170:
    v90 = 1;
    goto LABEL_171;
  }
  v86 = 1;
  if (!v83)
    goto LABEL_170;
LABEL_164:
  if (v85 != 1)
  {
    v87 = &v84[v85];
    __p = (void *)mlir::mpsx::QuantizedMatMulOp::getTransposeRhsAttr((mlir::Operation **)&v182);
    Value = mlir::BoolAttr::getValue((mlir::BoolAttr *)&__p);
    v89 = 0x1FFFFFFFFFFFFFFELL;
    if (Value)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    v84 = &v87[v89];
  }
  v90 = *v84;
LABEL_171:
  if (v86 == 0x8000000000000000 || v90 == 0x8000000000000000 || v86 == v90)
    return 1;
  v178[0] = (const void **)"contracting dimensions differ ";
  v179 = 259;
  mlir::OpState::emitOpError(&v182, v178, (uint64_t)&__p);
  if (__p)
  {
    LODWORD(v183) = 2;
    v184 = v86;
    v91 = &v183;
    v92 = v187;
    if (v188 >= v189)
    {
      v162 = v188 + 1;
      if (v187 <= (unint64_t)&v183 && v187 + 24 * v188 > (unint64_t)&v183)
      {
        v176 = (char *)&v183 - v187;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v162, 24);
        v92 = v187;
        v91 = (uint64_t **)&v176[v187];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v162, 24);
        v91 = &v183;
        v92 = v187;
      }
    }
    v93 = v92 + 24 * v188;
    v94 = *(_OWORD *)v91;
    *(_QWORD *)(v93 + 16) = v91[2];
    *(_OWORD *)v93 = v94;
    ++v188;
    if (__p)
    {
      mlir::Diagnostic::operator<<((uint64_t)v186, " & ");
      if (__p)
      {
        LODWORD(v183) = 2;
        v184 = v90;
        v95 = &v183;
        v96 = v187;
        if (v188 >= v189)
        {
          v175 = v188 + 1;
          if (v187 <= (unint64_t)&v183 && v187 + 24 * v188 > (unint64_t)&v183)
          {
            v177 = (char *)&v183 - v187;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v175, 24);
            v96 = v187;
            v95 = (uint64_t **)&v177[v187];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v187, v190, v175, 24);
            v95 = &v183;
            v96 = v187;
          }
        }
        v97 = v96 + 24 * v188;
        v98 = *(_OWORD *)v95;
        *(_QWORD *)(v97 + 16) = v95[2];
        *(_OWORD *)v97 = v98;
        ++v188;
      }
    }
  }
  v99 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v186);
  return v99 != 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  mlir::MLIRContext *v18;
  mlir::CallGraphNode *Value;
  uint64_t v20;
  mlir::CallGraphNode *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  mlir::CallGraphNode *v36;
  mlir::CallGraphNode *v37;
  mlir::CallGraphNode *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *ArgAttrsAttr;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t WeightsQuantParamsAxis;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  const void *v85;
  uint64_t v86;
  _BYTE *v87;
  size_t v88;
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t *v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  mlir::CallGraphNode *v103;
  mlir::CallGraphNode *v104;
  mlir::CallGraphNode *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  mlir::CallGraphNode *v109;
  mlir::CallGraphNode *v110;
  mlir::CallGraphNode *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  mlir::CallGraphNode *v115;
  mlir::CallGraphNode *v116;
  mlir::CallGraphNode *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL4 v121;
  mlir::CallGraphNode *v122;
  mlir::CallGraphNode *v123;
  mlir::CallGraphNode *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v128;
  int v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  char v137;
  uint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t OperandRange;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t *v153;
  _QWORD *v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _OWORD v165[2];
  __int128 v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  _BYTE v173[40];
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v168 = a6;
  BYTE8(v168) = 0;
  LOBYTE(v169) = 0;
  *((_QWORD *)&v169 + 1) = a9;
  *(_QWORD *)&v170 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v168);
    if ((_BYTE)v169)
      LOBYTE(v169) = 0;
    mlir::OperationName::OperationName((char *)&v168 + 8, "mpsx.quantized_matmul", 21, Context);
    LOBYTE(v169) = 1;
  }
  *((_QWORD *)&v170 + 1) = a4;
  v171 = a5;
  v17 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mpsx::QuantizedMatMulOpAdaptor::verify((uint64_t *)&v168, v17))
  {
    v24 = mlir::Float32Type::get(this, v18);
LABEL_113:
    v134 = mlir::UnrankedTensorType::get(v24);
    goto LABEL_114;
  }
  v165[0] = v168;
  v165[1] = v169;
  v166 = v170;
  v167 = v171;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v165);
  v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)v165);
  v21 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v20 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v165[0] + 1) + 96) + 8));
  if ((v22 & 1) != 0)
    v23 = *((_QWORD *)v21 + 1);
  else
    v23 = 0;
  *(_QWORD *)&v174 = v23;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v174);
  v174 = *((unint64_t *)&v166 + 1);
  v25 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v174, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v25)
    goto LABEL_19;
  v26 = *v25;
  v27 = mlir::TypeID::get<mlir::ShapedType>();
  v28 = *(unsigned int *)(v26 + 16);
  if (!(_DWORD)v28)
    goto LABEL_19;
  v29 = *(_QWORD **)(v26 + 8);
  v30 = &v29[2 * v28];
  do
  {
    v31 = v28 >> 1;
    v32 = &v29[2 * (v28 >> 1)];
    v34 = *v32;
    v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27)
      v29 = v33;
    else
      v28 = v31;
  }
  while (v28);
  if (v29 != v30 && *v29 == v27)
    v35 = v29[1];
  else
LABEL_19:
    v35 = 0;
  *(_QWORD *)&v172 = v25;
  *((_QWORD *)&v172 + 1) = v35;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(v25) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v36 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v165) + 16);
    v37 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)v165);
    v38 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v36, v37, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v165[0] + 1) + 96) + 16));
    if ((v39 & 1) != 0)
      v40 = *((_QWORD *)v38 + 1);
    else
      v40 = 0;
    *(_QWORD *)&v174 = v40;
    v41 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v174);
    LOBYTE(v174) = 0;
    LOBYTE(v175) = 0;
    v25 = (uint64_t *)mlir::ShapedType::cloneWith((uint64_t *)&v172, &v174, v41);
  }
  v161 = v168;
  v162 = v169;
  v163 = v170;
  v164 = v171;
  ODSOperandIndexAndLength = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161, 4);
  v43 = *((_QWORD *)&v163 + 1);
  *(_QWORD *)&v174 = *((_QWORD *)&v163 + 1);
  *((_QWORD *)&v174 + 1) = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v43 = mlir::ValueRange::offset_base(&v174, ODSOperandIndexAndLength);
  v174 = v43;
  v44 = (uint64_t *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(&v174, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v44)
    goto LABEL_36;
  v45 = *v44;
  v46 = mlir::TypeID::get<mlir::ShapedType>();
  v47 = *(unsigned int *)(v45 + 16);
  if (!(_DWORD)v47)
    goto LABEL_36;
  v48 = *(_QWORD **)(v45 + 8);
  v49 = &v48[2 * v47];
  do
  {
    v50 = v47 >> 1;
    v51 = &v48[2 * (v47 >> 1)];
    v53 = *v51;
    v52 = v51 + 2;
    v47 += ~(v47 >> 1);
    if (v53 < v46)
      v48 = v52;
    else
      v47 = v50;
  }
  while (v47);
  if (v48 != v49 && *v48 == v46)
    v54 = v48[1];
  else
LABEL_36:
    v54 = 0;
  v159 = v44;
  v160 = v54;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(v44) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v55 = v159;
    goto LABEL_94;
  }
  v174 = v161;
  v175 = v162;
  v176 = v163;
  v177 = v164;
  v56 = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v174, 8);
  v57 = *((_QWORD *)&v176 + 1);
  *(_QWORD *)&v172 = *((_QWORD *)&v176 + 1);
  *((_QWORD *)&v172 + 1) = v56;
  if ((_DWORD)v56)
  {
    v57 = mlir::ValueRange::offset_base(&v172, v56);
    v58 = *((_QWORD *)&v172 + 1);
  }
  else
  {
    v58 = 0;
  }
  if (HIDWORD(v56) + (_DWORD)v56 != v58)
  {
    v172 = v57;
    if (mlir::ValueRange::dereference_iterator(&v172, 0))
    {
      v59 = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161, 8);
      v60 = *((_QWORD *)&v163 + 1);
      *(_QWORD *)&v172 = *((_QWORD *)&v163 + 1);
      *((_QWORD *)&v172 + 1) = v59;
      if ((_DWORD)v59)
      {
        v60 = mlir::ValueRange::offset_base(&v172, v59);
        v61 = *((_QWORD *)&v172 + 1);
      }
      else
      {
        v61 = 0;
      }
      if (HIDWORD(v59) + (_DWORD)v59 == v61)
      {
        v62 = 0;
      }
      else
      {
        v172 = v60;
        v62 = mlir::ValueRange::dereference_iterator(&v172, 0);
      }
      v63 = (_QWORD *)(*(_QWORD *)(v62 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (!v63)
        goto LABEL_61;
      v64 = *v63;
      v65 = mlir::TypeID::get<mlir::ShapedType>();
      v66 = *(unsigned int *)(v64 + 16);
      if (!(_DWORD)v66)
        goto LABEL_61;
      v67 = *(_QWORD **)(v64 + 8);
      v68 = &v67[2 * v66];
      do
      {
        v69 = v66 >> 1;
        v70 = &v67[2 * (v66 >> 1)];
        v72 = *v70;
        v71 = v70 + 2;
        v66 += ~(v66 >> 1);
        if (v72 < v65)
          v67 = v71;
        else
          v66 = v69;
      }
      while (v66);
      if (v67 != v68 && *v67 == v65)
        v73 = v67[1];
      else
LABEL_61:
        v73 = 0;
      v157 = v63;
      v158 = v73;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v157))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v157);
        if (v75)
        {
          v76 = 8 * v75;
          while (*ArgAttrsAttr != 0x8000000000000000)
          {
            ++ArgAttrsAttr;
            v76 -= 8;
            if (!v76)
              goto LABEL_67;
          }
        }
        else
        {
LABEL_67:
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v159))
          {
            v77 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v159);
            if (!v78)
            {
LABEL_72:
              WeightsQuantParamsAxis = mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getWeightsQuantParamsAxis((mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *)&v161);
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v157);
              if (v81 != 1 && (WeightsQuantParamsAxis & 0xFF00000000) != 0)
              {
                v82 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v157)
                                + 8 * (v81 - 1));
                if (v82 >= 2)
                {
                  if ((int)WeightsQuantParamsAxis <= 0)
                  {
                    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v159);
                    LODWORD(WeightsQuantParamsAxis) = v83 + WeightsQuantParamsAxis;
                  }
                  v85 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v159);
                  v86 = v84;
                  v87 = v173;
                  *(_QWORD *)&v172 = v173;
                  *((_QWORD *)&v172 + 1) = 0x500000000;
                  v88 = 8 * v84;
                  if ((unint64_t)(8 * v84) < 0x29)
                  {
                    v89 = 0;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v172, v173, (8 * v84) >> 3, 8);
                    v89 = DWORD2(v172);
                    v87 = (_BYTE *)v172;
                  }
                  if (v86)
                  {
                    memcpy(&v87[8 * v89], v85, v88);
                    v89 = DWORD2(v172);
                    v87 = (_BYTE *)v172;
                  }
                  v143 = v89 + (v88 >> 3);
                  DWORD2(v172) = v143;
                  *(_QWORD *)&v87[8 * (int)WeightsQuantParamsAxis] *= v82;
                  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v159);
                  v145 = (uint64_t *)mlir::RankedTensorType::get((uint64_t)v87, v143, OperandRange, 0);
                  v146 = (uint64_t)v145;
                  if (!v145)
                    goto LABEL_147;
                  v147 = *v145;
                  v148 = mlir::TypeID::get<mlir::ShapedType>();
                  v149 = *(unsigned int *)(v147 + 16);
                  if (!(_DWORD)v149)
                    goto LABEL_147;
                  v150 = *(_QWORD **)(v147 + 8);
                  v151 = &v150[2 * v149];
                  do
                  {
                    v152 = v149 >> 1;
                    v153 = &v150[2 * (v149 >> 1)];
                    v155 = *v153;
                    v154 = v153 + 2;
                    v149 += ~(v149 >> 1);
                    if (v155 < v148)
                      v150 = v154;
                    else
                      v149 = v152;
                  }
                  while (v149);
                  if (v150 != v151 && *v150 == v148)
                    v156 = v150[1];
                  else
LABEL_147:
                    v156 = 0;
                  v159 = (uint64_t *)v146;
                  v160 = v156;
                  if ((_BYTE *)v172 != v173)
                    free((void *)v172);
                }
              }
              goto LABEL_90;
            }
            v79 = 8 * v78;
            while (*v77 != 0x8000000000000000)
            {
              ++v77;
              v79 -= 8;
              if (!v79)
                goto LABEL_72;
            }
          }
        }
      }
      v90 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v159);
      v91 = (uint64_t *)mlir::UnrankedTensorType::get(v90);
      v92 = (uint64_t)v91;
      if (!v91)
        goto LABEL_88;
      v93 = *v91;
      v94 = mlir::TypeID::get<mlir::ShapedType>();
      v95 = *(unsigned int *)(v93 + 16);
      if (!(_DWORD)v95)
        goto LABEL_88;
      v96 = *(_QWORD **)(v93 + 8);
      v97 = &v96[2 * v95];
      do
      {
        v98 = v95 >> 1;
        v99 = &v96[2 * (v95 >> 1)];
        v101 = *v99;
        v100 = v99 + 2;
        v95 += ~(v95 >> 1);
        if (v101 < v94)
          v96 = v100;
        else
          v95 = v98;
      }
      while (v95);
      if (v96 != v97 && *v96 == v94)
        v102 = v96[1];
      else
LABEL_88:
        v102 = 0;
      v159 = (uint64_t *)v92;
      v160 = v102;
    }
  }
LABEL_90:
  v103 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v161) + 16);
  v104 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v161);
  v105 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v103, v104, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v161 + 1) + 96) + 16));
  if ((v106 & 1) != 0)
    v107 = *((_QWORD *)v105 + 1);
  else
    v107 = 0;
  *(_QWORD *)&v172 = v107;
  v108 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v172);
  LOBYTE(v172) = 0;
  v173[0] = 0;
  v55 = (uint64_t *)mlir::ShapedType::cloneWith((uint64_t *)&v159, &v172, v108);
LABEL_94:
  v109 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 16);
  v110 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  v111 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v109, v110, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v168 + 1) + 96) + 16));
  if ((v112 & 1) != 0)
    v113 = *((_QWORD *)v111 + 1);
  else
    v113 = 0;
  *(_QWORD *)&v174 = v113;
  v114 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v174);
  v115 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 32);
  v116 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  v117 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v115, v116, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v168 + 1) + 96) + 24));
  if ((v118 & 1) != 0 && (v119 = *((_QWORD *)v117 + 1)) != 0)
  {
    if (mlir::BoolAttr::classof(*((_QWORD **)v117 + 1)))
      v120 = v119;
    else
      v120 = 0;
  }
  else
  {
    v120 = 0;
  }
  *(_QWORD *)&v174 = v120;
  v121 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v174);
  v122 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v168) + 32);
  v123 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v168);
  v124 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v122, v123, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v168 + 1) + 96) + 32));
  if ((v125 & 1) != 0 && (v126 = *((_QWORD *)v124 + 1)) != 0)
  {
    if (mlir::BoolAttr::classof(*((_QWORD **)v124 + 1)))
      v127 = v126;
    else
      v127 = 0;
  }
  else
  {
    v127 = 0;
  }
  *(_QWORD *)&v174 = v127;
  v128 = mlir::BoolAttr::getValue((mlir::BoolAttr *)&v174);
  if (*(_UNKNOWN **)(*v25 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || *(_UNKNOWN **)(*v55 + 136) == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id
    || (v129 = v128,
        v130 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v25),
        v159 = v130,
        v160 = v131,
        v132 = (unint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v55),
        v157 = (_QWORD *)v132,
        v158 = v133,
        !((unint64_t)v130 | v132)))
  {
    v24 = v114;
    goto LABEL_113;
  }
  if (*(_UNKNOWN **)(*v130 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && *(_UNKNOWN **)(*(_QWORD *)v132 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    *(_QWORD *)&v172 = v173;
    *((_QWORD *)&v172 + 1) = 0x400000000;
    v138 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v159);
    v140 = v139;
    v141 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v157);
    {
      v134 = mlir::RankedTensorType::get(v172, DWORD2(v172), v114, 0);
      v137 = 1;
    }
    else if ((_BYTE)a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v174);
      if ((_QWORD)v174)
        mlir::Diagnostic::operator<<((uint64_t)&v174 + 8, "invalid shape");
      v137 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v174);
      if ((_QWORD)v174)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v174);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v174 + 8);
      v134 = 0;
    }
    else
    {
      v134 = 0;
      v137 = 0;
    }
    if ((_BYTE *)v172 != v173)
      free((void *)v172);
  }
  else
  {
    v137 = mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)a2, a3, "invalid input types: ", (uint64_t *)&v159, ", ", (uint64_t *)&v157);
    v134 = 0;
  }
  if (!v137)
    return 0;
LABEL_114:
  v135 = *(_DWORD *)(a11 + 8);
  if (v135 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v135 + 1, 8);
    v135 = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v135) = v134;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::QuantizedMatMulOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *Value;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD v34[20];

  v34[19] = *MEMORY[0x1E0C80C00];
  v26 = *a1;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
  {
LABEL_7:
    v6 = "'mpsx.quantized_matmul' op requires attribute 'operandSegmentSizes'";
LABEL_13:
    v24[0] = v6;
    v25 = 259;
    mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
LABEL_14:
    v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v29);
    if (v29)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v29);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v30);
    return v8;
  }
  v5 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      v5 = *((_QWORD *)Value + 1);
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
      goto LABEL_7;
  }
  v7 = *((_QWORD *)Value + 1);
  while (1)
  {
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
    {
      v6 = "'mpsx.quantized_matmul' op requires attribute 'output_type'";
      goto LABEL_13;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(Value))
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  v10 = *((_QWORD *)Value + 1);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26))
  {
    v13 = 0;
    v12 = 0;
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v13 = (_QWORD *)*((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 32) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v12 = (_QWORD *)*((_QWORD *)Value + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 40) == mlir::CallGraphNode::getCallableRegion(Value))
      {
        v11 = *((_QWORD *)Value + 1);
      }
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    while (Value != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v26));
  }
  v23 = v7;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v23);
  if (v14 != 11)
  {
    v16 = v14;
    v24[0] = "'mpsx.quantized_matmul' op 'operandSegmentSizes' attribute for specifying operand segments must have 11 elements, but got ";
    v25 = 259;
    mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
    if (v29)
    {
      v27 = 5;
      v28 = v16;
      v17 = &v27;
      v18 = v31;
      if (v32 >= v33)
      {
        v21 = v32 + 1;
        if (v31 <= (unint64_t)&v27 && v31 + 24 * v32 > (unint64_t)&v27)
        {
          v22 = (char *)&v27 - v31;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v21, 24);
          v18 = v31;
          v17 = (int *)&v22[v31];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v21, 24);
          v17 = &v27;
          v18 = v31;
        }
      }
      v19 = v18 + 24 * v32;
      v20 = *(_OWORD *)v17;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v19 = v20;
      ++v32;
    }
    goto LABEL_14;
  }
  if (v5)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v24[0] = v5,
          v29 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24),
          !mlir::Type::isSignedInteger((mlir::Type *)&v29, 32)))
    {
      v6 = "'mpsx.quantized_matmul' op attribute 'input_quant_params_axis' failed to satisfy constraint: 32-bit signed integer attribute";
      goto LABEL_13;
    }
  }
  if (v11)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
      || (v24[0] = v11,
          v29 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v24),
          !mlir::Type::isSignedInteger((mlir::Type *)&v29, 32)))
    {
      v6 = "'mpsx.quantized_matmul' op attribute 'weights_quant_params_axis' failed to satisfy constraint: 32-bit signed "
           "integer attribute";
      goto LABEL_13;
    }
  }
  if (v10)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      v15 = "'mpsx.quantized_matmul' op attribute 'output_type' failed to satisfy constraint: any type attribute";
LABEL_52:
      v24[0] = v15;
      v25 = 259;
      mlir::emitError(a2, (uint64_t)v24, (uint64_t)&v29);
      v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v29);
      mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v29);
      return v8;
    }
    v29 = v10;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v29);
  }
  if (v13 && !mlir::BoolAttr::classof(v13))
  {
    v15 = "'mpsx.quantized_matmul' op attribute 'transpose_lhs' failed to satisfy constraint: BOOL attribute";
    goto LABEL_52;
  }
  if (v12 && !mlir::BoolAttr::classof(v12))
  {
    v15 = "'mpsx.quantized_matmul' op attribute 'transpose_rhs' failed to satisfy constraint: BOOL attribute";
    goto LABEL_52;
  }
  return 1;
}

uint64_t mlir::mpsx::inferMatMulResultType(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, int a6, int a7)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v15;
  uint64_t v16;
  uint64_t *ArgAttrsAttr;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  _QWORD v26[2];
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a3);
  v26[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(a3);
  v26[1] = v15;
  v25[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(a4);
  v25[1] = v16;
  if (v26[0] | v25[0]
    && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v26)
    && (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v25) & 1) != 0)
  {
    v27 = v29;
    v28 = 0x400000000;
    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
    v19 = v18;
    v20 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v25);
    {
      v22 = mlir::RankedTensorType::get((uint64_t)v27, v28, ElementTypeOrSelf, 0);
      v23 = 1;
    }
    else
    {
      v22 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      v23 = 0;
    }
    *a5 = v22;
    if (v27 != v29)
      free(v27);
  }
  else
  {
    *a5 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    return 1;
  }
  return v23;
}

uint64_t mlir::mpsx::`anonymous namespace'::inferMatMulShape(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, _QWORD *a5, unint64_t a6, int a7, int a8, uint64_t a9)
{
  int v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  char *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  uint64_t v66;
  int64x2_t *v67;
  void *v68;
  unint64_t v69;
  _BYTE v70[32];
  void *__dst;
  unint64_t v72;
  int64x2_t v73;
  void *v74;
  uint64_t v75;
  _QWORD v76[24];

  v9 = a8;
  v76[22] = *MEMORY[0x1E0C80C00];
  v67 = &v73;
  __dst = &v73;
  v72 = 0x400000000;
  v68 = v70;
  v69 = 0x400000000;
  v66 = a2;
  if (a4 == 1)
  {
    v14 = *a3;
    v73.i64[0] = 1;
    v73.i64[1] = v14;
    goto LABEL_5;
  }
  if (!a4)
  {
    v73 = vdupq_n_s64(1uLL);
LABEL_5:
    LODWORD(v72) = 2;
    goto LABEL_6;
  }
  v17 = a4;
  v74 = v76;
  v75 = 0x400000000;
  if (8 * a4 < 0x21)
  {
    v18 = 0;
    v19 = v76;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, (uint64_t)(8 * a4) >> 3, 8);
    v18 = v75;
    v19 = v74;
  }
  memcpy(&v19[v18], a3, 8 * a4);
  v27 = v74;
  v28 = (v75 + a4);
  LODWORD(v75) = v75 + a4;
  if (v74 == v76)
  {
    v63 = a5;
    v59 = v72;
    if (v72 >= v28)
    {
      a5 = v63;
      if ((_DWORD)v28)
        memmove(__dst, v76, 8 * v28);
      LODWORD(v72) = v28;
      goto LABEL_94;
    }
    if (HIDWORD(v72) >= v28)
    {
      if ((_DWORD)v72)
      {
        memmove(__dst, v76, 8 * v72);
LABEL_91:
        if (v59 != v75)
          memcpy((char *)__dst + 8 * v59, (char *)v74 + 8 * v59, 8 * v75 - 8 * v59);
        LODWORD(v72) = v28;
        a5 = v63;
        goto LABEL_94;
      }
    }
    else
    {
      LODWORD(v72) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v67, v28, 8);
    }
    v59 = 0;
    goto LABEL_91;
  }
  if (__dst != v67)
  {
    free(__dst);
    v27 = v74;
    LODWORD(v28) = v75;
  }
  __dst = v27;
  v72 = __PAIR64__(HIDWORD(v75), v28);
  v74 = v76;
  HIDWORD(v75) = 0;
LABEL_94:
  LODWORD(v75) = 0;
  v9 = a8;
  if (v74 != v76)
    free(v74);
  if (a7)
  {
    v61 = (char *)__dst + 8 * v72;
    *((_QWORD *)v61 - 1) = a3[v17 - 2];
    *((_QWORD *)v61 - 2) = a3[v17 - 1];
  }
LABEL_6:
  if (a6 == 1)
  {
    v20 = *a5;
    LODWORD(v69) = 0;
    if (HIDWORD(v69) > 1)
    {
      v21 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, 2uLL, 8);
      v21 = v69;
    }
    v26 = (char *)v68 + 8 * v21;
    *(_QWORD *)v26 = v20;
    goto LABEL_25;
  }
  if (a6)
  {
    v22 = a6;
    v74 = v76;
    v75 = 0x400000000;
    v23 = v9;
    if (8 * a6 < 0x21)
    {
      v24 = 0;
      v25 = v76;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, (uint64_t)(8 * a6) >> 3, 8);
      v24 = v75;
      v25 = v74;
    }
    memcpy(&v25[v24], a5, 8 * a6);
    v58 = v74;
    v29 = (v75 + a6);
    LODWORD(v75) = v75 + a6;
    if (v74 != v76)
    {
      if (v68 != v70)
      {
        free(v68);
        v58 = v74;
        LODWORD(v29) = v75;
      }
      v68 = v58;
      v69 = __PAIR64__(HIDWORD(v75), v29);
      v74 = v76;
      HIDWORD(v75) = 0;
      goto LABEL_104;
    }
    v60 = v69;
    if (v69 >= v29)
    {
      if ((_DWORD)v29)
        memmove(v68, v76, 8 * v29);
      goto LABEL_103;
    }
    if (HIDWORD(v69) >= v29)
    {
      if ((_DWORD)v69)
      {
        memmove(v68, v76, 8 * v69);
        goto LABEL_101;
      }
    }
    else
    {
      LODWORD(v69) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, v29, 8);
    }
    v60 = 0;
LABEL_101:
    if (v60 != v75)
      memcpy((char *)v68 + 8 * v60, (char *)v74 + 8 * v60, 8 * v75 - 8 * v60);
LABEL_103:
    LODWORD(v69) = v29;
LABEL_104:
    LODWORD(v75) = 0;
    if (v74 != v76)
    {
      free(v74);
      LODWORD(v29) = v69;
    }
    if (v23)
    {
      v62 = (char *)v68 + 8 * v29;
      *((_QWORD *)v62 - 1) = a5[v22 - 2];
      *((_QWORD *)v62 - 2) = a5[v22 - 1];
    }
    goto LABEL_26;
  }
  LODWORD(v69) = 0;
  if (HIDWORD(v69) > 1)
  {
    v15 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v70, 2uLL, 8);
    v15 = v69;
  }
  v26 = (char *)v68 + 8 * v15;
  *(_QWORD *)v26 = 1;
LABEL_25:
  *((_QWORD *)v26 + 1) = 1;
  LODWORD(v29) = v69 + 2;
  LODWORD(v69) = v69 + 2;
LABEL_26:
  *(_DWORD *)(a9 + 8) = 0;
  if (v72 <= v29)
  {
    v30 = 0;
    if ((_DWORD)v29)
    {
      v34 = (uint64_t *)v68;
      v35 = 8 * v29;
      do
      {
        v36 = *v34;
        if (v30 >= *(_DWORD *)(a9 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v30 + 1, 8);
          v30 = *(_DWORD *)(a9 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a9 + 8 * v30) = v36;
        v30 = *(_DWORD *)(a9 + 8) + 1;
        *(_DWORD *)(a9 + 8) = v30;
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  else
  {
    v30 = 0;
    v31 = (uint64_t *)__dst;
    v32 = 8 * v72;
    do
    {
      v33 = *v31;
      if (v30 >= *(_DWORD *)(a9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v30 + 1, 8);
        v30 = *(_DWORD *)(a9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a9 + 8 * v30) = v33;
      v30 = *(_DWORD *)(a9 + 8) + 1;
      *(_DWORD *)(a9 + 8) = v30;
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  v37 = (char *)__dst;
  v38 = v72;
  v39 = (char *)__dst + 8 * v72;
  v40 = (char *)v68;
  v41 = v69;
  v42 = (char *)v68 + 8 * v69;
  v43 = *(_QWORD *)a9;
  v44 = *(_QWORD *)a9 + 8 * v30;
  *(_QWORD *)(v44 - 8) = *((_QWORD *)v42 - 1);
  v45 = v42 - 16;
  *(_QWORD *)(v44 - 16) = *((_QWORD *)v39 - 2);
  if (v39 - 16 == v37 || v45 == v40)
  {
LABEL_56:
    if (a4 <= 1)
    {
      v55 = *(_QWORD *)(v44 - 8);
      *(_DWORD *)(a9 + 8) = --v30;
      *(_QWORD *)(v43 + 8 * v30 - 8) = v55;
    }
    if (a6 <= 1)
      *(_DWORD *)(a9 + 8) = v30 - 1;
    v56 = 1;
    goto LABEL_61;
  }
  v47 = 8 * v38 - 24;
  v48 = (unint64_t *)(v43 + 8 * v30 - 24);
  v49 = 8 * v41 - 24;
  while (1)
  {
    v50 = *(_QWORD *)&v37[v47];
    v51 = *(_QWORD *)&v40[v49];
    if (v50 != 0x8000000000000000)
      break;
    v52 = *(_QWORD *)&v40[v49];
    if (v51 > 1)
      goto LABEL_54;
    v52 = *(_QWORD *)&v37[v47];
    if (v51 == 1)
      goto LABEL_54;
LABEL_48:
    v52 = 0x8000000000000000;
LABEL_54:
    *v48-- = v52;
    if (v47)
    {
      v47 -= 8;
      v54 = v49;
      v49 -= 8;
      if (v54)
        continue;
    }
    goto LABEL_56;
  }
  if (v51 == 0x8000000000000000)
  {
    v52 = *(_QWORD *)&v37[v47];
    if (v50 > 1)
      goto LABEL_54;
    goto LABEL_48;
  }
  v53 = v50 == v51 || v51 == 1;
  v52 = *(_QWORD *)&v37[v47];
  if (v53)
    goto LABEL_54;
  v52 = *(_QWORD *)&v40[v49];
  if (v50 == 1)
    goto LABEL_54;
  *(_DWORD *)(a9 + 8) = 0;
  if ((_BYTE)v66)
  {
    mlir::emitError(a1, (uint64_t)&v74);
    if (v74)
      mlir::Diagnostic::operator<<((uint64_t)&v75, "incompatible dimensions");
    v56 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v74);
    if (v74)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v74);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v75);
    v40 = (char *)v68;
  }
  else
  {
    v56 = 0;
  }
LABEL_61:
  if (v40 != v70)
    free(v40);
  if (__dst != v67)
    free(__dst);
  return v56;
}

uint64_t mlir::mpsx::`anonymous namespace'::isCompatibleReturnTypesDefaultImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v19[3];
  _QWORD *v20;
  _BYTE v21[24];
  _BYTE *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v9 = (_QWORD *)a5[3];
  if (!v9)
  {
    v20 = 0;
    v24 = 0;
    goto LABEL_10;
  }
  if (v9 != a5)
  {
    v10 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    v20 = v10;
    if (v10)
      goto LABEL_4;
LABEL_8:
    v24 = 0;
    goto LABEL_10;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v19);
  v10 = v20;
  if (!v20)
    goto LABEL_8;
LABEL_4:
  if (v10 == v19)
  {
    v24 = v23;
    (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v23);
  }
  else
  {
    v24 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
  }
LABEL_10:
  {
    v11 = 1;
    goto LABEL_22;
  }
  if (v20)
  {
    if (v20 == v19)
    {
      v22 = v21;
      (*(void (**)(_QWORD *, _BYTE *))(v19[0] + 24))(v19, v21);
    }
    else
    {
      v22 = (_BYTE *)(*(uint64_t (**)(void))(*v20 + 16))();
    }
  }
  else
  {
    v22 = 0;
  }
  v12 = v22;
  if (v22 == v21)
  {
    v13 = 4;
    v12 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_22;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_22:
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_27;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_27:
  v16 = v20;
  if (v20 == v19)
  {
    v17 = 4;
    v16 = v19;
    goto LABEL_31;
  }
  if (v20)
  {
    v17 = 5;
LABEL_31:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  return v11;
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  mlir::MLIRContext *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  mlir::CallGraphNode *v25;
  mlir::CallGraphNode *v26;
  mlir::CallGraphNode *v27;
  char v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  mlir::MLIRContext *v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t ElementTypeOrSelf;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  mlir::CallGraphNode *v51;
  mlir::CallGraphNode *v52;
  mlir::CallGraphNode *v53;
  char v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v68[2];
  _QWORD __src[2];
  void *__b;
  uint64_t v71;
  _BYTE v72[48];
  void *v73[2];
  _BYTE v74[32];
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v75 = a6;
  LOBYTE(v76) = 0;
  v77 = 0;
  v78 = a9;
  v79 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v75);
    if (v77)
      v77 = 0;
    mlir::OperationName::OperationName(&v76, "mpsx.sparse_dense_matmul", 24, Context);
    v77 = 1;
  }
  v80 = a4;
  v81 = a5;
  if (a5 >= 4)
  {
    v15 = mlir::UnknownLoc::get(this, a2);
    if (mlir::mpsx::SparseDenseMatMulOpAdaptor::verify(&v75, v15))
    {
      v73[0] = v74;
      v73[1] = (void *)0x400000000;
      __b = v80;
      v71 = 3;
      __b = (void *)mlir::ValueRange::offset_base(&__b, 3);
      v71 = 0;
      v16 = mlir::ValueRange::dereference_iterator(&__b, 0);
      if (mlir::matchConstantWithIntVector<long long>(v16, (uint64_t)v73))
      {
        __b = v80;
        v71 = 4;
        __b = (void *)mlir::ValueRange::offset_base(&__b, 4);
        v71 = 0;
        v18 = mlir::ValueRange::dereference_iterator(&__b, 0);
        v68[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
        v68[1] = v19;
        if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v68) & 1) != 0)
        {
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v68))
          {
            ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
            if (!v21)
            {
LABEL_14:
              v23 = *(_QWORD *)v73[0];
              v24 = *((_QWORD *)v73[0] + 1);
              v25 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75) + 16);
              v26 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v75);
              v27 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v25, v26, *(_QWORD *)(*(_QWORD *)(v76 + 96) + 8));
              if ((v28 & 1) != 0 && (v29 = (void *)*((_QWORD *)v27 + 1)) != 0)
              {
                if (mlir::BoolAttr::classof(*((_QWORD **)v27 + 1)))
                  v30 = v29;
                else
                  v30 = 0;
              }
              else
              {
                v30 = 0;
              }
              __b = v30;
              if (!mlir::BoolAttr::getValue((mlir::BoolAttr *)&__b))
                v24 = v23;
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
              v48 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68)
                              + 8 * (v47 - 2));
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
              v50 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68)
                              + 8 * (v49 - 1));
              v51 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v75) + 16);
              v52 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v75);
              v53 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v51, v52, *(_QWORD *)(*(_QWORD *)(v76 + 96) + 16));
              if ((v54 & 1) != 0 && (v55 = (void *)*((_QWORD *)v53 + 1)) != 0)
              {
                if (mlir::BoolAttr::classof(*((_QWORD **)v53 + 1)))
                  v56 = v55;
                else
                  v56 = 0;
              }
              else
              {
                v56 = 0;
              }
              __b = v56;
              if (mlir::BoolAttr::getValue((mlir::BoolAttr *)&__b))
                v50 = v48;
              __b = v72;
              v71 = 0x400000000;
              v57 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
              v59 = v71;
              if (v57 + 8 * v58 - 16 != v57)
              {
                v60 = (uint64_t *)v57;
                v61 = 8 * v58 - 16;
                do
                {
                  v62 = *v60;
                  if (v59 >= HIDWORD(v71))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v72, v59 + 1, 8);
                    v59 = v71;
                  }
                  *((_QWORD *)__b + v59) = v62;
                  v59 = v71 + 1;
                  LODWORD(v71) = v71 + 1;
                  ++v60;
                  v61 -= 8;
                }
                while (v61);
              }
              __src[0] = v24;
              __src[1] = v50;
              llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)&__b, (uint64_t)__b + 8 * v59, (char *)__src, (char *)&__b);
              v63 = __b;
              v64 = v71;
              ElementTypeOrSelf = mlir::getElementTypeOrSelf(v68[0]);
              v45 = (uint64_t)v63;
              v46 = v64;
LABEL_54:
              v65 = mlir::RankedTensorType::get(v45, v46, ElementTypeOrSelf, 0);
              v66 = *(unsigned int *)(a11 + 8);
              if (v66 >= *(_DWORD *)(a11 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v66 + 1, 8);
                LODWORD(v66) = *(_DWORD *)(a11 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a11 + 8 * v66) = v65;
              ++*(_DWORD *)(a11 + 8);
              if (__b != v72)
                free(__b);
              goto LABEL_58;
            }
            v22 = 8 * v21;
            while (*ArgAttrsAttr != 0x8000000000000000)
            {
              ++ArgAttrsAttr;
              v22 -= 8;
              if (!v22)
                goto LABEL_14;
            }
          }
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v68);
          v42 = v41;
          __b = v72;
          HIDWORD(v71) = 6;
          if (v41 < 7)
          {
            if (v41)
              memset_pattern16(v72, &unk_1812352C0, 8 * v41);
            v43 = v72;
          }
          else
          {
            LODWORD(v71) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, v72, v41, 8);
            v43 = __b;
            memset_pattern16(__b, &unk_1812352C0, 8 * v42);
          }
          LODWORD(v71) = v42;
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v68[0]);
          v45 = (uint64_t)v43;
          v46 = v42;
          goto LABEL_54;
        }
        v37 = mlir::getElementTypeOrSelf(v68[0]);
        if (!v37)
          v37 = mlir::Float32Type::get(this, v38);
        v39 = mlir::UnrankedTensorType::get(v37);
        v40 = *(_DWORD *)(a11 + 8);
        if (v40 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v40 + 1, 8);
          v40 = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v40) = v39;
      }
      else
      {
        v34 = mlir::Float32Type::get(this, v17);
        v35 = mlir::UnrankedTensorType::get(v34);
        v36 = *(unsigned int *)(a11 + 8);
        if (v36 >= *(_DWORD *)(a11 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
          LODWORD(v36) = *(_DWORD *)(a11 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
      }
      ++*(_DWORD *)(a11 + 8);
LABEL_58:
      if (v73[0] != v74)
        free(v73[0]);
      return 1;
    }
  }
  v31 = mlir::Float32Type::get(this, a2);
  v32 = mlir::UnrankedTensorType::get(v31);
  v33 = *(unsigned int *)(a11 + 8);
  if (v33 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v33 + 1, 8);
    LODWORD(v33) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v33) = v32;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::SparseDenseMatMulOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x1E0C80C00];
  v13 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
    {
      v5 = "'mpsx.sparse_dense_matmul' op requires attribute 'storage_type'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (i != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
      {
        v10 = (_QWORD *)*((_QWORD *)i + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(i))
      {
        v9 = (_QWORD *)*((_QWORD *)i + 1);
      }
      i = (mlir::CallGraphNode *)((char *)i + 16);
    }
    while (i != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13));
    if (v10 && !mlir::BoolAttr::classof(v10))
    {
      v5 = "'mpsx.sparse_dense_matmul' op attribute 'transpose_lhs' failed to satisfy constraint: BOOL attribute";
      goto LABEL_6;
    }
    if (v9 && !mlir::BoolAttr::classof(v9))
    {
      v5 = "'mpsx.sparse_dense_matmul' op attribute 'transpose_rhs' failed to satisfy constraint: BOOL attribute";
      goto LABEL_6;
    }
  }
  if (!v8
    || *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
  {
    return 1;
  }
  v5 = "'mpsx.sparse_dense_matmul' op attribute 'storage_type' failed to satisfy constraint: valid SparseTensorStorage";
LABEL_6:
  v11 = v5;
  v12 = 259;
  mlir::emitError(a2, (uint64_t)&v11, (uint64_t)&v14);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v6;
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::verify(mlir::Operation **this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int Kind;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  const void **v15;
  __int16 v16;
  uint64_t v17;
  uint64_t ElementTypeOrSelf;
  void *v19;
  uint64_t v20;
  _QWORD v21[23];

  v21[22] = *MEMORY[0x1E0C80C00];
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v17 = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9) + 152) + 8) & 0xFFFFFFFFFFFFFFF8));
  if (ElementTypeOrSelf == v17)
  {
    v19 = v21;
    v20 = 0x600000000;
    if (mlir::matchConstantWithIntVector<long long>(*(_QWORD *)(*((_QWORD *)*this + 9) + 120), (uint64_t)&v19))
    {
      v3 = (_QWORD *)*((_QWORD *)*this + 9);
      v4 = v3[3];
      v5 = v3[7];
      v6 = v3[11];
      v11[0] = mlir::anec::Tile::getMultipliersAttr(this);
      Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)v11);
      v8 = *(_QWORD *)v19;
      v9 = *((_QWORD *)v19 + 1);
      v11[0] = this;
      v2 = mlir::mps::verifySparseTensorHelper(v4, v5, v6, Kind, v8, v9, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mpsx::SparseDenseMatMulOp::verify(void)::$_0>, (uint64_t)v11) != 0;
    }
    else
    {
      v2 = 1;
    }
    if (v19 != v21)
      free(v19);
  }
  else
  {
    v11[0] = "failed: expected same element type between the sparse and the dense matrix, but got {0} and {1}";
    v11[1] = 95;
    v11[2] = v14;
    v11[3] = 2;
    v12[0] = &off_1E0E24010;
    v12[1] = &ElementTypeOrSelf;
    v13[0] = &off_1E0E24010;
    v13[1] = &v17;
    v14[0] = v12;
    v14[1] = v13;
    v16 = 263;
    v15 = (const void **)v11;
    mlir::OpState::emitOpError((uint64_t **)this, &v15, (uint64_t)&v19);
    v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v19);
    if (v19)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v19);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v20);
  }
  return v2;
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::getDense(mlir::mpsx::SparseDenseMatMulOp *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 152);
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::getSparseShape(mlir::mpsx::SparseDenseMatMulOp *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 120);
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::getStorageType(mlir::Operation **this)
{
  uint64_t MultipliersAttr;

  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(this);
  return mlir::AffineExpr::getKind((mlir::AffineExpr *)&MultipliersAttr);
}

uint64_t mlir::mpsx::getAxis(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t matched;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14;

  v14 = a4;
  matched = mlir::matchConstantWithIntValue<long long>(a3);
  v13[0] = matched;
  v13[1] = v10;
  v11 = 1;
  if ((_BYTE)v10)
  {
    *(_QWORD *)a5 = matched;
    *(_BYTE *)(a5 + 8) = 1;
    if (matched < 0)
    {
      matched += a4;
      *(_QWORD *)a5 = matched;
      if (matched < 0)
        return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", v13, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
    }
    if (matched >= a4)
      return mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(a1, a2, "invalid axis tensor: [", v13, "], axis must be in range -rank <= axis < rank,", " rank = ", &v14);
  }
  return v11;
}

uint64_t mlir::emitOptionalError<char const(&)[23],long long &,char const(&)[47],char const(&)[9],long long &>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, char *a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v14);
  if (v14)
  {
    mlir::Diagnostic::operator<<((uint64_t)v15, a3);
    mlir::Diagnostic::append<long long &,char const(&)[47],char const(&)[9],long long &>((uint64_t)v15, a4, a5, a6, a7);
  }
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v12;
}

uint64_t mlir::mpsx::QuantizedGatherOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  mlir::CallGraphNode *v23;
  uint64_t v24;
  mlir::CallGraphNode *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t ElementTypeOrSelf;
  mlir::MLIRContext *v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *Value;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int BatchDims;
  unint64_t *ArgAttrsAttr;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD v55[2];
  void *v56;
  uint64_t v57;
  _BYTE v58[32];
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD v66[4];

  v66[2] = *MEMORY[0x1E0C80C00];
  v66[0] = a4;
  v66[1] = a5;
  v59 = a6;
  LOBYTE(v60) = 0;
  v61 = 0;
  v62 = a9;
  v63 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v59);
    if (v61)
      v61 = 0;
    mlir::OperationName::OperationName(&v60, "mpsx.quantized_gather", 21, Context);
    v61 = 1;
  }
  v64 = a4;
  v65 = a5;
  if (a5 < 4
    || (v17 = mlir::UnknownLoc::get(this, a2), !mlir::mpsx::QuantizedGatherOpAdaptor::verify(&v59, v17)))
  {
    v28 = mlir::Float32Type::get(this, a2);
    v29 = mlir::UnrankedTensorType::get(v28);
    v30 = *(unsigned int *)(a11 + 8);
    if (v30 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v30 + 1, 8);
      LODWORD(v30) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v30) = v29;
    goto LABEL_14;
  }
  v18 = mlir::ValueRange::dereference_iterator(v66, 0);
  v55[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8));
  v55[1] = v19;
  v20 = mlir::ValueRange::dereference_iterator(v66, 1);
  v21 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8));
  v54[0] = v21;
  v54[1] = v22;
  if (!v55[0] || !v21)
  {
    v32 = mlir::ValueRange::dereference_iterator(v66, 0);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v32);
    if (!ElementTypeOrSelf)
      ElementTypeOrSelf = mlir::Float32Type::get(this, v34);
    v35 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
    v36 = *(_DWORD *)(a11 + 8);
    if (v36 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v36 + 1, 8);
      v36 = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v36) = v35;
    goto LABEL_14;
  }
  v23 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v59) + 16);
  v24 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v59);
  v25 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v23, (mlir::CallGraphNode *)(v24 - 16), *(_QWORD *)(*(_QWORD *)(v60 + 96) + 16));
  if ((v26 & 1) != 0)
    v27 = *((_QWORD *)v25 + 1);
  else
    v27 = 0;
  v53 = v27;
  Value = (_QWORD *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v53);
  v38 = mlir::getElementTypeOrSelf(Value);
  v39 = mlir::UnrankedTensorType::get(v38);
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v55)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v54))
  {
    goto LABEL_30;
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55);
  v41 = v40;
  LOBYTE(v51) = 0;
  v52 = 0;
  v42 = mlir::ValueRange::dereference_iterator(v66, 2);
  if (mlir::mpsx::getAxis((uint64_t)a2, a3, v42, v41, (uint64_t)&v51))
  {
    if (!v52)
      goto LABEL_30;
    BatchDims = mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase::getBatchDims((mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase *)&v59);
    v56 = v58;
    v57 = 0x400000000;
    ArgAttrsAttr = (unint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55);
    v46 = v45;
    v47 = (unint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v54);
    if (v49)
      v39 = mlir::RankedTensorType::get((uint64_t)v56, v57, v38, 0);
    if (v56 != v58)
      free(v56);
    if (v49)
    {
LABEL_30:
      v50 = *(unsigned int *)(a11 + 8);
      if (v50 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v50 + 1, 8);
        LODWORD(v50) = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v50) = v39;
LABEL_14:
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::mpsx::QuantizedGatherOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *Value;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  const char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[20];

  v31[19] = *MEMORY[0x1E0C80C00];
  v23 = *a1;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v23);
  if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
  {
LABEL_7:
    v6 = "'mpsx.quantized_gather' op requires attribute 'batch_dims'";
LABEL_18:
    v21[0] = v6;
    v22 = 259;
    mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
LABEL_19:
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
    if (v26)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v26);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v27);
    return v9;
  }
  v5 = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      v5 = *((_QWORD *)Value + 1);
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
      goto LABEL_7;
  }
  v7 = *((_QWORD *)Value + 1);
  while (1)
  {
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
    {
      v6 = "'mpsx.quantized_gather' op requires attribute 'dtype'";
      goto LABEL_18;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 16) == mlir::CallGraphNode::getCallableRegion(Value))
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  v8 = *((_QWORD *)Value + 1);
  while (1)
  {
    if (Value == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v23))
    {
      v6 = "'mpsx.quantized_gather' op requires attribute 'operandSegmentSizes'";
      goto LABEL_18;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 24) == mlir::CallGraphNode::getCallableRegion(Value))
      break;
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
  }
  v20 = *((_QWORD *)Value + 1);
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v20);
  if (v11 != 6)
  {
    v12 = v11;
    v21[0] = "'mpsx.quantized_gather' op 'operandSegmentSizes' attribute for specifying operand segments must have 6 elements, but got ";
    v22 = 259;
    mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
    if (v26)
    {
      v24 = 5;
      v25 = v12;
      v13 = &v24;
      v14 = v28;
      if (v29 >= v30)
      {
        v18 = v29 + 1;
        if (v28 <= (unint64_t)&v24 && v28 + 24 * v29 > (unint64_t)&v24)
        {
          v19 = (char *)&v24 - v28;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v18, 24);
          v14 = v28;
          v13 = (int *)&v19[v28];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, v31, v18, 24);
          v13 = &v24;
          v14 = v28;
        }
      }
      v15 = v14 + 24 * v29;
      v16 = *(_OWORD *)v13;
      *(_QWORD *)(v15 + 16) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v15 = v16;
      ++v29;
    }
    goto LABEL_19;
  }
  if (v8)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
    {
      v6 = "'mpsx.quantized_gather' op attribute 'dtype' failed to satisfy constraint: any type attribute";
      goto LABEL_18;
    }
    v26 = v8;
    mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  }
  if (!v7
    || *(_UNKNOWN **)(*(_QWORD *)v7 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id
    && (v21[0] = v7,
        v26 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v21),
        mlir::Type::isUnsignedInteger((mlir::Type *)&v26, 32)))
  {
    if (!v5 || *(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
      return 1;
    v17 = "'mpsx.quantized_gather' op attribute 'allow_negative_indices' failed to satisfy constraint: unit attribute";
  }
  else
  {
    v17 = "'mpsx.quantized_gather' op attribute 'batch_dims' failed to satisfy constraint: 32-bit unsigned integer attribute";
  }
  v21[0] = v17;
  v22 = 259;
  mlir::emitError(a2, (uint64_t)v21, (uint64_t)&v26);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v26);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v26);
  return v9;
}

void *mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase::getBatchDims(mlir::mpsx::detail::QuantizedGatherOpGenericAdaptorBase *this)
{
  mlir::CallGraphNode *Value;
  uint64_t v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  unsigned int v10;
  uint64_t v11;

  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue(this);
  v3 = mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v3 - 32), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 8));
  if ((v5 & 1) != 0)
    v6 = *((_QWORD *)v4 + 1);
  else
    v6 = 0;
  v11 = v6;
  mlir::IntegerAttr::getValue(&v11, (llvm::APInt *)&__p);
  if (v10 <= 0x40)
    return __p;
  v7 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v7;
}

uint64_t mlir::mpsx::`anonymous namespace'::inferQuantizedGatherShape(uint64_t a1, char a2, unint64_t *a3, unint64_t a4, unint64_t *a5, unint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v16;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  unint64_t *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  unint64_t *v62;
  uint64_t v63;
  __int128 v64;
  unint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76[3];

  v76[2] = *MEMORY[0x1E0C80C00];
  v75 = a7;
  v74 = a8;
  v10 = a8;
  v11 = a4 - a8;
  if (a4 <= a8 || a6 < a8)
    return mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>(a1, a2, "invalid batch dimensions: ", &v74, ", must be less than ranks of all input tensors");
  v16 = a7 - a8;
  if (a7 < a8)
    return mlir::emitOptionalError<char const(&)[39],char const(&)[19],long long &,char const(&)[4],unsigned int &>(a1, a2, "Axis must be greater than or equal to ", "batch dimensions, ", &v75, " < ", &v74);
  v19 = a6 - a8;
  v20 = v11 - 1;
  if ((uint64_t)(v11 - 1 + v19) < 0)
    return mlir::emitOptionalError<char const(&)[57],char const(&)[5]>(a1, a2, "Rank of destination array must be greater than or equal ", "to 0");
  v22 = v20 + a6;
  v23 = *(unsigned int *)(a9 + 8);
  if (v20 + a6 != v23)
  {
    if (v20 + a6 >= v23)
    {
      v72 = a7 - a8;
      v73 = v11;
      v71 = a6 - a8;
      if (v22 > *(unsigned int *)(a9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a9, (void *)(a9 + 16), v20 + a6, 8);
        v19 = v71;
        v16 = v72;
        v11 = v73;
        v23 = *(unsigned int *)(a9 + 8);
      }
      if (v22 != v23)
      {
        bzero((void *)(*(_QWORD *)a9 + 8 * v23), 8 * (v22 - v23));
        v19 = v71;
        v16 = v72;
        v11 = v73;
      }
    }
    *(_DWORD *)(a9 + 8) = v22;
    v23 = v22;
  }
  v24 = &a3[a4];
  v25 = *(unint64_t **)a9;
  v26 = *(_QWORD *)a9 + 8 * v23;
  v27 = v16 - v20;
  if (v16 != v20)
  {
    v28 = 8 * a4 - 16;
    v29 = v28 - 8 * a7;
    if (v29 < 0x78)
    {
      v30 = (char *)&a3[a4];
      v31 = &v25[v23];
LABEL_24:
      v38 = v31 - 1;
      do
      {
        v39 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *v38-- = v39;
      }
      while (v30 != (char *)&v24[v27]);
      goto LABEL_26;
    }
    v30 = (char *)&a3[a4];
    v31 = &v25[v23];
    if (v30 - (char *)v25 - 8 * v23 < 0x20)
      goto LABEL_24;
    v32 = (v29 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = (char *)&v24[v33 / 0xFFFFFFFFFFFFFFF8];
    v31 = (unint64_t *)(v26 - v33);
    v34 = &v25[v23 - 2];
    v35 = (__int128 *)((char *)a3 + v28);
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *v35;
      *((_OWORD *)v34 - 1) = *(v35 - 1);
      *(_OWORD *)v34 = v37;
      v34 -= 4;
      v35 -= 2;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_24;
  }
LABEL_26:
  if (a6 != v10)
  {
    v40 = &a5[a6];
    v41 = v26 + 8 * v27;
    v42 = 8 * a6 - 8 * v10 - 8;
    if (v42 >= 0x98)
    {
      v44 = v23 + a7;
      v43 = &a5[a6];
      if ((unint64_t)v43 + 8 * a4 - (_QWORD)&v25[v44] - 8 >= 0x20)
      {
        v45 = (v42 >> 3) + 1;
        v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
        v43 = &v40[v46 / 0xFFFFFFFFFFFFFFF8];
        v41 -= v46;
        v47 = (_OWORD *)((char *)v25 + v44 * 8 - 8 * a4 - 8);
        v48 = &a5[a6 - 2];
        v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v50 = *(_OWORD *)v48;
          *(v47 - 1) = *((_OWORD *)v48 - 1);
          *v47 = v50;
          v47 -= 2;
          v48 -= 4;
          v49 -= 4;
        }
        while (v49);
        if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_35;
      }
    }
    else
    {
      v43 = &a5[a6];
    }
    v51 = &v40[-v19];
    v52 = (_QWORD *)(v41 - 8);
    do
    {
      v53 = *--v43;
      *v52-- = v53;
    }
    while (v43 != v51);
  }
LABEL_35:
  if (a7 != v10)
  {
    v54 = v26 + 8 * (v16 - (v11 + v19)) + 8;
    v55 = &v24[v16 - v11];
    v56 = 8 * a7 - 8 * v10 - 8;
    if (v56 < 0xB8)
      goto LABEL_41;
    v57 = v23 + a7 + v10;
    v58 = 8 * (a6 + a4);
    if ((unint64_t)&a3[a7 - 1] + v58 - (_QWORD)&v25[v57] < 0x20)
      goto LABEL_41;
    v59 = (v56 >> 3) + 1;
    v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
    v55 = (unint64_t *)((char *)v55 - v60);
    v54 -= v60;
    v61 = (_OWORD *)((char *)v25 + v57 * 8 - v58 - 8);
    v62 = &a3[a7 - 2];
    v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v64 = *(_OWORD *)v62;
      *(v61 - 1) = *((_OWORD *)v62 - 1);
      *v61 = v64;
      v61 -= 2;
      v62 -= 4;
      v63 -= 4;
    }
    while (v63);
    if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      v65 = &v24[-v11];
      v66 = (_QWORD *)(v54 - 8);
      do
      {
        v67 = *--v55;
        *v66-- = v67;
      }
      while (v55 != v65);
    }
  }
  if (a8)
  {
    v68 = 8 * v10;
    do
    {
      v69 = *a5++;
      v76[0] = v69;
      v70 = *a3++;
      v76[1] = v70;
      *v25++ = mlir::mps::mergeDynamicDims(v76, 2);
      v68 -= 8;
    }
    while (v68);
  }
  return 1;
}

BOOL mlir::mpsx::QuantizedGatherOp::verify(mlir::Operation **this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *ArgAttrsAttr;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int ODSOperandIndexAndLength;
  _QWORD *v39;
  uint64_t v40;
  uint64_t p_p;
  unsigned int v42;
  uint64_t ZeroPoint;
  uint64_t Min;
  unint64_t v45;
  char *v46;
  const void **v47[4];
  __int16 v48;
  unint64_t v49;
  _QWORD v50[2];
  _QWORD v51[2];
  unint64_t v52;
  unint64_t v53;
  void *__p;
  _QWORD v55[2];
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  _QWORD v59[20];

  v59[19] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9)
                                         + 32
                                         * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 0)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
    goto LABEL_10;
  v3 = *v2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v51[0] = v2;
  v51[1] = v12;
  v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 9)
                                          + 32
                                          * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 1)+ 24)+ 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v13)
    goto LABEL_20;
  v14 = *v13;
  v15 = mlir::TypeID::get<mlir::ShapedType>();
  v16 = *(unsigned int *)(v14 + 16);
  if (!(_DWORD)v16)
    goto LABEL_20;
  v17 = *(_QWORD **)(v14 + 8);
  v18 = &v17[2 * v16];
  do
  {
    v19 = v16 >> 1;
    v20 = &v17[2 * (v16 >> 1)];
    v22 = *v20;
    v21 = v20 + 2;
    v16 += ~(v16 >> 1);
    if (v22 < v15)
      v17 = v21;
    else
      v16 = v19;
  }
  while (v16);
  if (v17 != v18 && *v17 == v15)
    v23 = v17[1];
  else
LABEL_20:
    v23 = 0;
  v50[0] = v13;
  v50[1] = v23;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51))
  {
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    v26 = v25;
  }
  else
  {
    ArgAttrsAttr = 0;
    v26 = 0x8000000000000000;
  }
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v50))
  {
    v27 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
    v29 = v28;
  }
  else
  {
    v27 = 0;
    v29 = 0x8000000000000000;
  }
  v47[0] = (const void **)mlir::anec::AveragePool::getKsizeAttr(this);
  mlir::IntegerAttr::getValue(v47, (llvm::APInt *)&__p);
  if (LODWORD(v55[0]) > 0x40)
  {
    v30 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    v30 = __p;
  }
  v49 = v30;
  if ((v26 == 0x8000000000000000 || v30 < v26) && (v29 == 0x8000000000000000 || v30 <= v29))
  {
    v35 = 1;
    if (v26 == 0x8000000000000000 || v29 == 0x8000000000000000)
      return v35;
    if (mlir::verifyCompatibleShape(ArgAttrsAttr, v30, v27, v30))
    {
      LOBYTE(v52) = 0;
      LOBYTE(v53) = 0;
      v37 = *((_QWORD *)*this + 3);
      ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 2);
      if (!mlir::mpsx::getAxis(v37, 1, *(_QWORD *)(*((_QWORD *)*this + 9) + 32 * ODSOperandIndexAndLength + 24), v26, (uint64_t)&v52))return 0;
      if (!(_BYTE)v53)
        return v35;
      if (v52 < v30)
      {
        v47[0] = (const void **)"Axis must be greater than or equal to batch ";
        v48 = 259;
        mlir::OpState::emitOpError((uint64_t **)this, v47, (uint64_t)&__p);
        if (__p)
          mlir::Diagnostic::operator<<((uint64_t)v55, "dimensions, ");
        v39 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<long long &>((uint64_t)&__p, (uint64_t *)&v52);
        v40 = (uint64_t)v39;
        if (*v39)
          mlir::Diagnostic::operator<<((uint64_t)(v39 + 1), " < ");
        p_p = mlir::InFlightDiagnostic::operator<<<unsigned long>(v40, (uint64_t *)&v49);
        goto LABEL_58;
      }
      if ((uint64_t)(v26 + v29 - 1) >= 0)
      {
        __p = v51;
        v55[0] = this;
        if (!v51[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51))
          return v35;
        v42 = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 3);
        if (mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&__p, "scale", *(_QWORD *)(*((_QWORD *)*this + 9) + 32 * v42 + 24)))
        {
          ZeroPoint = mlir::mpsx::QuantizedGatherOp::getZeroPoint(this);
          if (mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&__p, "zeroPoint", ZeroPoint))
          {
            Min = mlir::mpsx::QuantizedGatherOp::getMin(this);
            return mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()((uint64_t)&__p, "min", Min) != 0;
          }
        }
        return 0;
      }
      v47[0] = (const void **)"Rank of destination array must be greater than or equal to 0";
      v48 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v47, (uint64_t)&__p);
    }
    else
    {
      v47[0] = (const void **)"invalid input tensor shapes: input tensor shapes ";
      v48 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v47, (uint64_t)&__p);
      if (__p)
        mlir::Diagnostic::operator<<((uint64_t)v55, "must match along batch dimensions");
    }
    p_p = (uint64_t)&__p;
LABEL_58:
    v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(p_p);
    mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&__p);
    return v35;
  }
  v47[0] = (const void **)"invalid batch dimensions: ";
  v48 = 259;
  mlir::OpState::emitOpError((uint64_t **)this, v47, (uint64_t)&__p);
  if (__p)
  {
    LODWORD(v52) = 5;
    v53 = v30;
    v31 = &v52;
    v32 = v56;
    if (v57 >= v58)
    {
      v45 = v57 + 1;
      if (v56 <= (unint64_t)&v52 && v56 + 24 * v57 > (unint64_t)&v52)
      {
        v46 = (char *)&v52 - v56;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
        v32 = v56;
        v31 = (unint64_t *)&v46[v56];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v59, v45, 24);
        v31 = &v52;
        v32 = v56;
      }
    }
    v33 = v32 + 24 * v57;
    v34 = *(_OWORD *)v31;
    *(_QWORD *)(v33 + 16) = v31[2];
    *(_OWORD *)v33 = v34;
    ++v57;
    if (__p)
      mlir::Diagnostic::operator<<((uint64_t)v55, ", must be less than ranks of all input tensors");
  }
  v35 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v55);
  return v35;
}

uint64_t mlir::mpsx::QuantizedGatherOp::getUpdates(mlir::Operation **this)
{
  return *(_QWORD *)(*((_QWORD *)*this + 9)
                   + 32 * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 0)
                   + 24);
}

uint64_t mlir::mpsx::QuantizedGatherOp::getIndices(mlir::Operation **this)
{
  return *(_QWORD *)(*((_QWORD *)*this + 9)
                   + 32 * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 1)
                   + 24);
}

void *mlir::mpsx::QuantizedGatherOp::getBatchDims(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t KsizeAttr;

  KsizeAttr = mlir::anec::AveragePool::getKsizeAttr(this);
  mlir::IntegerAttr::getValue(&KsizeAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

uint64_t mlir::mpsx::QuantizedGatherOp::getAxis(mlir::Operation **this)
{
  return *(_QWORD *)(*((_QWORD *)*this + 9)
                   + 32 * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 2)
                   + 24);
}

uint64_t mlir::mpsx::QuantizedGatherOp::verify(void)::$_0::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  int *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  const void **v38[4];
  __int16 v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[20];

  v48[19] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 1;
  v5 = *(uint64_t ***)(a1 + 8);
  v40[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v40[1] = v6;
  if (!v40[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v40))
    return 1;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v40)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v40),
        v8 = v7,
        mlir::CallableOpInterface::getArgAttrsAttr(*(mlir::CallableOpInterface **)a1),
        v8 == v9))
  {
    mlir::CallableOpInterface::getArgAttrsAttr(*(mlir::CallableOpInterface **)a1);
    if (v10 >= 1)
    {
      v11 = 0;
      while (1)
      {
        v13 = 8 * v11;
        v14 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(*(mlir::CallableOpInterface **)a1) + v13);
        v15 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v40) + v13);
        v16 = v14 == 0x8000000000000000 || v15 == 0x8000000000000000;
        if (!v16 && v14 % v15)
          break;
        ++v11;
        mlir::CallableOpInterface::getArgAttrsAttr(*(mlir::CallableOpInterface **)a1);
        if (v11 >= v12)
          return 1;
      }
      v39 = 257;
      mlir::OpState::emitOpError(v5, v38, (uint64_t)&v43);
      if (!v43)
        goto LABEL_32;
      mlir::Diagnostic::operator<<((uint64_t)v44, a2);
      if (!v43)
        goto LABEL_32;
      mlir::Diagnostic::operator<<((uint64_t)v44, " shape not compatible with updates for axis ");
      if (!v43)
        goto LABEL_32;
      v41 = 2;
      v42 = v11;
      v17 = &v41;
      v18 = v45;
      if (v46 >= v47)
      {
        v32 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          v35 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v32, 24);
          v18 = v45;
          v17 = (int *)&v35[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v32, 24);
          v17 = &v41;
          v18 = v45;
        }
      }
      v19 = v18 + 24 * v46;
      v20 = *(_OWORD *)v17;
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v19 = v20;
      ++v46;
      if (!v43)
        goto LABEL_32;
      mlir::Diagnostic::operator<<((uint64_t)v44, ": ");
      if (!v43)
        goto LABEL_32;
      v41 = 2;
      v42 = v14;
      v21 = &v41;
      v22 = v45;
      if (v46 >= v47)
      {
        v33 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          v36 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
          v22 = v45;
          v21 = (int *)&v36[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
          v21 = &v41;
          v22 = v45;
        }
      }
      v23 = v22 + 24 * v46;
      v24 = *(_OWORD *)v21;
      *(_QWORD *)(v23 + 16) = *((_QWORD *)v21 + 2);
      *(_OWORD *)v23 = v24;
      ++v46;
      if (!v43)
        goto LABEL_32;
      mlir::Diagnostic::operator<<((uint64_t)v44, " % ");
      if (!v43)
        goto LABEL_32;
      v41 = 2;
      v42 = v15;
      v25 = &v41;
      v26 = v45;
      if (v46 >= v47)
      {
        v34 = v46 + 1;
        if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
        {
          v37 = (char *)&v41 - v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
          v26 = v45;
          v25 = (int *)&v37[v45];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
          v25 = &v41;
          v26 = v45;
        }
      }
      v27 = v26 + 24 * v46;
      v28 = *(_OWORD *)v25;
      *(_QWORD *)(v27 + 16) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v27 = v28;
      ++v46;
      if (!v43)
        goto LABEL_32;
      v29 = " != 0";
      goto LABEL_31;
    }
    return 1;
  }
  v39 = 257;
  mlir::OpState::emitOpError(v5, v38, (uint64_t)&v43);
  if (!v43)
    goto LABEL_32;
  mlir::Diagnostic::operator<<((uint64_t)v44, a2);
  if (!v43)
    goto LABEL_32;
  v29 = " rank doesn't match the rank of updates";
LABEL_31:
  mlir::Diagnostic::operator<<((uint64_t)v44, v29);
LABEL_32:
  v30 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v43);
  if (v43)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
  return v30;
}

uint64_t mlir::mpsx::QuantizedGatherOp::getScale(mlir::Operation **this)
{
  return *(_QWORD *)(*((_QWORD *)*this + 9)
                   + 32 * mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 3)
                   + 24);
}

uint64_t mlir::mpsx::QuantizedGatherOp::getZeroPoint(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 4);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedGatherOp::getMin(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, 5);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::MakeListOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v17;
  mlir::CallGraphNode *v18;
  char v19;
  uint64_t v20;
  __guard v22;
  unsigned __int8 **TypeUniquer;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  mlir::UnknownLoc *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v29 = a6;
  LOBYTE(v30) = 0;
  v31 = 0;
  v32 = a9;
  v33 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v29);
    if (v31)
      v31 = 0;
    mlir::OperationName::OperationName(&v30, "mpsx.make_list", 14, Context);
    v31 = 1;
  }
  v34 = a4;
  v35 = a5;
  v15 = mlir::UnknownLoc::get(this, a2);
  if (!mlir::mpsx::MakeListOpAdaptor::verify(&v29, v15))
    return 0;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v29);
  v17 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v29);
  v18 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v17, **(_QWORD **)(v30 + 96));
  if ((v19 & 1) != 0)
    v20 = *((_QWORD *)v18 + 1);
  else
    v20 = 0;
  v27[0] = v20;
  v26 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v27);
  v22 = mlir::TypeID::get<mlir::mpsx::ListType>();
  v28 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v27[0] = v22;
  v27[1] = &v28;
  v24 = mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_, (uint64_t)v27, v22, &v26);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::MakeListOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  uint64_t Value;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x1E0C80C00];
  v13 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
    {
      v5 = "'mpsx.make_list' op requires attribute 'element_type'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13))
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1[1] + 96) + 8) == mlir::CallGraphNode::getCallableRegion(i))
        v9 = *((_QWORD *)i + 1);
      i = (mlir::CallGraphNode *)((char *)i + 16);
    }
    while (i != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v13));
  }
  if (!v8
    || *(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
    && (Value = v8,
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&Value),
        v11[0] = v8,
        v10 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11),
        mlir::mpsx::isMPSXListElementType(v10)))
  {
    if (!v9)
      return 1;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      v11[0] = v9;
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v11);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32))
        return 1;
    }
    v5 = "'mpsx.make_list' op attribute 'max_size' failed to satisfy constraint: 32-bit unsigned integer attribute";
  }
  else
  {
    v5 = "'mpsx.make_list' op attribute 'element_type' failed to satisfy constraint: any type attribute MPSX list element type attribute";
  }
LABEL_6:
  v11[0] = v5;
  v12 = 259;
  mlir::emitError(a2, (uint64_t)v11, (uint64_t)&Value);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v6;
}

uint64_t mlir::mpsx::ListPushBackOp::verify(uint64_t **this)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD *v14;
  unint64_t v15[2];
  unint64_t v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v2 = (*this)[9];
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v16, (uint64_t)&v11, 1uLL);
  v9[0] = *(const void ***)(v3 + 8);
  mlir::ValueRange::ValueRange(v15, (uint64_t)v9, 1uLL);
  v13[0] = off_1E0DFB738;
  v14 = v13;
  v5 = v14;
  if (v14 == v13)
  {
    v6 = 4;
    v5 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  if ((v4 & 1) != 0)
    return 1;
  v9[0] = (const void **)"list's element_type and element's type are not compatible";
  v10 = 259;
  mlir::OpState::emitOpError(this, v9, (uint64_t)&v11);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v12);
  return v7;
}

uint64_t mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 != a4)
    return 0;
  v6 = v18;
  v18[0] = off_1E0E51350;
  v18[1] = v18;
  v18[2] = a5;
  v19 = v18;
  if (!a2)
  {
    v13 = 1;
    v14 = 4;
    goto LABEL_16;
  }
  v8 = 0;
  v9 = a2 - 1;
  do
  {
    v10 = mlir::TypeRange::dereference_iterator(a1, v8);
    v16 = mlir::TypeRange::dereference_iterator(a3, v8);
    v17 = v10;
    if (!v19)
      std::__throw_bad_function_call[abi:nn180100]();
    v11 = (*(uint64_t (**)(_QWORD *, unint64_t *, unint64_t *))(*v19 + 48))(v19, &v17, &v16);
    if ((_DWORD)v11)
      v12 = v9 == v8;
    else
      v12 = 1;
    ++v8;
  }
  while (!v12);
  v13 = v11;
  v6 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v6 = v18;
    goto LABEL_16;
  }
  if (v19)
  {
    v14 = 5;
LABEL_16:
    (*(void (**)(void))(*v6 + 8 * v14))();
  }
  return v13;
}

uint64_t mlir::mpsx::ANEOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::ANEOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::GPUOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::GPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::CPUOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::CPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

uint64_t mlir::mpsx::InterleaveOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t OperandRange;
  uint64_t v18;
  const void *ArgAttrsAttr;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t Axis;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD v36[2];
  void *v37;
  uint64_t v38;
  _BYTE v39[40];
  uint64_t v40;
  _BYTE v41[8];
  char v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v40 = a6;
  v41[0] = 0;
  v42 = 0;
  v43 = a9;
  v44 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v40);
    if (v42)
      v42 = 0;
    mlir::OperationName::OperationName(v41, "mpsx.interleave", 15, Context);
    v42 = 1;
  }
  v45 = a4;
  v46 = a5;
  if (a5
    && (v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::InterleaveOpAdaptor::verify(&v40, v15))
    && (v37 = v45,
        v38 = 0,
        v16 = mlir::ValueRange::dereference_iterator(&v37, 0),
        v36[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v36[1] = a2,
        v36[0]))
  {
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v36) & 1) != 0)
    {
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
      v20 = v18;
      v37 = v39;
      v38 = 0x500000000;
      v21 = 8 * v18;
      if ((unint64_t)(8 * v18) < 0x29)
      {
        v22 = 0;
        if (!v18)
        {
LABEL_20:
          v27 = v22 + (v21 >> 3);
          LODWORD(v38) = v27;
          if ((unint64_t)(v27 - 6) > 0xFFFFFFFFFFFFFFFDLL)
          {
            Axis = mlir::anec::detail::ConcatGenericAdaptorBase::getAxis((mlir::anec::detail::ConcatGenericAdaptorBase *)&v40);
            v30 = 1;
            if ((_DWORD)v27 != 4)
              v30 = 2;
            v31 = v37;
            v32 = *((_QWORD *)v37 + v30);
            if (v32 != 0x8000000000000000)
              *((_QWORD *)v37 + v30) = v32 / Axis;
            v33 = v31[v27 - 1];
            if (v33 != 0x8000000000000000)
              v31[v27 - 1] = v33 * Axis;
            v28 = mlir::RankedTensorType::get((uint64_t)v31, v38, OperandRange, 0);
          }
          else
          {
            v28 = mlir::UnrankedTensorType::get(OperandRange);
          }
          v34 = v28;
          v35 = *(_DWORD *)(a11 + 8);
          if (v35 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
            v35 = *(_DWORD *)(a11 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v34;
          ++*(_DWORD *)(a11 + 8);
          if (v37 != v39)
            free(v37);
          return 1;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, (8 * v18) >> 3, 8);
        v22 = v38;
        if (!v20)
          goto LABEL_20;
      }
      memcpy((char *)v37 + 8 * v22, ArgAttrsAttr, v21);
      v22 = v38;
      goto LABEL_20;
    }
    v23 = OperandRange;
  }
  else
  {
    v23 = mlir::Float32Type::get(this, a2);
  }
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::InterleaveOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t ArgAttrsAttr;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  int *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  _QWORD v39[2];
  const void **v40[4];
  __int16 v41;
  mlir::Operation *v42;
  int v43;
  uint64_t v44;
  void *__p;
  _DWORD v46[4];
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD v50[20];

  v50[19] = *MEMORY[0x1E0C80C00];
  v1 = *this;
  v42 = (mlir::Operation *)*this;
  v40[0] = (const void **)mlir::anec::Tile::getMultipliersAttr(&v42);
  mlir::IntegerAttr::getValue(v40, (llvm::APInt *)&__p);
  if (v46[0] > 0x40u)
  {
    v2 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    v2 = __p;
  }
  mlir::getANENextSupportedInterleaveValue(v2);
  if (v3)
  {
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v4)
      goto LABEL_14;
    v5 = *v4;
    v6 = mlir::TypeID::get<mlir::ShapedType>();
    v7 = *(unsigned int *)(v5 + 16);
    if (!(_DWORD)v7)
      goto LABEL_14;
    v8 = *(_QWORD **)(v5 + 8);
    v9 = &v8[2 * v7];
    do
    {
      v10 = v7 >> 1;
      v11 = &v8[2 * (v7 >> 1)];
      v13 = *v11;
      v12 = v11 + 2;
      v7 += ~(v7 >> 1);
      if (v13 < v6)
        v8 = v12;
      else
        v7 = v10;
    }
    while (v7);
    if (v8 != v9 && *v8 == v6)
      v14 = v8[1];
    else
LABEL_14:
      v14 = 0;
    v39[0] = v4;
    v39[1] = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39))
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
      if ((unint64_t)(v16 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v41 = 257;
        mlir::Operation::emitOpError(v1, v40, (uint64_t)&__p);
        if (__p)
        {
          v17 = "Interleave can only be applied on 4D or 5D tensor";
LABEL_21:
          mlir::Diagnostic::operator<<((uint64_t)v46, v17);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
      v19 = ArgAttrsAttr;
      v20 = v16;
      v40[0] = (const void **)mlir::anec::Tile::getMultipliersAttr(&v42);
      mlir::IntegerAttr::getValue(v40, (llvm::APInt *)&__p);
      if (v46[0] > 0x40u)
      {
        v21 = *(unsigned int *)__p;
        operator delete[](__p);
      }
      else
      {
        v21 = __p;
      }
      v22 = v20 == 4;
      v18 = 1;
      if (v22)
        v23 = 1;
      else
        v23 = 2;
      v24 = *(_QWORD *)(v19 + 8 * v23);
      if (v24 == 0x8000000000000000)
        return v18;
      if (v24 % v21)
      {
        v41 = 257;
        mlir::Operation::emitOpError(v1, v40, (uint64_t)&__p);
        if (__p)
        {
          mlir::Diagnostic::operator<<((uint64_t)v46, "channel ");
          if (__p)
          {
            v25 = *(_QWORD *)(v19 + 8 * v23);
            v43 = 2;
            v44 = v25;
            v26 = &v43;
            v27 = v47;
            if (v48 >= v49)
            {
              v35 = v48 + 1;
              if (v47 <= (unint64_t)&v43 && v47 + 24 * v48 > (unint64_t)&v43)
              {
                v37 = (char *)&v43 - v47;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
                v27 = v47;
                v26 = (int *)&v37[v47];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v35, 24);
                v26 = &v43;
                v27 = v47;
              }
            }
            v28 = v27 + 24 * v48;
            v29 = *(_OWORD *)v26;
            *(_QWORD *)(v28 + 16) = *((_QWORD *)v26 + 2);
            *(_OWORD *)v28 = v29;
            ++v48;
            if (__p)
            {
              mlir::Diagnostic::operator<<((uint64_t)v46, " must be a multiple of interleave ");
              if (__p)
              {
                v43 = 2;
                v44 = v21;
                v30 = &v43;
                v31 = v47;
                if (v48 >= v49)
                {
                  v36 = v48 + 1;
                  if (v47 <= (unint64_t)&v43 && v47 + 24 * v48 > (unint64_t)&v43)
                  {
                    v38 = (char *)&v43 - v47;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
                    v31 = v47;
                    v30 = (int *)&v38[v47];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, v50, v36, 24);
                    v30 = &v43;
                    v31 = v47;
                  }
                }
                v32 = v31 + 24 * v48;
                v33 = *(_OWORD *)v30;
                *(_QWORD *)(v32 + 16) = *((_QWORD *)v30 + 2);
                *(_OWORD *)v32 = v33;
                ++v48;
              }
            }
          }
        }
        goto LABEL_22;
      }
    }
    return 1;
  }
  v41 = 257;
  mlir::Operation::emitOpError(v1, v40, (uint64_t)&__p);
  if (__p)
  {
    v17 = "interleave factor not supported";
    goto LABEL_21;
  }
LABEL_22:
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v46);
  return v18;
}

uint64_t mlir::mpsx::DeinterleaveOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t OperandRange;
  uint64_t v18;
  const void *ArgAttrsAttr;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t Axis;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD v36[2];
  void *v37;
  uint64_t v38;
  _BYTE v39[40];
  uint64_t v40;
  _BYTE v41[8];
  char v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v40 = a6;
  v41[0] = 0;
  v42 = 0;
  v43 = a9;
  v44 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v40);
    if (v42)
      v42 = 0;
    mlir::OperationName::OperationName(v41, "mpsx.deinterleave", 17, Context);
    v42 = 1;
  }
  v45 = a4;
  v46 = a5;
  if (a5
    && (v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::DeinterleaveOpAdaptor::verify(&v40, v15))
    && (v37 = v45,
        v38 = 0,
        v16 = mlir::ValueRange::dereference_iterator(&v37, 0),
        v36[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v36[1] = a2,
        v36[0]))
  {
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
    if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v36) & 1) != 0)
    {
      ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
      v20 = v18;
      v37 = v39;
      v38 = 0x500000000;
      v21 = 8 * v18;
      if ((unint64_t)(8 * v18) < 0x29)
      {
        v22 = 0;
        if (!v18)
        {
LABEL_20:
          v27 = v22 + (v21 >> 3);
          LODWORD(v38) = v27;
          if ((unint64_t)(v27 - 6) > 0xFFFFFFFFFFFFFFFDLL)
          {
            Axis = mlir::anec::detail::ConcatGenericAdaptorBase::getAxis((mlir::anec::detail::ConcatGenericAdaptorBase *)&v40);
            v30 = 1;
            if ((_DWORD)v27 != 4)
              v30 = 2;
            v31 = v37;
            v32 = *((_QWORD *)v37 + v30);
            if (v32 != 0x8000000000000000)
              *((_QWORD *)v37 + v30) = v32 * Axis;
            v33 = v31[v27 - 1];
            if (v33 != 0x8000000000000000)
              v31[v27 - 1] = v33 / Axis;
            v28 = mlir::RankedTensorType::get((uint64_t)v31, v38, OperandRange, 0);
          }
          else
          {
            v28 = mlir::UnrankedTensorType::get(OperandRange);
          }
          v34 = v28;
          v35 = *(_DWORD *)(a11 + 8);
          if (v35 >= *(_DWORD *)(a11 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v35 + 1, 8);
            v35 = *(_DWORD *)(a11 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a11 + 8 * v35) = v34;
          ++*(_DWORD *)(a11 + 8);
          if (v37 != v39)
            free(v37);
          return 1;
        }
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, (8 * v18) >> 3, 8);
        v22 = v38;
        if (!v20)
          goto LABEL_20;
      }
      memcpy((char *)v37 + 8 * v22, ArgAttrsAttr, v21);
      v22 = v38;
      goto LABEL_20;
    }
    v23 = OperandRange;
  }
  else
  {
    v23 = mlir::Float32Type::get(this, a2);
  }
  v24 = mlir::UnrankedTensorType::get(v23);
  v25 = *(unsigned int *)(a11 + 8);
  if (v25 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
    LODWORD(v25) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::DeinterleaveOp::verify(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t ArgAttrsAttr;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  int *v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  const void **v38[4];
  __int16 v39;
  mlir::Operation *v40;
  int v41;
  uint64_t v42;
  void *__p;
  _DWORD v44[4];
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[20];

  v48[19] = *MEMORY[0x1E0C80C00];
  v1 = *this;
  v40 = (mlir::Operation *)*this;
  v38[0] = (const void **)mlir::anec::Tile::getMultipliersAttr(&v40);
  mlir::IntegerAttr::getValue(v38, (llvm::APInt *)&__p);
  if (v44[0] > 0x40u)
  {
    v2 = *(unsigned int *)__p;
    operator delete[](__p);
  }
  else
  {
    v2 = __p;
  }
  mlir::getANENextSupportedInterleaveValue(v2);
  if (v3)
  {
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v4)
      goto LABEL_14;
    v5 = *v4;
    v6 = mlir::TypeID::get<mlir::ShapedType>();
    v7 = *(unsigned int *)(v5 + 16);
    if (!(_DWORD)v7)
      goto LABEL_14;
    v8 = *(_QWORD **)(v5 + 8);
    v9 = &v8[2 * v7];
    do
    {
      v10 = v7 >> 1;
      v11 = &v8[2 * (v7 >> 1)];
      v13 = *v11;
      v12 = v11 + 2;
      v7 += ~(v7 >> 1);
      if (v13 < v6)
        v8 = v12;
      else
        v7 = v10;
    }
    while (v7);
    if (v8 != v9 && *v8 == v6)
      v14 = v8[1];
    else
LABEL_14:
      v14 = 0;
    v37[0] = v4;
    v37[1] = v14;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v37))
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v37);
      if ((unint64_t)(v16 - 6) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = 257;
        mlir::Operation::emitOpError(v1, v38, (uint64_t)&__p);
        if (__p)
        {
          v17 = "Interleave can only be applied on 4D or 5D tensor";
LABEL_21:
          mlir::Diagnostic::operator<<((uint64_t)v44, v17);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
      v19 = ArgAttrsAttr;
      v20 = v16;
      v38[0] = (const void **)mlir::anec::Tile::getMultipliersAttr(&v40);
      mlir::IntegerAttr::getValue(v38, (llvm::APInt *)&__p);
      if (v44[0] > 0x40u)
      {
        v21 = *(unsigned int *)__p;
        operator delete[](__p);
      }
      else
      {
        v21 = __p;
      }
      v22 = *(_QWORD *)(v19 + 8 * (v20 - 1));
      if (v22 != 0x8000000000000000 && v22 % v21)
      {
        v39 = 257;
        mlir::Operation::emitOpError(v1, v38, (uint64_t)&__p);
        if (__p)
        {
          mlir::Diagnostic::operator<<((uint64_t)v44, "width ");
          if (__p)
          {
            v23 = *(_QWORD *)(v19 + 8 * (v20 - 1));
            v41 = 2;
            v42 = v23;
            v24 = &v41;
            v25 = v45;
            if (v46 >= v47)
            {
              v33 = v46 + 1;
              if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
              {
                v35 = (char *)&v41 - v45;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
                v25 = v45;
                v24 = (int *)&v35[v45];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v33, 24);
                v24 = &v41;
                v25 = v45;
              }
            }
            v26 = v25 + 24 * v46;
            v27 = *(_OWORD *)v24;
            *(_QWORD *)(v26 + 16) = *((_QWORD *)v24 + 2);
            *(_OWORD *)v26 = v27;
            ++v46;
            if (__p)
            {
              mlir::Diagnostic::operator<<((uint64_t)v44, " must be a multiple of interleave ");
              if (__p)
              {
                v41 = 2;
                v42 = v21;
                v28 = &v41;
                v29 = v45;
                if (v46 >= v47)
                {
                  v34 = v46 + 1;
                  if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
                  {
                    v36 = (char *)&v41 - v45;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
                    v29 = v45;
                    v28 = (int *)&v36[v45];
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v34, 24);
                    v28 = &v41;
                    v29 = v45;
                  }
                }
                v30 = v29 + 24 * v46;
                v31 = *(_OWORD *)v28;
                *(_QWORD *)(v30 + 16) = *((_QWORD *)v28 + 2);
                *(_OWORD *)v30 = v31;
                ++v46;
              }
            }
          }
        }
        goto LABEL_22;
      }
    }
    return 1;
  }
  v39 = 257;
  mlir::Operation::emitOpError(v1, v38, (uint64_t)&__p);
  if (__p)
  {
    v17 = "interleave factor not supported";
    goto LABEL_21;
  }
LABEL_22:
  v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__p);
  if (__p)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__p);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
  return v18;
}

uint64_t mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *ArgAttrsAttr;
  uint64_t v20;
  size_t v21;
  unsigned int v22;
  uint64_t ElementTypeOrSelf;
  mlir::MLIRContext *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t OperandRange;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  _QWORD *v39[2];
  __int128 v40;
  char v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[32];
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v45 = a4;
  v46 = a5;
  if (!a5)
  {
    v27 = mlir::Float32Type::get(this, a2);
    v28 = mlir::UnrankedTensorType::get(v27);
    v29 = *(unsigned int *)(a11 + 8);
    if (v29 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v29 + 1, 8);
      LODWORD(v29) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v29) = v28;
    goto LABEL_20;
  }
  v12 = mlir::ValueRange::dereference_iterator(&v45, 0);
  v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v39[0] = v13;
  v39[1] = v14;
  if (v13)
    v15 = v46 > 2;
  else
    v15 = 0;
  if (!v15
    || (v16 = mlir::ValueRange::dereference_iterator(&v45, 2),
        v38[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8)),
        v38[1] = v17,
        !v38[0]))
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v13);
    if (ElementTypeOrSelf)
    {
LABEL_14:
      v25 = mlir::UnrankedTensorType::get(ElementTypeOrSelf);
      v26 = *(_DWORD *)(a11 + 8);
      if (v26 >= *(_DWORD *)(a11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v26 + 1, 8);
        v26 = *(_DWORD *)(a11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a11 + 8 * v26) = v25;
LABEL_20:
      ++*(_DWORD *)(a11 + 8);
      return 1;
    }
LABEL_13:
    ElementTypeOrSelf = mlir::Float32Type::get(this, v24);
    goto LABEL_14;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39)
    || (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v38) & 1) == 0)
  {
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v39[0]);
    if (ElementTypeOrSelf)
      goto LABEL_14;
    goto LABEL_13;
  }
  ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v39);
  v20 = v18;
  v42 = v44;
  v43 = 0x400000000;
  v21 = 8 * v18;
  if ((unint64_t)(8 * v18) < 0x21)
  {
    v22 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v44, (8 * v18) >> 3, 8);
    v22 = v43;
  }
  if (v20)
  {
    memcpy((char *)v42 + 8 * v22, ArgAttrsAttr, v21);
    v22 = v43;
  }
  LODWORD(v43) = v22 + (v21 >> 3);
  v31 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v38);
  v33 = v42;
  v34 = v43;
  *((_QWORD *)v42 + v43 - 1) = *(_QWORD *)(v31 + 8 * v32 - 8);
  *(_QWORD *)&v40 = v33;
  *((_QWORD *)&v40 + 1) = v34;
  v41 = 1;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v39);
  v36 = mlir::ShapedType::cloneWith((uint64_t *)v39, &v40, OperandRange);
  v37 = *(unsigned int *)(a11 + 8);
  if (v37 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v37 + 1, 8);
    LODWORD(v37) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v37) = v36;
  ++*(_DWORD *)(a11 + 8);
  if (v42 != v44)
    free(v42);
  return 1;
}

uint64_t mlir::mpsx::ScaledDotProductAttentionOp::verify(uint64_t **this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  int ArgOperands;
  int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t ArgAttrsAttr;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t (**v72)(llvm::detail::format_adapter *__hidden);
  uint64_t **v73;
  unsigned __int8 v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  const void *v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t **v103;
  const void ***v104;
  uint64_t v105;
  uint64_t *v106;
  const char *v107;
  uint64_t v108;
  uint64_t (****v109)(llvm::detail::format_adapter *__hidden);
  uint64_t v110;
  uint64_t (**v111)(llvm::detail::format_adapter *__hidden);
  uint64_t **v112;
  uint64_t (***v113)(llvm::detail::format_adapter *__hidden);
  uint64_t **v114;
  uint64_t (***v115)(llvm::detail::format_adapter *__hidden);
  uint64_t (****v116)(llvm::detail::format_adapter *__hidden);
  const void **v117[4];
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[2];
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  uint64_t v134;
  _QWORD v135[23];

  v135[22] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*this)[9];
  v3 = *(_QWORD *)(v2[3] + 8);
  v4 = (uint64_t *)(*(_QWORD *)(v2[7] + 8) & 0xFFFFFFFFFFFFFFF8);
  v5 = (uint64_t *)(*(_QWORD *)(v2[11] + 8) & 0xFFFFFFFFFFFFFFF8);
  v130 = v5;
  v131 = v4;
  v6 = (_QWORD *)(*(_QWORD *)(v2[15] + 8) & 0xFFFFFFFFFFFFFFF8);
  v129 = v6;
  v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  v132 = (uint64_t *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 0xFFFFFFFFFFFFFFF8) == 0)
    goto LABEL_10;
  v8 = *v7;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
  {
    v68 = v11[1];
    v127 = v7;
    v128 = v68;
    if (!v4)
      goto LABEL_19;
  }
  else
  {
LABEL_10:
    v127 = v7;
    v128 = 0;
    if (!v4)
      goto LABEL_19;
  }
  v17 = *v4;
  v18 = mlir::TypeID::get<mlir::ShapedType>();
  v19 = *(unsigned int *)(v17 + 16);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD **)(v17 + 8);
    v21 = &v20[2 * v19];
    do
    {
      v22 = v19 >> 1;
      v23 = &v20[2 * (v19 >> 1)];
      v25 = *v23;
      v24 = v23 + 2;
      v19 += ~(v19 >> 1);
      if (v25 < v18)
        v20 = v24;
      else
        v19 = v22;
    }
    while (v19);
    if (v20 != v21 && *v20 == v18)
    {
      v69 = v20[1];
      v125 = v4;
      v126 = v69;
      if (v5)
        goto LABEL_20;
LABEL_28:
      v35 = 0;
      goto LABEL_29;
    }
  }
LABEL_19:
  v125 = v4;
  v126 = 0;
  if (!v5)
    goto LABEL_28;
LABEL_20:
  v26 = *v5;
  v27 = mlir::TypeID::get<mlir::ShapedType>();
  v28 = *(unsigned int *)(v26 + 16);
  if (!(_DWORD)v28)
    goto LABEL_28;
  v29 = *(_QWORD **)(v26 + 8);
  v30 = &v29[2 * v28];
  do
  {
    v31 = v28 >> 1;
    v32 = &v29[2 * (v28 >> 1)];
    v34 = *v32;
    v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27)
      v29 = v33;
    else
      v28 = v31;
  }
  while (v28);
  if (v29 == v30 || *v29 != v27)
    goto LABEL_28;
  v35 = v29[1];
LABEL_29:
  v124[0] = v5;
  v124[1] = v35;
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v127);
  v37 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v125);
  v38 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v124);
  v122 = 0;
  v123 = 0;
  v120 = 0;
  v121 = 0;
  v119 = 0;
  v39 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v39)
    goto LABEL_38;
  v40 = *v39;
  v41 = mlir::TypeID::get<mlir::ShapedType>();
  v42 = *(unsigned int *)(v40 + 16);
  if (!(_DWORD)v42)
    goto LABEL_38;
  v43 = *(_QWORD **)(v40 + 8);
  v44 = &v43[2 * v42];
  do
  {
    v45 = v42 >> 1;
    v46 = &v43[2 * (v42 >> 1)];
    v48 = *v46;
    v47 = v46 + 2;
    v42 += ~(v42 >> 1);
    if (v48 < v41)
      v43 = v47;
    else
      v42 = v45;
  }
  while (v42);
  if (v43 != v44 && *v43 == v41)
    v49 = v43[1];
  else
LABEL_38:
    v49 = 0;
  v133 = v39;
  v134 = v49;
  if ((mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v133) & 1) != 0)
  {
    if (ArgOperands)
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127);
      v52 = v51;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127);
      if (v53 <= 1)
      {
        v107 = "failed: expected query to have at least two dimensions but got {0}";
        v108 = 66;
        v109 = &v113;
        v110 = 1;
        v54 = &v132;
LABEL_51:
        v111 = &off_1E0E24010;
        v112 = v54;
        v113 = &v111;
LABEL_102:
        v118 = 263;
        goto LABEL_103;
      }
      v123 = *(_QWORD *)(ArgAttrsAttr + 8 * v52 - 8);
    }
    if (v37)
    {
      v55 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125);
      v57 = v56;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125);
      if (v58 <= 1)
      {
        v107 = "failed: expected key to have at least two dimensions but got {0}";
        v108 = 64;
        v109 = &v113;
        v110 = 1;
        v54 = &v131;
        goto LABEL_51;
      }
      v65 = v55 + 8 * v57;
      v60 = *(_QWORD *)(v65 - 8);
      v122 = v60;
      v59 = *(_QWORD *)(v65 - 16);
      v121 = v59;
      if (!v38)
        goto LABEL_53;
    }
    else
    {
      v59 = 0;
      v60 = 0;
      if (!v38)
      {
LABEL_53:
        v66 = 0;
        v67 = 0;
        goto LABEL_61;
      }
    }
    v61 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v124);
    v63 = v62;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v124);
    if (v64 <= 1)
    {
      v107 = "failed: expected value to have at least two dimensions but got {0}";
      v108 = 66;
      v109 = &v113;
      v110 = 1;
      v54 = &v130;
      goto LABEL_51;
    }
    v70 = v61 + 8 * v63;
    v66 = *(_QWORD *)(v70 - 8);
    v120 = v66;
    v67 = *(_QWORD *)(v70 - 16);
    v119 = v67;
LABEL_61:
    v71 = ArgOperands ^ 1;
    if (((ArgOperands ^ 1 | v37 ^ 1) & 1) == 0
      && v123 != 0x8000000000000000
      && v60 != 0x8000000000000000
      && v123 != v60)
    {
      v107 = "failed: query and key must have matching inner dimension but have {0} and {1}";
      v108 = 77;
      v109 = &v115;
      v110 = 2;
      v72 = &off_1E0E23E00;
      v111 = &off_1E0E23E00;
      v112 = (uint64_t **)&v123;
      v73 = (uint64_t **)&v122;
LABEL_101:
      v113 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))v72;
      v114 = v73;
      v115 = &v111;
      v116 = &v113;
      goto LABEL_102;
    }
    v74 = v38 ^ 1;
    if (((v37 ^ 1 | v38 ^ 1) & 1) == 0 && v59 != 0x8000000000000000 && v67 != 0x8000000000000000 && v59 != v67)
    {
      v107 = "failed: key and value must have matching outer dimension but have {0} and {1}";
      v108 = 77;
      v109 = &v115;
      v110 = 2;
      v72 = &off_1E0E23E00;
      v111 = &off_1E0E23E00;
      v112 = (uint64_t **)&v121;
      v73 = (uint64_t **)&v119;
      goto LABEL_101;
    }
    v75 = v71 | v74;
    if (((v71 | v74) & 1) == 0 && v123 != 0x8000000000000000 && v66 != 0x8000000000000000 && v123 != v66)
    {
      v107 = "failed: query and value must have matching inner dimension but have {0} and {1}";
      v108 = 79;
      v109 = &v115;
      v110 = 2;
      v72 = &off_1E0E23E00;
      v111 = &off_1E0E23E00;
      v112 = (uint64_t **)&v123;
      v73 = (uint64_t **)&v120;
      goto LABEL_101;
    }
    if (((ArgOperands ^ 1 | v37 ^ 1) & 1) != 0
      || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127), v76 < 3)
      || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125), v77 < 3))
    {
      v82 = 0;
      v84 = 1;
      if ((v75 & 1) != 0)
        goto LABEL_96;
    }
    else
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127);
      v79 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127)
                      + 8 * (v78 - 3));
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125);
      v81 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v125)
                      + 8 * (v80 - 3));
      v82 = v79 / v81;
      if (v79 % v81)
      {
        v83 = "failed: key heads dimensions do not represent a valid group for the head dimensions available in the query tensor";
LABEL_111:
        v107 = v83;
        LOWORD(v111) = 259;
        v104 = (const void ***)&v107;
        goto LABEL_112;
      }
      v107 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v131);
      v108 = v91;
      v92 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
      llvm::SmallVector<long long,6u>::SmallVector(&v133, v92, v93);
      *((_QWORD *)v133 + v134 - 3) *= v82;
      v107 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v131);
      v108 = v94;
      v131 = (uint64_t *)mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&v107, (uint64_t)v133, v134);
      if (v133 != v135)
        free(v133);
      v84 = 0;
      if ((v75 & 1) != 0)
      {
LABEL_96:
        v106 = 0;
        if (!mlir::mpsx::inferMatMulResultType(0, 0, v132, v131, (uint64_t *)&v106, 0, 1))
        {
          v107 = "failed: query with type {0} cannot be multiplied with the key (transposed) of type {1}";
          v108 = 86;
          v109 = &v115;
          v110 = 2;
          v72 = &off_1E0E24010;
          v111 = &off_1E0E24010;
          v112 = &v132;
          v73 = &v131;
          goto LABEL_101;
        }
        v100 = v106;
        if (mlir::mpsx::inferMatMulResultType(0, 0, v106, v130, &v105, 0, 0))
        {
          if (mlir::OpTrait::util::getBroadcastedType(v100, v6, 0))
            return 1;
          v107 = "failed: mask with type {0} is not broadcastable with the product of query and key transpose of type {1}";
          v108 = 103;
          v109 = &v115;
          v110 = 2;
          v111 = &off_1E0E24010;
          v112 = &v129;
          v103 = &v106;
        }
        else
        {
          v107 = "failed: product of query and key transpose of type {0} cannot be multiplied with value of type {1}";
          v108 = 98;
          v109 = &v115;
          v110 = 2;
          v111 = &off_1E0E24010;
          v112 = &v106;
          v103 = &v130;
        }
        v113 = (uint64_t (***)(llvm::detail::format_adapter *__hidden))&off_1E0E24010;
        v114 = v103;
        v115 = &v111;
        v116 = &v113;
        v118 = 263;
        v117[0] = (const void **)&v107;
        v104 = v117;
LABEL_112:
        mlir::OpState::emitOpError(this, v104, (uint64_t)&v133);
        v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v133);
        mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v133);
        return v101;
      }
    }
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127);
    if (v85 >= 3)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v124);
      if (v86 >= 3)
      {
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127);
        v88 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v127)
                        + 8 * (v87 - 3));
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v124);
        v90 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v124)
                        + 8 * (v89 - 3));
        if (v88 % v90)
        {
          v83 = "failed: value heads dimensions do not represent a valid group for the head dimensions available in the query tensor";
          goto LABEL_111;
        }
        if (v82 == v88 / v90)
          v95 = 1;
        else
          v95 = v84;
        if ((v95 & 1) == 0)
        {
          v83 = "failed: grouping for the value tensor does not match the one available on the key tensor";
          goto LABEL_111;
        }
        v107 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v130);
        v108 = v96;
        v97 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
        llvm::SmallVector<long long,6u>::SmallVector(&v133, v97, v98);
        *((_QWORD *)v133 + v134 - 3) = v88;
        v107 = (const char *)mlir::Type::cast<mlir::ShapedType>(&v130);
        v108 = v99;
        v130 = (uint64_t *)mlir::ShapedType::clone((mlir::MemoryMapperInterface *)&v107, (uint64_t)v133, v134);
        if (v133 != v135)
          free(v133);
      }
    }
    goto LABEL_96;
  }
  v107 = "failed: expected scale to be scalar but it is unranked";
  v108 = 54;
  v109 = 0;
  v110 = 0;
  v118 = 263;
LABEL_103:
  v117[0] = (const void **)&v107;
  mlir::OpState::emitOpError(this, v117, (uint64_t)&v133);
  v101 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v133);
  if (v133)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v133);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v134);
  return v101;
}

uint64_t mlir::mpsx::RMSNormOp::verify(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *ArgAttrsAttr;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t DefiningOp;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD v45[2];
  const void **v46[4];
  _QWORD v47[2];
  _QWORD v48[2];
  _QWORD v49[2];
  const void ***v50;
  __int16 v51;
  uint64_t v52;
  _QWORD v53[2];
  void *v54;
  uint64_t v55;
  _BYTE v56[176];
  uint64_t *v57;
  uint64_t v58;
  _QWORD v59[7];

  v59[6] = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v2)
    goto LABEL_10;
  v3 = *v2;
  v4 = mlir::TypeID::get<mlir::ShapedType>();
  v5 = *(unsigned int *)(v3 + 16);
  if (!(_DWORD)v5)
    goto LABEL_10;
  v6 = *(_QWORD **)(v3 + 8);
  v7 = &v6[2 * v5];
  do
  {
    v8 = v5 >> 1;
    v9 = &v6[2 * (v5 >> 1)];
    v11 = *v9;
    v10 = v9 + 2;
    v5 += ~(v5 >> 1);
    if (v11 < v4)
      v6 = v10;
    else
      v5 = v8;
  }
  while (v5);
  if (v6 != v7 && *v6 == v4)
    v12 = v6[1];
  else
LABEL_10:
    v12 = 0;
  v45[0] = v2;
  v45[1] = v12;
  v43 = 0;
  v44 = 0;
  ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v45);
  if (mlir::ShapedType::getNumElements(ArgAttrsAttr, v14) == 1)
    goto LABEL_12;
  v46[0] = *(const void ***)((*this)[9] + 56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v46);
  if (!DefiningOp)
    goto LABEL_39;
  v36 = DefiningOp;
  v37 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v36 + 48) + 32))(*(_QWORD *)(v36 + 48), v37))
    goto LABEL_39;
  v54 = v56;
  v55 = 0x100000000;
  mlir::Operation::fold(v36, 0, 0, (uint64_t)&v54);
  v38 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v54 & 0xFFFFFFFFFFFFFFF8));
  v40 = v38;
  if (v38)
  {
    v43 = v38;
    v44 = v39;
  }
  if (v54 != v56)
    free(v54);
  if (v40 && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v43) & 1) != 0)
  {
LABEL_12:
    v15 = *this;
    v16 = v15[9];
    v17 = *(_QWORD *)(v16 + 88);
    v18 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v16 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v18)
      goto LABEL_21;
    v19 = *v18;
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *(unsigned int *)(v19 + 16);
    if (!(_DWORD)v21)
      goto LABEL_21;
    v22 = *(_QWORD **)(v19 + 8);
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_21:
      v28 = 0;
    v53[0] = v18;
    v53[1] = v28;
    v57 = v59;
    v58 = 0x600000000;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v53)
      && mlir::matchConstantWithIntVector<long long>(v17, (uint64_t)&v57)
      && (_DWORD)v58)
    {
      v29 = v57;
      v30 = 8 * v58;
      while (1)
      {
        v52 = *v29;
        v31 = v52;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v53);
        mlir::tryGetPositiveAxis(v31, v32, 0, 0, 0);
        if (!v33)
          break;
        ++v29;
        v30 -= 8;
        if (!v30)
          goto LABEL_28;
      }
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v53);
      v46[0] = (const void **)"failed: constant axis ({0}) is not within range for the input tensor rank ({1})";
      v46[1] = (const void **)79;
      v46[2] = (const void **)v49;
      v46[3] = (const void **)2;
      v47[0] = &off_1E0E23E00;
      v47[1] = &v52;
      v48[0] = &off_1E0E23EC0;
      v48[1] = v42;
      v49[0] = v47;
      v49[1] = v48;
      v51 = 263;
      v50 = v46;
      mlir::Operation::emitOpError(v15, (const void ***)&v50, (uint64_t)&v54);
      v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
      if (v54)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v55);
    }
    else
    {
LABEL_28:
      v34 = 1;
    }
    if (v57 != v59)
      free(v57);
  }
  else
  {
LABEL_39:
    v46[0] = (const void **)"requires epsilon to be a scalar";
    LOWORD(v47[0]) = 259;
    mlir::OpState::emitOpError(this, v46, (uint64_t)&v54);
    v34 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v54);
    if (v54)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v54);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v55);
  }
  return v34;
}

uint64_t mlir::mpsx::FPToIntClampedOp::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Context;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mlir::CallGraphNode *Value;
  mlir::CallGraphNode *v19;
  mlir::CallGraphNode *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v30[2];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v38[0] = a4;
  v38[1] = a5;
  v31 = a6;
  LOBYTE(v32) = 0;
  v33 = 0;
  v34 = a9;
  v35 = a10;
  if (a6)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)&v31);
    if (v33)
      v33 = 0;
    mlir::OperationName::OperationName(&v32, "mpsx.fp_to_int_clamped", 22, Context);
    v33 = 1;
  }
  v36 = a4;
  v37 = a5;
  if (a5
    && (v15 = mlir::UnknownLoc::get(this, a2), mlir::mpsx::FPToIntClampedOpAdaptor::verify(&v31, v15)))
  {
    v39 = v36;
    v16 = mlir::ValueRange::dereference_iterator(&v39, 0);
    v30[0] = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8));
    v30[1] = v17;
    if (v30[0])
    {
      Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v31);
      v19 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v31);
      v20 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, v19, **(_QWORD **)(v32 + 96));
      if ((v21 & 1) != 0)
        v22 = *((_QWORD *)v20 + 1);
      else
        v22 = 0;
      *(_QWORD *)&v39 = v22;
      v27 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v39);
      LOBYTE(v39) = 0;
      v40 = 0;
      v26 = mlir::ShapedType::cloneWith(v30, &v39, v27);
    }
    else
    {
      v26 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v38, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    v28 = *(_DWORD *)(a11 + 8);
    if (v28 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v28 + 1, 8);
      v28 = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v28) = v26;
  }
  else
  {
    v23 = mlir::Float32Type::get(this, a2);
    v24 = mlir::UnrankedTensorType::get(v23);
    v25 = *(unsigned int *)(a11 + 8);
    if (v25 >= *(_DWORD *)(a11 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v25 + 1, 8);
      LODWORD(v25) = *(_DWORD *)(a11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a11 + 8 * v25) = v24;
  }
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::mpsx::FPToIntClampedOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        i != (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11);
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
    {
      v8 = *((_QWORD *)i + 1);
      if (v8)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
        {
          v5 = "'mpsx.fp_to_int_clamped' op attribute 'resultElementType' failed to satisfy constraint: any type attribute";
          goto LABEL_6;
        }
        v12 = *((_QWORD *)i + 1);
        mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
      }
      return 1;
    }
  }
  v5 = "'mpsx.fp_to_int_clamped' op requires attribute 'resultElementType'";
LABEL_6:
  v9 = v5;
  v10 = 259;
  mlir::emitError(a2, (uint64_t)&v9, (uint64_t)&v12);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v12);
  if (v12)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v12);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

BOOL mlir::mpsx::FPToIntClampedOp::isSupportedForTypes(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;
  uint64_t v4;
  uint64_t ElementTypeOrSelf;

  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  v4 = mlir::getElementTypeOrSelf(a2);
  if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
    return mlir::Type::isInteger((mlir::Type *)&v4, 8);
  if (mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf))
    return mlir::Type::isInteger((mlir::Type *)&v4, 8);
  result = mlir::Type::isF32((mlir::Type *)&ElementTypeOrSelf);
  if (result)
    return mlir::Type::isInteger((mlir::Type *)&v4, 8);
  return result;
}

uint64_t mlir::mpsx::ANEOp::getFunctionTypeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) != 0)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

uint64_t mlir::mpsx::ANEOp::getFunctionType(mlir::Operation **this)
{
  uint64_t FunctionTypeAttr;

  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(this);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

uint64_t mlir::mpsx::ANEOp::getArgAttrsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 16), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::mpsx::ANEOp::getResAttrsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

void mlir::mpsx::ANEOp::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t StringAttr;
  mlir::StringAttr *Context;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t Loc;
  uint64_t v37;
  uint64_t v38;
  _WORD *v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v55;
  mlir::Operation *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v61;
  uint64_t *v62;
  BOOL v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[2];
  __int16 v70;
  void *v71;
  uint64_t v72;
  _WORD v73[16];
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v25 = a2 + 112;
  *(_QWORD *)(a2 + 192) = 0;
  v26 = *(unsigned int *)(a2 + 120);
  if (a18 + v26 > (unint64_t)*(unsigned int *)(a2 + 124))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v25, (void *)(a2 + 128), a18 + v26, 16);
    LODWORD(v26) = *(_DWORD *)(a2 + 120);
  }
  if (a18)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 112) + 16 * v26), __src, 16 * a18);
    LODWORD(v26) = *(_DWORD *)(a2 + 120);
  }
  *(_DWORD *)(a2 + 120) = v26 + a18;
  v73[8] = 261;
  v71 = a3;
  v72 = a4;
  StringAttr = mlir::Builder::getStringAttr((mlir::StringAttr **)a1, (mlir::MLIRContext *)&v71);
  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  v70 = 261;
  v67 = "sym_name";
  v68 = 8;
  v29 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v67);
  mlir::NamedAttribute::NamedAttribute(&v74, v29, StringAttr);
  mlir::NamedAttrList::push_back(v25, (uint64_t)v74, v75);
  v30 = mlir::FunctionType::get(*(mlir::MLIRContext **)a1, a9, a10, a13, a14);
  v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  v32 = mlir::TypeAttr::get(v30);
  mlir::NamedAttribute::NamedAttribute(&v67, v31, v32);
  mlir::NamedAttrList::push_back(v25, (uint64_t)v67, v68);
  v33 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v34 = operator new(0x48uLL);
  *v34 = 0u;
  v34[1] = 0u;
  *((_QWORD *)v34 + 4) = v34 + 2;
  *((_QWORD *)v34 + 5) = v34 + 2;
  *((_QWORD *)v34 + 7) = 0;
  *((_QWORD *)v34 + 8) = 0;
  *((_QWORD *)v34 + 6) = 0;
  v71 = v73;
  v72 = 0x400000000;
  v67 = a6;
  v68 = 0;
  if (a7)
  {
    v35 = 0;
    do
    {
      v74 = (_QWORD *)mlir::ValueRange::dereference_iterator(&v67, v35);
      Loc = mlir::Value::getLoc((mlir::Value *)&v74);
      v37 = v72;
      if (v72 >= (unint64_t)HIDWORD(v72))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, v73, v72 + 1, 8);
        v37 = v72;
      }
      *((_QWORD *)v71 + v37) = Loc;
      v38 = (v72 + 1);
      LODWORD(v72) = v72 + 1;
      v35 = ++v68;
    }
    while (v67 != a6 || v35 != a7);
    v40 = v71;
  }
  else
  {
    v38 = 0;
    v40 = v73;
  }
  mlir::Block::addArguments(v34, a9, a10, (uint64_t)v40, v38);
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v33, (uint64_t)v34);
  v41 = *v33;
  *((_QWORD *)v34 + 2) = v33;
  *((_QWORD *)v34 + 1) = v41;
  *(_QWORD *)(v41 + 8) = (char *)v34 + 8;
  *v33 = (uint64_t)v34 + 8;
  v42 = (_OWORD *)(a1 + 16);
  v64 = *(_OWORD *)(a1 + 16);
  v44 = *((_QWORD *)v34 + 5);
  v43 = *((_QWORD *)v34 + 6);
  *(_QWORD *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 24) = v44;
  v45 = *((_QWORD *)v34 + 7);
  v67 = a6;
  v68 = 0;
  v69[0] = v43;
  if (a7 && v45 != v43)
  {
    v46 = 0;
    do
    {
      v50 = mlir::ValueRange::dereference_iterator(&v67, v46);
      v51 = *(_QWORD *)v69[0];
      v66 = v50;
      v74 = 0;
      v52 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(a5, (unint64_t *)&v66, &v74);
      v53 = v74;
      if ((v52 & 1) == 0)
      {
        v53 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)a5, (uint64_t)&v66, (unint64_t *)&v66, v74);
        *v53 = v66;
        v53[1] = 0;
      }
      v53[1] = v51;
      v46 = v68 + 1;
      v47 = v69[0] + 8;
      v68 = v46;
      v69[0] += 8;
    }
    while ((v46 != a7 || v67 != a6) && v47 != v45);
  }
  if (a16)
  {
    v55 = 8 * a16;
    do
    {
      v56 = *a15++;
      mlir::OpBuilder::clone((uint64_t **)a1, v56, (mlir::IRMapping *)a5);
      v55 -= 8;
    }
    while (v55);
  }
  v67 = v69;
  v68 = 0x600000000;
  if (a12 < 7)
  {
    v57 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v67, v69, a12, 8);
    v57 = v68;
  }
  v74 = a11;
  v75 = 0;
  v76 = a5;
  v77 = 1;
  if (a12)
  {
    v58 = 0;
    v59 = (uint64_t *)((char *)v67 + 8 * v57);
    do
    {
      v61 = mlir::ValueRange::dereference_iterator(&v74, v58);
      v62 = v76;
      v65 = v61;
      v66 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v76, (unint64_t *)&v65, &v66))v63 = v66 == *v62 + 16 * *((unsigned int *)v62 + 4);
      else
        v63 = 1;
      if (!v63)
        v61 = *(_QWORD *)(v66 + 8);
      *v59++ = v61;
      v58 = ++v75;
    }
    while (v74 != a11 || v58 != a12);
    v57 = v68;
  }
  LODWORD(v68) = v57 + a12;
  mlir::OpBuilder::create<mlir::mpsx::RegionReturnOp,llvm::SmallVector<mlir::Value,6u> &>((mlir::OpBuilder *)a1, *(_QWORD *)a2, (uint64_t)&v67);
  if (v67 != v69)
    free(v67);
  if ((_QWORD)v64)
  {
    *v42 = v64;
  }
  else
  {
    *(_QWORD *)v42 = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (v71 != v73)
    free(v71);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mpsx::RegionReturnOp,llvm::SmallVector<mlir::Value,6u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mpsx.region_return", (const unsigned __int8 *)0x12, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mpsx.region_return";
    v15[3] = 18;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::OperationState::addOperands((uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::RegionReturnOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

BOOL mlir::mpsx::ANEOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t CallableRegion;
  uint64_t *v9;
  uint64_t v10;
  const void **v11;
  uint64_t i;
  uint64_t v13;
  const void **v15;
  __int16 v16;
  unint64_t AttrDictionary;
  _QWORD v18[24];

  v18[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 0;
    v7 = 16 * v4;
    while (1)
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v9 = *this;
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == CallableRegion)
        break;
      if (**(_QWORD **)((*this)[6] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
        v6 = *((_QWORD *)Value + 1);
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v7 -= 16;
      if (!v7)
        goto LABEL_10;
    }
    v11 = (const void **)*((_QWORD *)Value + 1);
    for (i = 0; v7; v7 -= 16)
    {
      v13 = mlir::CallGraphNode::getCallableRegion(Value);
      v9 = *this;
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == v13)
        i = *((_QWORD *)Value + 1);
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    return mlir::anec::__mlir_ods_local_attr_constraint_ANECOps1(v9, v11, (const void **)"function_type", (const void **)0xD)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, v6, (const void **)"arg_attrs", (const void **)9)&& mlir::anec::__mlir_ods_local_attr_constraint_ANECOps2(*this, i, (const void **)"res_attrs", (const void **)9)&& mlir::anec::__mlir_ods_local_region_constraint_ANECOps0(*this, (((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]
                              + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                              + 7) & 0xFFFFFFFFFFFFFFF8)
                            + 32 * *((unsigned int *)*this + 10),
                              (uint64_t)"body",
                              4,
                              0) != 0;
  }
  else
  {
LABEL_10:
    v15 = (const void **)"requires attribute 'function_type'";
    v16 = 259;
    mlir::OpState::emitOpError(this, &v15, (uint64_t)&AttrDictionary);
    v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v18);
  }
  return v10;
}

uint64_t mlir::mpsx::detail::DeinterleaveOpGenericAdaptorBase::DeinterleaveOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mpsx.deinterleave", 17, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mpsx::DeinterleaveOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t Value;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11))
    {
      v5 = "'mpsx.deinterleave' op requires attribute 'interleave_factor'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (!v8)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = *((_QWORD *)i + 1);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32))
      return 1;
  }
  v5 = "'mpsx.deinterleave' op attribute 'interleave_factor' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_6:
  v9[0] = v5;
  v10 = 259;
  mlir::emitError(a2, (uint64_t)v9, (uint64_t)&Value);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

void mlir::mpsx::DeinterleaveOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  mlir::UnknownLoc *v10;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22[2];
  void *v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v21 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  v7 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a4);
  mlir::NamedAttribute::NamedAttribute(&__src, v7, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v25);
  __src = v26;
  v25 = 0x200000000;
  v10 = *(mlir::UnknownLoc **)a1;
  mlir::ValueRange::ValueRange((unint64_t *)v23, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mpsx::DeinterleaveOp::inferReturnTypes(v10, v13, v14, v23[0], (uint64_t)v23[1], Dictionary, v15, v16, v22[0], v22[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v17 = __src;
  v18 = v25;
  v19 = *(unsigned int *)(a2 + 72);
  v20 = v19 + v25;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v18)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v26)
    free(__src);
}

BOOL mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  const void ***Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (const void ***)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, Value[1], (const void **)"interleave_factor", (const void **)0x11)&& mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'interleave_factor'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  const void **v31[4];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(void **)(*(_QWORD *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_28;
  }
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v14)
    goto LABEL_14;
  v15 = *(_QWORD **)(v9 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_14:
    v21 = 0;
  v36 = a2;
  v37[0] = v21;
  v31[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isSignlessInteger((mlir::Type *)v31, 1)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 64)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 64)
    || mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    return 1;
  }
LABEL_28:
  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      v34 = 5;
      v35 = a5;
      v22 = &v34;
      v23 = v38;
      if (v39 >= v40)
      {
        v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v23 = v38;
          v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v22 = &v34;
          v23 = v38;
        }
      }
      v24 = v23 + 24 * v39;
      v25 = *(_OWORD *)v22;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v22 + 2);
      *(_OWORD *)v24 = v25;
      ++v39;
      if (v36)
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of mps native type values, but got ");
    }
  }
  v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

uint64_t mlir::mpsx::FPToIntClampedOp::getResultElementType(mlir::Operation **this)
{
  uint64_t MultipliersAttr;

  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(this);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&MultipliersAttr);
}

uint64_t mlir::mpsx::FPToIntClampedOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  uint64_t *v10;
  const void **v11;
  _QWORD *v12;
  void *v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v40;
  char *v41;
  const void **v42;
  uint64_t v43;
  __int16 v44;
  const void **v45;
  _QWORD v46[3];
  unint64_t AttrDictionary;
  _QWORD v48[2];
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD v52[20];

  v52[19] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, Value[1], (const void **)"resultElementType", (const void **)0x11)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))
    {
      return 0;
    }
    if (*((_DWORD *)*this + 9))
      v8 = (uint64_t)(*this - 2);
    else
      v8 = 0;
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
    v10 = *this;
    v11 = (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    v45 = v11;
    v12 = *v11;
    v13 = (void *)*((_QWORD *)*v11 + 17);
    if (v13 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v15 = mlir::TypeID::get<mlir::ShapedType>();
      v16 = *((unsigned int *)v12 + 4);
      if (!(_DWORD)v16)
        goto LABEL_29;
      v17 = (_QWORD *)v12[1];
      v18 = &v17[2 * v16];
      do
      {
        v19 = v16 >> 1;
        v20 = &v17[2 * (v16 >> 1)];
        v22 = *v20;
        v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15)
          v17 = v21;
        else
          v16 = v19;
      }
      while (v16);
      if (v17 != v18 && *v17 == v15)
        v23 = v17[1];
      else
LABEL_29:
        v23 = 0;
      AttrDictionary = (unint64_t)v11;
      v48[0] = v23;
      v46[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (mlir::Type::isSignedInteger((mlir::Type *)v46, 8) || mlir::Type::isUnsignedInteger((mlir::Type *)v46, 8))
        return 1;
      v12 = *v11;
      v13 = (void *)*((_QWORD *)*v11 + 17);
    }
    if (v13 != &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      goto LABEL_64;
    v30 = mlir::TypeID::get<mlir::ShapedType>();
    v31 = *((unsigned int *)v12 + 4);
    if (!(_DWORD)v31)
      goto LABEL_51;
    v32 = (_QWORD *)v12[1];
    v33 = &v32[2 * v31];
    do
    {
      v34 = v31 >> 1;
      v35 = &v32[2 * (v31 >> 1)];
      v37 = *v35;
      v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30)
        v32 = v36;
      else
        v31 = v34;
    }
    while (v31);
    if (v32 != v33 && *v32 == v30)
      v38 = v32[1];
    else
LABEL_51:
      v38 = 0;
    v42 = v11;
    v43 = v38;
    v46[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v42);
    if (!mlir::Type::isSignedInteger((mlir::Type *)v46, 8) && !mlir::Type::isUnsignedInteger((mlir::Type *)v46, 8))
    {
LABEL_64:
      v44 = 261;
      v42 = (const void **)"result";
      v43 = 6;
      mlir::Operation::emitOpError(v10, &v42, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v48, " #");
        if (AttrDictionary)
        {
          LODWORD(v46[0]) = 5;
          v46[1] = 0;
          v24 = (char *)v46;
          v25 = v49;
          if (v50 >= v51)
          {
            v40 = v50 + 1;
            if (v49 <= (unint64_t)v46 && v49 + 24 * v50 > (unint64_t)v46)
            {
              v41 = (char *)v46 - v49;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v40, 24);
              v25 = v49;
              v24 = &v41[v49];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v40, 24);
              v24 = (char *)v46;
              v25 = v49;
            }
          }
          v26 = v25 + 24 * v50;
          v27 = *(_OWORD *)v24;
          *(_QWORD *)(v26 + 16) = *((_QWORD *)v24 + 2);
          *(_OWORD *)v26 = v27;
          ++v50;
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v48, " must be tensor of int8 values or memref of int8 values, but got ");
        }
      }
      v28 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v45);
      v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v28);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v48);
      if (!v29)
        return 0;
    }
    return 1;
  }
LABEL_8:
  v42 = (const void **)"requires attribute 'resultElementType'";
  v44 = 259;
  mlir::OpState::emitOpError(this, &v42, (uint64_t)&AttrDictionary);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v48);
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  const void **v31[4];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(void **)(*(_QWORD *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_19;
  }
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v14)
    goto LABEL_14;
  v15 = *(_QWORD **)(v9 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_14:
    v21 = 0;
  v36 = a2;
  v37[0] = v21;
  v31[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31))
  {
    return 1;
  }
LABEL_19:
  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      v34 = 5;
      v35 = a5;
      v23 = &v34;
      v24 = v38;
      if (v39 >= v40)
      {
        v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v24 = v38;
          v23 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v23 = &v34;
          v24 = v38;
        }
      }
      v25 = v24 + 24 * v39;
      v26 = *(_OWORD *)v23;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      ++v39;
      if (v36)
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of floating point values, but got ");
    }
  }
  v27 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v27);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v22;
}

uint64_t mlir::mpsx::FileBackedConstantOp::getArchive(mlir::Operation **this)
{
  uint64_t KsizeAttr;

  KsizeAttr = mlir::anec::L2NormPool::getKsizeAttr(this);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&KsizeAttr);
}

uint64_t mlir::mpsx::FileBackedConstantOp::getIdentifier(mlir::Operation **this)
{
  uint64_t StrideAttr;

  StrideAttr = mlir::anec::L2NormPool::getStrideAttr(this);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&StrideAttr);
}

void *mlir::mpsx::FileBackedConstantOp::getDataSize(mlir::Operation **this)
{
  uint64_t v1;
  void *__p;
  unsigned int v4;
  uint64_t PaddingAttr;

  PaddingAttr = mlir::anec::L2NormPool::getPaddingAttr(this);
  mlir::IntegerAttr::getValue(&PaddingAttr, (llvm::APInt *)&__p);
  if (v4 <= 0x40)
    return __p;
  v1 = *(_QWORD *)__p;
  operator delete[](__p);
  return (void *)v1;
}

void mlir::mpsx::FileBackedConstantOp::build(mlir::StringAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t StringAttr;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v14 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  v24 = 261;
  v22 = a4;
  v23 = a5;
  StringAttr = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)&v22);
  mlir::NamedAttribute::NamedAttribute(&v25, v14, StringAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v25, v26);
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  v24 = 261;
  v22 = a6;
  v23 = a7;
  v17 = mlir::Builder::getStringAttr(a1, (mlir::MLIRContext *)&v22);
  mlir::NamedAttribute::NamedAttribute(&v25, v16, v17);
  mlir::NamedAttrList::push_back(a2 + 112, v25, v26);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x40u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a8);
  mlir::NamedAttribute::NamedAttribute(&v22, v18, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v22, v23);
  v21 = *(unsigned int *)(a2 + 72);
  if (v21 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v21 + 1, 8);
    LODWORD(v21) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v21) = a3;
  ++*(_DWORD *)(a2 + 72);
}

BOOL mlir::mpsx::FileBackedConstantOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  mlir::CallGraphNode *v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  uint64_t NextResultAtOffset;
  const void **v20[4];
  __int16 v21;
  unint64_t AttrDictionary;
  _QWORD v23[24];

  v23[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_8:
    v7 = "requires attribute 'archive'";
LABEL_19:
    v20[0] = (const void **)v7;
    v21 = 259;
    mlir::OpState::emitOpError(this, v20, (uint64_t)&AttrDictionary);
    v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
    return v13;
  }
  v6 = 16 * v4;
  while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v6 -= 16;
    if (!v6)
      goto LABEL_8;
  }
  if (!v6)
  {
LABEL_13:
    v7 = "requires attribute 'data_size'";
    goto LABEL_19;
  }
  v8 = 0;
  v9 = *((_QWORD *)Value + 1);
  while (1)
  {
    v10 = (mlir::CallGraphNode *)((char *)Value + v8);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v8)))
      break;
    v8 += 16;
    if (v6 == v8)
      goto LABEL_13;
  }
  v11 = v6 - v8;
  if (v6 == v8)
  {
LABEL_18:
    v7 = "requires attribute 'identifier'";
    goto LABEL_19;
  }
  v12 = (const void **)*((_QWORD *)v10 + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) != mlir::CallGraphNode::getCallableRegion(v10))
  {
    v10 = (mlir::CallGraphNode *)((char *)v10 + 16);
    v11 -= 16;
    if (!v11)
      goto LABEL_18;
  }
  v15 = *((_QWORD *)v10 + 1);
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps0(*this, v9, (const void **)"archive", (const void **)7)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps0(*this, v15, (const void **)"identifier", (const void **)0xA))
  {
    return 0;
  }
  if (!v12)
    goto LABEL_42;
  v16 = *this;
  if (*((_UNKNOWN **)*v12 + 17) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v20[0] = v12;
    AttrDictionary = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v20);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&AttrDictionary, 64))
      goto LABEL_42;
  }
  v21 = 257;
  mlir::Operation::emitOpError(v16, v20, (uint64_t)&AttrDictionary);
  if (AttrDictionary)
  {
    mlir::Diagnostic::operator<<((uint64_t)v23, "attribute '");
    if (AttrDictionary)
    {
      v21 = 261;
      v20[0] = (const void **)"data_size";
      v20[1] = (const void **)9;
      mlir::Diagnostic::operator<<((uint64_t)v23, v20);
      if (AttrDictionary)
        mlir::Diagnostic::operator<<((uint64_t)v23, "' failed to satisfy constraint: 64-bit unsigned integer attribute");
    }
  }
  v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v23);
  if (!v17)
    return 0;
LABEL_42:
  if (*((_DWORD *)*this + 9))
    v18 = (uint64_t)(*this - 2);
  else
    v18 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v18, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mpsx::detail::InterleaveOpGenericAdaptorBase::InterleaveOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mpsx.interleave", 15, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mpsx::InterleaveOpAdaptor::verify(uint64_t *a1, uint64_t a2)
{
  mlir::CallGraphNode *i;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t Value;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  for (i = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v11);
        ;
        i = (mlir::CallGraphNode *)((char *)i + 16))
  {
    if (i == (mlir::CallGraphNode *)mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v11))
    {
      v5 = "'mpsx.interleave' op requires attribute 'interleave_factor'";
      goto LABEL_6;
    }
    if (**(_QWORD **)(a1[1] + 96) == mlir::CallGraphNode::getCallableRegion(i))
      break;
  }
  v8 = *((_QWORD *)i + 1);
  if (!v8)
    return 1;
  if (*(_UNKNOWN **)(*(_QWORD *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v9[0] = *((_QWORD *)i + 1);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v9);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32))
      return 1;
  }
  v5 = "'mpsx.interleave' op attribute 'interleave_factor' failed to satisfy constraint: 32-bit unsigned integer attribute";
LABEL_6:
  v9[0] = v5;
  v10 = 259;
  mlir::emitError(a2, (uint64_t)v9, (uint64_t)&Value);
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&Value);
  if (Value)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&Value);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v6;
}

void mlir::mpsx::InterleaveOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19[2];
  void *v20[2];
  void *__src;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v18 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a4);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v22);
  __src = v23;
  v22 = 0x200000000;
  v7 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v20, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mpsx::InterleaveOp::inferReturnTypes(v7, v10, v11, v20[0], (uint64_t)v20[1], Dictionary, v12, v13, v19[0], v19[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v14 = __src;
  v15 = v22;
  v16 = *(unsigned int *)(a2 + 72);
  v17 = v16 + v22;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v15)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v23)
    free(__src);
}

void mlir::mpsx::InterleaveOp::build(mlir::Builder *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  mlir::UnknownLoc *v10;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22[2];
  void *v23[2];
  void *__src;
  uint64_t v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v21 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  v7 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a4);
  mlir::NamedAttribute::NamedAttribute(&__src, v7, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v25);
  __src = v26;
  v25 = 0x200000000;
  v10 = *(mlir::UnknownLoc **)a1;
  mlir::ValueRange::ValueRange((unint64_t *)v23, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mpsx::InterleaveOp::inferReturnTypes(v10, v13, v14, v23[0], (uint64_t)v23[1], Dictionary, v15, v16, v22[0], v22[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v17 = __src;
  v18 = v25;
  v19 = *(unsigned int *)(a2 + 72);
  v20 = v19 + v25;
  if (v20 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v20, 8);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v18)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v19), v17, 8 * v18);
    LODWORD(v19) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v19 + v18;
  if (__src != v26)
    free(__src);
}

uint64_t mlir::mpsx::ListPopBackOp::getElement(mlir::mpsx::ListPopBackOp *this)
{
  uint64_t v1;
  uint64_t NextResultAtOffset;

  if (*(_DWORD *)(*(_QWORD *)this + 36))
    v1 = *(_QWORD *)this - 16;
  else
    v1 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v1, 1);
  return mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, 0);
}

void mlir::mpsx::ListPopBackOp::build(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::MLIRContext *Context;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  void *__src;
  uint64_t v16;
  _BYTE v17[16];
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v12 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v12, 1);
  __src = v17;
  v16 = 0x200000000;
  mlir::ValueRange::ValueRange((unint64_t *)&v14, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v13, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v18 = v14;
  v5 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v18, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v6 = v16;
  if (v16 >= HIDWORD(v16))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v17, v16 + 1, 8);
    v6 = v16;
  }
  *((_QWORD *)__src + v6) = v5;
  v7 = (v16 + 1);
  LODWORD(v16) = v7;
  v8 = *(_QWORD *)(v5 + 8);
  if (v7 >= HIDWORD(v16))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v17, v7 + 1, 8);
    LODWORD(v7) = v16;
  }
  *((_QWORD *)__src + v7) = v8;
  LODWORD(v16) = v16 + 1;
  v9 = v16;
  v10 = __src;
  v11 = *(unsigned int *)(a2 + 72);
  if (v11 + (unint64_t)v16 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + v16, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  if (v9)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v11), v10, 8 * v9);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v11 + v9;
  if (__src != v17)
    free(__src);
}

BOOL mlir::mpsx::ListPopBackOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0))return 0;
  v2 = *((_DWORD *)*this + 9) ? (uint64_t)(*this - 2) : 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0))return 0;
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  v5 = mlir::detail::OpResultImpl::getNextResultAtOffset(v4, 1);
  v6 = mlir::detail::OpResultImpl::getNextResultAtOffset(v5, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(*this, *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 1u) != 0;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  char *v18;
  const void **v19[4];
  __int16 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[20];

  v29[19] = *MEMORY[0x1E0C80C00];
  v21 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 136);
  if (v9 == mlir::TypeID::get<mlir::mpsx::ListType>())
    return 1;
  v20 = 261;
  v19[0] = a3;
  v19[1] = a4;
  mlir::Operation::emitOpError(a1, v19, (uint64_t)&v24);
  if (v24)
  {
    mlir::Diagnostic::operator<<((uint64_t)v25, " #");
    if (v24)
    {
      v22 = 5;
      v23 = a5;
      v10 = &v22;
      v11 = v26;
      if (v27 >= v28)
      {
        v17 = v27 + 1;
        if (v26 <= (unint64_t)&v22 && v26 + 24 * v27 > (unint64_t)&v22)
        {
          v18 = (char *)&v22 - v26;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v17, 24);
          v11 = v26;
          v10 = (int *)&v18[v26];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v29, v17, 24);
          v10 = &v22;
          v11 = v26;
        }
      }
      v12 = v11 + 24 * v27;
      v13 = *(_OWORD *)v10;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v27;
      if (v24)
        mlir::Diagnostic::operator<<((uint64_t)v25, " must be MPSX list type, but got ");
    }
  }
  v14 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v24, &v21);
  v15 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  if (v24)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v24);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v25);
  return v15;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v16;
  char *v17;
  const void **v18[4];
  __int16 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD v28[20];

  v28[19] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  if (mlir::mpsx::isMPSXListElementType(a2))
    return 1;
  v19 = 261;
  v18[0] = a3;
  v18[1] = a4;
  mlir::Operation::emitOpError(a1, v18, (uint64_t)&v23);
  if (v23)
  {
    mlir::Diagnostic::operator<<((uint64_t)v24, " #");
    if (v23)
    {
      v21 = 5;
      v22 = a5;
      v10 = &v21;
      v11 = v25;
      if (v26 >= v27)
      {
        v16 = v26 + 1;
        if (v25 <= (unint64_t)&v21 && v25 + 24 * v26 > (unint64_t)&v21)
        {
          v17 = (char *)&v21 - v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v16, 24);
          v11 = v25;
          v10 = (int *)&v17[v25];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v16, 24);
          v10 = &v21;
          v11 = v25;
        }
      }
      v12 = v11 + 24 * v26;
      v13 = *(_OWORD *)v10;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v10 + 2);
      *(_OWORD *)v12 = v13;
      ++v26;
      if (v23)
        mlir::Diagnostic::operator<<((uint64_t)v24, " must be MPSX list element type, but got ");
    }
  }
  v14 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v23, &v20);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v14);
  if (v23)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v23);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v24);
  return v9;
}

void mlir::mpsx::ListPushBackOp::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16[2];
  unint64_t v17[2];
  void *__src;
  uint64_t v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v14 = a4;
  v15 = a3;
  mlir::OperationState::addOperands(a2, (uint64_t)&v15, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v14, 1);
  __src = v20;
  v19 = 0x200000000;
  v6 = *a1;
  v7 = *(_QWORD *)a2;
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v16, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::inferReturnTypesEqualToFirstArgumentType(v6, v7, 1, v17[0], v17[1], Dictionary, v16[0], v16[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v10 = __src;
  v11 = v19;
  v12 = *(unsigned int *)(a2 + 72);
  v13 = v12 + v19;
  if (v13 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v13, 8);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v11)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v12), v10, 8 * v11);
    LODWORD(v12) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v12 + v11;
  if (__src != v20)
    free(__src);
}

BOOL mlir::mpsx::ListPushBackOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;

  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps4(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mpsx::MakeListOp::getMaxSizeAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::mpsx::MakeListOp::getMaxSize(mlir::Operation **this)
{
  uint64_t result;
  unsigned int *p_p;
  uint64_t v3;
  void *__p;
  unsigned int v6;
  uint64_t v7;

  result = mlir::mpsx::MakeListOp::getMaxSizeAttr(this);
  v7 = result;
  if (result)
  {
    mlir::IntegerAttr::getValue(&v7, (llvm::APInt *)&__p);
    if (v6 >= 0x41)
      p_p = (unsigned int *)__p;
    else
      p_p = (unsigned int *)&__p;
    v3 = *p_p;
    if (v6 >= 0x41 && __p != 0)
      operator delete[](__p);
    return v3 | 0x100000000;
  }
  return result;
}

void mlir::mpsx::MakeListOp::build(mlir::UnknownLoc **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::UnknownLoc *v7;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v10;
  int v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18[2];
  unint64_t v19[2];
  void *__src;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttribute::NamedAttribute(&__src, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a3);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  if (a4)
  {
    mlir::NamedAttribute::NamedAttribute(&__src, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), a4);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)__src, v21);
  }
  __src = v22;
  v21 = 0x200000000;
  v7 = *a1;
  mlir::ValueRange::ValueRange(v19, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v18, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mpsx::MakeListOp::inferReturnTypes(v7, v10, v11, v19[0], v19[1], Dictionary, v12, v13, v18[0], v18[1], (uint64_t)&__src))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v14 = __src;
  v15 = v21;
  v16 = *(unsigned int *)(a2 + 72);
  v17 = v16 + v21;
  if (v17 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v17, 8);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v15)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v16), v14, 8 * v15);
    LODWORD(v16) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v16 + v15;
  if (__src != v22)
    free(__src);
}

BOOL mlir::mpsx::MakeListOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t CallableRegion;
  uint64_t *v8;
  uint64_t v9;
  const void **v11;
  const void **i;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t NextResultAtOffset;
  uint64_t v17;
  const void **v18[4];
  __int16 v19;
  unint64_t AttrDictionary;
  _QWORD v21[24];

  v21[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
        break;
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v11 = (const void **)*((_QWORD *)Value + 1);
    for (i = 0; v6; v6 -= 16)
    {
      v17 = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v17)
        i = (const void **)*((_QWORD *)Value + 1);
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
    }
    if (v11)
    {
      if (*((_UNKNOWN **)*v11 + 17) != &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id
        || (AttrDictionary = (unint64_t)v11,
            mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&AttrDictionary),
            v18[0] = v11,
            v13 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v18),
            !mlir::mpsx::isMPSXListElementType(v13)))
      {
        v19 = 257;
        mlir::Operation::emitOpError(v8, v18, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v21, "attribute '");
          if (AttrDictionary)
          {
            v19 = 261;
            v18[0] = (const void **)"element_type";
            v18[1] = (const void **)12;
            mlir::Diagnostic::operator<<((uint64_t)v21, v18);
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v21, "' failed to satisfy constraint: any type attribute MPSX list element type attribute");
          }
        }
        v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
        if (!v14)
          return 0;
      }
    }
    if (mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, i, (const void **)"max_size", (const void **)8))
    {
      if (*((_DWORD *)*this + 9))
        v15 = (uint64_t)(*this - 2);
      else
        v15 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v15, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v18[0] = (const void **)"requires attribute 'element_type'";
    v19 = 259;
    mlir::OpState::emitOpError(this, v18, (uint64_t)&AttrDictionary);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v21);
  }
  return v9;
}

unint64_t mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(mlir::Operation **this, int a2)
{
  uint64_t v2;
  mlir::Operation *v4;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v6;
  mlir::Operation *v7;
  mlir::ArrayAttr *v8;
  uint64_t Value;
  uint64_t v10;
  mlir::CallGraphNode *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AttrDictionary;

  LODWORD(v2) = a2;
  v4 = *this;
  if (*((_BYTE *)v4 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v4 + 56);
  }
  v6 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v7 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v7);
    v8 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v8 = (mlir::Operation *)((char *)v7 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v8);
  v11 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v6, (mlir::CallGraphNode *)(Value + 16 * v10), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v12 & 1) == 0)
  {
    AttrDictionary = 0;
    if ((_DWORD)v2)
      goto LABEL_9;
LABEL_13:
    v2 = 0;
    v14 = 0;
    return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                    + 4 * v2) << 32);
  }
  AttrDictionary = *((_QWORD *)v11 + 1);
  if (!(_DWORD)v2)
    goto LABEL_13;
LABEL_9:
  v13 = 0;
  LODWORD(v14) = 0;
  v2 = v2;
  do
  {
    v14 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                   + v13)
                       + v14);
    v13 += 4;
  }
  while (4 * v2 != v13);
  return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                  + 4 * v2) << 32);
}

uint64_t mlir::mpsx::QuantizedGatherOp::getODSOperands(mlir::Operation **this, int a2)
{
  unsigned int ODSOperandIndexAndLength;
  uint64_t v4;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedGatherOp::getODSOperandIndexAndLength(this, a2);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v4 = *((_QWORD *)*this + 9);
  else
    v4 = 0;
  return v4 + 32 * ODSOperandIndexAndLength;
}

uint64_t mlir::mpsx::QuantizedGatherOp::getDtype(mlir::Operation **this)
{
  uint64_t PaddingAttr;

  PaddingAttr = mlir::anec::AveragePool::getPaddingAttr(this);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&PaddingAttr);
}

void mlir::mpsx::QuantizedGatherOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, char a11)
{
  _BOOL4 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t DenseI32ArrayAttr;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t IntegerType;
  uint64_t IntegerAttr;
  mlir::MLIRContext *v24;
  uint64_t v25;
  uint64_t UnitAttr;
  mlir::UnknownLoc *v27;
  mlir::MLIRContext *v28;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  int v31;
  int v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  unint64_t v43[2];
  unint64_t v44[2];
  __int128 v45;
  _DWORD v46[6];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v40 = a4;
  v41 = a3;
  v38 = a6;
  v39 = a5;
  v36 = a8;
  v37 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v41, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v40, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v39, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v38, 1);
  if (a7)
    mlir::OperationState::addOperands(a2, (uint64_t)&v37, 1);
  if (a8)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v36, 1);
    v15 = v36 != 0;
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24);
  *(_QWORD *)&v17 = 0x100000001;
  *((_QWORD *)&v17 + 1) = 0x100000001;
  v45 = v17;
  v46[0] = v37 != 0;
  v46[1] = v15;
  DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(a1, (uint64_t)&v45, 6);
  mlir::NamedAttribute::NamedAttribute(v42, v16, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v42[0], v42[1]);
  v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  v20 = mlir::TypeAttr::get(a9);
  mlir::NamedAttribute::NamedAttribute(&v45, v19, v20);
  mlir::NamedAttrList::push_back(a2 + 112, v45, *((uint64_t *)&v45 + 1));
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  IntegerType = mlir::Builder::getIntegerType((mlir::Builder *)a1, 0x20u, 0);
  IntegerAttr = mlir::Builder::getIntegerAttr((uint64_t)a1, IntegerType, a10);
  mlir::NamedAttribute::NamedAttribute(&v45, v21, IntegerAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v45, *((uint64_t *)&v45 + 1));
  if (a11)
  {
    v25 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
    UnitAttr = mlir::Builder::getUnitAttr(a1, v24);
    mlir::NamedAttribute::NamedAttribute(&v45, v25, UnitAttr);
    mlir::NamedAttrList::push_back(a2 + 112, v45, *((uint64_t *)&v45 + 1));
  }
  *(_QWORD *)&v45 = v46;
  *((_QWORD *)&v45 + 1) = 0x200000000;
  v27 = *a1;
  v28 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v44, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v43, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mpsx::QuantizedGatherOp::inferReturnTypes(v27, v28, 1, v44[0], v44[1], Dictionary, v31, v32, v43[0], v43[1], (uint64_t)&v45))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v33 = (const void *)v45;
  v34 = DWORD2(v45);
  v35 = *(unsigned int *)(a2 + 72);
  if (v35 + (unint64_t)DWORD2(v45) > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v35 + DWORD2(v45), 8);
    LODWORD(v35) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v34)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v35), v33, 8 * v34);
    LODWORD(v35) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v35 + v34;
  if ((_DWORD *)v45 != v46)
    free((void *)v45);
}

BOOL mlir::mpsx::QuantizedGatherOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const void **v10;
  mlir::CallGraphNode *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t ODSOperands;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t *v27;
  const void **v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *p_OperandRange;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  const void **v93;
  unsigned int v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t *v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  int ArgOperands;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *ArgAttrsAttr;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  __int128 v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t *v151;
  _QWORD *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  unint64_t *v160;
  _QWORD *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  unint64_t v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  unint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t NextResultAtOffset;
  unint64_t v190;
  char *v191;
  int v192[2];
  unsigned int v193;
  const void **v194;
  uint64_t v195;
  __int16 v196;
  _QWORD v197[2];
  _QWORD v198[2];
  uint64_t v199[2];
  const void **v200;
  uint64_t v201;
  uint64_t OperandRange;
  uint64_t v203;
  unint64_t AttrDictionary;
  _QWORD v205[2];
  unint64_t v206;
  unsigned int v207;
  unsigned int v208;
  _BYTE v209[152];
  uint64_t v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'batch_dims'";
LABEL_21:
    v194 = (const void **)v8;
    v196 = 259;
    mlir::OpState::emitOpError(this, &v194, (uint64_t)&AttrDictionary);
LABEL_22:
    v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
    return v14;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      v6 = *((_QWORD *)Value + 1);
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_15:
    v8 = "requires attribute 'dtype'";
    goto LABEL_21;
  }
  v9 = 0;
  v10 = (const void **)*((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (mlir::CallGraphNode *)((char *)Value + v9);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
      break;
    v9 += 16;
    if (v7 == v9)
      goto LABEL_15;
  }
  v12 = v7 - v9;
  if (!v12)
  {
LABEL_20:
    v8 = "requires attribute 'operandSegmentSizes'";
    goto LABEL_21;
  }
  v13 = *((_QWORD *)v11 + 1);
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) != mlir::CallGraphNode::getCallableRegion(v11))
  {
    v11 = (mlir::CallGraphNode *)((char *)v11 + 16);
    v12 -= 16;
    if (!v12)
      goto LABEL_20;
  }
  v199[0] = *((_QWORD *)v11 + 1);
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)v199);
  if (v16 != 6)
  {
    v22 = v16;
    v194 = (const void **)"'operandSegmentSizes' attribute for specifying operand segments must have 6 elements, but got ";
    v196 = 259;
    mlir::OpState::emitOpError(this, &v194, (uint64_t)&AttrDictionary);
    if (AttrDictionary)
    {
      LODWORD(OperandRange) = 5;
      v203 = v22;
      v23 = &OperandRange;
      v24 = v206;
      if (v207 >= v208)
      {
        v190 = v207 + 1;
        if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
        {
          v191 = (char *)&OperandRange - v206;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v190, 24);
          v24 = v206;
          v23 = (uint64_t *)&v191[v206];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v190, 24);
          v23 = &OperandRange;
          v24 = v206;
        }
      }
      v25 = v24 + 24 * v207;
      v26 = *(_OWORD *)v23;
      *(_QWORD *)(v25 + 16) = v23[2];
      *(_OWORD *)v25 = v26;
      ++v207;
    }
    goto LABEL_22;
  }
  if (!mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v13, (const void **)"dtype", (const void **)5)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps2(*this, v10, (const void **)"batch_dims", (const void **)0xA)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps9(*this, v6, (const void **)"allow_negative_indices", (const void **)0x16))
  {
    return 0;
  }
  v193 = 0;
  ODSOperands = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 0);
  if (v18)
  {
    v19 = ODSOperands;
    v20 = v18;
    v21 = 0;
    while (1)
    {
      v27 = *this;
      v28 = (const void **)(*(_QWORD *)(*(_QWORD *)(v19 + 32 * v21 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      v29 = v21 + 1;
      v193 = v21 + 1;
      v199[0] = (uint64_t)v28;
      v30 = *v28;
      v31 = (void *)*((_QWORD *)*v28 + 17);
      if (v31 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v31 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        v33 = mlir::TypeID::get<mlir::ShapedType>();
        v34 = *((unsigned int *)v30 + 4);
        if (!(_DWORD)v34)
          goto LABEL_51;
        v35 = (_QWORD *)v30[1];
        v36 = &v35[2 * v34];
        do
        {
          v37 = v34 >> 1;
          v38 = &v35[2 * (v34 >> 1)];
          v40 = *v38;
          v39 = v38 + 2;
          v34 += ~(v34 >> 1);
          if (v40 < v33)
            v35 = v39;
          else
            v34 = v37;
        }
        while (v34);
        if (v35 != v36 && *v35 == v33)
          v41 = v35[1];
        else
LABEL_51:
          v41 = 0;
        AttrDictionary = (unint64_t)v28;
        v205[0] = v41;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
        if (mlir::Type::isSignlessInteger((mlir::Type *)&OperandRange, 1)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
          || mlir::Type::isF16((mlir::Type *)&OperandRange)
          || mlir::Type::isF32((mlir::Type *)&OperandRange)
          || mlir::Type::isBF16((mlir::Type *)&OperandRange)
          || *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        {
          goto LABEL_37;
        }
        v30 = *v28;
        v31 = (void *)*((_QWORD *)*v28 + 17);
      }
      if (v31 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v31 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_267;
      }
      v43 = mlir::TypeID::get<mlir::ShapedType>();
      v44 = *((unsigned int *)v30 + 4);
      if (!(_DWORD)v44)
        goto LABEL_79;
      v45 = (_QWORD *)v30[1];
      v46 = &v45[2 * v44];
      do
      {
        v47 = v44 >> 1;
        v48 = &v45[2 * (v44 >> 1)];
        v50 = *v48;
        v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43)
          v45 = v49;
        else
          v44 = v47;
      }
      while (v44);
      if (v45 != v46 && *v45 == v43)
        v51 = v45[1];
      else
LABEL_79:
        v51 = 0;
      v194 = v28;
      v195 = v51;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v194);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
        && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
        && *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) != &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
      {
LABEL_267:
        v196 = 261;
        v194 = (const void **)"operand";
        v195 = 7;
        mlir::Operation::emitOpError(v27, &v194, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v205, " #");
          if (AttrDictionary)
          {
            LODWORD(OperandRange) = 5;
            v203 = v21;
            v52 = v206;
            if (v207 >= v208)
            {
              v58 = v207 + 1;
              if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
              {
                v59 = (char *)&OperandRange - v206;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v58, 24);
                v52 = v206;
                p_OperandRange = (uint64_t *)&v59[v206];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v58, 24);
                p_OperandRange = &OperandRange;
                v52 = v206;
              }
            }
            else
            {
              p_OperandRange = &OperandRange;
            }
            v54 = v52 + 24 * v207;
            v55 = *(_OWORD *)p_OperandRange;
            *(_QWORD *)(v54 + 16) = p_OperandRange[2];
            *(_OWORD *)v54 = v55;
            ++v207;
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v205, " must be tensor of mps native type values or tensor of quantized values, but got ");
          }
        }
        v56 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, v199);
        v57 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v56);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
        if (!v57)
          return 0;
      }
LABEL_37:
      ++v21;
      if (v29 == v20)
        goto LABEL_107;
    }
  }
  LODWORD(v29) = 0;
LABEL_107:
  v60 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 1);
  if (v61)
  {
    v62 = v60;
    v63 = v61;
    v64 = 0;
    while (1)
    {
      v65 = *this;
      v66 = *(_QWORD *)(*(_QWORD *)(v62 + 32 * v64 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      v67 = v29 + 1;
      v193 = v29 + 1;
      v199[0] = v66;
      v68 = *(_QWORD *)v66;
      v69 = *(void **)(*(_QWORD *)v66 + 136);
      if (v69 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v69 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_268;
      }
      v71 = mlir::TypeID::get<mlir::ShapedType>();
      v72 = *(unsigned int *)(v68 + 16);
      if (!(_DWORD)v72)
        goto LABEL_124;
      v73 = *(_QWORD **)(v68 + 8);
      v74 = &v73[2 * v72];
      do
      {
        v75 = v72 >> 1;
        v76 = &v73[2 * (v72 >> 1)];
        v78 = *v76;
        v77 = v76 + 2;
        v72 += ~(v72 >> 1);
        if (v78 < v71)
          v73 = v77;
        else
          v72 = v75;
      }
      while (v72);
      if (v73 != v74 && *v73 == v71)
        v79 = v73[1];
      else
LABEL_124:
        v79 = 0;
      AttrDictionary = v66;
      v205[0] = v79;
      v194 = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&v194, 8)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 16)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 32)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v194, 64)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 8)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 16)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 32)
        && !mlir::Type::isUnsignedInteger((mlir::Type *)&v194, 64))
      {
LABEL_268:
        v196 = 261;
        v194 = (const void **)"operand";
        v195 = 7;
        mlir::Operation::emitOpError(v65, &v194, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v205, " #");
          if (AttrDictionary)
          {
            LODWORD(OperandRange) = 5;
            v203 = v29;
            v80 = v206;
            if (v207 >= v208)
            {
              v86 = v207 + 1;
              if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
              {
                v87 = (char *)&OperandRange - v206;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v86, 24);
                v80 = v206;
                v81 = (uint64_t *)&v87[v206];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v86, 24);
                v81 = &OperandRange;
                v80 = v206;
              }
            }
            else
            {
              v81 = &OperandRange;
            }
            v82 = v80 + 24 * v207;
            v83 = *(_OWORD *)v81;
            *(_QWORD *)(v82 + 16) = v81[2];
            *(_OWORD *)v82 = v83;
            ++v207;
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v205, " must be tensor of int values, but got ");
          }
        }
        v84 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, v199);
        v85 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v84);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
        if (!v85)
          return 0;
      }
      ++v64;
      LODWORD(v29) = v29 + 1;
      if (v64 == v63)
        goto LABEL_147;
    }
  }
  v67 = v29;
LABEL_147:
  v88 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 2);
  *(_QWORD *)v192 = v89;
  if (v89)
  {
    v90 = v88;
    v91 = 0;
    while (1)
    {
      v92 = *this;
      v93 = (const void **)(*(_QWORD *)(*(_QWORD *)(v90 + 32 * v91 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
      v94 = v67 + 1;
      v193 = v67 + 1;
      v200 = v93;
      v95 = *v93;
      if (*((_UNKNOWN **)*v93 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
      {
        v96 = mlir::TypeID::get<mlir::ShapedType>();
        v97 = *((unsigned int *)v95 + 4);
        if (!(_DWORD)v97)
          goto LABEL_160;
        v98 = (_QWORD *)v95[1];
        v99 = &v98[2 * v97];
        do
        {
          v100 = v97 >> 1;
          v101 = &v98[2 * (v97 >> 1)];
          v103 = *v101;
          v102 = v101 + 2;
          v97 += ~(v97 >> 1);
          if (v103 < v96)
            v98 = v102;
          else
            v97 = v100;
        }
        while (v97);
        if (v98 != v99 && *v98 == v96)
          v104 = v98[1];
        else
LABEL_160:
          v104 = 0;
        AttrDictionary = (unint64_t)v93;
        v205[0] = v104;
        ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&AttrDictionary);
        v95 = *v93;
        if (ArgOperands)
        {
          v106 = mlir::TypeID::get<mlir::ShapedType>();
          v107 = *((unsigned int *)v95 + 4);
          if (!(_DWORD)v107)
            goto LABEL_170;
          v108 = (_QWORD *)v95[1];
          v109 = &v108[2 * v107];
          do
          {
            v110 = v107 >> 1;
            v111 = &v108[2 * (v107 >> 1)];
            v113 = *v111;
            v112 = v111 + 2;
            v107 += ~(v107 >> 1);
            if (v113 < v106)
              v108 = v112;
            else
              v107 = v110;
          }
          while (v107);
          if (v108 != v109 && *v108 == v106)
            v114 = v108[1];
          else
LABEL_170:
            v114 = 0;
          v194 = v93;
          v195 = v114;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v194);
          v95 = *v93;
          if (!v115)
          {
            v155 = mlir::TypeID::get<mlir::ShapedType>();
            v156 = *((unsigned int *)v95 + 4);
            if (!(_DWORD)v156)
              goto LABEL_228;
            v157 = (_QWORD *)v95[1];
            v158 = &v157[2 * v156];
            do
            {
              v159 = v156 >> 1;
              v160 = &v157[2 * (v156 >> 1)];
              v162 = *v160;
              v161 = v160 + 2;
              v156 += ~(v156 >> 1);
              if (v162 < v155)
                v157 = v161;
              else
                v156 = v159;
            }
            while (v156);
            if (v157 != v158 && *v157 == v155)
              v163 = v157[1];
            else
LABEL_228:
              v163 = 0;
            OperandRange = (uint64_t)v93;
            v203 = v163;
            v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange);
            if (mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
              || mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
            {
              goto LABEL_150;
            }
            v95 = *v93;
          }
        }
      }
      v116 = (void *)v95[17];
      if (v116 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        && v116 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        goto LABEL_218;
      }
      v118 = mlir::TypeID::get<mlir::ShapedType>();
      v119 = *((unsigned int *)v95 + 4);
      if (!(_DWORD)v119)
        goto LABEL_185;
      v120 = (_QWORD *)v95[1];
      v121 = &v120[2 * v119];
      do
      {
        v122 = v119 >> 1;
        v123 = &v120[2 * (v119 >> 1)];
        v125 = *v123;
        v124 = v123 + 2;
        v119 += ~(v119 >> 1);
        if (v125 < v118)
          v120 = v124;
        else
          v119 = v122;
      }
      while (v119);
      if (v120 != v121 && *v120 == v118)
        v126 = v120[1];
      else
LABEL_185:
        v126 = 0;
      v199[0] = (uint64_t)v93;
      v199[1] = v126;
      v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v199);
      if (!mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
        && !mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
      {
        goto LABEL_218;
      }
      v127 = *v93;
      v128 = mlir::TypeID::get<mlir::ShapedType>();
      v129 = *((unsigned int *)v127 + 4);
      if (!(_DWORD)v129)
        goto LABEL_196;
      v130 = (_QWORD *)v127[1];
      v131 = &v130[2 * v129];
      do
      {
        v132 = v129 >> 1;
        v133 = &v130[2 * (v129 >> 1)];
        v135 = *v133;
        v134 = v133 + 2;
        v129 += ~(v129 >> 1);
        if (v135 < v128)
          v130 = v134;
        else
          v129 = v132;
      }
      while (v129);
      if (v130 != v131 && *v130 == v128)
        v136 = v130[1];
      else
LABEL_196:
        v136 = 0;
      v198[0] = v93;
      v198[1] = v136;
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v198);
      v210 = 1;
      if (v138 != 1 || *ArgAttrsAttr != v210)
      {
LABEL_218:
        v139 = *v93;
        if (*((_UNKNOWN **)*v93 + 17) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
          goto LABEL_200;
        v146 = mlir::TypeID::get<mlir::ShapedType>();
        v147 = *((unsigned int *)v139 + 4);
        if (!(_DWORD)v147)
          goto LABEL_216;
        v148 = (_QWORD *)v139[1];
        v149 = &v148[2 * v147];
        do
        {
          v150 = v147 >> 1;
          v151 = &v148[2 * (v147 >> 1)];
          v153 = *v151;
          v152 = v151 + 2;
          v147 += ~(v147 >> 1);
          if (v153 < v146)
            v148 = v152;
          else
            v147 = v150;
        }
        while (v147);
        if (v148 != v149 && *v148 == v146)
          v154 = v148[1];
        else
LABEL_216:
          v154 = 0;
        v197[0] = v93;
        v197[1] = v154;
        v201 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v197);
        if (!mlir::Type::isSignedInteger((mlir::Type *)&v201, 32)
          && !mlir::Type::isSignedInteger((mlir::Type *)&v201, 64))
        {
LABEL_200:
          v196 = 261;
          v194 = (const void **)"operand";
          v195 = 7;
          mlir::Operation::emitOpError(v92, &v194, (uint64_t)&AttrDictionary);
          if (AttrDictionary)
          {
            mlir::Diagnostic::operator<<((uint64_t)v205, " #");
            if (AttrDictionary)
            {
              LODWORD(OperandRange) = 5;
              v203 = v67;
              v140 = v206;
              if (v207 >= v208)
              {
                v164 = v207 + 1;
                if (v206 <= (unint64_t)&OperandRange && v206 + 24 * v207 > (unint64_t)&OperandRange)
                {
                  v165 = (char *)&OperandRange - v206;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v164, 24);
                  v140 = v206;
                  v141 = (uint64_t *)&v165[v206];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, v209, v164, 24);
                  v141 = &OperandRange;
                  v140 = v206;
                }
              }
              else
              {
                v141 = &OperandRange;
              }
              v142 = v140 + 24 * v207;
              v143 = *(_OWORD *)v141;
              *(_QWORD *)(v142 + 16) = v141[2];
              *(_OWORD *)v142 = v143;
              ++v207;
              if (AttrDictionary)
                mlir::Diagnostic::operator<<((uint64_t)v205, " must be 0D tensor of mps index type values or static-shape defined tensor with shape equal to [1] or unranked tensor of mps index type values, but got ");
            }
          }
          v144 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v200);
          v145 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v144);
          if (AttrDictionary)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v205);
          if (!v145)
            return 0;
        }
      }
LABEL_150:
      ++v91;
      ++v67;
      if (v91 == *(_QWORD *)v192)
        goto LABEL_243;
    }
  }
  v94 = v67;
LABEL_243:
  v166 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 3);
  if (v167)
  {
    v168 = v167;
    v169 = v166 + 24;
    do
    {
      v170 = *this;
      v171 = *(_QWORD *)(*(_QWORD *)v169 + 8) & 0xFFFFFFFFFFFFFFF8;
      v193 = v94 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v170, v171, (const void **)"operand", (const void **)7, v94))return 0;
      v169 += 32;
      ++v94;
    }
    while (--v168);
  }
  v172 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 4);
  v174 = v173;
  if (v173 >= 2)
    goto LABEL_251;
  if (v173)
  {
    v175 = *(_QWORD *)(v172 + 24);
    v176 = *this;
    v177 = *(_QWORD *)(v175 + 8) & 0xFFFFFFFFFFFFFFF8;
    v178 = v193++;
    if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps8(v176, v177, (const void **)"operand", (const void **)7, v178))return 0;
  }
  v179 = mlir::mpsx::QuantizedGatherOp::getODSOperands((mlir::Operation **)this, 5);
  v174 = v180;
  if (v180 < 2)
  {
    if (!v180
      || (v184 = *(_QWORD *)(v179 + 24),
          v185 = *this,
          v186 = *(_QWORD *)(v184 + 8) & 0xFFFFFFFFFFFFFFF8,
          v187 = v193,
          ++v193,
          mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v185, v186, (const void **)"operand", (const void **)7, v187)))
    {
      if (*((_DWORD *)*this + 9))
        v188 = (uint64_t)(*this - 2);
      else
        v188 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v188, 0);
      return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    return 0;
  }
LABEL_251:
  v194 = (const void **)"operand group starting at #";
  v196 = 259;
  mlir::OpState::emitOpError(this, &v194, (uint64_t)&AttrDictionary);
  v181 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&AttrDictionary, &v193);
  v182 = (uint64_t)v181;
  if (*v181)
    mlir::Diagnostic::operator<<((uint64_t)(v181 + 1), " requires 0 or 1 element, but found ");
  OperandRange = v174;
  v183 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v182, &OperandRange);
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v183);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&AttrDictionary);
  return v14;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps8(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  const void **v31[4];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(void **)(*(_QWORD *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_27;
  }
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v14)
    goto LABEL_14;
  v15 = *(_QWORD **)(v9 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_14:
    v21 = 0;
  v36 = a2;
  v37[0] = v21;
  v31[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isSignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_27:
  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      v34 = 5;
      v35 = a5;
      v22 = &v34;
      v23 = v38;
      if (v39 >= v40)
      {
        v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v23 = v38;
          v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v22 = &v34;
          v23 = v38;
        }
      }
      v24 = v23 + 24 * v39;
      v25 = *(_OWORD *)v22;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v22 + 2);
      *(_OWORD *)v24 = v25;
      ++v39;
      if (v36)
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of quantized values, but got ");
    }
  }
  v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

uint64_t mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::QuantizedMatMulOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mpsx.quantized_matmul", 21, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

unint64_t mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getODSOperandIndexAndLength(mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *this, int a2)
{
  uint64_t v2;
  mlir::CallGraphNode *Value;
  uint64_t v5;
  mlir::CallGraphNode *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  LODWORD(v2) = a2;
  Value = (mlir::CallGraphNode *)mlir::AffineMapAttr::getValue(this);
  v5 = mlir::DictionaryAttr::end(this);
  v6 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v5 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 8));
  if ((v7 & 1) == 0)
  {
    v11 = 0;
    if ((_DWORD)v2)
      goto LABEL_3;
LABEL_7:
    v2 = 0;
    v9 = 0;
    return v9 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                                   + 4 * v2) << 32);
  }
  v11 = *((_QWORD *)v6 + 1);
  if (!(_DWORD)v2)
    goto LABEL_7;
LABEL_3:
  v8 = 0;
  LODWORD(v9) = 0;
  v2 = v2;
  do
  {
    v9 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                  + v8)
                      + v9);
    v8 += 4;
  }
  while (4 * v2 != v8);
  return v9 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v11)
                                                 + 4 * v2) << 32);
}

uint64_t mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase::getWeightsQuantParamsAxis(mlir::mpsx::detail::QuantizedMatMulOpGenericAdaptorBase *this)
{
  mlir::CallGraphNode *v2;
  mlir::CallGraphNode *v3;
  mlir::CallGraphNode *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *__p;
  unsigned int v14;
  uint64_t v15;

  v2 = (mlir::CallGraphNode *)(mlir::AffineMapAttr::getValue(this) + 32);
  v3 = (mlir::CallGraphNode *)mlir::DictionaryAttr::end(this);
  v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v2, v3, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 96) + 40));
  if ((v5 & 1) != 0 && (v6 = *((_QWORD *)v4 + 1)) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = *(void **)(*(_QWORD *)v6 + 136);
    if (v10 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
      v6 = 0;
    v15 = v6;
    if (v10 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      mlir::IntegerAttr::getValue(&v15, (llvm::APInt *)&__p);
      if (v14 > 0x40)
      {
        v11 = *(_QWORD *)__p;
        operator delete[](__p);
      }
      else
      {
        v11 = (uint64_t)((_QWORD)__p << -(uint64_t)v14) >> -(uint64_t)v14;
      }
      v7 = v11 & 0xFFFFFF00;
      v9 = v11;
      v8 = 0x100000000;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  return v8 | v7 | v9;
}

unint64_t mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(mlir::Operation **this, int a2)
{
  uint64_t v2;
  mlir::Operation *v4;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v7;
  mlir::ArrayAttr *v8;
  uint64_t v9;
  uint64_t v10;
  mlir::CallGraphNode *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AttrDictionary;

  LODWORD(v2) = a2;
  v4 = *this;
  if (*((_BYTE *)v4 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v4);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v4 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v7 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v7);
    v8 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v8 = (mlir::Operation *)((char *)v7 + 56);
  }
  v9 = mlir::ArrayAttr::getValue(v8);
  v11 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v9 + 16 * v10 - 16), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v12 & 1) == 0)
  {
    AttrDictionary = 0;
    if ((_DWORD)v2)
      goto LABEL_9;
LABEL_13:
    v2 = 0;
    v14 = 0;
    return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                    + 4 * v2) << 32);
  }
  AttrDictionary = *((_QWORD *)v11 + 1);
  if (!(_DWORD)v2)
    goto LABEL_13;
LABEL_9:
  v13 = 0;
  LODWORD(v14) = 0;
  v2 = v2;
  do
  {
    v14 = (*(_DWORD *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                   + v13)
                       + v14);
    v13 += 4;
  }
  while (4 * v2 != v13);
  return v14 | ((unint64_t)*(unsigned int *)(mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&AttrDictionary)
                                                  + 4 * v2) << 32);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getODSOperands(mlir::Operation **this, int a2)
{
  unsigned int ODSOperandIndexAndLength;
  uint64_t v4;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, a2);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v4 = *((_QWORD *)*this + 9);
  else
    v4 = 0;
  return v4 + 32 * ODSOperandIndexAndLength;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getInput(mlir::Operation **this)
{
  return *(_QWORD *)(*((_QWORD *)*this + 9)
                   + 32 * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 0)
                   + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getInputScale(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 1);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getInputZeroPoint(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 2);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getInputMin(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 3);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeights(mlir::Operation **this)
{
  return *(_QWORD *)(*((_QWORD *)*this + 9)
                   + 32 * mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 4)
                   + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeightsScale(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 5);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeightsZeroPoint(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 6);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeightsMin(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 7);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeightsPaletteLut(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 8);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getBiquantWeightsScale(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 9);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getBiquantWeightsZeroPoint(mlir::Operation **this)
{
  unint64_t ODSOperandIndexAndLength;
  uint64_t v3;

  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(this, 10);
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    v3 = *((_QWORD *)*this + 9);
  else
    v3 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength == (unint64_t)ODSOperandIndexAndLength)
    return 0;
  else
    return *(_QWORD *)(v3 + 32 * ODSOperandIndexAndLength + 24);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *Value;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t v7;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  v7 = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(Value, (mlir::CallGraphNode *)(v7 + 16 * v8 - 32), **(_QWORD **)(*((_QWORD *)*this + 6) + 96));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxis(mlir::Operation **this)
{
  uint64_t result;
  uint64_t v2;
  void *__p;
  unsigned int v4;
  uint64_t v5;

  result = mlir::mpsx::QuantizedMatMulOp::getInputQuantParamsAxisAttr(this);
  v5 = result;
  if (result)
  {
    mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
    if (v4 > 0x40)
    {
      LODWORD(v2) = *(_DWORD *)__p;
      operator delete[](__p);
    }
    else
    {
      v2 = (uint64_t)((_QWORD)__p << -(uint64_t)v4) >> -(uint64_t)v4;
    }
    return v2 | 0x100000000;
  }
  return result;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 40));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (*(_UNKNOWN **)(*(_QWORD *)v11 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    return *((_QWORD *)v9 + 1);
  return 0;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxis(mlir::Operation **this)
{
  uint64_t result;
  uint64_t v2;
  void *__p;
  unsigned int v4;
  uint64_t v5;

  result = mlir::mpsx::QuantizedMatMulOp::getWeightsQuantParamsAxisAttr(this);
  v5 = result;
  if (result)
  {
    mlir::IntegerAttr::getValue(&v5, (llvm::APInt *)&__p);
    if (v4 > 0x40)
    {
      LODWORD(v2) = *(_DWORD *)__p;
      operator delete[](__p);
    }
    else
    {
      v2 = (uint64_t)((_QWORD)__p << -(uint64_t)v4) >> -(uint64_t)v4;
    }
    return v2 | 0x100000000;
  }
  return result;
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getOutputType(mlir::Operation **this)
{
  uint64_t ReplacedByAttr;

  ReplacedByAttr = mlir::placement::ReplacedOps::getReplacedByAttr(this);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&ReplacedByAttr);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getTransposeLhsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 24));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::BoolAttr::classof(*((_QWORD **)v9 + 1)))
    return v11;
  return 0;
}

BOOL mlir::mpsx::QuantizedMatMulOp::getTransposeLhs(mlir::Operation **this)
{
  uint64_t TransposeLhsAttr;

  TransposeLhsAttr = mlir::mpsx::QuantizedMatMulOp::getTransposeLhsAttr(this);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&TransposeLhsAttr);
}

uint64_t mlir::mpsx::QuantizedMatMulOp::getTransposeRhsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 32);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 32));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::BoolAttr::classof(*((_QWORD **)v9 + 1)))
    return v11;
  return 0;
}

BOOL mlir::mpsx::QuantizedMatMulOp::getTransposeRhs(mlir::Operation **this)
{
  uint64_t TransposeRhsAttr;

  TransposeRhsAttr = mlir::mpsx::QuantizedMatMulOp::getTransposeRhsAttr(this);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&TransposeRhsAttr);
}

void mlir::mpsx::QuantizedMatMulOp::build(mlir::MLIRContext **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, unsigned __int8 a18)
{
  _BOOL4 v22;
  uint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  uint64_t DenseI32ArrayAttr;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t BoolAttr;
  uint64_t v32;
  uint64_t v33;
  mlir::UnknownLoc *v34;
  mlir::MLIRContext *v35;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  int v38;
  int v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[2];
  unint64_t v57[2];
  unint64_t v58[2];
  int *v59;
  uint64_t v60;
  int v61;
  int8x16_t v62;
  _BOOL4 v63;
  _BOOL4 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v54 = a4;
  v55 = a3;
  v52 = a6;
  v53 = a5;
  v50 = a9;
  v51 = a8;
  v48 = a11;
  v49 = a10;
  v46 = a14;
  v47 = a13;
  v45 = a15;
  mlir::OperationState::addOperands(a2, (uint64_t)&v55, 1);
  if (a4)
    mlir::OperationState::addOperands(a2, (uint64_t)&v54, 1);
  if (a5)
    mlir::OperationState::addOperands(a2, (uint64_t)&v53, 1);
  if (a6)
    mlir::OperationState::addOperands(a2, (uint64_t)&v52, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v51, 1);
  if (a9)
    mlir::OperationState::addOperands(a2, (uint64_t)&v50, 1);
  if (a10)
    mlir::OperationState::addOperands(a2, (uint64_t)&v49, 1);
  if (a11)
    mlir::OperationState::addOperands(a2, (uint64_t)&v48, 1);
  if (a13)
    mlir::OperationState::addOperands(a2, (uint64_t)&v47, 1);
  if (a14)
    mlir::OperationState::addOperands(a2, (uint64_t)&v46, 1);
  if (a15)
  {
    mlir::OperationState::addOperands(a2, (uint64_t)&v45, 1);
    v22 = v45 != 0;
  }
  else
  {
    v22 = 0;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  LODWORD(v59) = 1;
  HIDWORD(v59) = v54 != 0;
  LODWORD(v60) = v53 != 0;
  HIDWORD(v60) = v52 != 0;
  v24.i64[0] = v50;
  v24.i64[1] = v49;
  v25.i64[0] = v48;
  v25.i64[1] = v47;
  v61 = 1;
  v26 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v24), (int32x4_t)vceqzq_s64(v25));
  v25.i64[0] = 0x100000001;
  v25.i64[1] = 0x100000001;
  v62 = vbicq_s8((int8x16_t)v25, v26);
  v63 = v46 != 0;
  v64 = v22;
  DenseI32ArrayAttr = mlir::Builder::getDenseI32ArrayAttr(a1, (uint64_t)&v59, 11);
  mlir::NamedAttribute::NamedAttribute(v56, v23, DenseI32ArrayAttr);
  mlir::NamedAttrList::push_back(a2 + 112, v56[0], v56[1]);
  if (a7)
  {
    mlir::NamedAttribute::NamedAttribute(&v59, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), a7);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v59, v60);
  }
  if (a12)
  {
    mlir::NamedAttribute::NamedAttribute(&v59, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 40), a12);
    mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v59, v60);
  }
  v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  v29 = mlir::TypeAttr::get(a16);
  mlir::NamedAttribute::NamedAttribute(&v59, v28, v29);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v59, v60);
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 24);
  BoolAttr = mlir::Builder::getBoolAttr(a1, (mlir::MLIRContext *)a17);
  mlir::NamedAttribute::NamedAttribute(&v59, v30, BoolAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v59, v60);
  v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 32);
  v33 = mlir::Builder::getBoolAttr(a1, (mlir::MLIRContext *)a18);
  mlir::NamedAttribute::NamedAttribute(&v59, v32, v33);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v59, v60);
  v59 = &v61;
  v60 = 0x200000000;
  v34 = *a1;
  v35 = *(mlir::MLIRContext **)a2;
  mlir::ValueRange::ValueRange(v58, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v57, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(v34, v35, 1, v58[0], v58[1], Dictionary, v38, v39, v57[0], v57[1], (uint64_t)&v59))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v40 = v59;
  v41 = v60;
  v42 = *(unsigned int *)(a2 + 72);
  if (v42 + (unint64_t)v60 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v42 + v60, 8);
    LODWORD(v42) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v41)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v42), v40, 8 * v41);
    LODWORD(v42) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v42 + v41;
  if (v59 != &v61)
    free(v59);
}

void mlir::mpsx::QuantizedMatMulOp::populateDefaultAttrs(mlir::mpsx::QuantizedMatMulOp *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t BoolAttr;
  uint64_t v7;
  uint64_t v8;
  mlir::BoolAttr *Context;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)this + 96);
  Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v4);
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[3]))
  {
    v5 = v4[3];
    BoolAttr = mlir::Builder::getBoolAttr(&Context, 0);
    mlir::NamedAttribute::NamedAttribute(&v10, v5, BoolAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[4]))
  {
    v7 = v4[4];
    v8 = mlir::Builder::getBoolAttr(&Context, 0);
    mlir::NamedAttribute::NamedAttribute(&v10, v7, v8);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
}

BOOL mlir::mpsx::QuantizedMatMulOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  const void **v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  mlir::CallGraphNode *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  const void **v18;
  uint64_t v19;
  uint64_t ODSOperands;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  const void **v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  const void **v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  const void **v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  const void **v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  const void **v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  const void **v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  const void **v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  const void **v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t NextResultAtOffset;
  char *v100;
  uint64_t v101;
  const void **v102[4];
  __int16 v103;
  uint64_t v104[3];
  unint64_t AttrDictionary;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  _QWORD v110[20];

  v110[19] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (!v4)
  {
LABEL_10:
    v8 = "requires attribute 'operandSegmentSizes'";
LABEL_16:
    v102[0] = (const void **)v8;
    v103 = 259;
    mlir::OpState::emitOpError(this, v102, (uint64_t)&AttrDictionary);
LABEL_17:
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v106);
    return v12;
  }
  v6 = 0;
  v7 = 16 * v4;
  while (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) != mlir::CallGraphNode::getCallableRegion(Value))
  {
    if (**(_QWORD **)((*this)[6] + 96) == mlir::CallGraphNode::getCallableRegion(Value))
      v6 = (const void **)*((_QWORD *)Value + 1);
    Value = (mlir::CallGraphNode *)((char *)Value + 16);
    v7 -= 16;
    if (!v7)
      goto LABEL_10;
  }
  if (!v7)
  {
LABEL_15:
    v8 = "requires attribute 'output_type'";
    goto LABEL_16;
  }
  v9 = 0;
  v10 = *((_QWORD *)Value + 1);
  while (1)
  {
    v11 = (mlir::CallGraphNode *)((char *)Value + v9);
    if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)((char *)Value + v9)))
      break;
    v9 += 16;
    if (v7 == v9)
      goto LABEL_15;
  }
  v14 = *((_QWORD *)v11 + 1);
  v15 = v7 - v9;
  if (v7 == v9)
  {
    v18 = 0;
    v17 = 0;
    v16 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 24) == mlir::CallGraphNode::getCallableRegion(v11))
      {
        v16 = (_QWORD *)*((_QWORD *)v11 + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 32) == mlir::CallGraphNode::getCallableRegion(v11))
      {
        v17 = (_QWORD *)*((_QWORD *)v11 + 1);
      }
      else if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 40) == mlir::CallGraphNode::getCallableRegion(v11))
      {
        v18 = (const void **)*((_QWORD *)v11 + 1);
      }
      v11 = (mlir::CallGraphNode *)((char *)v11 + 16);
      v15 -= 16;
    }
    while (v15);
  }
  v101 = v10;
  mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v101);
  if (v19 != 11)
  {
    v88 = v19;
    v102[0] = (const void **)"'operandSegmentSizes' attribute for specifying operand segments must have 11 elements, but got ";
    v103 = 259;
    mlir::OpState::emitOpError(this, v102, (uint64_t)&AttrDictionary);
    if (AttrDictionary)
    {
      LODWORD(v104[0]) = 5;
      v104[1] = v88;
      v89 = v104;
      v90 = v107;
      if (v108 >= v109)
      {
        v93 = v108 + 1;
        if (v107 <= (unint64_t)v104 && v107 + 24 * v108 > (unint64_t)v104)
        {
          v100 = (char *)v104 - v107;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
          v90 = v107;
          v89 = (uint64_t *)&v100[v107];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, v110, v93, 24);
          v89 = v104;
          v90 = v107;
        }
      }
      v91 = v90 + 24 * v108;
      v92 = *(_OWORD *)v89;
      *(_QWORD *)(v91 + 16) = v89[2];
      *(_OWORD *)v91 = v92;
      ++v108;
    }
    goto LABEL_17;
  }
  if (!mlir::anec::__mlir_ods_local_attr_constraint_ANECOps22(*this, v6, (const void **)"input_quant_params_axis", (const void **)0x17)|| !mlir::anec::__mlir_ods_local_attr_constraint_ANECOps22(*this, v18, (const void **)"weights_quant_params_axis", (const void **)0x19)|| !mlir::placement::__mlir_ods_local_attr_constraint_PlacementOps1(*this, v14, (const void **)"output_type", (const void **)0xB)|| !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(*this, v16, (const void **)"transpose_lhs", (const void **)0xD)
    || !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(*this, v17, (const void **)"transpose_rhs", (const void **)0xD))
  {
    return 0;
  }
  LODWORD(v101) = 0;
  ODSOperands = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 0);
  if (v21)
  {
    v22 = v21;
    v23 = ODSOperands + 24;
    do
    {
      v24 = *this;
      v25 = *(_QWORD *)(*(_QWORD *)v23 + 8) & 0xFFFFFFFFFFFFFFF8;
      v26 = v101;
      LODWORD(v101) = v101 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(v24, v25, (const void **)"operand", (const void **)7, v26))return 0;
      v23 += 32;
    }
    while (--v22);
  }
  v27 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 1);
  v29 = v28;
  if (v28 >= 2)
    goto LABEL_70;
  if (v28)
  {
    v30 = *(_QWORD *)(v27 + 24);
    v31 = *this;
    v32 = (const void **)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF8);
    v33 = v101;
    LODWORD(v101) = v101 + 1;
    if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v31, v32, (const void **)"operand", 7, v33))return 0;
  }
  v34 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 2);
  v29 = v35;
  if (v35 < 2)
  {
    if (v35)
    {
      v36 = *(_QWORD *)(v34 + 24);
      v37 = *this;
      v38 = (const void **)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8);
      v39 = v101;
      LODWORD(v101) = v101 + 1;
      if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v37, v38, (const void **)"operand", 7, v39))return 0;
    }
    v40 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 3);
    v29 = v41;
    if (v41 < 2)
    {
      if (v41)
      {
        v42 = *(_QWORD *)(v40 + 24);
        v43 = *this;
        v44 = (const void **)(*(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFF8);
        v45 = v101;
        LODWORD(v101) = v101 + 1;
        if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v43, v44, (const void **)"operand", 7, v45))return 0;
      }
      v46 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 4);
      if (v47)
      {
        v48 = v47;
        v49 = v46 + 24;
        do
        {
          v50 = *this;
          v51 = *(_QWORD *)(*(_QWORD *)v49 + 8) & 0xFFFFFFFFFFFFFFF8;
          v52 = v101;
          LODWORD(v101) = v101 + 1;
          if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(v50, v51, (const void **)"operand", (const void **)7, v52))return 0;
          v49 += 32;
        }
        while (--v48);
      }
      v53 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 5);
      v29 = v54;
      if (v54 >= 2)
        goto LABEL_70;
      if (v54)
      {
        v55 = *(_QWORD *)(v53 + 24);
        v56 = *this;
        v57 = (const void **)(*(_QWORD *)(v55 + 8) & 0xFFFFFFFFFFFFFFF8);
        v58 = v101;
        LODWORD(v101) = v101 + 1;
        if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps13(v56, v57, (const void **)"operand", 7, v58))return 0;
      }
      v59 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 6);
      v29 = v60;
      if (v60 < 2)
      {
        if (v60)
        {
          v61 = *(_QWORD *)(v59 + 24);
          v62 = *this;
          v63 = (const void **)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF8);
          v64 = v101;
          LODWORD(v101) = v101 + 1;
          if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v62, v63, (const void **)"operand", 7, v64))return 0;
        }
        v65 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 7);
        v29 = v66;
        if (v66 < 2)
        {
          if (v66)
          {
            v67 = *(_QWORD *)(v65 + 24);
            v68 = *this;
            v69 = (const void **)(*(_QWORD *)(v67 + 8) & 0xFFFFFFFFFFFFFFF8);
            v70 = v101;
            LODWORD(v101) = v101 + 1;
            if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v68, v69, (const void **)"operand", 7, v70))return 0;
          }
          v71 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 8);
          v29 = v72;
          if (v72 < 2)
          {
            if (v72)
            {
              v73 = *(_QWORD *)(v71 + 24);
              v74 = *this;
              v75 = *(_QWORD *)(v73 + 8) & 0xFFFFFFFFFFFFFFF8;
              v76 = v101;
              LODWORD(v101) = v101 + 1;
              if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(v74, v75, (const void **)"operand", (const void **)7, v76))return 0;
            }
            v77 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 9);
            v29 = v78;
            if (v78 < 2)
            {
              if (!v78
                || (v79 = *(_QWORD *)(v77 + 24),
                    v80 = *this,
                    v81 = (const void **)(*(_QWORD *)(v79 + 8) & 0xFFFFFFFFFFFFFFF8),
                    v82 = v101,
                    LODWORD(v101) = v101 + 1,
                    mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(v80, v81, (const void **)"operand", 7, v82)))
              {
                v83 = mlir::mpsx::QuantizedMatMulOp::getODSOperands((mlir::Operation **)this, 10);
                v29 = v84;
                if (v84 >= 2)
                  goto LABEL_70;
                if (!v84
                  || (v94 = *(_QWORD *)(v83 + 24),
                      v95 = *this,
                      v96 = (const void **)(*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF8),
                      v97 = v101,
                      LODWORD(v101) = v101 + 1,
                      mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(v95, v96, (const void **)"operand", 7, v97)))
                {
                  if (*((_DWORD *)*this + 9))
                    v98 = (uint64_t)(*this - 2);
                  else
                    v98 = 0;
                  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v98, 0);
                  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
                }
              }
              return 0;
            }
          }
        }
      }
    }
  }
LABEL_70:
  v102[0] = (const void **)"operand group starting at #";
  v103 = 259;
  mlir::OpState::emitOpError(this, v102, (uint64_t)&AttrDictionary);
  v85 = (_QWORD *)mlir::InFlightDiagnostic::operator<<<unsigned int const&>((uint64_t)&AttrDictionary, (unsigned int *)&v101);
  v86 = (uint64_t)v85;
  if (*v85)
    mlir::Diagnostic::operator<<((uint64_t)(v85 + 1), " requires 0 or 1 element, but found ");
  v104[0] = v29;
  v87 = mlir::InFlightDiagnostic::operator<<<unsigned long>(v86, v104);
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v87);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&AttrDictionary);
  return v12;
}

uint64_t mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(uint64_t *a1, _QWORD *a2, const void **a3, const void **a4)
{
  uint64_t v7;
  const void **v9[4];
  __int16 v10;
  uint64_t v11;
  _QWORD v12[24];

  v12[23] = *MEMORY[0x1E0C80C00];
  if (!a2 || mlir::BoolAttr::classof(a2))
    return 1;
  v10 = 257;
  mlir::Operation::emitOpError(a1, v9, (uint64_t)&v11);
  if (v11)
  {
    mlir::Diagnostic::operator<<((uint64_t)v12, "attribute '");
    if (v11)
    {
      v10 = 261;
      v9[0] = a3;
      v9[1] = a4;
      mlir::Diagnostic::operator<<((uint64_t)v12, v9);
      if (v11)
        mlir::Diagnostic::operator<<((uint64_t)v12, "' failed to satisfy constraint: BOOL attribute");
    }
  }
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v11);
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v11);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v12);
  return v7;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps10(uint64_t *a1, uint64_t a2, const void **a3, const void **a4, unsigned int a5)
{
  uint64_t v9;
  void *v10;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  char *v30;
  const void **v31[4];
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v9 = *(_QWORD *)a2;
  v10 = *(void **)(*(_QWORD *)a2 + 136);
  if (v10 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v10 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_30;
  }
  v13 = mlir::TypeID::get<mlir::ShapedType>();
  v14 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v14)
    goto LABEL_14;
  v15 = *(_QWORD **)(v9 + 8);
  v16 = &v15[2 * v14];
  do
  {
    v17 = v14 >> 1;
    v18 = &v15[2 * (v14 >> 1)];
    v20 = *v18;
    v19 = v18 + 2;
    v14 += ~(v14 >> 1);
    if (v20 < v13)
      v15 = v19;
    else
      v14 = v17;
  }
  while (v14);
  if (v15 != v16 && *v15 == v13)
    v21 = v15[1];
  else
LABEL_14:
    v21 = 0;
  v36 = a2;
  v37[0] = v21;
  v31[0] = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v36);
  if (mlir::Type::isF16((mlir::Type *)v31)
    || mlir::Type::isF32((mlir::Type *)v31)
    || mlir::Type::isBF16((mlir::Type *)v31)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)v31, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)v31, 32)
    || *((_UNKNOWN **)*v31[0] + 17) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_30:
  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  mlir::Operation::emitOpError(a1, v31, (uint64_t)&v36);
  if (v36)
  {
    mlir::Diagnostic::operator<<((uint64_t)v37, " #");
    if (v36)
    {
      v34 = 5;
      v35 = a5;
      v22 = &v34;
      v23 = v38;
      if (v39 >= v40)
      {
        v29 = v39 + 1;
        if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
        {
          v30 = (char *)&v34 - v38;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v23 = v38;
          v22 = (int *)&v30[v38];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v29, 24);
          v22 = &v34;
          v23 = v38;
        }
      }
      v24 = v23 + 24 * v39;
      v25 = *(_OWORD *)v22;
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v22 + 2);
      *(_OWORD *)v24 = v25;
      ++v39;
      if (v36)
        mlir::Diagnostic::operator<<((uint64_t)v37, " must be tensor of floating point or quantized values, but got ");
    }
  }
  v26 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v36, &v33);
  v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v26);
  if (v36)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v36);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
  return v27;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps11(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v81;
  char *v82;
  const void **v83;
  uint64_t v84;
  __int16 v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  const void **v89;
  uint64_t OperandRange;
  const void **v91;
  uint64_t v92;
  const void **v93;
  _QWORD v94[2];
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD v98[20];

  v98[19] = *MEMORY[0x1E0C80C00];
  v89 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    goto LABEL_65;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93))
    goto LABEL_65;
  v20 = *a2;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *((unsigned int *)v20 + 4);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = (_QWORD *)v20[1];
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v83 = a2;
  v84 = v29;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ShapedType>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_30:
      v40 = 0;
    v91 = a2;
    v92 = v40;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v91);
    if (v41 != 1)
    {
      v42 = *a2;
      v43 = mlir::TypeID::get<mlir::ShapedType>();
      v44 = *((unsigned int *)v42 + 4);
      if (!(_DWORD)v44)
        goto LABEL_40;
      v45 = (_QWORD *)v42[1];
      v46 = &v45[2 * v44];
      do
      {
        v47 = v44 >> 1;
        v48 = &v45[2 * (v44 >> 1)];
        v50 = *v48;
        v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43)
          v45 = v49;
        else
          v44 = v47;
      }
      while (v44);
      if (v45 != v46 && *v45 == v43)
        v51 = v45[1];
      else
LABEL_40:
        v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
      if (v52 != 2)
      {
        v53 = *a2;
        v54 = mlir::TypeID::get<mlir::ShapedType>();
        v55 = *((unsigned int *)v53 + 4);
        if (!(_DWORD)v55)
          goto LABEL_50;
        v56 = (_QWORD *)v53[1];
        v57 = &v56[2 * v55];
        do
        {
          v58 = v55 >> 1;
          v59 = &v56[2 * (v55 >> 1)];
          v61 = *v59;
          v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54)
            v56 = v60;
          else
            v55 = v58;
        }
        while (v55);
        if (v56 != v57 && *v56 == v54)
          v62 = v56[1];
        else
LABEL_50:
          v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v87);
        if (v63 != 3)
          goto LABEL_65;
      }
    }
  }
  v64 = *a2;
  v65 = mlir::TypeID::get<mlir::ShapedType>();
  v66 = *((unsigned int *)v64 + 4);
  if (!(_DWORD)v66)
    goto LABEL_60;
  v67 = (_QWORD *)v64[1];
  v68 = &v67[2 * v66];
  do
  {
    v69 = v66 >> 1;
    v70 = &v67[2 * (v66 >> 1)];
    v72 = *v70;
    v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65)
      v67 = v71;
    else
      v66 = v69;
  }
  while (v66);
  if (v67 != v68 && *v67 == v65)
    v73 = v67[1];
  else
LABEL_60:
    v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    return 1;
  }
LABEL_65:
  v85 = 261;
  v83 = a3;
  v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      v92 = a5;
      v75 = (char *)&v91;
      v76 = v95;
      if (v96 >= v97)
      {
        v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v76 = v95;
          v75 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v75 = (char *)&v91;
          v76 = v95;
        }
      }
      v77 = v76 + 24 * v96;
      v78 = *(_OWORD *)v75;
      *(_QWORD *)(v77 + 16) = *((_QWORD *)v75 + 2);
      *(_OWORD *)v77 = v78;
      ++v96;
      if (v93)
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of floating point values, but got ");
    }
  }
  v79 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  v74 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v79);
  if (v93)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v74;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps12(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v81;
  char *v82;
  const void **v83;
  uint64_t v84;
  __int16 v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  const void **v89;
  uint64_t OperandRange;
  const void **v91;
  uint64_t v92;
  const void **v93;
  _QWORD v94[2];
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD v98[20];

  v98[19] = *MEMORY[0x1E0C80C00];
  v89 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    goto LABEL_73;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93))
    goto LABEL_73;
  v20 = *a2;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *((unsigned int *)v20 + 4);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = (_QWORD *)v20[1];
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v83 = a2;
  v84 = v29;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ShapedType>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_30:
      v40 = 0;
    v91 = a2;
    v92 = v40;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v91);
    if (v41 != 1)
    {
      v42 = *a2;
      v43 = mlir::TypeID::get<mlir::ShapedType>();
      v44 = *((unsigned int *)v42 + 4);
      if (!(_DWORD)v44)
        goto LABEL_40;
      v45 = (_QWORD *)v42[1];
      v46 = &v45[2 * v44];
      do
      {
        v47 = v44 >> 1;
        v48 = &v45[2 * (v44 >> 1)];
        v50 = *v48;
        v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43)
          v45 = v49;
        else
          v44 = v47;
      }
      while (v44);
      if (v45 != v46 && *v45 == v43)
        v51 = v45[1];
      else
LABEL_40:
        v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
      if (v52 != 2)
      {
        v53 = *a2;
        v54 = mlir::TypeID::get<mlir::ShapedType>();
        v55 = *((unsigned int *)v53 + 4);
        if (!(_DWORD)v55)
          goto LABEL_50;
        v56 = (_QWORD *)v53[1];
        v57 = &v56[2 * v55];
        do
        {
          v58 = v55 >> 1;
          v59 = &v56[2 * (v55 >> 1)];
          v61 = *v59;
          v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54)
            v56 = v60;
          else
            v55 = v58;
        }
        while (v55);
        if (v56 != v57 && *v56 == v54)
          v62 = v56[1];
        else
LABEL_50:
          v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v87);
        if (v63 != 3)
          goto LABEL_73;
      }
    }
  }
  v64 = *a2;
  v65 = mlir::TypeID::get<mlir::ShapedType>();
  v66 = *((unsigned int *)v64 + 4);
  if (!(_DWORD)v66)
    goto LABEL_60;
  v67 = (_QWORD *)v64[1];
  v68 = &v67[2 * v66];
  do
  {
    v69 = v66 >> 1;
    v70 = &v67[2 * (v66 >> 1)];
    v72 = *v70;
    v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65)
      v67 = v71;
    else
      v66 = v69;
  }
  while (v66);
  if (v67 != v68 && *v67 == v65)
    v73 = v67[1];
  else
LABEL_60:
    v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
    || *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_73:
  v85 = 261;
  v83 = a3;
  v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      v92 = a5;
      v74 = (char *)&v91;
      v75 = v95;
      if (v96 >= v97)
      {
        v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v75 = v95;
          v74 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v74 = (char *)&v91;
          v75 = v95;
        }
      }
      v76 = v75 + 24 * v96;
      v77 = *(_OWORD *)v74;
      *(_QWORD *)(v76 + 16) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      ++v96;
      if (v93)
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of quantized values, but got ");
    }
  }
  v78 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  v79 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v78);
  if (v93)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v79;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps13(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v81;
  char *v82;
  const void **v83;
  uint64_t v84;
  __int16 v85;
  _QWORD v86[2];
  _QWORD v87[2];
  _QWORD v88[2];
  const void **v89;
  uint64_t OperandRange;
  const void **v91;
  uint64_t v92;
  const void **v93;
  _QWORD v94[2];
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD v98[20];

  v98[19] = *MEMORY[0x1E0C80C00];
  v89 = a2;
  v9 = *a2;
  if (*((_UNKNOWN **)*a2 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    goto LABEL_76;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v12)
    goto LABEL_10;
  v13 = (_QWORD *)v9[1];
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_10:
    v19 = 0;
  v93 = a2;
  v94[0] = v19;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v93))
    goto LABEL_76;
  v20 = *a2;
  v21 = mlir::TypeID::get<mlir::ShapedType>();
  v22 = *((unsigned int *)v20 + 4);
  if (!(_DWORD)v22)
    goto LABEL_20;
  v23 = (_QWORD *)v20[1];
  v24 = &v23[2 * v22];
  do
  {
    v25 = v22 >> 1;
    v26 = &v23[2 * (v22 >> 1)];
    v28 = *v26;
    v27 = v26 + 2;
    v22 += ~(v22 >> 1);
    if (v28 < v21)
      v23 = v27;
    else
      v22 = v25;
  }
  while (v22);
  if (v23 != v24 && *v23 == v21)
    v29 = v23[1];
  else
LABEL_20:
    v29 = 0;
  v83 = a2;
  v84 = v29;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v83);
  if (v30)
  {
    v31 = *a2;
    v32 = mlir::TypeID::get<mlir::ShapedType>();
    v33 = *((unsigned int *)v31 + 4);
    if (!(_DWORD)v33)
      goto LABEL_30;
    v34 = (_QWORD *)v31[1];
    v35 = &v34[2 * v33];
    do
    {
      v36 = v33 >> 1;
      v37 = &v34[2 * (v33 >> 1)];
      v39 = *v37;
      v38 = v37 + 2;
      v33 += ~(v33 >> 1);
      if (v39 < v32)
        v34 = v38;
      else
        v33 = v36;
    }
    while (v33);
    if (v34 != v35 && *v34 == v32)
      v40 = v34[1];
    else
LABEL_30:
      v40 = 0;
    v91 = a2;
    v92 = v40;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v91);
    if (v41 != 1)
    {
      v42 = *a2;
      v43 = mlir::TypeID::get<mlir::ShapedType>();
      v44 = *((unsigned int *)v42 + 4);
      if (!(_DWORD)v44)
        goto LABEL_40;
      v45 = (_QWORD *)v42[1];
      v46 = &v45[2 * v44];
      do
      {
        v47 = v44 >> 1;
        v48 = &v45[2 * (v44 >> 1)];
        v50 = *v48;
        v49 = v48 + 2;
        v44 += ~(v44 >> 1);
        if (v50 < v43)
          v45 = v49;
        else
          v44 = v47;
      }
      while (v44);
      if (v45 != v46 && *v45 == v43)
        v51 = v45[1];
      else
LABEL_40:
        v51 = 0;
      v88[0] = a2;
      v88[1] = v51;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v88);
      if (v52 != 2)
      {
        v53 = *a2;
        v54 = mlir::TypeID::get<mlir::ShapedType>();
        v55 = *((unsigned int *)v53 + 4);
        if (!(_DWORD)v55)
          goto LABEL_50;
        v56 = (_QWORD *)v53[1];
        v57 = &v56[2 * v55];
        do
        {
          v58 = v55 >> 1;
          v59 = &v56[2 * (v55 >> 1)];
          v61 = *v59;
          v60 = v59 + 2;
          v55 += ~(v55 >> 1);
          if (v61 < v54)
            v56 = v60;
          else
            v55 = v58;
        }
        while (v55);
        if (v56 != v57 && *v56 == v54)
          v62 = v56[1];
        else
LABEL_50:
          v62 = 0;
        v87[0] = a2;
        v87[1] = v62;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v87);
        if (v63 != 3)
          goto LABEL_76;
      }
    }
  }
  v64 = *a2;
  v65 = mlir::TypeID::get<mlir::ShapedType>();
  v66 = *((unsigned int *)v64 + 4);
  if (!(_DWORD)v66)
    goto LABEL_60;
  v67 = (_QWORD *)v64[1];
  v68 = &v67[2 * v66];
  do
  {
    v69 = v66 >> 1;
    v70 = &v67[2 * (v66 >> 1)];
    v72 = *v70;
    v71 = v70 + 2;
    v66 += ~(v66 >> 1);
    if (v72 < v65)
      v67 = v71;
    else
      v66 = v69;
  }
  while (v66);
  if (v67 != v68 && *v67 == v65)
    v73 = v67[1];
  else
LABEL_60:
    v73 = 0;
  v86[0] = a2;
  v86[1] = v73;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  if (mlir::Type::isF16((mlir::Type *)&OperandRange)
    || mlir::Type::isF32((mlir::Type *)&OperandRange)
    || mlir::Type::isBF16((mlir::Type *)&OperandRange)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 1)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 2)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 4)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16)
    || mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32)
    || *(_UNKNOWN **)(*(_QWORD *)OperandRange + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    return 1;
  }
LABEL_76:
  v85 = 261;
  v83 = a3;
  v84 = a4;
  mlir::Operation::emitOpError(a1, &v83, (uint64_t)&v93);
  if (v93)
  {
    mlir::Diagnostic::operator<<((uint64_t)v94, " #");
    if (v93)
    {
      LODWORD(v91) = 5;
      v92 = a5;
      v74 = (char *)&v91;
      v75 = v95;
      if (v96 >= v97)
      {
        v81 = v96 + 1;
        if (v95 <= (unint64_t)&v91 && v95 + 24 * v96 > (unint64_t)&v91)
        {
          v82 = (char *)&v91 - v95;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v75 = v95;
          v74 = &v82[v95];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v95, v98, v81, 24);
          v74 = (char *)&v91;
          v75 = v95;
        }
      }
      v76 = v75 + 24 * v96;
      v77 = *(_OWORD *)v74;
      *(_QWORD *)(v76 + 16) = *((_QWORD *)v74 + 2);
      *(_OWORD *)v76 = v77;
      ++v96;
      if (v93)
        mlir::Diagnostic::operator<<((uint64_t)v94, " must be 0D/1D/2D/3D tensor of floating point or quantized values, but got ");
    }
  }
  v78 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v93, (uint64_t *)&v89);
  v79 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v78);
  if (v93)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v93);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
  return v79;
}

void mlir::mpsx::RMSNormOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Float32Type *v7;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *__src;
  uint64_t v23;
  _BYTE v24[16];
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  v17 = a4;
  v18 = a3;
  v16 = a5;
  mlir::OperationState::addOperands(a2, (uint64_t)&v18, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v17, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v16, 1);
  __src = v24;
  v23 = 0x200000000;
  v7 = *a1;
  mlir::ValueRange::ValueRange(&v20, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v19, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  v25[0] = v20;
  v25[1] = v21;
  if (v21)
  {
    v10 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v11 = mlir::Float32Type::get(v7, v9);
    v10 = mlir::UnrankedTensorType::get(v11);
  }
  v12 = v23;
  if (v23 >= HIDWORD(v23))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v24, v23 + 1, 8);
    v12 = v23;
  }
  *((_QWORD *)__src + v12) = v10;
  LODWORD(v23) = v23 + 1;
  v13 = v23;
  v14 = __src;
  v15 = *(unsigned int *)(a2 + 72);
  if (v15 + (unint64_t)v23 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v15 + v23, 8);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  if (v13)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v15), v14, 8 * v13);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v15 + v13;
  if (__src != v24)
    free(__src);
}

uint64_t mlir::mpsx::RMSNormOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int ArgOperands;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t NextResultAtOffset;
  uint64_t *v80;
  const void **v81;
  _QWORD *v82;
  void *v83;
  unint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t *v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *p_Value;
  unint64_t v106;
  unint64_t v107;
  __int128 v108;
  uint64_t v109;
  char v110;
  uint64_t ElementTypeOrSelf;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120[2];
  _QWORD v121[2];
  _QWORD v122[2];
  _QWORD v123[2];
  const void **v124;
  uint64_t OperandRange;
  const void **v126;
  uint64_t v127;
  __int16 v128;
  uint64_t Value;
  uint64_t v130;
  const void **v131;
  _QWORD v132[2];
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  _QWORD v136[20];

  v136[19] = *MEMORY[0x1E0C80C00];
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u))
  {
    return 0;
  }
  v2 = *this;
  v3 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8);
  v124 = v3;
  v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *((unsigned int *)v4 + 4);
    if (!(_DWORD)v6)
      goto LABEL_12;
    v7 = (_QWORD *)v4[1];
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_12:
      v13 = 0;
    v131 = v3;
    v132[0] = v13;
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v131);
    v4 = *v3;
    if (ArgOperands)
    {
      v15 = mlir::TypeID::get<mlir::ShapedType>();
      v16 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v16)
        goto LABEL_22;
      v17 = (_QWORD *)v4[1];
      v18 = &v17[2 * v16];
      do
      {
        v19 = v16 >> 1;
        v20 = &v17[2 * (v16 >> 1)];
        v22 = *v20;
        v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15)
          v17 = v21;
        else
          v16 = v19;
      }
      while (v16);
      if (v17 != v18 && *v17 == v15)
        v23 = v17[1];
      else
LABEL_22:
        v23 = 0;
      v126 = v3;
      v127 = v23;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v126);
      v4 = *v3;
      if (!v24)
      {
        v69 = mlir::TypeID::get<mlir::ShapedType>();
        v70 = *((unsigned int *)v4 + 4);
        if (!(_DWORD)v70)
          goto LABEL_87;
        v71 = (_QWORD *)v4[1];
        v72 = &v71[2 * v70];
        do
        {
          v73 = v70 >> 1;
          v74 = &v71[2 * (v70 >> 1)];
          v76 = *v74;
          v75 = v74 + 2;
          v70 += ~(v70 >> 1);
          if (v76 < v69)
            v71 = v75;
          else
            v70 = v73;
        }
        while (v70);
        if (v71 != v72 && *v71 == v69)
          v77 = v71[1];
        else
LABEL_87:
          v77 = 0;
        Value = (uint64_t)v3;
        v130 = v77;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&Value);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          goto LABEL_90;
        }
        v4 = *v3;
      }
    }
  }
  if ((_UNKNOWN *)v4[17] == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v25 = mlir::TypeID::get<mlir::ShapedType>();
    v26 = *((unsigned int *)v4 + 4);
    if (!(_DWORD)v26)
      goto LABEL_33;
    v27 = (_QWORD *)v4[1];
    v28 = &v27[2 * v26];
    do
    {
      v29 = v26 >> 1;
      v30 = &v27[2 * (v26 >> 1)];
      v32 = *v30;
      v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25)
        v27 = v31;
      else
        v26 = v29;
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
      v33 = v27[1];
    else
LABEL_33:
      v33 = 0;
    v123[0] = v3;
    v123[1] = v33;
    v34 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v123);
    v4 = *v3;
    if (v34)
    {
      v35 = mlir::TypeID::get<mlir::ShapedType>();
      v36 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v36)
        goto LABEL_43;
      v37 = (_QWORD *)v4[1];
      v38 = &v37[2 * v36];
      do
      {
        v39 = v36 >> 1;
        v40 = &v37[2 * (v36 >> 1)];
        v42 = *v40;
        v41 = v40 + 2;
        v36 += ~(v36 >> 1);
        if (v42 < v35)
          v37 = v41;
        else
          v36 = v39;
      }
      while (v36);
      if (v37 != v38 && *v37 == v35)
        v43 = v37[1];
      else
LABEL_43:
        v43 = 0;
      v122[0] = v3;
      v122[1] = v43;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v122);
      v4 = *v3;
      if (v44 == 1)
      {
        v45 = mlir::TypeID::get<mlir::ShapedType>();
        v46 = *((unsigned int *)v4 + 4);
        if (!(_DWORD)v46)
          goto LABEL_53;
        v47 = (_QWORD *)v4[1];
        v48 = &v47[2 * v46];
        do
        {
          v49 = v46 >> 1;
          v50 = &v47[2 * (v46 >> 1)];
          v52 = *v50;
          v51 = v50 + 2;
          v46 += ~(v46 >> 1);
          if (v52 < v45)
            v47 = v51;
          else
            v46 = v49;
        }
        while (v46);
        if (v47 != v48 && *v47 == v45)
          v53 = v47[1];
        else
LABEL_53:
          v53 = 0;
        v121[0] = v3;
        v121[1] = v53;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v121);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          goto LABEL_90;
        }
        v4 = *v3;
      }
    }
  }
  if ((_UNKNOWN *)v4[17] != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    goto LABEL_175;
  v60 = mlir::TypeID::get<mlir::ShapedType>();
  v61 = *((unsigned int *)v4 + 4);
  if (!(_DWORD)v61)
    goto LABEL_75;
  v62 = (_QWORD *)v4[1];
  v63 = &v62[2 * v61];
  do
  {
    v64 = v61 >> 1;
    v65 = &v62[2 * (v61 >> 1)];
    v67 = *v65;
    v66 = v65 + 2;
    v61 += ~(v61 >> 1);
    if (v67 < v60)
      v62 = v66;
    else
      v61 = v64;
  }
  while (v61);
  if (v62 != v63 && *v62 == v60)
    v68 = v62[1];
  else
LABEL_75:
    v68 = 0;
  v120[0] = (uint64_t)v3;
  v120[1] = v68;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v120);
  if (!mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
    && !mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
  {
LABEL_175:
    v128 = 261;
    v126 = (const void **)"operand";
    v127 = 7;
    mlir::Operation::emitOpError(v2, &v126, (uint64_t)&v131);
    if (v131)
    {
      mlir::Diagnostic::operator<<((uint64_t)v132, " #");
      if (v131)
      {
        LODWORD(Value) = 5;
        v130 = 2;
        v54 = &Value;
        v55 = v133;
        if (v134 >= v135)
        {
          v116 = v134 + 1;
          if (v133 <= (unint64_t)&Value && v133 + 24 * v134 > (unint64_t)&Value)
          {
            v118 = (char *)&Value - v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v116, 24);
            v55 = v133;
            v54 = (uint64_t *)&v118[v133];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v116, 24);
            v54 = &Value;
            v55 = v133;
          }
        }
        v56 = v55 + 24 * v134;
        v57 = *(_OWORD *)v54;
        *(_QWORD *)(v56 + 16) = v54[2];
        *(_OWORD *)v56 = v57;
        ++v134;
        if (v131)
          mlir::Diagnostic::operator<<((uint64_t)v132, " must be 0D tensor of mps index type values or 1D tensor of mps index type values or unranked tensor of mps index type values, but got ");
      }
    }
    v58 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v131, (uint64_t *)&v124);
    v59 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v58);
    if (v131)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
    if (!v59)
      return 0;
  }
LABEL_90:
  if (*((_DWORD *)*this + 9))
    v78 = (uint64_t)(*this - 2);
  else
    v78 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v78, 0);
  v80 = *this;
  v81 = (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  v120[0] = (uint64_t)v81;
  v82 = *v81;
  v83 = (void *)*((_QWORD *)*v81 + 17);
  if (v83 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v83 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
LABEL_121:
    if (v83 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
      || v83 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v95 = mlir::TypeID::get<mlir::ShapedType>();
      v96 = *((unsigned int *)v82 + 4);
      if (!(_DWORD)v96)
        goto LABEL_134;
      v97 = (_QWORD *)v82[1];
      v98 = &v97[2 * v96];
      do
      {
        v99 = v96 >> 1;
        v100 = &v97[2 * (v96 >> 1)];
        v102 = *v100;
        v101 = v100 + 2;
        v96 += ~(v96 >> 1);
        if (v102 < v95)
          v97 = v101;
        else
          v96 = v99;
      }
      while (v96);
      if (v97 != v98 && *v97 == v95)
        v103 = v97[1];
      else
LABEL_134:
        v103 = 0;
      v126 = v81;
      v127 = v103;
      v104 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v126);
      if (*(_UNKNOWN **)(*(_QWORD *)v104 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v115 = v104;
        v123[0] = v104;
        Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v123);
        if (mlir::Type::isF16((mlir::Type *)&Value))
          goto LABEL_144;
        v121[0] = v115;
        v122[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v121);
        if (mlir::Type::isF32((mlir::Type *)v122))
          goto LABEL_144;
      }
    }
    v128 = 261;
    v126 = (const void **)"result";
    v127 = 6;
    mlir::Operation::emitOpError(v80, &v126, (uint64_t)&v131);
    if (v131)
    {
      mlir::Diagnostic::operator<<((uint64_t)v132, " #");
      if (v131)
      {
        LODWORD(Value) = 5;
        v130 = 0;
        p_Value = &Value;
        v106 = v133;
        if (v134 >= v135)
        {
          v117 = v134 + 1;
          if (v133 <= (unint64_t)&Value && v133 + 24 * v134 > (unint64_t)&Value)
          {
            v119 = (char *)&Value - v133;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v117, 24);
            v106 = v133;
            p_Value = (uint64_t *)&v119[v133];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v133, v136, v117, 24);
            p_Value = &Value;
            v106 = v133;
          }
        }
        v107 = v106 + 24 * v134;
        v108 = *(_OWORD *)p_Value;
        *(_QWORD *)(v107 + 16) = p_Value[2];
        *(_OWORD *)v107 = v108;
        ++v134;
        if (v131)
          mlir::Diagnostic::operator<<((uint64_t)v132, " must be tensor of mps native type values or tensor of complex values, but got ");
      }
    }
    v109 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v131, v120);
    v110 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v109);
    if (v131)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
    if (v110)
      goto LABEL_144;
    return 0;
  }
  v85 = mlir::TypeID::get<mlir::ShapedType>();
  v86 = *((unsigned int *)v82 + 4);
  if (!(_DWORD)v86)
    goto LABEL_106;
  v87 = (_QWORD *)v82[1];
  v88 = &v87[2 * v86];
  do
  {
    v89 = v86 >> 1;
    v90 = &v87[2 * (v86 >> 1)];
    v92 = *v90;
    v91 = v90 + 2;
    v86 += ~(v86 >> 1);
    if (v92 < v85)
      v87 = v91;
    else
      v86 = v89;
  }
  while (v86);
  if (v87 != v88 && *v87 == v85)
    v93 = v87[1];
  else
LABEL_106:
    v93 = 0;
  v131 = v81;
  v132[0] = v93;
  Value = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v131);
  if (!mlir::Type::isSignlessInteger((mlir::Type *)&Value, 1)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 8)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 16)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 32)
    && !mlir::Type::isSignedInteger((mlir::Type *)&Value, 64)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 8)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 16)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 32)
    && !mlir::Type::isUnsignedInteger((mlir::Type *)&Value, 64)
    && !mlir::Type::isF16((mlir::Type *)&Value)
    && !mlir::Type::isF32((mlir::Type *)&Value)
    && !mlir::Type::isBF16((mlir::Type *)&Value)
    && *(_UNKNOWN **)(*(_QWORD *)Value + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    v82 = *v81;
    v83 = (void *)*((_QWORD *)*v81 + 17);
    goto LABEL_121;
  }
LABEL_144:
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(*(_QWORD *)((*this)[9] + 24));
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf(*(_QWORD *)((*this)[9] + 56)))
  {
    v112 = mlir::getElementTypeOrSelf(*(_QWORD *)((*this)[9] + 56));
    if (v112 == mlir::getElementTypeOrSelf(*(_QWORD *)((*this)[9] + 24)))
      return 1;
  }
  v126 = (const void **)"failed to verify that all of {input, epsilon} have same element type";
  v128 = 259;
  mlir::OpState::emitOpError(this, &v126, (uint64_t)&v131);
  v113 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v131);
  if (v131)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v131);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v132);
  return v113;
}

uint64_t mlir::mpsx::RegionReturnOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  const void ***v7;
  uint64_t *v8;
  const void **v9;
  _QWORD *v10;
  void *v11;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  const void **v38[4];
  __int16 v39;
  const void **v40;
  int v41;
  uint64_t v42;
  const void **v43;
  _BYTE v44[16];
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD v48[21];

  v48[19] = *MEMORY[0x1E0C80C00];
  v1 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v2 = *((unsigned int *)v1 + 17);
    if ((_DWORD)v2)
    {
      v4 = 0;
      v5 = v1[9];
      while (1)
      {
        v8 = *this;
        v9 = (const void **)(*(_QWORD *)(*(_QWORD *)(v5 + 32 * v4 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
        v40 = v9;
        v10 = *v9;
        v11 = (void *)*((_QWORD *)*v9 + 17);
        if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        if (v11 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
        {
          v27 = mlir::TypeID::get<mlir::ShapedType>();
          v28 = *((unsigned int *)v10 + 4);
          if (!(_DWORD)v28)
            goto LABEL_42;
          v29 = (_QWORD *)v10[1];
          v30 = &v29[2 * v28];
          do
          {
            v31 = v28 >> 1;
            v32 = &v29[2 * (v28 >> 1)];
            v34 = *v32;
            v33 = v32 + 2;
            v28 += ~(v28 >> 1);
            if (v34 < v27)
              v29 = v33;
            else
              v28 = v31;
          }
          while (v28);
          if (v29 != v30 && *v29 == v27)
            v6 = (const void **)v29[1];
          else
LABEL_42:
            v6 = 0;
          v38[0] = v9;
          v7 = v38;
LABEL_6:
          v7[1] = v6;
          mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v7);
          goto LABEL_7;
        }
        if (v11 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
        {
          v39 = 261;
          v38[0] = (const void **)"operand";
          v38[1] = (const void **)7;
          mlir::Operation::emitOpError(v8, v38, (uint64_t)&v43);
          if (v43)
          {
            mlir::Diagnostic::operator<<((uint64_t)v44, " #");
            if (v43)
            {
              v41 = 5;
              v42 = v4;
              v21 = v45;
              if (v46 >= v47)
              {
                v35 = v46 + 1;
                if (v45 <= (unint64_t)&v41 && v45 + 24 * v46 > (unint64_t)&v41)
                {
                  v36 = (char *)&v41 - v45;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v35, 24);
                  v21 = v45;
                  v22 = (int *)&v36[v45];
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v35, 24);
                  v22 = &v41;
                  v21 = v45;
                }
              }
              else
              {
                v22 = &v41;
              }
              v23 = v21 + 24 * v46;
              v24 = *(_OWORD *)v22;
              *(_QWORD *)(v23 + 16) = *((_QWORD *)v22 + 2);
              *(_OWORD *)v23 = v24;
              ++v46;
              if (v43)
                mlir::Diagnostic::operator<<((uint64_t)v44, " must be variadic of tensor of any type values or memref of any type values or index, but got ");
            }
          }
          v25 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v43, (uint64_t *)&v40);
          v26 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
          if (v43)
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v43);
          std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v44);
          if (!v26)
            return 0;
        }
LABEL_7:
        if (++v4 == v2)
          return 1;
      }
      v13 = mlir::TypeID::get<mlir::ShapedType>();
      v14 = *((unsigned int *)v10 + 4);
      if (!(_DWORD)v14)
        goto LABEL_4;
      v15 = (_QWORD *)v10[1];
      v16 = &v15[2 * v14];
      do
      {
        v17 = v14 >> 1;
        v18 = &v15[2 * (v14 >> 1)];
        v20 = *v18;
        v19 = v18 + 2;
        v14 += ~(v14 >> 1);
        if (v20 < v13)
          v15 = v19;
        else
          v14 = v17;
      }
      while (v14);
      if (v15 != v16 && *v15 == v13)
        v6 = (const void **)v15[1];
      else
LABEL_4:
        v6 = 0;
      v43 = v9;
      v7 = &v43;
      goto LABEL_6;
    }
  }
  return 1;
}

void mlir::mpsx::ScaledDotProductAttentionOp::build(mlir::Float32Type **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  mlir::Float32Type *v9;
  mlir::MLIRContext *Context;
  mlir::MLIRContext *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27[2];
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  v24 = a4;
  v25 = a3;
  v22 = a6;
  v23 = a5;
  v21 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v25, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v24, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v23, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v22, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v21, 1);
  v28 = v30;
  v29 = 0x200000000;
  v9 = *a1;
  mlir::ValueRange::ValueRange(v27, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(&v26, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(v9, v11, v12, v27[0], v27[1], v13, v14, v15, v19, v20, (uint64_t)&v28))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v16 = v28;
  v17 = v29;
  v18 = *(unsigned int *)(a2 + 72);
  if (v18 + (unint64_t)v29 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18 + v29, 8);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v17)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v18), v16, 8 * v17);
    LODWORD(v18) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v18 + v17;
  if (v28 != v30)
    free(v28);
}

BOOL mlir::mpsx::ScaledDotProductAttentionOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  const void **v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int ArgOperands;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *ArgAttrsAttr;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t *v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t NextResultAtOffset;
  unint64_t v76;
  char *v77;
  const void **v78;
  uint64_t v79;
  __int16 v80;
  _QWORD v81[2];
  _QWORD v82[2];
  _QWORD v83[2];
  const void **v84;
  uint64_t OperandRange;
  const void **v86;
  uint64_t v87;
  const void **v88;
  _QWORD v89[2];
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  _BYTE v93[152];
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (!mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u)|| !mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps1(*this,
                           *(_QWORD *)(*(_QWORD *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8,
                           (const void **)"operand",
                           (const void **)7,
                           3u))
  {
    return 0;
  }
  v2 = *this;
  v3 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
  v84 = v3;
  v4 = *v3;
  if (*((_UNKNOWN **)*v3 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *((unsigned int *)v4 + 4);
    if (!(_DWORD)v6)
      goto LABEL_14;
    v7 = (_QWORD *)v4[1];
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_14:
      v13 = 0;
    v88 = v3;
    v89[0] = v13;
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v88);
    v4 = *v3;
    if (ArgOperands)
    {
      v15 = mlir::TypeID::get<mlir::ShapedType>();
      v16 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v16)
        goto LABEL_24;
      v17 = (_QWORD *)v4[1];
      v18 = &v17[2 * v16];
      do
      {
        v19 = v16 >> 1;
        v20 = &v17[2 * (v16 >> 1)];
        v22 = *v20;
        v21 = v20 + 2;
        v16 += ~(v16 >> 1);
        if (v22 < v15)
          v17 = v21;
        else
          v16 = v19;
      }
      while (v16);
      if (v17 != v18 && *v17 == v15)
        v23 = v17[1];
      else
LABEL_24:
        v23 = 0;
      v78 = v3;
      v79 = v23;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v78);
      v4 = *v3;
      if (!v24)
      {
        v65 = mlir::TypeID::get<mlir::ShapedType>();
        v66 = *((unsigned int *)v4 + 4);
        if (!(_DWORD)v66)
          goto LABEL_86;
        v67 = (_QWORD *)v4[1];
        v68 = &v67[2 * v66];
        do
        {
          v69 = v66 >> 1;
          v70 = &v67[2 * (v66 >> 1)];
          v72 = *v70;
          v71 = v70 + 2;
          v66 += ~(v66 >> 1);
          if (v72 < v65)
            v67 = v71;
          else
            v66 = v69;
        }
        while (v66);
        if (v67 != v68 && *v67 == v65)
          v73 = v67[1];
        else
LABEL_86:
          v73 = 0;
        v86 = v3;
        v87 = v73;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v86);
        if (mlir::Type::isF16((mlir::Type *)&OperandRange)
          || mlir::Type::isF32((mlir::Type *)&OperandRange)
          || mlir::Type::isBF16((mlir::Type *)&OperandRange))
        {
          goto LABEL_90;
        }
        v4 = *v3;
      }
    }
  }
  v25 = (void *)v4[17];
  if (v25 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    && v25 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    goto LABEL_76;
  }
  v27 = mlir::TypeID::get<mlir::ShapedType>();
  v28 = *((unsigned int *)v4 + 4);
  if (!(_DWORD)v28)
    goto LABEL_39;
  v29 = (_QWORD *)v4[1];
  v30 = &v29[2 * v28];
  do
  {
    v31 = v28 >> 1;
    v32 = &v29[2 * (v28 >> 1)];
    v34 = *v32;
    v33 = v32 + 2;
    v28 += ~(v28 >> 1);
    if (v34 < v27)
      v29 = v33;
    else
      v28 = v31;
  }
  while (v28);
  if (v29 != v30 && *v29 == v27)
    v35 = v29[1];
  else
LABEL_39:
    v35 = 0;
  v83[0] = v3;
  v83[1] = v35;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v83);
  if (!mlir::Type::isF16((mlir::Type *)&OperandRange)
    && !mlir::Type::isF32((mlir::Type *)&OperandRange)
    && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    goto LABEL_76;
  }
  v36 = *v3;
  v37 = mlir::TypeID::get<mlir::ShapedType>();
  v38 = *((unsigned int *)v36 + 4);
  if (!(_DWORD)v38)
    goto LABEL_51;
  v39 = (_QWORD *)v36[1];
  v40 = &v39[2 * v38];
  do
  {
    v41 = v38 >> 1;
    v42 = &v39[2 * (v38 >> 1)];
    v44 = *v42;
    v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37)
      v39 = v43;
    else
      v38 = v41;
  }
  while (v38);
  if (v39 != v40 && *v39 == v37)
    v45 = v39[1];
  else
LABEL_51:
    v45 = 0;
  v82[0] = v3;
  v82[1] = v45;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v82);
  v94 = 1;
  if (v47 != 1 || *ArgAttrsAttr != v94)
  {
LABEL_76:
    v48 = *v3;
    if (*((_UNKNOWN **)*v3 + 17) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      goto LABEL_55;
    v56 = mlir::TypeID::get<mlir::ShapedType>();
    v57 = *((unsigned int *)v48 + 4);
    if (!(_DWORD)v57)
      goto LABEL_73;
    v58 = (_QWORD *)v48[1];
    v59 = &v58[2 * v57];
    do
    {
      v60 = v57 >> 1;
      v61 = &v58[2 * (v57 >> 1)];
      v63 = *v61;
      v62 = v61 + 2;
      v57 += ~(v57 >> 1);
      if (v63 < v56)
        v58 = v62;
      else
        v57 = v60;
    }
    while (v57);
    if (v58 != v59 && *v58 == v56)
      v64 = v58[1];
    else
LABEL_73:
      v64 = 0;
    v81[0] = v3;
    v81[1] = v64;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v81);
    if (!mlir::Type::isF16((mlir::Type *)&OperandRange)
      && !mlir::Type::isF32((mlir::Type *)&OperandRange)
      && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
LABEL_55:
      v80 = 261;
      v78 = (const void **)"operand";
      v79 = 7;
      mlir::Operation::emitOpError(v2, &v78, (uint64_t)&v88);
      if (v88)
      {
        mlir::Diagnostic::operator<<((uint64_t)v89, " #");
        if (v88)
        {
          LODWORD(v86) = 5;
          v87 = 4;
          v49 = (char *)&v86;
          v50 = v90;
          if (v91 >= v92)
          {
            v76 = v91 + 1;
            if (v90 <= (unint64_t)&v86 && v90 + 24 * v91 > (unint64_t)&v86)
            {
              v77 = (char *)&v86 - v90;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v93, v76, 24);
              v50 = v90;
              v49 = &v77[v90];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, v93, v76, 24);
              v49 = (char *)&v86;
              v50 = v90;
            }
          }
          v51 = v50 + 24 * v91;
          v52 = *(_OWORD *)v49;
          *(_QWORD *)(v51 + 16) = *((_QWORD *)v49 + 2);
          *(_OWORD *)v51 = v52;
          ++v91;
          if (v88)
            mlir::Diagnostic::operator<<((uint64_t)v89, " must be 0D tensor of floating point values or static-shape defined tensor with shape equal to [1] or unranked tensor of floating point values, but got ");
        }
      }
      v53 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v88, (uint64_t *)&v84);
      v54 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v53);
      if (v88)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v88);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v89);
      if (!v54)
        return 0;
    }
  }
LABEL_90:
  if (*((_DWORD *)*this + 9))
    v74 = (uint64_t)(*this - 2);
  else
    v74 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v74, 0);
  return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::getTransposeLhsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 8));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::BoolAttr::classof(*((_QWORD **)v9 + 1)))
    return v11;
  return 0;
}

BOOL mlir::mpsx::SparseDenseMatMulOp::getTransposeLhs(mlir::Operation **this)
{
  uint64_t TransposeLhsAttr;

  TransposeLhsAttr = mlir::mpsx::SparseDenseMatMulOp::getTransposeLhsAttr(this);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&TransposeLhsAttr);
}

uint64_t mlir::mpsx::SparseDenseMatMulOp::getTransposeRhsAttr(mlir::Operation **this)
{
  mlir::Operation *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  mlir::CallGraphNode *v4;
  mlir::Operation *v5;
  mlir::ArrayAttr *v6;
  uint64_t Value;
  uint64_t v8;
  mlir::CallGraphNode *v9;
  char v10;
  uint64_t v11;
  unint64_t AttrDictionary;

  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::Operation *)((char *)v2 + 56);
  }
  v4 = (mlir::CallGraphNode *)(mlir::ArrayAttr::getValue(p_AttrDictionary) + 16);
  v5 = *this;
  if (*((_BYTE *)*this + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary(v5);
    v6 = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    v6 = (mlir::Operation *)((char *)v5 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v6);
  v9 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(v4, (mlir::CallGraphNode *)(Value + 16 * v8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*this + 6) + 96) + 16));
  if ((v10 & 1) == 0)
    return 0;
  v11 = *((_QWORD *)v9 + 1);
  if (!v11)
    return 0;
  if (mlir::BoolAttr::classof(*((_QWORD **)v9 + 1)))
    return v11;
  return 0;
}

BOOL mlir::mpsx::SparseDenseMatMulOp::getTransposeRhs(mlir::Operation **this)
{
  uint64_t TransposeRhsAttr;

  TransposeRhsAttr = mlir::mpsx::SparseDenseMatMulOp::getTransposeRhsAttr(this);
  return mlir::BoolAttr::getValue((mlir::BoolAttr *)&TransposeRhsAttr);
}

void mlir::mpsx::SparseDenseMatMulOp::build(mlir::BoolAttr **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, mlir::MLIRContext *a8, unsigned __int8 a9, unsigned int a10)
{
  uint64_t v13;
  uint64_t BoolAttr;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mlir::UnknownLoc *v19;
  mlir::MLIRContext *Context;
  unint64_t Dictionary;
  mlir::MLIRContext *v22;
  int v23;
  int v24;
  int v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34[2];
  void *v35[2];
  _QWORD *v36;
  uint64_t v37;
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  v32 = a4;
  v33 = a3;
  v30 = a6;
  v31 = a5;
  v29 = a7;
  mlir::OperationState::addOperands(a2, (uint64_t)&v33, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v32, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v31, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v30, 1);
  mlir::OperationState::addOperands(a2, (uint64_t)&v29, 1);
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8);
  BoolAttr = mlir::Builder::getBoolAttr(a1, a8);
  mlir::NamedAttribute::NamedAttribute(&v36, v13, BoolAttr);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v36, v37);
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16);
  v16 = mlir::Builder::getBoolAttr(a1, (mlir::MLIRContext *)a9);
  mlir::NamedAttribute::NamedAttribute(&v36, v15, v16);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v36, v37);
  v17 = **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96);
  v18 = mlir::mps::SparseTensorStorageAttr::get(*a1, a10);
  mlir::NamedAttribute::NamedAttribute(&v36, v17, v18);
  mlir::NamedAttrList::push_back(a2 + 112, (uint64_t)v36, v37);
  v36 = v38;
  v37 = 0x200000000;
  v19 = *a1;
  mlir::ValueRange::ValueRange((unint64_t *)v35, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24));
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)a2);
  Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)(a2 + 112), Context);
  mlir::ValueRange::ValueRange(v34, *(_QWORD *)(a2 + 224), *(unsigned int *)(a2 + 232));
  if (!mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(v19, v22, v23, v35[0], (unint64_t)v35[1], Dictionary, v24, v25, v34[0], v34[1], (uint64_t)&v36))llvm::report_fatal_error((llvm *)"Failed to infer result type(s).", (const char *)1);
  v26 = v36;
  v27 = v37;
  v28 = *(unsigned int *)(a2 + 72);
  if (v28 + (unint64_t)v37 > *(unsigned int *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v28 + v37, 8);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  if ((_DWORD)v27)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 64) + 8 * v28), v26, 8 * v27);
    LODWORD(v28) = *(_DWORD *)(a2 + 72);
  }
  *(_DWORD *)(a2 + 72) = v28 + v27;
  if (v36 != v38)
    free(v36);
}

void mlir::mpsx::SparseDenseMatMulOp::populateDefaultAttrs(mlir::mpsx::SparseDenseMatMulOp *this, const mlir::OperationName *a2, mlir::NamedAttrList *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t BoolAttr;
  uint64_t v7;
  uint64_t v8;
  mlir::BoolAttr *Context;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)this + 96);
  Context = (mlir::BoolAttr *)mlir::Attribute::getContext((mlir::Attribute *)v4);
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[1]))
  {
    v5 = v4[1];
    BoolAttr = mlir::Builder::getBoolAttr(&Context, 0);
    mlir::NamedAttribute::NamedAttribute(&v10, v5, BoolAttr);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
  if (!mlir::NamedAttrList::get((uint64_t)a2, v4[2]))
  {
    v7 = v4[2];
    v8 = mlir::Builder::getBoolAttr(&Context, 0);
    mlir::NamedAttribute::NamedAttribute(&v10, v7, v8);
    mlir::NamedAttrList::push_back((uint64_t)a2, v10, v11);
  }
}

BOOL mlir::mpsx::SparseDenseMatMulOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  mlir::CallGraphNode *Value;
  uint64_t v6;
  uint64_t CallableRegion;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char v16;
  const void **v17;
  _QWORD *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t *v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  uint64_t *v85;
  const void **v86;
  _QWORD *v87;
  void *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t *v103;
  _QWORD *v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t *v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t *v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t NextResultAtOffset;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  const void **v143;
  uint64_t v144;
  __int16 v145;
  unint64_t v146;
  uint64_t v147;
  const void **v148;
  uint64_t OperandRange;
  const void **v150;
  uint64_t v151;
  unint64_t AttrDictionary;
  _QWORD v153[2];
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  _QWORD v157[20];

  v157[19] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (mlir::CallGraphNode *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (1)
    {
      CallableRegion = mlir::CallGraphNode::getCallableRegion(Value);
      v8 = *this;
      if (**(_QWORD **)((*this)[6] + 96) == CallableRegion)
        break;
      Value = (mlir::CallGraphNode *)((char *)Value + 16);
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    v10 = *((_QWORD *)Value + 1);
    if (v6)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v13 = mlir::CallGraphNode::getCallableRegion(Value);
        v8 = *this;
        if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 8) == v13)
        {
          v11 = (_QWORD *)*((_QWORD *)Value + 1);
        }
        else
        {
          v14 = mlir::CallGraphNode::getCallableRegion(Value);
          v8 = *this;
          if (*(_QWORD *)(*(_QWORD *)((*this)[6] + 96) + 16) == v14)
            v12 = (_QWORD *)*((_QWORD *)Value + 1);
        }
        Value = (mlir::CallGraphNode *)((char *)Value + 16);
        v6 -= 16;
      }
      while (v6);
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    if (!mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(v8, v11, (const void **)"transpose_lhs", (const void **)0xD)|| !mlir::mpsx::__mlir_ods_local_attr_constraint_MPSXOps9(*this, v12, (const void **)"transpose_rhs", (const void **)0xD))
    {
      return 0;
    }
    v15 = *this;
    if (v10
      && *(_UNKNOWN **)(*(_QWORD *)v10 + 136) != &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
    {
      v145 = 257;
      mlir::Operation::emitOpError(v15, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, "attribute '");
        if (AttrDictionary)
        {
          v145 = 261;
          v143 = (const void **)"storage_type";
          v144 = 12;
          mlir::Diagnostic::operator<<((uint64_t)v153, &v143);
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v153, "' failed to satisfy constraint: valid SparseTensorStorage");
        }
      }
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (!v16)
        return 0;
      v15 = *this;
    }
    v17 = (const void **)(*(_QWORD *)(*(_QWORD *)(v15[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    v148 = v17;
    v18 = *v17;
    v19 = (void *)*((_QWORD *)*v17 + 17);
    if (v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      v50 = mlir::TypeID::get<mlir::ShapedType>();
      v51 = *((unsigned int *)v18 + 4);
      if (!(_DWORD)v51)
        goto LABEL_72;
      v52 = (_QWORD *)v18[1];
      v53 = &v52[2 * v51];
      do
      {
        v54 = v51 >> 1;
        v55 = &v52[2 * (v51 >> 1)];
        v57 = *v55;
        v56 = v55 + 2;
        v51 += ~(v51 >> 1);
        if (v57 < v50)
          v52 = v56;
        else
          v51 = v54;
      }
      while (v51);
      if (v52 != v53 && *v52 == v50)
        v58 = v52[1];
      else
LABEL_72:
        v58 = 0;
      AttrDictionary = (unint64_t)v17;
      v153[0] = v58;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
        goto LABEL_83;
      v18 = *v17;
      if (*((_UNKNOWN **)*v17 + 17) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        goto LABEL_75;
    }
    else if (v19 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      goto LABEL_75;
    }
    v20 = mlir::TypeID::get<mlir::ShapedType>();
    v21 = *((unsigned int *)v18 + 4);
    if (!(_DWORD)v21)
      goto LABEL_41;
    v22 = (_QWORD *)v18[1];
    v23 = &v22[2 * v21];
    do
    {
      v24 = v21 >> 1;
      v25 = &v22[2 * (v21 >> 1)];
      v27 = *v25;
      v26 = v25 + 2;
      v21 += ~(v21 >> 1);
      if (v27 < v20)
        v22 = v26;
      else
        v21 = v24;
    }
    while (v21);
    if (v22 != v23 && *v22 == v20)
      v28 = v22[1];
    else
LABEL_41:
      v28 = 0;
    v143 = v17;
    v144 = v28;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v143))
      goto LABEL_75;
    v29 = *v17;
    v30 = mlir::TypeID::get<mlir::ShapedType>();
    v31 = *((unsigned int *)v29 + 4);
    if (!(_DWORD)v31)
      goto LABEL_51;
    v32 = (_QWORD *)v29[1];
    v33 = &v32[2 * v31];
    do
    {
      v34 = v31 >> 1;
      v35 = &v32[2 * (v31 >> 1)];
      v37 = *v35;
      v36 = v35 + 2;
      v31 += ~(v31 >> 1);
      if (v37 < v30)
        v32 = v36;
      else
        v31 = v34;
    }
    while (v31);
    if (v32 != v33 && *v32 == v30)
      v38 = v32[1];
    else
LABEL_51:
      v38 = 0;
    v150 = v17;
    v151 = v38;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v150);
    if (v39 != 1)
      goto LABEL_75;
    v40 = *v17;
    v41 = mlir::TypeID::get<mlir::ShapedType>();
    v42 = *((unsigned int *)v40 + 4);
    if (!(_DWORD)v42)
      goto LABEL_61;
    v43 = (_QWORD *)v40[1];
    v44 = &v43[2 * v42];
    do
    {
      v45 = v42 >> 1;
      v46 = &v43[2 * (v42 >> 1)];
      v48 = *v46;
      v47 = v46 + 2;
      v42 += ~(v42 >> 1);
      if (v48 < v41)
        v43 = v47;
      else
        v42 = v45;
    }
    while (v42);
    if (v43 != v44 && *v43 == v41)
      v49 = v43[1];
    else
LABEL_61:
      v49 = 0;
    v146 = (unint64_t)v17;
    v147 = v49;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v146);
    if (!mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
LABEL_75:
      v145 = 261;
      v143 = (const void **)"operand";
      v144 = 7;
      mlir::Operation::emitOpError(v15, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, " #");
        if (AttrDictionary)
        {
          LODWORD(v150) = 5;
          v151 = 0;
          v59 = (char *)&v150;
          v60 = v154;
          if (v155 >= v156)
          {
            v137 = v155 + 1;
            if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
            {
              v140 = (char *)&v150 - v154;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v137, 24);
              v60 = v154;
              v59 = &v140[v154];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v137, 24);
              v59 = (char *)&v150;
              v60 = v154;
            }
          }
          v61 = v60 + 24 * v155;
          v62 = *(_OWORD *)v59;
          *(_QWORD *)(v61 + 16) = *((_QWORD *)v59 + 2);
          *(_OWORD *)v61 = v62;
          ++v155;
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v153, " must be unranked tensor of 32-bit float values or 1D tensor of 32-bit float values, but got ");
        }
      }
      v63 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v148);
      v64 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v63);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (!v64)
        return 0;
    }
LABEL_83:
    if (mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 1u)&& mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(*this, (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8), (const void **)"operand", 7, 2u))
    {
      v65 = *this;
      v66 = *(_QWORD *)(*(_QWORD *)((*this)[9] + 120) + 8) & 0xFFFFFFFFFFFFFFF8;
      v146 = v66;
      v67 = *(_QWORD *)v66;
      v68 = *(void **)(*(_QWORD *)v66 + 136);
      if (v68 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
        || v68 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        v70 = mlir::TypeID::get<mlir::ShapedType>();
        v71 = *(unsigned int *)(v67 + 16);
        if (!(_DWORD)v71)
          goto LABEL_98;
        v72 = *(_QWORD **)(v67 + 8);
        v73 = &v72[2 * v71];
        do
        {
          v74 = v71 >> 1;
          v75 = &v72[2 * (v71 >> 1)];
          v77 = *v75;
          v76 = v75 + 2;
          v71 += ~(v71 >> 1);
          if (v77 < v70)
            v72 = v76;
          else
            v71 = v74;
        }
        while (v71);
        if (v72 != v73 && *v72 == v70)
          v78 = v72[1];
        else
LABEL_98:
          v78 = 0;
        AttrDictionary = v66;
        v153[0] = v78;
        v143 = (const void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
        if (mlir::Type::isSignedInteger((mlir::Type *)&v143, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&v143, 64))
        {
          goto LABEL_109;
        }
      }
      v145 = 261;
      v143 = (const void **)"operand";
      v144 = 7;
      mlir::Operation::emitOpError(v65, &v143, (uint64_t)&AttrDictionary);
      if (AttrDictionary)
      {
        mlir::Diagnostic::operator<<((uint64_t)v153, " #");
        if (AttrDictionary)
        {
          LODWORD(v150) = 5;
          v151 = 3;
          v79 = (char *)&v150;
          v80 = v154;
          if (v155 >= v156)
          {
            v138 = v155 + 1;
            if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
            {
              v141 = (char *)&v150 - v154;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v138, 24);
              v80 = v154;
              v79 = &v141[v154];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v138, 24);
              v79 = (char *)&v150;
              v80 = v154;
            }
          }
          v81 = v80 + 24 * v155;
          v82 = *(_OWORD *)v79;
          *(_QWORD *)(v81 + 16) = *((_QWORD *)v79 + 2);
          *(_OWORD *)v81 = v82;
          ++v155;
          if (AttrDictionary)
            mlir::Diagnostic::operator<<((uint64_t)v153, " must be tensor of mps index type values, but got ");
        }
      }
      v83 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v146);
      v84 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v83);
      if (AttrDictionary)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
      if (v84)
      {
LABEL_109:
        v85 = *this;
        v86 = (const void **)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 152) + 8) & 0xFFFFFFFFFFFFFFF8);
        v148 = v86;
        v87 = *v86;
        v88 = (void *)*((_QWORD *)*v86 + 17);
        if (v88 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          v89 = mlir::TypeID::get<mlir::ShapedType>();
          v90 = *((unsigned int *)v87 + 4);
          if (!(_DWORD)v90)
            goto LABEL_118;
          v91 = (_QWORD *)v87[1];
          v92 = &v91[2 * v90];
          do
          {
            v93 = v90 >> 1;
            v94 = &v91[2 * (v90 >> 1)];
            v96 = *v94;
            v95 = v94 + 2;
            v90 += ~(v90 >> 1);
            if (v96 < v89)
              v91 = v95;
            else
              v90 = v93;
          }
          while (v90);
          if (v91 != v92 && *v91 == v89)
            v97 = v91[1];
          else
LABEL_118:
            v97 = 0;
          AttrDictionary = (unint64_t)v86;
          v153[0] = v97;
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&AttrDictionary);
          if (mlir::Type::isF32((mlir::Type *)&OperandRange))
          {
LABEL_160:
            if (*((_DWORD *)*this + 9))
              v134 = (uint64_t)(*this - 2);
            else
              v134 = 0;
            NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v134, 0);
            return mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps0(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
          }
          v87 = *v86;
          v88 = (void *)*((_QWORD *)*v86 + 17);
        }
        if (v88 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
        {
          v98 = mlir::TypeID::get<mlir::ShapedType>();
          v99 = *((unsigned int *)v87 + 4);
          if (!(_DWORD)v99)
            goto LABEL_130;
          v100 = (_QWORD *)v87[1];
          v101 = &v100[2 * v99];
          do
          {
            v102 = v99 >> 1;
            v103 = &v100[2 * (v99 >> 1)];
            v105 = *v103;
            v104 = v103 + 2;
            v99 += ~(v99 >> 1);
            if (v105 < v98)
              v100 = v104;
            else
              v99 = v102;
          }
          while (v99);
          if (v100 != v101 && *v100 == v98)
            v106 = v100[1];
          else
LABEL_130:
            v106 = 0;
          v143 = v86;
          v144 = v106;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v143))
          {
            v107 = *v86;
            v108 = mlir::TypeID::get<mlir::ShapedType>();
            v109 = *((unsigned int *)v107 + 4);
            if (!(_DWORD)v109)
              goto LABEL_140;
            v110 = (_QWORD *)v107[1];
            v111 = &v110[2 * v109];
            do
            {
              v112 = v109 >> 1;
              v113 = &v110[2 * (v109 >> 1)];
              v115 = *v113;
              v114 = v113 + 2;
              v109 += ~(v109 >> 1);
              if (v115 < v108)
                v110 = v114;
              else
                v109 = v112;
            }
            while (v109);
            if (v110 != v111 && *v110 == v108)
              v116 = v110[1];
            else
LABEL_140:
              v116 = 0;
            v150 = v86;
            v151 = v116;
            mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v150);
            if (v117 == 2)
            {
              v118 = *v86;
              v119 = mlir::TypeID::get<mlir::ShapedType>();
              v120 = *((unsigned int *)v118 + 4);
              if (!(_DWORD)v120)
                goto LABEL_150;
              v121 = (_QWORD *)v118[1];
              v122 = &v121[2 * v120];
              do
              {
                v123 = v120 >> 1;
                v124 = &v121[2 * (v120 >> 1)];
                v126 = *v124;
                v125 = v124 + 2;
                v120 += ~(v120 >> 1);
                if (v126 < v119)
                  v121 = v125;
                else
                  v120 = v123;
              }
              while (v120);
              if (v121 != v122 && *v121 == v119)
                v127 = v121[1];
              else
LABEL_150:
                v127 = 0;
              v146 = (unint64_t)v86;
              v147 = v127;
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v146);
              if (mlir::Type::isF32((mlir::Type *)&OperandRange))
                goto LABEL_160;
            }
          }
        }
        v145 = 261;
        v143 = (const void **)"operand";
        v144 = 7;
        mlir::Operation::emitOpError(v85, &v143, (uint64_t)&AttrDictionary);
        if (AttrDictionary)
        {
          mlir::Diagnostic::operator<<((uint64_t)v153, " #");
          if (AttrDictionary)
          {
            LODWORD(v150) = 5;
            v151 = 4;
            v128 = (char *)&v150;
            v129 = v154;
            if (v155 >= v156)
            {
              v139 = v155 + 1;
              if (v154 <= (unint64_t)&v150 && v154 + 24 * v155 > (unint64_t)&v150)
              {
                v142 = (char *)&v150 - v154;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v139, 24);
                v129 = v154;
                v128 = &v142[v154];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v154, v157, v139, 24);
                v128 = (char *)&v150;
                v129 = v154;
              }
            }
            v130 = v129 + 24 * v155;
            v131 = *(_OWORD *)v128;
            *(_QWORD *)(v130 + 16) = *((_QWORD *)v128 + 2);
            *(_OWORD *)v130 = v131;
            ++v155;
            if (AttrDictionary)
              mlir::Diagnostic::operator<<((uint64_t)v153, " must be unranked tensor of 32-bit float values or 2D tensor of 32-bit float values, but got ");
          }
        }
        v132 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&AttrDictionary, (uint64_t *)&v148);
        v133 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v132);
        if (AttrDictionary)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
        std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
        if (v133)
          goto LABEL_160;
      }
    }
    return 0;
  }
LABEL_8:
  v143 = (const void **)"requires attribute 'storage_type'";
  v145 = 259;
  mlir::OpState::emitOpError(this, &v143, (uint64_t)&AttrDictionary);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
  if (AttrDictionary)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v153);
  return v9;
}

uint64_t mlir::mpsx::__mlir_ods_local_type_constraint_MPSXOps20(uint64_t *a1, const void **a2, const void **a3, uint64_t a4, unsigned int a5)
{
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v58;
  char *v59;
  const void **v60;
  uint64_t v61;
  __int16 v62;
  _QWORD v63[2];
  const void **v64;
  uint64_t OperandRange;
  const void **v66;
  uint64_t v67;
  const void **v68;
  _QWORD v69[2];
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _QWORD v73[20];

  v73[19] = *MEMORY[0x1E0C80C00];
  v64 = a2;
  v10 = *a2;
  v11 = (void *)*((_QWORD *)*a2 + 17);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    v48 = mlir::TypeID::get<mlir::ShapedType>();
    v49 = *((unsigned int *)v10 + 4);
    if (!(_DWORD)v49)
      goto LABEL_50;
    v50 = (_QWORD *)v10[1];
    v51 = &v50[2 * v49];
    do
    {
      v52 = v49 >> 1;
      v53 = &v50[2 * (v49 >> 1)];
      v55 = *v53;
      v54 = v53 + 2;
      v49 += ~(v49 >> 1);
      if (v55 < v48)
        v50 = v54;
      else
        v49 = v52;
    }
    while (v49);
    if (v50 != v51 && *v50 == v48)
      v56 = v50[1];
    else
LABEL_50:
      v56 = 0;
    v68 = a2;
    v69[0] = v56;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v68);
    if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
      || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
    {
      return 1;
    }
    v10 = *a2;
    v11 = (void *)*((_QWORD *)*a2 + 17);
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v12 = mlir::TypeID::get<mlir::ShapedType>();
    v13 = *((unsigned int *)v10 + 4);
    if (!(_DWORD)v13)
      goto LABEL_11;
    v14 = (_QWORD *)v10[1];
    v15 = &v14[2 * v13];
    do
    {
      v16 = v13 >> 1;
      v17 = &v14[2 * (v13 >> 1)];
      v19 = *v17;
      v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12)
        v14 = v18;
      else
        v13 = v16;
    }
    while (v13);
    if (v14 != v15 && *v14 == v12)
      v20 = v14[1];
    else
LABEL_11:
      v20 = 0;
    v60 = a2;
    v61 = v20;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v60))
    {
      v21 = *a2;
      v22 = mlir::TypeID::get<mlir::ShapedType>();
      v23 = *((unsigned int *)v21 + 4);
      if (!(_DWORD)v23)
        goto LABEL_21;
      v24 = (_QWORD *)v21[1];
      v25 = &v24[2 * v23];
      do
      {
        v26 = v23 >> 1;
        v27 = &v24[2 * (v23 >> 1)];
        v29 = *v27;
        v28 = v27 + 2;
        v23 += ~(v23 >> 1);
        if (v29 < v22)
          v24 = v28;
        else
          v23 = v26;
      }
      while (v23);
      if (v24 != v25 && *v24 == v22)
        v30 = v24[1];
      else
LABEL_21:
        v30 = 0;
      v66 = a2;
      v67 = v30;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v66);
      if (v31 == 1)
      {
        v32 = *a2;
        v33 = mlir::TypeID::get<mlir::ShapedType>();
        v34 = *((unsigned int *)v32 + 4);
        if (!(_DWORD)v34)
          goto LABEL_31;
        v35 = (_QWORD *)v32[1];
        v36 = &v35[2 * v34];
        do
        {
          v37 = v34 >> 1;
          v38 = &v35[2 * (v34 >> 1)];
          v40 = *v38;
          v39 = v38 + 2;
          v34 += ~(v34 >> 1);
          if (v40 < v33)
            v35 = v39;
          else
            v34 = v37;
        }
        while (v34);
        if (v35 != v36 && *v35 == v33)
          v41 = v35[1];
        else
LABEL_31:
          v41 = 0;
        v63[0] = a2;
        v63[1] = v41;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v63);
        if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 32)
          || mlir::Type::isSignedInteger((mlir::Type *)&OperandRange, 64))
        {
          return 1;
        }
      }
    }
  }
  v62 = 261;
  v60 = a3;
  v61 = a4;
  mlir::Operation::emitOpError(a1, &v60, (uint64_t)&v68);
  if (v68)
  {
    mlir::Diagnostic::operator<<((uint64_t)v69, " #");
    if (v68)
    {
      LODWORD(v66) = 5;
      v67 = a5;
      v42 = (char *)&v66;
      v43 = v70;
      if (v71 >= v72)
      {
        v58 = v71 + 1;
        if (v70 <= (unint64_t)&v66 && v70 + 24 * v71 > (unint64_t)&v66)
        {
          v59 = (char *)&v66 - v70;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
          v43 = v70;
          v42 = &v59[v70];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v73, v58, 24);
          v42 = (char *)&v66;
          v43 = v70;
        }
      }
      v44 = v43 + 24 * v71;
      v45 = *(_OWORD *)v42;
      *(_QWORD *)(v44 + 16) = *((_QWORD *)v42 + 2);
      *(_OWORD *)v44 = v45;
      ++v71;
      if (v68)
        mlir::Diagnostic::operator<<((uint64_t)v69, " must be unranked tensor of 32/64-bit signed integer values or 1D tensor of 32/64-bit signed integer values, but got ");
    }
  }
  v46 = mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v68, (uint64_t *)&v64);
  v47 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v46);
  if (v68)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v68);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v69);
  return v47;
}

void mlir::mpsx::StitchedOp::build(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v5 = *(unsigned int *)(a2 + 72);
  if (v5 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v5) = a3;
  ++*(_DWORD *)(a2 + 72);
}

uint64_t mlir::mpsx::VarHandleOp::getIdentifier(mlir::Operation **this)
{
  uint64_t MultipliersAttr;

  MultipliersAttr = mlir::anec::Tile::getMultipliersAttr(this);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&MultipliersAttr);
}

BOOL mlir::mpsx::VarHandleOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  mlir::ArrayAttr *p_AttrDictionary;
  uint64_t v4;
  uint64_t *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t NextResultAtOffset;
  const void **v11;
  __int16 v12;
  unint64_t AttrDictionary;
  _QWORD v14[24];

  v14[23] = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (*((_BYTE *)v2 + 47))
  {
    AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)v2);
    p_AttrDictionary = (mlir::ArrayAttr *)&AttrDictionary;
  }
  else
  {
    p_AttrDictionary = (mlir::ArrayAttr *)(v2 + 7);
  }
  Value = (uint64_t *)mlir::ArrayAttr::getValue(p_AttrDictionary);
  if (v4)
  {
    v6 = 16 * v4;
    while (**(_QWORD **)((*this)[6] + 96) != mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)Value))
    {
      Value += 2;
      v6 -= 16;
      if (!v6)
        goto LABEL_8;
    }
    if (mlir::anec::__mlir_ods_local_attr_constraint_ANECOps0(*this, Value[1], (const void **)"identifier", (const void **)0xA))
    {
      if (*((_DWORD *)*this + 9))
        v8 = (uint64_t)(*this - 2);
      else
        v8 = 0;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, 0);
      return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3(*this, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
LABEL_8:
    v11 = (const void **)"requires attribute 'identifier'";
    v12 = 259;
    mlir::OpState::emitOpError(this, &v11, (uint64_t)&AttrDictionary);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&AttrDictionary);
    if (AttrDictionary)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&AttrDictionary);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v14);
  }
  return v7;
}

uint64_t mlir::emitOptionalError<char const(&)[22],mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>(uint64_t a1, char a2, char *a3, uint64_t *a4, char *a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[24];

  v13[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v12);
  if (v12)
  {
    mlir::Diagnostic::operator<<((uint64_t)v13, a3);
    mlir::Diagnostic::append<mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>((uint64_t)v13, a4, a5, a6);
  }
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v12);
  if (v12)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v12);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v13);
  return v10;
}

uint64_t mlir::Diagnostic::append<mlir::ShapedType &,char const(&)[3],mlir::ShapedType &>(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  _BYTE *v16;
  _BYTE v17[24];

  v7 = v17;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v17, *a2);
  v8 = a1 + 16;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 24);
  if (v10 >= *(_DWORD *)(a1 + 28))
  {
    v14 = v10 + 1;
    v15 = v9 + 24 * v10 > (unint64_t)v17;
    if (v9 <= (unint64_t)v17 && v15)
    {
      v16 = &v17[-v9];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = &v16[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, (void *)(a1 + 32), v14, 24);
      v9 = *(_QWORD *)(a1 + 16);
      v7 = v17;
    }
  }
  v11 = v9 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v7;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[3],mlir::ShapedType &>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[3],mlir::ShapedType &>(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  _BYTE *v15;
  _BYTE v16[24];

  mlir::Diagnostic::operator<<(a1, a2);
  v5 = *a3;
  v6 = v16;
  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)v16, v5);
  v7 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 24);
  if (v9 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v9 + 1;
    v14 = v8 + 24 * v9 > (unint64_t)v16;
    if (v8 <= (unint64_t)v16 && v14)
    {
      v15 = &v16[-v8];
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v13, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v6 = &v15[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v13, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v6 = v16;
    }
  }
  v10 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v6;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::emitOptionalError<char const(&)[27],unsigned int &,char const(&)[47]>(uint64_t a1, char a2, char *a3, unsigned int *a4, char *a5)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[24];

  v11[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, a3);
    mlir::Diagnostic::append<unsigned int &,char const(&)[47]>((uint64_t)v11, a4, a5);
  }
  v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v8;
}

uint64_t mlir::emitOptionalError<char const(&)[39],char const(&)[19],long long &,char const(&)[4],unsigned int &>(uint64_t a1, char a2, char *a3, char *a4, uint64_t *a5, char *a6, unsigned int *a7)
{
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[24];

  v15[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v14);
  if (v14)
  {
    mlir::Diagnostic::operator<<((uint64_t)v15, a3);
    mlir::Diagnostic::operator<<((uint64_t)v15, a4);
    mlir::Diagnostic::append<long long &,char const(&)[4],unsigned int &>((uint64_t)v15, a5, a6, a7);
  }
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v14);
  if (v14)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v14);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v15);
  return v12;
}

uint64_t mlir::emitOptionalError<char const(&)[57],char const(&)[5]>(uint64_t a1, char a2, char *a3, char *a4)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[24];

  v9[23] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  mlir::emitError(a1, (uint64_t)&v8);
  if (v8)
  {
    mlir::Diagnostic::operator<<((uint64_t)v9, a3);
    mlir::Diagnostic::operator<<((uint64_t)v9, a4);
  }
  v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v8);
  if (v8)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v8);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v9);
  return v6;
}

uint64_t mlir::Diagnostic::append<unsigned int &,char const(&)[47]>(uint64_t a1, unsigned int *a2, char *__s)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v14;
  BOOL v15;
  char *v16;
  int v17;
  uint64_t v18;

  v7 = *(_QWORD *)(a1 + 16);
  v5 = a1 + 16;
  v6 = v7;
  v8 = *a2;
  v17 = 5;
  v18 = v8;
  v9 = *(unsigned int *)(v5 + 8);
  v10 = &v17;
  if (v9 >= *(_DWORD *)(v5 + 12))
  {
    v14 = v9 + 1;
    v15 = v6 + 24 * v9 > (unint64_t)&v17;
    if (v6 <= (unint64_t)&v17 && v15)
    {
      v16 = (char *)&v17 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v10 = (int *)&v16[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v14, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v10 = &v17;
    }
  }
  v11 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v10 + 2);
  *(_OWORD *)v11 = v12;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return a1;
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[4],unsigned int &>(uint64_t a1, uint64_t *a2, char *a3, unsigned int *a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v16;
  BOOL v17;
  char *v18;
  int v19;
  uint64_t v20;

  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  v10 = *a2;
  v19 = 2;
  v20 = v10;
  v11 = *(unsigned int *)(v7 + 8);
  v12 = &v19;
  if (v11 >= *(_DWORD *)(v7 + 12))
  {
    v16 = v11 + 1;
    v17 = v8 + 24 * v11 > (unint64_t)&v19;
    if (v8 <= (unint64_t)&v19 && v17)
    {
      v18 = (char *)&v19 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v16, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v12 = (int *)&v18[v8];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v7, (void *)(a1 + 32), v16, 24);
      v8 = *(_QWORD *)(a1 + 16);
      v12 = &v19;
    }
  }
  v13 = v8 + 24 * *(unsigned int *)(a1 + 24);
  v14 = *(_OWORD *)v12;
  *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
  *(_OWORD *)v13 = v14;
  ++*(_DWORD *)(a1 + 24);
  return mlir::Diagnostic::append<char const(&)[4],unsigned int &>(a1, a3, a4);
}

uint64_t mlir::Diagnostic::append<char const(&)[4],unsigned int &>(uint64_t a1, char *a2, unsigned int *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  int v16;
  uint64_t v17;

  mlir::Diagnostic::operator<<(a1, a2);
  v5 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v16 = 5;
  v17 = v7;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v8 + 1;
    v14 = v6 + 24 * v8 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v14)
    {
      v15 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v15[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = &v16;
    }
  }
  v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

__n128 std::__function::__func<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1E0E51350;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E0E51350;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0,std::allocator<mlir::mpsx::`anonymous namespace'::areMoreSpecializedTypes(mlir::TypeRange,mlir::TypeRange,std::function<BOOL ()(mlir::Type,mlir::Type)>)::$_0>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t result;
  uint64_t v13;
  uint64_t OperandRange;
  uint64_t v15;
  _QWORD *ArgAttrsAttr;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v4 = *a2;
  v5 = *a3;
  v6 = *(_QWORD *)(**a2 + 136);
  if (v6 == mlir::TypeID::get<mlir::mpsx::ListType>())
  {
    v7 = *(_QWORD *)(*v5 + 136);
    if (v7 == mlir::TypeID::get<mlir::mpsx::ListType>())
    {
      v21 = *(_QWORD *)(a1 + 8);
      v22 = *(_QWORD *)(*v4 + 136);
      if (v22 == mlir::TypeID::get<mlir::mpsx::ListType>())
        v23 = v4;
      else
        v23 = 0;
      v24 = v23[1];
      v25 = *(_QWORD *)(*v5 + 136);
      if (v25 == mlir::TypeID::get<mlir::mpsx::ListType>())
        v26 = v5;
      else
        v26 = 0;
      v27 = v26[1];
      v31[0] = v24;
      v30[0] = v27;
      v28 = *(_QWORD *)(v21 + 24);
      if (v28)
        return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v28 + 48))(v28, v31, v30);
      goto LABEL_24;
    }
  }
  v31[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v4);
  v31[1] = v8;
  v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v5);
  v30[0] = v9;
  v30[1] = v10;
  if (v31[0])
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
    return 0;
  v13 = *(_QWORD *)(a1 + 16);
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v31);
  v32 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v30);
  v33 = OperandRange;
  v15 = *(_QWORD *)(v13 + 24);
  if (!v15)
  {
LABEL_24:
    v29 = std::__throw_bad_function_call[abi:nn180100]();
    return mlir::RegisteredOperationName::insert<mlir::mpsx::ANEOp>(v29);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 48))(v15, &v33, &v32);
  if ((_DWORD)result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
    {
      result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v31);
      if ((_DWORD)result)
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v31);
        v18 = v17;
        v19 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
        return mlir::mps::isMoreSpecializedShape(ArgAttrsAttr, v18, v19, v20);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::ANEOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.ane", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ANEOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0DFAF40;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::ANEOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::CPUOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::CPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::CPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::CPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::CPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::CPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::CPUOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.cpu", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::CPUOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E40048;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::CPUOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::GPUOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::GPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::GPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::GPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::GPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::GPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::GPUOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.gpu", 8, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E40110;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::GPUOp::getAttributeNames(void)::attrNames, 3);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::ListPopBackOp>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  unsigned int v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ListPopBackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::OpAsmOpInterface::Trait<mlir::mpsx::ListPopBackOp>>(&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.list_pop_back", 18, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ListPopBackOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if (v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E3F878;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::RegionReturnOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.region_return", 18, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::RegionReturnOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E3FAD0;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::ReturnStitchedOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.stitched_return", 20, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E3FC60;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::mpsx::VarHandleOp>(uint64_t a1)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t result;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _OWORD v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  v9 = v11;
  v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"mpsx.var_handle", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::VarHandleOp,void>::id, (uint64_t)&v9);
  v3 = v9;
  if ((_DWORD)v10)
  {
    v4 = 16 * v10;
    v5 = (void **)((char *)v9 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v9;
  }
  if (v3 != v11)
    free(v3);
  *v2 = &off_1E0E3F6E8;
  v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::mpsx::VarHandleOp::getAttributeNames(void)::attrNames, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::foldHook()
{
  void *v0;
  uint64_t v1;
  llvm **v2;
  llvm *v4[2];
  unint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v1 = (*(uint64_t (__cdecl **)())(((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v5 & 4) != 0)
    {
      if ((v5 & 2) != 0)
        v2 = v4;
      else
        v2 = (llvm **)v4[0];
      (*(void (**)(uint64_t, void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v2, v0);
    }
    if (((&llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v4[0], v4[1]);
  }
  return v1;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  char v7;
  llvm **v8;
  llvm *v10[2];
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v11 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
      + 2;
  v6 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v10, a2);
  v7 = v11;
  if (v11 >= 8)
  {
    if ((v11 & 4) != 0)
    {
      if ((v11 & 2) != 0)
        v8 = v10;
      else
        v8 = (llvm **)v10[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v8, v2, v3, v4, v5);
    }
    if ((v7 & 2) == 0)
      llvm::deallocate_buffer(v10[0], v10[1]);
  }
  return v6;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::ANEOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  llvm **v6;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
     + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4, a5);
  v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v6 = v7;
      else
        v6 = (llvm **)v7[0];
      (*(void (**)(llvm **))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))(v6);
    }
    if ((v5 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ANEOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc(0x80uLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isDeclaration;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc(0x48uLL);
  *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeResAttrsAttr;
  v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>>((uint64_t)a1);
  v6 = malloc(0x30uLL);
  *v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType;
  v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBodyBlock;
  v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  v8 = malloc(0x10uLL);
  *v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::build;
  v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>>(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = malloc(0x38uLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != (_QWORD *)v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_9:
    v11 = 0;
  v2[5] = v11;
  v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = *(_QWORD **)a1;
  v15 = *(_QWORD *)a1 + 16 * v13;
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != (_QWORD *)v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_18:
    v20 = 0;
  v2[6] = v20;
  v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::Operation *v11;
  uint64_t FunctionTypeAttr;

  v11 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(mlir::Operation **this)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t Inputs;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  const void **v32[4];
  __int16 v33;
  int v34;
  uint64_t v35;
  uint64_t FunctionTypeAttr;
  _BYTE v37[16];
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)*this + 11);
  if ((v2 & 0x7FFFFF) != 0)
    v3 = (_QWORD *)((((unint64_t)*this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10));
  else
    v3 = 0;
  if ((_QWORD *)*v3 != v3)
  {
    FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(this);
    FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    v6 = v5;
    v7 = *(_QWORD *)((((unint64_t)*this
                     + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                     + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                     + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)*this + 10)
                   + 8);
    if (v7)
      v8 = v7 - 8;
    else
      v8 = 0;
    v10 = v8 + 48;
    v9 = *(_QWORD *)(v8 + 48);
    if (((unint64_t)(*(_QWORD *)(v10 + 8) - v9) >> 3) != v5)
    {
      v32[0] = (const void **)"entry block must have ";
      v33 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v32, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
      {
        v34 = 5;
        v35 = v6;
        v14 = &v34;
        v15 = v38;
        if (v39 >= v40)
        {
          v27 = v39 + 1;
          if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
          {
            v29 = (char *)&v34 - v38;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
            v15 = v38;
            v14 = (int *)&v29[v38];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v27, 24);
            v14 = &v34;
            v15 = v38;
          }
        }
        v16 = v15 + 24 * v39;
        v17 = *(_OWORD *)v14;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v16 = v17;
        ++v39;
        if (FunctionTypeAttr)
          mlir::Diagnostic::operator<<((uint64_t)v37, " arguments to match function signature");
      }
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
LABEL_32:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v37);
      return v13;
    }
    if (v5)
    {
      v11 = (uint64_t *)Inputs;
      v12 = 0;
      while (1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v12) + 8) & 0xFFFFFFFFFFFFFFF8;
        if (*v11 != v31)
          break;
        ++v12;
        ++v11;
        if (v5 == (_DWORD)v12)
          return 1;
      }
      v32[0] = (const void **)"type of entry block argument #";
      v33 = 259;
      mlir::OpState::emitOpError((uint64_t **)this, v32, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
      {
        v34 = 5;
        v35 = v12;
        v18 = &v34;
        v19 = v38;
        if (v39 >= v40)
        {
          v28 = v39 + 1;
          if (v38 <= (unint64_t)&v34 && v38 + 24 * v39 > (unint64_t)&v34)
          {
            v30 = (char *)&v34 - v38;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v28, 24);
            v19 = v38;
            v18 = (int *)&v30[v38];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, v41, v28, 24);
            v18 = &v34;
            v19 = v38;
          }
        }
        v20 = v19 + 24 * v39;
        v21 = *(_OWORD *)v18;
        *(_QWORD *)(v20 + 16) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v20 = v21;
        ++v39;
        if (FunctionTypeAttr)
          mlir::Diagnostic::operator<<((uint64_t)v37, 40);
      }
      v22 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v31);
      v23 = v22;
      if (*v22)
      {
        mlir::Diagnostic::operator<<((uint64_t)(v22 + 1), ") must match the type of the corresponding argument in ");
        if (*v23)
          mlir::Diagnostic::operator<<((uint64_t)(v23 + 1), "function signature(");
      }
      v24 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)v23, v11);
      v25 = (uint64_t)v24;
      if (*v24)
        mlir::Diagnostic::operator<<((uint64_t)(v24 + 1), 41);
      v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v25);
      if (FunctionTypeAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
      goto LABEL_32;
    }
  }
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeBody(uint64_t a1, mlir::SymbolRefAttr *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  return mlir::legalizeA12(a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::legalizeRegionBody(uint64_t a1, mlir::SymbolRefAttr *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return mlir::legalizeA12(a2, a3, a4, a5, a6, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  v5 = mlir::TypeAttr::get(a3);
  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    return v2 - 8;
  else
    return 0;
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::isRegionProfitable()
{
  return 1;
}

__n128 mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::ANEOp>::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  __n128 result;

  mlir::mpsx::ANEOp::build(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, __src, a18);
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t v25;
  uint64_t v26;

  v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return (void *)v26 == a2
      || v25 == (_QWORD)a2
      || v3 == (_QWORD)a2
      || v4 == (_QWORD)a2
      || v5 == (_QWORD)a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  uint64_t v10;

  mlir::OpState::printOpName(a2, a3, a4, a5);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(uint64_t *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  uint64_t *v8;

  if (mlir::OpTrait::impl::verifyOneRegion((mlir::OpTrait::impl *)a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults((mlir::OpTrait::impl *)a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors((mlir::OpTrait::impl *)a1, v4)
    && mlir::OpTrait::impl::verifyZeroOperands((mlir::OpTrait::impl *)a1, v5)
    && (v8 = a1, mlir::mpsx::ANEOp::verifyInvariantsImpl(&v8))
    && mlir::detail::verifySymbol((mlir::detail *)a1, v6))
  {
    return mlir::function_interface_impl::verifyTrait<mlir::mpsx::ANEOp>(a1) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::function_interface_impl::verifyTrait<mlir::mpsx::ANEOp>(uint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *Value;
  uint64_t v8;
  __int128 *v9;
  _BYTE *AttrData;
  size_t v11;
  _BYTE *v12;
  char *v13;
  uint64_t NameDialect;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 *v21;
  _BYTE *v22;
  size_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  const char *v39;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  const void **v48[4];
  __int16 v49;
  uint64_t ArgAttrsAttr;
  uint64_t *v51;
  __int128 v52;
  uint64_t FunctionTypeAttr;
  _BYTE v54[16];
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD v58[20];

  v58[19] = *MEMORY[0x1E0C80C00];
  v51 = a1;
  ArgAttrsAttr = mlir::mpsx::ANEOp::getArgAttrsAttr((mlir::Operation **)&v51);
  if (ArgAttrsAttr)
  {
    FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr((mlir::Operation **)&v51);
    FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
    mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
    v2 = v1;
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    v3 = v2;
    if (v4 != v2)
    {
      v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::Diagnostic::operator<<((uint64_t)v54, "expects argument attribute array to have the same number of elements as the number of function arguments, got ");
      mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
      if (!FunctionTypeAttr)
        goto LABEL_59;
      LODWORD(v52) = 5;
      *((_QWORD *)&v52 + 1) = v28;
      v29 = (char *)&v52;
      v30 = v55;
      if (v56 < v57)
        goto LABEL_50;
      v31 = v56 + 1;
      if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
        goto LABEL_81;
      goto LABEL_82;
    }
    if (v2)
    {
      LODWORD(v5) = 0;
      while (1)
      {
        v6 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
        v5 = v5;
        if (!v6)
          break;
        if (*(_UNKNOWN **)(*(_QWORD *)v6 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
          v6 = 0;
        v47 = v6;
        if (!v6)
          goto LABEL_65;
        Value = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
        v8 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
        if (Value != (__int128 *)v8)
        {
          v9 = (__int128 *)v8;
          do
          {
            v52 = *Value;
            FunctionTypeAttr = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v52);
            AttrData = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
            if (!v11 || (v12 = AttrData, (v13 = (char *)memchr(AttrData, 46, v11)) == 0) || v13 - v12 == -1)
            {
              v39 = "arguments may only have dialect attributes";
              goto LABEL_58;
            }
            NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
            if (NameDialect)
            {
              if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)NameDialect + 80))(NameDialect, v51, 0, v5, v52, *((_QWORD *)&v52 + 1)))return 0;
            }
            ++Value;
          }
          while (Value != v9);
        }
        LODWORD(v5) = v5 + 1;
        if ((_DWORD)v5 == v2)
          goto LABEL_19;
      }
      v47 = 0;
LABEL_65:
      v49 = 257;
      mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
      if (!FunctionTypeAttr)
        goto LABEL_71;
      goto LABEL_70;
    }
  }
LABEL_19:
  ArgAttrsAttr = mlir::mpsx::ANEOp::getResAttrsAttr((mlir::Operation **)&v51);
  if (!ArgAttrsAttr)
    goto LABEL_37;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr((mlir::Operation **)&v51);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
  v16 = v15;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
  v3 = v16;
  if (v17 != v16)
  {
    v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (FunctionTypeAttr)
      mlir::Diagnostic::operator<<((uint64_t)v54, "expects result attribute array to have the same number of elements as the number of function results, got ");
    mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr);
    if (!FunctionTypeAttr)
      goto LABEL_59;
    LODWORD(v52) = 5;
    *((_QWORD *)&v52 + 1) = v32;
    v29 = (char *)&v52;
    v30 = v55;
    if (v56 < v57)
    {
LABEL_50:
      v33 = v30 + 24 * v56;
      v34 = *(_OWORD *)v29;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)v29 + 2);
      *(_OWORD *)v33 = v34;
      ++v56;
      if (FunctionTypeAttr)
      {
        mlir::Diagnostic::operator<<((uint64_t)v54, ", but expected ");
        if (FunctionTypeAttr)
        {
          LODWORD(v52) = 5;
          *((_QWORD *)&v52 + 1) = v3;
          v35 = (char *)&v52;
          v36 = v55;
          if (v56 >= v57)
          {
            v44 = v56 + 1;
            if (v55 <= (unint64_t)&v52 && v55 + 24 * v56 > (unint64_t)&v52)
            {
              v46 = (char *)&v52 - v55;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v36 = v55;
              v35 = &v46[v55];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v44, 24);
              v35 = (char *)&v52;
              v36 = v55;
            }
          }
          v37 = v36 + 24 * v56;
          v38 = *(_OWORD *)v35;
          *(_QWORD *)(v37 + 16) = *((_QWORD *)v35 + 2);
          *(_OWORD *)v37 = v38;
          ++v56;
        }
      }
LABEL_59:
      v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&FunctionTypeAttr);
      if (FunctionTypeAttr)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
LABEL_61:
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v54);
      return v27;
    }
    v31 = v56 + 1;
    if (v55 > (unint64_t)&v52 || v55 + 24 * v56 <= (unint64_t)&v52)
    {
LABEL_81:
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
      v29 = (char *)&v52;
      v30 = v55;
      goto LABEL_50;
    }
LABEL_82:
    v45 = (char *)&v52 - v30;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v58, v31, 24);
    v30 = v55;
    v29 = &v45[v55];
    goto LABEL_50;
  }
  if (v16)
  {
    LODWORD(v5) = 0;
    while (1)
    {
      v18 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
      v5 = v5;
      if (!v18)
        break;
      if (*(_UNKNOWN **)(*(_QWORD *)v18 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
        v18 = 0;
      v47 = v18;
      if (!v18)
        goto LABEL_68;
      v19 = (__int128 *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v47);
      v20 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v47);
      if (v19 != (__int128 *)v20)
      {
        v21 = (__int128 *)v20;
        while (1)
        {
          v52 = *v19;
          FunctionTypeAttr = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v52);
          v22 = (_BYTE *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&FunctionTypeAttr);
          if (!v23)
            break;
          v24 = v22;
          v25 = (char *)memchr(v22, 46, v23);
          if (!v25 || v25 - v24 == -1)
            break;
          v26 = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v52);
          if (v26
            && !(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v26 + 88))(v26, v51, 0, v5, v52, *((_QWORD *)&v52 + 1)))
          {
            return 0;
          }
          if (++v19 == v21)
            goto LABEL_36;
        }
        v39 = "results may only have dialect attributes";
        goto LABEL_58;
      }
LABEL_36:
      LODWORD(v5) = v5 + 1;
      if ((_DWORD)v5 == v16)
        goto LABEL_37;
    }
    v47 = 0;
LABEL_68:
    v49 = 257;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    if (!FunctionTypeAttr)
      goto LABEL_71;
LABEL_70:
    mlir::Diagnostic::operator<<((uint64_t)v54, v41);
LABEL_71:
    *(_QWORD *)&v52 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&ArgAttrsAttr) + 8 * v5);
    v42 = (_QWORD *)mlir::InFlightDiagnostic::append<mlir::Attribute>((uint64_t)&FunctionTypeAttr, (uint64_t *)&v52);
    v43 = (uint64_t)v42;
    if (*v42)
    v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v43);
    if (FunctionTypeAttr)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&FunctionTypeAttr);
    goto LABEL_61;
  }
LABEL_37:
  if ((*((_DWORD *)v51 + 11) & 0x7FFFFF) != 1)
  {
    v39 = "expects one region";
LABEL_58:
    v48[0] = (const void **)v39;
    v49 = 259;
    mlir::OpState::emitOpError(&v51, v48, (uint64_t)&FunctionTypeAttr);
    goto LABEL_59;
  }
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody((mlir::Operation **)&v51);
}

BOOL mlir::Op<mlir::mpsx::ANEOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::CPUOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::CPUOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::CPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::CPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::CPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::CPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::CPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::CPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::CPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::CPUOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc(0x80uLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isDeclaration;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc(0x48uLL);
  *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeResAttrsAttr;
  v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>>((uint64_t)a1);
  v6 = malloc(0x30uLL);
  *v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType;
  v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBodyBlock;
  v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  v8 = malloc(0x10uLL);
  *v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::build;
  v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>>(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = malloc(0x38uLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != (_QWORD *)v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_9:
    v11 = 0;
  v2[5] = v11;
  v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = *(_QWORD **)a1;
  v15 = *(_QWORD *)a1 + 16 * v13;
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != (_QWORD *)v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_18:
    v20 = 0;
  v2[6] = v20;
  v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::Operation *v11;
  uint64_t FunctionTypeAttr;

  v11 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return mlir::minimalLegalize(a2, a3, a4, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::legalizeRegionBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return mlir::minimalLegalize(a2, a4, a5, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  v5 = mlir::TypeAttr::get(a3);
  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    return v2 - 8;
  else
    return 0;
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::isRegionProfitable()
{
  return 1;
}

__n128 mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::CPUOp>::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  __n128 result;

  mlir::mpsx::ANEOp::build(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, __src, a18);
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t v25;
  uint64_t v26;

  v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return (void *)v26 == a2
      || v25 == (_QWORD)a2
      || v3 == (_QWORD)a2
      || v4 == (_QWORD)a2
      || v5 == (_QWORD)a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  uint64_t v10;

  mlir::OpState::printOpName(a2, a3, a4, a5);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mpsx::CPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(8uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(0x18uLL);
  *v8 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::inferReturnTypes;
  v8[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::refineReturnTypes;
  v8[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.deinterleave", 17, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::DeinterleaveOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3F940;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::DeinterleaveOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::DeinterleaveOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::DeinterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::DeinterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::DeinterleaveOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.deinterleave";
  v19[1] = (char *)17;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::mpsx::DeinterleaveOp::verify((uint64_t **)&v7) != 0;
}

BOOL mlir::Op<mlir::mpsx::DeinterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.fp_to_int_clamped", 22, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::FPToIntClampedOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3FB98;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FPToIntClampedOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::FPToIntClampedOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::FPToIntClampedOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::FPToIntClampedOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.fp_to_int_clamped";
  v19[1] = (char *)22;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::FPToIntClampedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __guard v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v24;

  v24 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v3 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return (void *)v24 == a2
      || v3 == (_QWORD)a2
      || v4 == a2
      || v5 == (_QWORD)a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2
      || v12 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneResult<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::FPToIntClampedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::mpsx::FPToIntClampedOp>,mlir::OpTrait::Stitchable<mlir::mpsx::FPToIntClampedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::FPToIntClampedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::FPToIntClampedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;
  mlir::OpTrait::impl *v8;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (v8 = a1, mlir::mpsx::FPToIntClampedOp::verifyInvariantsImpl((uint64_t **)&v8)))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::mpsx::FPToIntClampedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::OpTrait::Stitchable,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::FileBackedConstantOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v11, v5, v4);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.file_backed_constant", 25, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::FileBackedConstantOp,void>::id, (uint64_t)&v11);
  v6 = v11;
  if ((_DWORD)v12)
  {
    v7 = 16 * v12;
    v8 = (void **)((char *)v11 + 8);
    do
    {
      v9 = *v8;
      v8 += 2;
      free(v9);
      v7 -= 16;
    }
    while (v7);
    v6 = v11;
  }
  if (v6 != v13)
    free(v6);
  *a1 = &off_1E0E3FEB8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::FileBackedConstantOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __guard v10;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::mpsx::FileBackedConstantOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::mpsx::FileBackedConstantOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::Stitchable>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getParseAssemblyFn(uint64_t (**a1)(mlir::AsmParser *a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::mpsx::GPUOp::parse;
  a1[3] = (uint64_t (*)(mlir::AsmParser *, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                             + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::GPUOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::OneRegion<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::GPUOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::GPUOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::GPUOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::GPUOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::GPUOp>,mlir::OpTrait::RegionOp<mlir::mpsx::GPUOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::GPUOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::GPUOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc(0x80uLL);
  *v2 = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getNameAttr;
  v2[1] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setName;
  v2[2] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getVisibility;
  v2[3] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isNested;
  v2[4] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPrivate;
  v2[5] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPublic;
  v2[6] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setVisibility;
  v2[7] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setNested;
  v2[8] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPrivate;
  v2[9] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPublic;
  v2[10] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getSymbolUses;
  v2[11] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::symbolKnownUseEmpty;
  v2[12] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::replaceAllSymbolUses;
  v2[13] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isOptionalSymbol;
  v2[14] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::canDiscardOnUseEmpty;
  v2[15] = mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isDeclaration;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc(0x48uLL);
  *v4 = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getCallableRegion;
  v4[1] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgumentTypes;
  v4[2] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResultTypes;
  v4[3] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgAttrsAttr;
  v4[4] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResAttrsAttr;
  v4[5] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setArgAttrsAttr;
  v4[6] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setResAttrsAttr;
  v4[7] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeArgAttrsAttr;
  v4[8] = mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeResAttrsAttr;
  v5 = mlir::TypeID::get<mlir::CallableOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>>((uint64_t)a1);
  v6 = malloc(0x30uLL);
  *v6 = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeBody;
  v6[1] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeRegionBody;
  v6[2] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType;
  v6[3] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionType;
  v6[4] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBody;
  v6[5] = mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBodyBlock;
  v7 = mlir::TypeID::get<mlir::TargetLegalizerInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  v8 = malloc(0x10uLL);
  *v8 = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isRegionProfitable;
  v8[1] = mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::build;
  v9 = mlir::TypeID::get<mlir::FormableRegionOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getNameAttr(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolName(this, this);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::StringAttr *Context;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v8 = 261;
  v7[0] = "sym_name";
  v7[1] = 8;
  v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v7);
  mlir::Operation::setAttr(a2, v6, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getVisibility(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isNested(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 2;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPrivate(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 1;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isPublic(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) == 0;
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setVisibility(uint64_t a1, uint64_t a2, int a3)
{
  mlir::SymbolTable::setSymbolVisibility(a2, a3);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setNested(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 2);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPrivate(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 1);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setPublic(uint64_t a1, uint64_t a2)
{
  mlir::SymbolTable::setSymbolVisibility(a2, 0);
}

void mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getSymbolUses(mlir::SymbolTable *this@<X1>, mlir::Operation *a2@<X2>, uint64_t a3@<X8>)
{
  mlir::SymbolTable::getSymbolUses(this, a2, a3);
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::symbolKnownUseEmpty(int a1, mlir::SymbolTable *this, mlir::Operation *a3)
{
  return mlir::SymbolTable::symbolKnownUseEmpty(this, a3, a3);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::replaceAllSymbolUses(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4)
{
  return mlir::SymbolTable::replaceAllSymbolUses(a2, a3, a4);
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isOptionalSymbol()
{
  return 0;
}

BOOL mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::canDiscardOnUseEmpty(int a1, mlir::SymbolTable *this)
{
  return mlir::SymbolTable::getSymbolVisibility(this, this) != 0;
}

uint64_t mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isDeclaration()
{
  return 0;
}

unint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getCallableRegion(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgumentTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getInputs((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResultTypes(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::getResults((mlir::FunctionType *)&FunctionTypeAttr);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getArgAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getArgAttrsAttr(&v3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getResAttrsAttr(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::mpsx::ANEOp::getResAttrsAttr(&v3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setArgAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), a3);
}

void mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setResAttrsAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16), a3);
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeArgAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96));
}

uint64_t mlir::detail::CallableOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::removeResAttrsAttr(uint64_t a1, uint64_t a2)
{
  return mlir::Operation::removeAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>>(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = malloc(0x38uLL);
  *v2 = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType;
  v2[1] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionTypeAttr;
  v2[2] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::cloneTypeWith;
  v2[3] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyBody;
  v2[4] = mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyType;
  v2[5] = 0;
  v2[6] = 0;
  v3 = mlir::TypeID::get<mlir::SymbolOpInterface>();
  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4)
    goto LABEL_9;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 != (_QWORD *)v6 && *v5 == v3)
    v11 = v5[1];
  else
LABEL_9:
    v11 = 0;
  v2[5] = v11;
  v12 = mlir::TypeID::get<mlir::CallableOpInterface>();
  v13 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v13)
    goto LABEL_18;
  v14 = *(_QWORD **)a1;
  v15 = *(_QWORD *)a1 + 16 * v13;
  do
  {
    v16 = v13 >> 1;
    v17 = &v14[2 * (v13 >> 1)];
    v19 = *v17;
    v18 = v17 + 2;
    v13 += ~(v13 >> 1);
    if (v19 < v12)
      v14 = v18;
    else
      v13 = v16;
  }
  while (v13);
  if (v14 != (_QWORD *)v15 && *v14 == v12)
    v20 = v14[1];
  else
LABEL_18:
    v20 = 0;
  v2[6] = v20;
  v21 = mlir::TypeID::get<mlir::FunctionOpInterface>();
  mlir::detail::InterfaceMap::insert(a1, v21, v2);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionTypeAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setAttr(a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8), a3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::cloneTypeWith(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::Operation *v11;
  uint64_t FunctionTypeAttr;

  v11 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v11);
  FunctionTypeAttr = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
  return mlir::FunctionType::clone((mlir::Attribute *)&FunctionTypeAttr, a3, a4, a5, a6);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyBody(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;

  v3 = a2;
  return mlir::detail::FunctionOpInterfaceTrait<mlir::mpsx::ANEOp>::verifyBody(&v3);
}

uint64_t mlir::detail::FunctionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::verifyType()
{
  return 1;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return mlir::minimalLegalize(a2, a3, a4, a6);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::legalizeRegionBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  return mlir::minimalLegalize(a2, a4, a5, a7);
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getFunctionType(uint64_t a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  uint64_t FunctionTypeAttr;

  v3 = a2;
  FunctionTypeAttr = mlir::mpsx::ANEOp::getFunctionTypeAttr(&v3);
  return mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&FunctionTypeAttr);
}

void mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::setFunctionType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  v5 = mlir::TypeAttr::get(a3);
  mlir::Operation::setAttr(a2, v4, v5);
}

unint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBody(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 44);
  if ((v2 & 0x7FFFFF) != 0)
    return ((a2 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(a2 + 40);
  else
    return 0;
}

uint64_t mlir::detail::TargetLegalizerInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::getBodyBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(((a2
                   + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(a2 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(a2 + 40)
                 + 8);
  if (v2)
    return v2 - 8;
  else
    return 0;
}

uint64_t mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::isRegionProfitable()
{
  return 1;
}

__n128 mlir::detail::FormableRegionOpInterfaceInterfaceTraits::Model<mlir::mpsx::GPUOp>::build(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, unint64_t a12, uint64_t a13, uint64_t a14, mlir::Operation **a15, uint64_t a16, void *__src, uint64_t a18)
{
  __n128 result;

  mlir::mpsx::ANEOp::build(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, __src, a18);
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t v25;
  uint64_t v26;

  v26 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v25 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::SymbolOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::SymbolOpInterface::Trait>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::CallableOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CallableOpInterface::Trait>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::FunctionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FunctionOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::TargetLegalizerInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::FormableRegionOpInterface::Trait>(void)::Empty>>();
  return (void *)v26 == a2
      || v25 == (_QWORD)a2
      || v3 == (_QWORD)a2
      || v4 == (_QWORD)a2
      || v5 == (_QWORD)a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t v9;
  uint64_t v10;

  mlir::OpState::printOpName(a2, a3, a4, a5);
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(a2);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v10);
  mlir::function_interface_impl::printFunctionOp(a3, a2, InterfaceFor, 0, AttrData, v9, **(_QWORD **)(*(_QWORD *)(a2 + 48) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 96) + 16));
}

BOOL mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyInvariants(uint64_t *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ANEOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::ANEOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ANEOp>,mlir::SymbolOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::CallableOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::FunctionOpInterface::Trait<mlir::mpsx::ANEOp>,mlir::OpTrait::IsIsolatedFromAbove<mlir::mpsx::ANEOp>,mlir::OpTrait::RegionOp<mlir::mpsx::ANEOp>,mlir::TargetLegalizerInterface::Trait<mlir::mpsx::ANEOp>,mlir::FormableRegionOpInterface::Trait<mlir::mpsx::ANEOp>>(a1, a2);
}

BOOL mlir::Op<mlir::mpsx::GPUOp,mlir::OpTrait::OneRegion,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::SymbolOpInterface::Trait,mlir::CallableOpInterface::Trait,mlir::FunctionOpInterface::Trait,mlir::OpTrait::IsIsolatedFromAbove,mlir::OpTrait::RegionOp,mlir::TargetLegalizerInterface::Trait,mlir::FormableRegionOpInterface::Trait>::verifyRegionInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::OpTrait::impl::verifyIsIsolatedFromAbove(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(8uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(0x18uLL);
  *v8 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::inferReturnTypes;
  v8[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::refineReturnTypes;
  v8[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.interleave", 15, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::InterleaveOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3F7B0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::InterleaveOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::InterleaveOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::InterleaveOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::InterleaveOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::InterleaveOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::InterleaveOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.interleave";
  v19[1] = (char *)15;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5))
    return 0;
  v7 = a1;
  if (!mlir::mpsx::DeinterleaveOp::verifyInvariantsImpl((uint64_t **)&v7))
    return 0;
  v7 = a1;
  return mlir::mpsx::InterleaveOp::verify((uint64_t **)&v7) != 0;
}

BOOL mlir::Op<mlir::mpsx::InterleaveOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::InferTypeOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPopBackOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::get<mlir::OpTrait::ZeroRegions<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::NResults<2u>::Impl<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ListPopBackOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ListPopBackOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ListPopBackOp>,mlir::OpAsmOpInterface::Trait<mlir::mpsx::ListPopBackOp>>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v2 = malloc(8uLL);
  *v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getEffects;
  v3 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v3, v2);
  v4 = malloc(0x18uLL);
  *v4 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::inferReturnTypes;
  v4[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::refineReturnTypes;
  v4[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes;
  v5 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v5, v4);
  v6 = malloc(8uLL);
  *v6 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v7, v6);
  v8 = malloc(0x20uLL);
  *v8 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmResultNames;
  v8[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmBlockArgumentNames;
  v8[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmBlockNames;
  v8[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getDefaultDialect;
  v9 = mlir::TypeID::get<mlir::OpAsmOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)a1, v9, v8);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v17[0] = a4;
  v17[1] = a5;
  v11 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(unsigned int *)(a11 + 8);
  if (v12 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v12 + 1, 8);
    LODWORD(v12) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v12) = v11;
  v13 = *(_DWORD *)(a11 + 12);
  v14 = (*(_DWORD *)(a11 + 8) + 1);
  *(_DWORD *)(a11 + 8) = v14;
  v15 = *(_QWORD *)(v11 + 8);
  if (v14 >= v13)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v14 + 1, 8);
    LODWORD(v14) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v14) = v15;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPopBackOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPopBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _QWORD v24[4];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  v25 = a4;
  v26 = a5;
  v24[0] = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v25, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v23) = 1;
  v24[1] = *(_QWORD *)(v24[0] + 8);
  LODWORD(v23) = 2;
  mlir::ValueRange::ValueRange(v21, (uint64_t)v24, 2uLL);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_6:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    v19[0] = "mpsx.list_pop_back";
    v19[1] = (char *)18;
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v25);
      v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
      v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
      if (v25)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
    }
    else
    {
      v16 = 0;
    }
  }
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getAsmResultNames(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t NextResultAtOffset;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2 - 16;
  if (*(_DWORD *)(a2 + 36))
    v7 = a2 - 16;
  else
    v7 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v7, 0);
  a3(a4, NextResultAtOffset, "output_list", 11);
  if (*(_DWORD *)(a2 + 36))
    v9 = v6;
  else
    v9 = 0;
  v10 = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, 1);
  v11 = mlir::detail::OpResultImpl::getNextResultAtOffset(v10, 0);
  return ((uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t))a3)(a4, v11, "element", 7);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPopBackOp>::getDefaultDialect()
{
  return "";
}

uint64_t mlir::TypeID::get<mlir::OpAsmOpInterface>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      v12 = 72;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[139];
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __guard v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2 || v10 == a2 || v11 == a2;
}

__guard mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NResults<2>::Impl<Empty>]";
      v12 = 89;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NResults<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NResults<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[232];
}

uint64_t mlir::TypeID::get<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>>()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v0 & 1) == 0)
  {
    v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      v12 = 86;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    }
  }
  return v1[138];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyNResults(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyOneOperand(a1, v4))
  {
    return 0;
  }
  v6 = a1;
  return mlir::mpsx::ListPopBackOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::mpsx::ListPopBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::NResults<2u>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait,mlir::OpAsmOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.list_push_back", 19, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ListPushBackOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3FA08;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ListPushBackOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::inferReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::inferReturnTypesEqualToFirstArgumentType(a1, a2, a3, a4, a5, a6, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPushBackOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ListPushBackOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::inferReturnTypesEqualToFirstArgumentType(a1, a2, a3, a4, a5, a6, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.list_push_back";
  v19[1] = (char *)19;
  if (!a3)
    goto LABEL_13;
  mlir::emitError(a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ListPushBackOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2))
    return 0;
  v6 = a1;
  if (!mlir::mpsx::ListPushBackOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::mpsx::ListPushBackOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::ListPushBackOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.make_list", 14, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::MakeListOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3F558;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::MakeListOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::MakeListOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::MakeListOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::MakeListOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::MakeListOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.make_list";
  v19[1] = (char *)14;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::MakeListOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::mpsx::MakeListOp::verifyInvariantsImpl((uint64_t **)&v7);
}

BOOL mlir::Op<mlir::mpsx::MakeListOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.quantized_gather", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::QuantizedGatherOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0DFAE78;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::foldHook()
{
  mlir::Operation *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedGatherOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::QuantizedGatherOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedGatherOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::QuantizedGatherOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.quantized_gather";
  v19[1] = (char *)21;
  if (!a3)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedGatherOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __guard v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_1EDC07000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EDC07000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<4>::Impl<Empty>]";
      v12 = 97;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<4u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_1EDC07000;
    }
  }
  return v1[163];
}

__guard mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      v12 = 96;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[423];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::mpsx::QuantizedGatherOp::verify(&v4);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AtLeastNOperands<4u>::Impl<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedGatherOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedGatherOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedGatherOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedGatherOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)4)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
  {
    return 0;
  }
  v6 = a1;
  return mlir::mpsx::QuantizedGatherOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::mpsx::QuantizedGatherOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<4u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.quantized_matmul", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::QuantizedMatMulOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3FD28;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::populateDefaultAttrs(int a1, mlir::mpsx::QuantizedMatMulOp *this, mlir::OperationName *a3)
{
  mlir::mpsx::QuantizedMatMulOp::populateDefaultAttrs(this, a3, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::QuantizedMatMulOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::QuantizedMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::QuantizedMatMulOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.quantized_matmul";
  v19[1] = (char *)21;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::QuantizedMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __guard v7;
  __guard v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return v3 == a2
      || v4 == a2
      || v5 == a2
      || v6 == a2
      || v7 == a2
      || v8 == a2
      || v9 == a2
      || v10 == a2
      || v11 == a2
      || v12 == a2;
}

__guard mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      v12 = 97;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[303];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::mpsx::QuantizedMatMulOp::verify((uint64_t **)&v4);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneResult<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::AttrSizedOperandSegments<mlir::mpsx::QuantizedMatMulOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::QuantizedMatMulOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::QuantizedMatMulOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::QuantizedMatMulOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)
    || !mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL))
  {
    return 0;
  }
  v6 = a1;
  return mlir::mpsx::QuantizedMatMulOp::verifyInvariantsImpl((uint64_t **)&v6);
}

BOOL mlir::Op<mlir::mpsx::QuantizedMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.rms_norm", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::RMSNormOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E401D8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::foldHook()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::hasTrait(uint64_t a1, void *a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  mlir::Operation *v5;
  mlir::OpAsmPrinter *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RMSNormOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::inferReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v15[0] = a4;
  v15[1] = a5;
  if (a5)
  {
    v11 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(v15, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v12 = mlir::Float32Type::get(a1, a2);
    v11 = mlir::UnrankedTensorType::get(v12);
  }
  v13 = *(unsigned int *)(a11 + 8);
  if (v13 >= *(_DWORD *)(a11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), v13 + 1, 8);
    LODWORD(v13) = *(_DWORD *)(a11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a11 + 8 * v13) = v11;
  ++*(_DWORD *)(a11 + 8);
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, char a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::RMSNormOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::RMSNormOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, char a3, uint64_t (**a4)(), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t v14;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v21[2];
  unint64_t v22[2];
  unint64_t v23[2];
  void *v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = 0x400000000;
  v27 = a4;
  v28 = a5;
  if (a5)
  {
    v13 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v27, 0) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v14 = mlir::Float32Type::get(a1, a2);
    v13 = mlir::UnrankedTensorType::get(v14);
  }
  *((_QWORD *)v24 + v25) = v13;
  LODWORD(v25) = v25 + 1;
  mlir::ValueRange::ValueRange(v23, (uint64_t)v24, v25);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v27 = off_1E0E4FE60;
  v29 = &v27;
  v16 = v29;
  if (v29 == &v27)
  {
    v17 = 4;
    v16 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_9;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_9:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    v21[0] = "mpsx.rms_norm";
    v21[1] = (char *)13;
    if (a3)
    {
      mlir::emitError((uint64_t)a2, (uint64_t)&v27);
      v19 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v27, "'", v21, "' op inferred type(s) ", (uint64_t)&v24, " are incompatible with return type(s) of operation ", a11);
      v18 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v19);
      if (v27)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v28);
    }
    else
    {
      v18 = 0;
    }
  }
  if (v24 != v26)
    free(v24);
  return v18;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::RMSNormOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<3u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)3))
    return 0;
  v6 = a1;
  if (!mlir::mpsx::RMSNormOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::mpsx::RMSNormOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::RMSNormOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<3u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::RegionReturnOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && (v7 = a1, mlir::mpsx::RegionReturnOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::mpsx::RegionReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ReturnStitchedOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2 || v9 == a2;
}

uint64_t mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_1EDC07000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EDC07000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<Empty>]";
      v12 = 111;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_1EDC07000;
    }
  }
  return v1[185];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::IsTerminator<mlir::mpsx::ReturnStitchedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroResults<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OneOperand<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ReturnStitchedOp>,mlir::OpTrait::IsTerminator<mlir::mpsx::ReturnStitchedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::Operation *v6;

  return mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
      && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
      && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
      && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
      && mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>::verifyTrait((uint64_t *)a1)
      && mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3((uint64_t *)a1, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)&& mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
}

uint64_t mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl<mlir::mpsx::ReturnStitchedOp>::verifyTrait(uint64_t *a1)
{
  mlir::Block *v2;
  uint64_t ParentOp;
  uint64_t v4;
  const void **v6;
  __int16 v7;
  const void **v8[4];
  __int16 v9;
  uint64_t v10;
  _QWORD v11[24];

  v11[23] = *MEMORY[0x1E0C80C00];
  v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id)
        return 1;
    }
  }
  v7 = 257;
  mlir::Operation::emitOpError(a1, &v6, (uint64_t)&v10);
  if (v10)
  {
    mlir::Diagnostic::operator<<((uint64_t)v11, "expects parent op ");
    if (v10)
    {
      mlir::Diagnostic::operator<<((uint64_t)v11, "'");
      if (v10)
      {
        v9 = 262;
        v8[0] = (const void **)"mpsx.stitched";
        v8[1] = (const void **)13;
        mlir::Diagnostic::operator<<((uint64_t)v11, v8);
        if (v10)
          mlir::Diagnostic::operator<<((uint64_t)v11, "'");
      }
    }
  }
  v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v10);
  if (v10)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v10);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v11);
  return v4;
}

uint64_t mlir::Op<mlir::mpsx::ReturnStitchedOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::mpsx::StitchedOp>::Impl,mlir::OpTrait::OpInvariants,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.sdpa", 9, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::ScaledDotProductAttentionOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3FF80;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  llvm **v10;
  llvm *v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                       + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0)
        v10 = v11;
      else
        v10 = (llvm **)v11[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0)
      llvm::deallocate_buffer(v11[0], v11[1]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::ScaledDotProductAttentionOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::inferReturnTypes(mlir::Float32Type *this, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::ScaledDotProductAttentionOp>::refineReturnTypes(mlir::Float32Type *a1, mlir::MLIRContext *a2, int a3, uint64_t a4, unint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  char *v21[2];
  unint64_t v22[2];
  unint64_t v23[2];
  void *v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t (***v29)();
  uint64_t v30;

  v11 = a3;
  v30 = *MEMORY[0x1E0C80C00];
  v24 = v26;
  v25 = 0x400000000;
  if (!mlir::mpsx::ScaledDotProductAttentionOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, v19, v20, (uint64_t)&v24))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v23, (uint64_t)v24, v25);
  mlir::ValueRange::ValueRange(v22, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v27 = off_1E0E4FE60;
  v29 = &v27;
  v14 = v29;
  if (v29 == &v27)
  {
    v15 = 4;
    v14 = &v27;
  }
  else
  {
    if (!v29)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v21[0] = "mpsx.sdpa";
  v21[1] = (char *)9;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v27);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v27, "'", v21, "' op inferred type(s) ", (uint64_t)&v24, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v27)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v28);
LABEL_14:
  if (v24 != v26)
    free(v24);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::ScaledDotProductAttentionOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  __guard v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2
      || v12 == (_QWORD)a2;
}

void *mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>()
{
  unsigned __int8 v0;
  void **p_vtable;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v0 & 1) == 0)
  {
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<5>::Impl<Empty>]";
      v12 = 90;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    }
  }
  return p_vtable[506];
}

__guard mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsElementType<Empty>]";
      v12 = 95;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
    }
  }
  return v1[501];
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::OpTrait::impl *v4;

  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(a1, a2))return 0;
  v4 = a1;
  return mlir::mpsx::ScaledDotProductAttentionOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneResult<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::NOperands<5u>::Impl<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::OpTrait::SameOperandsElementType<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::ScaledDotProductAttentionOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)5)
    && (v7 = a1, mlir::mpsx::ScaledDotProductAttentionOp::verifyInvariantsImpl((uint64_t **)&v7)))
  {
    return mlir::OpTrait::impl::verifySameOperandsElementType(a1, v5) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::Op<mlir::mpsx::ScaledDotProductAttentionOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.sparse_dense_matmul", 24, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::SparseDenseMatMulOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3FDF0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::populateDefaultAttrs(int a1, mlir::mpsx::SparseDenseMatMulOp *this, mlir::OperationName *a3)
{
  mlir::mpsx::SparseDenseMatMulOp::populateDefaultAttrs(this, a3, a3);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::SparseDenseMatMulOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::inferReturnTypes(mlir::UnknownLoc *this, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::SparseDenseMatMulOp>::refineReturnTypes(mlir::UnknownLoc *a1, mlir::MLIRContext *a2, int a3, void *a4, unint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11;
  char isCompatibleReturnTypesDefaultImpl;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v19[2];
  unint64_t v20[2];
  unint64_t v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  uint64_t (**v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t v28;

  v11 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x400000000;
  if (!mlir::mpsx::SparseDenseMatMulOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v22))
  {
LABEL_13:
    v16 = 0;
    goto LABEL_14;
  }
  mlir::ValueRange::ValueRange(v21, (uint64_t)v22, v23);
  mlir::ValueRange::ValueRange(v20, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v25 = off_1E0E4FE60;
  v27 = &v25;
  v14 = v27;
  if (v27 == &v25)
  {
    v15 = 4;
    v14 = &v25;
  }
  else
  {
    if (!v27)
      goto LABEL_7;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_7:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v16 = 1;
    goto LABEL_14;
  }
  v19[0] = "mpsx.sparse_dense_matmul";
  v19[1] = (char *)24;
  if (!v11)
    goto LABEL_13;
  mlir::emitError((uint64_t)a2, (uint64_t)&v25);
  v17 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v25, "'", v19, "' op inferred type(s) ", (uint64_t)&v22, " are incompatible with return type(s) of operation ", a11);
  v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v17);
  if (v25)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
LABEL_14:
  if (v22 != v24)
    free(v22);
  return v16;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::SparseDenseMatMulOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<5u>::Impl>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == a2
      || v6 == (_QWORD)a2
      || v7 == a2
      || v8 == (_QWORD)a2
      || v9 == (_QWORD)a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::OpTrait::impl *v6;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2))
    return 0;
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3))
    return 0;
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4))
    return 0;
  if (!mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)5))
    return 0;
  v6 = a1;
  if (!mlir::mpsx::SparseDenseMatMulOp::verifyInvariantsImpl((uint64_t **)&v6))
    return 0;
  v6 = a1;
  return mlir::mpsx::SparseDenseMatMulOp::verify(&v6) != 0;
}

BOOL mlir::Op<mlir::mpsx::SparseDenseMatMulOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<5u>::Impl,mlir::OpTrait::OpInvariants,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

_QWORD *mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::Model(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  v4 = malloc(8uLL);
  *v4 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::getEffects;
  v5 = mlir::TypeID::get<mlir::MemoryEffectOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v5, v4);
  v6 = malloc(0x18uLL);
  *v6 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::inferReturnTypes;
  v6[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::refineReturnTypes;
  v6[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes;
  v7 = mlir::TypeID::get<mlir::InferTypeOpInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v7, v6);
  v8 = malloc(8uLL);
  *v8 = mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes;
  v9 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)&v15, v9, v8);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"mpsx.stitched", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id, (uint64_t)&v15);
  v10 = v15;
  if ((_DWORD)v16)
  {
    v11 = 16 * v16;
    v12 = (void **)((char *)v15 + 8);
    do
    {
      v13 = *v12;
      v12 += 2;
      free(v13);
      v11 -= 16;
    }
    while (v11);
    v10 = v15;
  }
  if (v10 != v17)
    free(v10);
  *a1 = &off_1E0E3F620;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::hasTrait(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, void *))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::StitchedOp>::hashProperties()
{
  return 0;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  mlir::ForwardIterator *v18;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v20[0] = a9;
  v20[1] = 0;
  v11 = mlir::RegionRange::dereference_iterator(v20, 0);
  v20[0] = a11;
  v12 = *(_QWORD *)(v11 + 8);
  if (v12 != v11)
  {
    v13 = v11;
    do
    {
      v14 = v12 - 8;
      if (!v12)
        v14 = 0;
      v15 = (mlir::GenericProgramPoint *)(v14 + 32);
      v16 = *(mlir::GenericProgramPoint **)(v14 + 40);
      if (v16 != (mlir::GenericProgramPoint *)(v14 + 32))
      {
        do
        {
          v17 = (mlir::GenericProgramPoint *)*((_QWORD *)v16 + 1);
          mlir::GenericProgramPoint::~GenericProgramPoint(v16);
          mlir::detail::walk<mlir::ForwardIterator>(v18, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)v20, 1);
          v16 = v17;
        }
        while (v17 != v15);
      }
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12 != v13);
  }
  return 1;
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::StitchedOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::mpsx::StitchedOp>::refineReturnTypes(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  mlir::GenericProgramPoint *v19;
  mlir::ForwardIterator *v20;
  char isCompatibleReturnTypesDefaultImpl;
  void ***v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v27[2];
  unint64_t v28[2];
  unint64_t v29[2];
  void *v30;
  uint64_t v31;
  _BYTE v32[32];
  void **v33;
  uint64_t v34;
  void ***v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v30 = v32;
  v31 = 0x400000000;
  v33 = a9;
  v34 = 0;
  v13 = mlir::RegionRange::dereference_iterator(&v33, 0);
  v33 = &v30;
  v14 = *(_QWORD *)(v13 + 8);
  if (v14 != v13)
  {
    v15 = v13;
    do
    {
      v16 = v14 - 8;
      if (!v14)
        v16 = 0;
      v17 = (mlir::GenericProgramPoint *)(v16 + 32);
      v18 = *(mlir::GenericProgramPoint **)(v16 + 40);
      if (v18 != (mlir::GenericProgramPoint *)(v16 + 32))
      {
        do
        {
          v19 = (mlir::GenericProgramPoint *)*((_QWORD *)v18 + 1);
          mlir::GenericProgramPoint::~GenericProgramPoint(v18);
          mlir::detail::walk<mlir::ForwardIterator>(v20, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>, (uint64_t)&v33, 1);
          v18 = v19;
        }
        while (v19 != v17);
      }
      v14 = *(_QWORD *)(v14 + 8);
    }
    while (v14 != v15);
  }
  mlir::ValueRange::ValueRange(v29, (uint64_t)v30, v31);
  mlir::ValueRange::ValueRange(v28, *(_QWORD *)a11, *(unsigned int *)(a11 + 8));
  v33 = (void **)off_1E0E4FE60;
  v35 = &v33;
  v22 = v35;
  if (v35 == &v33)
  {
    v23 = 4;
    v22 = &v33;
  }
  else
  {
    if (!v35)
      goto LABEL_14;
    v23 = 5;
  }
  ((void (*)(void))(*v22)[v23])();
LABEL_14:
  if ((isCompatibleReturnTypesDefaultImpl & 1) != 0)
  {
    v24 = 1;
  }
  else
  {
    v27[0] = "mpsx.stitched";
    v27[1] = (char *)13;
    if (a3)
    {
      mlir::emitError(a2, (uint64_t)&v33);
      v25 = mlir::InFlightDiagnostic::append<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(&v33, "'", v27, "' op inferred type(s) ", (uint64_t)&v30, " are incompatible with return type(s) of operation ", a11);
      v24 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v25);
      if (v33)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v33);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v34);
    }
    else
    {
      v24 = 0;
    }
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t mlir::detail::CompatibleReturnTypesInterfaceInterfaceTraits::Model<mlir::mpsx::StitchedOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t isCompatibleReturnTypesDefaultImpl;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = off_1E0E4FE60;
  v9 = v8;
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return isCompatibleReturnTypesDefaultImpl;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = mlir::TypeID::get<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  v9 = mlir::TypeID::get<mlir::OpTrait::RegionOp<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::RegionOp>(void)::Empty>>();
  v10 = mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>>();
  v11 = mlir::TypeID::get<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>>();
  v12 = mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CompatibleReturnTypesInterface::Trait>(void)::Empty>>();
  return (void *)v3 == a2
      || v4 == (_QWORD)a2
      || v5 == (_QWORD)a2
      || v6 == (_QWORD)a2
      || v7 == (_QWORD)a2
      || v8 == (_QWORD)a2
      || v9 == a2
      || v10 == (_QWORD)a2
      || v11 == (_QWORD)a2
      || v12 == (_QWORD)a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneResult<mlir::mpsx::StitchedOp>,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroSuccessors<mlir::mpsx::StitchedOp>,mlir::OpTrait::ZeroOperands<mlir::mpsx::StitchedOp>,mlir::OpTrait::OpInvariants<mlir::mpsx::StitchedOp>,mlir::OpTrait::RegionOp<mlir::mpsx::StitchedOp>,mlir::MemoryEffectOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::InferTypeOpInterface::Trait<mlir::mpsx::StitchedOp>,mlir::CompatibleReturnTypesInterface::Trait<mlir::mpsx::StitchedOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  uint64_t v6;
  uint64_t NextResultAtOffset;

  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 9))
    v6 = (uint64_t)a1 - 16;
  else
    v6 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v6, 0);
  return mlir::placement::__mlir_ods_local_type_constraint_PlacementOps3((uint64_t *)a1, *(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"result", (const void **)6, 0) != 0;
}

BOOL mlir::Op<mlir::mpsx::StitchedOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants,mlir::OpTrait::RegionOp,mlir::MemoryEffectOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::CompatibleReturnTypesInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::~Model(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *(_QWORD *)a1 = off_1E0E2B520;
  v2 = *(void ***)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48))
    free(v2);
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::~Model(_QWORD *__p)
{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  *__p = off_1E0E2B520;
  v2 = (void **)__p[4];
  v3 = *((unsigned int *)__p + 10);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = v2 + 1;
    do
    {
      v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    v2 = (void **)__p[4];
  }
  if (v2 != __p + 6)
    free(v2);
  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::foldHook()
{
  uint64_t v0;
  llvm *v2;
  void *v3;

  v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  char v4;
  llvm **v5;
  llvm *v7[2];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0)
        v5 = v7;
      else
        v5 = (llvm **)v7[0];
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::OpState::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm **v11;
  llvm *v12[2];
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                   + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4, a5);
  v10 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0)
        v11 = v12;
      else
        v11 = (llvm **)v12[0];
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v6, v7, v8, v9);
    }
    if ((v10 & 2) == 0)
      llvm::deallocate_buffer(v12[0], v12[1]);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v5[2])(uint64_t);
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants;
  v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0)
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::MLIRContext *Context;
  void *v8[2];
  _QWORD v9[10];

  v9[9] = *MEMORY[0x1E0C80C00];
  mlir::NamedAttrList::NamedAttrList(v8, *(_QWORD *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(_QWORD *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9)
    free(v8[0]);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v7;
  _QWORD v8[24];

  v8[23] = *MEMORY[0x1E0C80C00];
  a5(&v7, a6);
  if (v7)
  {
    mlir::Diagnostic::operator<<((uint64_t)v8, "this operation does not support properties");
    if (v7)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v7);
  }
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v8);
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::mpsx::VarHandleOp>::hashProperties()
{
  return 0;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = mlir::TypeID::get<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>>();
  v4 = mlir::TypeID::get<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>>();
  v5 = mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl>(void)::Empty>>();
  v6 = mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>>();
  v7 = mlir::TypeID::get<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>>();
  v8 = mlir::TypeID::get<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>>();
  return v3 == a2 || v4 == a2 || v5 == a2 || v6 == a2 || v7 == a2 || v8 == a2;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::OpState::print(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  mlir::Operation *v3;
  mlir::Operation *v4;
  mlir::Operation *v5;
  mlir::OpTrait::impl *v7;

  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v5))
  {
    return 0;
  }
  v7 = a1;
  return mlir::mpsx::VarHandleOp::verifyInvariantsImpl((uint64_t **)&v7);
}

uint64_t mlir::Op<mlir::mpsx::VarHandleOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::TensorType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::OpInvariants>::verifyRegionInvariants()
{
  return 1;
}

void mlir::mpsx::MPSXOpFolderDialectInterface::~MPSXOpFolderDialectInterface(mlir::mpsx::MPSXOpFolderDialectInterface *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t mlir::DialectFoldInterface::fold()
{
  return 0;
}

BOOL mlir::mpsx::MPSXOpFolderDialectInterface::shouldMaterializeInto(mlir::mpsx::MPSXOpFolderDialectInterface *this, mlir::Region *a2)
{
  return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 2) + 48) + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::mpsx::StitchedOp,void>::id;
}

uint64_t *mlir::Dialect::addType<mlir::mpsx::ListType>(uint64_t a1)
{
  __guard v2;
  char v3;
  llvm **v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  mlir::MLIRContext *v9;
  __guard v10;
  uint64_t *TypeUniquer;
  uint64_t v12;
  _BYTE v14[8];
  void *v15;
  unsigned int v16;
  uint64_t v17;
  llvm *v18[2];
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = mlir::TypeID::get<mlir::mpsx::ListType>();
  mlir::AbstractType::get<mlir::mpsx::ListType>(a1, (uint64_t)v14);
  mlir::Dialect::addType(a1, v2, (uint64_t)v14);
  v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0)
        v4 = v18;
      else
        v4 = (llvm **)v18[0];
      (*(void (**)(llvm **))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))(v4);
    }
    if ((v3 & 2) == 0)
      llvm::deallocate_buffer(v18[0], v18[1]);
  }
  v5 = (uint64_t *)v15;
  if (v16)
  {
    v6 = 16 * v16;
    v7 = (void **)((char *)v15 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = (uint64_t *)v15;
  }
  if (v5 != &v17)
    free(v5);
  v9 = *(mlir::MLIRContext **)(a1 + 32);
  v10 = mlir::TypeID::get<mlir::mpsx::ListType>();
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v9);
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, v10, 0, v12);
}

void mlir::AbstractType::get<mlir::mpsx::ListType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __guard v4;
  _OWORD *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  char v9;
  char v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  _OWORD v14[3];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(v14, 0, sizeof(v14));
  v12 = v14;
  v13 = 0x300000000;
  v4 = mlir::TypeID::get<mlir::mpsx::ListType>();
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = a2 + 24;
  *(_QWORD *)(a2 + 16) = 0x300000000;
  if ((_DWORD)v13)
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v12);
  *(_QWORD *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(_QWORD *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::mpsx::ListType,mlir::Type,mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v11;
  }
  *(_QWORD *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSD_6detail29TypeWithStaticSubtypesStorageILj1EEENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(_QWORD *)(a2 + 112) = &v10;
  *(_QWORD *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSC_6detail29TypeWithStaticSubtypesStorageILj1EEENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(_QWORD *)(a2 + 128) = &v9;
  *(_QWORD *)(a2 + 136) = v4;
  v5 = v12;
  if ((_DWORD)v13)
  {
    v6 = 16 * v13;
    v7 = (void **)((char *)v12 + 8);
    do
    {
      v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    v5 = v12;
  }
  if (v5 != v14)
    free(v5);
}

uint64_t mlir::detail::StorageUserBase<mlir::mpsx::ListType,mlir::Type,mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_4mpsx8ListTypeES2_NSC_6detail29TypeWithStaticSubtypesStorageILj1EEENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const double *v21;
  double *v22;
  uint64_t v23;
  const double *v24;
  double *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  const double *v30;
  double *v31;
  uint64_t v32;
  const double *v33;
  double *v34;
  _QWORD *v35;
  float64x2x2_t v37;
  float64x2x2_t v38;
  float64x2x2_t v39;
  float64x2x2_t v40;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(_QWORD *)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_38;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v11 = *(_QWORD **)a1;
        v12 = (v8 - 1) & 0xFFFFFFFFFFFFFFFLL;
        if (v12 >= 9)
        {
          v17 = (unint64_t)v11 >= v4 + 16 * v8 || v4 >= (unint64_t)&v11[2 * v8];
          v13 = *(_QWORD **)a2;
          if (v17)
          {
            v18 = v12 + 1;
            v19 = 2 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
            v20 = &v11[v19];
            v13 = (_QWORD *)(v4 + v19 * 8);
            v21 = (const double *)(v4 + 32);
            v22 = (double *)(v11 + 4);
            v23 = v18 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              v24 = v21 - 4;
              v37 = vld2q_f64(v24);
              v39 = vld2q_f64(v21);
              v25 = v22 - 4;
              vst2q_f64(v25, v37);
              vst2q_f64(v22, v39);
              v21 += 8;
              v22 += 8;
              v23 -= 4;
            }
            while (v23);
            v11 = v20;
            if (v18 == (v18 & 0x1FFFFFFFFFFFFFFCLL))
              goto LABEL_37;
          }
        }
        else
        {
          v13 = *(_QWORD **)a2;
        }
        v26 = (_QWORD *)(v4 + 16 * v8);
        do
        {
          *v11 = *v13;
          v11[1] = v13[1];
          v13 += 2;
          v11 += 2;
        }
        while (v13 != v26);
      }
      goto LABEL_37;
    }
    if (*(_DWORD *)(a1 + 12) < v8)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 16);
      v9 = 0;
      v10 = *v7;
      if (!*v7)
        goto LABEL_37;
      goto LABEL_36;
    }
    if (!(_DWORD)v9)
    {
      v9 = 0;
      goto LABEL_35;
    }
    v14 = *(_QWORD **)a1;
    v15 = (v9 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v15 >= 9)
    {
      if ((unint64_t)v14 >= v4 + 16 * v9 || (v16 = *(_QWORD **)a2, v4 >= (unint64_t)&v14[2 * v9]))
      {
        v27 = v15 + 1;
        v28 = 2 * (v27 & 0x1FFFFFFFFFFFFFFCLL);
        v29 = &v14[v28];
        v16 = (_QWORD *)(v4 + v28 * 8);
        v30 = (const double *)(v4 + 32);
        v31 = (double *)(v14 + 4);
        v32 = v27 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = v30 - 4;
          v38 = vld2q_f64(v33);
          v40 = vld2q_f64(v30);
          v34 = v31 - 4;
          vst2q_f64(v34, v38);
          vst2q_f64(v31, v40);
          v30 += 8;
          v31 += 8;
          v32 -= 4;
        }
        while (v32);
        v14 = v29;
        if (v27 == (v27 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          v10 = v8;
          if (v9 != v8)
LABEL_36:
            memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
LABEL_37:
          *(_DWORD *)(a1 + 8) = v8;
LABEL_38:
          *v7 = 0;
          return a1;
        }
      }
    }
    else
    {
      v16 = *(_QWORD **)a2;
    }
    v35 = (_QWORD *)(v4 + 16 * v9);
    do
    {
      *v14 = *v16;
      v14[1] = v16[1];
      v16 += 2;
      v14 += 2;
    }
    while (v16 != v35);
    goto LABEL_35;
  }
  return a1;
}

BOOL mlir::mpsx::`anonymous namespace'::qimpl::verifyAffineQuant(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t ElementTypeOrSelf;
  const char *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  const void **v22;
  __int16 v23;
  _QWORD *v24[2];
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD v28[24];

  v28[23] = *MEMORY[0x1E0C80C00];
  v25 = a1;
  v26 = a6;
  v24[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8));
  v24[1] = v11;
  if (!v24[0] || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v24))
    return 1;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v24[0]);
  if (ElementTypeOrSelf == mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF8)))
  {
    v21 = 0;
    if ((a6 & 0xFF00000000) != 0)
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24);
      if ((int)a6 < 0)
        v15 = v14;
      else
        v15 = 0;
      v16 = v15 + a6;
      if ((v16 & 0x80000000) != 0
        || (v17 = v16, mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24), v17 > v18))
      {
        goto LABEL_12;
      }
      v21 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v24) + 8 * v17);
    }
    v27 = &v26;
    v28[0] = &v25;
    v28[1] = &v21;
    v28[2] = v24;
  }
  v13 = "input and zeroPoint types must match";
LABEL_12:
  v22 = (const void **)v13;
  v23 = 259;
  mlir::Operation::emitOpError(a1, &v22, (uint64_t)&v27);
  v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v27);
  if (v27)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v27);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v28);
  return v19;
}

BOOL mlir::mpsx::QuantizedMatMulOp::isWeightsQuantized(mlir::Operation **this)
{
  mlir::Operation *v2;
  unint64_t ODSOperandIndexAndLength;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  mlir::Operation *v7;
  unint64_t v8;
  uint64_t v9;
  mlir::Operation *v11;
  unint64_t v12;
  uint64_t v13;
  mlir::Operation *v14;

  v14 = *this;
  v2 = v14;
  ODSOperandIndexAndLength = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 5);
  if ((*((_BYTE *)v2 + 46) & 0x80) != 0)
    v4 = *((_QWORD *)v2 + 9);
  else
    v4 = 0;
  if (HIDWORD(ODSOperandIndexAndLength) + (_DWORD)ODSOperandIndexAndLength != (unint64_t)ODSOperandIndexAndLength
    && *(_QWORD *)(v4 + 32 * ODSOperandIndexAndLength + 24))
  {
    v5 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 9);
    v6 = (*((_BYTE *)v2 + 46) & 0x80) != 0 ? *((_QWORD *)v2 + 9) : 0;
    if (HIDWORD(v5) + (_DWORD)v5 == (unint64_t)v5
      || !*(_QWORD *)(v6 + 32 * v5 + 24))
    {
      return 1;
    }
  }
  v14 = *this;
  v7 = v14;
  v8 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 8);
  v9 = (*((_BYTE *)v7 + 46) & 0x80) != 0 ? *((_QWORD *)v7 + 9) : 0;
  if (HIDWORD(v8) + (_DWORD)v8 != (unint64_t)v8 && *(_QWORD *)(v9 + 32 * v8 + 24))
    return 1;
  v11 = *this;
  v14 = v11;
  v12 = mlir::mpsx::QuantizedMatMulOp::getODSOperandIndexAndLength(&v14, 9);
  if ((*((_BYTE *)v11 + 46) & 0x80) != 0)
    v13 = *((_QWORD *)v11 + 9);
  else
    v13 = 0;
  return HIDWORD(v12) + (_DWORD)v12 != (unint64_t)v12
      && *(_QWORD *)(v13 + 32 * v12 + 24) != 0;
}

uint64_t mlir::mpsx::`anonymous namespace'::qimpl::verifyAffineQuant(mlir::Operation *,mlir::Value,mlir::Value,mlir::Value,mlir::Value,std::optional<int>)::$_0::operator()(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  int *v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  int *v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  int *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  const void **v58[4];
  __int16 v59;
  _QWORD v60[2];
  int v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[16];
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _QWORD v68[20];

  v68[19] = *MEMORY[0x1E0C80C00];
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v60[0] = v5;
  v60[1] = v6;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 4))
  {
    if (v5 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
      if (v21)
      {
        v22 = 8 * v21;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v22 -= 8;
          if (!v22)
            goto LABEL_30;
        }
        return 1;
      }
LABEL_30:
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
      if (v23 > 1)
      {
        if (mlir::CallOpInterface::getArgOperands(*(mlir::CallOpInterface **)(a1 + 24)))
        {
          mlir::CallableOpInterface::getArgAttrsAttr(*(mlir::CallableOpInterface **)(a1 + 24));
          v28 = v27;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
          if (v28 != v29)
          {
            v51 = **(uint64_t ***)(a1 + 8);
            v59 = 257;
            mlir::Operation::emitOpError(v51, v58, (uint64_t)&v63);
            if (!v63)
              goto LABEL_65;
            mlir::Diagnostic::operator<<((uint64_t)v64, "ND ");
            if (!v63)
              goto LABEL_65;
            mlir::Diagnostic::operator<<((uint64_t)v64, a2);
            if (!v63)
              goto LABEL_65;
            v19 = " rank differs from input rank";
            goto LABEL_64;
          }
        }
        mlir::CallableOpInterface::getArgAttrsAttr(*(mlir::CallableOpInterface **)(a1 + 24));
        if (v30)
        {
          v31 = 0;
          while (1)
          {
            v34 = 8 * v31;
            v35 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr(*(mlir::CallableOpInterface **)(a1 + 24)) + v34);
            v36 = *(_QWORD *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60) + v34);
            v37 = v35 == 0x8000000000000000 || v36 == 0x8000000000000000;
            if (!v37 && v35 % v36)
              break;
            ++v31;
            mlir::CallableOpInterface::getArgAttrsAttr(*(mlir::CallableOpInterface **)(a1 + 24));
            v10 = 1;
            if (v31 >= v33)
              return v10;
          }
          v38 = **(uint64_t ***)(a1 + 8);
          v59 = 257;
          mlir::Operation::emitOpError(v38, v58, (uint64_t)&v63);
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, " shape not compatible with input for axis ");
          if (!v63)
            goto LABEL_8;
          v61 = 5;
          v62 = v31;
          v39 = &v61;
          v40 = v65;
          if (v66 >= v67)
          {
            v52 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              v55 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
              v40 = v65;
              v39 = (int *)&v55[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v52, 24);
              v39 = &v61;
              v40 = v65;
            }
          }
          v41 = v40 + 24 * v66;
          v42 = *(_OWORD *)v39;
          *(_QWORD *)(v41 + 16) = *((_QWORD *)v39 + 2);
          *(_OWORD *)v41 = v42;
          ++v66;
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, ": ");
          if (!v63)
            goto LABEL_8;
          v61 = 2;
          v62 = v35;
          v43 = &v61;
          v44 = v65;
          if (v66 >= v67)
          {
            v53 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              v56 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v53, 24);
              v44 = v65;
              v43 = (int *)&v56[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v53, 24);
              v43 = &v61;
              v44 = v65;
            }
          }
          v45 = v44 + 24 * v66;
          v46 = *(_OWORD *)v43;
          *(_QWORD *)(v45 + 16) = *((_QWORD *)v43 + 2);
          *(_OWORD *)v45 = v46;
          ++v66;
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, " % ");
          if (!v63)
            goto LABEL_8;
          v61 = 2;
          v62 = v36;
          v47 = &v61;
          v48 = v65;
          if (v66 >= v67)
          {
            v54 = v66 + 1;
            if (v65 <= (unint64_t)&v61 && v65 + 24 * v66 > (unint64_t)&v61)
            {
              v57 = (char *)&v61 - v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              v48 = v65;
              v47 = (int *)&v57[v65];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v68, v54, 24);
              v47 = &v61;
              v48 = v65;
            }
          }
          v49 = v48 + 24 * v66;
          v50 = *(_OWORD *)v47;
          *(_QWORD *)(v49 + 16) = *((_QWORD *)v47 + 2);
          *(_OWORD *)v49 = v50;
          ++v66;
          if (!v63)
            goto LABEL_8;
          v9 = " != 0";
          goto LABEL_7;
        }
      }
      else
      {
        v24 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
        if (mlir::ShapedType::getNumElements(v24, v25) != 1)
        {
          v26 = **(uint64_t ***)(a1 + 8);
          v59 = 257;
          mlir::Operation::emitOpError(v26, v58, (uint64_t)&v63);
          if (!v63)
            goto LABEL_8;
          if (!v63)
            goto LABEL_8;
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63)
            goto LABEL_8;
          goto LABEL_7;
        }
      }
    }
    return 1;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60)
    || (mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60), v7 < 2))
  {
    if (v60[0]
      && **(_QWORD **)(a1 + 16) != 0x8000000000000000
      && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60))
    {
      v11 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
      if (v12)
      {
        v13 = 8 * v12;
        while (*v11 != 0x8000000000000000)
        {
          ++v11;
          v13 -= 8;
          if (!v13)
            goto LABEL_18;
        }
        return 1;
      }
LABEL_18:
      v14 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
      if (mlir::ShapedType::getNumElements(v14, v15) != **(_QWORD **)(a1 + 16))
      {
        v16 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
        if (mlir::ShapedType::getNumElements(v16, v17) != 1)
        {
          v18 = **(uint64_t ***)(a1 + 8);
          v59 = 257;
          mlir::Operation::emitOpError(v18, v58, (uint64_t)&v63);
          if (!v63)
            goto LABEL_65;
          mlir::Diagnostic::operator<<((uint64_t)v64, "input and ");
          if (!v63)
            goto LABEL_65;
          mlir::Diagnostic::operator<<((uint64_t)v64, a2);
          if (!v63)
            goto LABEL_65;
LABEL_64:
          mlir::Diagnostic::operator<<((uint64_t)v64, v19);
LABEL_65:
          v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v63);
          mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v63);
          return v10;
        }
      }
    }
    return 1;
  }
  v8 = **(uint64_t ***)(a1 + 8);
  v59 = 257;
  mlir::Operation::emitOpError(v8, v58, (uint64_t)&v63);
  if (!v63)
    goto LABEL_8;
  mlir::Diagnostic::operator<<((uint64_t)v64, a2);
  if (!v63)
    goto LABEL_8;
  v9 = " rank must be 0 or 1";
LABEL_7:
  mlir::Diagnostic::operator<<((uint64_t)v64, v9);
LABEL_8:
  v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v63);
  if (v63)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v63);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v64);
  return v10;
}

_QWORD *std::__function::__func<mlir::mpsx::`anonymous namespace'::$_1,std::allocator<mlir::mpsx::`anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4FE60;
  return result;
}

void std::__function::__func<mlir::mpsx::`anonymous namespace'::$_1,std::allocator<mlir::mpsx::`anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4FE60;
}

BOOL std::__function::__func<mlir::mpsx::`anonymous namespace'::$_1,std::allocator<mlir::mpsx::`anonymous namespace'::$_1>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<mlir::Type &>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v3;

  v3 = **(_QWORD **)(a1 + 8);
  return mlir::Type::print((llvm::raw_ostream *)&v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(llvm::Twine const&)>::callback_fn<mlir::mpsx::SparseDenseMatMulOp::verify(void)::$_0>(uint64_t ***a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  mlir::OpState::emitOpError(*a1, a2, a3);
}

uint64_t mlir::Diagnostic::append<long long &,char const(&)[47],char const(&)[9],long long &>(uint64_t a1, uint64_t *a2, char *__s, char *a4, uint64_t *a5)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v18;
  BOOL v19;
  char *v20;
  int v21;
  uint64_t v22;

  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *a2;
  v21 = 2;
  v22 = v12;
  v13 = *(unsigned int *)(v9 + 8);
  v14 = &v21;
  if (v13 >= *(_DWORD *)(v9 + 12))
  {
    v18 = v13 + 1;
    v19 = v10 + 24 * v13 > (unint64_t)&v21;
    if (v10 <= (unint64_t)&v21 && v19)
    {
      v20 = (char *)&v21 - v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v14 = (int *)&v20[v10];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(a1 + 32), v18, 24);
      v10 = *(_QWORD *)(a1 + 16);
      v14 = &v21;
    }
  }
  v15 = v10 + 24 * *(unsigned int *)(a1 + 24);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 + 2);
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 24);
  mlir::Diagnostic::operator<<(a1, __s);
  return mlir::Diagnostic::append<char const(&)[9],long long &>(a1, a4, a5);
}

uint64_t mlir::Diagnostic::append<char const(&)[9],long long &>(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  int v16;
  uint64_t v17;

  mlir::Diagnostic::operator<<(a1, a2);
  v5 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *a3;
  v16 = 2;
  v17 = v7;
  v8 = *(unsigned int *)(a1 + 24);
  v9 = &v16;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v8 + 1;
    v14 = v6 + 24 * v8 > (unint64_t)&v16;
    if (v6 <= (unint64_t)&v16 && v14)
    {
      v15 = (char *)&v16 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = (int *)&v15[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      v6 = *(_QWORD *)(a1 + 16);
      v9 = &v16;
    }
  }
  v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v11;
  int v12;
  unint64_t v13;
  unsigned __int8 **v15;
  _QWORD v16[2];
  uint64_t *v17;
  uint64_t v18;
  _QWORD v19[2];

  v5 = a4;
  v19[0] = a2;
  v19[1] = a3;
  v18 = *a5;
  v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
  if ((v6 & 1) == 0)
  {
    v15 = a1;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    v12 = v11;
    v5 = a4;
    a1 = v15;
    if (v12)
    {
      v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v13 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v5 = a4;
      a1 = v15;
    }
  }
  v8 = v7[19];
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (8 * ((v18 >> 4) ^ (v18 >> 9)) + 8));
  v16[0] = &v18;
  v16[1] = v19;
  v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(_QWORD **a1, uint64_t a2)
{
  return **a1 == *(_QWORD *)(a2 + 8);
}

_QWORD *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> * mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(llvm::function_ref<void ()(mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u> *)>,mlir::TypeID,std::array<mlir::Type,1ul> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>::construct(a2, *(_QWORD **)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)v4)
    (*(void (**)(_QWORD, _QWORD *))v4)(*(_QWORD *)(v4 + 8), v3);
  return v3;
}

_QWORD *mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>::construct(uint64_t a1, _QWORD *a2)
{
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  char *buffer;
  uint64_t v8;
  _QWORD *result;

  *(_QWORD *)(a1 + 80) += 16;
  if (*(_QWORD *)a1)
    v4 = ((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(_QWORD *)a1 + 16 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E)
      LOBYTE(v5) = 30;
    v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = &buffer[v6];
    result = (_QWORD *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    result = (_QWORD *)((*(_QWORD *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(_QWORD *)a1 = result + 2;
  *result = 0;
  result[1] = *a2;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = mlir::AbstractType::lookup(*(_QWORD *)a1, **(_QWORD **)(a1 + 8));
  *a2 = result;
  return result;
}

_QWORD *std::__function::__func<mlir::mpsx::`anonymous namespace'::$_4,std::allocator<mlir::mpsx::`anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0DFB738;
  return result;
}

void std::__function::__func<mlir::mpsx::`anonymous namespace'::$_4,std::allocator<mlir::mpsx::`anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0DFB738;
}

BOOL std::__function::__func<mlir::mpsx::`anonymous namespace'::$_4,std::allocator<mlir::mpsx::`anonymous namespace'::$_4>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::ANEOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::GPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mpsx::CPUOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

void llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::mpsx::StitchedOp::inferReturnTypes(mlir::MLIRContext *,std::optional<mlir::Location>,mlir::ValueRange,mlir::DictionaryAttr,mlir::OpaqueProperties,mlir::RegionRange,llvm::SmallVectorImpl<mlir::Type> &)::$_0>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2
    && *(_UNKNOWN **)(*(_QWORD *)(a2 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::ReturnStitchedOp,void>::id)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v3 = *a1;
    v4 = *(unsigned int *)(*a1 + 8);
    if (v4 >= *(_DWORD *)(*a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(*a1, (void *)(v3 + 16), v4 + 1, 8);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
    ++*(_DWORD *)(v3 + 8);
  }
}

BOOL mlir::mpsx::isMPSXListElementType(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t ElementType;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 136);
  if (v2 == mlir::TypeID::get<mlir::mpsx::ListType>())
    return 1;
  if (!a1)
    return 0;
  v3 = *(void **)(*(_QWORD *)a1 + 136);
  v4 = v3 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || v3 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v5 = v4 ? a1 : 0;
  v8 = v5;
  if (!v4)
    return 0;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&v8);
  return mlir::Type::isIntOrFloat((mlir::Type *)&ElementType);
}

uint64_t mlir::mpsx::MPSXDialect::parseType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  mlir::MLIRContext *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v17;
  __guard v18;
  unsigned __int8 **TypeUniquer;
  _DWORD *v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD v31[3];
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if (!(*(unsigned __int8 (**)(uint64_t, _DWORD **))(*(_QWORD *)a2 + 384))(a2, &v20))
  {
    v22[0] = "expected valid keyword";
    v23 = 259;
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(&v30, a2, v4, v22);
    v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
    if (v30)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v31);
    if (!v5)
      return 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v6);
  if (v21 != 4)
  {
    v8 = v20;
    goto LABEL_19;
  }
  v8 = v20;
  if (*v20 != 1953720684)
  {
LABEL_19:
    v32 = 1283;
    v30 = "unknown MPS type: ";
    v31[1] = v8;
    v31[2] = v21;
    mlir::emitError(v7, (uint64_t)&v30, (uint64_t)&v25);
    if (v25)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v25);
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v26);
    return 0;
  }
  v9 = *(mlir::MLIRContext **)(a1 + 32);
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2))
    return 0;
  v27 = &v29;
  v28 = 0x100000000;
  do
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v24 = 0;
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 504))(a2, &v24))
      goto LABEL_28;
    v11 = v24;
    if (!v24)
    {
      v22[0] = "invalid kind of type specified";
      v23 = 259;
      (*(void (**)(const char **__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(&v30, a2, v10, v22);
      v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
      if (v30)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v31);
      if (!v12)
        goto LABEL_28;
    }
    v13 = v28;
    if (v28 >= (unint64_t)HIDWORD(v28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, &v29, v28 + 1, 8);
      v13 = v28;
    }
    *((_QWORD *)v27 + v13) = v11;
    LODWORD(v28) = v28 + 1;
  }
  while ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2));
  if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2))
    v17 = (_DWORD)v28 == 1;
  else
    v17 = 0;
  if (!v17)
  {
LABEL_28:
    v14 = 0;
    goto LABEL_30;
  }
  v24 = *(_QWORD *)v27;
  v18 = mlir::TypeID::get<mlir::mpsx::ListType>();
  v22[0] = v9;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v9);
  v30 = (const char *)v18;
  v31[0] = v22;
  v14 = mlir::StorageUniquer::get<mlir::mpsx::detail::TypeWithStaticSubtypesStorage<1u>,std::array<mlir::Type,1ul> &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir4mpsx6detail29TypeWithStaticSubtypesStorageILj1EEEEE11callback_fnIZNS1_6detail11TypeUniquer13getWithTypeIDINS2_8ListTypeEJRNSt3__15arrayINS1_4TypeELm1EEEEEENSE_9enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS6_, (uint64_t)&v30, v18, &v24);
LABEL_30:
  if (v27 != &v29)
    free(v27);
  return v14;
}

llvm::raw_ostream *mlir::mpsx::MPSXDialect::printType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *result;
  _BYTE *v11;

  v4 = a2;
  if (a2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a2 + 136);
    if (v5 != mlir::TypeID::get<mlir::mpsx::ListType>())
      v4 = 0;
  }
  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v7 = (_DWORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 3uLL)
  {
    *v7 = 1953720684;
    *((_QWORD *)v6 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v6, "list", 4uLL);
  }
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "<", 1uLL);
  }
  else
  {
    *v9 = 60;
    ++*((_QWORD *)v8 + 4);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, *(_QWORD *)(v4 + 8));
  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v11 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v11)
    return llvm::raw_ostream::write(result, ">", 1uLL);
  *v11 = 62;
  ++*((_QWORD *)result + 4);
  return result;
}

BOOL mlir::impl::foldCastInterfaceOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const double *v17;
  int8x16_t *v18;
  unint64_t v19;
  const double *v20;
  unsigned __int128 v21;
  unsigned __int128 v22;
  int8x16_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27[4];
  uint64_t v28[4];
  uint64_t v29[2];
  uint64_t v30;
  unint64_t v31;

  if ((*(_BYTE *)(a1 + 46) & 0x80) == 0)
    return 0;
  v4 = *(unsigned int *)(a1 + 68);
  v30 = *(_QWORD *)(a1 + 72);
  v31 = v4;
  if (!(_DWORD)v4)
    return 0;
  v6 = *(unsigned int *)(a1 + 36);
  v7 = a1 - 16;
  if (!(_DWORD)v6)
    v7 = 0;
  v29[0] = v7;
  v29[1] = v6;
  mlir::OperandRange::getTypes(&v30, v28);
  mlir::OperandRange::getTypes(v29, v27);
  result = mlir::ValueTypeRange<mlir::OperandRange>::operator==<mlir::ValueTypeRange<mlir::ResultRange>>(v28, v27);
  if (result)
  {
    v10 = v30;
    v9 = v31;
    v11 = *(unsigned int *)(a4 + 8);
    if (v31 + v11 > *(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v31 + v11, 8);
      LODWORD(v11) = *(_DWORD *)(a4 + 8);
    }
    if (v9)
    {
      v12 = *(_QWORD *)a4;
      v13 = (uint64_t *)(*(_QWORD *)a4 + 8 * v11);
      if (v9 >= 0xB
        && ((v14 = v11, (unint64_t)v13 >= v10 + 32 * v9)
         || v10 + 24 >= v12 + 8 * (v9 + v11)))
      {
        v16 = v9 & 3;
        if ((v9 & 3) == 0)
          v16 = 4;
        v15 = v9 - v16;
        v13 += v15;
        v17 = (const double *)(v10 + 88);
        v18 = (int8x16_t *)(v12 + 8 * v14 + 16);
        v19 = v15;
        do
        {
          v20 = v17 - 8;
          v21 = (unsigned __int128)vld4q_f64(v20);
          v22 = (unsigned __int128)vld4q_f64(v17);
          v23 = (int8x16_t)vdupq_n_s64(4uLL);
          v18[-1] = vorrq_s8((int8x16_t)v21, v23);
          *v18 = vorrq_s8((int8x16_t)v22, v23);
          v17 += 16;
          v18 += 2;
          v19 -= 4;
        }
        while (v19);
      }
      else
      {
        v15 = 0;
      }
      v24 = v9 - v15;
      v25 = (uint64_t *)(v10 + 32 * v15 + 24);
      do
      {
        v26 = *v25;
        v25 += 4;
        *v13++ = v26 | 4;
        --v24;
      }
      while (v24);
      LODWORD(v11) = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(a4 + 8) = v11 + v9;
    return 1;
  }
  return result;
}

uint64_t mlir::impl::verifyCastInterfaceOp(mlir::impl *this, mlir::Operation *a2)
{
  unint64_t v3;
  char *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t (**InterfaceFor)(unint64_t, unint64_t, unint64_t, unint64_t);
  mlir::detail::OpResultImpl *NextResultAtOffset;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  const void ***v25;
  char *v26;
  char *v27;
  __int128 v28;
  const void **v29;
  const void ***v30;
  char *v31;
  char *v32;
  __int128 v33;
  const void ***v34;
  char *v35;
  const void ***v36;
  char *v37;
  char *v38;
  __int128 v39;
  const void ***v40;
  char *v41;
  char *v42;
  __int128 v43;
  const char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  const void ***v50;
  uint64_t v51;
  __int128 v52;
  _QWORD **v53;
  _QWORD **v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int64_t v68;
  char *v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const void **v80;
  const char *v81;
  uint64_t v82;
  __int16 v83;
  mlir::detail::OpResultImpl *v84;
  uint64_t v85;
  mlir::detail::OpResultImpl *v86;
  uint64_t v87;
  unint64_t v88[2];
  unint64_t v89[2];
  char *v90;
  unint64_t v91[2];
  void *v92;
  unsigned int v93;
  unsigned int v94;
  _BYTE v95[96];
  void *v96;
  _QWORD *v97;
  void *__p;
  _QWORD **v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 9);
  v4 = (char *)this - 16;
  if (!(_DWORD)v3)
    v4 = 0;
  v90 = v4;
  v91[0] = v3;
  mlir::OperandRange::getTypes((uint64_t *)&v90, (uint64_t *)&v84);
  if (v84 != v86 || v85 != v87)
  {
    if ((*((_BYTE *)this + 46) & 0x80) != 0)
    {
      v6 = *((_QWORD *)this + 9);
      v7 = *((unsigned int *)this + 17);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v90 = (char *)v6;
    v91[0] = v7;
    mlir::OperandRange::getTypes((uint64_t *)&v90, &v76);
    InterfaceFor = (uint64_t (**)(unint64_t, unint64_t, unint64_t, unint64_t))mlir::OpInterface<mlir::CastOpInterface,mlir::detail::CastOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
    mlir::ValueRange::ValueRange((unint64_t *)&v90, v76 + 32 * v77, v79 - v77);
    mlir::TypeRange::TypeRange(v89, (uint64_t)v90, v91[0]);
    NextResultAtOffset = v84;
    v10 = v85;
    v11 = v87;
    if (v85)
      NextResultAtOffset = (mlir::detail::OpResultImpl *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v84, v85);
    mlir::ValueRange::ValueRange((unint64_t *)&v90, (uint64_t)NextResultAtOffset, v11 - v10);
    mlir::TypeRange::TypeRange(v88, (uint64_t)v90, v91[0]);
    if (((*InterfaceFor)(v89[0], v89[1], v88[0], v88[1]) & 1) != 0)
      return 1;
    v80 = (const void **)"operand type";
    v83 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, &v80, (uint64_t)&v90);
    if (v76 == v78 && v79 == v77)
    {
      if (!v90)
        goto LABEL_48;
      LODWORD(v80) = 3;
      v81 = "s []";
      v82 = 4;
      v25 = &v80;
      v26 = (char *)v92;
      if (v93 >= v94)
      {
        v64 = v93 + 1;
        if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
        {
          v71 = (char *)&v80 - (_BYTE *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v64, 24);
          v26 = (char *)v92;
          v25 = (const void ***)((char *)v92 + v71);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v64, 24);
          v25 = &v80;
          v26 = (char *)v92;
        }
      }
      v27 = &v26[24 * v93];
      v28 = *(_OWORD *)v25;
      v29 = v25[2];
LABEL_41:
      *((_QWORD *)v27 + 2) = v29;
      *(_OWORD *)v27 = v28;
      ++v93;
      if (!v90)
        goto LABEL_48;
      goto LABEL_42;
    }
    if (v79 - v77 == 1)
    {
      if (v90)
      {
        LODWORD(v80) = 3;
        v81 = " ";
        v82 = 1;
        v30 = &v80;
        v31 = (char *)v92;
        if (v93 >= v94)
        {
          v65 = v93 + 1;
          if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
          {
            v72 = (char *)&v80 - (_BYTE *)v92;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v65, 24);
            v31 = (char *)v92;
            v30 = (const void ***)((char *)v92 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v65, 24);
            v30 = &v80;
            v31 = (char *)v92;
          }
        }
        v32 = &v31[24 * v93];
        v33 = *(_OWORD *)v30;
        *((_QWORD *)v32 + 2) = v30[2];
        *(_OWORD *)v32 = v33;
        ++v93;
        if (v90)
        {
          v34 = &v80;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v80, *(_QWORD *)(*(_QWORD *)(v76 + 32 * v77 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
          v35 = (char *)v92;
          if (v93 >= v94)
          {
            v67 = v93 + 1;
            if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
            {
              v74 = (char *)&v80 - (_BYTE *)v92;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v67, 24);
              v35 = (char *)v92;
              v34 = (const void ***)((char *)v92 + v74);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v67, 24);
              v34 = &v80;
              v35 = (char *)v92;
            }
          }
          v27 = &v35[24 * v93];
          v28 = *(_OWORD *)v34;
          v29 = v34[2];
          goto LABEL_41;
        }
      }
    }
    else if (v90)
    {
      LODWORD(v80) = 3;
      v81 = "s ";
      v82 = 2;
      v40 = &v80;
      v41 = (char *)v92;
      if (v93 >= v94)
      {
        v66 = v93 + 1;
        if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
        {
          v73 = (char *)&v80 - (_BYTE *)v92;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v66, 24);
          v41 = (char *)v92;
          v40 = (const void ***)((char *)v92 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v66, 24);
          v40 = &v80;
          v41 = (char *)v92;
        }
      }
      v42 = &v41[24 * v93];
      v43 = *(_OWORD *)v40;
      *((_QWORD *)v42 + 2) = v40[2];
      *(_OWORD *)v42 = v43;
      ++v93;
      if (v90)
      {
        v80 = (const void **)", ";
        llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::OperandRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::OperandRange>>(mlir::ValueTypeRange<mlir::OperandRange> const&,char const*)::{lambda(void)#1},void>(v76, v77, v78, v79, (uint64_t)v91, (uint64_t)v91, (const char **)&v80);
        if (v90)
        {
LABEL_42:
          LODWORD(v80) = 3;
          v81 = " and result type";
          v82 = 16;
          v36 = &v80;
          v37 = (char *)v92;
          if (v93 >= v94)
          {
            v63 = v93 + 1;
            if (v92 <= &v80 && (char *)v92 + 24 * v93 > (char *)&v80)
            {
              v70 = (char *)&v80 - (_BYTE *)v92;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v63, 24);
              v37 = (char *)v92;
              v36 = (const void ***)((char *)v92 + v70);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v63, 24);
              v36 = &v80;
              v37 = (char *)v92;
            }
          }
          v38 = &v37[24 * v93];
          v39 = *(_OWORD *)v36;
          *((_QWORD *)v38 + 2) = v36[2];
          *(_OWORD *)v38 = v39;
          ++v93;
        }
      }
    }
LABEL_48:
    if (v87 - v85 == 1)
      v44 = " ";
    else
      v44 = "s ";
    v75 = v44;
    v45 = (_QWORD *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)&v90, &v75);
    v46 = (uint64_t)v45;
    if (*v45)
    {
      v80 = (const void **)", ";
      llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::ResultRange,mlir::detail::OpResultImpl *,mlir::OpResult,mlir::OpResult,mlir::OpResult>::iterator>,mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::ResultRange>>(mlir::ValueTypeRange<mlir::ResultRange> const&,char const*)::{lambda(mlir::ValueTypeRange<mlir::ResultRange> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<mlir::ValueTypeRange<mlir::ResultRange>>(mlir::ValueTypeRange<mlir::ResultRange> const&,char const*)::{lambda(void)#1},void>(v84, v85, v86, v87, (uint64_t)(v45 + 1), (uint64_t)(v45 + 1), (const char **)&v80);
      if (*(_QWORD *)v46)
      {
        v47 = v46 + 24;
        v48 = *(_QWORD *)(v46 + 24);
        LODWORD(v80) = 3;
        v81 = " are cast incompatible";
        v82 = 22;
        v49 = *(unsigned int *)(v46 + 32);
        v50 = &v80;
        if (v49 >= *(_DWORD *)(v46 + 36))
        {
          v61 = v49 + 1;
          v62 = v48 + 24 * v49 > (unint64_t)&v80;
          if (v48 <= (unint64_t)&v80 && v62)
          {
            v69 = (char *)&v80 - v48;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v47, (void *)(v46 + 40), v61, 24);
            v48 = *(_QWORD *)(v46 + 24);
            v50 = (const void ***)&v69[v48];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v47, (void *)(v46 + 40), v61, 24);
            v48 = *(_QWORD *)(v46 + 24);
            v50 = &v80;
          }
        }
        v51 = v48 + 24 * *(unsigned int *)(v46 + 32);
        v52 = *(_OWORD *)v50;
        *(_QWORD *)(v51 + 16) = v50[2];
        *(_OWORD *)v51 = v52;
        ++*(_DWORD *)(v46 + 32);
      }
    }
    v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v46);
    if (v90)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
    if (v100)
    {
      v53 = (_QWORD **)__p;
      if (__p)
      {
        v54 = v99;
        v55 = __p;
        if (v99 != __p)
        {
          do
            v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
          while (v54 != v53);
          v55 = __p;
        }
        v99 = v53;
        operator delete(v55);
      }
      v20 = v96;
      if (!v96)
        goto LABEL_71;
      v56 = v97;
      v22 = v96;
      if (v97 == v96)
      {
LABEL_70:
        v97 = v20;
        operator delete(v22);
LABEL_71:
        if (v92 != v95)
          free(v92);
        return v12;
      }
      do
      {
        v58 = (void *)*--v56;
        v57 = v58;
        *v56 = 0;
        if (v58)
          operator delete[](v57);
      }
      while (v56 != v20);
LABEL_69:
      v22 = v96;
      goto LABEL_70;
    }
    return v12;
  }
  v83 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v80, (uint64_t)&v90);
  if (v90)
  {
    LODWORD(v76) = 3;
    v77 = (uint64_t)"expected at least one result for cast operation";
    v78 = 47;
    v13 = &v76;
    v14 = (char *)v92;
    if (v93 >= v94)
    {
      v60 = v93 + 1;
      if (v92 <= &v76 && (char *)v92 + 24 * v93 > (char *)&v76)
      {
        v68 = (char *)&v76 - (_BYTE *)v92;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v60, 24);
        v14 = (char *)v92;
        v13 = (uint64_t *)((char *)v92 + v68);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, v95, v60, 24);
        v13 = &v76;
        v14 = (char *)v92;
      }
    }
    v15 = &v14[24 * v93];
    v16 = *(_OWORD *)v13;
    *((_QWORD *)v15 + 2) = v13[2];
    *(_OWORD *)v15 = v16;
    ++v93;
  }
  v12 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v90);
  if (v90)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v90);
  if (v100)
  {
    v17 = (_QWORD **)__p;
    if (__p)
    {
      v18 = v99;
      v19 = __p;
      if (v99 != __p)
      {
        do
          v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        v19 = __p;
      }
      v99 = v17;
      operator delete(v19);
    }
    v20 = v96;
    if (!v96)
      goto LABEL_71;
    v21 = v97;
    v22 = v96;
    if (v97 == v96)
      goto LABEL_70;
    do
    {
      v24 = (void *)*--v21;
      v23 = v24;
      *v21 = 0;
      if (v24)
        operator delete[](v23);
    }
    while (v21 != v20);
    goto LABEL_69;
  }
  return v12;
}

float mlir::mps::detail::MPSAbstractCostModel::computeCost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  unint64_t v7;
  int8x16_t *AttrData;
  const unsigned __int8 *v9;
  int Key;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  float result;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  char **v25;
  char *v26;

  if ((v6 & 1) == 0
  {
    mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap = 0;
    *(_QWORD *)&dword_1EDC0BDE0 = 0;
    qword_1EDC0BDE8 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap, &mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, &dword_18013D000);
  }
  v7 = atomic_load(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap);
  if (v7 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>);
  }
  v26 = *(char **)(*(_QWORD *)(a2 + 48) + 8);
  AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v26);
  Key = llvm::StringMapImpl::FindKey(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, AttrData, v9);
  v11 = mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap;
  v12 = Key;
  if (Key == -1)
    v12 = dword_1EDC0BDE0;
  if ((v13 & 1) == 0)
  {
    v23 = mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap;
    v21 = v12;
    v12 = v21;
    v11 = v23;
    if (v22)
    {
      mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap = 0;
      *(_QWORD *)&dword_1EDC0BDE0 = 0;
      qword_1EDC0BDE8 = 0x1800000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap, &mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, &dword_18013D000);
      v12 = v21;
      v11 = v23;
    }
  }
  v14 = v11 + 8 * v12;
  v15 = atomic_load(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap);
  if (v15 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::initializedDispatchMap, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>);
  }
  if (v14 == mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap
            + 8 * dword_1EDC0BDE0)
  {
    v20 = *(_QWORD *)(a2 + 48);
    if (*(_UNKNOWN **)(v20 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v26 = *(char **)(v20 + 8);
      mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v26);
    }
    return 0.0;
  }
  else
  {
    v16 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)v14 + 8);
    v17 = *(_QWORD *)(*(_QWORD *)v14 + 16);
    v18 = (_QWORD *)(a1 + (v17 >> 1));
    if ((v17 & 1) != 0)
      v16 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*v18 + v16);
    v16(v18, a2, a3);
  }
  return result;
}

uint64_t llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        v4 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v4 != (llvm *)-8 && v4 != 0)
          llvm::deallocate_buffer(v4, (void *)(*(_QWORD *)v4 + 25));
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

BOOL mlir::mps::executionCost(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __guard v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ElementBitWidth;
  uint64_t *ArgAttrsAttr;
  uint64_t v13;
  uint64_t NumElements;
  uint64_t v15;
  uint64_t DefiningOp;
  int v17;
  uint64_t v18;
  __guard v19;
  void *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  __guard v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t i;
  uint64_t NextResultAtOffset;
  _QWORD *v39;
  uint64_t v40;
  __guard v41;
  void *v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  mlir::Block *v59;
  uint64_t ParentOp;
  _BOOL8 result;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;

  v4 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  v5 = (*(uint64_t (**)(_QWORD, __guard))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v4);
  if ((*(_BYTE *)(a2 + 46) & 0x80) != 0)
  {
    v6 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v6)
    {
      v7 = v5;
      v8 = 0;
      v9 = (uint64_t *)(*(_QWORD *)(a2 + 72) + 24);
      do
      {
        v63 = *v9;
        DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v63);
        if (DefiningOp)
          v17 = v7;
        else
          v17 = 0;
        if (v17 != 1)
          goto LABEL_4;
        v18 = DefiningOp;
        v19 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
        if (((*(uint64_t (**)(_QWORD, __guard))(**(_QWORD **)(v18 + 48) + 32))(*(_QWORD *)(v18 + 48), v19) & 1) == 0)
        {
          v20 = *(void **)(*(_QWORD *)(v18 + 48) + 16);
          v21 = v20 == &mlir::detail::TypeIDResolver<mlir::mps::FastFourierTransformOp,void>::id
             || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id;
          v22 = v21 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::StencilOp,void>::id;
          v23 = v22 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id;
          v24 = v23 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id;
          v25 = v24 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id;
          v26 = v25 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id;
          v27 = v26 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id;
          v28 = v27 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id;
          v29 = v28 || v20 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id;
          if (!v29 && v20 != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id)
          {
LABEL_4:
            v64 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v63 + 8) & 0xFFFFFFFFFFFFFFF8));
            v65 = v10;
            ElementBitWidth = mlir::getElementBitWidth(v64);
            ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v64);
            NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v13);
            if (ElementBitWidth)
              v15 = NumElements;
            else
              v15 = 0;
            v8 += v15;
          }
        }
        v9 += 4;
        --v6;
      }
      while (v6);
    }
  }
  v31 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
  v32 = (*(uint64_t (**)(_QWORD, __guard))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v31);
  v33 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v33)
    v34 = a2 - 16;
  else
    v34 = 0;
  if ((_DWORD)v33)
  {
    v35 = v32;
    v36 = 0;
    for (i = 0; i != v33; ++i)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, i);
      v39 = *(_QWORD **)NextResultAtOffset;
      if (!*(_QWORD *)NextResultAtOffset)
        goto LABEL_87;
      if (*v39)
        goto LABEL_87;
      v40 = v39[2];
      v41 = mlir::TypeID::get<mlir::OpTrait::Stitchable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::Stitchable>(void)::Empty>>();
      if (!(*(unsigned int (**)(_QWORD, __guard))(**(_QWORD **)(v40 + 48) + 32))(*(_QWORD *)(v40 + 48), v41))goto LABEL_87;
      if ((v35 & 1) == 0)
      {
        v42 = *(void **)(*(_QWORD *)(a2 + 48) + 16);
        v43 = v42 == &mlir::detail::TypeIDResolver<mlir::mps::FastFourierTransformOp,void>::id
           || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ResizeOp,void>::id;
        v44 = v43 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::StencilOp,void>::id;
        v45 = v44 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id;
        v46 = v45 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::DepthwiseConv3DOp,void>::id;
        v47 = v46 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionProdOp,void>::id;
        v48 = v47 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMinOp,void>::id;
        v49 = v48 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionMaxOp,void>::id;
        v50 = v49 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionSumOp,void>::id;
        v51 = v50 || v42 == &mlir::detail::TypeIDResolver<mlir::mps::IdentityOp,void>::id;
        if (!v51 && v42 != &mlir::detail::TypeIDResolver<mlir::mps::Conv2DOp,void>::id)
        {
LABEL_87:
          v64 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8));
          v65 = v53;
          v54 = mlir::getElementBitWidth(v64);
          v55 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v64);
          v57 = mlir::ShapedType::getNumElements(v55, v56);
          if (v54)
            v58 = v57;
          else
            v58 = 0;
          v36 += v58;
        }
      }
    }
  }
  v64 = a3;
  do
  {
    v59 = *(mlir::Block **)(a2 + 16);
    if (!v59)
      break;
    ParentOp = mlir::Block::getParentOp(v59);
    if (!ParentOp)
      break;
    a2 = ParentOp;
  }
  while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
  result = mlir::Type::isF16((mlir::Type *)&v64);
  if (!result)
    return mlir::Type::isF32((mlir::Type *)&v64);
  return result;
}

uint64_t *mlir::mps::getMathOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t *ArgAttrsAttr;
  uint64_t v7;
  uint64_t *OperandRange;
  _QWORD v9[2];

  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    if (*(_UNKNOWN **)(*result + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
    {
      ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v9);
      mlir::ShapedType::getNumElements(ArgAttrsAttr, v7);
      OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v9);
      return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
    }
  }
  return result;
}

uint64_t mlir::mps::getCopyOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *ArgAttrsAttr;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  mlir::Block *v17;
  uint64_t ParentOp;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t OperandRange;
  uint64_t v22;

  v2 = a2;
  v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v5 = v4;
  v20[0] = v3;
  v20[1] = v4;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v19[0] = result;
  v19[1] = v7;
  OperandRange = result;
  v22 = v7;
  if (result)
  {
    v8 = (_QWORD *)result;
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if ((_DWORD)result)
    {
      result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
      if (v9)
      {
        v10 = 8 * v9;
        while (*(_QWORD *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        OperandRange = (uint64_t)v3;
        v22 = v5;
        if (v3)
        {
          result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if ((_DWORD)result)
          {
            result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
            if (v11)
            {
              v12 = 8 * v11;
              while (*(_QWORD *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              mlir::getElementBitWidth(v3);
              ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v20);
              mlir::ShapedType::getNumElements(ArgAttrsAttr, v14);
              mlir::getElementBitWidth(v8);
              v15 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
              mlir::ShapedType::getNumElements(v15, v16);
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19);
              do
              {
                v17 = *(mlir::Block **)(v2 + 16);
                if (!v17)
                  break;
                ParentOp = mlir::Block::getParentOp(v17);
                if (!ParentOp)
                  break;
                v2 = ParentOp;
              }
              while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!(_DWORD)result)
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostAbsoluteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAbsoluteSquareOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostACoshOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostACosOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostASinhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostASinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATanhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCeilOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentBase10Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentBase2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostExponentOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmBase10Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmBase2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLogarithmOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSquareOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSquareRootOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReciprocalSquareRootOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReciprocalOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNegativeOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSignbitOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSignOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostFloorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRintOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRoundOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCoshOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostCosOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSinhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTanhOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNotOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsInfiniteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsFiniteOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIsNaNOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostErfOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostEluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostRelu6Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReluGradOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLeakyReluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGeluOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSigmoidOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSwishOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftplusOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftsignOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostTruncateOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseNotOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwisePopcountOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostIdentityOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAddOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSubtractOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMultiplyOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostDivideOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMinimumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMaximumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostModuloOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostPowerOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostATan2Op(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostFloorDivideOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNandOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostXnorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostXorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseXorOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseLeftShiftOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostBitwiseRightShiftOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNotEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGreaterThanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostGreaterThanOrEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLessThanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLessThanOrEqualToOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSelectOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostClampOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftplusParametricOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostConjugateOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostMatMulOp(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t Input;
  uint64_t Filter;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ArgAttrsAttr;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ParentOp;
  float v38;
  float v39;
  float v40;
  mlir::Block *v41;
  uint64_t *OperandRange;
  _QWORD v43[2];
  _QWORD v44[2];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  v45 = a2;
  mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v45);
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v45);
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v45);
  v6 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v8 = v7;
  v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v11 = v10;
  v44[0] = v9;
  v44[1] = v10;
  v12 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v45);
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v43[0] = result;
  v43[1] = v14;
  v46 = v6;
  v47 = v8;
  if (!v6)
    return result;
  v15 = result;
  v16 = v14;
  result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
  if (!(_DWORD)result)
    return result;
  result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
  if (!v17)
  {
LABEL_7:
    v46 = v9;
    v47 = v11;
    if (!v9)
      return result;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
    if (!(_DWORD)result)
      return result;
    result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
    if (v19)
    {
      v20 = 8 * v19;
      while (*result != 0x8000000000000000)
      {
        ++result;
        v20 -= 8;
        if (!v20)
          goto LABEL_13;
      }
      return result;
    }
LABEL_13:
    v46 = v15;
    v47 = v16;
    if (!v15)
      return result;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46);
    if (!(_DWORD)result)
      return result;
    result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
    if (v21)
    {
      v22 = 8 * v21;
      while (*result != 0x8000000000000000)
      {
        ++result;
        v22 -= 8;
        if (!v22)
          goto LABEL_19;
      }
      return result;
    }
LABEL_19:
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
    v25 = v24 - 2;
    if (v24 < 2)
    {
      v28 = 1;
      v26 = 1;
      goto LABEL_31;
    }
    v26 = *(_QWORD *)(ArgAttrsAttr + 8 * v25);
    if (v24 == 2)
    {
      v28 = 1;
      goto LABEL_31;
    }
    if (v24 == 3)
    {
      v27 = 0;
      v28 = 1;
    }
    else
    {
      v27 = v25 & 0xFFFFFFFFFFFFFFFELL;
      v29 = (_QWORD *)(ArgAttrsAttr + 8);
      v30 = 1;
      v31 = v25 & 0xFFFFFFFFFFFFFFFELL;
      v32 = 1;
      do
      {
        v30 *= *(v29 - 1);
        v32 *= *v29;
        v29 += 2;
        v31 -= 2;
      }
      while (v31);
      v28 = v32 * v30;
      if (v25 == v27)
      {
LABEL_31:
        v36 = *(_QWORD *)(ArgAttrsAttr + 8 * v24 - 8);
        ParentOp = v45;
        v38 = (float)v28;
        v39 = (float)v26;
        v40 = (float)v36;
        while (1)
        {
          v41 = *(mlir::Block **)(ParentOp + 16);
          if (!v41)
            break;
          ParentOp = mlir::Block::getParentOp(v41);
          if (!ParentOp)
            break;
          if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
            goto LABEL_37;
        }
        if (!*a3)
          goto LABEL_38;
LABEL_37:
        pow((double)(float)((float)(v40 + 2.0) * (float)((float)(v39 + 2.0) * v38)), 0.25);
LABEL_38:
        OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v43);
        return (uint64_t *)mlir::mps::executionCost((uint64_t)a3, v45, OperandRange);
      }
    }
    v33 = v24 - v27 - 2;
    v34 = (uint64_t *)(ArgAttrsAttr + 8 * v27);
    do
    {
      v35 = *v34++;
      v28 *= v35;
      --v33;
    }
    while (v33);
    goto LABEL_31;
  }
  v18 = 8 * v17;
  while (*result != 0x8000000000000000)
  {
    ++result;
    v18 -= 8;
    if (!v18)
      goto LABEL_7;
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostGatherNDOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostGatherOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostResizeOp(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *ArgAttrsAttr;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int GateLayout;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ParentOp;
  mlir::Block *v24;
  _QWORD *v25[2];
  _QWORD *v26[2];
  uint64_t v27;
  uint64_t OperandRange;
  _QWORD *v29;

  v27 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v27);
  v3 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v27);
  v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v6 = v5;
  v26[0] = v4;
  v26[1] = v5;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v25[0] = (_QWORD *)result;
  v25[1] = v8;
  OperandRange = result;
  v29 = v8;
  if (result)
  {
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if ((_DWORD)result)
    {
      result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
      if (v9)
      {
        v10 = 8 * v9;
        while (*(_QWORD *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        OperandRange = (uint64_t)v4;
        v29 = v6;
        if (v4)
        {
          result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if ((_DWORD)result)
          {
            result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
            if (v11)
            {
              v12 = 8 * v11;
              while (*(_QWORD *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
              ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v25);
              mlir::ShapedType::getNumElements(ArgAttrsAttr, v14);
              mlir::getElementBitWidth(v25[0]);
              v15 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v25);
              mlir::ShapedType::getNumElements(v15, v16);
              GateLayout = mlir::mps::LSTMOp::getGateLayout((mlir::mps::LSTMOp *)&v27);
              v18 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v25);
              mlir::ShapedType::getNumElements(v18, v19);
              if (GateLayout == 1)
              {
                mlir::getElementBitWidth(v26[0]);
                v20 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
                mlir::ShapedType::getNumElements(v20, v21);
              }
              v22 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v25);
              ParentOp = v27;
              OperandRange = v22;
              do
              {
                v24 = *(mlir::Block **)(ParentOp + 16);
                if (!v24)
                  break;
                ParentOp = mlir::Block::getParentOp(v24);
                if (!ParentOp)
                  break;
              }
              while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!(_DWORD)result)
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::getUnaryOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *ArgAttrsAttr;
  uint64_t v24;
  uint64_t *OperandRange;
  _QWORD v26[2];
  uint64_t *v27;
  uint64_t v28;

  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  else
    v4 = 0;
  if (!v4)
    goto LABEL_13;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_13:
    v14 = 0;
  v26[0] = v4;
  v26[1] = v14;
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v27 = v4;
  v28 = v14;
  if (v4)
  {
    v17 = result;
    v18 = v16;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v27);
      if (v19)
      {
        v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        v27 = v17;
        v28 = v18;
        if (v17)
        {
          result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
          if ((_DWORD)result)
          {
            result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v27);
            if (v21)
            {
              v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22)
                  goto LABEL_26;
              }
            }
            else
            {
LABEL_26:
              ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
              mlir::ShapedType::getNumElements(ArgAttrsAttr, v24);
              OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostStridedSliceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostLSTMOp(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t Input;
  uint64_t Mask;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v15;
  uint64_t v16;
  mlir::Block *v17;
  uint64_t v18;
  mlir::Block *v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD v22[2];

  v21 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v21);
  Mask = mlir::mps::LSTMOp::getMask((mlir::mps::LSTMOp *)&v21);
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v20[0] = result;
  v20[1] = v7;
  v22[0] = result;
  v22[1] = v7;
  if (result)
  {
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v22);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v22);
      if (v8)
      {
        v9 = 8 * v8;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v9 -= 8;
          if (!v9)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v20);
        v11 = *(_QWORD *)(ArgAttrsAttr + 8);
        v12 = *(_QWORD *)(ArgAttrsAttr + 16) / 4;
        OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v20);
        v22[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v20);
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)v22);
        if (Mask)
        {
          ParentOp = v21;
          v22[0] = OperandRange;
          do
          {
            v15 = *(mlir::Block **)(ParentOp + 16);
            if (!v15)
              break;
            ParentOp = mlir::Block::getParentOp(v15);
            if (!ParentOp)
              break;
          }
          while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
          if (!mlir::Type::isF16((mlir::Type *)v22))
            mlir::Type::isF32((mlir::Type *)v22);
        }
        mlir::mps::GRUOp::getTraining((mlir::mps::GRUOp *)&v21);
        v16 = v21;
        while (1)
        {
          v17 = *(mlir::Block **)(v16 + 16);
          if (!v17)
            break;
          v16 = mlir::Block::getParentOp(v17);
          if (!v16)
            break;
          if (*(_UNKNOWN **)(*(_QWORD *)(v16 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
            goto LABEL_24;
        }
        if (!*a3)
          goto LABEL_25;
LABEL_24:
        pow((double)(float)((float)((float)((float)(4 * v12) + 2.0) * (float)v11) * 3.0), 0.25);
LABEL_25:
        v18 = v21;
        v22[0] = OperandRange;
        do
        {
          v19 = *(mlir::Block **)(v18 + 16);
          if (!v19)
            break;
          v18 = mlir::Block::getParentOp(v19);
          if (!v18)
            break;
        }
        while (*(_UNKNOWN **)(*(_QWORD *)(v18 + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
        result = (uint64_t *)mlir::Type::isF16((mlir::Type *)v22);
        if (!(_DWORD)result)
          return (uint64_t *)mlir::Type::isF32((mlir::Type *)v22);
      }
    }
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostConcatOp(uint64_t a1, uint64_t a2)
{
  uint64_t Values;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ElementBitWidth;
  uint64_t *ArgAttrsAttr;
  uint64_t v20;
  uint64_t NumElements;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v29;
  _QWORD *v30[2];
  _QWORD v31[2];
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v32 = a2;
  Values = mlir::mps::ConcatOp::getValues((mlir::mps::ConcatOp *)&v32);
  mlir::ValueRange::ValueRange(&v37, Values, v3);
  v4 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v32);
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v31[0] = result;
  v31[1] = v6;
  v33 = (uint64_t *)result;
  v34 = v6;
  if (result)
  {
    v7 = (_QWORD *)result;
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v33);
    if ((_DWORD)result)
    {
      result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
      if (v8)
      {
        v9 = 8 * v8;
        while (*(_QWORD *)result != 0x8000000000000000)
        {
          result += 8;
          v9 -= 8;
          if (!v9)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        v10 = v37;
        v11 = v38;
        v35 = v37;
        v36 = 0;
        if (v38)
        {
          v12 = 0;
          v13 = 0;
          while (1)
          {
            v14 = mlir::ValueRange::dereference_iterator(&v35, v12);
            result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF8));
            v30[0] = (_QWORD *)result;
            v30[1] = v15;
            v33 = (uint64_t *)result;
            v34 = v15;
            if (!result)
              break;
            result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v33);
            if (!(_DWORD)result)
              break;
            result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v33);
            if (v16)
            {
              v17 = 8 * v16;
              while (*(_QWORD *)result != 0x8000000000000000)
              {
                result += 8;
                v17 -= 8;
                if (!v17)
                  goto LABEL_15;
              }
              return result;
            }
LABEL_15:
            ElementBitWidth = mlir::getElementBitWidth(v30[0]);
            ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
            NumElements = mlir::ShapedType::getNumElements(ArgAttrsAttr, v20);
            if (ElementBitWidth)
              v22 = NumElements;
            else
              v22 = 0;
            v13 += v22;
            v12 = ++v36;
            if (v35 == v10 && v12 == v11)
              goto LABEL_22;
          }
        }
        else
        {
LABEL_22:
          mlir::getElementBitWidth(v7);
          v23 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v31);
          mlir::ShapedType::getNumElements(v23, v24);
          v25 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v31);
          mlir::ShapedType::getNumElements(v25, v26);
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v31);
          ParentOp = v32;
          v33 = (uint64_t *)OperandRange;
          do
          {
            v29 = *(mlir::Block **)(ParentOp + 16);
            if (!v29)
              break;
            ParentOp = mlir::Block::getParentOp(v29);
            if (!ParentOp)
              break;
          }
          while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
          result = mlir::Type::isF16((mlir::Type *)&v33);
          if (!(_DWORD)result)
            return mlir::Type::isF32((mlir::Type *)&v33);
        }
      }
    }
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostDepthToSpace2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostSpaceToDepth2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostBatchToSpaceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostSpaceToBatchOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostPadOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSampleGridOp(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t Filter;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *ArgAttrsAttr;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int WeightsLayout;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ParentOp;
  mlir::Block *v34;
  _QWORD v35[2];
  _QWORD *v36[2];
  _QWORD *v37[2];
  uint64_t v38;
  uint64_t OperandRange;
  _QWORD *v40;

  v38 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v38);
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v38);
  v4 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v38);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v7 = v6;
  v37[0] = v5;
  v37[1] = v6;
  v8 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v10 = v9;
  v36[0] = v8;
  v36[1] = v9;
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v35[0] = result;
  v35[1] = v12;
  OperandRange = (uint64_t)v8;
  v40 = v10;
  if (v8)
  {
    v13 = result;
    v14 = v12;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
      if (v15)
      {
        v16 = 8 * v15;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v16 -= 8;
          if (!v16)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        OperandRange = (uint64_t)v5;
        v40 = v7;
        if (v5)
        {
          result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if ((_DWORD)result)
          {
            result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
            if (v17)
            {
              v18 = 8 * v17;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v18 -= 8;
                if (!v18)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              OperandRange = (uint64_t)v13;
              v40 = v14;
              if (v13)
              {
                result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
                if ((_DWORD)result)
                {
                  result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
                  if (v19)
                  {
                    v20 = 8 * v19;
                    while (*result != 0x8000000000000000)
                    {
                      ++result;
                      v20 -= 8;
                      if (!v20)
                        goto LABEL_19;
                    }
                  }
                  else
                  {
LABEL_19:
                    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v37);
                    mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
                    ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
                    mlir::ShapedType::getNumElements(ArgAttrsAttr, v22);
                    mlir::getElementBitWidth(v36[0]);
                    v23 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
                    mlir::ShapedType::getNumElements(v23, v24);
                    WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v38);
                    v26 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v36);
                    mlir::ShapedType::getNumElements(v26, v27);
                    if (WeightsLayout == 1)
                    {
                      mlir::getElementBitWidth(v37[0]);
                      v28 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v37);
                      mlir::ShapedType::getNumElements(v28, v29);
                    }
                    mlir::getElementBitWidth(v13);
                    v30 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v35);
                    mlir::ShapedType::getNumElements(v30, v31);
                    v32 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v36);
                    ParentOp = v38;
                    OperandRange = v32;
                    do
                    {
                      v34 = *(mlir::Block **)(ParentOp + 16);
                      if (!v34)
                        break;
                      ParentOp = mlir::Block::getParentOp(v34);
                      if (!ParentOp)
                        break;
                    }
                    while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
                    result = (uint64_t *)mlir::Type::isF16((mlir::Type *)&OperandRange);
                    if (!(_DWORD)result)
                      return (uint64_t *)mlir::Type::isF32((mlir::Type *)&OperandRange);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::getReductionOpExecutionCost(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *ArgAttrsAttr;
  uint64_t v24;
  uint64_t *OperandRange;
  _QWORD v26[2];
  uint64_t *v27;
  uint64_t v28;

  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  else
    v4 = 0;
  if (!v4)
    goto LABEL_13;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_13:
    v14 = 0;
  v26[0] = v4;
  v26[1] = v14;
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(a2 - 8) & 0xFFFFFFFFFFFFFFF8));
  v27 = v4;
  v28 = v14;
  if (v4)
  {
    v17 = result;
    v18 = v16;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v27);
      if (v19)
      {
        v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        v27 = v17;
        v28 = v18;
        if (v17)
        {
          result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v27);
          if ((_DWORD)result)
          {
            result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v27);
            if (v21)
            {
              v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22)
                  goto LABEL_26;
              }
            }
            else
            {
LABEL_26:
              ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
              mlir::ShapedType::getNumElements(ArgAttrsAttr, v24);
              OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              return (uint64_t *)mlir::mps::executionCost(a1, a2, OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionAndOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionArgMaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionArgMinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionLogSumExpOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMeanOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionMinOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionOrOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionSumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionVarianceOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostReductionProdOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeSumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeProductOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeMaximumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCumulativeMinimumOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getCopyOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSortOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostSoftmaxOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getReductionOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostNormalizationOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getUnaryOpExecutionCost(a3, a2);
}

uint64_t *mlir::mps::MPSCostModel::computeCostInstanceNormOp(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *result;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *ArgAttrsAttr;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v39;
  _QWORD *v40[2];
  _QWORD *v41[2];
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;

  v42 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v42);
  v3 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v42);
  if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = (_QWORD *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8);
  else
    v4 = 0;
  if (!v4)
    goto LABEL_13;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_13;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = (_QWORD *)v8[1];
  else
LABEL_13:
    v14 = 0;
  v41[0] = v4;
  v41[1] = v14;
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v40[0] = result;
  v40[1] = v16;
  v43 = v4;
  v44 = v14;
  if (v4)
  {
    v17 = result;
    v18 = v16;
    result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v43);
    if ((_DWORD)result)
    {
      result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v43);
      if (v19)
      {
        v20 = 8 * v19;
        while (*result != 0x8000000000000000)
        {
          ++result;
          v20 -= 8;
          if (!v20)
            goto LABEL_20;
        }
      }
      else
      {
LABEL_20:
        v43 = v17;
        v44 = v18;
        if (v17)
        {
          result = (uint64_t *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v43);
          if ((_DWORD)result)
          {
            result = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v43);
            if (v21)
            {
              v22 = 8 * v21;
              while (*result != 0x8000000000000000)
              {
                ++result;
                v22 -= 8;
                if (!v22)
                  goto LABEL_26;
              }
            }
            else
            {
LABEL_26:
              ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v40);
              mlir::ShapedType::getNumElements(ArgAttrsAttr, v24);
              mlir::getElementBitWidth(v4);
              v25 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v41);
              mlir::ShapedType::getNumElements(v25, v26);
              v27 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v40);
              mlir::ShapedType::getNumElements(v27, v28);
              mlir::getElementBitWidth(v41[0]);
              v29 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v41);
              mlir::ShapedType::getNumElements(v29, v30);
              v31 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v40);
              mlir::ShapedType::getNumElements(v31, v32);
              mlir::getElementBitWidth(v41[0]);
              v33 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v41);
              mlir::ShapedType::getNumElements(v33, v34);
              mlir::getElementBitWidth(v40[0]);
              v35 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v40);
              mlir::ShapedType::getNumElements(v35, v36);
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v41);
              ParentOp = v42;
              v43 = (_QWORD *)OperandRange;
              do
              {
                v39 = *(mlir::Block **)(ParentOp + 16);
                if (!v39)
                  break;
                ParentOp = mlir::Block::getParentOp(v39);
                if (!ParentOp)
                  break;
              }
              while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              result = (uint64_t *)mlir::Type::isF16((mlir::Type *)&v43);
              if (!(_DWORD)result)
                return (uint64_t *)mlir::Type::isF32((mlir::Type *)&v43);
            }
          }
        }
      }
    }
  }
  return result;
}

float mlir::mps::MPSCostModel::computeCostConv2DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Input;
  uint64_t *v7;
  void *v8;
  void *v9;
  uint64_t Filter;
  uint64_t v11;
  _QWORD *ArgAttrsAttr;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t *Strides;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *InputAttributeNames;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t *OperandRange;
  __int128 v49;
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54[2];
  _BYTE v55[32];
  void *v56[2];
  _QWORD v57[6];

  v57[4] = *MEMORY[0x1E0C80C00];
  v52 = a2;
  mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v52);
  mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v52);
  v4 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v52);
  *(_QWORD *)&v51 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  *((_QWORD *)&v51 + 1) = v5;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v52);
  v7 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v9 = v8;
  v50[0] = v7;
  v50[1] = v8;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v52);
  *(_QWORD *)&v49 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  *((_QWORD *)&v49 + 1) = v11;
  v56[0] = v7;
  v56[1] = v9;
  if (!v7 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56))
    return 0.0;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
  if (v13)
  {
    v14 = 8 * v13;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v14 -= 8;
      if (!v14)
        goto LABEL_7;
    }
    return 0.0;
  }
LABEL_7:
  *(_OWORD *)v56 = v49;
  if (!(_QWORD)v49 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56))
    return 0.0;
  v15 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
  if (v16)
  {
    v17 = 8 * v16;
    while (*v15 != 0x8000000000000000)
    {
      ++v15;
      v17 -= 8;
      if (!v17)
        goto LABEL_13;
    }
    return 0.0;
  }
LABEL_13:
  *(_OWORD *)v56 = v51;
  if (!(_QWORD)v51 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v56))
    return 0.0;
  v18 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v56);
  if (v19)
  {
    v20 = 8 * v19;
    while (*v18 != 0x8000000000000000)
    {
      ++v18;
      v20 -= 8;
      if (!v20)
        goto LABEL_19;
    }
    return 0.0;
  }
LABEL_19:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v50);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v51);
  v56[0] = v57;
  v56[1] = (void *)0x400000000;
  v54[0] = v55;
  v54[1] = (void *)0x400000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v52);
  v24 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_31;
  v25 = *Strides;
  v26 = mlir::TypeID::get<mlir::ElementsAttr>();
  v27 = *(unsigned int *)(v25 + 16);
  if (!(_DWORD)v27)
    goto LABEL_31;
  v28 = *(_QWORD **)(v25 + 8);
  v29 = &v28[2 * v27];
  do
  {
    v30 = v27 >> 1;
    v31 = &v28[2 * (v27 >> 1)];
    v33 = *v31;
    v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26)
      v28 = v32;
    else
      v27 = v30;
  }
  while (v27);
  if (v28 != v29 && *v28 == v26)
    v34 = v28[1];
  else
LABEL_31:
    v34 = 0;
  mlir::getIntValues<long long>(v24, v34, (uint64_t)v56, 1);
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v52);
  v36 = (uint64_t)InputAttributeNames;
  if (!InputAttributeNames)
    goto LABEL_41;
  v37 = *InputAttributeNames;
  v38 = mlir::TypeID::get<mlir::ElementsAttr>();
  v39 = *(unsigned int *)(v37 + 16);
  if (!(_DWORD)v39)
    goto LABEL_41;
  v40 = *(_QWORD **)(v37 + 8);
  v41 = &v40[2 * v39];
  do
  {
    v42 = v39 >> 1;
    v43 = &v40[2 * (v39 >> 1)];
    v45 = *v43;
    v44 = v43 + 2;
    v39 += ~(v39 >> 1);
    if (v45 < v38)
      v40 = v44;
    else
      v39 = v42;
  }
  while (v39);
  if (v40 != v41 && *v40 == v38)
    v46 = v40[1];
  else
LABEL_41:
    v46 = 0;
  mlir::getIntValues<long long>(v36, v46, (uint64_t)v54, 1);
  OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v51);
  v53 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v50);
  mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v53);
  mlir::mps::executionCost(a3, v52, OperandRange);
  v21 = v47;
  if (v54[0] != v55)
    free(v54[0]);
  if (v56[0] != v57)
    free(v56[0]);
  return v21;
}

float mlir::mps::MPSCostModel::computeCostConv2DDataGradientOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t Input;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Filter;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *ArgAttrsAttr;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *Strides;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t *OperandRange;
  float v41;
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[2];
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x1E0C80C00];
  v45 = a2;
  mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v45);
  mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v45);
  v4 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v45);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v7 = v6;
  v44[0] = v5;
  v44[1] = v6;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v45);
  v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v11 = v10;
  v43[0] = v9;
  v43[1] = v10;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v45);
  v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v42[0] = v13;
  v42[1] = v14;
  v46 = v9;
  v47 = v11;
  if (!v9)
    return 0.0;
  v15 = v13;
  v16 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46))
    return 0.0;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
  if (v18)
  {
    v19 = 8 * v18;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v19 -= 8;
      if (!v19)
        goto LABEL_7;
    }
    return 0.0;
  }
LABEL_7:
  v46 = v15;
  v47 = v16;
  if (!v15 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46))
    return 0.0;
  v20 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
  if (v21)
  {
    v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22)
        goto LABEL_13;
    }
    return 0.0;
  }
LABEL_13:
  v46 = v5;
  v47 = v7;
  if (!v5 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v46))
    return 0.0;
  v23 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v46);
  if (v24)
  {
    v25 = 8 * v24;
    while (*v23 != 0x8000000000000000)
    {
      ++v23;
      v25 -= 8;
      if (!v25)
        goto LABEL_19;
    }
    return 0.0;
  }
LABEL_19:
  v46 = v48;
  v47 = 0x400000000;
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v45);
  v27 = (uint64_t)Strides;
  if (!Strides)
    goto LABEL_28;
  v28 = *Strides;
  v29 = mlir::TypeID::get<mlir::ElementsAttr>();
  v30 = *(unsigned int *)(v28 + 16);
  if (!(_DWORD)v30)
    goto LABEL_28;
  v31 = *(_QWORD **)(v28 + 8);
  v32 = &v31[2 * v30];
  do
  {
    v33 = v30 >> 1;
    v34 = &v31[2 * (v30 >> 1)];
    v36 = *v34;
    v35 = v34 + 2;
    v30 += ~(v30 >> 1);
    if (v36 < v29)
      v31 = v35;
    else
      v30 = v33;
  }
  while (v30);
  if (v31 != v32 && *v31 == v29)
    v37 = v31[1];
  else
LABEL_28:
    v37 = 0;
  mlir::getIntValues<long long>(v27, v37, (uint64_t)&v46, 1);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v43);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v42);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
  OperandRange = (uint64_t *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v44);
  mlir::mps::executionCost(a3, v45, OperandRange);
  v38 = v41;
  if (v46 != v48)
    free(v46);
  return v38;
}

float mlir::mps::MPSCostModel::computeCostDepthwiseConv3DOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Input;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t Filter;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *ArgAttrsAttr;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int ChannelAxis;
  uint64_t PositiveAxis;
  uint64_t *v36;
  unsigned int v37;
  float v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t OperandRange;
  float v56;
  float v57;
  BOOL v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t ElementBitWidth;
  uint64_t *v69;
  uint64_t v70;
  uint64_t NumElements;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t ParentOp;
  float v85;
  mlir::Block *v86;
  int v87;
  int v88;
  uint64_t v89;
  float *v90;
  _BOOL4 isF32;
  uint64_t v92;
  uint64_t v93;
  float *v94;
  float v95;
  uint64_t v96;
  float v97;
  _QWORD *v98[2];
  _QWORD *v99[2];
  _QWORD *v100[2];
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  uint64_t v108;
  _OWORD v109[2];
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v101 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v101);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v7 = v6;
  v100[0] = v5;
  v100[1] = v6;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v101);
  v9 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  v11 = v10;
  v99[0] = v9;
  v99[1] = v10;
  v12 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v101);
  v13 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8));
  v98[0] = v13;
  v98[1] = v14;
  v107 = v5;
  v108 = (uint64_t)v7;
  if (!v5)
    return 0.0;
  v15 = v13;
  v16 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107))
    return 0.0;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
  if (v18)
  {
    v19 = 8 * v18;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v19 -= 8;
      if (!v19)
        goto LABEL_7;
    }
    return 0.0;
  }
LABEL_7:
  v107 = v9;
  v108 = (uint64_t)v11;
  if (!v9 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107))
    return 0.0;
  v20 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
  if (v21)
  {
    v22 = 8 * v21;
    while (*v20 != 0x8000000000000000)
    {
      ++v20;
      v22 -= 8;
      if (!v22)
        goto LABEL_13;
    }
    return 0.0;
  }
LABEL_13:
  v107 = v15;
  v108 = (uint64_t)v16;
  if (!v15 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v107))
    return 0.0;
  v23 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v107);
  if (v24)
  {
    v25 = 8 * v24;
    while (*v23 != 0x8000000000000000)
    {
      ++v23;
      v25 -= 8;
      if (!v25)
        goto LABEL_19;
    }
    return 0.0;
  }
LABEL_19:
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v100);
  v27 = v26;
  v28 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v99);
  v30 = v29;
  v31 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v98);
  v33 = v32;
  v107 = v109;
  memset(v109, 0, sizeof(v109));
  v110 = 0;
  v108 = 0x500000005;
  ChannelAxis = mlir::mps::DepthwiseConv3DDataGradientOp::getChannelAxis((mlir::mps::DepthwiseConv3DDataGradientOp *)&v101);
  PositiveAxis = mlir::getPositiveAxis(ChannelAxis, v33);
  v36 = (uint64_t *)v107;
  if (v33 > 4)
  {
    v37 = 0;
  }
  else
  {
    *(_QWORD *)v107 = 1;
    v36[1] = *(_QWORD *)(v31 + 8 * PositiveAxis);
    v36 = (uint64_t *)v107;
    if (v33 < 1)
      goto LABEL_32;
    v37 = 2;
  }
  v40 = 0;
  do
  {
    if (PositiveAxis != v40)
    {
      v36[v37] = *(_QWORD *)(v31 + 8 * v40);
      if (v37)
        ++v37;
      else
        v37 = 2;
    }
    ++v40;
  }
  while (v33 > v40);
  v36 = (uint64_t *)v107;
LABEL_32:
  v41 = 0;
  v42 = *v36;
  v43 = v36[2];
  v44 = v36[3];
  v45 = v36[4];
  v46 = v30 - v27 + PositiveAxis;
  v103 = &v105;
  v105 = 0u;
  v106 = 0u;
  v104 = 0x400000004;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  if (v46 <= 3 && v30 == 4)
  {
    v49 = *(_QWORD *)(v28 + 8 * v46);
    *(_QWORD *)&v105 = v49;
    v48 = *(_QWORD *)(v28 + 8 * (v46 == 0));
    *((_QWORD *)&v105 + 1) = v48;
    v50 = 8;
    if (v46 <= 1)
      v50 = 16;
    v47 = *(_QWORD *)(v28 + v50);
    *(_QWORD *)&v106 = v47;
    v60 = v46 > 2;
    v51 = 24;
    if (v60)
      v51 = 16;
    v41 = *(_QWORD *)(v28 + v51);
    *((_QWORD *)&v106 + 1) = v41;
  }
  v52 = v43 * v42 * v44 * v45 * v49;
  v53 = v47 * v48 * v41;
  v54 = v53 * v52;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v98);
  v56 = sqrtf((float)v52) + (float)(sqrtf((float)v49) * -0.75);
  v57 = 2.0 - (float)(1.0 / (float)((float)((float)(v53 - 1) * 0.15) + 1.0));
  v60 = v41 == 3 && v47 == 3 && v48 == 1 && v45 < 33;
  if (v60)
    v57 = v57 + v57;
  v61 = (float)*(int *)(a3 + 36);
  v62 = v61 * 150.0;
  v63 = (float)(v61 * 150.0) * 0.4;
  v64 = (float)((float)((float)(v56 / v61) + -60.0) / 300.0) + (float)(v57 * 0.4);
  if (v64 >= 1.0)
    v65 = 0.1;
  else
    v65 = v64 * 0.1;
  v66 = (float)((float)(v56 * v57) * 0.1) / v62;
  if (v56 < v63)
    v67 = v66;
  else
    v67 = v65;
  ElementBitWidth = mlir::getElementBitWidth(v100[0]);
  v69 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v100);
  NumElements = mlir::ShapedType::getNumElements(v69, v70);
  if (ElementBitWidth)
    v72 = NumElements;
  else
    v72 = 0;
  v73 = mlir::getElementBitWidth(v99[0]);
  v74 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v99);
  v76 = mlir::ShapedType::getNumElements(v74, v75);
  if (v73)
    v77 = v76;
  else
    v77 = 0;
  v78 = v77 + v72;
  v79 = mlir::getElementBitWidth(v98[0]);
  v80 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v98);
  v82 = mlir::ShapedType::getNumElements(v80, v81);
  if (v79)
    v83 = v82;
  else
    v83 = 0;
  ParentOp = v101;
  v85 = (float)(2 * (v78 + v83));
  v102 = OperandRange;
  while (1)
  {
    v86 = *(mlir::Block **)(ParentOp + 16);
    if (!v86)
      break;
    ParentOp = mlir::Block::getParentOp(v86);
    if (!ParentOp)
      break;
    if (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id)
    {
      v87 = 1;
      goto LABEL_71;
    }
  }
  v87 = 0;
LABEL_71:
  if (*(_BYTE *)a3)
    v88 = 1;
  else
    v88 = v87;
  if (mlir::Type::isF16((mlir::Type *)&v102))
  {
    v89 = 8;
    if (v88)
      v89 = 24;
    v90 = (float *)(a3 + v89);
  }
  else
  {
    isF32 = mlir::Type::isF32((mlir::Type *)&v102);
    v92 = 12;
    if (v88)
      v92 = 28;
    v90 = (float *)(a3 + v92);
    v93 = 4;
    if (v88)
      v93 = 20;
    v94 = (float *)(a3 + v93);
    if (isF32)
      v90 = v94;
  }
  v95 = (float)(*v90 * 1.0e12) * 0.5;
  v96 = 16;
  if (v88)
    v96 = 32;
  v97 = (float)v54 / (float)(v67 * v95);
  if ((float)(v85 / (float)(*(float *)(a3 + v96) * 1000000000.0)) >= v97)
    v38 = v85 / (float)(*(float *)(a3 + v96) * 1000000000.0);
  else
    v38 = v97;
  if (v103 != &v105)
    free(v103);
  if (v107 != v109)
    free(v107);
  return v38;
}

uint64_t mlir::mps::MPSCostModel::computeCostPoolAvgOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(a3, a2);
}

uint64_t mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WindowSizes;
  uint64_t v15;
  uint64_t NumElements;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v38;
  void *__p;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48[2];
  _QWORD v49[2];
  mlir::Operation *v50;

  v50 = a2;
  v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v5 = v4;
  v49[0] = v3;
  v49[1] = v4;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8));
  v48[0] = (_QWORD *)result;
  v48[1] = v7;
  v44 = (uint64_t)v3;
  v45 = v5;
  if (!v3)
    return result;
  v8 = result;
  v9 = v7;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
  if (!(_DWORD)result)
    return result;
  result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
  if (!v10)
  {
LABEL_7:
    v44 = v8;
    v45 = v9;
    if (!v8)
      return result;
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
    if (!(_DWORD)result)
      return result;
    result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
    if (v12)
    {
      v13 = 8 * v12;
      while (*(_QWORD *)result != 0x8000000000000000)
      {
        result += 8;
        v13 -= 8;
        if (!v13)
          goto LABEL_13;
      }
      return result;
    }
LABEL_13:
    mlir::Operation::getAttrDictionary(a2);
    WindowSizes = mlir::mps::PoolAvgGradientOp::getWindowSizes((mlir::mps::PoolAvgGradientOp *)&v50);
    v15 = WindowSizes;
    if (WindowSizes && !mlir::DenseIntElementsAttr::classof(WindowSizes))
      v15 = 0;
    v47 = v15;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v44, v15, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v47);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v41, v15, NumElements);
    v17 = 1;
    while (1)
    {
      v19 = v44 == v41 && v45 == v42;
      if (v19 && v46 == v43)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v44, (llvm::APInt *)&__p);
      if (v40 > 0x40)
      {
        v18 = *(_QWORD *)__p;
        operator delete[](__p);
      }
      else
      {
        v18 = (uint64_t)((_QWORD)__p << -(uint64_t)v40) >> -(uint64_t)v40;
      }
      v17 *= v18;
      ++v46;
    }
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
    v22 = v21;
    mlir::getElementBitWidth(v3);
    v23 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v49);
    mlir::ShapedType::getNumElements(v23, v24);
    mlir::getElementBitWidth(v48[0]);
    v25 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
    mlir::ShapedType::getNumElements(v25, v26);
    v27 = v22 != 0;
    if (v22)
    {
      v28 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v28)
      {
        v29 = v28 + 1;
        v30 = (v28 + 1) & 0x3FFFFFFFFFFFFFFELL;
        v31 = (uint64_t *)(ArgAttrsAttr + 8 * v30);
        v32 = (_QWORD *)(ArgAttrsAttr + 8);
        v33 = 1;
        v34 = v30;
        do
        {
          v27 *= *(v32 - 1);
          v33 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        v27 *= v33;
        if (v29 == v30)
          goto LABEL_36;
      }
      else
      {
        v31 = (uint64_t *)ArgAttrsAttr;
      }
      do
      {
        v35 = *v31++;
        v27 *= v35;
      }
      while (v31 != (uint64_t *)(ArgAttrsAttr + 8 * v22));
    }
LABEL_36:
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v48);
    ParentOp = (uint64_t)v50;
    v44 = OperandRange;
    do
    {
      v38 = *(mlir::Block **)(ParentOp + 16);
      if (!v38)
        break;
      ParentOp = mlir::Block::getParentOp(v38);
      if (!ParentOp)
        break;
    }
    while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
    result = mlir::Type::isF16((mlir::Type *)&v44);
    if (!(_DWORD)result)
      return mlir::Type::isF32((mlir::Type *)&v44);
    return result;
  }
  v11 = 8 * v10;
  while (*(_QWORD *)result != 0x8000000000000000)
  {
    result += 8;
    v11 -= 8;
    if (!v11)
      goto LABEL_7;
  }
  return result;
}

uint64_t mlir::mps::MPSCostModel::computeCostPoolL2NormOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolAvgOp>(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostPoolMaxOp(uint64_t a1, mlir::Operation *a2, uint64_t a3)
{
  return mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolMaxOp>(a3, a2);
}

uint64_t mlir::mps::getPooling4DExecutionCost<mlir::mps::PoolMaxOp>(uint64_t a1, mlir::Operation *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WindowSizes;
  uint64_t v15;
  uint64_t NumElements;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OperandRange;
  uint64_t ParentOp;
  mlir::Block *v38;
  void *__p;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48[2];
  _QWORD v49[2];
  mlir::Operation *v50;

  v50 = a2;
  v3 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 24) + 8) & 0xFFFFFFFFFFFFFFF8));
  v5 = v4;
  v49[0] = v3;
  v49[1] = v4;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*((_QWORD *)a2 - 1) & 0xFFFFFFFFFFFFFFF8));
  v48[0] = (_QWORD *)result;
  v48[1] = v7;
  v44 = (uint64_t)v3;
  v45 = v5;
  if (!v3)
    return result;
  v8 = result;
  v9 = v7;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
  if (!(_DWORD)result)
    return result;
  result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
  if (!v10)
  {
LABEL_7:
    v44 = v8;
    v45 = v9;
    if (!v8)
      return result;
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v44);
    if (!(_DWORD)result)
      return result;
    result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v44);
    if (v12)
    {
      v13 = 8 * v12;
      while (*(_QWORD *)result != 0x8000000000000000)
      {
        result += 8;
        v13 -= 8;
        if (!v13)
          goto LABEL_13;
      }
      return result;
    }
LABEL_13:
    mlir::Operation::getAttrDictionary(a2);
    WindowSizes = mlir::mps::PoolMaxGradientOp::getWindowSizes((mlir::mps::PoolMaxGradientOp *)&v50);
    v15 = WindowSizes;
    if (WindowSizes && !mlir::DenseIntElementsAttr::classof(WindowSizes))
      v15 = 0;
    v47 = v15;
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v44, v15, 0);
    NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v47);
    mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v41, v15, NumElements);
    v17 = 1;
    while (1)
    {
      v19 = v44 == v41 && v45 == v42;
      if (v19 && v46 == v43)
        break;
      mlir::DenseElementsAttr::IntElementIterator::operator*(&v44, (llvm::APInt *)&__p);
      if (v40 > 0x40)
      {
        v18 = *(_QWORD *)__p;
        operator delete[](__p);
      }
      else
      {
        v18 = (uint64_t)((_QWORD)__p << -(uint64_t)v40) >> -(uint64_t)v40;
      }
      v17 *= v18;
      ++v46;
    }
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
    v22 = v21;
    mlir::getElementBitWidth(v3);
    v23 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v49);
    mlir::ShapedType::getNumElements(v23, v24);
    mlir::getElementBitWidth(v48[0]);
    v25 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
    mlir::ShapedType::getNumElements(v25, v26);
    v27 = v22 != 0;
    if (v22)
    {
      v28 = (v22 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v28)
      {
        v29 = v28 + 1;
        v30 = (v28 + 1) & 0x3FFFFFFFFFFFFFFELL;
        v31 = (uint64_t *)(ArgAttrsAttr + 8 * v30);
        v32 = (_QWORD *)(ArgAttrsAttr + 8);
        v33 = 1;
        v34 = v30;
        do
        {
          v27 *= *(v32 - 1);
          v33 *= *v32;
          v32 += 2;
          v34 -= 2;
        }
        while (v34);
        v27 *= v33;
        if (v29 == v30)
          goto LABEL_36;
      }
      else
      {
        v31 = (uint64_t *)ArgAttrsAttr;
      }
      do
      {
        v35 = *v31++;
        v27 *= v35;
      }
      while (v31 != (uint64_t *)(ArgAttrsAttr + 8 * v22));
    }
LABEL_36:
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v48);
    ParentOp = (uint64_t)v50;
    v44 = OperandRange;
    do
    {
      v38 = *(mlir::Block **)(ParentOp + 16);
      if (!v38)
        break;
      ParentOp = mlir::Block::getParentOp(v38);
      if (!ParentOp)
        break;
    }
    while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
    result = mlir::Type::isF16((mlir::Type *)&v44);
    if (!(_DWORD)result)
      return mlir::Type::isF32((mlir::Type *)&v44);
    return result;
  }
  v11 = 8 * v10;
  while (*(_QWORD *)result != 0x8000000000000000)
  {
    result += 8;
    v11 -= 8;
    if (!v11)
      goto LABEL_7;
  }
  return result;
}

uint64_t *mlir::mps::MPSCostModel::computeCostBiasAddOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mlir::mps::getMathOpExecutionCost(a3, a2);
}

uint64_t mlir::mps::MPSCostModel::computeCostCropResizeOp(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *ArgAttrsAttr;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int GateLayout;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ParentOp;
  mlir::Block *v24;
  _QWORD *v25[2];
  _QWORD *v26[2];
  uint64_t v27;
  uint64_t OperandRange;
  _QWORD *v29;

  v27 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v27);
  v3 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v27);
  v4 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v6 = v5;
  v26[0] = v4;
  v26[1] = v5;
  result = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8));
  v25[0] = (_QWORD *)result;
  v25[1] = v8;
  OperandRange = result;
  v29 = v8;
  if (result)
  {
    result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
    if ((_DWORD)result)
    {
      result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
      if (v9)
      {
        v10 = 8 * v9;
        while (*(_QWORD *)result != 0x8000000000000000)
        {
          result += 8;
          v10 -= 8;
          if (!v10)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        OperandRange = (uint64_t)v4;
        v29 = v6;
        if (v4)
        {
          result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&OperandRange);
          if ((_DWORD)result)
          {
            result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&OperandRange);
            if (v11)
            {
              v12 = 8 * v11;
              while (*(_QWORD *)result != 0x8000000000000000)
              {
                result += 8;
                v12 -= 8;
                if (!v12)
                  goto LABEL_13;
              }
            }
            else
            {
LABEL_13:
              OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v26);
              mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
              ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v25);
              mlir::ShapedType::getNumElements(ArgAttrsAttr, v14);
              mlir::getElementBitWidth(v25[0]);
              v15 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v25);
              mlir::ShapedType::getNumElements(v15, v16);
              GateLayout = mlir::mps::LSTMOp::getGateLayout((mlir::mps::LSTMOp *)&v27);
              v18 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v25);
              mlir::ShapedType::getNumElements(v18, v19);
              if (GateLayout == 1)
              {
                mlir::getElementBitWidth(v26[0]);
                v20 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v26);
                mlir::ShapedType::getNumElements(v20, v21);
              }
              v22 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v25);
              ParentOp = v27;
              OperandRange = v22;
              do
              {
                v24 = *(mlir::Block **)(ParentOp + 16);
                if (!v24)
                  break;
                ParentOp = mlir::Block::getParentOp(v24);
                if (!ParentOp)
                  break;
              }
              while (*(_UNKNOWN **)(*(_QWORD *)(ParentOp + 48) + 16) != &mlir::detail::TypeIDResolver<mlir::mpsx::GPUOp,void>::id);
              result = mlir::Type::isF16((mlir::Type *)&OperandRange);
              if (!(_DWORD)result)
                return mlir::Type::isF32((mlir::Type *)&OperandRange);
            }
          }
        }
      }
    }
  }
  return result;
}

float mlir::mps::detail::MPSCostModelWithDefault::defaultComputeCost()
{
  return 0.0;
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostAssignVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBandPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBiasAddGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBroadcastGradientArgsOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostBroadcastToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCallOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostColToImOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConstantOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCostVolumeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCreateComplexOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCreateTextureTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostCropOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDegammaOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDepthwiseConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDequantizeLUTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDequantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDimensionSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDiracOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostDynamicShapeCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostExpandDimsOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostFastFourierTransformOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostFlatten2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGRUGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGRUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGatherAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostGetCoordOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostHammingDistanceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostHermiteanToRealFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostImToColOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostImaginaryPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostInitRandomPhiloxStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLPNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLSTMGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostLocalConvolutionWeightGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMaterializeSparseTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixDecompositionLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixInverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostMatrixSolverLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNonMaximumSuppressionOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostNonZeroOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostOneHotOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPadGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPermuteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPlaceholderOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolAvgGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolL2NormGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPoolMaxGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPruningGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostPruningOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostQuantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomTruncatedNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRandomUniformOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRankOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReadVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRealPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostRealToHermiteanFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReinterpretCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReshapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostResizeGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostReverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSampleGridDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostScatterOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostShapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidGradientWithSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSigmoidHardOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSingleGateRNNGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSingleGateRNNOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSplitOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostSqueezeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStencilOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStridedSliceGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostStridedSliceUpdateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTileGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTileOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTopKGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTopKOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTransposeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostTypeConstraintOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostUnrealizedFoldOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostUpdateRandomStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t mlir::mps::detail::MPSCostModelWithDefault::computeCostVariableFromTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

const unsigned __int8 ***std::__call_once_proxy[abi:nn180100]<std::tuple<mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::$_0 &&>>()
{
  const unsigned __int8 **v0;
  const unsigned __int8 **v1;
  const unsigned __int8 **v2;
  const unsigned __int8 **v3;
  const unsigned __int8 **v4;
  const unsigned __int8 **v5;
  const unsigned __int8 **v6;
  const unsigned __int8 **v7;
  const unsigned __int8 **v8;
  const unsigned __int8 **v9;
  const unsigned __int8 **v10;
  const unsigned __int8 **v11;
  const unsigned __int8 **v12;
  const unsigned __int8 **v13;
  const unsigned __int8 **v14;
  const unsigned __int8 **v15;
  const unsigned __int8 **v16;
  const unsigned __int8 **v17;
  const unsigned __int8 **v18;
  const unsigned __int8 **v19;
  const unsigned __int8 **v20;
  const unsigned __int8 **v21;
  const unsigned __int8 **v22;
  const unsigned __int8 **v23;
  const unsigned __int8 **v24;
  const unsigned __int8 **v25;
  const unsigned __int8 **v26;
  const unsigned __int8 **v27;
  const unsigned __int8 **v28;
  const unsigned __int8 **v29;
  const unsigned __int8 **v30;
  const unsigned __int8 **v31;
  const unsigned __int8 **v32;
  const unsigned __int8 **v33;
  const unsigned __int8 **v34;
  const unsigned __int8 **v35;
  const unsigned __int8 **v36;
  const unsigned __int8 **v37;
  const unsigned __int8 **v38;
  const unsigned __int8 **v39;
  const unsigned __int8 **v40;
  const unsigned __int8 **v41;
  const unsigned __int8 **v42;
  const unsigned __int8 **v43;
  const unsigned __int8 **v44;
  const unsigned __int8 **v45;
  const unsigned __int8 **v46;
  const unsigned __int8 **v47;
  const unsigned __int8 **v48;
  const unsigned __int8 **v49;
  const unsigned __int8 **v50;
  const unsigned __int8 **v51;
  const unsigned __int8 **v52;
  const unsigned __int8 **v53;
  const unsigned __int8 **v54;
  const unsigned __int8 **v55;
  const unsigned __int8 **v56;
  const unsigned __int8 **v57;
  const unsigned __int8 **v58;
  const unsigned __int8 **v59;
  const unsigned __int8 **v60;
  const unsigned __int8 **v61;
  const unsigned __int8 **v62;
  const unsigned __int8 **v63;
  const unsigned __int8 **v64;
  const unsigned __int8 **v65;
  const unsigned __int8 **v66;
  const unsigned __int8 **v67;
  const unsigned __int8 **v68;
  const unsigned __int8 **v69;
  const unsigned __int8 **v70;
  const unsigned __int8 **v71;
  const unsigned __int8 **v72;
  const unsigned __int8 **v73;
  const unsigned __int8 **v74;
  const unsigned __int8 **v75;
  const unsigned __int8 **v76;
  const unsigned __int8 **v77;
  const unsigned __int8 **v78;
  const unsigned __int8 **v79;
  const unsigned __int8 **v80;
  const unsigned __int8 **v81;
  const unsigned __int8 **v82;
  const unsigned __int8 **v83;
  const unsigned __int8 **v84;
  const unsigned __int8 **v85;
  const unsigned __int8 **v86;
  const unsigned __int8 **v87;
  const unsigned __int8 **v88;
  const unsigned __int8 **v89;
  const unsigned __int8 **v90;
  const unsigned __int8 **v91;
  const unsigned __int8 **v92;
  const unsigned __int8 **v93;
  const unsigned __int8 **v94;
  const unsigned __int8 **v95;
  const unsigned __int8 **v96;
  const unsigned __int8 **v97;
  const unsigned __int8 **v98;
  const unsigned __int8 **v99;
  const unsigned __int8 **v100;
  const unsigned __int8 **v101;
  const unsigned __int8 **v102;
  const unsigned __int8 **v103;
  const unsigned __int8 **v104;
  const unsigned __int8 **v105;
  const unsigned __int8 **v106;
  const unsigned __int8 **v107;
  const unsigned __int8 **v108;
  const unsigned __int8 **v109;
  const unsigned __int8 **v110;
  const unsigned __int8 **v111;
  const unsigned __int8 **v112;
  const unsigned __int8 **v113;
  const unsigned __int8 **v114;
  const unsigned __int8 **v115;
  const unsigned __int8 **v116;
  const unsigned __int8 **v117;
  const unsigned __int8 **v118;
  const unsigned __int8 **v119;
  const unsigned __int8 **v120;
  const unsigned __int8 **v121;
  const unsigned __int8 **v122;
  const unsigned __int8 **v123;
  const unsigned __int8 **v124;
  const unsigned __int8 **v125;
  const unsigned __int8 **v126;
  const unsigned __int8 **v127;
  const unsigned __int8 **v128;
  const unsigned __int8 **v129;
  const unsigned __int8 **v130;
  const unsigned __int8 **v131;
  const unsigned __int8 **v132;
  const unsigned __int8 **v133;
  const unsigned __int8 **v134;
  const unsigned __int8 **v135;
  const unsigned __int8 **v136;
  const unsigned __int8 **v137;
  const unsigned __int8 **v138;
  const unsigned __int8 **v139;
  const unsigned __int8 **v140;
  const unsigned __int8 **v141;
  const unsigned __int8 **v142;
  const unsigned __int8 **v143;
  const unsigned __int8 **v144;
  const unsigned __int8 **v145;
  const unsigned __int8 **v146;
  const unsigned __int8 **v147;
  const unsigned __int8 **v148;
  const unsigned __int8 **v149;
  const unsigned __int8 **v150;
  const unsigned __int8 **v151;
  const unsigned __int8 **v152;
  const unsigned __int8 **v153;
  const unsigned __int8 **v154;
  const unsigned __int8 **v155;
  const unsigned __int8 **v156;
  const unsigned __int8 **v157;
  const unsigned __int8 **v158;
  const unsigned __int8 **v159;
  const unsigned __int8 **v160;
  const unsigned __int8 **v161;
  const unsigned __int8 **v162;
  const unsigned __int8 **v163;
  const unsigned __int8 **v164;
  const unsigned __int8 **v165;
  const unsigned __int8 **v166;
  const unsigned __int8 **v167;
  const unsigned __int8 **v168;
  const unsigned __int8 **v169;
  const unsigned __int8 **v170;
  const unsigned __int8 **v171;
  const unsigned __int8 **v172;
  const unsigned __int8 **v173;
  const unsigned __int8 **v174;
  const unsigned __int8 **v175;
  const unsigned __int8 **v176;
  const unsigned __int8 **v177;
  const unsigned __int8 **v178;
  const unsigned __int8 **v179;
  const unsigned __int8 **v180;
  const unsigned __int8 **v181;
  const unsigned __int8 **v182;
  const unsigned __int8 **v183;
  const unsigned __int8 **v184;
  const unsigned __int8 **v185;
  const unsigned __int8 **v186;
  const unsigned __int8 **v187;
  const unsigned __int8 **v188;
  const unsigned __int8 **v189;
  const unsigned __int8 **v190;
  const unsigned __int8 **v191;
  const unsigned __int8 **v192;
  const unsigned __int8 **v193;
  const unsigned __int8 **v194;
  const unsigned __int8 **v195;
  const unsigned __int8 **v196;
  const unsigned __int8 **v197;
  const unsigned __int8 **v198;
  const unsigned __int8 **v199;
  const unsigned __int8 **v200;
  const unsigned __int8 **v201;
  const unsigned __int8 **v202;
  const unsigned __int8 **v203;
  const unsigned __int8 **v204;
  const unsigned __int8 **v205;
  const unsigned __int8 **v206;
  const unsigned __int8 **v207;
  const unsigned __int8 **v208;
  const unsigned __int8 **v209;
  const unsigned __int8 **v210;
  const unsigned __int8 **v211;
  const unsigned __int8 **v212;
  const unsigned __int8 **v213;
  const unsigned __int8 **v214;
  const unsigned __int8 **v215;
  const unsigned __int8 **v216;
  const unsigned __int8 **v217;
  const unsigned __int8 **v218;
  const unsigned __int8 **v219;
  const unsigned __int8 ***result;
  const unsigned __int8 **v221;

  v0 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.acos", (const unsigned __int8 *)8);
  v0[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostACosOp;
  v0[2] = 0;
  v1 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.acosh", (const unsigned __int8 *)9);
  v1[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostACoshOp;
  v1[2] = 0;
  v2 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.asin", (const unsigned __int8 *)8);
  v2[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostASinOp;
  v2[2] = 0;
  v3 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.asinh", (const unsigned __int8 *)9);
  v3[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostASinhOp;
  v3[2] = 0;
  v4 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atan2", (const unsigned __int8 *)9);
  v4[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATan2Op;
  v4[2] = 0;
  v5 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atan", (const unsigned __int8 *)8);
  v5[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATanOp;
  v5[2] = 0;
  v6 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.atanh", (const unsigned __int8 *)9);
  v6[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostATanhOp;
  v6[2] = 0;
  v7 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.absolute", (const unsigned __int8 *)0xC);
  v7[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteOp;
  v7[2] = 0;
  v8 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.absolute_square", (const unsigned __int8 *)0x13);
  v8[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteSquareOp;
  v8[2] = 0;
  v9 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.add", (const unsigned __int8 *)7);
  v9[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAddOp;
  v9[2] = 0;
  v10 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.and", (const unsigned __int8 *)7);
  v10[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAndOp;
  v10[2] = 0;
  v11 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.assign_variable", (const unsigned __int8 *)0x13);
  v11[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostAssignVariableOp;
  v11[2] = 0;
  v12 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.band_part", (const unsigned __int8 *)0xD);
  v12[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBandPartOp;
  v12[2] = 0;
  v13 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.batch_to_space", (const unsigned __int8 *)0x12);
  v13[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBatchToSpaceOp;
  v13[2] = 0;
  v14 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bias_add_grad", (const unsigned __int8 *)0x11);
  v14[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddGradOp;
  v14[2] = 0;
  v15 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bias_add", (const unsigned __int8 *)0xC);
  v15[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddOp;
  v15[2] = 0;
  v16 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_and", (const unsigned __int8 *)0xF);
  v16[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseAndOp;
  v16[2] = 0;
  v17 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_left_shift", (const unsigned __int8 *)0x16);
  v17[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseLeftShiftOp;
  v17[2] = 0;
  v18 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_not", (const unsigned __int8 *)0xF);
  v18[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseNotOp;
  v18[2] = 0;
  v19 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_or", (const unsigned __int8 *)0xE);
  v19[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseOrOp;
  v19[2] = 0;
  v20 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_popcount", (const unsigned __int8 *)0x14);
  v20[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwisePopcountOp;
  v20[2] = 0;
  v21 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_right_shift", (const unsigned __int8 *)0x17);
  v21[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseRightShiftOp;
  v21[2] = 0;
  v22 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.bitwise_xor", (const unsigned __int8 *)0xF);
  v22[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseXorOp;
  v22[2] = 0;
  v23 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.broadcast_gradient_args", (const unsigned __int8 *)0x1B);
  v23[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastGradientArgsOp;
  v23[2] = 0;
  v24 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.broadcast_to", (const unsigned __int8 *)0x10);
  v24[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastToOp;
  v24[2] = 0;
  v25 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.call", (const unsigned __int8 *)8);
  v25[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCallOp;
  v25[2] = 0;
  v26 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cast", (const unsigned __int8 *)8);
  v26[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCastOp;
  v26[2] = 0;
  v27 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.ceil", (const unsigned __int8 *)8);
  v27[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCeilOp;
  v27[2] = 0;
  v28 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.clamp", (const unsigned __int8 *)9);
  v28[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostClampOp;
  v28[2] = 0;
  v29 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.col_to_im", (const unsigned __int8 *)0xD);
  v29[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostColToImOp;
  v29[2] = 0;
  v30 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.concat", (const unsigned __int8 *)0xA);
  v30[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConcatOp;
  v30[2] = 0;
  v31 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conjugate", (const unsigned __int8 *)0xD);
  v31[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConjugateOp;
  v31[2] = 0;
  v32 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.constant", (const unsigned __int8 *)0xC);
  v32[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConstantOp;
  v32[2] = 0;
  v33 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d_data_gradient", (const unsigned __int8 *)0x19);
  v33[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DDataGradientOp;
  v33[2] = 0;
  v34 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d", (const unsigned __int8 *)0xB);
  v34[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DOp;
  v34[2] = 0;
  v35 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_2d_weights_gradient", (const unsigned __int8 *)0x1C);
  v35[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DWeightsGradientOp;
  v35[2] = 0;
  v36 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d_data_gradient", (const unsigned __int8 *)0x19);
  v36[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DDataGradientOp;
  v36[2] = 0;
  v37 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d", (const unsigned __int8 *)0xB);
  v37[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DOp;
  v37[2] = 0;
  v38 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.conv_3d_weights_gradient", (const unsigned __int8 *)0x1C);
  v38[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DWeightsGradientOp;
  v38[2] = 0;
  v39 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cos", (const unsigned __int8 *)7);
  v39[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCosOp;
  v39[2] = 0;
  v40 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cosh", (const unsigned __int8 *)8);
  v40[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCoshOp;
  v40[2] = 0;
  v41 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cost_volume", (const unsigned __int8 *)0xF);
  v41[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCostVolumeOp;
  v41[2] = 0;
  v42 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.create_complex", (const unsigned __int8 *)0x12);
  v42[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCreateComplexOp;
  v42[2] = 0;
  v43 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.create_texture_tensor", (const unsigned __int8 *)0x19);
  v43[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCreateTextureTensorOp;
  v43[2] = 0;
  v44 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.crop", (const unsigned __int8 *)8);
  v44[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCropOp;
  v44[2] = 0;
  v45 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.crop_resize", (const unsigned __int8 *)0xF);
  v45[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCropResizeOp;
  v45[2] = 0;
  v46 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_maximum", (const unsigned __int8 *)0x16);
  v46[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMaximumOp;
  v46[2] = 0;
  v47 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_minimum", (const unsigned __int8 *)0x16);
  v47[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMinimumOp;
  v47[2] = 0;
  v48 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_product", (const unsigned __int8 *)0x16);
  v48[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeProductOp;
  v48[2] = 0;
  v49 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.cumulative_sum", (const unsigned __int8 *)0x12);
  v49[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeSumOp;
  v49[2] = 0;
  v50 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.degamma", (const unsigned __int8 *)0xB);
  v50[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDegammaOp;
  v50[2] = 0;
  v51 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depth_to_space_2d", (const unsigned __int8 *)0x15);
  v51[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthToSpace2DOp;
  v51[2] = 0;
  v52 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d_data_gradient", (const unsigned __int8 *)0x23);
  v52[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DDataGradientOp;
  v52[2] = 0;
  v53 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d", (const unsigned __int8 *)0x15);
  v53[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DOp;
  v53[2] = 0;
  v54 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_2d_weights_gradient", (const unsigned __int8 *)0x26);
  v54[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DWeightsGradientOp;
  v54[2] = 0;
  v55 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d_data_gradient", (const unsigned __int8 *)0x23);
  v55[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DDataGradientOp;
  v55[2] = 0;
  v56 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d", (const unsigned __int8 *)0x15);
  v56[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DOp;
  v56[2] = 0;
  v57 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.depthwise_conv_3d_weights_gradient", (const unsigned __int8 *)0x26);
  v57[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DWeightsGradientOp;
  v57[2] = 0;
  v58 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dequantize_lut", (const unsigned __int8 *)0x12);
  v58[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeLUTOp;
  v58[2] = 0;
  v59 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE);
  v59[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeOp;
  v59[2] = 0;
  v60 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dimension_size", (const unsigned __int8 *)0x12);
  v60[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDimensionSizeOp;
  v60[2] = 0;
  v61 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dirac", (const unsigned __int8 *)9);
  v61[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDiracOp;
  v61[2] = 0;
  v62 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.divide", (const unsigned __int8 *)0xA);
  v62[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDivideOp;
  v62[2] = 0;
  v63 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.dynamic_shape_cast", (const unsigned __int8 *)0x16);
  v63[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostDynamicShapeCastOp;
  v63[2] = 0;
  v64 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.elu", (const unsigned __int8 *)7);
  v64[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostEluOp;
  v64[2] = 0;
  v65 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.equal", (const unsigned __int8 *)9);
  v65[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostEqualToOp;
  v65[2] = 0;
  v66 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.erf", (const unsigned __int8 *)7);
  v66[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostErfOp;
  v66[2] = 0;
  v67 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.expand_dims", (const unsigned __int8 *)0xF);
  v67[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExpandDimsOp;
  v67[2] = 0;
  v68 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent_base_10", (const unsigned __int8 *)0x14);
  v68[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase10Op;
  v68[2] = 0;
  v69 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent_base_2", (const unsigned __int8 *)0x13);
  v69[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase2Op;
  v69[2] = 0;
  v70 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.exponent", (const unsigned __int8 *)0xC);
  v70[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostExponentOp;
  v70[2] = 0;
  v71 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.fast_fourier_transform", (const unsigned __int8 *)0x1A);
  v71[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFastFourierTransformOp;
  v71[2] = 0;
  v72 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.flatten_2d", (const unsigned __int8 *)0xE);
  v72[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFlatten2DOp;
  v72[2] = 0;
  v73 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.floor_divide", (const unsigned __int8 *)0x10);
  v73[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFloorDivideOp;
  v73[2] = 0;
  v74 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.floor", (const unsigned __int8 *)9);
  v74[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostFloorOp;
  v74[2] = 0;
  v75 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gru_gradient", (const unsigned __int8 *)0x10);
  v75[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGRUGradientOp;
  v75[2] = 0;
  v76 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gru", (const unsigned __int8 *)7);
  v76[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGRUOp;
  v76[2] = 0;
  v77 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather_along_axis", (const unsigned __int8 *)0x15);
  v77[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherAlongAxisOp;
  v77[2] = 0;
  v78 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather_nd", (const unsigned __int8 *)0xD);
  v78[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherNDOp;
  v78[2] = 0;
  v79 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gather", (const unsigned __int8 *)0xA);
  v79[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGatherOp;
  v79[2] = 0;
  v80 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.gelu", (const unsigned __int8 *)8);
  v80[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGeluOp;
  v80[2] = 0;
  v81 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.get_coordinates", (const unsigned __int8 *)0x13);
  v81[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGetCoordOp;
  v81[2] = 0;
  v82 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.greater", (const unsigned __int8 *)0xB);
  v82[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOp;
  v82[2] = 0;
  v83 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.greater_equal", (const unsigned __int8 *)0x11);
  v83[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOrEqualToOp;
  v83[2] = 0;
  v84 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.hamming_distance", (const unsigned __int8 *)0x14);
  v84[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostHammingDistanceOp;
  v84[2] = 0;
  v85 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.hermitean_to_real_fft", (const unsigned __int8 *)0x19);
  v85[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostHermiteanToRealFFTOp;
  v85[2] = 0;
  v86 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.identity", (const unsigned __int8 *)0xC);
  v86[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIdentityOp;
  v86[2] = 0;
  v87 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.im_to_col", (const unsigned __int8 *)0xD);
  v87[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostImToColOp;
  v87[2] = 0;
  v88 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.imaginary_part", (const unsigned __int8 *)0x12);
  v88[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostImaginaryPartOp;
  v88[2] = 0;
  v89 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.init_random_philox_state", (const unsigned __int8 *)0x1C);
  v89[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostInitRandomPhiloxStateOp;
  v89[2] = 0;
  v90 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.instance_norm", (const unsigned __int8 *)0x11);
  v90[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostInstanceNormOp;
  v90[2] = 0;
  v91 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_finite", (const unsigned __int8 *)0xD);
  v91[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsFiniteOp;
  v91[2] = 0;
  v92 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_infinite", (const unsigned __int8 *)0xF);
  v92[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsInfiniteOp;
  v92[2] = 0;
  v93 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.is_nan", (const unsigned __int8 *)0xA);
  v93[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostIsNaNOp;
  v93[2] = 0;
  v94 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lp_norm", (const unsigned __int8 *)0xB);
  v94[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLPNormOp;
  v94[2] = 0;
  v95 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lstm_gradient", (const unsigned __int8 *)0x11);
  v95[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMGradientOp;
  v95[2] = 0;
  v96 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.lstm", (const unsigned __int8 *)8);
  v96[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMOp;
  v96[2] = 0;
  v97 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.leaky_relu", (const unsigned __int8 *)0xE);
  v97[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLeakyReluOp;
  v97[2] = 0;
  v98 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.less", (const unsigned __int8 *)8);
  v98[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOp;
  v98[2] = 0;
  v99 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.less_equal", (const unsigned __int8 *)0xE);
  v99[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOrEqualToOp;
  v99[2] = 0;
  v100 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution_data_gradient", (const unsigned __int8 *)0x23);
  v100[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionDataGradientOp;
  v100[2] = 0;
  v101 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution", (const unsigned __int8 *)0x15);
  v101[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionOp;
  v101[2] = 0;
  v102 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.local_convolution_weight_gradient", (const unsigned __int8 *)0x25);
  v102[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionWeightGradientOp;
  v102[2] = 0;
  v103 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm_base_10", (const unsigned __int8 *)0x15);
  v103[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase10Op;
  v103[2] = 0;
  v104 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm_base_2", (const unsigned __int8 *)0x14);
  v104[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase2Op;
  v104[2] = 0;
  v105 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.logarithm", (const unsigned __int8 *)0xD);
  v105[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmOp;
  v105[2] = 0;
  v106 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matmul", (const unsigned __int8 *)0xA);
  v106[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatMulOp;
  v106[2] = 0;
  v107 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.materialize_sparse_tensor", (const unsigned __int8 *)0x1D);
  v107[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMaterializeSparseTensorOp;
  v107[2] = 0;
  v108 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_decomposition_lu", (const unsigned __int8 *)0x1B);
  v108[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixDecompositionLUOp;
  v108[2] = 0;
  v109 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_inverse", (const unsigned __int8 *)0x12);
  v109[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixInverseOp;
  v109[2] = 0;
  v110 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.matrix_solver_lu", (const unsigned __int8 *)0x14);
  v110[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixSolverLUOp;
  v110[2] = 0;
  v111 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.maximum", (const unsigned __int8 *)0xB);
  v111[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMaximumOp;
  v111[2] = 0;
  v112 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.minimum", (const unsigned __int8 *)0xB);
  v112[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMinimumOp;
  v112[2] = 0;
  v113 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.modulo", (const unsigned __int8 *)0xA);
  v113[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostModuloOp;
  v113[2] = 0;
  v114 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.multiply", (const unsigned __int8 *)0xC);
  v114[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostMultiplyOp;
  v114[2] = 0;
  v115 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.n_relu", (const unsigned __int8 *)0xA);
  v115[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNReluOp;
  v115[2] = 0;
  v116 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.nand", (const unsigned __int8 *)8);
  v116[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNandOp;
  v116[2] = 0;
  v117 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.negative", (const unsigned __int8 *)0xC);
  v117[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNegativeOp;
  v117[2] = 0;
  v118 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.non_maximum_suppression", (const unsigned __int8 *)0x1B);
  v118[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNonMaximumSuppressionOp;
  v118[2] = 0;
  v119 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.non_zero", (const unsigned __int8 *)0xC);
  v119[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNonZeroOp;
  v119[2] = 0;
  v120 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.nor", (const unsigned __int8 *)7);
  v120[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNorOp;
  v120[2] = 0;
  v121 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.normalization", (const unsigned __int8 *)0x11);
  v121[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNormalizationOp;
  v121[2] = 0;
  v122 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.not_equal", (const unsigned __int8 *)0xD);
  v122[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNotEqualToOp;
  v122[2] = 0;
  v123 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.not", (const unsigned __int8 *)7);
  v123[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostNotOp;
  v123[2] = 0;
  v124 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.one_hot", (const unsigned __int8 *)0xB);
  v124[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostOneHotOp;
  v124[2] = 0;
  v125 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.or", (const unsigned __int8 *)6);
  v125[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostOrOp;
  v125[2] = 0;
  v126 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prelu", (const unsigned __int8 *)9);
  v126[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPReluOp;
  v126[2] = 0;
  v127 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pad_gradient", (const unsigned __int8 *)0x10);
  v127[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPadGradientOp;
  v127[2] = 0;
  v128 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pad", (const unsigned __int8 *)7);
  v128[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPadOp;
  v128[2] = 0;
  v129 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.permute", (const unsigned __int8 *)0xB);
  v129[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPermuteOp;
  v129[2] = 0;
  v130 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.placeholder", (const unsigned __int8 *)0xF);
  v130[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPlaceholderOp;
  v130[2] = 0;
  v131 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_average_gradient", (const unsigned __int8 *)0x1C);
  v131[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgGradientOp;
  v131[2] = 0;
  v132 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_average", (const unsigned __int8 *)0x13);
  v132[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgOp;
  v132[2] = 0;
  v133 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_l2_norm_gradient", (const unsigned __int8 *)0x1C);
  v133[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormGradientOp;
  v133[2] = 0;
  v134 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_l2_norm", (const unsigned __int8 *)0x13);
  v134[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormOp;
  v134[2] = 0;
  v135 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_max_gradient", (const unsigned __int8 *)0x18);
  v135[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxGradientOp;
  v135[2] = 0;
  v136 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.pooling_max", (const unsigned __int8 *)0xF);
  v136[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxOp;
  v136[2] = 0;
  v137 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.power", (const unsigned __int8 *)9);
  v137[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPowerOp;
  v137[2] = 0;
  v138 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prune_gradient", (const unsigned __int8 *)0x12);
  v138[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPruningGradientOp;
  v138[2] = 0;
  v139 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.prune", (const unsigned __int8 *)9);
  v139[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostPruningOp;
  v139[2] = 0;
  v140 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.quantize", (const unsigned __int8 *)0xC);
  v140[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostQuantizeOp;
  v140[2] = 0;
  v141 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_normal", (const unsigned __int8 *)0x11);
  v141[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomNormalOp;
  v141[2] = 0;
  v142 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_truncated_normal", (const unsigned __int8 *)0x1B);
  v142[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomTruncatedNormalOp;
  v142[2] = 0;
  v143 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.random_uniform", (const unsigned __int8 *)0x12);
  v143[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRandomUniformOp;
  v143[2] = 0;
  v144 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.rank", (const unsigned __int8 *)8);
  v144[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRankOp;
  v144[2] = 0;
  v145 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.read_variable", (const unsigned __int8 *)0x11);
  v145[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReadVariableOp;
  v145[2] = 0;
  v146 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.real_part", (const unsigned __int8 *)0xD);
  v146[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRealPartOp;
  v146[2] = 0;
  v147 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.real_to_hermitean_fft", (const unsigned __int8 *)0x19);
  v147[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRealToHermiteanFFTOp;
  v147[2] = 0;
  v148 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reciprocal", (const unsigned __int8 *)0xE);
  v148[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalOp;
  v148[2] = 0;
  v149 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reciprocal_square_root", (const unsigned __int8 *)0x1A);
  v149[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalSquareRootOp;
  v149[2] = 0;
  v150 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_and", (const unsigned __int8 *)0x11);
  v150[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionAndOp;
  v150[2] = 0;
  v151 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_argmax", (const unsigned __int8 *)0x14);
  v151[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMaxOp;
  v151[2] = 0;
  v152 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_argmin", (const unsigned __int8 *)0x14);
  v152[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMinOp;
  v152[2] = 0;
  v153 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_logsumexp", (const unsigned __int8 *)0x17);
  v153[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionLogSumExpOp;
  v153[2] = 0;
  v154 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_max", (const unsigned __int8 *)0x11);
  v154[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMaxOp;
  v154[2] = 0;
  v155 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_mean", (const unsigned __int8 *)0x12);
  v155[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMeanOp;
  v155[2] = 0;
  v156 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_min", (const unsigned __int8 *)0x11);
  v156[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMinOp;
  v156[2] = 0;
  v157 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_or", (const unsigned __int8 *)0x10);
  v157[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionOrOp;
  v157[2] = 0;
  v158 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_prod", (const unsigned __int8 *)0x12);
  v158[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionProdOp;
  v158[2] = 0;
  v159 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_sum", (const unsigned __int8 *)0x11);
  v159[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionSumOp;
  v159[2] = 0;
  v160 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reduction_variance", (const unsigned __int8 *)0x16);
  v160[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReductionVarianceOp;
  v160[2] = 0;
  v161 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14);
  v161[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReinterpretCastOp;
  v161[2] = 0;
  v162 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu6", (const unsigned __int8 *)9);
  v162[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRelu6Op;
  v162[2] = 0;
  v163 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu_grad", (const unsigned __int8 *)0xD);
  v163[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReluGradOp;
  v163[2] = 0;
  v164 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.relu", (const unsigned __int8 *)8);
  v164[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReluOp;
  v164[2] = 0;
  v165 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB);
  v165[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReshapeOp;
  v165[2] = 0;
  v166 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.resize_gradient", (const unsigned __int8 *)0x13);
  v166[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostResizeGradientOp;
  v166[2] = 0;
  v167 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.resize", (const unsigned __int8 *)0xA);
  v167[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostResizeOp;
  v167[2] = 0;
  v168 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.reverse", (const unsigned __int8 *)0xB);
  v168[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostReverseOp;
  v168[2] = 0;
  v169 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.rint", (const unsigned __int8 *)8);
  v169[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRintOp;
  v169[2] = 0;
  v170 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.round", (const unsigned __int8 *)9);
  v170[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostRoundOp;
  v170[2] = 0;
  v171 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sample_grid_data_gradient", (const unsigned __int8 *)0x1D);
  v171[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridDataGradientOp;
  v171[2] = 0;
  v172 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sample_grid", (const unsigned __int8 *)0xF);
  v172[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridOp;
  v172[2] = 0;
  v173 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter_along_axis", (const unsigned __int8 *)0x16);
  v173[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterAlongAxisOp;
  v173[2] = 0;
  v174 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter_nd", (const unsigned __int8 *)0xE);
  v174[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterNDOp;
  v174[2] = 0;
  v175 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.scatter", (const unsigned __int8 *)0xB);
  v175[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostScatterOp;
  v175[2] = 0;
  v176 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.select", (const unsigned __int8 *)0xA);
  v176[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSelectOp;
  v176[2] = 0;
  v177 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.shape", (const unsigned __int8 *)9);
  v177[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostShapeOp;
  v177[2] = 0;
  v178 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_gradient", (const unsigned __int8 *)0x14);
  v178[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientOp;
  v178[2] = 0;
  v179 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_gradient_with_sigmoid", (const unsigned __int8 *)0x21);
  v179[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientWithSigmoidOp;
  v179[2] = 0;
  v180 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid_hard", (const unsigned __int8 *)0x10);
  v180[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidHardOp;
  v180[2] = 0;
  v181 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sigmoid", (const unsigned __int8 *)0xB);
  v181[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidOp;
  v181[2] = 0;
  v182 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sign", (const unsigned __int8 *)8);
  v182[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSignOp;
  v182[2] = 0;
  v183 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.signbit", (const unsigned __int8 *)0xB);
  v183[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSignbitOp;
  v183[2] = 0;
  v184 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sin", (const unsigned __int8 *)7);
  v184[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSinOp;
  v184[2] = 0;
  v185 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.singlegate_rnn_gradient", (const unsigned __int8 *)0x1B);
  v185[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNGradientOp;
  v185[2] = 0;
  v186 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.singlegate_rnn", (const unsigned __int8 *)0x12);
  v186[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNOp;
  v186[2] = 0;
  v187 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sinh", (const unsigned __int8 *)8);
  v187[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSinhOp;
  v187[2] = 0;
  v188 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.size", (const unsigned __int8 *)8);
  v188[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSizeOp;
  v188[2] = 0;
  v189 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.slice", (const unsigned __int8 *)9);
  v189[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSliceOp;
  v189[2] = 0;
  v190 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softmax", (const unsigned __int8 *)0xB);
  v190[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftmaxOp;
  v190[2] = 0;
  v191 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softplus", (const unsigned __int8 *)0xC);
  v191[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusOp;
  v191[2] = 0;
  v192 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softplus_parametric", (const unsigned __int8 *)0x17);
  v192[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusParametricOp;
  v192[2] = 0;
  v193 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.softsign", (const unsigned __int8 *)0xC);
  v193[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSoftsignOp;
  v193[2] = 0;
  v194 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.sort", (const unsigned __int8 *)8);
  v194[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSortOp;
  v194[2] = 0;
  v195 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.space_to_batch", (const unsigned __int8 *)0x12);
  v195[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToBatchOp;
  v195[2] = 0;
  v196 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.space_to_depth_2d", (const unsigned __int8 *)0x15);
  v196[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToDepth2DOp;
  v196[2] = 0;
  v197 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.split", (const unsigned __int8 *)9);
  v197[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSplitOp;
  v197[2] = 0;
  v198 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.square", (const unsigned __int8 *)0xA);
  v198[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSquareOp;
  v198[2] = 0;
  v199 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.square_root", (const unsigned __int8 *)0xF);
  v199[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSquareRootOp;
  v199[2] = 0;
  v200 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.squeeze", (const unsigned __int8 *)0xB);
  v200[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSqueezeOp;
  v200[2] = 0;
  v201 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.stencil", (const unsigned __int8 *)0xB);
  v201[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStencilOp;
  v201[2] = 0;
  v202 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice_gradient", (const unsigned __int8 *)0x1A);
  v202[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceGradientOp;
  v202[2] = 0;
  v203 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11);
  v203[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceOp;
  v203[2] = 0;
  v204 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.strided_slice_update", (const unsigned __int8 *)0x18);
  v204[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceUpdateOp;
  v204[2] = 0;
  v205 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.subtract", (const unsigned __int8 *)0xC);
  v205[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSubtractOp;
  v205[2] = 0;
  v206 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.swish", (const unsigned __int8 *)9);
  v206[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostSwishOp;
  v206[2] = 0;
  v207 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tan", (const unsigned __int8 *)7);
  v207[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTanOp;
  v207[2] = 0;
  v208 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tanh", (const unsigned __int8 *)8);
  v208[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTanhOp;
  v208[2] = 0;
  v209 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tile_gradient", (const unsigned __int8 *)0x11);
  v209[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTileGradientOp;
  v209[2] = 0;
  v210 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.tile", (const unsigned __int8 *)8);
  v210[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTileOp;
  v210[2] = 0;
  v211 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.top_k_grad", (const unsigned __int8 *)0xE);
  v211[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTopKGradientOp;
  v211[2] = 0;
  v212 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.top_k", (const unsigned __int8 *)9);
  v212[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTopKOp;
  v212[2] = 0;
  v213 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.transpose", (const unsigned __int8 *)0xD);
  v213[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTransposeOp;
  v213[2] = 0;
  v214 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.truncate", (const unsigned __int8 *)0xC);
  v214[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTruncateOp;
  v214[2] = 0;
  v215 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.type_constraint", (const unsigned __int8 *)0x13);
  v215[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostTypeConstraintOp;
  v215[2] = 0;
  v216 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.unrealized_fold", (const unsigned __int8 *)0x13);
  v216[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostUnrealizedFoldOp;
  v216[2] = 0;
  v217 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.update_random_state", (const unsigned __int8 *)0x17);
  v217[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostUpdateRandomStateOp;
  v217[2] = 0;
  v218 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.variable_from_tensor", (const unsigned __int8 *)0x18);
  v218[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostVariableFromTensorOp;
  v218[2] = 0;
  v219 = *llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.xnor", (const unsigned __int8 *)8);
  v219[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostXnorOp;
  v219[2] = 0;
  result = llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>((uint64_t)&mlir::mps::detail::MPSAbstractCostModel::getDispatchMap(void)::dispatchMap, (int8x16_t *)"mps.xor", (const unsigned __int8 *)7);
  v221 = *result;
  v221[1] = (const unsigned __int8 *)mlir::mps::detail::MPSAbstractCostModel::computeCostXorOp;
  v221[2] = 0;
  return result;
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostACosOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostACoshOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostASinOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostASinhOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATan2Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostATanhOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAbsoluteSquareOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAddOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostAssignVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBandPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBatchToSpaceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBiasAddOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseLeftShiftOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseNotOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwisePopcountOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseRightShiftOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBitwiseXorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastGradientArgsOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostBroadcastToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCallOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCeilOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostClampOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostColToImOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConcatOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConjugateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConstantOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCosOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCoshOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCostVolumeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCreateComplexOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 360))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCreateTextureTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCropOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCropResizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMaximumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeMinimumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeProductOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostCumulativeSumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDegammaOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthToSpace2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv2DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 464))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 472))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDepthwiseConv3DWeightsGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 480))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeLUTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDequantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDimensionSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDiracOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDivideOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostDynamicShapeCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostEluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostErfOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 552))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExpandDimsOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 560))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase10Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 568))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentBase2Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostExponentOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 584))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFastFourierTransformOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 592))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFlatten2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 600))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFloorDivideOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 608))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostFloorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 616))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGRUGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGRUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 640))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGatherOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 656))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGeluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 664))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGetCoordOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 672))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 680))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostGreaterThanOrEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostHammingDistanceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 696))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostHermiteanToRealFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 704))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIdentityOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 712))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostImToColOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 720))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostImaginaryPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 728))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostInitRandomPhiloxStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 736))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostInstanceNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 744))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsFiniteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 752))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsInfiniteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 760))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostIsNaNOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 768))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLPNormOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 776))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 784))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLSTMOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 792))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLeakyReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 800))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 808))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLessThanOrEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 816))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 832))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLocalConvolutionWeightGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase10Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmBase2Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostLogarithmOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatMulOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 872))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMaterializeSparseTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 880))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixDecompositionLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 888))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixInverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMatrixSolverLUOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMaximumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 912))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMinimumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostModuloOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostMultiplyOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 936))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNandOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNegativeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNonMaximumSuppressionOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNonZeroOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNormalizationOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 992))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNotEqualToOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1000))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostNotOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostOneHotOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1016))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1024))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1032))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPadGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1040))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPadOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPermuteOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPlaceholderOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1072))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolAvgOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1080))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1088))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolL2NormOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1096))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1104))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPoolMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1112))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPowerOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1120))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPruningGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1128))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostPruningOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1136))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostQuantizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1152))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomTruncatedNormalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1160))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRandomUniformOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1168))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRankOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1176))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReadVariableOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1184))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRealPartOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1192))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRealToHermiteanFFTOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1200))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1208))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReciprocalSquareRootOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1216))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionAndOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1224))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1232))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionArgMinOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1240))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionLogSumExpOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1248))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1256))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMeanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1264))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionMinOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1272))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionOrOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1280))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionProdOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionSumOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReductionVarianceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReinterpretCastOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1312))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRelu6Op(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1320))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReluGradOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1328))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReluOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1336))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReshapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1344))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostResizeGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostResizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostReverseOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1368))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRintOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1376))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostRoundOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1384))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridDataGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1392))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSampleGridOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1400))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterAlongAxisOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1408))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterNDOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1416))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostScatterOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1424))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSelectOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1432))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostShapeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1440))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1448))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidGradientWithSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1456))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidHardOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1464))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSigmoidOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1472))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSignOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1480))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSignbitOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSinOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1496))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1504))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSingleGateRNNOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1512))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSinhOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1520))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSizeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1528))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1536))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftmaxOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1544))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1552))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftplusParametricOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1560))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSoftsignOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1568))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSortOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1576))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToBatchOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1584))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSpaceToDepth2DOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSplitOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1600))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSquareOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1608))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSquareRootOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1616))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSqueezeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1624))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStencilOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1632))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1648))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostStridedSliceUpdateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1656))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSubtractOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1664))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostSwishOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTanOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1680))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTanhOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1688))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTileGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1696))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTileOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1704))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTopKGradientOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1712))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTopKOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1720))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTransposeOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1728))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTruncateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1736))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostTypeConstraintOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1744))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostUnrealizedFoldOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1752))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostUpdateRandomStateOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1760))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostVariableFromTensorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1768))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostXnorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1776))(a1);
}

uint64_t mlir::mps::detail::MPSAbstractCostModel::computeCostXorOp(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1784))(a1);
}

const unsigned __int8 ***llvm::StringMap<float (mlir::mps::detail::MPSAbstractCostModel::*)(mlir::Operation *,mlir::DeviceInfo const&),llvm::MallocAllocator>::try_emplace<>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v6;
  const unsigned __int8 ***i;
  const unsigned __int8 **v8;
  const unsigned __int8 **v9;
  _QWORD *buffer;
  const unsigned __int8 **v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (const unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (const unsigned __int8 **)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (const unsigned __int8 **)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  buffer = llvm::allocate_buffer((size_t)(a3 + 25), (std::align_val_t)8uLL);
  v11 = (const unsigned __int8 **)buffer;
  v12 = (char *)(buffer + 3);
  if (a3)
    memcpy(buffer + 3, a2, (size_t)a3);
  a3[(_QWORD)v12] = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = v11;
  ++*(_DWORD *)(a1 + 12);
  for (i = (const unsigned __int8 ***)(*(_QWORD *)a1
                                      + 8
                                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

unint64_t mlir::mps::foldTransposeOp(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *Type;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Filter;
  uint64_t Bias;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t ArgAttrsAttr;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OperandRange;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int64x2_t v56;
  int64x2_t *v57;
  int64x2_t v58;
  int64x2_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t ElementsAttr;
  void *__p;
  _BYTE *v67;
  uint64_t v68;
  void *v69[10];
  _QWORD v70[2];
  uint64_t ArgOperands;
  uint64_t v72;
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77[2];
  uint64_t v78;
  void *v79[2];
  _QWORD v80[2];

  v80[1] = *MEMORY[0x1E0C80C00];
  v75 = a3;
  v76 = a1;
  v74 = a2;
  if (!a2)
    return 0;
  v5 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v76);
  v73[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8));
  v73[1] = v6;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v73))
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v74);
  v8 = (uint64_t)Type;
  if (!Type)
    goto LABEL_12;
  v9 = *Type;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_12;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_12:
    v18 = 0;
  ArgOperands = v8;
  v72 = v18;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  v20 = v19;
  v79[0] = v80;
  v79[1] = (void *)0x100000000;
  v77[0] = &v78;
  v77[1] = (void *)0x100000000;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v76);
  if (mlir::getPositiveAxes(Filter, v20, (uint64_t)v79, 0, 0, 0)
    && (Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v76),
        mlir::getPositiveAxes(Bias, v20, (uint64_t)v77, 0, 0, 0)))
  {
    if ((a4 & 1) != 0
      || v20 < 2
      || (*(_QWORD *)v77[0] >= *(_QWORD *)v79[0] ? (v23 = *(_QWORD *)v79[0]) : (v23 = *(_QWORD *)v77[0]),
          v23 != v20 - 2
       || (*(_QWORD *)v79[0] <= *(_QWORD *)v77[0] ? (v24 = *(_QWORD *)v77[0]) : (v24 = *(_QWORD *)v79[0]),
           v24 != v20 - 1
        || (ArgOperands = *(_QWORD *)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v76),
            v72 = 0,
            v25 = 0,
            (llvm::any_of<llvm::iterator_range<mlir::ValueUserIterator<mlir::ValueUseIterator<mlir::OpOperand>,mlir::OpOperand>>,mlir::mps::foldTransposeOp(mlir::mps::TransposeOp,mlir::ElementsAttr,BOOL)::$_0>(&ArgOperands, (mlir::anec::Broadcast *)&v76) & 1) == 0))))
    {
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v73);
      v28 = v27;
      ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v74);
      v72 = v29;
      OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
      v31 = (uint64_t *)mlir::RankedTensorType::get(ArgAttrsAttr, v28, OperandRange, 0);
      if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v74))
      {
        v32 = v74;
        v33 = v75;
        if (!v31)
          goto LABEL_36;
        v34 = *v31;
        v35 = mlir::TypeID::get<mlir::ShapedType>();
        v36 = *(unsigned int *)(v34 + 16);
        if (!(_DWORD)v36)
          goto LABEL_36;
        v37 = *(_QWORD **)(v34 + 8);
        v38 = &v37[2 * v36];
        do
        {
          v39 = v36 >> 1;
          v40 = &v37[2 * (v36 >> 1)];
          v42 = *v40;
          v41 = v40 + 2;
          v36 += ~(v36 >> 1);
          if (v42 < v35)
            v37 = v41;
          else
            v36 = v39;
        }
        while (v36);
        if (v37 != v38 && *v37 == v35)
          v43 = v37[1];
        else
LABEL_36:
          v43 = 0;
        v25 = (unint64_t)mlir::reshapeElementsAttr(v32, v33, (uint64_t)v31, v43) & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        mlir::mps::CPUNDArray::CPUNDArray(&ArgOperands, v74);
        v70[0] = 0;
        v70[1] = 0;
        if (!v31)
          goto LABEL_49;
        v44 = *v31;
        v45 = mlir::TypeID::get<mlir::ShapedType>();
        v46 = *(unsigned int *)(v44 + 16);
        if (!(_DWORD)v46)
          goto LABEL_49;
        v47 = *(_QWORD **)(v44 + 8);
        v48 = &v47[2 * v46];
        do
        {
          v49 = v46 >> 1;
          v50 = &v47[2 * (v46 >> 1)];
          v52 = *v50;
          v51 = v50 + 2;
          v46 += ~(v46 >> 1);
          if (v52 < v45)
            v47 = v51;
          else
            v46 = v49;
        }
        while (v46);
        if (v47 != v48 && *v47 == v45)
          v53 = v47[1];
        else
LABEL_49:
          v53 = 0;
        mlir::mps::CPUNDArray::tryMakeAliasedArray((uint64_t)v31, v53, (uint64_t)v70, (uint64_t)v69);
        __p = 0;
        v67 = 0;
        v68 = 0;
        if (v20)
        {
          std::vector<long long>::__append((uint64_t)&__p, v20);
          v54 = __p;
          if (v20 >= 1)
          {
            if ((unint64_t)v20 >= 4)
            {
              v55 = v20 & 0x7FFFFFFFFFFFFFFCLL;
              v56 = (int64x2_t)xmmword_181233120;
              v57 = (int64x2_t *)((char *)__p + 16);
              v58 = vdupq_n_s64(2uLL);
              v59 = vdupq_n_s64(4uLL);
              v60 = v20 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v57[-1] = v56;
                *v57 = vaddq_s64(v56, v58);
                v56 = vaddq_s64(v56, v59);
                v57 += 2;
                v60 -= 4;
              }
              while (v60);
              goto LABEL_62;
            }
            v55 = 0;
            do
            {
              v54[v55] = v55;
              ++v55;
LABEL_62:
              ;
            }
            while (v20 != v55);
          }
        }
        else
        {
          v54 = 0;
        }
        v61 = *(_QWORD *)v79[0];
        v62 = *(_QWORD *)v77[0];
        v63 = v54[v61];
        v54[v61] = v54[v62];
        v54[v62] = v63;
        mlir::mps::transpose((mlir::AffineBinaryOpExpr *)&ArgOperands, (uint64_t)v69, (uint64_t)v54, (v67 - (_BYTE *)v54) >> 3);
        ElementsAttr = v70[0];
        if (!v70[0])
          ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v69, 0, 0);
        v25 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
        if (__p)
        {
          v67 = __p;
          operator delete(__p);
        }
        mlir::mps::CPUNDArray::~CPUNDArray(v69);
        mlir::mps::CPUNDArray::~CPUNDArray((void **)&ArgOperands);
      }
    }
  }
  else
  {
    v25 = 0;
  }
  if (v77[0] != &v78)
    free(v77[0]);
  if (v79[0] != v80)
    free(v79[0]);
  return v25;
}

uint64_t llvm::any_of<llvm::iterator_range<mlir::ValueUserIterator<mlir::ValueUseIterator<mlir::OpOperand>,mlir::OpOperand>>,mlir::mps::foldTransposeOp(mlir::mps::TransposeOp,mlir::ElementsAttr,BOOL)::$_0>(_QWORD *a1, mlir::anec::Broadcast *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = (_QWORD *)*a1;
  v3 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v3)
  {
    do
    {
      v5 = *(void **)(*(_QWORD *)(v2[2] + 48) + 16);
      if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id)
        v6 = v2[2];
      else
        v6 = 0;
      if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
        v7 = v2[2];
      else
        v7 = 0;
      v13 = v7;
      v14 = v6;
      v8 = mlir::anec::Broadcast::getResult(this);
      if (v7 && (v9 = *(_QWORD **)mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v13)) != 0 && !*v9)
      {
        v10 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v13);
        if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 16) + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::MatMulOp,void>::id)
          v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
        else
          v11 = 0;
        v14 = v11;
        v8 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v13);
        if (!v11)
          goto LABEL_3;
      }
      else if (!v6)
      {
        goto LABEL_3;
      }
      if (!mlir::mps::MatMulOp::getTransposeRhs((mlir::mps::MatMulOp *)&v14)
        && mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v14) == v8)
      {
        return 1;
      }
LABEL_3:
      v2 = (_QWORD *)*v2;
    }
    while (v2 != v3);
  }
  return 0;
}

_QWORD *mlir::mps::registerExternalCanonicalizeExternalModels(mlir::mps *this, mlir::DialectRegistry *a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &unk_1E0E4FF00;
  v4[1] = mlir::mps::registerExternalCanonicalizeExternalModels(mlir::DialectRegistry &)::$_0::__invoke;
  v5 = v4;
  mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>(this, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

_QWORD *mlir::mps::registerExternalFoldExternalModels(mlir::mps *this, mlir::DialectRegistry *a2)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &unk_1E0E4FF00;
  v4[1] = mlir::mps::registerExternalFoldExternalModels(mlir::DialectRegistry &)::$_0::__invoke;
  v5 = v4;
  mlir::DialectRegistry::addExtension<mlir::mps::MPSDialect>(this, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void mlir::mps::registerExternalCanonicalizeExternalModels(mlir::DialectRegistry &)::$_0::__invoke(uint64_t *a1)
{
  _QWORD *v2;
  char v3;
  _QWORD *v4;
  void *v5;
  uint64_t Values;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  const char *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  char v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  char v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  char v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  _QWORD *v67;
  char v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  const char *v76;
  __int16 v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  __int16 v81;
  _QWORD v82[5];

  v2 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.squeeze", (const unsigned __int8 *)0xB, a1);
  if (!v3)
  {
    v81 = 1283;
    v78 = "Attempting to attach an interface to an unregistered operation ";
    v79 = "mps.squeeze";
LABEL_46:
    v75 = 11;
LABEL_47:
    v80 = v75;
    v76 = ".";
    v77 = 259;
    llvm::operator+((uint64_t *)&v78, (uint64_t *)&v76, (uint64_t)v82);
    llvm::report_fatal_error((llvm::Twine *)v82, 1);
  }
  v4 = v2;
  v5 = (void *)v2[2];
  if (v5 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v2[1];
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v5 = (void *)v4[2];
  }
  else
  {
    Values = v2[3];
  }
  v7 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(Values, (uint64_t)v5, v7);
  v8 = malloc(8uLL);
  v9 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v4 + 4), v9, v8);
  v10 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.expand_dims", (const unsigned __int8 *)0xF, a1);
  if (!v11)
  {
    v81 = 1283;
    v78 = "Attempting to attach an interface to an unregistered operation ";
    v79 = "mps.expand_dims";
    v75 = 15;
    goto LABEL_47;
  }
  v12 = v10;
  v13 = (void *)v10[2];
  if (v13 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v10[1];
    v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v13 = (void *)v12[2];
  }
  else
  {
    v14 = v10[3];
  }
  v15 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v14, (uint64_t)v13, v15);
  v16 = malloc(8uLL);
  v17 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v12 + 4), v17, v16);
  v18 = "mps.flatten_2d";
  v19 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.flatten_2d", (const unsigned __int8 *)0xE, a1);
  if (!v20)
    goto LABEL_38;
  v21 = v19;
  v22 = (void *)v19[2];
  if (v22 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v19[1];
    v23 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v22 = (void *)v21[2];
  }
  else
  {
    v23 = v19[3];
  }
  v24 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v23, (uint64_t)v22, v24);
  v25 = malloc(8uLL);
  v26 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v21 + 4), v26, v25);
  v18 = "mps.dequantize";
  v27 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE, a1);
  if (!v28)
  {
LABEL_38:
    v81 = 1283;
    v78 = "Attempting to attach an interface to an unregistered operation ";
    v79 = v18;
    v75 = 14;
    goto LABEL_47;
  }
  v29 = v27;
  v30 = (void *)v27[2];
  if (v30 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v27[1];
    v31 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v30 = (void *)v29[2];
  }
  else
  {
    v31 = v27[3];
  }
  v32 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v31, (uint64_t)v30, v32);
  v33 = malloc(8uLL);
  v34 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v29 + 4), v34, v33);
  v35 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.quantize", (const unsigned __int8 *)0xC, a1);
  if (!v36)
  {
    v81 = 1283;
    v78 = "Attempting to attach an interface to an unregistered operation ";
    v79 = "mps.quantize";
    v75 = 12;
    goto LABEL_47;
  }
  v37 = v35;
  v38 = (void *)v35[2];
  if (v38 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v35[1];
    v39 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v38 = (void *)v37[2];
  }
  else
  {
    v39 = v35[3];
  }
  v40 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v39, (uint64_t)v38, v40);
  v41 = malloc(8uLL);
  v42 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v37 + 4), v42, v41);
  v43 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.cast", (const unsigned __int8 *)8, a1);
  if (!v44)
  {
    v81 = 1283;
    v78 = "Attempting to attach an interface to an unregistered operation ";
    v79 = "mps.cast";
    v75 = 8;
    goto LABEL_47;
  }
  v45 = v43;
  v46 = (void *)v43[2];
  if (v46 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v43[1];
    v47 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v46 = (void *)v45[2];
  }
  else
  {
    v47 = v43[3];
  }
  v48 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v47, (uint64_t)v46, v48);
  v49 = malloc(8uLL);
  v50 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v45 + 4), v50, v49);
  v51 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.concat", (const unsigned __int8 *)0xA, a1);
  if (!v52)
  {
    v81 = 1283;
    v78 = "Attempting to attach an interface to an unregistered operation ";
    v79 = "mps.concat";
    v75 = 10;
    goto LABEL_47;
  }
  v53 = v51;
  v54 = (void *)v51[2];
  if (v54 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v51[1];
    v55 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v54 = (void *)v53[2];
  }
  else
  {
    v55 = v51[3];
  }
  v56 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v55, (uint64_t)v54, v56);
  v57 = malloc(8uLL);
  v58 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v53 + 4), v58, v57);
  v59 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11, a1);
  if (!v60)
  {
    v81 = 1283;
    v78 = "Attempting to attach an interface to an unregistered operation ";
    v79 = "mps.strided_slice";
    v75 = 17;
    goto LABEL_47;
  }
  v61 = v59;
  v62 = (void *)v59[2];
  if (v62 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v59[1];
    v63 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v62 = (void *)v61[2];
  }
  else
  {
    v63 = v59[3];
  }
  v64 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v63, (uint64_t)v62, v64);
  v65 = malloc(8uLL);
  v66 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v61 + 4), v66, v65);
  v67 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, a1);
  if (!v68)
  {
    v81 = 1283;
    v78 = "Attempting to attach an interface to an unregistered operation ";
    v79 = "mps.reshape";
    goto LABEL_46;
  }
  v69 = v67;
  v70 = (void *)v67[2];
  if (v70 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v82[0] = v67[1];
    v71 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v82);
    v70 = (void *)v69[2];
  }
  else
  {
    v71 = v67[3];
  }
  v72 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v71, (uint64_t)v70, v72);
  v73 = malloc(8uLL);
  v74 = mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v69 + 4), v74, v73);
}

uint64_t mlir::TypeID::get<mlir::ExternalCanonicalizeInterface>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;

  v1 = &unk_1EDC07000;
  if ((v0 & 1) == 0)
  {
    v1 = (_QWORD *)&unk_1EDC07000;
    if (v3)
    {
      v11 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ExternalCanonicalizeInterface]";
      v12 = 85;
      v4 = llvm::StringRef::find((uint64_t *)&v11, "DesiredTypeName = ", 0x12uLL, 0);
      if (v12 >= v4)
        v5 = v4;
      else
        v5 = v12;
      v6 = &v11[v5];
      v7 = v12 - v5;
      if (v12 - v5 >= 0x12)
        v8 = 18;
      else
        v8 = v12 - v5;
      v9 = v7 - v8;
      if (v9 >= v9 - 1)
        v10 = v9 - 1;
      else
        v10 = v9;
      mlir::detail::TypeIDResolver<mlir::ExternalCanonicalizeInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      v1 = (_QWORD *)&unk_1EDC07000;
    }
  }
  return v1[195];
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeSqueezeExpandFlatten<mlir::mps::SqueezeOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t ArgAttrsAttr;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  size_t v32;
  unsigned int v33;
  int64x2_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  uint64_t v41;
  int32x2_t v42;
  int32x2_t v43;
  uint64_t v44;
  mlir::GenericProgramPoint *v45;
  uint64_t *v46;
  uint64_t Input;
  _QWORD v48[2];
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v49) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v48[0] = v4;
  v48[1] = v14;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48);
  if (!(_DWORD)result)
    return result;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
  if (v17)
  {
    v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 >= 3)
    {
      v21 = v18 + 1;
      v22 = (v18 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v20 = (uint64_t *)(ArgAttrsAttr + 8 * v22);
      v23 = (int64x2_t *)(ArgAttrsAttr + 16);
      v24 = 0uLL;
      v25 = vdupq_n_s64(0x8000000000000000);
      v26 = v22;
      v27 = 0uLL;
      do
      {
        v24 = vsubq_s64(v24, vceqq_s64(v23[-1], v25));
        v27 = vsubq_s64(v27, vceqq_s64(*v23, v25));
        v23 += 2;
        v26 -= 4;
      }
      while (v26);
      v19 = vaddvq_s64(vaddq_s64(v27, v24));
      if (v21 == v22)
        goto LABEL_21;
    }
    else
    {
      v19 = 0;
      v20 = (uint64_t *)ArgAttrsAttr;
    }
    do
    {
      v28 = *v20++;
      if (v28 == 0x8000000000000000)
        ++v19;
    }
    while (v20 != (uint64_t *)(ArgAttrsAttr + 8 * v17));
LABEL_21:
    if (v19 > 1)
      return 0;
  }
  v30 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
  v31 = v29;
  v50 = v52;
  v51 = 0x400000000;
  v32 = 8 * v29;
  if ((unint64_t)(8 * v29) < 0x21)
  {
    v33 = 0;
    v34 = (int64x2_t *)v52;
    if (!v29)
      goto LABEL_28;
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, (8 * v29) >> 3, 8);
  v33 = v51;
  v34 = (int64x2_t *)v50;
  if (v31)
  {
LABEL_27:
    memcpy((char *)v34 + 8 * v33, v30, v32);
    v33 = v51;
    v34 = (int64x2_t *)v50;
  }
LABEL_28:
  v35 = v33 + (v32 >> 3);
  LODWORD(v51) = v33 + (v32 >> 3);
  if ((_DWORD)v51)
  {
    v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v37 = (uint64_t *)v34;
    if (v36 < 3)
      goto LABEL_45;
    v38 = v36 + 1;
    v37 = &v34->i64[v38 & 0x3FFFFFFFFFFFFFFCLL];
    v39 = v34 + 1;
    v40 = vdupq_n_s64(0x8000000000000000);
    v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v42 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if ((v42.i8[0] & 1) != 0)
        v39[-1].i64[0] = -1;
      if ((v42.i8[4] & 1) != 0)
        v39[-1].i64[1] = -1;
      v43 = vmovn_s64(vceqq_s64(*v39, v40));
      if ((v43.i8[0] & 1) != 0)
        v39->i64[0] = -1;
      if ((v43.i8[4] & 1) != 0)
        v39->i64[1] = -1;
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      v46 = &v34->i64[v35];
      do
      {
        if (*v37 == 0x8000000000000000)
          *v37 = -1;
        ++v37;
      }
      while (v37 != v46);
    }
  }
  v44 = v49;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v49);
  v45 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,llvm::SmallVector<long long,6u>>((mlir::Builder *)(a3 + 8), *(_QWORD *)(v44 + 24), &Input, (uint64_t)&v50);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v44, v45);
  if (v50 != v52)
    free(v50);
  return 1;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeSqueezeExpandFlatten<mlir::mps::ExpandDimsOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t ArgAttrsAttr;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  size_t v32;
  unsigned int v33;
  int64x2_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  uint64_t v41;
  int32x2_t v42;
  int32x2_t v43;
  uint64_t v44;
  mlir::GenericProgramPoint *v45;
  uint64_t *v46;
  uint64_t Input;
  _QWORD v48[2];
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v49) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v48[0] = v4;
  v48[1] = v14;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48);
  if (!(_DWORD)result)
    return result;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
  if (v17)
  {
    v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 >= 3)
    {
      v21 = v18 + 1;
      v22 = (v18 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v20 = (uint64_t *)(ArgAttrsAttr + 8 * v22);
      v23 = (int64x2_t *)(ArgAttrsAttr + 16);
      v24 = 0uLL;
      v25 = vdupq_n_s64(0x8000000000000000);
      v26 = v22;
      v27 = 0uLL;
      do
      {
        v24 = vsubq_s64(v24, vceqq_s64(v23[-1], v25));
        v27 = vsubq_s64(v27, vceqq_s64(*v23, v25));
        v23 += 2;
        v26 -= 4;
      }
      while (v26);
      v19 = vaddvq_s64(vaddq_s64(v27, v24));
      if (v21 == v22)
        goto LABEL_21;
    }
    else
    {
      v19 = 0;
      v20 = (uint64_t *)ArgAttrsAttr;
    }
    do
    {
      v28 = *v20++;
      if (v28 == 0x8000000000000000)
        ++v19;
    }
    while (v20 != (uint64_t *)(ArgAttrsAttr + 8 * v17));
LABEL_21:
    if (v19 > 1)
      return 0;
  }
  v30 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
  v31 = v29;
  v50 = v52;
  v51 = 0x400000000;
  v32 = 8 * v29;
  if ((unint64_t)(8 * v29) < 0x21)
  {
    v33 = 0;
    v34 = (int64x2_t *)v52;
    if (!v29)
      goto LABEL_28;
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, (8 * v29) >> 3, 8);
  v33 = v51;
  v34 = (int64x2_t *)v50;
  if (v31)
  {
LABEL_27:
    memcpy((char *)v34 + 8 * v33, v30, v32);
    v33 = v51;
    v34 = (int64x2_t *)v50;
  }
LABEL_28:
  v35 = v33 + (v32 >> 3);
  LODWORD(v51) = v33 + (v32 >> 3);
  if ((_DWORD)v51)
  {
    v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v37 = (uint64_t *)v34;
    if (v36 < 3)
      goto LABEL_45;
    v38 = v36 + 1;
    v37 = &v34->i64[v38 & 0x3FFFFFFFFFFFFFFCLL];
    v39 = v34 + 1;
    v40 = vdupq_n_s64(0x8000000000000000);
    v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v42 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if ((v42.i8[0] & 1) != 0)
        v39[-1].i64[0] = -1;
      if ((v42.i8[4] & 1) != 0)
        v39[-1].i64[1] = -1;
      v43 = vmovn_s64(vceqq_s64(*v39, v40));
      if ((v43.i8[0] & 1) != 0)
        v39->i64[0] = -1;
      if ((v43.i8[4] & 1) != 0)
        v39->i64[1] = -1;
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      v46 = &v34->i64[v35];
      do
      {
        if (*v37 == 0x8000000000000000)
          *v37 = -1;
        ++v37;
      }
      while (v37 != v46);
    }
  }
  v44 = v49;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v49);
  v45 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,llvm::SmallVector<long long,6u>>((mlir::Builder *)(a3 + 8), *(_QWORD *)(v44 + 24), &Input, (uint64_t)&v50);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v44, v45);
  if (v50 != v52)
    free(v50);
  return 1;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeSqueezeExpandFlatten<mlir::mps::Flatten2DOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t ArgAttrsAttr;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  size_t v32;
  unsigned int v33;
  int64x2_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  uint64_t v41;
  int32x2_t v42;
  int32x2_t v43;
  uint64_t v44;
  mlir::GenericProgramPoint *v45;
  uint64_t *v46;
  uint64_t Input;
  _QWORD v48[2];
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[5];

  v52[4] = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v49) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v48[0] = v4;
  v48[1] = v14;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48);
  if (!(_DWORD)result)
    return result;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
  if (v17)
  {
    v18 = (v17 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 >= 3)
    {
      v21 = v18 + 1;
      v22 = (v18 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v20 = (uint64_t *)(ArgAttrsAttr + 8 * v22);
      v23 = (int64x2_t *)(ArgAttrsAttr + 16);
      v24 = 0uLL;
      v25 = vdupq_n_s64(0x8000000000000000);
      v26 = v22;
      v27 = 0uLL;
      do
      {
        v24 = vsubq_s64(v24, vceqq_s64(v23[-1], v25));
        v27 = vsubq_s64(v27, vceqq_s64(*v23, v25));
        v23 += 2;
        v26 -= 4;
      }
      while (v26);
      v19 = vaddvq_s64(vaddq_s64(v27, v24));
      if (v21 == v22)
        goto LABEL_21;
    }
    else
    {
      v19 = 0;
      v20 = (uint64_t *)ArgAttrsAttr;
    }
    do
    {
      v28 = *v20++;
      if (v28 == 0x8000000000000000)
        ++v19;
    }
    while (v20 != (uint64_t *)(ArgAttrsAttr + 8 * v17));
LABEL_21:
    if (v19 > 1)
      return 0;
  }
  v30 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v48);
  v31 = v29;
  v50 = v52;
  v51 = 0x400000000;
  v32 = 8 * v29;
  if ((unint64_t)(8 * v29) < 0x21)
  {
    v33 = 0;
    v34 = (int64x2_t *)v52;
    if (!v29)
      goto LABEL_28;
    goto LABEL_27;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, v52, (8 * v29) >> 3, 8);
  v33 = v51;
  v34 = (int64x2_t *)v50;
  if (v31)
  {
LABEL_27:
    memcpy((char *)v34 + 8 * v33, v30, v32);
    v33 = v51;
    v34 = (int64x2_t *)v50;
  }
LABEL_28:
  v35 = v33 + (v32 >> 3);
  LODWORD(v51) = v33 + (v32 >> 3);
  if ((_DWORD)v51)
  {
    v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v37 = (uint64_t *)v34;
    if (v36 < 3)
      goto LABEL_45;
    v38 = v36 + 1;
    v37 = &v34->i64[v38 & 0x3FFFFFFFFFFFFFFCLL];
    v39 = v34 + 1;
    v40 = vdupq_n_s64(0x8000000000000000);
    v41 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v42 = vmovn_s64(vceqq_s64(v39[-1], v40));
      if ((v42.i8[0] & 1) != 0)
        v39[-1].i64[0] = -1;
      if ((v42.i8[4] & 1) != 0)
        v39[-1].i64[1] = -1;
      v43 = vmovn_s64(vceqq_s64(*v39, v40));
      if ((v43.i8[0] & 1) != 0)
        v39->i64[0] = -1;
      if ((v43.i8[4] & 1) != 0)
        v39->i64[1] = -1;
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_45:
      v46 = &v34->i64[v35];
      do
      {
        if (*v37 == 0x8000000000000000)
          *v37 = -1;
        ++v37;
      }
      while (v37 != v46);
    }
  }
  v44 = v49;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v49);
  v45 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,llvm::SmallVector<long long,6u>>((mlir::Builder *)(a3 + 8), *(_QWORD *)(v44 + 24), &Input, (uint64_t)&v50);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v44, v45);
  if (v50 != v52)
    free(v50);
  return 1;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeQuantizeOp<mlir::mps::DequantizeOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t *Filter;
  uint64_t v5;
  uint64_t *Bias;
  uint64_t v7;
  uint64_t *SparseShape;
  uint64_t v9;
  uint64_t FastmathAttr;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  uint64_t InputAttributeNames;
  uint64_t Input;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  _QWORD v22[2];
  uint64_t v23;

  v23 = a2;
  v22[0] = a3;
  v22[1] = &v23;
  v21 = 0;
  v20 = 1;
  Filter = (uint64_t *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v23);
  v19 = v5;
  Bias = (uint64_t *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v23);
  v18 = v7;
  SparseShape = (uint64_t *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v23);
  v17 = v9;
  if (HIBYTE(v21) && (_BYTE)v21 && v20)
    FastmathAttr = 0;
  else
    FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v23);
  v16 = FastmathAttr;
  if (v5 == mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v23)
    && v7 == mlir::anec::GOC::getBias((mlir::anec::GOC *)&v23)
    && (uint64_t *)v9 == SparseShape
    && FastmathAttr == mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v23))
  {
    return 0;
  }
  v11 = v23;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v23);
  InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v23);
  v12 = mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::Value&,mlir::TypeAttr,mlir::IntegerAttr &>(a3 + 1, *(_QWORD *)(v11 + 24), &Input, &v19, &v18, &v17, &InputAttributeNames, &v16);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, v11, v12);
  return 1;
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeQuantizeOp<mlir::mps::DequantizeOp>::externalCanonicalize(mlir::Operation *,mlir::PatternRewriter &)const::{lambda(mlir::Value,BOOL &)#1}::operator()(_QWORD *a1, uint64_t *a2, _BYTE *a3)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *ArgAttrsAttr;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t DefiningOp;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t canMapOperands;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  mlir::OpBuilder *v43;
  uint64_t v44;
  uint64_t OperandRange;
  uint64_t v47;
  mlir::GenericProgramPoint *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t *v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[2];

  v4 = a2;
  v55[1] = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(a2[1] & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_10;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_10;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_10:
    v16 = 0;
  v51[0] = v6;
  v51[1] = v16;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v51))
  {
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
    if (v18)
    {
      v19 = 8 * v18;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v19 -= 8;
        if (!v19)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      v20 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v51);
      if (mlir::ShapedType::getNumElements(v20, v21) == 1)
      {
        *a3 = 1;
        return (uint64_t)v4;
      }
    }
  }
  v49 = 0;
  v50 = 0;
  v52 = v4;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v52);
  if (!DefiningOp)
    goto LABEL_37;
  v23 = DefiningOp;
  v24 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v23 + 48) + 32))(*(_QWORD *)(v23 + 48), v24))
    goto LABEL_37;
  v53 = v55;
  v54 = 0x100000000;
  mlir::Operation::fold(v23, 0, 0, (uint64_t)&v53);
  v25 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v53 & 0xFFFFFFFFFFFFFFF8));
  v27 = v25;
  if (v25)
  {
    v49 = v25;
    v50 = v26;
  }
  if (v53 != v55)
    free(v53);
  if (v27 && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49) & 1) != 0)
  {
    *a3 = 1;
    v53 = (void *)mlir::ElementsAttr::getSplatValue<mlir::TypedAttr>((mlir::CallOpInterface *)&v49);
    v54 = v28;
    canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v53);
    v30 = (uint64_t *)mlir::RankedTensorType::get(0, 0, canMapOperands, 0);
    v31 = (uint64_t)v30;
    if (!v30)
      goto LABEL_35;
    v32 = *v30;
    v33 = mlir::TypeID::get<mlir::ShapedType>();
    v34 = *(unsigned int *)(v32 + 16);
    if (!(_DWORD)v34)
      goto LABEL_35;
    v35 = *(_QWORD **)(v32 + 8);
    v36 = &v35[2 * v34];
    do
    {
      v37 = v34 >> 1;
      v38 = &v35[2 * (v34 >> 1)];
      v40 = *v38;
      v39 = v38 + 2;
      v34 += ~(v34 >> 1);
      if (v40 < v33)
        v35 = v39;
      else
        v34 = v37;
    }
    while (v34);
    if (v35 != v36 && *v35 == v33)
      v41 = v35[1];
    else
LABEL_35:
      v41 = 0;
    v52 = (uint64_t *)mlir::DenseElementsAttr::get(v31, v41, (uint64_t *)&v53, 1uLL);
    v42 = a1[1];
    v43 = (mlir::OpBuilder *)(*a1 + 8);
    v44 = *(_QWORD *)(*(_QWORD *)v42 + 24);
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v51);
    v47 = mlir::RankedTensorType::get(0, 0, OperandRange, 0);
    v48 = mlir::OpBuilder::create<mlir::mps::ConstantOp,mlir::MemRefType &,mlir::mps::MPSBufferTensorAttr &>(v43, v44, &v47, &v52);
    return mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v48);
  }
  else
  {
LABEL_37:
    *a3 = 0;
  }
  return (uint64_t)v4;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::DequantizeOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::Value&,mlir::TypeAttr,mlir::IntegerAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *Context;
  uint64_t v17;
  char v18;
  mlir::GenericProgramPoint *v19;
  mlir::GenericProgramPoint *v20;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[4];
  __int16 v26;
  _QWORD v27[39];

  v27[38] = *MEMORY[0x1E0C80C00];
  v22 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  v17 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dequantize", (const unsigned __int8 *)0xE, Context);
  if (!v18)
  {
    v26 = 1283;
    v25[2] = (uint64_t)"mps.dequantize";
    v25[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v24 = 259;
    llvm::operator+(v25, (uint64_t *)&v23, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v17);
  mlir::mps::DequantizeOp::build(a1, (uint64_t)v27, *a3, *a4, *a5, *a6, *a7, *a8);
  v19 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v19 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::DequantizeOp,void>::id)
    v20 = v19;
  else
    v20 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v20;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeQuantizeOp<mlir::mps::QuantizeOp>>::externalCanonicalize(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t *Filter;
  uint64_t v5;
  uint64_t *Bias;
  uint64_t v7;
  uint64_t FastmathAttr;
  uint64_t v9;
  mlir::GenericProgramPoint *v10;
  uint64_t InputAttributeNames;
  uint64_t Input;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  _QWORD v18[2];
  uint64_t v19;

  v19 = a2;
  v18[0] = a3;
  v18[1] = &v19;
  v17 = 0;
  Filter = (uint64_t *)mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v19);
  v16 = v5;
  Bias = (uint64_t *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v19);
  v15 = v7;
  if (HIBYTE(v17) && (_BYTE)v17)
    FastmathAttr = 0;
  else
    FastmathAttr = mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v19);
  v14 = FastmathAttr;
  if (v5 == mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v19)
    && v7 == mlir::anec::GOC::getBias((mlir::anec::GOC *)&v19)
    && FastmathAttr == mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v19))
  {
    return 0;
  }
  v9 = v19;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v19);
  InputAttributeNames = mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v19);
  v10 = mlir::OpBuilder::create<mlir::mps::QuantizeOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::TypeAttr,mlir::IntegerAttr &>(a3 + 1, *(_QWORD *)(v9 + 24), &Input, &v16, &v15, &InputAttributeNames, &v14);
  (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, v9, v10);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::QuantizeOp,mlir::Value,mlir::Value&,mlir::Value&,mlir::TypeAttr,mlir::IntegerAttr &>(mlir::UnknownLoc **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *Context;
  uint64_t v15;
  char v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v15 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.quantize", (const unsigned __int8 *)0xC, Context);
  if (!v16)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"mps.quantize";
    v23[3] = 12;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v15);
  mlir::mps::QuantizeOp::build(a1, (uint64_t)v25, *a3, *a4, *a5, *a6, *a7);
  v17 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::QuantizeOp,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v18;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeCastOp>::externalCanonicalize(uint64_t a1, uint64_t a2, mlir::UnknownLoc **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *OperandRange;
  uint64_t DefiningOp;
  void *v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *ElementTypeOrSelf;
  unint64_t ElementBitWidth;
  uint64_t v22;
  void *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  mlir::GenericProgramPoint *v31;
  uint64_t v32;
  mlir::GenericProgramPoint *v33;
  unsigned int StorageType;
  uint64_t Filter;
  mlir::GenericProgramPoint *Bias;
  mlir::GenericProgramPoint *v37;
  uint64_t v38;
  _QWORD *Type;
  _QWORD v40[2];
  _QWORD **Input;
  uint64_t v42;

  v42 = a2;
  Input = (_QWORD **)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v42);
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v42) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v40[0] = v4;
  v40[1] = v14;
  OperandRange = (_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40);
  Type = (_QWORD *)mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v42);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (DefiningOp)
  {
    v17 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
    v18 = v17 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id;
    v19 = v17 == &mlir::detail::TypeIDResolver<mlir::mps::CastOp,void>::id ? DefiningOp : 0;
    v38 = v19;
    if (v18)
    {
      v37 = (mlir::GenericProgramPoint *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v38);
      ElementTypeOrSelf = (_QWORD *)mlir::getElementTypeOrSelf((uint64_t)v37);
      {
        {
          ElementBitWidth = mlir::getElementBitWidth(ElementTypeOrSelf);
          if (ElementBitWidth <= mlir::getElementBitWidth(OperandRange))
          {
            v32 = v42;
            v33 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, *(_QWORD *)(v42 + 24), (uint64_t *)&v37, (uint64_t *)&Type);
            (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, v32, v33);
            return 1;
          }
        }
      }
    }
  }
  v22 = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (v22)
  {
    v23 = *(void **)(*(_QWORD *)(v22 + 48) + 16);
    v24 = v23 == &mlir::detail::TypeIDResolver<mlir::mps::PadOp,void>::id;
    v25 = v23 == &mlir::detail::TypeIDResolver<mlir::mps::PadOp,void>::id ? v22 : 0;
    v38 = v25;
    if (v24)
    {
      if (*Input)
      {
        if (!**Input)
        {
          {
            v27 = mlir::getElementBitWidth(Type);
            if (v27 < mlir::getElementBitWidth(OperandRange))
            {
              v28 = *(_QWORD *)(v42 + 24);
              Bias = (mlir::GenericProgramPoint *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v38);
              v37 = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, v28, (uint64_t *)&Bias, (uint64_t *)&Type);
              v29 = *(_QWORD *)(v42 + 24);
              Filter = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v38);
              Bias = mlir::OpBuilder::create<mlir::mps::CastOp,mlir::Value &,mlir::Type>(a3 + 1, v29, &Filter, (uint64_t *)&Type);
              v30 = v42;
              Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v38);
              StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v38);
              v31 = mlir::OpBuilder::create<mlir::mps::PadOp,mlir::mps::CastOp &,mlir::Value,mlir::mps::CastOp &,mlir::mps::PaddingMode>(a3 + 1, *(_QWORD *)(v30 + 24), &Bias, &Filter, &v37, &StorageType);
              (*((void (**)(mlir::UnknownLoc **, uint64_t, mlir::GenericProgramPoint *))*a3 + 4))(a3, v30, v31);
              return 1;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::mps::`anonymous namespace'::CanonicalizeCastOp::externalCanonicalize(mlir::Operation *,mlir::PatternRewriter &)const::{lambda(mlir::Type,mlir::Type)#1}::operator()(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t Value;
  uint64_t v6;
  void *v7;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(void **)(*(_QWORD *)a1 + 136);
  if ((v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) != (*(_QWORD *)(*(_QWORD *)a2 + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id))
    return 0;
  v4 = a2;
  Value = a1;
  v22 = a2;
  v23 = a1;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v6 = a1;
  else
    v6 = 0;
  v21 = v6;
  if (v6)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v21);
    v23 = Value;
    v20 = v4;
    v4 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v20);
    v22 = v4;
  }
  v7 = *(void **)(*(_QWORD *)Value + 136);
  if (v7 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v7 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
        && *(_UNKNOWN **)(*(_QWORD *)v4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  }
  v19 = *(void **)(*(_QWORD *)v4 + 136);
  if (v19 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v19 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return v7 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
        && *(_UNKNOWN **)(*(_QWORD *)v4 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  }
  if (mlir::Type::isF16((mlir::Type *)&v23) && mlir::Type::isBF16((mlir::Type *)&v22))
    return 0;
  if (mlir::Type::isBF16((mlir::Type *)&v23))
    return !mlir::Type::isF16((mlir::Type *)&v22);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::PadOp,mlir::mps::CastOp &,mlir::Value,mlir::mps::CastOp &,mlir::mps::PaddingMode>(mlir::MLIRContext **a1, uint64_t a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, unsigned int *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  mlir::GenericProgramPoint *v15;
  mlir::GenericProgramPoint *v16;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  _QWORD v23[39];

  v23[38] = *MEMORY[0x1E0C80C00];
  v18 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v18);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.pad", (const unsigned __int8 *)7, Context);
  if (!v14)
  {
    v22 = 1283;
    v21[2] = (uint64_t)"mps.pad";
    v21[3] = 7;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm::Twine *)v23, 1);
  }
  mlir::OperationState::OperationState(v23, a2, v13);
  mlir::mps::PadOp::build(a1, (uint64_t)v23, *a3 - 16, *a4, *a5 - 16, *a6);
  v15 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v23);
  if (*(_UNKNOWN **)(*((_QWORD *)v15 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::PadOp,void>::id)
    v16 = v15;
  else
    v16 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v23);
  return v16;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeConcatOp>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Values;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  mlir::GenericProgramPoint *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v23 = a2;
  Values = mlir::mps::ConcatOp::getValues((mlir::mps::ConcatOp *)&v23);
  if (v5 != 1)
    return 0;
  v22 = *(_QWORD *)(Values + 24);
  v6 = (uint64_t *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_11;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_11;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_11:
    v16 = 0;
  v21[0] = v6;
  v21[1] = v16;
  result = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v21);
  if ((_DWORD)result)
  {
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v21);
    if (v18)
      return 0;
    v19 = v23;
    v24[0] = v25;
    v25[0] = 1;
    v24[1] = (void *)0x100000001;
    v20 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,llvm::SmallVector<long long,6u>>((mlir::Builder *)(a3 + 8), *(_QWORD *)(v23 + 24), &v22, (uint64_t)v24);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v19, v20);
    if (v24[0] != v25)
      free(v24[0]);
    return 1;
  }
  return result;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeStridedSliceOp>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *ArgAttrsAttr;
  uint64_t v16;
  uint64_t v17;
  uint64_t DefiningOp;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int EndMask;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  mlir::GenericProgramPoint *v48;
  BOOL IsSize;
  unsigned int Groups;
  unsigned int Index;
  uint64_t SparseShape;
  uint64_t Bias;
  unsigned int v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t Filter;
  void *v58;
  uint64_t v59;
  _BYTE v60[16];
  void *v61[2];
  _BYTE v62[16];
  int *v63;
  uint64_t v64;
  _BYTE v65[16];
  void *v66[2];
  _QWORD v67[3];

  v67[1] = *MEMORY[0x1E0C80C00];
  v56 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v56) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v55[0] = v4;
  v55[1] = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v55))
    return 0;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55);
  if (v16)
  {
    v17 = 8 * v16;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v17 -= 8;
      if (!v17)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v61[0] = (void *)mlir::anec::GOC::getBias((mlir::anec::GOC *)&v56);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v61);
  if (!DefiningOp)
    return 0;
  v19 = DefiningOp;
  v20 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v19 + 48) + 32))(*(_QWORD *)(v19 + 48), v20))
    return 0;
  v63 = (int *)v65;
  v64 = 0x100000000;
  mlir::Operation::fold(v19, 0, 0, (uint64_t)&v63);
  v21 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v63 & 0xFFFFFFFFFFFFFFF8));
  v23 = v22;
  if (v63 != (int *)v65)
    free(v63);
  if (!v21)
    return 0;
  v61[0] = (void *)mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v56);
  v24 = mlir::Value::getDefiningOp((mlir::Value *)v61);
  if (!v24)
    return 0;
  v25 = v24;
  v26 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v25 + 48) + 32))(*(_QWORD *)(v25 + 48), v26))
    return 0;
  v63 = (int *)v65;
  v64 = 0x100000000;
  mlir::Operation::fold(v25, 0, 0, (uint64_t)&v63);
  v27 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v63 & 0xFFFFFFFFFFFFFFF8));
  v29 = v28;
  if (v63 != (int *)v65)
    free(v63);
  if (!v27)
    return 0;
  v63 = (int *)v65;
  v64 = 0x400000000;
  mlir::getIntValues<int>((uint64_t)v21, v23, (uint64_t)&v63, 1);
  v61[0] = v62;
  v61[1] = (void *)0x400000000;
  mlir::getIntValues<int>((uint64_t)v27, v29, (uint64_t)v61, 1);
  v30 = v64;
  v58 = v60;
  v59 = 0x400000000;
  if (v64 < 5)
  {
    if (!(_DWORD)v64)
      goto LABEL_34;
    v32 = 4 * v64;
    v31 = v60;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v64, 4);
    v31 = v58;
    v32 = 4 * v30;
  }
  bzero(v31, v32);
LABEL_34:
  LODWORD(v59) = v30;
  if (mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v56))
  {
    Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v56);
    v35 = mlir::Value::getDefiningOp((mlir::Value *)&Filter);
    if (!v35)
      goto LABEL_49;
    v36 = v35;
    v37 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v36 + 48) + 32))(*(_QWORD *)(v36 + 48), v37))
      goto LABEL_49;
    v66[0] = v67;
    v66[1] = (void *)0x100000000;
    mlir::Operation::fold(v36, 0, 0, (uint64_t)v66);
    v38 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v66[0] & 0xFFFFFFFFFFFFFFF8));
    v40 = v39;
    if (v66[0] != v67)
      free(v66[0]);
    if (!v38)
      goto LABEL_49;
    LODWORD(v59) = 0;
    mlir::getIntValues<int>((uint64_t)v38, v40, (uint64_t)&v58, 1);
  }
  v41 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v55);
  EndMask = mlir::mps::StridedSliceGradientOp::getEndMask((mlir::mps::StridedSliceGradientOp *)&v56);
  v54 = EndMask;
  if ((_DWORD)v64)
  {
    v43 = EndMask;
    v44 = 0;
    v45 = EndMask;
    do
    {
      v46 = v63[v44];
      if ((mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v56) & (1 << v44)) == 0)
        v46 += mlir::getPositiveAxis(*((int *)v58 + v44), *(_QWORD *)(v41 + 8 * v44));
      if (v46 > *(_QWORD *)(v41 + 8 * v44) && *((int *)v61[0] + v44) >= 1)
      {
        v45 |= 1 << v44;
        v54 = v45;
      }
      ++v44;
    }
    while (v44 < v64);
    if (v43 == v45)
    {
      v33 = 0;
    }
    else
    {
      v47 = v56;
      v66[0] = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v56);
      Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v56);
      Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v56);
      SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v56);
      Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v56);
      Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v56);
      IsSize = mlir::mps::StridedSliceOp::getEndIsSize((mlir::mps::StridedSliceOp *)&v56);
      v48 = mlir::OpBuilder::create<mlir::mps::StridedSliceOp,mlir::Value,mlir::Value,mlir::Value,mlir::Value,unsigned int,unsigned int &,unsigned int,BOOL>((mlir::Builder *)(a3 + 8), *(_QWORD *)(v47 + 24), (uint64_t *)v66, &Filter, &Bias, &SparseShape, &Index, &v54, &Groups, (char *)&IsSize);
      (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v47, v48);
      v33 = 1;
    }
    goto LABEL_53;
  }
LABEL_49:
  v33 = 0;
LABEL_53:
  if (v58 != v60)
    free(v58);
  if (v61[0] != v62)
    free(v61[0]);
  if (v63 != (int *)v65)
    free(v63);
  return v33;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::StridedSliceOp,mlir::Value,mlir::Value,mlir::Value,mlir::Value,unsigned int,unsigned int &,unsigned int,BOOL>(mlir::Builder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, char *a10)
{
  uint64_t *Context;
  uint64_t v19;
  char v20;
  mlir::GenericProgramPoint *v21;
  mlir::GenericProgramPoint *v22;
  uint64_t v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  _QWORD v29[40];

  v29[38] = *MEMORY[0x1E0C80C00];
  v24 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v24);
  v19 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11, Context);
  if (!v20)
  {
    v28 = 1283;
    v27[2] = (uint64_t)"mps.strided_slice";
    v27[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v26 = 259;
    llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v29);
    llvm::report_fatal_error((llvm::Twine *)v29, 1);
  }
  mlir::OperationState::OperationState(v29, a2, v19);
  mlir::mps::StridedSliceOp::build(a1, (uint64_t)v29, *a3, *a4, *a5, *a6, *a7, *a8, *a9, *a10);
  v21 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v29);
  if (*(_UNKNOWN **)(*((_QWORD *)v21 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::StridedSliceOp,void>::id)
    v22 = v21;
  else
    v22 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v29);
  return v22;
}

uint64_t mlir::detail::ExternalCanonicalizeInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::CanonicalizeReshapeOp>::externalCanonicalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DefiningOp;
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *ArgAttrsAttr;
  uint64_t v22;
  size_t v23;
  unsigned int v24;
  int64x2_t *v25;
  uint64_t v26;
  mlir::GenericProgramPoint *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  int64x2_t *v32;
  int64x2_t v33;
  uint64_t v34;
  int32x2_t v35;
  int32x2_t v36;
  uint64_t v37;
  mlir::GenericProgramPoint *v38;
  uint64_t *v39;
  uint64_t Filter;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  void *Input;
  uint64_t v45;
  _QWORD v46[5];

  v46[4] = *MEMORY[0x1E0C80C00];
  v43 = a2;
  Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v43);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (!DefiningOp)
    return 0;
  v5 = *(void **)(*(_QWORD *)(DefiningOp + 48) + 16);
  v6 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id;
  v7 = v5 == &mlir::detail::TypeIDResolver<mlir::mps::ReshapeOp,void>::id ? DefiningOp : 0;
  v42 = v7;
  if (!v6
    || mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v43)
    || mlir::arith::AddFOp::getFastmathAttr((mlir::arith::AddFOp *)&v42))
  {
    return 0;
  }
  v9 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v43) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v9)
    goto LABEL_20;
  v10 = *v9;
  v11 = mlir::TypeID::get<mlir::ShapedType>();
  v12 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v12)
    goto LABEL_20;
  v13 = *(_QWORD **)(v10 + 8);
  v14 = &v13[2 * v12];
  do
  {
    v15 = v12 >> 1;
    v16 = &v13[2 * (v12 >> 1)];
    v18 = *v16;
    v17 = v16 + 2;
    v12 += ~(v12 >> 1);
    if (v18 < v11)
      v13 = v17;
    else
      v12 = v15;
  }
  while (v12);
  if (v13 != v14 && *v13 == v11)
    v19 = v13[1];
  else
LABEL_20:
    v19 = 0;
  v41[0] = v9;
  v41[1] = v19;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v41))
  {
    ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v41);
    v22 = v20;
    Input = v46;
    v45 = 0x400000000;
    v23 = 8 * v20;
    if ((unint64_t)(8 * v20) < 0x21)
    {
      v24 = 0;
      v25 = (int64x2_t *)v46;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&Input, v46, (8 * v20) >> 3, 8);
      v24 = v45;
      v25 = (int64x2_t *)Input;
    }
    if (v22)
    {
      memcpy((char *)v25 + 8 * v24, ArgAttrsAttr, v23);
      v24 = v45;
      v25 = (int64x2_t *)Input;
    }
    v28 = v24 + (v23 >> 3);
    LODWORD(v45) = v24 + (v23 >> 3);
    if ((_DWORD)v45)
    {
      v29 = (v28 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v30 = (uint64_t *)v25;
      if (v29 < 3)
        goto LABEL_44;
      v31 = v29 + 1;
      v30 = &v25->i64[v31 & 0x3FFFFFFFFFFFFFFCLL];
      v32 = v25 + 1;
      v33 = vdupq_n_s64(0x8000000000000000);
      v34 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = vmovn_s64(vceqq_s64(v32[-1], v33));
        if ((v35.i8[0] & 1) != 0)
          v32[-1].i64[0] = -1;
        if ((v35.i8[4] & 1) != 0)
          v32[-1].i64[1] = -1;
        v36 = vmovn_s64(vceqq_s64(*v32, v33));
        if ((v36.i8[0] & 1) != 0)
          v32->i64[0] = -1;
        if ((v36.i8[4] & 1) != 0)
          v32->i64[1] = -1;
        v32 += 2;
        v34 -= 4;
      }
      while (v34);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_44:
        v39 = &v25->i64[v28];
        do
        {
          if (*v30 == 0x8000000000000000)
            *v30 = -1;
          ++v30;
        }
        while (v30 != v39);
      }
    }
    v37 = v43;
    Filter = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v42);
    v38 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value &,llvm::SmallVector<long long,6u>>((mlir::Builder *)(a3 + 8), *(_QWORD *)(v37 + 24), &Filter, (uint64_t)&Input);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v37, v38);
    if (Input != v46)
      free(Input);
  }
  else
  {
    v26 = v43;
    Input = (void *)mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v42);
    Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v43);
    v27 = mlir::OpBuilder::create<mlir::mps::ReshapeOp,mlir::Value,mlir::Value&>((mlir::UnitAttr **)(a3 + 8), *(_QWORD *)(v26 + 24), (uint64_t *)&Input, &Filter);
    (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a3 + 32))(a3, v26, v27);
  }
  return 1;
}

void mlir::mps::registerExternalFoldExternalModels(mlir::DialectRegistry &)::$_0::operator()(uint64_t *a1)
{
  _QWORD *v2;
  char v3;
  _QWORD *v4;
  void *v5;
  uint64_t Values;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  const char *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  const char *v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  const char *v28;
  _QWORD *v29;
  char v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  const char *v37;
  _QWORD *v38;
  char v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  const char *v46;
  _QWORD *v47;
  char v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  char v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  char v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  char v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  char v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  const char *v87;
  _QWORD *v88;
  char v89;
  _QWORD *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  _QWORD *v96;
  char v97;
  _QWORD *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  const char *v104;
  _QWORD *v105;
  char v106;
  _QWORD *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  _QWORD *v113;
  char v114;
  _QWORD *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  _QWORD *v121;
  char v122;
  _QWORD *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  const char *v129;
  _QWORD *v130;
  char v131;
  _QWORD *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  unint64_t v137;
  _QWORD *v138;
  char v139;
  _QWORD *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  const char *v146;
  _QWORD *v147;
  char v148;
  _QWORD *v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  _QWORD *v155;
  char v156;
  _QWORD *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  _QWORD *v163;
  char v164;
  _QWORD *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  _QWORD *v171;
  char v172;
  _QWORD *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  const char *v179;
  _QWORD *v180;
  char v181;
  _QWORD *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  unint64_t v187;
  _QWORD *v188;
  char v189;
  _QWORD *v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  unint64_t v195;
  _QWORD *v196;
  char v197;
  _QWORD *v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  unint64_t v203;
  _QWORD *v204;
  char v205;
  _QWORD *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  const char *v212;
  _QWORD *v213;
  char v214;
  _QWORD *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  _QWORD *v221;
  char v222;
  _QWORD *v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  const char *v229;
  _QWORD *v230;
  char v231;
  _QWORD *v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  _QWORD *v238;
  char v239;
  _QWORD *v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  const char *v246;
  _QWORD *v247;
  char v248;
  _QWORD *v249;
  void *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  _QWORD *v255;
  char v256;
  _QWORD *v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _QWORD *v263;
  char v264;
  _QWORD *v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  _QWORD *v271;
  char v272;
  _QWORD *v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  _QWORD *v279;
  char v280;
  _QWORD *v281;
  void *v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  char v288;
  _QWORD *v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  unint64_t v294;
  _QWORD *v295;
  char v296;
  _QWORD *v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  _QWORD *v303;
  char v304;
  _QWORD *v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  unint64_t v310;
  _QWORD *v311;
  char v312;
  _QWORD *v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  _QWORD *v319;
  char v320;
  _QWORD *v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  unint64_t v326;
  _QWORD *v327;
  char v328;
  _QWORD *v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  unint64_t v334;
  _QWORD *v335;
  char v336;
  _QWORD *v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  unint64_t v342;
  const char *v343;
  _QWORD *v344;
  char v345;
  _QWORD *v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  unint64_t v351;
  _QWORD *v352;
  char v353;
  _QWORD *v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  _QWORD *v358;
  unint64_t v359;
  _QWORD *v360;
  char v361;
  _QWORD *v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  unint64_t v367;
  _QWORD *v368;
  char v369;
  _QWORD *v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  unint64_t v375;
  _QWORD *v376;
  char v377;
  _QWORD *v378;
  void *v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  unint64_t v383;
  _QWORD *v384;
  char v385;
  _QWORD *v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  unint64_t v391;
  _QWORD *v392;
  char v393;
  _QWORD *v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  _QWORD *v398;
  unint64_t v399;
  _QWORD *v400;
  char v401;
  _QWORD *v402;
  void *v403;
  uint64_t v404;
  uint64_t v405;
  _QWORD *v406;
  unint64_t v407;
  _QWORD *v408;
  char v409;
  _QWORD *v410;
  void *v411;
  uint64_t v412;
  uint64_t v413;
  _QWORD *v414;
  unint64_t v415;
  _QWORD *v416;
  char v417;
  _QWORD *v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  unint64_t v423;
  _QWORD *v424;
  char v425;
  _QWORD *v426;
  void *v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  unint64_t v431;
  _QWORD *v432;
  char v433;
  _QWORD *v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  _QWORD *v438;
  unint64_t v439;
  _QWORD *v440;
  char v441;
  _QWORD *v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD *v446;
  unint64_t v447;
  _QWORD *v448;
  char v449;
  _QWORD *v450;
  void *v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  unint64_t v455;
  _QWORD *v456;
  char v457;
  _QWORD *v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  _QWORD *v462;
  unint64_t v463;
  _QWORD *v464;
  char v465;
  _QWORD *v466;
  void *v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  unint64_t v471;
  _QWORD *v472;
  char v473;
  _QWORD *v474;
  void *v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  unint64_t v479;
  _QWORD *v480;
  char v481;
  _QWORD *v482;
  void *v483;
  uint64_t v484;
  uint64_t v485;
  _QWORD *v486;
  unint64_t v487;
  _QWORD *v488;
  char v489;
  _QWORD *v490;
  void *v491;
  uint64_t v492;
  uint64_t v493;
  _QWORD *v494;
  unint64_t v495;
  uint64_t v496;
  const char *v497;
  __int16 v498;
  const char *v499;
  const char *v500;
  uint64_t v501;
  __int16 v502;
  _QWORD v503[5];

  v2 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reciprocal_square_root", (const unsigned __int8 *)0x1A, a1);
  if (!v3)
  {
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.reciprocal_square_root";
    v496 = 26;
    goto LABEL_262;
  }
  v4 = v2;
  v5 = (void *)v2[2];
  if (v5 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v2[1];
    Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v5 = (void *)v4[2];
  }
  else
  {
    Values = v2[3];
  }
  v7 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(Values, (uint64_t)v5, v7);
  v8 = malloc(0x10uLL);
  v9 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v4 + 4), v9, v8);
  v10 = "mps.reciprocal";
  v11 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reciprocal", (const unsigned __int8 *)0xE, a1);
  if (!v12)
    goto LABEL_252;
  v13 = v11;
  v14 = (void *)v11[2];
  if (v14 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v11[1];
    v15 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v14 = (void *)v13[2];
  }
  else
  {
    v15 = v11[3];
  }
  v16 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v15, (uint64_t)v14, v16);
  v17 = malloc(0x10uLL);
  v18 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v13 + 4), v18, v17);
  v19 = "mps.negative";
  v20 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.negative", (const unsigned __int8 *)0xC, a1);
  if (!v21)
    goto LABEL_249;
  v22 = v20;
  v23 = (void *)v20[2];
  if (v23 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v20[1];
    v24 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v23 = (void *)v22[2];
  }
  else
  {
    v24 = v20[3];
  }
  v25 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v24, (uint64_t)v23, v25);
  v26 = malloc(0x10uLL);
  v27 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v22 + 4), v27, v26);
  v28 = "mps.not";
  v29 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.not", (const unsigned __int8 *)7, a1);
  if (!v30)
    goto LABEL_250;
  v31 = v29;
  v32 = (void *)v29[2];
  if (v32 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v29[1];
    v33 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v32 = (void *)v31[2];
  }
  else
  {
    v33 = v29[3];
  }
  v34 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v33, (uint64_t)v32, v34);
  v35 = malloc(0x10uLL);
  v36 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v31 + 4), v36, v35);
  v37 = "mps.ceil";
  v38 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.ceil", (const unsigned __int8 *)8, a1);
  if (!v39)
    goto LABEL_245;
  v40 = v38;
  v41 = (void *)v38[2];
  if (v41 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v38[1];
    v42 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v41 = (void *)v40[2];
  }
  else
  {
    v42 = v38[3];
  }
  v43 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v42, (uint64_t)v41, v43);
  v44 = malloc(0x10uLL);
  v45 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v40 + 4), v45, v44);
  v46 = "mps.floor";
  v47 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.floor", (const unsigned __int8 *)9, a1);
  if (!v48)
    goto LABEL_244;
  v49 = v47;
  v50 = (void *)v47[2];
  if (v50 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v47[1];
    v51 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v50 = (void *)v49[2];
  }
  else
  {
    v51 = v47[3];
  }
  v52 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v51, (uint64_t)v50, v52);
  v53 = malloc(0x10uLL);
  v54 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v49 + 4), v54, v53);
  v46 = "mps.round";
  v55 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.round", (const unsigned __int8 *)9, a1);
  if (!v56)
    goto LABEL_244;
  v57 = v55;
  v58 = (void *)v55[2];
  if (v58 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v55[1];
    v59 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v58 = (void *)v57[2];
  }
  else
  {
    v59 = v55[3];
  }
  v60 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v59, (uint64_t)v58, v60);
  v61 = malloc(0x10uLL);
  v62 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v57 + 4), v62, v61);
  v28 = "mps.add";
  v63 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.add", (const unsigned __int8 *)7, a1);
  if (!v64)
    goto LABEL_250;
  v65 = v63;
  v66 = (void *)v63[2];
  if (v66 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v63[1];
    v67 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v66 = (void *)v65[2];
  }
  else
  {
    v67 = v63[3];
  }
  v68 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v67, (uint64_t)v66, v68);
  v69 = malloc(0x10uLL);
  v70 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v65 + 4), v70, v69);
  v19 = "mps.subtract";
  v71 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.subtract", (const unsigned __int8 *)0xC, a1);
  if (!v72)
    goto LABEL_249;
  v73 = v71;
  v74 = (void *)v71[2];
  if (v74 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v71[1];
    v75 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v74 = (void *)v73[2];
  }
  else
  {
    v75 = v71[3];
  }
  v76 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v75, (uint64_t)v74, v76);
  v77 = malloc(0x10uLL);
  v78 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v73 + 4), v78, v77);
  v19 = "mps.multiply";
  v79 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.multiply", (const unsigned __int8 *)0xC, a1);
  if (!v80)
  {
LABEL_249:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v19;
LABEL_261:
    v496 = 12;
LABEL_262:
    v501 = v496;
    v497 = ".";
    v498 = 259;
    llvm::operator+((uint64_t *)&v499, (uint64_t *)&v497, (uint64_t)v503);
    llvm::report_fatal_error((llvm::Twine *)v503, 1);
  }
  v81 = v79;
  v82 = (void *)v79[2];
  if (v82 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v79[1];
    v83 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v82 = (void *)v81[2];
  }
  else
  {
    v83 = v79[3];
  }
  v84 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v83, (uint64_t)v82, v84);
  v85 = malloc(0x10uLL);
  v86 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v81 + 4), v86, v85);
  v87 = "mps.divide";
  v88 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.divide", (const unsigned __int8 *)0xA, a1);
  if (!v89)
    goto LABEL_246;
  v90 = v88;
  v91 = (void *)v88[2];
  if (v91 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v88[1];
    v92 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v91 = (void *)v90[2];
  }
  else
  {
    v92 = v88[3];
  }
  v93 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v92, (uint64_t)v91, v93);
  v94 = malloc(0x10uLL);
  v95 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v90 + 4), v95, v94);
  v87 = "mps.modulo";
  v96 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.modulo", (const unsigned __int8 *)0xA, a1);
  if (!v97)
    goto LABEL_246;
  v98 = v96;
  v99 = (void *)v96[2];
  if (v99 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v96[1];
    v100 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v99 = (void *)v98[2];
  }
  else
  {
    v100 = v96[3];
  }
  v101 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v100, (uint64_t)v99, v101);
  v102 = malloc(0x10uLL);
  v103 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v98 + 4), v103, v102);
  v104 = "mps.minimum";
  v105 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.minimum", (const unsigned __int8 *)0xB, a1);
  if (!v106)
    goto LABEL_242;
  v107 = v105;
  v108 = (void *)v105[2];
  if (v108 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v105[1];
    v109 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v108 = (void *)v107[2];
  }
  else
  {
    v109 = v105[3];
  }
  v110 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v109, (uint64_t)v108, v110);
  v111 = malloc(0x10uLL);
  v112 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v107 + 4), v112, v111);
  v104 = "mps.maximum";
  v113 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.maximum", (const unsigned __int8 *)0xB, a1);
  if (!v114)
    goto LABEL_242;
  v115 = v113;
  v116 = (void *)v113[2];
  if (v116 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v113[1];
    v117 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v116 = (void *)v115[2];
  }
  else
  {
    v117 = v113[3];
  }
  v118 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v117, (uint64_t)v116, v118);
  v119 = malloc(0x10uLL);
  v120 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v115 + 4), v120, v119);
  v46 = "mps.equal";
  v121 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.equal", (const unsigned __int8 *)9, a1);
  if (!v122)
  {
LABEL_244:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v46;
    v496 = 9;
    goto LABEL_262;
  }
  v123 = v121;
  v124 = (void *)v121[2];
  if (v124 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v121[1];
    v125 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v124 = (void *)v123[2];
  }
  else
  {
    v125 = v121[3];
  }
  v126 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v125, (uint64_t)v124, v126);
  v127 = malloc(0x10uLL);
  v128 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v123 + 4), v128, v127);
  v129 = "mps.not_equal";
  v130 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.not_equal", (const unsigned __int8 *)0xD, a1);
  if (!v131)
    goto LABEL_248;
  v132 = v130;
  v133 = (void *)v130[2];
  if (v133 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v130[1];
    v134 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v133 = (void *)v132[2];
  }
  else
  {
    v134 = v130[3];
  }
  v135 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v134, (uint64_t)v133, v135);
  v136 = malloc(0x10uLL);
  v137 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v132 + 4), v137, v136);
  v104 = "mps.greater";
  v138 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.greater", (const unsigned __int8 *)0xB, a1);
  if (!v139)
    goto LABEL_242;
  v140 = v138;
  v141 = (void *)v138[2];
  if (v141 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v138[1];
    v142 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v141 = (void *)v140[2];
  }
  else
  {
    v142 = v138[3];
  }
  v143 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v142, (uint64_t)v141, v143);
  v144 = malloc(0x10uLL);
  v145 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v140 + 4), v145, v144);
  v146 = "mps.greater_equal";
  v147 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.greater_equal", (const unsigned __int8 *)0x11, a1);
  if (!v148)
    goto LABEL_243;
  v149 = v147;
  v150 = (void *)v147[2];
  if (v150 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v147[1];
    v151 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v150 = (void *)v149[2];
  }
  else
  {
    v151 = v147[3];
  }
  v152 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v151, (uint64_t)v150, v152);
  v153 = malloc(0x10uLL);
  v154 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v149 + 4), v154, v153);
  v37 = "mps.less";
  v155 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.less", (const unsigned __int8 *)8, a1);
  if (!v156)
    goto LABEL_245;
  v157 = v155;
  v158 = (void *)v155[2];
  if (v158 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v155[1];
    v159 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v158 = (void *)v157[2];
  }
  else
  {
    v159 = v155[3];
  }
  v160 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v159, (uint64_t)v158, v160);
  v161 = malloc(0x10uLL);
  v162 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v157 + 4), v162, v161);
  v10 = "mps.less_equal";
  v163 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.less_equal", (const unsigned __int8 *)0xE, a1);
  if (!v164)
  {
LABEL_252:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v10;
    v496 = 14;
    goto LABEL_262;
  }
  v165 = v163;
  v166 = (void *)v163[2];
  if (v166 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v163[1];
    v167 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v166 = (void *)v165[2];
  }
  else
  {
    v167 = v163[3];
  }
  v168 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v167, (uint64_t)v166, v168);
  v169 = malloc(0x10uLL);
  v170 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v165 + 4), v170, v169);
  v146 = "mps.reduction_and";
  v171 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_and", (const unsigned __int8 *)0x11, a1);
  if (!v172)
    goto LABEL_243;
  v173 = v171;
  v174 = (void *)v171[2];
  if (v174 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v171[1];
    v175 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v174 = (void *)v173[2];
  }
  else
  {
    v175 = v171[3];
  }
  v176 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v175, (uint64_t)v174, v176);
  v177 = malloc(0x10uLL);
  v178 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v173 + 4), v178, v177);
  v179 = "mps.reduction_argmax";
  v180 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_argmax", (const unsigned __int8 *)0x14, a1);
  if (!v181)
    goto LABEL_251;
  v182 = v180;
  v183 = (void *)v180[2];
  if (v183 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v180[1];
    v184 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v183 = (void *)v182[2];
  }
  else
  {
    v184 = v180[3];
  }
  v185 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v184, (uint64_t)v183, v185);
  v186 = malloc(0x10uLL);
  v187 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v182 + 4), v187, v186);
  v179 = "mps.reduction_argmin";
  v188 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_argmin", (const unsigned __int8 *)0x14, a1);
  if (!v189)
    goto LABEL_251;
  v190 = v188;
  v191 = (void *)v188[2];
  if (v191 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v188[1];
    v192 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v191 = (void *)v190[2];
  }
  else
  {
    v192 = v188[3];
  }
  v193 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v192, (uint64_t)v191, v193);
  v194 = malloc(0x10uLL);
  v195 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v190 + 4), v195, v194);
  v196 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_logsumexp", (const unsigned __int8 *)0x17, a1);
  if (!v197)
  {
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.reduction_logsumexp";
    v496 = 23;
    goto LABEL_262;
  }
  v198 = v196;
  v199 = (void *)v196[2];
  if (v199 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v196[1];
    v200 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v199 = (void *)v198[2];
  }
  else
  {
    v200 = v196[3];
  }
  v201 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v200, (uint64_t)v199, v201);
  v202 = malloc(0x10uLL);
  v203 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v198 + 4), v203, v202);
  v146 = "mps.reduction_max";
  v204 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_max", (const unsigned __int8 *)0x11, a1);
  if (!v205)
    goto LABEL_243;
  v206 = v204;
  v207 = (void *)v204[2];
  if (v207 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v204[1];
    v208 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v207 = (void *)v206[2];
  }
  else
  {
    v208 = v204[3];
  }
  v209 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v208, (uint64_t)v207, v209);
  v210 = malloc(0x10uLL);
  v211 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v206 + 4), v211, v210);
  v212 = "mps.reduction_mean";
  v213 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_mean", (const unsigned __int8 *)0x12, a1);
  if (!v214)
    goto LABEL_247;
  v215 = v213;
  v216 = (void *)v213[2];
  if (v216 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v213[1];
    v217 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v216 = (void *)v215[2];
  }
  else
  {
    v217 = v213[3];
  }
  v218 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v217, (uint64_t)v216, v218);
  v219 = malloc(0x10uLL);
  v220 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v215 + 4), v220, v219);
  v146 = "mps.reduction_min";
  v221 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_min", (const unsigned __int8 *)0x11, a1);
  if (!v222)
    goto LABEL_243;
  v223 = v221;
  v224 = (void *)v221[2];
  if (v224 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v221[1];
    v225 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v224 = (void *)v223[2];
  }
  else
  {
    v225 = v221[3];
  }
  v226 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v225, (uint64_t)v224, v226);
  v227 = malloc(0x10uLL);
  v228 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v223 + 4), v228, v227);
  v229 = "mps.reduction_or";
  v230 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_or", (const unsigned __int8 *)0x10, a1);
  if (!v231)
    goto LABEL_254;
  v232 = v230;
  v233 = (void *)v230[2];
  if (v233 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v230[1];
    v234 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v233 = (void *)v232[2];
  }
  else
  {
    v234 = v230[3];
  }
  v235 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v234, (uint64_t)v233, v235);
  v236 = malloc(0x10uLL);
  v237 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v232 + 4), v237, v236);
  v146 = "mps.reduction_sum";
  v238 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_sum", (const unsigned __int8 *)0x11, a1);
  if (!v239)
    goto LABEL_243;
  v240 = v238;
  v241 = (void *)v238[2];
  if (v241 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v238[1];
    v242 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v241 = (void *)v240[2];
  }
  else
  {
    v242 = v238[3];
  }
  v243 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v242, (uint64_t)v241, v243);
  v244 = malloc(0x10uLL);
  v245 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v240 + 4), v245, v244);
  v246 = "mps.reduction_variance";
  v247 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_variance", (const unsigned __int8 *)0x16, a1);
  if (!v248)
    goto LABEL_253;
  v249 = v247;
  v250 = (void *)v247[2];
  if (v250 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v247[1];
    v251 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v250 = (void *)v249[2];
  }
  else
  {
    v251 = v247[3];
  }
  v252 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v251, (uint64_t)v250, v252);
  v253 = malloc(0x10uLL);
  v254 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v249 + 4), v254, v253);
  v87 = "mps.select";
  v255 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.select", (const unsigned __int8 *)0xA, a1);
  if (!v256)
    goto LABEL_246;
  v257 = v255;
  v258 = (void *)v255[2];
  if (v258 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v255[1];
    v259 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v258 = (void *)v257[2];
  }
  else
  {
    v259 = v255[3];
  }
  v260 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v259, (uint64_t)v258, v260);
  v261 = malloc(0x10uLL);
  v262 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v257 + 4), v262, v261);
  v46 = "mps.power";
  v263 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.power", (const unsigned __int8 *)9, a1);
  if (!v264)
    goto LABEL_244;
  v265 = v263;
  v266 = (void *)v263[2];
  if (v266 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v263[1];
    v267 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v266 = (void *)v265[2];
  }
  else
  {
    v267 = v263[3];
  }
  v268 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v267, (uint64_t)v266, v268);
  v269 = malloc(0x10uLL);
  v270 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v265 + 4), v270, v269);
  v129 = "mps.transpose";
  v271 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.transpose", (const unsigned __int8 *)0xD, a1);
  if (!v272)
    goto LABEL_248;
  v273 = v271;
  v274 = (void *)v271[2];
  if (v274 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v271[1];
    v275 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v274 = (void *)v273[2];
  }
  else
  {
    v275 = v271[3];
  }
  v276 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v275, (uint64_t)v274, v276);
  v277 = malloc(0x10uLL);
  v278 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v273 + 4), v278, v277);
  v104 = "mps.permute";
  v279 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.permute", (const unsigned __int8 *)0xB, a1);
  if (!v280)
    goto LABEL_242;
  v281 = v279;
  v282 = (void *)v279[2];
  if (v282 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v279[1];
    v283 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v282 = (void *)v281[2];
  }
  else
  {
    v283 = v279[3];
  }
  v284 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v283, (uint64_t)v282, v284);
  v285 = malloc(0x10uLL);
  v286 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v281 + 4), v286, v285);
  v104 = "mps.scatter";
  v287 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.scatter", (const unsigned __int8 *)0xB, a1);
  if (!v288)
    goto LABEL_242;
  v289 = v287;
  v290 = (void *)v287[2];
  if (v290 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v287[1];
    v291 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v290 = (void *)v289[2];
  }
  else
  {
    v291 = v287[3];
  }
  v292 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v291, (uint64_t)v290, v292);
  v293 = malloc(0x10uLL);
  v294 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v289 + 4), v294, v293);
  v87 = "mps.gather";
  v295 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.gather", (const unsigned __int8 *)0xA, a1);
  if (!v296)
  {
LABEL_246:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v87;
    v496 = 10;
    goto LABEL_262;
  }
  v297 = v295;
  v298 = (void *)v295[2];
  if (v298 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v295[1];
    v299 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v298 = (void *)v297[2];
  }
  else
  {
    v299 = v295[3];
  }
  v300 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v299, (uint64_t)v298, v300);
  v301 = malloc(0x10uLL);
  v302 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v297 + 4), v302, v301);
  v46 = "mps.slice";
  v303 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.slice", (const unsigned __int8 *)9, a1);
  if (!v304)
    goto LABEL_244;
  v305 = v303;
  v306 = (void *)v303[2];
  if (v306 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v303[1];
    v307 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v306 = (void *)v305[2];
  }
  else
  {
    v307 = v303[3];
  }
  v308 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v307, (uint64_t)v306, v308);
  v309 = malloc(0x10uLL);
  v310 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v305 + 4), v310, v309);
  v146 = "mps.strided_slice";
  v311 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.strided_slice", (const unsigned __int8 *)0x11, a1);
  if (!v312)
  {
LABEL_243:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v146;
    v496 = 17;
    goto LABEL_262;
  }
  v313 = v311;
  v314 = (void *)v311[2];
  if (v314 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v311[1];
    v315 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v314 = (void *)v313[2];
  }
  else
  {
    v315 = v311[3];
  }
  v316 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v315, (uint64_t)v314, v316);
  v317 = malloc(0x10uLL);
  v318 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v313 + 4), v318, v317);
  v37 = "mps.crop";
  v319 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.crop", (const unsigned __int8 *)8, a1);
  if (!v320)
    goto LABEL_245;
  v321 = v319;
  v322 = (void *)v319[2];
  if (v322 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v319[1];
    v323 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v322 = (void *)v321[2];
  }
  else
  {
    v323 = v319[3];
  }
  v324 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v323, (uint64_t)v322, v324);
  v325 = malloc(0x10uLL);
  v326 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v321 + 4), v326, v325);
  v87 = "mps.concat";
  v327 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.concat", (const unsigned __int8 *)0xA, a1);
  if (!v328)
    goto LABEL_246;
  v329 = v327;
  v330 = (void *)v327[2];
  if (v330 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v327[1];
    v331 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v330 = (void *)v329[2];
  }
  else
  {
    v331 = v327[3];
  }
  v332 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v331, (uint64_t)v330, v332);
  v333 = malloc(0x10uLL);
  v334 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v329 + 4), v334, v333);
  v104 = "mps.reshape";
  v335 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reshape", (const unsigned __int8 *)0xB, a1);
  if (!v336)
    goto LABEL_242;
  v337 = v335;
  v338 = (void *)v335[2];
  if (v338 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v335[1];
    v339 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v338 = (void *)v337[2];
  }
  else
  {
    v339 = v335[3];
  }
  v340 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v339, (uint64_t)v338, v340);
  v341 = malloc(0x10uLL);
  v342 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v337 + 4), v342, v341);
  v343 = "mps.get_coordinates";
  v344 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.get_coordinates", (const unsigned __int8 *)0x13, a1);
  if (!v345)
    goto LABEL_255;
  v346 = v344;
  v347 = (void *)v344[2];
  if (v347 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v344[1];
    v348 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v347 = (void *)v346[2];
  }
  else
  {
    v348 = v344[3];
  }
  v349 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v348, (uint64_t)v347, v349);
  v350 = malloc(0x10uLL);
  v351 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v346 + 4), v351, v350);
  v352 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.init_random_philox_state", (const unsigned __int8 *)0x1C, a1);
  if (!v353)
  {
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.init_random_philox_state";
    v496 = 28;
    goto LABEL_262;
  }
  v354 = v352;
  v355 = (void *)v352[2];
  if (v355 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v352[1];
    v356 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v355 = (void *)v354[2];
  }
  else
  {
    v356 = v352[3];
  }
  v357 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v356, (uint64_t)v355, v357);
  v358 = malloc(0x10uLL);
  v359 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v354 + 4), v359, v358);
  v28 = "mps.pad";
  v360 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.pad", (const unsigned __int8 *)7, a1);
  if (!v361)
  {
LABEL_250:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v28;
    v496 = 7;
    goto LABEL_262;
  }
  v362 = v360;
  v363 = (void *)v360[2];
  if (v363 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v360[1];
    v364 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v363 = (void *)v362[2];
  }
  else
  {
    v364 = v360[3];
  }
  v365 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v364, (uint64_t)v363, v365);
  v366 = malloc(0x10uLL);
  v367 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v362 + 4), v367, v366);
  v37 = "mps.cast";
  v368 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.cast", (const unsigned __int8 *)8, a1);
  if (!v369)
    goto LABEL_245;
  v370 = v368;
  v371 = (void *)v368[2];
  if (v371 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v368[1];
    v372 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v371 = (void *)v370[2];
  }
  else
  {
    v372 = v368[3];
  }
  v373 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v372, (uint64_t)v371, v373);
  v374 = malloc(0x10uLL);
  v375 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v370 + 4), v375, v374);
  v179 = "mps.reinterpret_cast";
  v376 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reinterpret_cast", (const unsigned __int8 *)0x14, a1);
  if (!v377)
  {
LABEL_251:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v179;
    v496 = 20;
    goto LABEL_262;
  }
  v378 = v376;
  v379 = (void *)v376[2];
  if (v379 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v376[1];
    v380 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v379 = (void *)v378[2];
  }
  else
  {
    v380 = v376[3];
  }
  v381 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v380, (uint64_t)v379, v381);
  v382 = malloc(0x10uLL);
  v383 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v378 + 4), v383, v382);
  v46 = "mps.shape";
  v384 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.shape", (const unsigned __int8 *)9, a1);
  if (!v385)
    goto LABEL_244;
  v386 = v384;
  v387 = (void *)v384[2];
  if (v387 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v384[1];
    v388 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v387 = (void *)v386[2];
  }
  else
  {
    v388 = v384[3];
  }
  v389 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v388, (uint64_t)v387, v389);
  v390 = malloc(0x10uLL);
  v391 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v386 + 4), v391, v390);
  v37 = "mps.rank";
  v392 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.rank", (const unsigned __int8 *)8, a1);
  if (!v393)
    goto LABEL_245;
  v394 = v392;
  v395 = (void *)v392[2];
  if (v395 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v392[1];
    v396 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v395 = (void *)v394[2];
  }
  else
  {
    v396 = v392[3];
  }
  v397 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v396, (uint64_t)v395, v397);
  v398 = malloc(0x10uLL);
  v399 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v394 + 4), v399, v398);
  v37 = "mps.size";
  v400 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.size", (const unsigned __int8 *)8, a1);
  if (!v401)
  {
LABEL_245:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v37;
    v496 = 8;
    goto LABEL_262;
  }
  v402 = v400;
  v403 = (void *)v400[2];
  if (v403 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v400[1];
    v404 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v403 = (void *)v402[2];
  }
  else
  {
    v404 = v400[3];
  }
  v405 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v404, (uint64_t)v403, v405);
  v406 = malloc(0x10uLL);
  v407 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v402 + 4), v407, v406);
  v212 = "mps.dimension_size";
  v408 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dimension_size", (const unsigned __int8 *)0x12, a1);
  if (!v409)
    goto LABEL_247;
  v410 = v408;
  v411 = (void *)v408[2];
  if (v411 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v408[1];
    v412 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v411 = (void *)v410[2];
  }
  else
  {
    v412 = v408[3];
  }
  v413 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v412, (uint64_t)v411, v413);
  v414 = malloc(0x10uLL);
  v415 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v410 + 4), v415, v414);
  v246 = "mps.dynamic_shape_cast";
  v416 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.dynamic_shape_cast", (const unsigned __int8 *)0x16, a1);
  if (!v417)
  {
LABEL_253:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v246;
    v496 = 22;
    goto LABEL_262;
  }
  v418 = v416;
  v419 = (void *)v416[2];
  if (v419 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v416[1];
    v420 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v419 = (void *)v418[2];
  }
  else
  {
    v420 = v416[3];
  }
  v421 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v420, (uint64_t)v419, v421);
  v422 = malloc(0x10uLL);
  v423 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v418 + 4), v423, v422);
  v229 = "mps.broadcast_to";
  v424 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.broadcast_to", (const unsigned __int8 *)0x10, a1);
  if (!v425)
  {
LABEL_254:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v229;
    v496 = 16;
    goto LABEL_262;
  }
  v426 = v424;
  v427 = (void *)v424[2];
  if (v427 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v424[1];
    v428 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v427 = (void *)v426[2];
  }
  else
  {
    v428 = v424[3];
  }
  v429 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v428, (uint64_t)v427, v429);
  v430 = malloc(0x10uLL);
  v431 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v426 + 4), v431, v430);
  v432 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.broadcast_gradient_args", (const unsigned __int8 *)0x1B, a1);
  if (!v433)
  {
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.broadcast_gradient_args";
    v496 = 27;
    goto LABEL_262;
  }
  v434 = v432;
  v435 = (void *)v432[2];
  if (v435 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v432[1];
    v436 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v435 = (void *)v434[2];
  }
  else
  {
    v436 = v432[3];
  }
  v437 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v436, (uint64_t)v435, v437);
  v438 = malloc(0x10uLL);
  v439 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v434 + 4), v439, v438);
  v212 = "mps.reduction_prod";
  v440 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.reduction_prod", (const unsigned __int8 *)0x12, a1);
  if (!v441)
    goto LABEL_247;
  v442 = v440;
  v443 = (void *)v440[2];
  if (v443 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v440[1];
    v444 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v443 = (void *)v442[2];
  }
  else
  {
    v444 = v440[3];
  }
  v445 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v444, (uint64_t)v443, v445);
  v446 = malloc(0x10uLL);
  v447 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v442 + 4), v447, v446);
  v104 = "mps.conv_2d";
  v448 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.conv_2d", (const unsigned __int8 *)0xB, a1);
  if (!v449)
  {
LABEL_242:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v104;
    v496 = 11;
    goto LABEL_262;
  }
  v450 = v448;
  v451 = (void *)v448[2];
  if (v451 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v448[1];
    v452 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v451 = (void *)v450[2];
  }
  else
  {
    v452 = v448[3];
  }
  v453 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v452, (uint64_t)v451, v453);
  v454 = malloc(0x10uLL);
  v455 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v450 + 4), v455, v454);
  v343 = "mps.type_constraint";
  v456 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.type_constraint", (const unsigned __int8 *)0x13, a1);
  if (!v457)
  {
LABEL_255:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v343;
    v496 = 19;
    goto LABEL_262;
  }
  v458 = v456;
  v459 = (void *)v456[2];
  if (v459 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v456[1];
    v460 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v459 = (void *)v458[2];
  }
  else
  {
    v460 = v456[3];
  }
  v461 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v460, (uint64_t)v459, v461);
  v462 = malloc(0x10uLL);
  v463 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v458 + 4), v463, v462);
  v129 = "mps.real_part";
  v464 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.real_part", (const unsigned __int8 *)0xD, a1);
  if (!v465)
    goto LABEL_248;
  v466 = v464;
  v467 = (void *)v464[2];
  if (v467 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v464[1];
    v468 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v467 = (void *)v466[2];
  }
  else
  {
    v468 = v464[3];
  }
  v469 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v468, (uint64_t)v467, v469);
  v470 = malloc(0x10uLL);
  v471 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v466 + 4), v471, v470);
  v212 = "mps.imaginary_part";
  v472 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.imaginary_part", (const unsigned __int8 *)0x12, a1);
  if (!v473)
  {
LABEL_247:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v212;
    v496 = 18;
    goto LABEL_262;
  }
  v474 = v472;
  v475 = (void *)v472[2];
  if (v475 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v472[1];
    v476 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v475 = (void *)v474[2];
  }
  else
  {
    v476 = v472[3];
  }
  v477 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v476, (uint64_t)v475, v477);
  v478 = malloc(0x10uLL);
  v479 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v474 + 4), v479, v478);
  v129 = "mps.conjugate";
  v480 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.conjugate", (const unsigned __int8 *)0xD, a1);
  if (!v481)
  {
LABEL_248:
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = v129;
    v496 = 13;
    goto LABEL_262;
  }
  v482 = v480;
  v483 = (void *)v480[2];
  if (v483 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v480[1];
    v484 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v483 = (void *)v482[2];
  }
  else
  {
    v484 = v480[3];
  }
  v485 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v484, (uint64_t)v483, v485);
  v486 = malloc(0x10uLL);
  v487 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v482 + 4), v487, v486);
  v488 = (_QWORD *)mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.non_zero", (const unsigned __int8 *)0xC, a1);
  if (!v489)
  {
    v502 = 1283;
    v499 = "Attempting to attach an interface to an unregistered operation ";
    v500 = "mps.non_zero";
    goto LABEL_261;
  }
  v490 = v488;
  v491 = (void *)v488[2];
  if (v491 == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v503[0] = v488[1];
    v492 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v503);
    v491 = (void *)v490[2];
  }
  else
  {
    v492 = v488[3];
  }
  v493 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(v492, (uint64_t)v491, v493);
  v494 = malloc(0x10uLL);
  v495 = mlir::TypeID::get<mlir::ExternalFoldInterface>();
  mlir::detail::InterfaceMap::insert((uint64_t)(v490 + 4), v495, v494);
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::ReciprocalSquareRootOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *Type;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t ElementsAttr;
  unint64_t v21;
  void *__p;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  _BYTE v35[32];
  void *v36[10];
  _QWORD v37[2];
  void *v38[10];
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  if (!*a3)
  {
    v41 = 0;
    v42 = 0;
    return 0;
  }
  v41 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v42 = v3;
  if (!v41)
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
  v5 = (uint64_t)Type;
  if (!Type)
    goto LABEL_14;
  v6 = *Type;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_14;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_14:
    v15 = 0;
  v39 = v5;
  v40 = v15;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v39))
    return 0;
  mlir::mps::CPUNDArray::CPUNDArray(v38, v41);
  v37[0] = 0;
  v37[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v39, v40, (uint64_t)v37, (uint64_t)v36);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v35, 6, 0.0);
  v16 = operator new(8uLL);
  v32 = v16;
  *v16 = v38;
  v33 = v16 + 1;
  v34 = v16 + 1;
  v17 = operator new(8uLL);
  v29 = v17;
  *v17 = v36;
  v30 = v17 + 1;
  v31 = v17 + 1;
  v18 = operator new(8uLL);
  v26 = v18;
  *v18 = 0;
  v27 = v18 + 1;
  v28 = v18 + 1;
  v19 = operator new(8uLL);
  __p = v19;
  *v19 = 0;
  v24 = v19 + 1;
  v25 = v19 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v35, (uint64_t *)&v32, (uint64_t **)&v29, (uint64_t)&v26, (uint64_t)&__p, 0, (uint64_t)v38[2], (uint64_t)v35);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  ElementsAttr = v37[0];
  if (!v37[0])
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v36, 0, 0);
  v21 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray(v36);
  mlir::mps::CPUNDArray::~CPUNDArray(v38);
  return v21;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::ReciprocalSquareRootOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::ReciprocalOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *Type;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t ElementsAttr;
  unint64_t v21;
  void *__p;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  _BYTE v35[32];
  void *v36[10];
  _QWORD v37[2];
  void *v38[10];
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  if (!*a3)
  {
    v41 = 0;
    v42 = 0;
    return 0;
  }
  v41 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v42 = v3;
  if (!v41)
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
  v5 = (uint64_t)Type;
  if (!Type)
    goto LABEL_14;
  v6 = *Type;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_14;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_14:
    v15 = 0;
  v39 = v5;
  v40 = v15;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v39))
    return 0;
  mlir::mps::CPUNDArray::CPUNDArray(v38, v41);
  v37[0] = 0;
  v37[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v39, v40, (uint64_t)v37, (uint64_t)v36);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v35, 12, 0.0);
  v16 = operator new(8uLL);
  v32 = v16;
  *v16 = v38;
  v33 = v16 + 1;
  v34 = v16 + 1;
  v17 = operator new(8uLL);
  v29 = v17;
  *v17 = v36;
  v30 = v17 + 1;
  v31 = v17 + 1;
  v18 = operator new(8uLL);
  v26 = v18;
  *v18 = 0;
  v27 = v18 + 1;
  v28 = v18 + 1;
  v19 = operator new(8uLL);
  __p = v19;
  *v19 = 0;
  v24 = v19 + 1;
  v25 = v19 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v35, (uint64_t *)&v32, (uint64_t **)&v29, (uint64_t)&v26, (uint64_t)&__p, 0, (uint64_t)v38[2], (uint64_t)v35);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  ElementsAttr = v37[0];
  if (!v37[0])
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v36, 0, 0);
  v21 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray(v36);
  mlir::mps::CPUNDArray::~CPUNDArray(v38);
  return v21;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::ReciprocalOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::NegativeOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *Type;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t ElementsAttr;
  unint64_t v21;
  void *__p;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  _BYTE v35[32];
  void *v36[10];
  _QWORD v37[2];
  void *v38[10];
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  if (!*a3)
  {
    v41 = 0;
    v42 = 0;
    return 0;
  }
  v41 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v42 = v3;
  if (!v41)
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
  v5 = (uint64_t)Type;
  if (!Type)
    goto LABEL_14;
  v6 = *Type;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_14;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_14:
    v15 = 0;
  v39 = v5;
  v40 = v15;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v39))
    return 0;
  mlir::mps::CPUNDArray::CPUNDArray(v38, v41);
  v37[0] = 0;
  v37[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v39, v40, (uint64_t)v37, (uint64_t)v36);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v35, 9, 0.0);
  v16 = operator new(8uLL);
  v32 = v16;
  *v16 = v38;
  v33 = v16 + 1;
  v34 = v16 + 1;
  v17 = operator new(8uLL);
  v29 = v17;
  *v17 = v36;
  v30 = v17 + 1;
  v31 = v17 + 1;
  v18 = operator new(8uLL);
  v26 = v18;
  *v18 = 0;
  v27 = v18 + 1;
  v28 = v18 + 1;
  v19 = operator new(8uLL);
  __p = v19;
  *v19 = 0;
  v24 = v19 + 1;
  v25 = v19 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v35, (uint64_t *)&v32, (uint64_t **)&v29, (uint64_t)&v26, (uint64_t)&__p, 0, (uint64_t)v38[2], (uint64_t)v35);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  ElementsAttr = v37[0];
  if (!v37[0])
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v36, 0, 0);
  v21 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray(v36);
  mlir::mps::CPUNDArray::~CPUNDArray(v38);
  return v21;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::NegativeOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::NotOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *Type;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t ElementsAttr;
  unint64_t v21;
  void *__p;
  void *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  _BYTE v35[32];
  void *v36[10];
  _QWORD v37[2];
  void *v38[10];
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  if (!*a3)
  {
    v41 = 0;
    v42 = 0;
    return 0;
  }
  v41 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v42 = v3;
  if (!v41)
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
  v5 = (uint64_t)Type;
  if (!Type)
    goto LABEL_14;
  v6 = *Type;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_14;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_14:
    v15 = 0;
  v39 = v5;
  v40 = v15;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v39))
    return 0;
  mlir::mps::CPUNDArray::CPUNDArray(v38, v41);
  v37[0] = 0;
  v37[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v39, v40, (uint64_t)v37, (uint64_t)v36);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v35, 10, 0.0);
  v16 = operator new(8uLL);
  v32 = v16;
  *v16 = v38;
  v33 = v16 + 1;
  v34 = v16 + 1;
  v17 = operator new(8uLL);
  v29 = v17;
  *v17 = v36;
  v30 = v17 + 1;
  v31 = v17 + 1;
  v18 = operator new(8uLL);
  v26 = v18;
  *v18 = 0;
  v27 = v18 + 1;
  v28 = v18 + 1;
  v19 = operator new(8uLL);
  __p = v19;
  *v19 = 0;
  v24 = v19 + 1;
  v25 = v19 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v35, (uint64_t *)&v32, (uint64_t **)&v29, (uint64_t)&v26, (uint64_t)&__p, 0, (uint64_t)v38[2], (uint64_t)v35);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  ElementsAttr = v37[0];
  if (!v37[0])
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v36, 0, 0);
  v21 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray(v36);
  mlir::mps::CPUNDArray::~CPUNDArray(v38);
  return v21;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::NotOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::CeilOp>>::externalFold(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t Input;
  uint64_t v5;
  unint64_t v6;
  uint64_t *Type;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t ElementsAttr;
  void *__p;
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  _BYTE v37[32];
  void *v38[10];
  _QWORD v39[2];
  void *v40[10];
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v40[0] = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v40);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v40) | 4;
  if (!*a3)
  {
    v43 = 0;
    v44 = 0;
    return 0;
  }
  v43 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v44 = v5;
  if (!v43)
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v43);
  v8 = (uint64_t)Type;
  if (!Type)
    goto LABEL_16;
  v9 = *Type;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_16;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_16:
    v18 = 0;
  v41 = v8;
  v42 = v18;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v41))
    return 0;
  mlir::mps::CPUNDArray::CPUNDArray(v40, v43);
  v39[0] = 0;
  v39[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v41, v42, (uint64_t)v39, (uint64_t)v38);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v37, 7, 0.0);
  v19 = operator new(8uLL);
  v34 = v19;
  *v19 = v40;
  v35 = v19 + 1;
  v36 = v19 + 1;
  v20 = operator new(8uLL);
  v31 = v20;
  *v20 = v38;
  v32 = v20 + 1;
  v33 = v20 + 1;
  v21 = operator new(8uLL);
  v28 = v21;
  *v21 = 0;
  v29 = v21 + 1;
  v30 = v21 + 1;
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = 0;
  v26 = v22 + 1;
  v27 = v22 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v37, (uint64_t *)&v34, (uint64_t **)&v31, (uint64_t)&v28, (uint64_t)&__p, 0, (uint64_t)v40[2], (uint64_t)v37);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  ElementsAttr = v39[0];
  if (!v39[0])
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v38, 0, 0);
  v6 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray(v38);
  mlir::mps::CPUNDArray::~CPUNDArray(v40);
  return v6;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::CeilOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::FloorOp>>::externalFold(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t Input;
  uint64_t v5;
  unint64_t v6;
  uint64_t *Type;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t ElementsAttr;
  void *__p;
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  _BYTE v37[32];
  void *v38[10];
  _QWORD v39[2];
  void *v40[10];
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v40[0] = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v40);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v40) | 4;
  if (!*a3)
  {
    v43 = 0;
    v44 = 0;
    return 0;
  }
  v43 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v44 = v5;
  if (!v43)
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v43);
  v8 = (uint64_t)Type;
  if (!Type)
    goto LABEL_16;
  v9 = *Type;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_16;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_16:
    v18 = 0;
  v41 = v8;
  v42 = v18;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v41))
    return 0;
  mlir::mps::CPUNDArray::CPUNDArray(v40, v43);
  v39[0] = 0;
  v39[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v41, v42, (uint64_t)v39, (uint64_t)v38);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v37, 8, 0.0);
  v19 = operator new(8uLL);
  v34 = v19;
  *v19 = v40;
  v35 = v19 + 1;
  v36 = v19 + 1;
  v20 = operator new(8uLL);
  v31 = v20;
  *v20 = v38;
  v32 = v20 + 1;
  v33 = v20 + 1;
  v21 = operator new(8uLL);
  v28 = v21;
  *v21 = 0;
  v29 = v21 + 1;
  v30 = v21 + 1;
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = 0;
  v26 = v22 + 1;
  v27 = v22 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v37, (uint64_t *)&v34, (uint64_t **)&v31, (uint64_t)&v28, (uint64_t)&__p, 0, (uint64_t)v40[2], (uint64_t)v37);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  ElementsAttr = v39[0];
  if (!v39[0])
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v38, 0, 0);
  v6 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray(v38);
  mlir::mps::CPUNDArray::~CPUNDArray(v40);
  return v6;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::FloorOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::RoundOp>>::externalFold(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t Input;
  uint64_t v5;
  unint64_t v6;
  uint64_t *Type;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t ElementsAttr;
  void *__p;
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  _BYTE v37[32];
  void *v38[10];
  _QWORD v39[2];
  void *v40[10];
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v40[0] = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v40);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)v40) | 4;
  if (!*a3)
  {
    v43 = 0;
    v44 = 0;
    return 0;
  }
  v43 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v44 = v5;
  if (!v43)
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v43);
  v8 = (uint64_t)Type;
  if (!Type)
    goto LABEL_16;
  v9 = *Type;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_16;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_16:
    v18 = 0;
  v41 = v8;
  v42 = v18;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v41))
    return 0;
  mlir::mps::CPUNDArray::CPUNDArray(v40, v43);
  v39[0] = 0;
  v39[1] = 0;
  mlir::mps::CPUNDArray::tryMakeAliasedArray(v41, v42, (uint64_t)v39, (uint64_t)v38);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v37, 11, 0.0);
  v19 = operator new(8uLL);
  v34 = v19;
  *v19 = v40;
  v35 = v19 + 1;
  v36 = v19 + 1;
  v20 = operator new(8uLL);
  v31 = v20;
  *v20 = v38;
  v32 = v20 + 1;
  v33 = v20 + 1;
  v21 = operator new(8uLL);
  v28 = v21;
  *v21 = 0;
  v29 = v21 + 1;
  v30 = v21 + 1;
  v22 = operator new(8uLL);
  __p = v22;
  *v22 = 0;
  v26 = v22 + 1;
  v27 = v22 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v37, (uint64_t *)&v34, (uint64_t **)&v31, (uint64_t)&v28, (uint64_t)&__p, 0, (uint64_t)v40[2], (uint64_t)v37);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  ElementsAttr = v39[0];
  if (!v39[0])
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v38, 0, 0);
  v6 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  mlir::mps::CPUNDArray::~CPUNDArray(v38);
  mlir::mps::CPUNDArray::~CPUNDArray(v40);
  return v6;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseUnaryArithmeticOp<mlir::mps::RoundOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::AddOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ElementTypeWithLargestPrecision;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Type;
  _QWORD *v24;
  _QWORD *BroadcastedType;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t ElementsAttr;
  void *__p;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  _BYTE v70[24];
  void *v71[10];
  _QWORD v72[2];
  void *v73[2];
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v79 = a2;
  if (*a3)
  {
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  v6 = a3[1];
  if (v6)
    v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  else
    v7 = 0;
  ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    v9 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9)
      goto LABEL_18;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_18;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_18:
      v19 = 0;
    v75 = v9;
    v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision((_QWORD **)v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80, v78[0]);
      mlir::mps::CPUNDArray::CPUNDArray(v73, v77[0]);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (!v21)
          goto LABEL_37;
        v22 = 8 * v21;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v22 -= 8;
          if (!v22)
            goto LABEL_37;
        }
      }
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      v24 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        ElementTypeWithLargestPrecision = 0;
        v75 = 0;
        v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray(v73);
        mlir::mps::CPUNDArray::~CPUNDArray(v80);
        return ElementTypeWithLargestPrecision;
      }
      v26 = BroadcastedType;
      v27 = *BroadcastedType;
      v28 = mlir::TypeID::get<mlir::ShapedType>();
      v29 = *(unsigned int *)(v27 + 16);
      if (!(_DWORD)v29)
        goto LABEL_35;
      v30 = *(_QWORD **)(v27 + 8);
      v31 = &v30[2 * v29];
      do
      {
        v32 = v29 >> 1;
        v33 = &v30[2 * (v29 >> 1)];
        v35 = *v33;
        v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28)
          v30 = v34;
        else
          v29 = v32;
      }
      while (v29);
      if (v30 != v31 && *v30 == v28)
        v36 = v30[1];
      else
LABEL_35:
        v36 = 0;
      v75 = v26;
      v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        v40 = (uint64_t)v75;
        v50 = v76;
      }
      else
      {
        v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        v40 = (uint64_t)v39;
        if (!v39)
          goto LABEL_47;
        v41 = *v39;
        v42 = mlir::TypeID::get<mlir::ShapedType>();
        v43 = *(unsigned int *)(v41 + 16);
        if (!(_DWORD)v43)
          goto LABEL_47;
        v44 = *(_QWORD **)(v41 + 8);
        v45 = &v44[2 * v43];
        do
        {
          v46 = v43 >> 1;
          v47 = &v44[2 * (v43 >> 1)];
          v49 = *v47;
          v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42)
            v44 = v48;
          else
            v43 = v46;
        }
        while (v43);
        if (v44 != v45 && *v44 == v42)
          v50 = v44[1];
        else
LABEL_47:
          v50 = 0;
        v75 = (_QWORD *)v40;
        v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 0);
      if (v81 <= v74)
        v51 = v74;
      else
        v51 = v81;
      v52 = operator new(0x10uLL);
      v68 = v52 + 2;
      v69 = v52 + 2;
      *v52 = v80;
      v52[1] = v73;
      v67 = v52;
      v53 = operator new(8uLL);
      v64 = v53;
      *v53 = v71;
      v65 = v53 + 1;
      v66 = v53 + 1;
      v54 = operator new(0x10uLL);
      v62 = v54 + 2;
      v63 = v54 + 2;
      *v54 = 0;
      v54[1] = 0;
      v61 = v54;
      v55 = operator new(8uLL);
      __p = v55;
      *v55 = 0;
      v59 = v55 + 1;
      v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      ElementsAttr = v72[0];
      if (!v72[0])
        ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray(v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::AddOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::SubtractOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ElementTypeWithLargestPrecision;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Type;
  _QWORD *v24;
  _QWORD *BroadcastedType;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t ElementsAttr;
  void *__p;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  _BYTE v70[24];
  void *v71[10];
  _QWORD v72[2];
  void *v73[2];
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v79 = a2;
  if (*a3)
  {
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  v6 = a3[1];
  if (v6)
    v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  else
    v7 = 0;
  ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    v9 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9)
      goto LABEL_18;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_18;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_18:
      v19 = 0;
    v75 = v9;
    v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision((_QWORD **)v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80, v78[0]);
      mlir::mps::CPUNDArray::CPUNDArray(v73, v77[0]);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (!v21)
          goto LABEL_37;
        v22 = 8 * v21;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v22 -= 8;
          if (!v22)
            goto LABEL_37;
        }
      }
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      v24 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        ElementTypeWithLargestPrecision = 0;
        v75 = 0;
        v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray(v73);
        mlir::mps::CPUNDArray::~CPUNDArray(v80);
        return ElementTypeWithLargestPrecision;
      }
      v26 = BroadcastedType;
      v27 = *BroadcastedType;
      v28 = mlir::TypeID::get<mlir::ShapedType>();
      v29 = *(unsigned int *)(v27 + 16);
      if (!(_DWORD)v29)
        goto LABEL_35;
      v30 = *(_QWORD **)(v27 + 8);
      v31 = &v30[2 * v29];
      do
      {
        v32 = v29 >> 1;
        v33 = &v30[2 * (v29 >> 1)];
        v35 = *v33;
        v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28)
          v30 = v34;
        else
          v29 = v32;
      }
      while (v29);
      if (v30 != v31 && *v30 == v28)
        v36 = v30[1];
      else
LABEL_35:
        v36 = 0;
      v75 = v26;
      v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        v40 = (uint64_t)v75;
        v50 = v76;
      }
      else
      {
        v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        v40 = (uint64_t)v39;
        if (!v39)
          goto LABEL_47;
        v41 = *v39;
        v42 = mlir::TypeID::get<mlir::ShapedType>();
        v43 = *(unsigned int *)(v41 + 16);
        if (!(_DWORD)v43)
          goto LABEL_47;
        v44 = *(_QWORD **)(v41 + 8);
        v45 = &v44[2 * v43];
        do
        {
          v46 = v43 >> 1;
          v47 = &v44[2 * (v43 >> 1)];
          v49 = *v47;
          v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42)
            v44 = v48;
          else
            v43 = v46;
        }
        while (v43);
        if (v44 != v45 && *v44 == v42)
          v50 = v44[1];
        else
LABEL_47:
          v50 = 0;
        v75 = (_QWORD *)v40;
        v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 1);
      if (v81 <= v74)
        v51 = v74;
      else
        v51 = v81;
      v52 = operator new(0x10uLL);
      v68 = v52 + 2;
      v69 = v52 + 2;
      *v52 = v80;
      v52[1] = v73;
      v67 = v52;
      v53 = operator new(8uLL);
      v64 = v53;
      *v53 = v71;
      v65 = v53 + 1;
      v66 = v53 + 1;
      v54 = operator new(0x10uLL);
      v62 = v54 + 2;
      v63 = v54 + 2;
      *v54 = 0;
      v54[1] = 0;
      v61 = v54;
      v55 = operator new(8uLL);
      __p = v55;
      *v55 = 0;
      v59 = v55 + 1;
      v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      ElementsAttr = v72[0];
      if (!v72[0])
        ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray(v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::SubtractOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MultiplyOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ElementTypeWithLargestPrecision;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Type;
  _QWORD *v24;
  _QWORD *BroadcastedType;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t ElementsAttr;
  void *__p;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  _BYTE v70[24];
  void *v71[10];
  _QWORD v72[2];
  void *v73[2];
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v79 = a2;
  if (*a3)
  {
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  v6 = a3[1];
  if (v6)
    v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  else
    v7 = 0;
  ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    v9 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9)
      goto LABEL_18;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_18;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_18:
      v19 = 0;
    v75 = v9;
    v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision((_QWORD **)v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80, v78[0]);
      mlir::mps::CPUNDArray::CPUNDArray(v73, v77[0]);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (!v21)
          goto LABEL_37;
        v22 = 8 * v21;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v22 -= 8;
          if (!v22)
            goto LABEL_37;
        }
      }
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      v24 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        ElementTypeWithLargestPrecision = 0;
        v75 = 0;
        v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray(v73);
        mlir::mps::CPUNDArray::~CPUNDArray(v80);
        return ElementTypeWithLargestPrecision;
      }
      v26 = BroadcastedType;
      v27 = *BroadcastedType;
      v28 = mlir::TypeID::get<mlir::ShapedType>();
      v29 = *(unsigned int *)(v27 + 16);
      if (!(_DWORD)v29)
        goto LABEL_35;
      v30 = *(_QWORD **)(v27 + 8);
      v31 = &v30[2 * v29];
      do
      {
        v32 = v29 >> 1;
        v33 = &v30[2 * (v29 >> 1)];
        v35 = *v33;
        v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28)
          v30 = v34;
        else
          v29 = v32;
      }
      while (v29);
      if (v30 != v31 && *v30 == v28)
        v36 = v30[1];
      else
LABEL_35:
        v36 = 0;
      v75 = v26;
      v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        v40 = (uint64_t)v75;
        v50 = v76;
      }
      else
      {
        v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        v40 = (uint64_t)v39;
        if (!v39)
          goto LABEL_47;
        v41 = *v39;
        v42 = mlir::TypeID::get<mlir::ShapedType>();
        v43 = *(unsigned int *)(v41 + 16);
        if (!(_DWORD)v43)
          goto LABEL_47;
        v44 = *(_QWORD **)(v41 + 8);
        v45 = &v44[2 * v43];
        do
        {
          v46 = v43 >> 1;
          v47 = &v44[2 * (v43 >> 1)];
          v49 = *v47;
          v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42)
            v44 = v48;
          else
            v43 = v46;
        }
        while (v43);
        if (v44 != v45 && *v44 == v42)
          v50 = v44[1];
        else
LABEL_47:
          v50 = 0;
        v75 = (_QWORD *)v40;
        v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 2);
      if (v81 <= v74)
        v51 = v74;
      else
        v51 = v81;
      v52 = operator new(0x10uLL);
      v68 = v52 + 2;
      v69 = v52 + 2;
      *v52 = v80;
      v52[1] = v73;
      v67 = v52;
      v53 = operator new(8uLL);
      v64 = v53;
      *v53 = v71;
      v65 = v53 + 1;
      v66 = v53 + 1;
      v54 = operator new(0x10uLL);
      v62 = v54 + 2;
      v63 = v54 + 2;
      *v54 = 0;
      v54[1] = 0;
      v61 = v54;
      v55 = operator new(8uLL);
      __p = v55;
      *v55 = 0;
      v59 = v55 + 1;
      v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      ElementsAttr = v72[0];
      if (!v72[0])
        ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray(v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MultiplyOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::DivideOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ElementTypeWithLargestPrecision;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Type;
  _QWORD *v24;
  _QWORD *BroadcastedType;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t ElementsAttr;
  void *__p;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  _BYTE v70[24];
  void *v71[10];
  _QWORD v72[2];
  void *v73[2];
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v79 = a2;
  if (*a3)
  {
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  v6 = a3[1];
  if (v6)
    v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  else
    v7 = 0;
  ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    v9 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9)
      goto LABEL_18;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_18;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_18:
      v19 = 0;
    v75 = v9;
    v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision((_QWORD **)v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80, v78[0]);
      mlir::mps::CPUNDArray::CPUNDArray(v73, v77[0]);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (!v21)
          goto LABEL_37;
        v22 = 8 * v21;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v22 -= 8;
          if (!v22)
            goto LABEL_37;
        }
      }
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      v24 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        ElementTypeWithLargestPrecision = 0;
        v75 = 0;
        v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray(v73);
        mlir::mps::CPUNDArray::~CPUNDArray(v80);
        return ElementTypeWithLargestPrecision;
      }
      v26 = BroadcastedType;
      v27 = *BroadcastedType;
      v28 = mlir::TypeID::get<mlir::ShapedType>();
      v29 = *(unsigned int *)(v27 + 16);
      if (!(_DWORD)v29)
        goto LABEL_35;
      v30 = *(_QWORD **)(v27 + 8);
      v31 = &v30[2 * v29];
      do
      {
        v32 = v29 >> 1;
        v33 = &v30[2 * (v29 >> 1)];
        v35 = *v33;
        v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28)
          v30 = v34;
        else
          v29 = v32;
      }
      while (v29);
      if (v30 != v31 && *v30 == v28)
        v36 = v30[1];
      else
LABEL_35:
        v36 = 0;
      v75 = v26;
      v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        v40 = (uint64_t)v75;
        v50 = v76;
      }
      else
      {
        v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        v40 = (uint64_t)v39;
        if (!v39)
          goto LABEL_47;
        v41 = *v39;
        v42 = mlir::TypeID::get<mlir::ShapedType>();
        v43 = *(unsigned int *)(v41 + 16);
        if (!(_DWORD)v43)
          goto LABEL_47;
        v44 = *(_QWORD **)(v41 + 8);
        v45 = &v44[2 * v43];
        do
        {
          v46 = v43 >> 1;
          v47 = &v44[2 * (v43 >> 1)];
          v49 = *v47;
          v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42)
            v44 = v48;
          else
            v43 = v46;
        }
        while (v43);
        if (v44 != v45 && *v44 == v42)
          v50 = v44[1];
        else
LABEL_47:
          v50 = 0;
        v75 = (_QWORD *)v40;
        v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 3);
      if (v81 <= v74)
        v51 = v74;
      else
        v51 = v81;
      v52 = operator new(0x10uLL);
      v68 = v52 + 2;
      v69 = v52 + 2;
      *v52 = v80;
      v52[1] = v73;
      v67 = v52;
      v53 = operator new(8uLL);
      v64 = v53;
      *v53 = v71;
      v65 = v53 + 1;
      v66 = v53 + 1;
      v54 = operator new(0x10uLL);
      v62 = v54 + 2;
      v63 = v54 + 2;
      *v54 = 0;
      v54[1] = 0;
      v61 = v54;
      v55 = operator new(8uLL);
      __p = v55;
      *v55 = 0;
      v59 = v55 + 1;
      v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      ElementsAttr = v72[0];
      if (!v72[0])
        ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray(v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::DivideOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::ModuloOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ElementTypeWithLargestPrecision;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Type;
  _QWORD *v24;
  _QWORD *BroadcastedType;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t ElementsAttr;
  void *__p;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  _BYTE v70[24];
  void *v71[10];
  _QWORD v72[2];
  void *v73[2];
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v79 = a2;
  if (*a3)
  {
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  v6 = a3[1];
  if (v6)
    v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  else
    v7 = 0;
  ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    v9 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9)
      goto LABEL_18;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_18;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_18:
      v19 = 0;
    v75 = v9;
    v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision((_QWORD **)v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80, v78[0]);
      mlir::mps::CPUNDArray::CPUNDArray(v73, v77[0]);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (!v21)
          goto LABEL_37;
        v22 = 8 * v21;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v22 -= 8;
          if (!v22)
            goto LABEL_37;
        }
      }
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      v24 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        ElementTypeWithLargestPrecision = 0;
        v75 = 0;
        v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray(v73);
        mlir::mps::CPUNDArray::~CPUNDArray(v80);
        return ElementTypeWithLargestPrecision;
      }
      v26 = BroadcastedType;
      v27 = *BroadcastedType;
      v28 = mlir::TypeID::get<mlir::ShapedType>();
      v29 = *(unsigned int *)(v27 + 16);
      if (!(_DWORD)v29)
        goto LABEL_35;
      v30 = *(_QWORD **)(v27 + 8);
      v31 = &v30[2 * v29];
      do
      {
        v32 = v29 >> 1;
        v33 = &v30[2 * (v29 >> 1)];
        v35 = *v33;
        v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28)
          v30 = v34;
        else
          v29 = v32;
      }
      while (v29);
      if (v30 != v31 && *v30 == v28)
        v36 = v30[1];
      else
LABEL_35:
        v36 = 0;
      v75 = v26;
      v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        v40 = (uint64_t)v75;
        v50 = v76;
      }
      else
      {
        v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        v40 = (uint64_t)v39;
        if (!v39)
          goto LABEL_47;
        v41 = *v39;
        v42 = mlir::TypeID::get<mlir::ShapedType>();
        v43 = *(unsigned int *)(v41 + 16);
        if (!(_DWORD)v43)
          goto LABEL_47;
        v44 = *(_QWORD **)(v41 + 8);
        v45 = &v44[2 * v43];
        do
        {
          v46 = v43 >> 1;
          v47 = &v44[2 * (v43 >> 1)];
          v49 = *v47;
          v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42)
            v44 = v48;
          else
            v43 = v46;
        }
        while (v43);
        if (v44 != v45 && *v44 == v42)
          v50 = v44[1];
        else
LABEL_47:
          v50 = 0;
        v75 = (_QWORD *)v40;
        v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 5);
      if (v81 <= v74)
        v51 = v74;
      else
        v51 = v81;
      v52 = operator new(0x10uLL);
      v68 = v52 + 2;
      v69 = v52 + 2;
      *v52 = v80;
      v52[1] = v73;
      v67 = v52;
      v53 = operator new(8uLL);
      v64 = v53;
      *v53 = v71;
      v65 = v53 + 1;
      v66 = v53 + 1;
      v54 = operator new(0x10uLL);
      v62 = v54 + 2;
      v63 = v54 + 2;
      *v54 = 0;
      v54[1] = 0;
      v61 = v54;
      v55 = operator new(8uLL);
      __p = v55;
      *v55 = 0;
      v59 = v55 + 1;
      v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      ElementsAttr = v72[0];
      if (!v72[0])
        ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray(v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::ModuloOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MinimumOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ElementTypeWithLargestPrecision;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Type;
  _QWORD *v24;
  _QWORD *BroadcastedType;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t ElementsAttr;
  void *__p;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  _BYTE v70[24];
  void *v71[10];
  _QWORD v72[2];
  void *v73[2];
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v79 = a2;
  if (*a3)
  {
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  v6 = a3[1];
  if (v6)
    v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  else
    v7 = 0;
  ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    v9 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9)
      goto LABEL_18;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_18;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_18:
      v19 = 0;
    v75 = v9;
    v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision((_QWORD **)v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80, v78[0]);
      mlir::mps::CPUNDArray::CPUNDArray(v73, v77[0]);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (!v21)
          goto LABEL_37;
        v22 = 8 * v21;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v22 -= 8;
          if (!v22)
            goto LABEL_37;
        }
      }
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      v24 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        ElementTypeWithLargestPrecision = 0;
        v75 = 0;
        v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray(v73);
        mlir::mps::CPUNDArray::~CPUNDArray(v80);
        return ElementTypeWithLargestPrecision;
      }
      v26 = BroadcastedType;
      v27 = *BroadcastedType;
      v28 = mlir::TypeID::get<mlir::ShapedType>();
      v29 = *(unsigned int *)(v27 + 16);
      if (!(_DWORD)v29)
        goto LABEL_35;
      v30 = *(_QWORD **)(v27 + 8);
      v31 = &v30[2 * v29];
      do
      {
        v32 = v29 >> 1;
        v33 = &v30[2 * (v29 >> 1)];
        v35 = *v33;
        v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28)
          v30 = v34;
        else
          v29 = v32;
      }
      while (v29);
      if (v30 != v31 && *v30 == v28)
        v36 = v30[1];
      else
LABEL_35:
        v36 = 0;
      v75 = v26;
      v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        v40 = (uint64_t)v75;
        v50 = v76;
      }
      else
      {
        v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        v40 = (uint64_t)v39;
        if (!v39)
          goto LABEL_47;
        v41 = *v39;
        v42 = mlir::TypeID::get<mlir::ShapedType>();
        v43 = *(unsigned int *)(v41 + 16);
        if (!(_DWORD)v43)
          goto LABEL_47;
        v44 = *(_QWORD **)(v41 + 8);
        v45 = &v44[2 * v43];
        do
        {
          v46 = v43 >> 1;
          v47 = &v44[2 * (v43 >> 1)];
          v49 = *v47;
          v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42)
            v44 = v48;
          else
            v43 = v46;
        }
        while (v43);
        if (v44 != v45 && *v44 == v42)
          v50 = v44[1];
        else
LABEL_47:
          v50 = 0;
        v75 = (_QWORD *)v40;
        v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 15);
      if (v81 <= v74)
        v51 = v74;
      else
        v51 = v81;
      v52 = operator new(0x10uLL);
      v68 = v52 + 2;
      v69 = v52 + 2;
      *v52 = v80;
      v52[1] = v73;
      v67 = v52;
      v53 = operator new(8uLL);
      v64 = v53;
      *v53 = v71;
      v65 = v53 + 1;
      v66 = v53 + 1;
      v54 = operator new(0x10uLL);
      v62 = v54 + 2;
      v63 = v54 + 2;
      *v54 = 0;
      v54[1] = 0;
      v61 = v54;
      v55 = operator new(8uLL);
      __p = v55;
      *v55 = 0;
      v59 = v55 + 1;
      v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      ElementsAttr = v72[0];
      if (!v72[0])
        ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray(v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MinimumOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MaximumOp>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t ElementTypeWithLargestPrecision;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *ArgAttrsAttr;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Type;
  _QWORD *v24;
  _QWORD *BroadcastedType;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t ElementsAttr;
  void *__p;
  void *v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  _QWORD *v69;
  _BYTE v70[24];
  void *v71[10];
  _QWORD v72[2];
  void *v73[2];
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[2];
  _QWORD v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v79 = a2;
  if (*a3)
  {
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v78[0] = v5;
  v78[1] = v4;
  v6 = a3[1];
  if (v6)
    v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  else
    v7 = 0;
  ElementTypeWithLargestPrecision = 0;
  v77[0] = v6;
  v77[1] = v7;
  if (v5 && v6)
  {
    v9 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v79) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v9)
      goto LABEL_18;
    v10 = *v9;
    v11 = mlir::TypeID::get<mlir::ShapedType>();
    v12 = *(unsigned int *)(v10 + 16);
    if (!(_DWORD)v12)
      goto LABEL_18;
    v13 = *(_QWORD **)(v10 + 8);
    v14 = &v13[2 * v12];
    do
    {
      v15 = v12 >> 1;
      v16 = &v13[2 * (v12 >> 1)];
      v18 = *v16;
      v17 = v16 + 2;
      v12 += ~(v12 >> 1);
      if (v18 < v11)
        v13 = v17;
      else
        v12 = v15;
    }
    while (v12);
    if (v13 != v14 && *v13 == v11)
      v19 = v13[1];
    else
LABEL_18:
      v19 = 0;
    v75 = v9;
    v76 = v19;
    v80[0] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
    v80[1] = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
    ElementTypeWithLargestPrecision = (uint64_t)mlir::getElementTypeWithLargestPrecision((_QWORD **)v80, 2);
    if (ElementTypeWithLargestPrecision)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v80, v78[0]);
      mlir::mps::CPUNDArray::CPUNDArray(v73, v77[0]);
      v72[0] = 0;
      v72[1] = 0;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v75))
      {
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        if (!v21)
          goto LABEL_37;
        v22 = 8 * v21;
        while (*ArgAttrsAttr != 0x8000000000000000)
        {
          ++ArgAttrsAttr;
          v22 -= 8;
          if (!v22)
            goto LABEL_37;
        }
      }
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v78);
      v24 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v77);
      BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(Type, v24, 0);
      if (!BroadcastedType)
      {
        ElementTypeWithLargestPrecision = 0;
        v75 = 0;
        v76 = 0;
LABEL_65:
        mlir::mps::CPUNDArray::~CPUNDArray(v73);
        mlir::mps::CPUNDArray::~CPUNDArray(v80);
        return ElementTypeWithLargestPrecision;
      }
      v26 = BroadcastedType;
      v27 = *BroadcastedType;
      v28 = mlir::TypeID::get<mlir::ShapedType>();
      v29 = *(unsigned int *)(v27 + 16);
      if (!(_DWORD)v29)
        goto LABEL_35;
      v30 = *(_QWORD **)(v27 + 8);
      v31 = &v30[2 * v29];
      do
      {
        v32 = v29 >> 1;
        v33 = &v30[2 * (v29 >> 1)];
        v35 = *v33;
        v34 = v33 + 2;
        v29 += ~(v29 >> 1);
        if (v35 < v28)
          v30 = v34;
        else
          v29 = v32;
      }
      while (v29);
      if (v30 != v31 && *v30 == v28)
        v36 = v30[1];
      else
LABEL_35:
        v36 = 0;
      v75 = v26;
      v76 = v36;
LABEL_37:
      if (ElementTypeWithLargestPrecision == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v75))
      {
        v40 = (uint64_t)v75;
        v50 = v76;
      }
      else
      {
        v37 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v75);
        v39 = (uint64_t *)mlir::RankedTensorType::get(v37, v38, ElementTypeWithLargestPrecision, 0);
        v40 = (uint64_t)v39;
        if (!v39)
          goto LABEL_47;
        v41 = *v39;
        v42 = mlir::TypeID::get<mlir::ShapedType>();
        v43 = *(unsigned int *)(v41 + 16);
        if (!(_DWORD)v43)
          goto LABEL_47;
        v44 = *(_QWORD **)(v41 + 8);
        v45 = &v44[2 * v43];
        do
        {
          v46 = v43 >> 1;
          v47 = &v44[2 * (v43 >> 1)];
          v49 = *v47;
          v48 = v47 + 2;
          v43 += ~(v43 >> 1);
          if (v49 < v42)
            v44 = v48;
          else
            v43 = v46;
        }
        while (v43);
        if (v44 != v45 && *v44 == v42)
          v50 = v44[1];
        else
LABEL_47:
          v50 = 0;
        v75 = (_QWORD *)v40;
        v76 = v50;
      }
      mlir::mps::CPUNDArray::tryMakeAliasedArray(v40, v50, (uint64_t)v72, (uint64_t)v71);
      mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)v70, 16);
      if (v81 <= v74)
        v51 = v74;
      else
        v51 = v81;
      v52 = operator new(0x10uLL);
      v68 = v52 + 2;
      v69 = v52 + 2;
      *v52 = v80;
      v52[1] = v73;
      v67 = v52;
      v53 = operator new(8uLL);
      v64 = v53;
      *v53 = v71;
      v65 = v53 + 1;
      v66 = v53 + 1;
      v54 = operator new(0x10uLL);
      v62 = v54 + 2;
      v63 = v54 + 2;
      *v54 = 0;
      v54[1] = 0;
      v61 = v54;
      v55 = operator new(8uLL);
      __p = v55;
      *v55 = 0;
      v59 = v55 + 1;
      v60 = v55 + 1;
      mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v70, (uint64_t *)&v67, (uint64_t **)&v64, (uint64_t)&v61, (uint64_t)&__p, 0, v51, (uint64_t)v70);
      if (__p)
      {
        v59 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      if (v67)
      {
        v68 = v67;
        operator delete(v67);
      }
      ElementsAttr = v72[0];
      if (!v72[0])
        ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v71, 0, 0);
      ElementTypeWithLargestPrecision = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      mlir::mps::CPUNDArray::~CPUNDArray(v71);
      goto LABEL_65;
    }
  }
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryArithmeticOp<mlir::mps::MaximumOp>>::externalFoldMultipleResults()
{
  return 0;
}

void *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::EqualToOp,std::equal_to<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *ElementTypeWithLargestPrecision;
  _QWORD *Type;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL isSignedInteger;
  uint64_t NumElements;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *FloatSemantics;
  void *v49;
  uint64_t i;
  llvm::APFloatBase *v51;
  void *v52;
  void *v53;
  int v54;
  char *v55;
  void **p_p;
  char *v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  BOOL v61;
  _BOOL4 v62;
  char *v63;
  void **v64;
  char *v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ArgAttrsAttr;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  void *v81;
  unsigned int v82;
  void *v83;
  unsigned int v84;
  BOOL v85;
  void *__p;
  unsigned int v87;
  char v88[8];
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t OperandRange;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  void *v99;
  _QWORD v100[3];
  void *v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v98 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  v107 = (char *)v109;
  v108 = 0x400000000;
  v15 = *a3;
  if (*a3)
    v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  else
    v16 = 0;
  v95 = v15;
  v96 = v16;
  v17 = a3[1];
  if (v17)
  {
    v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    v15 = v95;
  }
  else
  {
    v18 = 0;
  }
  ElementTypeWithLargestPrecision = 0;
  v93 = v17;
  v94 = v18;
  if (v15 && v17)
  {
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v21 = Type;
    if (!Type)
      goto LABEL_28;
    v22 = *Type;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
      v31 = v25[1];
    else
LABEL_28:
      v31 = 0;
    v103 = v21;
    v104 = v31;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    v103 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34)
        v35 = v34;
      else
        v35 = NumElements;
      v36 = *(void **)(*(_QWORD *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          v60 = 0;
          v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v103, v60, (llvm::APInt *)&__p);
            LODWORD(v100[0]) = v87;
            v99 = __p;
            v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)v88, v60, (llvm::APInt *)&v81);
            v84 = v82;
            v83 = v81;
            v82 = 0;
            v85 = v61;
            if (LODWORD(v100[0]) > 0x40)
              v62 = llvm::APInt::equalSlowCase((const void **)&v99, (const void **)&v83);
            else
              v62 = v99 == v81;
            LODWORD(v102[0]) = 1;
            v101 = (void *)v62;
            v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v63 = v107;
                v64 = (void **)&v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v64 = &v101;
                v63 = v107;
              }
            }
            else
            {
              v64 = &v101;
            }
            v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(_QWORD *)v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101)
              operator delete[](v101);
            if (v84 >= 0x41 && v83)
              operator delete[](v83);
            if (v82 >= 0x41 && v81)
              operator delete[](v81);
            if (LODWORD(v100[0]) >= 0x41 && v99)
              operator delete[](v99);
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          v49 = FloatSemantics;
          for (i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(__p) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &__p);
            LOBYTE(__p) = 0;
            v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &__p);
            v52 = (void *)v102[0];
            v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52)
              llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            v87 = 1;
            __p = (void *)(v54 == 1);
            v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v58 = v108 + 1;
              if (v107 <= (char *)&__p && &v107[16 * v108] > (char *)&__p)
              {
                v59 = (char *)&__p - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                v55 = v107;
                p_p = (void **)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                p_p = &__p;
                v55 = v107;
              }
            }
            else
            {
              p_p = &__p;
            }
            v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)p_p + 2);
            *(_QWORD *)v57 = *p_p;
            *((_DWORD *)p_p + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            if (v53 == (void *)v100[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            if (v53 == (void *)v102[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
          }
        }
      }
      if (!v90)
      {
        v68 = v91;
        v91 = 0;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      }
      if (!v88[0])
      {
        v69 = v89;
        v89 = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      }
      if (!v105)
      {
        v70 = v106;
        v106 = 0;
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      if (!(_BYTE)v103)
      {
        v71 = v104;
        v104 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
      v74 = v73;
      v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      v76 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v74, v75, 0);
      ElementTypeWithLargestPrecision = (void *)((unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL);
    }
  }
LABEL_130:
  v77 = v107;
  if ((_DWORD)v108)
  {
    v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        v79 = *(void **)&v77[v78 - 16];
        if (v79)
          operator delete[](v79);
      }
      v78 -= 16;
    }
    while (v78);
    v77 = v107;
  }
  if (v77 != (char *)v109)
    free(v77);
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::EqualToOp,std::equal_to<void>>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::ElementsAttr::getValues<llvm::APInt>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ArgOperands;
  uint64_t v5;
  uint64_t v6;
  uint64_t NumElements;
  uint64_t result;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12[8];
  uint64_t v13;

  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)a1);
  v6 = v5;
  mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)a1, (uint64_t)v12);
  NumElements = mlir::ElementsAttr::getNumElements(*a1, a1[1]);
  v9 = 257;
  v10 = 0;
  v11 = NumElements;
  result = mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>::ElementsAttrRange(a2, ArgOperands, v6, v12, (char *)&v9);
  if (!(_BYTE)v9)
  {
    result = v10;
    v10 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (!v12[0])
  {
    result = v13;
    v13 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

unsigned __int8 *mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 *v16;
  uint64_t v17;

  v4 = result;
  v14 = *result;
  v6 = result[1];
  v15 = result[1];
  if (*result)
  {
    v7 = *((_QWORD *)result + 2) + a2;
    v16 = (unsigned __int8 *)*((_QWORD *)result + 1);
    v17 = v7;
    if (v6)
      v9 = 0;
    else
      v9 = v7;
    v10 = (char *)&v16[16 * v9];
    v11 = *((_DWORD *)v10 + 2);
    *((_DWORD *)a3 + 2) = v11;
    if (v11 > 0x40)
    {
      result = (unsigned __int8 *)llvm::APInt::initSlowCase(a3, (const void **)v10);
      if (v14)
        return result;
    }
    else
    {
      *(_QWORD *)a3 = *(_QWORD *)v10;
      if (v14)
        return result;
    }
  }
  else
  {
    (*(void (**)(unsigned __int8 **__return_ptr))(**((_QWORD **)result + 1) + 16))(&v16);
    v8 = *((_QWORD *)v4 + 2) + a2;
    v17 = v8;
    v12 = (char *)v16;
    v16 = 0;
    if (v15)
      v13 = 0;
    else
      v13 = v8;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 24))(v12, v13);
    (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  result = v16;
  v16 = 0;
  if (result)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t mlir::ElementsAttr::getValues<llvm::APFloat>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t ArgOperands;
  uint64_t v5;
  uint64_t v6;
  uint64_t NumElements;
  uint64_t result;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12[8];
  uint64_t v13;

  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)a1);
  v6 = v5;
  mlir::ElementsAttr::value_begin<llvm::APFloat>((mlir::BranchOpInterface *)a1, (uint64_t)v12);
  NumElements = mlir::ElementsAttr::getNumElements(*a1, a1[1]);
  v9 = 257;
  v10 = 0;
  v11 = NumElements;
  result = mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<mlir::Attribute>>::ElementsAttrRange(a2, ArgOperands, v6, v12, (char *)&v9);
  if (!(_BYTE)v9)
  {
    result = v10;
    v10 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (!v12[0])
  {
    result = v13;
    v13 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

llvm::detail::DoubleAPFloat *mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::detail::DoubleAPFloat *v10;
  char *v11;
  const llvm::detail::DoubleAPFloat *v12;
  void *v13;
  llvm::detail::DoubleAPFloat *result;
  llvm::detail::DoubleAPFloat *v15;
  uint64_t v16;
  char v17;
  char v18;
  llvm::detail::DoubleAPFloat *v19;
  uint64_t v20;

  v17 = *a1;
  v6 = a1[1];
  v18 = a1[1];
  if (*a1)
  {
    v7 = *((_QWORD *)a1 + 2) + a2;
    v19 = (llvm::detail::DoubleAPFloat *)*((_QWORD *)a1 + 1);
    v20 = v7;
    if (v6)
      v9 = 0;
    else
      v9 = v7;
    v10 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
    v11 = (char *)v19 + 32 * v9;
    v13 = (void *)*((_QWORD *)v11 + 1);
    v12 = (const llvm::detail::DoubleAPFloat *)(v11 + 8);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v13)
    {
      result = llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, v12);
      if (v17)
        return result;
    }
    else
    {
      result = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v10, v12);
      if (v17)
        return result;
    }
  }
  else
  {
    (*(void (**)(llvm::detail::DoubleAPFloat **__return_ptr))(**((_QWORD **)a1 + 1) + 16))(&v19);
    v8 = *((_QWORD *)a1 + 2) + a2;
    v20 = v8;
    v15 = v19;
    v19 = 0;
    if (v18)
      v16 = 0;
    else
      v16 = v8;
    (*(void (**)(llvm::detail::DoubleAPFloat *, uint64_t))(*(_QWORD *)v15 + 24))(v15, v16);
    (*(void (**)(llvm::detail::DoubleAPFloat *))(*(_QWORD *)v15 + 8))(v15);
  }
  result = v19;
  v19 = 0;
  if (result)
    return (llvm::detail::DoubleAPFloat *)(*(uint64_t (**)(llvm::detail::DoubleAPFloat *))(*(_QWORD *)result + 8))(result);
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow(uint64_t a1, unint64_t a2)
{
  _DWORD *v3;
  char *v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v3 = (_DWORD *)(a1 + 16);
  v4 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v15);
  v5 = v4;
  v6 = *(_DWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v7)
  {
    v8 = v4 + 8;
    v9 = 16 * v7;
    v10 = v6 + 2;
    do
    {
      *v8 = *v10;
      *((_QWORD *)v8 - 1) = *((_QWORD *)v10 - 1);
      *v10 = 0;
      v10 += 4;
      v8 += 4;
      v9 -= 16;
    }
    while (v9);
    v6 = *(_DWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 4 * v11;
      do
      {
        if (v6[v12 - 2] >= 0x41u)
        {
          v13 = *(void **)&v6[v12 - 4];
          if (v13)
            operator delete[](v13);
        }
        v12 -= 4;
      }
      while (v12 * 4);
      v6 = *(_DWORD **)a1;
    }
  }
  v14 = v15;
  if (v6 != v3)
    free(v6);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v14;
}

void *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::NotEqualToOp,std::not_equal_to<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *ElementTypeWithLargestPrecision;
  _QWORD *Type;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL isSignedInteger;
  uint64_t NumElements;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *FloatSemantics;
  void *v49;
  uint64_t i;
  llvm::APFloatBase *v51;
  void *v52;
  void *v53;
  int v54;
  char *v55;
  void **p_p;
  char *v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  BOOL v61;
  _BOOL4 v62;
  char *v63;
  void **v64;
  char *v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ArgAttrsAttr;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  void *v81;
  unsigned int v82;
  void *v83;
  unsigned int v84;
  BOOL v85;
  void *__p;
  unsigned int v87;
  char v88[8];
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t OperandRange;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  void *v99;
  _QWORD v100[3];
  void *v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v98 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  v107 = (char *)v109;
  v108 = 0x400000000;
  v15 = *a3;
  if (*a3)
    v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  else
    v16 = 0;
  v95 = v15;
  v96 = v16;
  v17 = a3[1];
  if (v17)
  {
    v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    v15 = v95;
  }
  else
  {
    v18 = 0;
  }
  ElementTypeWithLargestPrecision = 0;
  v93 = v17;
  v94 = v18;
  if (v15 && v17)
  {
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v21 = Type;
    if (!Type)
      goto LABEL_28;
    v22 = *Type;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
      v31 = v25[1];
    else
LABEL_28:
      v31 = 0;
    v103 = v21;
    v104 = v31;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    v103 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34)
        v35 = v34;
      else
        v35 = NumElements;
      v36 = *(void **)(*(_QWORD *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          v60 = 0;
          v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v103, v60, (llvm::APInt *)&__p);
            LODWORD(v100[0]) = v87;
            v99 = __p;
            v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)v88, v60, (llvm::APInt *)&v81);
            v84 = v82;
            v83 = v81;
            v82 = 0;
            v85 = v61;
            if (LODWORD(v100[0]) > 0x40)
              v62 = llvm::APInt::equalSlowCase((const void **)&v99, (const void **)&v83);
            else
              v62 = v99 == v81;
            LODWORD(v102[0]) = 1;
            v101 = (void *)!v62;
            v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v63 = v107;
                v64 = (void **)&v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v64 = &v101;
                v63 = v107;
              }
            }
            else
            {
              v64 = &v101;
            }
            v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(_QWORD *)v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101)
              operator delete[](v101);
            if (v84 >= 0x41 && v83)
              operator delete[](v83);
            if (v82 >= 0x41 && v81)
              operator delete[](v81);
            if (LODWORD(v100[0]) >= 0x41 && v99)
              operator delete[](v99);
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          v49 = FloatSemantics;
          for (i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(__p) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &__p);
            LOBYTE(__p) = 0;
            v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &__p);
            v52 = (void *)v102[0];
            v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52)
              llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            v87 = 1;
            __p = (void *)(v54 != 1);
            v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v58 = v108 + 1;
              if (v107 <= (char *)&__p && &v107[16 * v108] > (char *)&__p)
              {
                v59 = (char *)&__p - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                v55 = v107;
                p_p = (void **)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                p_p = &__p;
                v55 = v107;
              }
            }
            else
            {
              p_p = &__p;
            }
            v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)p_p + 2);
            *(_QWORD *)v57 = *p_p;
            *((_DWORD *)p_p + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            if (v53 == (void *)v100[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            if (v53 == (void *)v102[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
          }
        }
      }
      if (!v90)
      {
        v68 = v91;
        v91 = 0;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      }
      if (!v88[0])
      {
        v69 = v89;
        v89 = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      }
      if (!v105)
      {
        v70 = v106;
        v106 = 0;
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      if (!(_BYTE)v103)
      {
        v71 = v104;
        v104 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
      v74 = v73;
      v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      v76 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v74, v75, 0);
      ElementTypeWithLargestPrecision = (void *)((unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL);
    }
  }
LABEL_130:
  v77 = v107;
  if ((_DWORD)v108)
  {
    v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        v79 = *(void **)&v77[v78 - 16];
        if (v79)
          operator delete[](v79);
      }
      v78 -= 16;
    }
    while (v78);
    v77 = v107;
  }
  if (v77 != (char *)v109)
    free(v77);
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::NotEqualToOp,std::not_equal_to<void>>>::externalFoldMultipleResults()
{
  return 0;
}

void *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::GreaterThanOp,std::greater<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *ElementTypeWithLargestPrecision;
  _QWORD *Type;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL isSignedInteger;
  uint64_t NumElements;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *FloatSemantics;
  void *v49;
  uint64_t i;
  llvm::APFloatBase *v51;
  void *v52;
  void *v53;
  int v54;
  char *v55;
  void **p_p;
  char *v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  char *v63;
  void **v64;
  char *v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ArgAttrsAttr;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  void *v81;
  unsigned int v82;
  void *v83;
  unsigned int v84;
  BOOL v85;
  void *__p;
  unsigned int v87;
  char v88[8];
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t OperandRange;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  void *v99;
  _QWORD v100[3];
  void *v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v98 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  v107 = (char *)v109;
  v108 = 0x400000000;
  v15 = *a3;
  if (*a3)
    v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  else
    v16 = 0;
  v95 = v15;
  v96 = v16;
  v17 = a3[1];
  if (v17)
  {
    v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    v15 = v95;
  }
  else
  {
    v18 = 0;
  }
  ElementTypeWithLargestPrecision = 0;
  v93 = v17;
  v94 = v18;
  if (v15 && v17)
  {
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v21 = Type;
    if (!Type)
      goto LABEL_28;
    v22 = *Type;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
      v31 = v25[1];
    else
LABEL_28:
      v31 = 0;
    v103 = v21;
    v104 = v31;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    v103 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34)
        v35 = v34;
      else
        v35 = NumElements;
      v36 = *(void **)(*(_QWORD *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          v60 = 0;
          v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v103, v60, (llvm::APInt *)&__p);
            LODWORD(v100[0]) = v87;
            v99 = __p;
            v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)v88, v60, (llvm::APInt *)&v81);
            v84 = v82;
            v83 = v81;
            v82 = 0;
            v85 = v61;
            if (BYTE4(v100[0]))
              v62 = llvm::APInt::compare((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            else
              v62 = llvm::APInt::compareSigned((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            LODWORD(v102[0]) = 1;
            v101 = (void *)(v62 > 0);
            v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v63 = v107;
                v64 = (void **)&v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v64 = &v101;
                v63 = v107;
              }
            }
            else
            {
              v64 = &v101;
            }
            v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(_QWORD *)v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101)
              operator delete[](v101);
            if (v84 >= 0x41 && v83)
              operator delete[](v83);
            if (v82 >= 0x41 && v81)
              operator delete[](v81);
            if (LODWORD(v100[0]) >= 0x41 && v99)
              operator delete[](v99);
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          v49 = FloatSemantics;
          for (i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(__p) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &__p);
            LOBYTE(__p) = 0;
            v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &__p);
            v52 = (void *)v102[0];
            v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52)
              llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            v87 = 1;
            __p = (void *)(v54 == 2);
            v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v58 = v108 + 1;
              if (v107 <= (char *)&__p && &v107[16 * v108] > (char *)&__p)
              {
                v59 = (char *)&__p - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                v55 = v107;
                p_p = (void **)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                p_p = &__p;
                v55 = v107;
              }
            }
            else
            {
              p_p = &__p;
            }
            v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)p_p + 2);
            *(_QWORD *)v57 = *p_p;
            *((_DWORD *)p_p + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            if (v53 == (void *)v100[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            if (v53 == (void *)v102[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
          }
        }
      }
      if (!v90)
      {
        v68 = v91;
        v91 = 0;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      }
      if (!v88[0])
      {
        v69 = v89;
        v89 = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      }
      if (!v105)
      {
        v70 = v106;
        v106 = 0;
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      if (!(_BYTE)v103)
      {
        v71 = v104;
        v104 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
      v74 = v73;
      v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      v76 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v74, v75, 0);
      ElementTypeWithLargestPrecision = (void *)((unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL);
    }
  }
LABEL_130:
  v77 = v107;
  if ((_DWORD)v108)
  {
    v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        v79 = *(void **)&v77[v78 - 16];
        if (v79)
          operator delete[](v79);
      }
      v78 -= 16;
    }
    while (v78);
    v77 = v107;
  }
  if (v77 != (char *)v109)
    free(v77);
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::GreaterThanOp,std::greater<void>>>::externalFoldMultipleResults()
{
  return 0;
}

void *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::GreaterThanOrEqualToOp,std::greater_equal<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *ElementTypeWithLargestPrecision;
  _QWORD *Type;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL isSignedInteger;
  uint64_t NumElements;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *FloatSemantics;
  void *v49;
  uint64_t i;
  llvm::APFloatBase *v51;
  void *v52;
  void *v53;
  int v54;
  char *v55;
  void **p_p;
  char *v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  char *v63;
  void **v64;
  char *v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ArgAttrsAttr;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  void *v81;
  unsigned int v82;
  void *v83;
  unsigned int v84;
  BOOL v85;
  void *__p;
  unsigned int v87;
  char v88[8];
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t OperandRange;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  void *v99;
  _QWORD v100[3];
  void *v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v98 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  v107 = (char *)v109;
  v108 = 0x400000000;
  v15 = *a3;
  if (*a3)
    v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  else
    v16 = 0;
  v95 = v15;
  v96 = v16;
  v17 = a3[1];
  if (v17)
  {
    v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    v15 = v95;
  }
  else
  {
    v18 = 0;
  }
  ElementTypeWithLargestPrecision = 0;
  v93 = v17;
  v94 = v18;
  if (v15 && v17)
  {
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v21 = Type;
    if (!Type)
      goto LABEL_28;
    v22 = *Type;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
      v31 = v25[1];
    else
LABEL_28:
      v31 = 0;
    v103 = v21;
    v104 = v31;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    v103 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34)
        v35 = v34;
      else
        v35 = NumElements;
      v36 = *(void **)(*(_QWORD *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          v60 = 0;
          v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v103, v60, (llvm::APInt *)&__p);
            LODWORD(v100[0]) = v87;
            v99 = __p;
            v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)v88, v60, (llvm::APInt *)&v81);
            v84 = v82;
            v83 = v81;
            v82 = 0;
            v85 = v61;
            if (BYTE4(v100[0]))
              v62 = llvm::APInt::compare((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            else
              v62 = llvm::APInt::compareSigned((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            LODWORD(v102[0]) = 1;
            v101 = (void *)(v62 >= 0);
            v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v63 = v107;
                v64 = (void **)&v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v64 = &v101;
                v63 = v107;
              }
            }
            else
            {
              v64 = &v101;
            }
            v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(_QWORD *)v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101)
              operator delete[](v101);
            if (v84 >= 0x41 && v83)
              operator delete[](v83);
            if (v82 >= 0x41 && v81)
              operator delete[](v81);
            if (LODWORD(v100[0]) >= 0x41 && v99)
              operator delete[](v99);
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          v49 = FloatSemantics;
          for (i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(__p) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &__p);
            LOBYTE(__p) = 0;
            v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &__p);
            v52 = (void *)v102[0];
            v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52)
              llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            v87 = 1;
            __p = (void *)((v54 - 1) < 2);
            v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v58 = v108 + 1;
              if (v107 <= (char *)&__p && &v107[16 * v108] > (char *)&__p)
              {
                v59 = (char *)&__p - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                v55 = v107;
                p_p = (void **)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                p_p = &__p;
                v55 = v107;
              }
            }
            else
            {
              p_p = &__p;
            }
            v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)p_p + 2);
            *(_QWORD *)v57 = *p_p;
            *((_DWORD *)p_p + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            if (v53 == (void *)v100[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            if (v53 == (void *)v102[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
          }
        }
      }
      if (!v90)
      {
        v68 = v91;
        v91 = 0;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      }
      if (!v88[0])
      {
        v69 = v89;
        v89 = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      }
      if (!v105)
      {
        v70 = v106;
        v106 = 0;
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      if (!(_BYTE)v103)
      {
        v71 = v104;
        v104 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
      v74 = v73;
      v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      v76 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v74, v75, 0);
      ElementTypeWithLargestPrecision = (void *)((unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL);
    }
  }
LABEL_130:
  v77 = v107;
  if ((_DWORD)v108)
  {
    v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        v79 = *(void **)&v77[v78 - 16];
        if (v79)
          operator delete[](v79);
      }
      v78 -= 16;
    }
    while (v78);
    v77 = v107;
  }
  if (v77 != (char *)v109)
    free(v77);
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::GreaterThanOrEqualToOp,std::greater_equal<void>>>::externalFoldMultipleResults()
{
  return 0;
}

void *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::LessThanOp,std::less<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *ElementTypeWithLargestPrecision;
  _QWORD *Type;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL isSignedInteger;
  uint64_t NumElements;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *FloatSemantics;
  void *v49;
  uint64_t i;
  llvm::APFloatBase *v51;
  void *v52;
  void *v53;
  int v54;
  char *v55;
  void **p_p;
  char *v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  BOOL v61;
  unsigned int v62;
  char *v63;
  void **v64;
  char *v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ArgAttrsAttr;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  void *v81;
  unsigned int v82;
  void *v83;
  unsigned int v84;
  BOOL v85;
  void *__p;
  unsigned int v87;
  char v88[8];
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t OperandRange;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  void *v99;
  _QWORD v100[3];
  void *v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v98 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  v107 = (char *)v109;
  v108 = 0x400000000;
  v15 = *a3;
  if (*a3)
    v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  else
    v16 = 0;
  v95 = v15;
  v96 = v16;
  v17 = a3[1];
  if (v17)
  {
    v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    v15 = v95;
  }
  else
  {
    v18 = 0;
  }
  ElementTypeWithLargestPrecision = 0;
  v93 = v17;
  v94 = v18;
  if (v15 && v17)
  {
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v21 = Type;
    if (!Type)
      goto LABEL_28;
    v22 = *Type;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
      v31 = v25[1];
    else
LABEL_28:
      v31 = 0;
    v103 = v21;
    v104 = v31;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    v103 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34)
        v35 = v34;
      else
        v35 = NumElements;
      v36 = *(void **)(*(_QWORD *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          v60 = 0;
          v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v103, v60, (llvm::APInt *)&__p);
            LODWORD(v100[0]) = v87;
            v99 = __p;
            v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)v88, v60, (llvm::APInt *)&v81);
            v84 = v82;
            v83 = v81;
            v82 = 0;
            v85 = v61;
            if (BYTE4(v100[0]))
              v62 = llvm::APInt::compare((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            else
              v62 = llvm::APInt::compareSigned((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            LODWORD(v102[0]) = 1;
            v101 = (void *)(v62 >> 31);
            v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v63 = v107;
                v64 = (void **)&v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v64 = &v101;
                v63 = v107;
              }
            }
            else
            {
              v64 = &v101;
            }
            v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(_QWORD *)v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101)
              operator delete[](v101);
            if (v84 >= 0x41 && v83)
              operator delete[](v83);
            if (v82 >= 0x41 && v81)
              operator delete[](v81);
            if (LODWORD(v100[0]) >= 0x41 && v99)
              operator delete[](v99);
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          v49 = FloatSemantics;
          for (i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(__p) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &__p);
            LOBYTE(__p) = 0;
            v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &__p);
            v52 = (void *)v102[0];
            v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52)
              llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            v87 = 1;
            __p = (void *)(v54 == 0);
            v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v58 = v108 + 1;
              if (v107 <= (char *)&__p && &v107[16 * v108] > (char *)&__p)
              {
                v59 = (char *)&__p - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                v55 = v107;
                p_p = (void **)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                p_p = &__p;
                v55 = v107;
              }
            }
            else
            {
              p_p = &__p;
            }
            v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)p_p + 2);
            *(_QWORD *)v57 = *p_p;
            *((_DWORD *)p_p + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            if (v53 == (void *)v100[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            if (v53 == (void *)v102[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
          }
        }
      }
      if (!v90)
      {
        v68 = v91;
        v91 = 0;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      }
      if (!v88[0])
      {
        v69 = v89;
        v89 = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      }
      if (!v105)
      {
        v70 = v106;
        v106 = 0;
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      if (!(_BYTE)v103)
      {
        v71 = v104;
        v104 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
      v74 = v73;
      v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      v76 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v74, v75, 0);
      ElementTypeWithLargestPrecision = (void *)((unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL);
    }
  }
LABEL_130:
  v77 = v107;
  if ((_DWORD)v108)
  {
    v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        v79 = *(void **)&v77[v78 - 16];
        if (v79)
          operator delete[](v79);
      }
      v78 -= 16;
    }
    while (v78);
    v77 = v107;
  }
  if (v77 != (char *)v109)
    free(v77);
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::LessThanOp,std::less<void>>>::externalFoldMultipleResults()
{
  return 0;
}

void *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::LessThanOrEqualToOp,std::less_equal<void>>>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void *ElementTypeWithLargestPrecision;
  _QWORD *Type;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL isSignedInteger;
  uint64_t NumElements;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *FloatSemantics;
  void *v49;
  uint64_t i;
  llvm::APFloatBase *v51;
  void *v52;
  void *v53;
  unsigned int v54;
  char *v55;
  void **p_p;
  char *v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  char *v63;
  void **v64;
  char *v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ArgAttrsAttr;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  void *v81;
  unsigned int v82;
  void *v83;
  unsigned int v84;
  BOOL v85;
  void *__p;
  unsigned int v87;
  char v88[8];
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t OperandRange;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  void *v99;
  _QWORD v100[3];
  void *v101;
  _QWORD v102[3];
  _QWORD *v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v98 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v98) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v97[0] = v4;
  v97[1] = v14;
  v107 = (char *)v109;
  v108 = 0x400000000;
  v15 = *a3;
  if (*a3)
    v15 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v15);
  else
    v16 = 0;
  v95 = v15;
  v96 = v16;
  v17 = a3[1];
  if (v17)
  {
    v17 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
    v15 = v95;
  }
  else
  {
    v18 = 0;
  }
  ElementTypeWithLargestPrecision = 0;
  v93 = v17;
  v94 = v18;
  if (v15 && v17)
  {
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v21 = Type;
    if (!Type)
      goto LABEL_28;
    v22 = *Type;
    v23 = mlir::TypeID::get<mlir::ShapedType>();
    v24 = *(unsigned int *)(v22 + 16);
    if (!(_DWORD)v24)
      goto LABEL_28;
    v25 = *(_QWORD **)(v22 + 8);
    v26 = &v25[2 * v24];
    do
    {
      v27 = v24 >> 1;
      v28 = &v25[2 * (v24 >> 1)];
      v30 = *v28;
      v29 = v28 + 2;
      v24 += ~(v24 >> 1);
      if (v30 < v23)
        v25 = v29;
      else
        v24 = v27;
    }
    while (v24);
    if (v25 != v26 && *v25 == v23)
      v31 = v25[1];
    else
LABEL_28:
      v31 = 0;
    v103 = v21;
    v104 = v31;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v103);
    v103 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v95);
    v104 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v93);
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(&v103, 2);
    if (ElementTypeWithLargestPrecision)
    {
      isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&OperandRange);
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v95, v96);
      v34 = mlir::ElementsAttr::getNumElements((uint64_t)v93, v94);
      if (NumElements <= v34)
        v35 = v34;
      else
        v35 = NumElements;
      v36 = *(void **)(*(_QWORD *)OperandRange + 136);
      if (v36 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v93, (uint64_t)v88);
        if (v35)
        {
          v60 = 0;
          v61 = !isSignedInteger;
          do
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v103, v60, (llvm::APInt *)&__p);
            LODWORD(v100[0]) = v87;
            v99 = __p;
            v87 = 0;
            BYTE4(v100[0]) = v61;
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)v88, v60, (llvm::APInt *)&v81);
            v84 = v82;
            v83 = v81;
            v82 = 0;
            v85 = v61;
            if (BYTE4(v100[0]))
              v62 = llvm::APInt::compare((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            else
              v62 = llvm::APInt::compareSigned((llvm::APInt *)&v99, (const llvm::APInt *)&v83);
            LODWORD(v102[0]) = 1;
            v101 = (void *)(v62 < 1);
            v63 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v66 = v108 + 1;
              if (v107 <= (char *)&v101 && &v107[16 * v108] > (char *)&v101)
              {
                v67 = (char *)&v101 - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v63 = v107;
                v64 = (void **)&v107[v67];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v66);
                v64 = &v101;
                v63 = v107;
              }
            }
            else
            {
              v64 = &v101;
            }
            v65 = &v63[16 * v108];
            *((_DWORD *)v65 + 2) = *((_DWORD *)v64 + 2);
            *(_QWORD *)v65 = *v64;
            *((_DWORD *)v64 + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (LODWORD(v102[0]) >= 0x41 && v101)
              operator delete[](v101);
            if (v84 >= 0x41 && v83)
              operator delete[](v83);
            if (v82 >= 0x41 && v81)
              operator delete[](v81);
            if (LODWORD(v100[0]) >= 0x41 && v99)
              operator delete[](v99);
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            ++v60;
          }
          while (v35 != v60);
        }
      }
      else
      {
        if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          ElementTypeWithLargestPrecision = 0;
          goto LABEL_130;
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v95, (uint64_t)&v103);
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v93, (uint64_t)v88);
        v101 = ElementTypeWithLargestPrecision;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v101);
        if (v35)
        {
          v49 = FloatSemantics;
          for (i = 0; i != v35; ++i)
          {
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&v103, i, (uint64_t)&v101);
            mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[](v88, i, (uint64_t)&v99);
            LOBYTE(__p) = 0;
            llvm::APFloat::convert((uint64_t)&v101, v49, 1, &__p);
            LOBYTE(__p) = 0;
            v51 = (llvm::APFloatBase *)llvm::APFloat::convert((uint64_t)&v99, v49, 1, &__p);
            v52 = (void *)v102[0];
            v53 = llvm::APFloatBase::PPCDoubleDouble(v51);
            if (v53 == v52)
              llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v102, (const llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v102, (const llvm::detail::IEEEFloat *)v100);
            v87 = 1;
            __p = (void *)(v54 < 2);
            v55 = v107;
            if (v108 >= HIDWORD(v108))
            {
              v58 = v108 + 1;
              if (v107 <= (char *)&__p && &v107[16 * v108] > (char *)&__p)
              {
                v59 = (char *)&__p - v107;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                v55 = v107;
                p_p = (void **)&v107[v59];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v107, v58);
                p_p = &__p;
                v55 = v107;
              }
            }
            else
            {
              p_p = &__p;
            }
            v57 = &v55[16 * v108];
            *((_DWORD *)v57 + 2) = *((_DWORD *)p_p + 2);
            *(_QWORD *)v57 = *p_p;
            *((_DWORD *)p_p + 2) = 0;
            LODWORD(v108) = v108 + 1;
            if (v87 >= 0x41 && __p)
              operator delete[](__p);
            if (v53 == (void *)v100[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v100);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v100);
            if (v53 == (void *)v102[0])
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v102);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v102);
          }
        }
      }
      if (!v90)
      {
        v68 = v91;
        v91 = 0;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
      }
      if (!v88[0])
      {
        v69 = v89;
        v89 = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      }
      if (!v105)
      {
        v70 = v106;
        v106 = 0;
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
      if (!(_BYTE)v103)
      {
        v71 = v104;
        v104 = 0;
        if (v71)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v97);
      v74 = v73;
      v75 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v97);
      v76 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v74, v75, 0);
      ElementTypeWithLargestPrecision = (void *)((unint64_t)mlir::createElementsAttr(v76, v107, v108) & 0xFFFFFFFFFFFFFFFBLL);
    }
  }
LABEL_130:
  v77 = v107;
  if ((_DWORD)v108)
  {
    v78 = 16 * v108;
    do
    {
      if (*(_DWORD *)&v77[v78 - 8] >= 0x41u)
      {
        v79 = *(void **)&v77[v78 - 16];
        if (v79)
          operator delete[](v79);
      }
      v78 -= 16;
    }
    while (v78);
    v77 = v107;
  }
  if (v77 != (char *)v109)
    free(v77);
  return ElementTypeWithLargestPrecision;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldElementWiseBinaryComparisonOp<mlir::mps::LessThanOrEqualToOp,std::less_equal<void>>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionAndOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionAndOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionArgMaxOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionArgMaxOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionArgMinOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionArgMinOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionLogSumExpOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionLogSumExpOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionMaxOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionMaxOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionMeanOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionMeanOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionMinOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionMinOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionOrOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionOrOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionSumOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionSumOp>>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionVarianceOp>>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;

  v18 = a2;
  result = mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18);
  if (result)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v18) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v17[0] = v3;
    v17[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v17)
      && (ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v17), v15))
    {
      v16 = 8 * v15;
      while (*ArgAttrsAttr)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          return 0;
      }
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v18) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReduction<mlir::mps::ReductionVarianceOp>>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldSelectOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  llvm::APFloatBase *v23;
  llvm::APFloatBase *v24;
  llvm::APFloatBase *v25;
  uint64_t v26;
  char *v27;
  const llvm::detail::DoubleAPFloat *v28;
  llvm::APFloatBase *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  _QWORD *p_p;
  _BOOL4 v37;
  llvm::APFloatBase *v39;
  llvm::APFloatBase *v40;
  llvm::APFloatBase *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::APFloatBase *v44;
  llvm::APFloatBase *v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::APFloatBase *v51;
  llvm::APFloatBase *v52;
  llvm::APFloatBase *v53;
  uint64_t v54;
  uint64_t Filter;
  unint64_t v56;
  uint64_t v57;
  llvm::APFloatBase *v58;
  llvm::APFloatBase *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *ElementTypeWithLargestPrecision;
  uint64_t v66;
  void *v67;
  uint64_t v69;
  char *v70;
  const llvm::detail::DoubleAPFloat *v71;
  llvm::APFloatBase *v72;
  llvm::APFloatBase *v73;
  llvm::APFloatBase *v74;
  uint64_t *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  llvm::APFloatBase *v79;
  uint64_t v80;
  char *v81;
  const llvm::detail::DoubleAPFloat *v82;
  void *v83;
  char *v84;
  llvm::APFloatBase *v85;
  llvm::APFloatBase *v86;
  llvm::APFloatBase *v87;
  llvm::APFloatBase *v88;
  llvm::APFloatBase *v89;
  uint64_t v90;
  llvm::APFloatBase *v91;
  uint64_t v92;
  char *v93;
  const llvm::detail::DoubleAPFloat *v94;
  void *v95;
  llvm::APFloatBase *v96;
  llvm::APFloatBase *v97;
  llvm::APFloatBase *v98;
  llvm::APFloatBase *v99;
  llvm::APFloatBase *v100;
  uint64_t v101;
  llvm::APFloatBase *v102;
  uint64_t v103;
  llvm::APFloatBase *v104;
  uint64_t v105;
  llvm::APFloatBase *v106;
  unint64_t v107;
  unint64_t NumElements;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  llvm::APFloatBase *FloatSemantics;
  llvm::APFloatBase *v113;
  uint64_t v114;
  llvm::APFloatBase *v115;
  llvm::APFloatBase *v116;
  int v117;
  llvm::APFloatBase *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  const llvm::detail::DoubleAPFloat *v123;
  void *v124;
  llvm::APFloatBase *v125;
  int v126;
  llvm::APFloatBase *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  const llvm::detail::DoubleAPFloat *v132;
  void *v133;
  llvm::APFloatBase *v134;
  uint64_t *v135;
  char *Address;
  llvm::detail::DoubleAPFloat *v137;
  llvm::APFloatBase *v138;
  const llvm::detail::DoubleAPFloat *v139;
  llvm::APFloatBase *v140;
  uint64_t ArgAttrsAttr;
  uint64_t v142;
  _QWORD *v143;
  llvm::APFloatBase *ElementsAttr;
  llvm::APFloatBase *v145;
  llvm::APFloatBase *v146;
  llvm::APFloatBase *v147;
  char *v148;
  uint64_t v149;
  void *v150;
  char *v151;
  uint64_t v152;
  llvm::detail::DoubleAPFloat *v153;
  llvm::APFloatBase *v154;
  uint64_t v155;
  llvm::APFloatBase *v156;
  llvm::APFloatBase *v157;
  uint64_t v158;
  char *v159;
  llvm::APFloatBase *v160;
  uint64_t v161;
  llvm::APFloatBase *v162;
  uint64_t v163;
  llvm::APFloatBase *v164;
  uint64_t v165;
  llvm::APFloatBase *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  llvm::APFloatBase *v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  llvm::APFloatBase *v178;
  int v179;
  llvm::APFloatBase *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  llvm::APFloatBase *v185;
  void **v186;
  char *v187;
  llvm::APInt *v188;
  unsigned int v189;
  unint64_t v190;
  int64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  __n128 *v196;
  llvm::APFloatBase *v197;
  llvm::APFloatBase *v198;
  char *v199;
  uint64_t v200;
  void *v201;
  uint64_t v202;
  void *v203;
  llvm::APFloatBase *v204;
  uint64_t v205;
  void *v206;
  llvm::APFloatBase *v207;
  uint64_t v208;
  void *v209;
  llvm::APFloatBase *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  void *v218;
  __int128 v219;
  uint64_t v220;
  _QWORD v221[2];
  uint64_t v222;
  uint64_t v223;
  llvm::APFloatBase *v224;
  uint64_t v225;
  void *__p;
  llvm::APFloatBase *v227;
  uint64_t i;
  char v229;
  void *v230;
  llvm::APFloatBase *v231;
  uint64_t j;
  char v233;
  void *ArgOperands;
  uint64_t Type;
  uint64_t v236;
  __int16 v237;
  llvm::APFloatBase *v238;
  uint64_t v239;
  uint64_t v240;
  llvm::APFloatBase *v241;
  uint64_t v242;
  char v243;
  char v244;
  uint64_t v245;
  uint64_t v246;

  v246 = *MEMORY[0x1E0C80C00];
  v222 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v222) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v221[0] = v4;
  v221[1] = v14;
  v218 = &v220;
  v219 = xmmword_181234800;
  if (!*a3)
  {
    v216 = 0;
    v217 = 0;
    goto LABEL_199;
  }
  v216 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v217 = v15;
  if (!v216)
    goto LABEL_199;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v216);
  Type = v16;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (!v216)
      goto LABEL_199;
    ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v216);
    Type = v17;
    v18 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                   + 136);
    if (v18 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v18 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      goto LABEL_199;
    }
    mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v216, (uint64_t)&ArgOperands);
    LOWORD(v230) = (_WORD)ArgOperands;
    if ((_BYTE)ArgOperands)
      v231 = (llvm::APFloatBase *)Type;
    else
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)Type + 16))(&v231);
    v19 = v236;
    j = v236;
    LOWORD(__p) = v237;
    if ((_BYTE)v237)
    {
      v227 = v238;
    }
    else
    {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v238 + 16))(&v227);
      v19 = j;
    }
    i = v239;
    if (v19 == v239)
    {
      v20 = 0;
      v21 = 1;
      if (!(_BYTE)__p)
        goto LABEL_142;
      goto LABEL_144;
    }
    v22 = 0;
    v20 = 0;
    while (1)
    {
      if (BYTE1(v230))
        v26 = 0;
      else
        v26 = v19;
      if ((_BYTE)v230)
      {
        v27 = (char *)v231 + 32 * v26;
        v29 = (llvm::APFloatBase *)*((_QWORD *)v27 + 1);
        v28 = (const llvm::detail::DoubleAPFloat *)(v27 + 8);
        v24 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v231);
        if (v24 == v29)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241, v28);
          v25 = v241;
          if (!v22)
          {
LABEL_57:
            v30 = (uint64_t *)v242;
            if (v24 != v25)
              v30 = &v240;
            v20 = (*((_BYTE *)v30 + 28) & 7) != 3;
            v22 = 1;
            if (v24 == v25)
              goto LABEL_60;
            goto LABEL_45;
          }
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, v28);
          v25 = v241;
          if (!v22)
            goto LABEL_57;
        }
      }
      else
      {
        v23 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v231 + 24))(&v240);
        v24 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v23);
        v25 = v241;
        if (!v22)
          goto LABEL_57;
      }
      if (v24 == v25)
      {
        if (((*(_BYTE *)(v242 + 28) & 7) != 3) != v20)
        {
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
          goto LABEL_140;
        }
LABEL_60:
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
        goto LABEL_46;
      }
      if (((v244 & 7) != 3) != v20)
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
LABEL_140:
        v21 = 1;
LABEL_141:
        if (!(_BYTE)__p)
        {
LABEL_142:
          v51 = v227;
          v227 = 0;
          if (v51)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v51 + 8))(v51);
        }
LABEL_144:
        if (!(_BYTE)v230)
        {
          v52 = v231;
          v231 = 0;
          if (v52)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v52 + 8))(v52);
        }
        if (!(_BYTE)v237)
        {
          v53 = v238;
          v238 = 0;
          if (v53)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v53 + 8))(v53);
        }
        if (!(_BYTE)ArgOperands)
        {
          v54 = Type;
          Type = 0;
          if (v54)
            (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
        }
        if (v21)
        {
          mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v216, (uint64_t)&ArgOperands);
          LOWORD(v230) = (_WORD)ArgOperands;
          if ((_BYTE)ArgOperands)
            v231 = (llvm::APFloatBase *)Type;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)Type + 16))(&v231);
          v57 = v236;
          j = v236;
          LOWORD(__p) = v237;
          if ((_BYTE)v237)
          {
            v227 = v238;
          }
          else
          {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v238 + 16))(&v227);
            v57 = j;
          }
          for (i = v239; v57 != i; j = v57)
          {
            if (BYTE1(v230))
              v69 = 0;
            else
              v69 = v57;
            if ((_BYTE)v230)
            {
              v70 = (char *)v231 + 32 * v69;
              v72 = (llvm::APFloatBase *)*((_QWORD *)v70 + 1);
              v71 = (const llvm::detail::DoubleAPFloat *)(v70 + 8);
              v73 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v231);
              if (v73 == v72)
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241, v71);
              else
                llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, v71);
            }
            else
            {
              v74 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v231 + 24))(&v240);
              v73 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v74);
            }
            if (v73 == v241)
              v75 = (uint64_t *)v242;
            else
              v75 = &v240;
            v76 = *((_BYTE *)v75 + 28);
            v77 = v219;
            if ((unint64_t)(v219 + 1) > *((_QWORD *)&v219 + 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v218, &v220, v219 + 1, 1);
              v77 = v219;
            }
            *((_BYTE *)v218 + v77) = (v76 & 7) != 3;
            *(_QWORD *)&v219 = v219 + 1;
            if (v73 == v241)
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
            v57 = j + 1;
          }
          if (!(_BYTE)__p)
          {
            v58 = v227;
            v227 = 0;
            if (v58)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v58 + 8))(v58);
          }
          if (!(_BYTE)v230)
          {
            v45 = v231;
            v231 = 0;
            if (v45)
              goto LABEL_170;
          }
          goto LABEL_171;
        }
LABEL_156:
        if (v20)
          Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v222);
        else
          Filter = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v222);
        v56 = Filter | 4;
        goto LABEL_200;
      }
LABEL_45:
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
LABEL_46:
      v19 = j + 1;
      j = v19;
      if (v19 == i)
      {
        v21 = 0;
        goto LABEL_141;
      }
    }
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v216, (uint64_t)&ArgOperands);
  LOWORD(v240) = (_WORD)ArgOperands;
  if ((_BYTE)ArgOperands)
    v241 = (llvm::APFloatBase *)Type;
  else
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)Type + 16))(&v241);
  v31 = v236;
  v242 = v236;
  LOWORD(v230) = v237;
  if ((_BYTE)v237)
  {
    v231 = v238;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v238 + 16))(&v231);
    v31 = v242;
  }
  j = v239;
  if (v31 != v239)
  {
    v33 = 0;
    v20 = 0;
    do
    {
      if (BYTE1(v240))
        v34 = 0;
      else
        v34 = v31;
      if ((_BYTE)v240)
      {
        v35 = (char *)v241 + 16 * v34;
        LODWORD(v227) = *((_DWORD *)v35 + 2);
        if (v227 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v35);
        else
          __p = *(void **)v35;
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v241 + 24))(&__p);
      }
      if (v227 >= 0x41)
        p_p = __p;
      else
        p_p = &__p;
      v37 = *p_p != 0;
      if (v33)
      {
        if (v37 != v20)
        {
          if (v227 >= 0x41 && __p)
            operator delete[](__p);
          goto LABEL_67;
        }
      }
      else
      {
        v33 = 1;
        v20 = v37;
      }
      if (v227 >= 0x41 && __p != 0)
        operator delete[](__p);
      v31 = v242 + 1;
      v242 = v31;
    }
    while (v31 != j);
    v32 = 0;
    if ((_BYTE)v230)
      goto LABEL_94;
    goto LABEL_92;
  }
  v20 = 0;
LABEL_67:
  v32 = 1;
  if (!(_BYTE)v230)
  {
LABEL_92:
    v39 = v231;
    v231 = 0;
    if (v39)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v39 + 8))(v39);
  }
LABEL_94:
  if (!(_BYTE)v240)
  {
    v40 = v241;
    v241 = 0;
    if (v40)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v40 + 8))(v40);
  }
  if (!(_BYTE)v237)
  {
    v41 = v238;
    v238 = 0;
    if (v41)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v41 + 8))(v41);
  }
  if (!(_BYTE)ArgOperands)
  {
    v42 = Type;
    Type = 0;
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
  if (!v32)
    goto LABEL_156;
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v216, (uint64_t)&ArgOperands);
  LOWORD(v240) = (_WORD)ArgOperands;
  if ((_BYTE)ArgOperands)
    v241 = (llvm::APFloatBase *)Type;
  else
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)Type + 16))(&v241);
  v43 = v236;
  v242 = v236;
  LOWORD(v230) = v237;
  if ((_BYTE)v237)
  {
    v231 = v238;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v238 + 16))(&v231);
    v43 = v242;
  }
  for (j = v239; v43 != j; v242 = v43)
  {
    if (BYTE1(v240))
      v46 = 0;
    else
      v46 = v43;
    if ((_BYTE)v240)
    {
      v47 = (char *)v241 + 16 * v46;
      LODWORD(v227) = *((_DWORD *)v47 + 2);
      if (v227 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v47);
      else
        __p = *(void **)v47;
    }
    else
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v241 + 24))(&__p);
    }
    if (v227 >= 0x41)
      v48 = (uint64_t *)__p;
    else
      v48 = (uint64_t *)&__p;
    v49 = *v48;
    v50 = v219;
    if ((unint64_t)(v219 + 1) > *((_QWORD *)&v219 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v218, &v220, v219 + 1, 1);
      v50 = v219;
    }
    *((_BYTE *)v218 + v50) = v49 != 0;
    *(_QWORD *)&v219 = v219 + 1;
    if (v227 >= 0x41 && __p)
      operator delete[](__p);
    v43 = v242 + 1;
  }
  if (!(_BYTE)v230)
  {
    v44 = v231;
    v231 = 0;
    if (v44)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v44 + 8))(v44);
  }
  if (!(_BYTE)v240)
  {
    v45 = v241;
    v241 = 0;
    if (v45)
LABEL_170:
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v45 + 8))(v45);
  }
LABEL_171:
  if (!(_BYTE)v237)
  {
    v59 = v238;
    v238 = 0;
    if (v59)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v59 + 8))(v59);
  }
  if (!(_BYTE)ArgOperands)
  {
    v60 = Type;
    Type = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
  v61 = a3[1];
  if (v61)
    v61 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v61);
  else
    v62 = 0;
  v214 = v61;
  v215 = v62;
  v63 = a3[2];
  if (v63)
  {
    v63 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[2]);
    v61 = v214;
  }
  else
  {
    v64 = 0;
  }
  v56 = 0;
  v212 = v63;
  v213 = v64;
  if (v61 && v63)
  {
    ArgOperands = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v214);
    Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v212);
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision((_QWORD **)&ArgOperands, 2);
    if (ElementTypeWithLargestPrecision)
    {
      v66 = (uint64_t)ElementTypeWithLargestPrecision;
      if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v221)
                        + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        v67 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v221)
                       + 136);
        if (v67 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v67 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          goto LABEL_199;
        }
        ArgOperands = &v236;
        Type = 0x400000000;
        LOBYTE(v230) = 0;
        v233 = 0;
        LOBYTE(__p) = 0;
        v229 = 0;
        if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v214))
        {
          mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v214, (uint64_t)&v240);
          LOWORD(v209) = v240;
          if ((_BYTE)v240)
          {
            v210 = v241;
            v211 = v242;
            if (BYTE1(v240))
              v78 = 0;
            else
              v78 = v242;
            v81 = (char *)v241 + 32 * v78;
            v83 = (void *)*((_QWORD *)v81 + 1);
            v82 = (const llvm::detail::DoubleAPFloat *)(v81 + 8);
            if (llvm::APFloatBase::PPCDoubleDouble(v241) == v83)
              v85 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224, v82);
            else
              v85 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v224, v82);
          }
          else
          {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v241 + 16))(&v210);
            v211 = v242;
            v85 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v210 + 24))(&v223);
          }
          if (v233)
          {
            v86 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v231, (llvm::APFloatBase *)&v224);
            v87 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v86);
          }
          else
          {
            v88 = v224;
            v87 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v85);
            if (v87 == v88)
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v231, &v224);
            else
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v231, (uint64_t)&v224);
            v233 = 1;
          }
          if (v87 == v224)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v224);
          if (!(_BYTE)v209)
          {
            v89 = v210;
            v210 = 0;
            if (v89)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v89 + 8))(v89);
          }
          if (!v243)
          {
            v90 = v245;
            v245 = 0;
            if (v90)
              (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
          }
          if (!(_BYTE)v240)
          {
            v91 = v241;
            v241 = 0;
            if (v91)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v91 + 8))(v91);
          }
        }
        if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v212))
        {
          mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v212, (uint64_t)&v240);
          LOWORD(v209) = v240;
          if ((_BYTE)v240)
          {
            v210 = v241;
            v211 = v242;
            if (BYTE1(v240))
              v92 = 0;
            else
              v92 = v242;
            v93 = (char *)v241 + 32 * v92;
            v95 = (void *)*((_QWORD *)v93 + 1);
            v94 = (const llvm::detail::DoubleAPFloat *)(v93 + 8);
            if (llvm::APFloatBase::PPCDoubleDouble(v241) == v95)
              v96 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224, v94);
            else
              v96 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v224, v94);
          }
          else
          {
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v241 + 16))(&v210);
            v211 = v242;
            v96 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v210 + 24))(&v223);
          }
          if (v229)
          {
            v97 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v227, (llvm::APFloatBase *)&v224);
            v98 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v97);
          }
          else
          {
            v99 = v224;
            v98 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v96);
            if (v98 == v99)
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v227, &v224);
            else
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v227, (uint64_t)&v224);
            v229 = 1;
          }
          if (v98 == v224)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v224);
          if (!(_BYTE)v209)
          {
            v100 = v210;
            v210 = 0;
            if (v100)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v100 + 8))(v100);
          }
          if (!v243)
          {
            v101 = v245;
            v245 = 0;
            if (v101)
              (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
          }
          if (!(_BYTE)v240)
          {
            v102 = v241;
            v241 = 0;
            if (v102)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v102 + 8))(v102);
          }
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v214, (uint64_t)&v240);
        LOWORD(v209) = v240;
        if ((_BYTE)v240)
          v210 = v241;
        else
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v241 + 16))(&v210);
        v211 = v242;
        if (!v243)
        {
          v103 = v245;
          v245 = 0;
          if (v103)
            (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
        }
        if (!(_BYTE)v240)
        {
          v104 = v241;
          v241 = 0;
          if (v104)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v104 + 8))(v104);
        }
        mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v212, (uint64_t)&v240);
        LOWORD(v206) = v240;
        if ((_BYTE)v240)
          v207 = v241;
        else
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v241 + 16))(&v207);
        v208 = v242;
        if (!v243)
        {
          v105 = v245;
          v245 = 0;
          if (v105)
            (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
        }
        if (!(_BYTE)v240)
        {
          v106 = v241;
          v241 = 0;
          if (v106)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v106 + 8))(v106);
        }
        v107 = v219;
        NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v214, v215);
        v109 = mlir::ElementsAttr::getNumElements((uint64_t)v212, v213);
        if (NumElements <= v109)
          v110 = v109;
        else
          v110 = NumElements;
        if (v107 <= v110)
          v111 = v110;
        else
          v111 = v107;
        v202 = v66;
        v240 = v66;
        FloatSemantics = (llvm::APFloatBase *)mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v240);
        if (!v111)
        {
LABEL_364:
          ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v221);
          v143 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v142, v202, 0);
          ElementsAttr = (llvm::APFloatBase *)mlir::createElementsAttr(v143, (uint64_t)ArgOperands, Type);
          v145 = ElementsAttr;
          if (!(_BYTE)v206)
          {
            ElementsAttr = v207;
            v207 = 0;
            if (ElementsAttr)
              ElementsAttr = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)ElementsAttr
                                                                                                 + 8))(ElementsAttr);
          }
          if (!(_BYTE)v209)
          {
            ElementsAttr = v210;
            v210 = 0;
            if (ElementsAttr)
              ElementsAttr = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)ElementsAttr
                                                                                                 + 8))(ElementsAttr);
          }
          if (v229)
          {
            v146 = v227;
            if (llvm::APFloatBase::PPCDoubleDouble(ElementsAttr) == v146)
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v227);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v227);
          }
          if (v233)
          {
            v147 = v231;
            if (llvm::APFloatBase::PPCDoubleDouble(ElementsAttr) == v147)
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v231);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v231);
          }
          v148 = (char *)ArgOperands;
          v149 = Type;
          if ((_DWORD)Type)
          {
            v150 = llvm::APFloatBase::PPCDoubleDouble(ElementsAttr);
            v151 = v148 - 24;
            v152 = 32 * v149;
            do
            {
              while (1)
              {
                v153 = (llvm::detail::DoubleAPFloat *)&v151[v152];
                if (v150 != *(void **)&v151[v152])
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v153);
                v152 -= 32;
                if (!v152)
                  goto LABEL_383;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v153);
              v152 -= 32;
            }
            while (v152);
LABEL_383:
            v148 = (char *)ArgOperands;
          }
          v56 = (unint64_t)v145 & 0xFFFFFFFFFFFFFFFBLL;
          if (v148 != (char *)&v236)
            free(v148);
          goto LABEL_200;
        }
        v113 = FloatSemantics;
        v114 = 0;
        while (1)
        {
          if (v233)
          {
            v115 = v231;
            if (llvm::APFloatBase::PPCDoubleDouble(FloatSemantics) == v115)
              v116 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241, (const llvm::detail::DoubleAPFloat *)&v231);
            else
              v116 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, (const llvm::detail::IEEEFloat *)&v231);
          }
          else
          {
            LOWORD(v223) = (_WORD)v209;
            v117 = BYTE1(v209);
            if ((_BYTE)v209)
            {
              v118 = v210;
              v224 = v210;
              v119 = 1;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v210 + 16))(&v224);
              v117 = BYTE1(v223);
              v119 = v223;
              v118 = v224;
            }
            v120 = v211;
            v225 = v211++;
            if (v117)
              v121 = 0;
            else
              v121 = v120;
            if (v119)
            {
              v122 = (char *)v118 + 32 * v121;
              v124 = (void *)*((_QWORD *)v122 + 1);
              v123 = (const llvm::detail::DoubleAPFloat *)(v122 + 8);
              if (llvm::APFloatBase::PPCDoubleDouble(v118) == v124)
              {
                v116 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241, v123);
                if ((_BYTE)v223)
                  goto LABEL_334;
              }
              else
              {
                v116 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v241, v123);
                if ((_BYTE)v223)
                  goto LABEL_334;
              }
            }
            else
            {
              v116 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v118 + 24))(&v240);
              if ((_BYTE)v223)
                goto LABEL_334;
            }
            v116 = v224;
            v224 = 0;
            if (v116)
              v116 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v116 + 8))(v116);
          }
LABEL_334:
          if (v229)
          {
            v125 = v227;
            if (llvm::APFloatBase::PPCDoubleDouble(v116) == v125)
              llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224, (const llvm::detail::DoubleAPFloat *)&v227);
            else
              llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v224, (const llvm::detail::IEEEFloat *)&v227);
          }
          else
          {
            LOWORD(v203) = (_WORD)v206;
            v126 = BYTE1(v206);
            if ((_BYTE)v206)
            {
              v127 = v207;
              v204 = v207;
              v128 = 1;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v207 + 16))(v207);
              v126 = BYTE1(v203);
              v128 = v203;
              v127 = v204;
            }
            v129 = v208;
            v205 = v208++;
            if (v126)
              v130 = 0;
            else
              v130 = v129;
            if (v128)
            {
              v131 = (char *)v127 + 32 * v130;
              v133 = (void *)*((_QWORD *)v131 + 1);
              v132 = (const llvm::detail::DoubleAPFloat *)(v131 + 8);
              if (llvm::APFloatBase::PPCDoubleDouble(v127) == v133)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224, v132);
                if (!(_BYTE)v203)
                {
LABEL_351:
                  v134 = v204;
                  v204 = 0;
                  if (v134)
                    (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v134 + 8))(v134);
                }
              }
              else
              {
                llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v224, v132);
                if (!(_BYTE)v203)
                  goto LABEL_351;
              }
            }
            else
            {
              (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v127 + 24))(&v223);
              if (!(_BYTE)v203)
                goto LABEL_351;
            }
          }
          LOBYTE(v203) = 0;
          llvm::APFloat::convert((uint64_t)&v240, v113, 1, &v203);
          LOBYTE(v203) = 0;
          llvm::APFloat::convert((uint64_t)&v223, v113, 1, &v203);
          if (*((_BYTE *)v218 + v114))
            v135 = &v240;
          else
            v135 = &v223;
          Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&ArgOperands, (unint64_t)v135, 1);
          v137 = (llvm::detail::DoubleAPFloat *)((char *)ArgOperands + 32 * Type + 8);
          v139 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
          v138 = (llvm::APFloatBase *)*((_QWORD *)Address + 1);
          v140 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
          if (v140 == v138)
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v137, v139);
          else
            llvm::detail::IEEEFloat::IEEEFloat(v137, v139);
          LODWORD(Type) = Type + 1;
          if (v140 == v224)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v224);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v224);
          if (v140 == v241)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v241);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v241);
          if (v111 == ++v114)
            goto LABEL_364;
        }
      }
      ArgOperands = &v236;
      Type = 0x400000000;
      LOBYTE(v230) = 0;
      LOBYTE(j) = 0;
      LOBYTE(__p) = 0;
      LOBYTE(i) = 0;
      if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v214))
      {
LABEL_402:
        if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v212))
        {
LABEL_430:
          mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v214, (uint64_t)&v240);
          LOWORD(v223) = v240;
          if ((_BYTE)v240)
            v224 = v241;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v241 + 16))(&v224);
          v225 = v242;
          if (!v243)
          {
            v163 = v245;
            v245 = 0;
            if (v163)
              (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
          }
          if (!(_BYTE)v240)
          {
            v164 = v241;
            v241 = 0;
            if (v164)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v164 + 8))(v164);
          }
          mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v212, (uint64_t)&v240);
          LOWORD(v209) = v240;
          if ((_BYTE)v240)
            v210 = v241;
          else
            (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v241 + 16))(&v210);
          v211 = v242;
          if (!v243)
          {
            v165 = v245;
            v245 = 0;
            if (v165)
              (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
          }
          if (!(_BYTE)v240)
          {
            v166 = v241;
            v241 = 0;
            if (v166)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v166 + 8))(v166);
          }
          v167 = v219;
          v168 = mlir::ElementsAttr::getNumElements((uint64_t)v214, v215);
          v169 = mlir::ElementsAttr::getNumElements((uint64_t)v212, v213);
          if (v168 <= v169)
            v170 = v169;
          else
            v170 = v168;
          if (v167 <= v170)
            v167 = v170;
          if (!v167)
          {
LABEL_513:
            v193 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v221);
            v195 = (_QWORD *)mlir::RankedTensorType::get(v193, v194, v66, 0);
            v196 = mlir::createElementsAttr(v195, ArgOperands, Type);
            if (!(_BYTE)v209)
            {
              v197 = v210;
              v210 = 0;
              if (v197)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v197 + 8))(v197);
            }
            if (!(_BYTE)v223)
            {
              v198 = v224;
              v224 = 0;
              if (v198)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v198 + 8))(v198);
            }
            if ((_BYTE)i && v227 >= 0x41 && __p)
              operator delete[](__p);
            if ((_BYTE)j && v231 >= 0x41 && v230)
              operator delete[](v230);
            v199 = (char *)ArgOperands;
            if ((_DWORD)Type)
            {
              v200 = 16 * Type;
              do
              {
                if (*(_DWORD *)&v199[v200 - 8] >= 0x41u)
                {
                  v201 = *(void **)&v199[v200 - 16];
                  if (v201)
                    operator delete[](v201);
                }
                v200 -= 16;
              }
              while (v200);
              v199 = (char *)ArgOperands;
            }
            v56 = (unint64_t)v196 & 0xFFFFFFFFFFFFFFFBLL;
            if (v199 != (char *)&v236)
              free(v199);
            goto LABEL_200;
          }
          v171 = 0;
          while (1)
          {
            if ((_BYTE)j)
            {
              LODWORD(v207) = (_DWORD)v231;
              if (v231 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v206, (const void **)&v230);
              else
                v206 = v230;
            }
            else
            {
              LOWORD(v240) = v223;
              v172 = BYTE1(v223);
              if ((_BYTE)v223)
              {
                v173 = v224;
                v241 = v224;
                v174 = 1;
              }
              else
              {
                (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v224 + 16))(&v241);
                v172 = BYTE1(v240);
                v174 = v240;
                v173 = v241;
              }
              v175 = v225;
              v242 = v225++;
              if (v172)
                v176 = 0;
              else
                v176 = v175;
              if (v174)
              {
                v177 = (char *)v173 + 16 * v176;
                LODWORD(v207) = *((_DWORD *)v177 + 2);
                if (v207 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v206, (const void **)v177);
                  if ((_BYTE)v240)
                    goto LABEL_475;
                }
                else
                {
                  v206 = *(void **)v177;
                  if ((_BYTE)v240)
                    goto LABEL_475;
                }
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(_QWORD *)v173 + 24))(&v206);
                if ((_BYTE)v240)
                  goto LABEL_475;
              }
              v178 = v241;
              v241 = 0;
              if (v178)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v178 + 8))(v178);
            }
LABEL_475:
            if ((_BYTE)i)
            {
              LODWORD(v204) = (_DWORD)v227;
              if (v227 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v203, (const void **)&__p);
              else
                v203 = __p;
            }
            else
            {
              LOWORD(v240) = (_WORD)v209;
              v179 = BYTE1(v209);
              if ((_BYTE)v209)
              {
                v180 = v210;
                v241 = v210;
                v181 = 1;
              }
              else
              {
                (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v210 + 16))(&v241);
                v179 = BYTE1(v240);
                v181 = v240;
                v180 = v241;
              }
              v182 = v211;
              v242 = v211++;
              if (v179)
                v183 = 0;
              else
                v183 = v182;
              if (v181)
              {
                v184 = (char *)v180 + 16 * v183;
                LODWORD(v204) = *((_DWORD *)v184 + 2);
                if (v204 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v203, (const void **)v184);
                  if (!(_BYTE)v240)
                  {
LABEL_492:
                    v185 = v241;
                    v241 = 0;
                    if (v185)
                      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v185 + 8))(v185);
                  }
                }
                else
                {
                  v203 = *(void **)v184;
                  if (!(_BYTE)v240)
                    goto LABEL_492;
                }
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(_QWORD *)v180 + 24))(&v203);
                if (!(_BYTE)v240)
                  goto LABEL_492;
              }
            }
            if (*((_BYTE *)v218 + v171))
              v186 = &v206;
            else
              v186 = &v203;
            v187 = (char *)ArgOperands;
            if (Type >= HIDWORD(Type))
            {
              v190 = Type + 1;
              if (ArgOperands <= v186 && (char *)ArgOperands + 16 * Type > (char *)v186)
              {
                v192 = (char *)v186 - (_BYTE *)ArgOperands;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v190);
                v187 = (char *)ArgOperands;
                v186 = (void **)((char *)ArgOperands + v192);
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v190);
                v187 = (char *)ArgOperands;
              }
            }
            v188 = (llvm::APInt *)&v187[16 * Type];
            v189 = *((_DWORD *)v186 + 2);
            *((_DWORD *)v188 + 2) = v189;
            if (v189 > 0x40)
              llvm::APInt::initSlowCase(v188, (const void **)v186);
            else
              *(_QWORD *)v188 = *v186;
            LODWORD(Type) = Type + 1;
            if (v204 >= 0x41 && v203)
              operator delete[](v203);
            if (v207 >= 0x41 && v206)
              operator delete[](v206);
            if (v167 == ++v171)
              goto LABEL_513;
          }
        }
        mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v212, (uint64_t)&v240);
        LOWORD(v223) = v240;
        if ((_BYTE)v240)
        {
          v157 = v241;
          v224 = v241;
          v225 = v242;
          if (BYTE1(v240))
            v158 = 0;
          else
            v158 = v242;
        }
        else
        {
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v241 + 16))(&v224);
          v157 = v224;
          v225 = v242;
          if (BYTE1(v223))
            v158 = 0;
          else
            v158 = v242;
          if (!(_BYTE)v223)
          {
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v224 + 24))(&v209);
LABEL_415:
            if ((_BYTE)i)
            {
              if (v227 >= 0x41 && __p)
                operator delete[](__p);
              __p = v209;
              LODWORD(v227) = (_DWORD)v210;
              LODWORD(v210) = 0;
            }
            else
            {
              LODWORD(v227) = (_DWORD)v210;
              __p = v209;
              LODWORD(v210) = 0;
              LOBYTE(i) = 1;
            }
            if (!(_BYTE)v223)
            {
              v160 = v224;
              v224 = 0;
              if (v160)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v160 + 8))(v160);
            }
            if (!v243)
            {
              v161 = v245;
              v245 = 0;
              if (v161)
                (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
            }
            if (!(_BYTE)v240)
            {
              v162 = v241;
              v241 = 0;
              if (v162)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v162 + 8))(v162);
            }
            goto LABEL_430;
          }
        }
        v159 = (char *)v157 + 16 * v158;
        LODWORD(v210) = *((_DWORD *)v159 + 2);
        if (v210 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v209, (const void **)v159);
        else
          v209 = *(void **)v159;
        goto LABEL_415;
      }
      mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v214, (uint64_t)&v240);
      LOWORD(v223) = v240;
      if ((_BYTE)v240)
      {
        v79 = v241;
        v224 = v241;
        v225 = v242;
        if (BYTE1(v240))
          v80 = 0;
        else
          v80 = v242;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v241 + 16))(&v224);
        v79 = v224;
        v225 = v242;
        if (BYTE1(v223))
          v80 = 0;
        else
          v80 = v242;
        if (!(_BYTE)v223)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v224 + 24))(&v209);
LABEL_387:
          if ((_BYTE)j)
          {
            if (v231 >= 0x41 && v230)
              operator delete[](v230);
            v230 = v209;
            LODWORD(v231) = (_DWORD)v210;
            LODWORD(v210) = 0;
          }
          else
          {
            LODWORD(v231) = (_DWORD)v210;
            v230 = v209;
            LODWORD(v210) = 0;
            LOBYTE(j) = 1;
          }
          if (!(_BYTE)v223)
          {
            v154 = v224;
            v224 = 0;
            if (v154)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v154 + 8))(v154);
          }
          if (!v243)
          {
            v155 = v245;
            v245 = 0;
            if (v155)
              (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
          }
          if (!(_BYTE)v240)
          {
            v156 = v241;
            v241 = 0;
            if (v156)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v156 + 8))(v156);
          }
          goto LABEL_402;
        }
      }
      v84 = (char *)v79 + 16 * v80;
      LODWORD(v210) = *((_DWORD *)v84 + 2);
      if (v210 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v209, (const void **)v84);
      else
        v209 = *(void **)v84;
      goto LABEL_387;
    }
LABEL_199:
    v56 = 0;
  }
LABEL_200:
  if (v218 != &v220)
    free(v218);
  return v56;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldSelectOp>::externalFoldMultipleResults()
{
  return 0;
}

void llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::detail::DoubleAPFloat *v14;

  v2 = a1[2];
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    v7 = (_QWORD *)(a2 + 8);
    v8 = 32 * v2;
    v9 = (void **)(v5 + 8);
    do
    {
      if (v6 == *v9)
        v10 = (uint64_t)llvm::detail::DoubleAPFloat::DoubleAPFloat(v7, v9);
      else
        v10 = llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v7, (uint64_t)v9);
      v7 = (_QWORD *)(v10 + 32);
      v9 += 4;
      v8 -= 32;
    }
    while (v8);
    v11 = a1[2];
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)a1 - 24;
      v13 = 32 * v11;
      do
      {
        while (1)
        {
          v14 = (llvm::detail::DoubleAPFloat *)(v12 + v13);
          if (v6 != *(void **)(v12 + v13))
            break;
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v14);
          v13 -= 32;
          if (!v13)
            return;
        }
        llvm::detail::IEEEFloat::~IEEEFloat(v14);
        v13 -= 32;
      }
      while (v13);
    }
  }
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldPowerOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  llvm::APFloatBase *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *ElementTypeWithLargestPrecision;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *BroadcastedType;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t *v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  int v73;
  int v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t ElementsAttr;
  llvm::APFloatBase *v80;
  void *v81;
  _QWORD *v82;
  _QWORD *v83;
  llvm::APFloatBase *v84;
  _QWORD *v85;
  int v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 isSignedInteger;
  int IsEqual;
  uint64_t *ArgAttrsAttr;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL4 v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  void *__p;
  void *v106;
  _QWORD *v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  void *ElementTypeOrSelf;
  void *v115;
  _QWORD *v116;
  llvm::APFloatBase *v117;
  uint64_t v118;
  _QWORD v119[2];
  _QWORD *v120;
  uint64_t v121;
  _QWORD v122[2];
  _QWORD v123[2];
  uint64_t v124;
  void *v125;
  _QWORD v126[9];
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  void *Type;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v104 = a2;
  v5 = a3[1];
  if (!v5)
  {
    v102 = 0;
    v103 = 0;
    return 0;
  }
  v102 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v5);
  v103 = v6;
  if (!v102)
    return 0;
  v7 = *a3;
  if (*a3)
    v7 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v7);
  if (!v7)
  {
    v10 = (llvm::APFloatBase *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v104) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v10)
      goto LABEL_19;
    v11 = *(_QWORD *)v10;
    v12 = mlir::TypeID::get<mlir::ShapedType>();
    v13 = *(unsigned int *)(v11 + 16);
    if (!(_DWORD)v13)
      goto LABEL_19;
    v14 = *(_QWORD **)(v11 + 8);
    v15 = &v14[2 * v13];
    do
    {
      v16 = v13 >> 1;
      v17 = &v14[2 * (v13 >> 1)];
      v19 = *v17;
      v18 = v17 + 2;
      v13 += ~(v13 >> 1);
      if (v19 < v12)
        v14 = v18;
      else
        v13 = v16;
    }
    while (v13);
    if (v14 != v15 && *v14 == v12)
      v20 = v14[1];
    else
LABEL_19:
      v20 = 0;
    v117 = v10;
    v118 = v20;
    if (!mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v102))
      return 0;
    ElementTypeOrSelf = (void *)mlir::getElementTypeOrSelf(v102);
    mlir::ElementsAttr::value_begin<mlir::Attribute>((mlir::BranchOpInterface *)&v102, (uint64_t)&Type);
    if (BYTE1(Type))
      v21 = 0;
    else
      v21 = v132;
    if ((_BYTE)Type)
    {
      v22 = v131[v21];
    }
    else
    {
      v22 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v131 + 24))(v131, v21);
      if (!(_BYTE)Type)
      {
        v70 = v131;
        v131 = 0;
        if (v70)
          (*(void (**)(_QWORD *))(*v70 + 8))(v70);
      }
    }
    v71 = *(void **)(*(_QWORD *)v22 + 136);
    if (v71 != &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
    {
      if (v71 != &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
        return 0;
      v127 = v22;
      mlir::FloatAttr::getValue((mlir::FloatAttr *)&v127, (uint64_t)&Type);
      v80 = llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v125, 1.0);
      v81 = llvm::APFloatBase::IEEEsingle(v80);
      llvm::APFloat::Storage::Storage(&v128, &v125, v81);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v125);
      v82 = v131;
      v83 = v128;
      v85 = llvm::APFloatBase::PPCDoubleDouble(v84);
      if (v82 == v83)
      {
        if (v85 == v82)
          IsEqual = llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)&v131, (const llvm::detail::DoubleAPFloat *)&v128);
        else
          IsEqual = llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)&v131, (const llvm::detail::IEEEFloat *)&v128);
        v86 = IsEqual;
      }
      else
      {
        v86 = 0;
      }
      if (v85 == v128)
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v128);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v128);
      if (v86)
      {
        v25 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v104) | 4;
LABEL_131:
        if (v85 == v131)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v131);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v131);
        return v25;
      }
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v125, 0.0);
      llvm::APFloat::Storage::Storage(&v128, &v125, v81);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v125);
      if (v131 != v128)
        goto LABEL_134;
      if (v85 == v131)
      {
        if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)&v131, (const llvm::detail::DoubleAPFloat *)&v128))goto LABEL_144;
      }
      else if (llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)&v131, (const llvm::detail::IEEEFloat *)&v128))
      {
LABEL_144:
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v117))
        {
          ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v117);
          if (v95)
          {
            v96 = 8 * v95 - 8;
            do
            {
              v97 = *ArgAttrsAttr++;
              v98 = v97 != 0x8000000000000000;
              v99 = v97 == 0x8000000000000000 || v96 == 0;
              v96 -= 8;
            }
            while (!v99);
          }
          else
          {
            v98 = 1;
          }
        }
        else
        {
          v98 = 0;
        }
        if (v85 == v128)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v128);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v128);
        if (v98)
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v125, 1.0);
          llvm::APFloat::Storage::Storage(&v128, &v125, v81);
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v125);
          LOBYTE(v125) = 0;
          llvm::APFloat::convert((uint64_t)&v127, v131, 1, &v125);
          if (v85 == v128)
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v126, (const llvm::detail::DoubleAPFloat *)&v128);
          else
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v126, (const llvm::detail::IEEEFloat *)&v128);
          v101 = mlir::DenseElementsAttr::get(v117, v118, (uint64_t)&v125, 1);
          if (v85 == (_QWORD *)v126[0])
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v126);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v126);
          v25 = v101 & 0xFFFFFFFFFFFFFFFBLL;
          if (v85 == v128)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v128);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v128);
          goto LABEL_131;
        }
LABEL_168:
        if (v85 == v131)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v131);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v131);
        return 0;
      }
LABEL_134:
      if (v85 == v128)
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v128);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v128);
      goto LABEL_168;
    }
    v127 = v22;
    mlir::IntegerAttr::getValue(&v127, (llvm::APInt *)&Type);
    v73 = (int)v131;
    if (v131 > 0x40)
    {
      v87 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&Type);
      if (v87 == v73 - 1)
      {
LABEL_103:
        v25 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v104) | 4;
LABEL_104:
        if (v131 >= 0x41 && Type)
          operator delete[](Type);
        return v25;
      }
      if (v87 != v73)
      {
LABEL_120:
        if (Type)
        {
          operator delete[](Type);
          return 0;
        }
        return 0;
      }
    }
    else if (Type)
    {
      if (Type != (void *)1)
        return 0;
      goto LABEL_103;
    }
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v117))
    {
LABEL_119:
      if (v131 < 0x41)
        return 0;
      goto LABEL_120;
    }
    v88 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v117);
    if (v89)
    {
      v90 = 8 * v89;
      while (*v88 != 0x8000000000000000)
      {
        ++v88;
        v90 -= 8;
        if (!v90)
          goto LABEL_115;
      }
      goto LABEL_119;
    }
LABEL_115:
    v91 = v131;
    isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&ElementTypeOrSelf);
    LODWORD(v128) = v91;
    if (v91 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v127, 1, isSignedInteger);
      LODWORD(v126[0]) = (_DWORD)v128;
      if (v128 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v125, (const void **)&v127);
LABEL_155:
        v100 = mlir::DenseElementsAttr::get((uint64_t)v117, v118, (llvm::APInt *)&v125, 1);
        if (LODWORD(v126[0]) >= 0x41 && v125)
          operator delete[](v125);
        v25 = v100 & 0xFFFFFFFFFFFFFFFBLL;
        if (v128 >= 0x41 && v127)
          operator delete[]((void *)v127);
        goto LABEL_104;
      }
    }
    else
    {
      v127 = v91 != 0;
      LODWORD(v126[0]) = v91;
    }
    v125 = (void *)v127;
    goto LABEL_155;
  }
  mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v104);
  v124 = a2;
  if (*a3)
  {
    v9 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v123[0] = v9;
  v123[1] = v8;
  v23 = a3[1];
  if (v23)
    v23 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v23);
  else
    v24 = 0;
  v25 = 0;
  v122[0] = v23;
  v122[1] = v24;
  if (v9 && v23)
  {
    v26 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v124) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v26)
      goto LABEL_41;
    v27 = *v26;
    v28 = mlir::TypeID::get<mlir::ShapedType>();
    v29 = *(unsigned int *)(v27 + 16);
    if (!(_DWORD)v29)
      goto LABEL_41;
    v30 = *(_QWORD **)(v27 + 8);
    v31 = &v30[2 * v29];
    do
    {
      v32 = v29 >> 1;
      v33 = &v30[2 * (v29 >> 1)];
      v35 = *v33;
      v34 = v33 + 2;
      v29 += ~(v29 >> 1);
      if (v35 < v28)
        v30 = v34;
      else
        v29 = v32;
    }
    while (v29);
    if (v30 != v31 && *v30 == v28)
      v36 = v30[1];
    else
LABEL_41:
      v36 = 0;
    v120 = v26;
    v121 = v36;
    Type = (void *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v123);
    v131 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v122);
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision((_QWORD **)&Type, 2);
    if (!ElementTypeWithLargestPrecision)
      return 0;
    v38 = (uint64_t)ElementTypeWithLargestPrecision;
    mlir::mps::CPUNDArray::CPUNDArray(&Type, v123[0]);
    mlir::mps::CPUNDArray::CPUNDArray(&v127, v122[0]);
    v119[0] = 0;
    v119[1] = 0;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v120))
    {
      v39 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v120);
      if (!v40)
        goto LABEL_60;
      v41 = 8 * v40;
      while (*v39 != 0x8000000000000000)
      {
        ++v39;
        v41 -= 8;
        if (!v41)
          goto LABEL_60;
      }
    }
    v42 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v123);
    v43 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v122);
    BroadcastedType = (_QWORD *)mlir::OpTrait::util::getBroadcastedType(v42, v43, 0);
    if (!BroadcastedType)
    {
      v25 = 0;
      v120 = 0;
      v121 = 0;
LABEL_99:
      mlir::mps::CPUNDArray::~CPUNDArray((void **)&v127);
      mlir::mps::CPUNDArray::~CPUNDArray(&Type);
      return v25;
    }
    v45 = BroadcastedType;
    v46 = *BroadcastedType;
    v47 = mlir::TypeID::get<mlir::ShapedType>();
    v48 = *(unsigned int *)(v46 + 16);
    if (!(_DWORD)v48)
      goto LABEL_58;
    v49 = *(_QWORD **)(v46 + 8);
    v50 = &v49[2 * v48];
    do
    {
      v51 = v48 >> 1;
      v52 = &v49[2 * (v48 >> 1)];
      v54 = *v52;
      v53 = v52 + 2;
      v48 += ~(v48 >> 1);
      if (v54 < v47)
        v49 = v53;
      else
        v48 = v51;
    }
    while (v48);
    if (v49 != v50 && *v49 == v47)
      v55 = v49[1];
    else
LABEL_58:
      v55 = 0;
    v120 = v45;
    v121 = v55;
LABEL_60:
    if (v38 == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v120))
    {
      v59 = (uint64_t)v120;
      v69 = v121;
    }
    else
    {
      v56 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v120);
      v58 = (uint64_t *)mlir::RankedTensorType::get(v56, v57, v38, 0);
      v59 = (uint64_t)v58;
      if (!v58)
        goto LABEL_70;
      v60 = *v58;
      v61 = mlir::TypeID::get<mlir::ShapedType>();
      v62 = *(unsigned int *)(v60 + 16);
      if (!(_DWORD)v62)
        goto LABEL_70;
      v63 = *(_QWORD **)(v60 + 8);
      v64 = &v63[2 * v62];
      do
      {
        v65 = v62 >> 1;
        v66 = &v63[2 * (v62 >> 1)];
        v68 = *v66;
        v67 = v66 + 2;
        v62 += ~(v62 >> 1);
        if (v68 < v61)
          v63 = v67;
        else
          v62 = v65;
      }
      while (v62);
      if (v63 != v64 && *v63 == v61)
        v69 = v63[1];
      else
LABEL_70:
        v69 = 0;
      v120 = (_QWORD *)v59;
      v121 = v69;
    }
    mlir::mps::CPUNDArray::tryMakeAliasedArray(v59, v69, (uint64_t)v119, (uint64_t)&v125);
    mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel((uint64_t)&v117, 4);
    if (v132 <= v129)
      v74 = v129;
    else
      v74 = v132;
    v75 = operator new(0x10uLL);
    v115 = v75 + 2;
    v116 = v75 + 2;
    *v75 = &Type;
    v75[1] = &v127;
    ElementTypeOrSelf = v75;
    v76 = operator new(8uLL);
    v111 = v76;
    *v76 = &v125;
    v112 = v76 + 1;
    v113 = v76 + 1;
    v77 = operator new(0x10uLL);
    v109 = v77 + 2;
    v110 = v77 + 2;
    *v77 = 0;
    v77[1] = 0;
    v108 = v77;
    v78 = operator new(8uLL);
    __p = v78;
    *v78 = 0;
    v106 = v78 + 1;
    v107 = v78 + 1;
    mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)&v117, (uint64_t *)&ElementTypeOrSelf, (uint64_t **)&v111, (uint64_t)&v108, (uint64_t)&__p, 0, v74, (uint64_t)&v117);
    if (__p)
    {
      v106 = __p;
      operator delete(__p);
    }
    if (v108)
    {
      v109 = v108;
      operator delete(v108);
    }
    if (v111)
    {
      v112 = v111;
      operator delete(v111);
    }
    if (ElementTypeOrSelf)
    {
      v115 = ElementTypeOrSelf;
      operator delete(ElementTypeOrSelf);
    }
    ElementsAttr = v119[0];
    if (!v119[0])
      ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)&v125, 0, 0);
    v25 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
    mlir::mps::CPUNDArray::~CPUNDArray(&v125);
    goto LABEL_99;
  }
  return v25;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldPowerOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldTransposeOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (*a3)
  {
    v4 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  return mlir::mps::foldTransposeOp(a2, (uint64_t)v4, v6, 0);
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldTransposeOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldPermuteOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  int64x2_t v32;
  int64x2_t *v33;
  int64x2_t v34;
  int64x2_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ArgAttrsAttr;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t OperandRange;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t ElementsAttr;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t *v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  void *v79[10];
  _QWORD v80[2];
  void *v81[10];
  uint64_t *v82;
  uint64_t v83;
  _QWORD v84[2];
  _QWORD v85[2];
  uint64_t v86;
  int64x2_t *v87;
  uint64_t v88;
  _BYTE v89[32];
  uint64_t *v90;
  uint64_t v91;
  _QWORD v92[5];

  v92[4] = *MEMORY[0x1E0C80C00];
  v86 = a2;
  v4 = a3[1];
  if (!v4)
    return 0;
  v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v4);
  v7 = v6;
  if (!v5)
    return 0;
  v8 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v86) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v8)
    goto LABEL_14;
  v9 = *v8;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_14;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_14:
    v18 = 0;
  v85[0] = v8;
  v85[1] = v18;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v85))
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v85);
  v20 = v19;
  v90 = v92;
  v91 = 0x400000000;
  mlir::getIntValues<long long>((uint64_t)v5, v7, (uint64_t)&v90, 1);
  if ((_DWORD)v91)
  {
    v21 = v90;
    v22 = 8 * v91;
    do
    {
      *v21 = mlir::getPositiveAxis(*v21, v20);
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
  v87 = (int64x2_t *)v89;
  v88 = 0x400000000;
  if (!v20)
  {
    v27 = 0;
    v24 = (int64x2_t *)v89;
    goto LABEL_35;
  }
  if (v20 < 5)
  {
    v23 = 0;
    v24 = (int64x2_t *)v89;
    v25 = v20;
    goto LABEL_26;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, v89, v20, 8);
  v23 = v88;
  v24 = v87;
  v25 = v20 - v88;
  if (v20 != v88)
LABEL_26:
    bzero((char *)v24 + 8 * v23, 8 * v25);
  LODWORD(v88) = v20;
  if (!(_DWORD)v20)
  {
    v27 = 0;
    goto LABEL_35;
  }
  v27 = v20;
  v28 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v28 < 3)
  {
    v29 = 0;
    v30 = (uint64_t *)v24;
    do
LABEL_34:
      *v30++ = v29++;
    while (v30 != (uint64_t *)((char *)v24 + 8 * v20));
    goto LABEL_35;
  }
  v31 = v28 + 1;
  v29 = (v28 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v30 = &v24->i64[v29];
  v32 = (int64x2_t)xmmword_181233120;
  v33 = v24 + 1;
  v34 = vdupq_n_s64(2uLL);
  v35 = vdupq_n_s64(4uLL);
  v36 = v29;
  do
  {
    v33[-1] = v32;
    *v33 = vaddq_s64(v32, v34);
    v32 = vaddq_s64(v32, v35);
    v33 += 2;
    v36 -= 4;
  }
  while (v36);
  if (v31 != v29)
    goto LABEL_34;
LABEL_35:
  if ((_DWORD)v91 == (_DWORD)v20 && !memcmp(v90, v24, 8 * v27))
  {
    v26 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v86) | 4;
  }
  else
  {
    v37 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v86) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v37)
      goto LABEL_46;
    v38 = *v37;
    v39 = mlir::TypeID::get<mlir::ShapedType>();
    v40 = *(unsigned int *)(v38 + 16);
    if (!(_DWORD)v40)
      goto LABEL_46;
    v41 = *(_QWORD **)(v38 + 8);
    v42 = &v41[2 * v40];
    do
    {
      v43 = v40 >> 1;
      v44 = &v41[2 * (v40 >> 1)];
      v46 = *v44;
      v45 = v44 + 2;
      v40 += ~(v40 >> 1);
      if (v46 < v39)
        v41 = v45;
      else
        v40 = v43;
    }
    while (v40);
    if (v41 != v42 && *v41 == v39)
      v47 = v41[1];
    else
LABEL_46:
      v47 = 0;
    v84[0] = v37;
    v84[1] = v47;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v84))
    {
      if (*a3)
      {
        v82 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
        v83 = v48;
        if (v82)
        {
          ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v84);
          v51 = v50;
          v81[0] = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v82);
          v81[1] = v52;
          OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v81);
          v54 = (uint64_t *)mlir::RankedTensorType::get(ArgAttrsAttr, v51, OperandRange, 0);
          if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v82))
          {
            v55 = (uint64_t)v82;
            v56 = v83;
            if (!v54)
              goto LABEL_60;
            v57 = *v54;
            v58 = mlir::TypeID::get<mlir::ShapedType>();
            v59 = *(unsigned int *)(v57 + 16);
            if (!(_DWORD)v59)
              goto LABEL_60;
            v60 = *(_QWORD **)(v57 + 8);
            v61 = &v60[2 * v59];
            do
            {
              v62 = v59 >> 1;
              v63 = &v60[2 * (v59 >> 1)];
              v65 = *v63;
              v64 = v63 + 2;
              v59 += ~(v59 >> 1);
              if (v65 < v58)
                v60 = v64;
              else
                v59 = v62;
            }
            while (v59);
            if (v60 != v61 && *v60 == v58)
              v66 = v60[1];
            else
LABEL_60:
              v66 = 0;
            ElementsAttr = (unint64_t)mlir::reshapeElementsAttr(v55, v56, (uint64_t)v54, v66);
          }
          else
          {
            mlir::mps::CPUNDArray::CPUNDArray(v81, v82);
            v80[0] = 0;
            v80[1] = 0;
            if (!v54)
              goto LABEL_75;
            v68 = *v54;
            v69 = mlir::TypeID::get<mlir::ShapedType>();
            v70 = *(unsigned int *)(v68 + 16);
            if (!(_DWORD)v70)
              goto LABEL_75;
            v71 = *(_QWORD **)(v68 + 8);
            v72 = &v71[2 * v70];
            do
            {
              v73 = v70 >> 1;
              v74 = &v71[2 * (v70 >> 1)];
              v76 = *v74;
              v75 = v74 + 2;
              v70 += ~(v70 >> 1);
              if (v76 < v69)
                v71 = v75;
              else
                v70 = v73;
            }
            while (v70);
            if (v71 != v72 && *v71 == v69)
              v77 = v71[1];
            else
LABEL_75:
              v77 = 0;
            mlir::mps::CPUNDArray::tryMakeAliasedArray((uint64_t)v54, v77, (uint64_t)v80, (uint64_t)v79);
            mlir::mps::transpose((mlir::AffineBinaryOpExpr *)v81, (uint64_t)v79, (uint64_t)v90, v91);
            ElementsAttr = v80[0];
            if (!v80[0])
              ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v79, 0, 0);
            mlir::mps::CPUNDArray::~CPUNDArray(v79);
            mlir::mps::CPUNDArray::~CPUNDArray(v81);
          }
          v26 = ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
          goto LABEL_80;
        }
      }
      else
      {
        v82 = 0;
        v83 = 0;
      }
    }
    v26 = 0;
  }
LABEL_80:
  if (v87 != (int64x2_t *)v89)
    free(v87);
  if (v90 != v92)
    free(v90);
  return v26;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldPermuteOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldScatterOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  llvm::APFloatBase *v14;
  uint64_t v15;
  _QWORD *ElementTypeWithLargestPrecision;
  uint64_t ArgAttrsAttr;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *FloatSemantics;
  llvm::APFloatBase *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t i;
  llvm::APFloatBase *v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::APFloatBase *v37;
  llvm::APFloatBase *v38;
  uint64_t v39;
  char *v40;
  const llvm::detail::DoubleAPFloat *v41;
  void *v42;
  llvm::APFloatBase *v43;
  llvm::APFloatBase *v44;
  llvm::APFloatBase *v45;
  llvm::APFloatBase *v46;
  llvm::APFloatBase *v47;
  llvm::APFloatBase *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  llvm::detail::DoubleAPFloat *v54;
  uint64_t NumElements;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::APFloatBase *v59;
  uint64_t v60;
  char *v61;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  llvm::APFloatBase *v65;
  llvm::APFloatBase *v66;
  llvm::APFloatBase *v67;
  uint64_t v68;
  char *v69;
  llvm::APFloatBase *v70;
  llvm::APFloatBase *v71;
  const void **v72;
  __n128 *ElementsAttr;
  char *v74;
  uint64_t v75;
  void *v76;
  void *__p;
  llvm::APFloatBase *v78;
  uint64_t v79;
  __int16 v80;
  llvm::APFloatBase *v81;
  uint64_t v82;
  __int16 v83;
  llvm::APFloatBase *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD v91[2];
  uint64_t *v92;
  uint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  uint64_t ArgOperands;
  llvm::APFloatBase *v97;
  uint64_t v98;
  void *OperandRange;
  uint64_t v100;
  _QWORD v101[17];

  v101[16] = *MEMORY[0x1E0C80C00];
  v95 = a2;
    return 0;
  v5 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v95);
  v94[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8));
  v94[1] = v6;
  if (!v94[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v94)
    || mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v95) != 6)
  {
    return 0;
  }
  v7 = *a3;
  if (*a3)
    v7 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v7);
  else
    v8 = 0;
  v92 = v7;
  v93 = v8;
  v9 = a3[1];
  if (v9)
    v9 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v9);
  else
    v10 = 0;
  v91[0] = v9;
  v91[1] = v10;
  v11 = a3[2];
  if (v11)
  {
    v11 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[2]);
    v9 = (uint64_t *)v91[0];
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  v89 = v11;
  v90 = v12;
  if (!v92 || !v9 || !v11)
    return v13;
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v92);
  v97 = v14;
  OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  v86 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v91);
  v87 = v15;
  v100 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v86);
  ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision((_QWORD **)&OperandRange, 2);
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v94);
  v19 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v18, (uint64_t)ElementTypeWithLargestPrecision, 0);
  OperandRange = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v92);
  v100 = v20;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v92, (uint64_t)&ArgOperands);
    NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v92, v93);
    LOWORD(v86) = 257;
    v87 = 0;
    v88 = NumElements;
    llvm::SmallVector<llvm::APInt,4u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(&OperandRange, (uint64_t)&ArgOperands, (uint64_t)&v86);
    if (!(_BYTE)v86)
    {
      v56 = v87;
      v87 = 0;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    }
    if (!(_BYTE)ArgOperands)
    {
      v57 = (uint64_t)v97;
      v97 = 0;
      if (v57)
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    }
    if (mlir::ElementsAttr::getNumElements((uint64_t)v89, v90) < 1)
    {
LABEL_157:
      ElementsAttr = mlir::createElementsAttr(v19, OperandRange, v100);
      v74 = (char *)OperandRange;
      if ((_DWORD)v100)
      {
        v75 = 16 * v100;
        do
        {
          if (*(_DWORD *)&v74[v75 - 8] >= 0x41u)
          {
            v76 = *(void **)&v74[v75 - 16];
            if (v76)
              operator delete[](v76);
          }
          v75 -= 16;
        }
        while (v75);
        v74 = (char *)OperandRange;
      }
      v13 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      if (v74 != (char *)v101)
        free(v74);
      return v13;
    }
    v58 = 0;
    while (1)
    {
      mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v89, (uint64_t)&v80);
      v83 = v80;
      if ((_BYTE)v80)
      {
        v59 = v81;
        v84 = v81;
        v85 = v58 + v82;
        if (HIBYTE(v80))
          v60 = 0;
        else
          v60 = v58 + v82;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v81 + 16))(&v84);
        v59 = v84;
        v85 = v58 + v82;
        if (HIBYTE(v83))
          v60 = 0;
        else
          v60 = v58 + v82;
        if (!(_BYTE)v83)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v84 + 24))(&__p);
          goto LABEL_119;
        }
      }
      v61 = (char *)v59 + 16 * v60;
      v62 = *((_DWORD *)v61 + 2);
      LODWORD(v78) = v62;
      if (v62 <= 0x40)
      {
        v63 = *(void **)v61;
        __p = *(void **)v61;
        goto LABEL_121;
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v61);
LABEL_119:
      LOBYTE(v62) = (_BYTE)v78;
      if (v78 <= 0x40)
      {
        v63 = __p;
LABEL_121:
        v64 = (uint64_t)((_QWORD)v63 << -(char)v62) >> -(char)v62;
        if ((_BYTE)v83)
          goto LABEL_126;
        goto LABEL_124;
      }
      v64 = *(_QWORD *)__p;
      operator delete[](__p);
      if ((_BYTE)v83)
        goto LABEL_126;
LABEL_124:
      v65 = v84;
      v84 = 0;
      if (v65)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v65 + 8))(v65);
LABEL_126:
      if (!(_BYTE)v80)
      {
        v66 = v81;
        v81 = 0;
        if (v66)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v66 + 8))(v66);
      }
      if (v64 < 0 || v64 >= mlir::ElementsAttr::getNumElements((uint64_t)v92, v93))
        goto LABEL_106;
      mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)v91, (uint64_t)&v80);
      v83 = v80;
      if ((_BYTE)v80)
      {
        v67 = v81;
        v84 = v81;
        v85 = v58 + v82;
        if (HIBYTE(v80))
          v68 = 0;
        else
          v68 = v58 + v82;
LABEL_139:
        v69 = (char *)v67 + 16 * v68;
        LODWORD(v78) = *((_DWORD *)v69 + 2);
        if (v78 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v69);
          if (!(_BYTE)v83)
            goto LABEL_145;
        }
        else
        {
          __p = *(void **)v69;
          if (!(_BYTE)v83)
            goto LABEL_145;
        }
        goto LABEL_147;
      }
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v81 + 16))(&v84);
      v67 = v84;
      v85 = v58 + v82;
      if (HIBYTE(v83))
        v68 = 0;
      else
        v68 = v58 + v82;
      if ((_BYTE)v83)
        goto LABEL_139;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v84 + 24))(&__p);
      if (!(_BYTE)v83)
      {
LABEL_145:
        v70 = v84;
        v84 = 0;
        if (v70)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v70 + 8))(v70);
      }
LABEL_147:
      if (!(_BYTE)v80)
      {
        v71 = v81;
        v81 = 0;
        if (v71)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v71 + 8))(v71);
      }
      v72 = (const void **)((char *)OperandRange + 16 * v64);
      if (*((_DWORD *)v72 + 2) > 0x40u || v78 > 0x40)
      {
        llvm::APInt::assignSlowCase(v72, (const void **)&__p);
      }
      else
      {
        *v72 = __p;
        *((_DWORD *)v72 + 2) = (_DWORD)v78;
      }
      if (v78 >= 0x41 && __p)
        operator delete[](__p);
LABEL_106:
      if (++v58 >= mlir::ElementsAttr::getNumElements((uint64_t)v89, v90))
        goto LABEL_157;
    }
  }
  OperandRange = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v92);
  v100 = v21;
  v22 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&OperandRange)
                 + 136);
  if (v22 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v22 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  OperandRange = ElementTypeWithLargestPrecision;
  FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&OperandRange);
  mlir::ElementsAttr::value_begin<llvm::APFloat>((mlir::BranchOpInterface *)&v92, (uint64_t)&v86);
  v83 = 257;
  v84 = 0;
  v85 = mlir::ElementsAttr::getNumElements((uint64_t)v92, v93);
  llvm::SmallVector<llvm::APFloat,4u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>((uint64_t)&OperandRange, (uint64_t)&v86, (uint64_t)&v83);
  if (!(_BYTE)v83)
  {
    v25 = v84;
    v84 = 0;
    if (v25)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v25 + 8))(v25);
  }
  if (!(_BYTE)v86)
  {
    v26 = v87;
    v87 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  if ((_DWORD)v100)
  {
    v27 = (char *)OperandRange;
    v28 = 32 * v100;
    do
    {
      LOBYTE(ArgOperands) = 0;
      llvm::APFloat::convert((uint64_t)v27, FloatSemantics, 1, &ArgOperands);
      v27 += 32;
      v28 -= 32;
    }
    while (v28);
  }
  if (mlir::ElementsAttr::getNumElements((uint64_t)v89, v90) >= 1)
  {
    for (i = 0; i < mlir::ElementsAttr::getNumElements((uint64_t)v89, v90); ++i)
    {
      mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v89, (uint64_t)&v80);
      LOWORD(ArgOperands) = v80;
      if ((_BYTE)v80)
      {
        v30 = v81;
        v97 = v81;
        v98 = i + v82;
        if (HIBYTE(v80))
          v31 = 0;
        else
          v31 = i + v82;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v81 + 16))(&v97);
        v30 = v97;
        v98 = i + v82;
        if (BYTE1(ArgOperands))
          v31 = 0;
        else
          v31 = i + v82;
        if (!(_BYTE)ArgOperands)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v97 + 24))(&__p);
          goto LABEL_57;
        }
      }
      v32 = (char *)v30 + 16 * v31;
      v33 = *((_DWORD *)v32 + 2);
      LODWORD(v78) = v33;
      if (v33 <= 0x40)
      {
        v34 = *(void **)v32;
        __p = *(void **)v32;
        goto LABEL_59;
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v32);
LABEL_57:
      LOBYTE(v33) = (_BYTE)v78;
      if (v78 <= 0x40)
      {
        v34 = __p;
LABEL_59:
        v35 = (uint64_t)((_QWORD)v34 << -(char)v33) >> -(char)v33;
        if ((_BYTE)ArgOperands)
          goto LABEL_64;
        goto LABEL_62;
      }
      v35 = *(_QWORD *)__p;
      operator delete[](__p);
      if ((_BYTE)ArgOperands)
        goto LABEL_64;
LABEL_62:
      v36 = (uint64_t)v97;
      v97 = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_64:
      if (!(_BYTE)v80)
      {
        v37 = v81;
        v81 = 0;
        if (v37)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v37 + 8))(v37);
      }
      if (v35 < 0 || v35 >= mlir::ElementsAttr::getNumElements((uint64_t)v92, v93))
        continue;
      mlir::ElementsAttr::value_begin<llvm::APFloat>((mlir::BranchOpInterface *)v91, (uint64_t)&__p);
      v80 = (__int16)__p;
      if ((_BYTE)__p)
      {
        v38 = v78;
        v81 = v78;
        v82 = i + v79;
        if (BYTE1(__p))
          v39 = 0;
        else
          v39 = i + v79;
LABEL_77:
        v40 = (char *)v38 + 32 * v39;
        v42 = (void *)*((_QWORD *)v40 + 1);
        v41 = (const llvm::detail::DoubleAPFloat *)(v40 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v38) == v42)
        {
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v97, v41);
          if (!(_BYTE)v80)
            goto LABEL_83;
        }
        else
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v97, v41);
          if (!(_BYTE)v80)
            goto LABEL_83;
        }
        goto LABEL_85;
      }
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v78 + 16))(&v81);
      v38 = v81;
      v82 = i + v79;
      if (HIBYTE(v80))
        v39 = 0;
      else
        v39 = i + v79;
      if ((_BYTE)v80)
        goto LABEL_77;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v81 + 24))(&ArgOperands);
      if (!(_BYTE)v80)
      {
LABEL_83:
        v43 = v81;
        v81 = 0;
        if (v43)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v43 + 8))(v43);
      }
LABEL_85:
      if (!(_BYTE)__p)
      {
        v44 = v78;
        v78 = 0;
        if (v44)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v44 + 8))(v44);
      }
      LOBYTE(v80) = 0;
      llvm::APFloat::convert((uint64_t)&ArgOperands, FloatSemantics, 1, &v80);
      v45 = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)((char *)OperandRange + 32 * v35 + 8), (uint64_t *)&v97);
      v46 = v97;
      if (llvm::APFloatBase::PPCDoubleDouble(v45) == v46)
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v97);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v97);
    }
  }
  v47 = (llvm::APFloatBase *)mlir::createElementsAttr(v19, (uint64_t)OperandRange, v100);
  v48 = v47;
  v49 = (char *)OperandRange;
  v50 = v100;
  if ((_DWORD)v100)
  {
    v51 = llvm::APFloatBase::PPCDoubleDouble(v47);
    v52 = v49 - 24;
    v53 = 32 * v50;
    do
    {
      while (1)
      {
        v54 = (llvm::detail::DoubleAPFloat *)&v52[v53];
        if (v51 != *(void **)&v52[v53])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v54);
        v53 -= 32;
        if (!v53)
          goto LABEL_95;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v54);
      v53 -= 32;
    }
    while (v53);
LABEL_95:
    v49 = (char *)OperandRange;
  }
  v13 = (unint64_t)v48 & 0xFFFFFFFFFFFFFFFBLL;
  if (v49 != (char *)v101)
    free(v49);
  return v13;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldScatterOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::mps::`anonymous namespace'::verifyTriviallyFoldable(uint64_t **a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *canMapOperands;
  uint64_t v7;
  uint64_t v8;
  _QWORD *ArgAttrsAttr;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t *v15;
  uint64_t v16;

  if (!a2)
    return (uint64_t *)1;
  v2 = a1;
  v3 = &a1[a2];
  while (1)
  {
    result = *v2;
    if (!*v2)
    {
      v15 = 0;
      v16 = 0;
      return result;
    }
    result = llvm::DefaultDoCastIfPossible<mlir::TypedAttr,mlir::Attribute const,llvm::CastInfo<mlir::TypedAttr,mlir::Attribute const,void>>::doCastIfPossible(result);
    v15 = result;
    v16 = v5;
    if (!result)
      return result;
    canMapOperands = (uint64_t *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v15);
    v14[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(canMapOperands);
    v14[1] = v7;
    if (!v14[0])
      return 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v14))
      return 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v14);
    if (v8 > 1 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v14))
      return 0;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v14);
    if (v10)
    {
      v11 = 8 * v10;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v11 -= 8;
        if (!v11)
          goto LABEL_15;
      }
      return 0;
    }
LABEL_15:
    v12 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v14);
    if (mlir::ShapedType::getNumElements(v12, v13) >= 1025)
      return 0;
    if (++v2 == v3)
      return (uint64_t *)1;
  }
}

uint64_t *llvm::DefaultDoCastIfPossible<mlir::TypedAttr,mlir::Attribute const,llvm::CastInfo<mlir::TypedAttr,mlir::Attribute const,void>>::doCastIfPossible(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;

  v1 = a1;
  v2 = *a1;
  v3 = mlir::TypeID::get<mlir::TypedAttr>();
  v4 = *(unsigned int *)(v2 + 16);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(_QWORD **)(v2 + 8);
  v6 = &v5[2 * v4];
  do
  {
    v7 = v4 >> 1;
    v8 = &v5[2 * (v4 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v4 += ~(v4 >> 1);
    if (v10 < v3)
      v5 = v9;
    else
      v4 = v7;
  }
  while (v4);
  if (v5 == v6 || *v5 != v3 || !v5[1])
    return 0;
  if (v1)
  {
    v12 = *v1;
    v13 = mlir::TypeID::get<mlir::TypedAttr>();
    v14 = *(unsigned int *)(v12 + 16);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD **)(v12 + 8);
      do
      {
        v16 = v14 >> 1;
        v17 = &v15[2 * (v14 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v14 += ~(v14 >> 1);
        if (v19 < v13)
          v15 = v18;
        else
          v14 = v16;
      }
      while (v14);
    }
  }
  return v1;
}

_QWORD *llvm::SmallVector<llvm::APInt,4u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  _QWORD v10[2];
  char v11[8];
  _QWORD v12[2];

  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v11[0] = *(_BYTE *)a2;
  v11[1] = *(_BYTE *)(a2 + 1);
  if (v11[0])
    v12[0] = *(_QWORD *)(a2 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a2 + 8) + 16))(v12);
  v12[1] = *(_QWORD *)(a2 + 16);
  v9[0] = *(_BYTE *)a3;
  v9[1] = *(_BYTE *)(a3 + 1);
  if (v9[0])
    v10[0] = *(_QWORD *)(a3 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a3 + 8) + 16))(v10);
  v10[1] = *(_QWORD *)(a3 + 16);
  llvm::SmallVectorImpl<llvm::APInt>::append<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>((uint64_t)a1, v11, (uint64_t)v9);
  if (!v9[0])
  {
    v6 = v10[0];
    v10[0] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (!v11[0])
  {
    v7 = v12[0];
    v12[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return a1;
}

_QWORD *llvm::SmallVectorImpl<llvm::APInt>::append<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *result;
  char v18[8];
  _QWORD v19[2];
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  char v33;
  char v34;
  _QWORD v35[2];
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v33 = *a2;
  v34 = a2[1];
  if (v33)
    v35[0] = *((_QWORD *)a2 + 1);
  else
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)a2 + 1) + 16))(v35);
  v35[1] = *((_QWORD *)a2 + 2);
  v30 = *(_BYTE *)a3;
  v31 = *(_BYTE *)(a3 + 1);
  if (v30)
  {
    v6 = (uint64_t *)(a3 + 16);
    v32 = *(_OWORD *)(a3 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a3 + 8) + 16))(&v32);
    v6 = (uint64_t *)(a3 + 16);
    *((_QWORD *)&v32 + 1) = *(_QWORD *)(a3 + 16);
    v7 = v32;
    *(_QWORD *)&v32 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (!v33)
  {
    v8 = v35[0];
    v35[0] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v26 = *a2;
  v27 = a2[1];
  if (v26)
    v28 = *((_QWORD *)a2 + 1);
  else
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a2 + 1) + 16))(&v28);
  v29 = *((_QWORD *)a2 + 2);
  v22 = *(_BYTE *)a3;
  v23 = *(_BYTE *)(a3 + 1);
  if (v22)
    v24 = *(_QWORD *)(a3 + 8);
  else
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a3 + 8) + 16))(&v24);
  v25 = *v6;
  v40 = v26;
  v41 = v27;
  if (v26)
    v42 = v28;
  else
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v28 + 16))(&v42);
  v9 = v29;
  v43 = v29;
  v36 = v22;
  v37 = v23;
  if (v22)
  {
    v10 = v25;
    v38 = v24;
    v39 = v25;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v24 + 16))(&v38);
    v9 = v43;
    v10 = v25;
    v39 = v25;
    if (!v36)
    {
      v11 = v38;
      v38 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  if (!v40)
  {
    v12 = v42;
    v42 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (!v22)
  {
    v13 = v24;
    v24 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = v10 - v9;
  if (!v26)
  {
    v15 = v28;
    v28 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = v14 + *(unsigned int *)(a1 + 8);
  if (v16 > *(unsigned int *)(a1 + 12))
    llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow(a1, v16);
  LOWORD(v20) = *(_WORD *)a2;
  if ((_BYTE)v20)
    v21[0] = *((_QWORD *)a2 + 1);
  else
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)a2 + 1) + 16))(v21);
  v21[1] = *((_QWORD *)a2 + 2);
  v18[0] = *(_BYTE *)a3;
  v18[1] = *(_BYTE *)(a3 + 1);
  if (v18[0])
    v19[0] = *(_QWORD *)(a3 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a3 + 8) + 16))(v19);
  v19[1] = *v6;
  result = llvm::SmallVectorTemplateBase<llvm::APInt,false>::uninitialized_copy<mlir::detail::ElementsAttrIterator<llvm::APInt>,llvm::APInt*>(&v20, v18, (llvm::APInt *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 8)));
  if (!v18[0])
  {
    result = (_QWORD *)v19[0];
    v19[0] = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (!(_BYTE)v20)
  {
    result = (_QWORD *)v21[0];
    v21[0] = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  *(_DWORD *)(a1 + 8) += v14;
  return result;
}

_QWORD *llvm::SmallVectorTemplateBase<llvm::APInt,false>::uninitialized_copy<mlir::detail::ElementsAttrIterator<llvm::APInt>,llvm::APInt*>(_QWORD *result, char *a2, llvm::APInt *this)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  char v16;
  _QWORD v17[2];
  unsigned __int8 v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = result;
  v18 = *(_BYTE *)result;
  v19 = *((_BYTE *)result + 1);
  if (v18)
    v20 = (_QWORD *)result[1];
  else
    result = (*(_QWORD *(**)(_QWORD **__return_ptr))(*(_QWORD *)result[1] + 16))(&v20);
  v21 = v5[2];
  v16 = *a2;
  if (*a2)
    v17[0] = *((_QWORD *)a2 + 1);
  else
    result = (*(_QWORD *(**)(_QWORD *__return_ptr))(**((_QWORD **)a2 + 1) + 16))(v17);
  v6 = *((_QWORD *)a2 + 2);
  v17[1] = v6;
  v7 = v18;
  if (v18)
  {
    v8 = v20;
    v9 = v20;
  }
  else
  {
    v8 = 0;
    v9 = v20;
    v20 = 0;
  }
  v10 = v21;
  if (v16)
  {
    v11 = v17[0];
    if (v21 == v6)
      goto LABEL_14;
  }
  else
  {
    v11 = v17[0];
    v17[0] = 0;
    if (v21 == v6)
      goto LABEL_14;
  }
  v12 = v19;
  do
  {
    if (v12)
      v13 = 0;
    else
      v13 = v10;
    if (v7)
    {
      v14 = &v9[2 * v13];
      v15 = *((_DWORD *)v14 + 2);
      *((_DWORD *)this + 2) = v15;
      if (v15 > 0x40)
        result = llvm::APInt::initSlowCase(this, (const void **)v14);
      else
        *(_QWORD *)this = *v14;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 24))(v9);
    }
    ++v10;
    this = (llvm::APInt *)((char *)this + 16);
  }
  while (v6 != v10);
LABEL_14:
  if (!v16 && v11)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v7)
  {
    if (v8)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
    if (v9)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  }
  if (!v16)
  {
    result = (_QWORD *)v17[0];
    v17[0] = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  if (!v18)
  {
    result = v20;
    v20 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t llvm::SmallVector<llvm::APFloat,4u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v9[8];
  _QWORD v10[2];
  char v11[8];
  _QWORD v12[2];

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  v11[0] = *(_BYTE *)a2;
  v11[1] = *(_BYTE *)(a2 + 1);
  if (v11[0])
    v12[0] = *(_QWORD *)(a2 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a2 + 8) + 16))(v12);
  v12[1] = *(_QWORD *)(a2 + 16);
  v9[0] = *(_BYTE *)a3;
  v9[1] = *(_BYTE *)(a3 + 1);
  if (v9[0])
    v10[0] = *(_QWORD *)(a3 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a3 + 8) + 16))(v10);
  v10[1] = *(_QWORD *)(a3 + 16);
  llvm::SmallVectorImpl<llvm::APFloat>::append<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>((unsigned int *)a1, v11, v9);
  if (!v9[0])
  {
    v6 = v10[0];
    v10[0] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (!v11[0])
  {
    v7 = v12[0];
    v12[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::APFloat>::append<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>(unsigned int *a1, char *a2, char *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t result;
  _BYTE v20[8];
  _QWORD v21[2];
  _BYTE v22[8];
  _QWORD v23[2];
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  char v34;
  char v35;
  _QWORD v36[2];
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v34 = *a2;
  v35 = a2[1];
  if (v34)
    v36[0] = *((_QWORD *)a2 + 1);
  else
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)a2 + 1) + 16))(v36);
  v36[1] = *((_QWORD *)a2 + 2);
  v31 = *a3;
  v32 = a3[1];
  if (v31)
  {
    v6 = (uint64_t *)(a3 + 16);
    v33 = *(_OWORD *)(a3 + 8);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)a3 + 1) + 16))(&v33);
    v6 = (uint64_t *)(a3 + 16);
    *((_QWORD *)&v33 + 1) = *((_QWORD *)a3 + 2);
    v7 = v33;
    *(_QWORD *)&v33 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (!v34)
  {
    v8 = v36[0];
    v36[0] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v28 = *(_WORD *)a2;
  if ((_BYTE)v28)
    v29 = *((_QWORD *)a2 + 1);
  else
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a2 + 1) + 16))(&v29);
  v30 = *((_QWORD *)a2 + 2);
  v24 = *a3;
  v25 = a3[1];
  if (v24)
    v26 = *((_QWORD *)a3 + 1);
  else
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)a3 + 1) + 16))(&v26);
  v27 = *v6;
  LOWORD(v41) = v28;
  if ((_BYTE)v28)
    v42 = v29;
  else
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v29 + 16))(&v42);
  v9 = v30;
  v43 = v30;
  v37 = v24;
  v38 = v25;
  if (v24)
  {
    v10 = v27;
    v39 = v26;
    v40 = v27;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v26 + 16))(&v39);
    v9 = v43;
    v10 = v27;
    v40 = v27;
    if (!v37)
    {
      v11 = v39;
      v39 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  if (!(_BYTE)v41)
  {
    v12 = v42;
    v42 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (!v24)
  {
    v13 = v26;
    v26 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = v10 - v9;
  if (!(_BYTE)v28)
  {
    v15 = v29;
    v29 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = v14 + a1[2];
  if (v16 > a1[3])
  {
    v41 = 0;
    v17 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v16, 32, &v41);
    llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(a1, (uint64_t)v17);
    v18 = v41;
    if (*(unsigned int **)a1 != a1 + 4)
      free(*(void **)a1);
    *(_QWORD *)a1 = v17;
    a1[3] = v18;
  }
  v22[0] = *a2;
  v22[1] = a2[1];
  if (v22[0])
    v23[0] = *((_QWORD *)a2 + 1);
  else
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)a2 + 1) + 16))(v23);
  v23[1] = *((_QWORD *)a2 + 2);
  v20[0] = *a3;
  v20[1] = a3[1];
  if (v20[0])
    v21[0] = *((_QWORD *)a3 + 1);
  else
    (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)a3 + 1) + 16))(v21);
  v21[1] = *v6;
  result = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::uninitialized_copy<mlir::detail::ElementsAttrIterator<llvm::APFloat>,llvm::APFloat*>((uint64_t)v22, (uint64_t)v20, *(_QWORD *)a1 + 32 * a1[2]);
  if (!v20[0])
  {
    result = v21[0];
    v21[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (!v22[0])
  {
    result = v23[0];
    v23[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  a1[2] += v14;
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::APFloat,false>::uninitialized_copy<mlir::detail::ElementsAttrIterator<llvm::APFloat>,llvm::APFloat*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned __int8 v7[8];
  _QWORD v8[2];
  _BYTE v9[8];
  _QWORD v10[2];

  v9[0] = *(_BYTE *)a1;
  v9[1] = *(_BYTE *)(a1 + 1);
  if (v9[0])
    v10[0] = *(_QWORD *)(a1 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 16))(v10);
  v10[1] = *(_QWORD *)(a1 + 16);
  v7[0] = *(_BYTE *)a2;
  v7[1] = *(_BYTE *)(a2 + 1);
  if (v7[0])
    v8[0] = *(_QWORD *)(a2 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a2 + 8) + 16))(v8);
  v8[1] = *(_QWORD *)(a2 + 16);
  result = std::uninitialized_copy[abi:nn180100]<mlir::detail::ElementsAttrIterator<llvm::APFloat>,llvm::APFloat*>((llvm::detail::DoubleAPFloat *)v9, v7, a3);
  if (!v7[0])
  {
    result = v8[0];
    v8[0] = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (!v9[0])
  {
    result = v10[0];
    v10[0] = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t std::uninitialized_copy[abi:nn180100]<mlir::detail::ElementsAttrIterator<llvm::APFloat>,llvm::APFloat*>(llvm::detail::DoubleAPFloat *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  const llvm::detail::DoubleAPFloat *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(unsigned __int8 *)a1;
  if (*(_BYTE *)a1)
  {
    v5 = *((_QWORD *)a1 + 1);
    v15 = v5;
  }
  else
  {
    v15 = 0;
    v5 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = 0;
  }
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = *((_QWORD *)a1 + 2);
  v8 = *a2;
  v16 = *((_QWORD *)a2 + 1);
  if (!*a2)
    *((_QWORD *)a2 + 1) = 0;
  for (i = *((_QWORD *)a2 + 2); i != v7; a3 += 32)
  {
    if (v6)
      v11 = 0;
    else
      v11 = v7;
    if (v4)
    {
      v12 = v5 + 32 * v11;
      v14 = *(void **)(v12 + 8);
      v13 = (const llvm::detail::DoubleAPFloat *)(v12 + 8);
      if (llvm::APFloatBase::PPCDoubleDouble(a1) == v14)
        a1 = llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)(a3 + 8), v13);
      else
        a1 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)(a3 + 8), v13);
    }
    else
    {
      a1 = (llvm::detail::DoubleAPFloat *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    }
    ++v7;
  }
  if (!v8 && v16)
    (*(void (**)(void))(*(_QWORD *)v16 + 8))();
  if (!v4)
  {
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return a3;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldGatherOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::APFloatBase *v10;
  uint64_t v11;
  uint64_t Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t OperandRange;
  _QWORD *v17;
  _BOOL4 InferredResultTypes;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::APFloatBase *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  const llvm::detail::DoubleAPFloat *v33;
  llvm::APFloatBase *v34;
  llvm::APFloatBase *v35;
  uint64_t v36;
  llvm::APFloatBase *v37;
  llvm::APFloatBase *v38;
  llvm::APFloatBase *v39;
  llvm::APFloatBase *v40;
  uint64_t v41;
  llvm::APFloatBase *v42;
  uint64_t v43;
  llvm::APFloatBase *v44;
  llvm::APFloatBase *v45;
  __n128 *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const llvm::detail::DoubleAPFloat *v56;
  llvm::APFloatBase *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *Address;
  llvm::detail::DoubleAPFloat *v63;
  const llvm::detail::DoubleAPFloat *v64;
  llvm::APFloatBase *v65;
  _BYTE *v66;
  char *v67;
  uint64_t v68;
  llvm::detail::DoubleAPFloat *v69;
  uint64_t v70;
  llvm::APFloatBase *v71;
  llvm::APFloatBase *v72;
  uint64_t v73;
  llvm::APFloatBase *v74;
  llvm::APFloatBase *v75;
  llvm::APFloatBase *v76;
  llvm::APFloatBase *v77;
  __n128 *ElementsAttr;
  char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  char *v83;
  unsigned int v84;
  void *v85;
  uint64_t v86;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  llvm::APFloatBase *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void **v99;
  llvm::APInt *v100;
  unsigned int v101;
  unint64_t v102;
  int64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  llvm::APFloatBase *v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  uint64_t v115;
  void *__p;
  unsigned int v117;
  uint64_t v118;
  llvm::APFloatBase *v119;
  uint64_t v120;
  __int16 v121;
  llvm::APFloatBase *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm::APFloatBase *v131;
  uint64_t v132;
  __int16 v133;
  llvm::APFloatBase *v134;
  uint64_t v135;
  void *v136;
  llvm::APFloatBase *v137;
  uint64_t v138;
  void *ArgOperands;
  uint64_t v140;
  _BYTE v141[128];
  uint64_t v142;
  llvm::APFloatBase *v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v129 = a2;
  v4 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v129) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (*(_UNKNOWN **)(*(_QWORD *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = 0;
  v128 = v4;
  if (!v4 || !mlir::TensorType::hasRank((mlir::TensorType *)&v128))
    return 0;
  v5 = a3[1];
  if (v5)
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v5);
  else
    v6 = 0;
  v126 = v5;
  v127 = v6;
  if (!*a3)
  {
    v124 = 0;
    v125 = 0;
    return 0;
  }
  v124 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v125 = v7;
  if (!v124)
    return 0;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  v140 = v8;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (v9 > 1)
    return 0;
  if (!v126)
    return 0;
  v118 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v126);
  v119 = v10;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v118);
  if (v11 > 1 || mlir::ElementsAttr::getNumElements((uint64_t)v126, v127) > 64)
    return 0;
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v128);
  v14 = v13;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  v140 = v15;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  v17 = (_QWORD *)mlir::RankedTensorType::get(Value, v14, OperandRange, 0);
  InferredResultTypes = mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v129);
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  v140 = v19;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
    v140 = v26;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
    if (v27 > 1)
      return 0;
    ArgOperands = v141;
    v140 = 0x400000000;
    mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v124, (uint64_t)&v118);
    LOWORD(v142) = v118;
    if ((_BYTE)v118)
    {
      v30 = (uint64_t)v119;
      v143 = v119;
      v144 = v120;
      if (BYTE1(v118))
        v31 = 0;
      else
        v31 = v120;
    }
    else
    {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v119 + 16))(&v143);
      v30 = (uint64_t)v143;
      v144 = v120;
      if (BYTE1(v142))
        v31 = 0;
      else
        v31 = v120;
      if (!(_BYTE)v142)
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v143 + 24))(&v136);
        goto LABEL_164;
      }
    }
    v36 = v30 + 16 * v31;
    LODWORD(v137) = *(_DWORD *)(v36 + 8);
    if (v137 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v136, (const void **)v36);
    else
      v136 = *(void **)v36;
LABEL_164:
    LODWORD(v111) = (_DWORD)v137;
    if (v137 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v110, 0, 0);
      if (v137 >= 0x41 && v136)
        operator delete[](v136);
    }
    else
    {
      v110 = 0;
    }
    if (!(_BYTE)v142)
    {
      v70 = (uint64_t)v143;
      v143 = 0;
      if (v70)
        (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    }
    if (!(_BYTE)v121)
    {
      v71 = v122;
      v122 = 0;
      if (v71)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v71 + 8))(v71);
    }
    if (!(_BYTE)v118)
    {
      v72 = v119;
      v119 = 0;
      if (v72)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v72 + 8))(v72);
    }
    mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v126, (uint64_t)&v118);
    LOWORD(v136) = v118;
    if ((_BYTE)v118)
      v137 = v119;
    else
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v119 + 16))(&v137);
    v73 = v120;
    v138 = v120;
    v133 = v121;
    if ((_BYTE)v121)
    {
      v134 = v122;
    }
    else
    {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v122 + 16))(&v134);
      v73 = v138;
    }
    v135 = v123;
    if (v73 == v123)
    {
LABEL_185:
      if (!(_BYTE)v133)
      {
        v74 = v134;
        v134 = 0;
        if (v74)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v74 + 8))(v74);
      }
      if (!(_BYTE)v136)
      {
        v75 = v137;
        v137 = 0;
        if (v75)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v75 + 8))(v75);
      }
      if (!(_BYTE)v121)
      {
        v76 = v122;
        v122 = 0;
        if (v76)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v76 + 8))(v76);
      }
      if (!(_BYTE)v118)
      {
        v77 = v119;
        v119 = 0;
        if (v77)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v77 + 8))(v77);
      }
      ElementsAttr = mlir::createElementsAttr(v17, ArgOperands, v140);
      if (v111 >= 0x41 && v110)
        operator delete[](v110);
      v79 = (char *)ArgOperands;
      if ((_DWORD)v140)
      {
        v80 = 16 * v140;
        do
        {
          if (*(_DWORD *)&v79[v80 - 8] >= 0x41u)
          {
            v81 = *(void **)&v79[v80 - 16];
            if (v81)
              operator delete[](v81);
          }
          v80 -= 16;
        }
        while (v80);
        v79 = (char *)ArgOperands;
      }
      v28 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
      if (v79 != v141)
        free(v79);
      return v28;
    }
    while (1)
    {
      if (BYTE1(v136))
        v82 = 0;
      else
        v82 = v73;
      if ((_BYTE)v136)
      {
        v83 = (char *)v137 + 16 * v82;
        v84 = *((_DWORD *)v83 + 2);
        LODWORD(v108) = v84;
        if (v84 <= 0x40)
        {
          v85 = *(void **)v83;
          v107 = *(void **)v83;
LABEL_221:
          v86 = (uint64_t)((_QWORD)v85 << -(char)v84) >> -(char)v84;
          goto LABEL_223;
        }
        llvm::APInt::initSlowCase((llvm::APInt *)&v107, (const void **)v83);
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v137 + 24))(&v107);
      }
      LOBYTE(v84) = v108;
      if (v108 <= 0x40)
      {
        v85 = v107;
        goto LABEL_221;
      }
      v86 = *(_QWORD *)v107;
LABEL_223:
      LODWORD(v105) = (_DWORD)v111;
      if (v111 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v104, (const void **)&v110);
      else
        v104 = v110;
      if (v86 < 0 && InferredResultTypes)
        v86 += mlir::ElementsAttr::getNumElements((uint64_t)v124, v125);
      if (v86 < 0 || v86 >= mlir::ElementsAttr::getNumElements((uint64_t)v124, v125))
        goto LABEL_258;
      mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v124, (uint64_t)&v142);
      v113 = v142;
      v88 = BYTE1(v142);
      if ((_BYTE)v142)
      {
        v89 = (uint64_t)v143;
        v90 = v144;
        v114 = (uint64_t)v143;
        v115 = v144;
        LOWORD(v130) = v142;
        goto LABEL_237;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v143 + 16))(&v114);
      v88 = HIBYTE(v113);
      v90 = v144;
      v115 = v144;
      LOWORD(v130) = v113;
      if ((_BYTE)v113)
      {
        v89 = v114;
LABEL_237:
        v91 = v90 + v86;
        v131 = (llvm::APFloatBase *)v89;
        v132 = v91;
        if (v88)
          v92 = 0;
        else
          v92 = v91;
LABEL_240:
        v93 = v89 + 16 * v92;
        v117 = *(_DWORD *)(v93 + 8);
        if (v117 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v93);
        else
          __p = *(void **)v93;
        goto LABEL_243;
      }
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v114 + 16))(&v131);
      v89 = (uint64_t)v131;
      v132 = v115 + v86;
      if (BYTE1(v130))
        v92 = 0;
      else
        v92 = v115 + v86;
      if ((_BYTE)v130)
        goto LABEL_240;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v131 + 24))(&__p);
LABEL_243:
      if (v105 >= 0x41 && v104)
        operator delete[](v104);
      v104 = __p;
      LODWORD(v105) = v117;
      v117 = 0;
      if (!(_BYTE)v130)
      {
        v94 = v131;
        v131 = 0;
        if (v94)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v94 + 8))(v94);
      }
      if (!(_BYTE)v113)
      {
        v95 = v114;
        v114 = 0;
        if (v95)
          (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
      }
      if (!v145)
      {
        v96 = v146;
        v146 = 0;
        if (v96)
          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
      }
      if (!(_BYTE)v142)
      {
        v97 = (uint64_t)v143;
        v143 = 0;
        if (v97)
          (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
      }
LABEL_258:
      v98 = (char *)ArgOperands;
      if (v140 >= HIDWORD(v140))
      {
        v102 = v140 + 1;
        if (ArgOperands <= &v104 && (char *)ArgOperands + 16 * v140 > (char *)&v104)
        {
          v103 = (char *)&v104 - (_BYTE *)ArgOperands;
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v102);
          v98 = (char *)ArgOperands;
          v99 = (void **)((char *)ArgOperands + v103);
        }
        else
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v102);
          v99 = &v104;
          v98 = (char *)ArgOperands;
        }
      }
      else
      {
        v99 = &v104;
      }
      v100 = (llvm::APInt *)&v98[16 * v140];
      v101 = *((_DWORD *)v99 + 2);
      *((_DWORD *)v100 + 2) = v101;
      if (v101 > 0x40)
        llvm::APInt::initSlowCase(v100, (const void **)v99);
      else
        *(_QWORD *)v100 = *v99;
      LODWORD(v140) = v140 + 1;
      if (v105 >= 0x41 && v104)
        operator delete[](v104);
      if (v108 >= 0x41 && v107)
        operator delete[](v107);
      v73 = v138 + 1;
      v138 = v73;
      if (v73 == v135)
        goto LABEL_185;
    }
  }
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  v140 = v20;
  v21 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                 + 136);
  if (v21 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v21 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v124);
  v140 = v22;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&ArgOperands);
  if (v23 > 1)
    return 0;
  ArgOperands = v141;
  v140 = 0x400000000;
  mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v124, (uint64_t)&v118);
  v133 = v118;
  if ((_BYTE)v118)
  {
    v24 = v119;
    v134 = v119;
    v135 = v120;
    if (BYTE1(v118))
      v25 = 0;
    else
      v25 = v120;
LABEL_45:
    v32 = (char *)v24 + 32 * v25;
    v34 = (llvm::APFloatBase *)*((_QWORD *)v32 + 1);
    v33 = (const llvm::detail::DoubleAPFloat *)(v32 + 8);
    v35 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v24);
    if (v35 == v34)
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v143, v33);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v143, v33);
    goto LABEL_56;
  }
  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v119 + 16))(&v134);
  v24 = v134;
  v135 = v120;
  if (HIBYTE(v133))
    v25 = 0;
  else
    v25 = v120;
  if ((_BYTE)v133)
    goto LABEL_45;
  v37 = (llvm::APFloatBase *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v134 + 24))(&v142);
  v35 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v37);
LABEL_56:
  if (v35 == v143)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v137, (uint64_t)v35, 0);
  else
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v137, (uint64_t)v143, 0);
  if (v35 == v143)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v143);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v143);
  if (!(_BYTE)v133)
  {
    v38 = v134;
    v134 = 0;
    if (v38)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v38 + 8))(v38);
  }
  if (!(_BYTE)v121)
  {
    v39 = v122;
    v122 = 0;
    if (v39)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v39 + 8))(v39);
  }
  if (!(_BYTE)v118)
  {
    v40 = v119;
    v119 = 0;
    if (v40)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v40 + 8))(v40);
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v126, (uint64_t)&v118);
  v113 = v118;
  if ((_BYTE)v118)
    v114 = (uint64_t)v119;
  else
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v119 + 16))(&v114);
  v41 = v120;
  v115 = v120;
  LOWORD(v110) = v121;
  if ((_BYTE)v121)
  {
    v111 = v122;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v122 + 16))(&v111);
    v41 = v115;
  }
  v112 = v123;
  while (v41 != v112)
  {
    if (HIBYTE(v113))
      v47 = 0;
    else
      v47 = v41;
    if ((_BYTE)v113)
    {
      v48 = v114 + 16 * v47;
      v49 = *(_DWORD *)(v48 + 8);
      v117 = v49;
      if (v49 <= 0x40)
      {
        v50 = *(void **)v48;
        __p = *(void **)v48;
LABEL_104:
        v51 = (uint64_t)((_QWORD)v50 << -(char)v49) >> -(char)v49;
        goto LABEL_106;
      }
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v48);
    }
    else
    {
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v114 + 24))(&__p);
    }
    LOBYTE(v49) = v117;
    if (v117 <= 0x40)
    {
      v50 = __p;
      goto LABEL_104;
    }
    v51 = *(_QWORD *)__p;
LABEL_106:
    if (v35 == v137)
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v134, (const llvm::detail::DoubleAPFloat *)&v137);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v134, (const llvm::detail::IEEEFloat *)&v137);
    if (v51 < 0 && InferredResultTypes)
      v51 += mlir::ElementsAttr::getNumElements((uint64_t)v124, v125);
    if (v51 < 0 || v51 >= mlir::ElementsAttr::getNumElements((uint64_t)v124, v125))
      goto LABEL_140;
    mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&v124, (uint64_t)&v142);
    LOWORD(v104) = v142;
    if ((_BYTE)v142)
    {
      v53 = (uint64_t)v143;
      v105 = (uint64_t)v143;
      v106 = v144;
      LOWORD(v107) = v142;
      v108 = (uint64_t)v143;
      v109 = v144 + v51;
      if (BYTE1(v142))
        v54 = 0;
      else
        v54 = v144 + v51;
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v143 + 16))(&v105);
      v106 = v144;
      LOWORD(v107) = (_WORD)v104;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v105 + 16))(&v108);
      v53 = v108;
      v109 = v106 + v51;
      if (BYTE1(v107))
        v54 = 0;
      else
        v54 = v106 + v51;
      if (!(_BYTE)v107)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v108 + 24))(&v130);
        goto LABEL_125;
      }
    }
    v55 = v53 + 32 * v54;
    v57 = *(llvm::APFloatBase **)(v55 + 8);
    v56 = (const llvm::detail::DoubleAPFloat *)(v55 + 8);
    if (v35 == v57)
      llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v131, v56);
    else
      llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v131, v56);
LABEL_125:
    llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v134, (llvm::APFloatBase *)&v131);
    if (v35 == v131)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v131);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v131);
    if (!(_BYTE)v107)
    {
      v58 = v108;
      v108 = 0;
      if (v58)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    }
    if (!(_BYTE)v104)
    {
      v59 = v105;
      v105 = 0;
      if (v59)
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    }
    if (!v145)
    {
      v60 = v146;
      v146 = 0;
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
    }
    if (!(_BYTE)v142)
    {
      v61 = (uint64_t)v143;
      v143 = 0;
      if (v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    }
LABEL_140:
    Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&ArgOperands, (unint64_t)&v133, 1);
    v63 = (llvm::detail::DoubleAPFloat *)((char *)ArgOperands + 32 * v140 + 8);
    v65 = (llvm::APFloatBase *)*((_QWORD *)Address + 1);
    v64 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
    if (v35 == v65)
      llvm::detail::DoubleAPFloat::DoubleAPFloat(v63, v64);
    else
      llvm::detail::IEEEFloat::IEEEFloat(v63, v64);
    LODWORD(v140) = v140 + 1;
    if (v35 == v134)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v134);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v134);
    if (v117 >= 0x41 && __p)
      operator delete[](__p);
    v41 = v115 + 1;
    v115 = v41;
  }
  if (!(_BYTE)v110)
  {
    v42 = v111;
    v111 = 0;
    if (v42)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v42 + 8))(v42);
  }
  if (!(_BYTE)v113)
  {
    v43 = v114;
    v114 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  if (!(_BYTE)v121)
  {
    v44 = v122;
    v122 = 0;
    if (v44)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v44 + 8))(v44);
  }
  if (!(_BYTE)v118)
  {
    v45 = v119;
    v119 = 0;
    if (v45)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v45 + 8))(v45);
  }
  v46 = mlir::createElementsAttr(v17, (uint64_t)ArgOperands, v140);
  if (v35 == v137)
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v137);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v137);
  v66 = ArgOperands;
  if ((_DWORD)v140)
  {
    v67 = (char *)ArgOperands - 24;
    v68 = 32 * v140;
    do
    {
      while (1)
      {
        v69 = (llvm::detail::DoubleAPFloat *)&v67[v68];
        if (v35 != *(llvm::APFloatBase **)&v67[v68])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v69);
        v68 -= 32;
        if (!v68)
          goto LABEL_160;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v69);
      v68 -= 32;
    }
    while (v68);
LABEL_160:
    v66 = ArgOperands;
  }
  v28 = (unint64_t)v46 & 0xFFFFFFFFFFFFFFFBLL;
  if (v66 != v141)
    free(v66);
  return v28;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldGatherOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldSliceOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *result;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Bias;
  unint64_t matched;
  uint64_t PositiveAxis;
  _QWORD *ArgAttrsAttr;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t SparseShape;
  unint64_t v39;
  uint64_t OperandRange;
  uint64_t v42;
  void *v43;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD v58[2];
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  _QWORD v64[2];

  v64[1] = *MEMORY[0x1E0C80C00];
  v61 = a2;
  result = *a3;
  if (!*a3)
  {
    v59 = 0;
    v60 = 0;
    return result;
  }
  result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(result);
  v59 = result;
  v60 = v4;
  if (result)
  {
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v59);
    v6 = Type;
    if (!Type)
      goto LABEL_14;
    v7 = *Type;
    v8 = mlir::TypeID::get<mlir::ShapedType>();
    v9 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v9)
      goto LABEL_14;
    v10 = *(_QWORD **)(v7 + 8);
    v11 = &v10[2 * v9];
    do
    {
      v12 = v9 >> 1;
      v13 = &v10[2 * (v9 >> 1)];
      v15 = *v13;
      v14 = v13 + 2;
      v9 += ~(v9 >> 1);
      if (v15 < v8)
        v10 = v14;
      else
        v9 = v12;
    }
    while (v9);
    if (v10 != v11 && *v10 == v8)
      v16 = v10[1];
    else
LABEL_14:
      v16 = 0;
    v58[0] = v6;
    v58[1] = v16;
    v17 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v61) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v17)
      goto LABEL_24;
    v18 = *v17;
    v19 = mlir::TypeID::get<mlir::ShapedType>();
    v20 = *(unsigned int *)(v18 + 16);
    if (!(_DWORD)v20)
      goto LABEL_24;
    v21 = *(_QWORD **)(v18 + 8);
    v22 = &v21[2 * v20];
    do
    {
      v23 = v20 >> 1;
      v24 = &v21[2 * (v20 >> 1)];
      v26 = *v24;
      v25 = v24 + 2;
      v20 += ~(v20 >> 1);
      if (v26 < v19)
        v21 = v25;
      else
        v20 = v23;
    }
    while (v20);
    if (v21 != v22 && *v21 == v19)
      v27 = v21[1];
    else
LABEL_24:
      v27 = 0;
    v56 = v17;
    v57 = v27;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56))
      return 0;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v58))
      return 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
    if (v28 != 1)
      return 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v58);
    if (v29 != 1)
      return 0;
    v30 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v58);
    Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v61);
    matched = mlir::matchConstantWithIntValue<int>(Bias);
    if ((matched & 0xFF00000000) == 0)
      return 0;
    PositiveAxis = mlir::getPositiveAxis((int)matched, v30);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v56))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
      if (!v35)
      {
LABEL_35:
        v37 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v56);
        goto LABEL_46;
      }
      v36 = 8 * v35;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v36 -= 8;
        if (!v36)
          goto LABEL_35;
      }
    }
    SparseShape = mlir::mpsx::SparseDenseMatMulOp::getSparseShape((mlir::mpsx::SparseDenseMatMulOp *)&v61);
    v39 = mlir::matchConstantWithIntValue<int>(SparseShape);
    if ((v39 & 0xFF00000000) == 0 || (v39 & 0x80000000) != 0)
      return 0;
    v37 = v39;
    if (v39 + PositiveAxis > v30)
      return 0;
    v64[0] = v39;
    *(_QWORD *)&v62 = v64;
    *((_QWORD *)&v62 + 1) = 1;
    v63 = 1;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v56);
    v56 = (_QWORD *)mlir::ShapedType::cloneWith((uint64_t *)&v56, &v62, OperandRange);
    v57 = v42;
LABEL_46:
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v58)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
    }
    else
    {
      v43 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v58)
                     + 136);
      if (v43 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        && v43 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 0;
      }
    }
    return (uint64_t *)(v55 & 0xFFFFFFFFFFFFFFFBLL);
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldSliceOp>::externalFoldMultipleResults()
{
  return 0;
}

__n128 *mlir::mps::`anonymous namespace'::getFoldedSliceResult<llvm::APInt>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void **p_p;
  char *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t ArgAttrsAttr;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OperandRange;
  _QWORD *v28;
  __n128 *ElementsAttr;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  uint64_t ArgOperands;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  void *__p;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48[2];
  char *v49;
  uint64_t v50;
  _QWORD v51[9];

  v6 = a6;
  v51[8] = *MEMORY[0x1E0C80C00];
  v48[0] = a1;
  v48[1] = a2;
  v47[0] = a3;
  v47[1] = a4;
  v49 = (char *)v51;
  v50 = 0x400000000;
  if (a6 >= 5)
    llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v49, a6);
  mlir::ElementsAttr::getValues<llvm::APInt>(v48, (uint64_t)&ArgOperands);
  LOWORD(__p) = ArgOperands;
  if ((_BYTE)ArgOperands)
  {
    v8 = v38;
    v42 = v37;
    v43 = v38;
    v44 = ArgOperands;
LABEL_6:
    v45 = v42;
    v46 = v8 + a5;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v37 + 16))(&v42);
  v8 = v38;
  v43 = v38;
  v44 = (__int16)__p;
  if ((_BYTE)__p)
    goto LABEL_6;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v42 + 16))(&v45);
  v46 = v43 + a5;
  if (!(_BYTE)__p)
  {
    v35 = v42;
    v42 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
LABEL_7:
  if (!v39)
  {
    v9 = v40;
    v40 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (!(_BYTE)ArgOperands)
  {
    v10 = v37;
    v37 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (v6 >= 1)
  {
    do
    {
      LOWORD(ArgOperands) = v44;
      v11 = HIBYTE(v44);
      if ((_BYTE)v44)
      {
        v12 = v45;
        v37 = v45;
        v13 = 1;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 16))(&v37);
        v11 = BYTE1(ArgOperands);
        v13 = ArgOperands;
        v12 = v37;
      }
      v15 = v46;
      v38 = v46++;
      if (v11)
        v16 = 0;
      else
        v16 = v15;
      if (v13)
      {
        v17 = v12 + 16 * v16;
        LODWORD(v42) = *(_DWORD *)(v17 + 8);
        if (v42 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v17);
        else
          __p = *(void **)v17;
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v12 + 24))(&__p);
      }
      v18 = v49;
      if (v50 >= HIDWORD(v50))
      {
        v21 = v50 + 1;
        if (v49 <= (char *)&__p && &v49[16 * v50] > (char *)&__p)
        {
          v22 = (char *)&__p - v49;
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v49, v21);
          v18 = v49;
          p_p = (void **)&v49[v22];
        }
        else
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v49, v21);
          p_p = &__p;
          v18 = v49;
        }
      }
      else
      {
        p_p = &__p;
      }
      v20 = &v18[16 * v50];
      *((_DWORD *)v20 + 2) = *((_DWORD *)p_p + 2);
      *(_QWORD *)v20 = *p_p;
      *((_DWORD *)p_p + 2) = 0;
      LODWORD(v50) = v50 + 1;
      if (v42 >= 0x41 && __p)
        operator delete[](__p);
      if (!(_BYTE)ArgOperands)
      {
        v14 = v37;
        v37 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      --v6;
    }
    while (v6);
  }
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v47);
  v25 = v24;
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v48);
  v37 = v26;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  v28 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v25, OperandRange, 0);
  ElementsAttr = mlir::createElementsAttr(v28, v49, v50);
  if (!(_BYTE)v44)
  {
    v30 = v45;
    v45 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  v31 = v49;
  if ((_DWORD)v50)
  {
    v32 = 16 * v50;
    do
    {
      if (*(_DWORD *)&v31[v32 - 8] >= 0x41u)
      {
        v33 = *(void **)&v31[v32 - 16];
        if (v33)
          operator delete[](v33);
      }
      v32 -= 16;
    }
    while (v32);
    v31 = v49;
  }
  if (v31 != (char *)v51)
    free(v31);
  return ElementsAttr;
}

llvm::APFloatBase *mlir::mps::`anonymous namespace'::getFoldedSliceResult<llvm::APFloat>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  void *v8;
  int v9;
  uint64_t v10;
  llvm::APFloatBase *v11;
  int v12;
  llvm::APFloatBase *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const llvm::detail::DoubleAPFloat *v18;
  void *v19;
  char *Address;
  _QWORD *v21;
  _QWORD *v22;
  llvm::APFloatBase *v23;
  llvm::APFloatBase *v24;
  llvm::APFloatBase *v25;
  uint64_t ArgAttrsAttr;
  uint64_t v27;
  uint64_t v28;
  llvm::APFloatBase *v29;
  uint64_t OperandRange;
  _QWORD *v31;
  llvm::APFloatBase *ElementsAttr;
  llvm::APFloatBase *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  uint64_t v38;
  llvm::detail::DoubleAPFloat *v39;
  llvm::APFloatBase *v41;
  __int16 v42;
  __int16 v43;
  llvm::APFloatBase *v44;
  uint64_t v45;
  __int16 v46;
  llvm::APFloatBase *v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50[2];
  uint64_t ArgOperands;
  llvm::APFloatBase *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[17];

  v6 = a6;
  v58[16] = *MEMORY[0x1E0C80C00];
  v50[0] = a1;
  v50[1] = a2;
  v49[0] = a3;
  v49[1] = a4;
  v56 = v58;
  v57 = 0x400000000;
  if (a6 >= 5)
  {
    ArgOperands = 0;
    v8 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v56, v58, a6, 32, (unint64_t *)&ArgOperands);
    llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow((unsigned int *)&v56, (uint64_t)v8);
    v9 = ArgOperands;
    if (v56 != v58)
      free(v56);
    v56 = v8;
    HIDWORD(v57) = v9;
  }
  mlir::ElementsAttr::getValues<llvm::APFloat>(v50, (uint64_t)&ArgOperands);
  v42 = ArgOperands;
  if ((_BYTE)ArgOperands)
  {
    v44 = v52;
    v45 = v53;
    v46 = ArgOperands;
    v47 = v52;
    v48 = v53 + a5;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v52 + 16))(&v44);
    v45 = v53;
    v46 = v42;
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v44 + 16))(&v47);
    v48 = v45 + a5;
    v41 = v44;
    v44 = 0;
    if (v41)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v41 + 8))(v41);
  }
  if (!v54)
  {
    v10 = v55;
    v55 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!(_BYTE)ArgOperands)
  {
    v11 = v52;
    v52 = 0;
    if (v11)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v11 + 8))(v11);
  }
  if (v6 >= 1)
  {
    do
    {
      v43 = v46;
      v12 = HIBYTE(v46);
      if ((_BYTE)v46)
      {
        v13 = v47;
        v44 = v47;
        v14 = 1;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v47 + 16))(&v44);
        v12 = HIBYTE(v43);
        v14 = v43;
        v13 = v44;
      }
      v15 = v48;
      v45 = v48++;
      if (v12)
        v16 = 0;
      else
        v16 = v15;
      if (v14)
      {
        v17 = (char *)v13 + 32 * v16;
        v19 = (void *)*((_QWORD *)v17 + 1);
        v18 = (const llvm::detail::DoubleAPFloat *)(v17 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v13) == v19)
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v52, v18);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v52, v18);
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v13 + 24))(&ArgOperands);
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v56, (unint64_t)&ArgOperands, 1);
      v21 = (char *)v56 + 32 * v57 + 8;
      v22 = Address + 8;
      v23 = (llvm::APFloatBase *)*((_QWORD *)Address + 1);
      v24 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
      if (v24 == v23)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v21, v22);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v21, (uint64_t)v22);
      LODWORD(v57) = v57 + 1;
      if (v24 == v52)
      {
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v52);
        if (!(_BYTE)v43)
        {
LABEL_35:
          v25 = v44;
          v44 = 0;
          if (v25)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v25 + 8))(v25);
        }
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v52);
        if (!(_BYTE)v43)
          goto LABEL_35;
      }
      --v6;
    }
    while (v6);
  }
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v49);
  v28 = v27;
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v50);
  v52 = v29;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  v31 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v28, OperandRange, 0);
  ElementsAttr = (llvm::APFloatBase *)mlir::createElementsAttr(v31, (uint64_t)v56, v57);
  v33 = ElementsAttr;
  if (!(_BYTE)v46)
  {
    ElementsAttr = v47;
    v47 = 0;
    if (ElementsAttr)
      ElementsAttr = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)ElementsAttr + 8))(ElementsAttr);
  }
  v34 = (char *)v56;
  v35 = v57;
  if ((_DWORD)v57)
  {
    v36 = llvm::APFloatBase::PPCDoubleDouble(ElementsAttr);
    v37 = v34 - 24;
    v38 = 32 * v35;
    do
    {
      while (1)
      {
        v39 = (llvm::detail::DoubleAPFloat *)&v37[v38];
        if (v36 != *(void **)&v37[v38])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v39);
        v38 -= 32;
        if (!v38)
          goto LABEL_45;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v39);
      v38 -= 32;
    }
    while (v38);
LABEL_45:
    v34 = (char *)v56;
  }
  if (v34 != (char *)v58)
    free(v34);
  return v33;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldStridedSliceOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *canMapOperands;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 Index;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::APFloatBase *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  llvm::APFloatBase *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t PositiveAxis;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  llvm::APFloatBase *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  const llvm::detail::DoubleAPFloat *v77;
  void *v78;
  char *Address;
  _QWORD *v80;
  _QWORD *v81;
  llvm::APFloatBase *v82;
  llvm::APFloatBase *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  llvm::APFloatBase *v87;
  uint64_t v88;
  _QWORD *v89;
  llvm::APFloatBase *v90;
  llvm::APFloatBase *v91;
  uint64_t *v92;
  uint64_t v93;
  void *v94;
  uint64_t *v95;
  uint64_t v96;
  llvm::detail::DoubleAPFloat *v97;
  uint64_t v98;
  llvm::APFloatBase *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  void **v104;
  char *v105;
  unint64_t v106;
  int64_t v107;
  uint64_t ArgAttrsAttr;
  uint64_t v109;
  uint64_t v110;
  uint64_t OperandRange;
  _QWORD *v112;
  __n128 *ElementsAttr;
  llvm::APFloatBase *v114;
  uint64_t v115;
  void *v116;
  void *__p;
  llvm::APFloatBase *v118;
  uint64_t v119;
  _QWORD v120[2];
  _QWORD v121[2];
  uint64_t v122[2];
  uint64_t v123[2];
  uint64_t v124[2];
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  void *ArgOperands;
  llvm::APFloatBase *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v125 = a2;
  if (*a3)
  {
    v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v124[0] = (uint64_t)v5;
  v124[1] = v4;
  v6 = a3[1];
  if (v6)
  {
    v8 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v6);
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v123[0] = (uint64_t)v8;
  v123[1] = v7;
  v9 = a3[3];
  if (v9)
    v9 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v9);
  else
    v10 = 0;
  v11 = 0;
  v122[0] = (uint64_t)v9;
  v122[1] = v10;
  if (!v5 || !v8 || !v9)
    return v11;
  v12 = *a3;
  if (!v12)
    goto LABEL_22;
  v13 = *v12;
  v14 = mlir::TypeID::get<mlir::TypedAttr>();
  v15 = *(unsigned int *)(v13 + 16);
  if (!(_DWORD)v15)
    goto LABEL_22;
  v16 = *(_QWORD **)(v13 + 8);
  v17 = &v16[2 * v15];
  do
  {
    v18 = v15 >> 1;
    v19 = &v16[2 * (v15 >> 1)];
    v21 = *v19;
    v20 = v19 + 2;
    v15 += ~(v15 >> 1);
    if (v21 < v14)
      v16 = v20;
    else
      v15 = v18;
  }
  while (v15);
  if (v16 != v17 && *v16 == v14)
    v22 = v16[1];
  else
LABEL_22:
    v22 = 0;
  v126 = v12;
  v127 = v22;
  canMapOperands = (_QWORD *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v126);
  v24 = canMapOperands;
  if (!canMapOperands)
    goto LABEL_32;
  v25 = *canMapOperands;
  v26 = mlir::TypeID::get<mlir::ShapedType>();
  v27 = *(unsigned int *)(v25 + 16);
  if (!(_DWORD)v27)
    goto LABEL_32;
  v28 = *(_QWORD **)(v25 + 8);
  v29 = &v28[2 * v27];
  do
  {
    v30 = v27 >> 1;
    v31 = &v28[2 * (v27 >> 1)];
    v33 = *v31;
    v32 = v31 + 2;
    v27 += ~(v27 >> 1);
    if (v33 < v26)
      v28 = v32;
    else
      v27 = v30;
  }
  while (v27);
  if (v28 != v29 && *v28 == v26)
    v34 = v28[1];
  else
LABEL_32:
    v34 = 0;
  v121[0] = v24;
  v121[1] = v34;
  v35 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v125) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v35)
    goto LABEL_42;
  v36 = *v35;
  v37 = mlir::TypeID::get<mlir::ShapedType>();
  v38 = *(unsigned int *)(v36 + 16);
  if (!(_DWORD)v38)
    goto LABEL_42;
  v39 = *(_QWORD **)(v36 + 8);
  v40 = &v39[2 * v38];
  do
  {
    v41 = v38 >> 1;
    v42 = &v39[2 * (v38 >> 1)];
    v44 = *v42;
    v43 = v42 + 2;
    v38 += ~(v38 >> 1);
    if (v44 < v37)
      v39 = v43;
    else
      v38 = v41;
  }
  while (v38);
  if (v39 != v40 && *v39 == v37)
    v45 = v39[1];
  else
LABEL_42:
    v45 = 0;
  v120[0] = v35;
  v120[1] = v45;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v121))
    return 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v120))
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v120);
  if (v46 > 1)
    return 0;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v121);
  if (v47 > 1)
    return 0;
  Index = mlir::pdl::ResultOp::getIndex((mlir::pdl::ResultOp *)&v125);
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v120);
  if (v50 == 1)
    v51 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v120);
  else
    v51 = 1;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v121);
  if (v52 == 1)
    v53 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v121);
  else
    v53 = 1;
  mlir::ElementsAttr::getValues<llvm::APInt>(v123, (uint64_t)&v126);
  LOWORD(ArgOperands) = (_WORD)v126;
  if ((_BYTE)v126)
  {
    v54 = v127;
    v132 = (llvm::APFloatBase *)v127;
    v133 = v128;
    if (BYTE1(v126))
      v55 = 0;
    else
      v55 = v128;
LABEL_66:
    v56 = v54 + 16 * v55;
    LODWORD(v118) = *(_DWORD *)(v56 + 8);
    if (v118 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v56);
    else
      __p = *(void **)v56;
    goto LABEL_70;
  }
  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v127 + 16))(&v132);
  v54 = (uint64_t)v132;
  v133 = v128;
  if (BYTE1(ArgOperands))
    v55 = 0;
  else
    v55 = v128;
  if ((_BYTE)ArgOperands)
    goto LABEL_66;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v132 + 24))(&__p);
LABEL_70:
  if (v118 > 0x40)
  {
    v57 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v57 = (uint64_t)((_QWORD)__p << -(uint64_t)v118) >> -(uint64_t)v118;
  }
  if (!(_BYTE)ArgOperands)
  {
    v58 = v132;
    v132 = 0;
    if (v58)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v58 + 8))(v58);
  }
  if (!v129)
  {
    v59 = v130;
    v130 = 0;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  }
  if (!(_BYTE)v126)
  {
    v60 = v127;
    v127 = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
  mlir::ElementsAttr::getValues<llvm::APInt>(v122, (uint64_t)&v126);
  LOWORD(ArgOperands) = (_WORD)v126;
  if ((_BYTE)v126)
  {
    v61 = v127;
    v132 = (llvm::APFloatBase *)v127;
    v133 = v128;
    if (BYTE1(v126))
      v62 = 0;
    else
      v62 = v128;
LABEL_90:
    v63 = v61 + 16 * v62;
    LODWORD(v118) = *(_DWORD *)(v63 + 8);
    if (v118 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v63);
    else
      __p = *(void **)v63;
    goto LABEL_94;
  }
  (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v127 + 16))(&v132);
  v61 = (uint64_t)v132;
  v133 = v128;
  if (BYTE1(ArgOperands))
    v62 = 0;
  else
    v62 = v128;
  if ((_BYTE)ArgOperands)
    goto LABEL_90;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v132 + 24))(&__p);
LABEL_94:
  if (v118 > 0x40)
  {
    v64 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v64 = (uint64_t)((_QWORD)__p << -(uint64_t)v118) >> -(uint64_t)v118;
  }
  if (!(_BYTE)ArgOperands)
  {
    v65 = v132;
    v132 = 0;
    if (v65)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v65 + 8))(v65);
  }
  if (!v129)
  {
    v66 = v130;
    v130 = 0;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  }
  if (!(_BYTE)v126)
  {
    v67 = v127;
    v127 = 0;
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  }
  PositiveAxis = mlir::getPositiveAxis(v57, v53);
  if (PositiveAxis >= v53 - 1)
    v69 = v53 - 1;
  else
    v69 = PositiveAxis;
  if (PositiveAxis < 0)
    v69 = 0;
  if ((Index & 1) != 0)
    v70 = (v53 - 1) & (v64 >> 63);
  else
    v70 = v69;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v121)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    v126 = &v128;
    v127 = 0x400000000;
    mlir::ElementsAttr::getValues<llvm::APInt>(v124, (uint64_t)&ArgOperands);
    LOWORD(__p) = (_WORD)ArgOperands;
    if ((_BYTE)ArgOperands)
      v118 = v132;
    else
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v132 + 16))(&v118);
    v119 = v133;
    if (!v134)
    {
      v98 = v135;
      v135 = 0;
      if (v98)
        (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
    }
    if (!(_BYTE)ArgOperands)
    {
      v99 = v132;
      v132 = 0;
      if (v99)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v99 + 8))(v99);
    }
    v100 = v119 + v70;
    v119 += v70;
    if (v51 >= 1)
    {
      do
      {
        if (BYTE1(__p))
          v101 = 0;
        else
          v101 = v100;
        if ((_BYTE)__p)
        {
          v102 = (char *)v118 + 16 * v101;
          LODWORD(v132) = *((_DWORD *)v102 + 2);
          if (v132 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&ArgOperands, (const void **)v102);
          else
            ArgOperands = *(void **)v102;
        }
        else
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v118 + 24))(&ArgOperands);
        }
        v103 = (char *)v126;
        if (v127 >= HIDWORD(v127))
        {
          v106 = v127 + 1;
          if (v126 <= &ArgOperands && (char *)v126 + 16 * v127 > (char *)&ArgOperands)
          {
            v107 = (char *)&ArgOperands - (_BYTE *)v126;
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v126, v106);
            v103 = (char *)v126;
            v104 = (void **)((char *)v126 + v107);
          }
          else
          {
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v126, v106);
            v104 = &ArgOperands;
            v103 = (char *)v126;
          }
        }
        else
        {
          v104 = &ArgOperands;
        }
        v105 = &v103[16 * v127];
        *((_DWORD *)v105 + 2) = *((_DWORD *)v104 + 2);
        *(_QWORD *)v105 = *v104;
        *((_DWORD *)v104 + 2) = 0;
        LODWORD(v127) = v127 + 1;
        if (v132 >= 0x41 && ArgOperands)
          operator delete[](ArgOperands);
        v100 = v119 + v64;
        v119 += v64;
        --v51;
      }
      while (v51);
    }
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v120);
    v110 = v109;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v120);
    v112 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v110, OperandRange, 0);
    ElementsAttr = mlir::createElementsAttr(v112, v126, v127);
    if (!(_BYTE)__p)
    {
      v114 = v118;
      v118 = 0;
      if (v114)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v114 + 8))(v114);
    }
    v92 = (uint64_t *)v126;
    if ((_DWORD)v127)
    {
      v115 = 2 * v127;
      do
      {
        if (LODWORD(v92[v115 - 1]) >= 0x41)
        {
          v116 = (void *)v92[v115 - 2];
          if (v116)
            operator delete[](v116);
        }
        v115 -= 2;
      }
      while (v115 * 8);
      v92 = (uint64_t *)v126;
    }
    v11 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
    if (v92 == &v128)
      return v11;
LABEL_204:
    free(v92);
    return v11;
  }
  v71 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v121) + 136);
  if (v71 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v71 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  v126 = &v128;
  v127 = 0x400000000;
  mlir::ElementsAttr::getValues<llvm::APFloat>(v124, (uint64_t)&ArgOperands);
  LOWORD(__p) = (_WORD)ArgOperands;
  if ((_BYTE)ArgOperands)
    v118 = v132;
  else
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v132 + 16))(&v118);
  v119 = v133;
  if (!v134)
  {
    v72 = v135;
    v135 = 0;
    if (v72)
      (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  }
  if (!(_BYTE)ArgOperands)
  {
    v73 = v132;
    v132 = 0;
    if (v73)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v73 + 8))(v73);
  }
  v74 = v119 + v70;
  v119 += v70;
  if (v51 >= 1)
  {
    do
    {
      if (BYTE1(__p))
        v75 = 0;
      else
        v75 = v74;
      if ((_BYTE)__p)
      {
        v76 = (char *)v118 + 32 * v75;
        v78 = (void *)*((_QWORD *)v76 + 1);
        v77 = (const llvm::detail::DoubleAPFloat *)(v76 + 8);
        if (llvm::APFloatBase::PPCDoubleDouble(v118) == v78)
          llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v132, v77);
        else
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v132, v77);
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v118 + 24))(&ArgOperands);
      }
      Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v126, (unint64_t)&ArgOperands, 1);
      v80 = (char *)v126 + 32 * v127 + 8;
      v81 = Address + 8;
      v82 = (llvm::APFloatBase *)*((_QWORD *)Address + 1);
      v83 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
      if (v83 == v82)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v80, v81);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)v80, (uint64_t)v81);
      LODWORD(v127) = v127 + 1;
      if (v83 == v132)
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v132);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v132);
      v74 = v119 + v64;
      v119 += v64;
      --v51;
    }
    while (v51);
  }
  v84 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v120);
  v86 = v85;
  ArgOperands = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v124);
  v132 = v87;
  v88 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands);
  v89 = (_QWORD *)mlir::RankedTensorType::get(v84, v86, v88, 0);
  v90 = (llvm::APFloatBase *)mlir::createElementsAttr(v89, (uint64_t)v126, v127);
  v91 = v90;
  if (!(_BYTE)__p)
  {
    v90 = v118;
    v118 = 0;
    if (v90)
      v90 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v90 + 8))(v90);
  }
  v92 = (uint64_t *)v126;
  v93 = v127;
  if ((_DWORD)v127)
  {
    v94 = llvm::APFloatBase::PPCDoubleDouble(v90);
    v95 = v92 - 3;
    v96 = 4 * v93;
    do
    {
      while (1)
      {
        v97 = (llvm::detail::DoubleAPFloat *)&v95[v96];
        if (v94 != (void *)v95[v96])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v97);
        v96 -= 4;
        if (!(v96 * 8))
          goto LABEL_163;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v97);
      v96 -= 4;
    }
    while (v96 * 8);
LABEL_163:
    v92 = (uint64_t *)v126;
  }
  v11 = (unint64_t)v91 & 0xFFFFFFFFFFFFFFFBLL;
  if (v92 != &v128)
    goto LABEL_204;
  return v11;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldStridedSliceOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldCropOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t v6;
  _QWORD *Type;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t Bias;
  unint64_t matched;
  int v34;
  int v35;
  void *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a2;
    return 0;
  result = *a3;
  if (!*a3)
  {
    v41 = 0;
    v42 = 0;
    return result;
  }
  result = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(result);
  v41 = result;
  v42 = v6;
  if (result)
  {
    Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v41);
    v8 = Type;
    if (!Type)
      goto LABEL_15;
    v9 = *Type;
    v10 = mlir::TypeID::get<mlir::ShapedType>();
    v11 = *(unsigned int *)(v9 + 16);
    if (!(_DWORD)v11)
      goto LABEL_15;
    v12 = *(_QWORD **)(v9 + 8);
    v13 = &v12[2 * v11];
    do
    {
      v14 = v11 >> 1;
      v15 = &v12[2 * (v11 >> 1)];
      v17 = *v15;
      v16 = v15 + 2;
      v11 += ~(v11 >> 1);
      if (v17 < v10)
        v12 = v16;
      else
        v11 = v14;
    }
    while (v11);
    if (v12 != v13 && *v12 == v10)
      v18 = v12[1];
    else
LABEL_15:
      v18 = 0;
    v40[0] = v8;
    v40[1] = v18;
    v19 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v43) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v19)
      goto LABEL_25;
    v20 = *v19;
    v21 = mlir::TypeID::get<mlir::ShapedType>();
    v22 = *(unsigned int *)(v20 + 16);
    if (!(_DWORD)v22)
      goto LABEL_25;
    v23 = *(_QWORD **)(v20 + 8);
    v24 = &v23[2 * v22];
    do
    {
      v25 = v22 >> 1;
      v26 = &v23[2 * (v22 >> 1)];
      v28 = *v26;
      v27 = v26 + 2;
      v22 += ~(v22 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v22 = v25;
    }
    while (v22);
    if (v23 != v24 && *v23 == v21)
      v29 = v23[1];
    else
LABEL_25:
      v29 = 0;
    v38 = v19;
    v39 = v29;
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v38))
      return 0;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v38);
    if (v30 != 1)
      return 0;
    v31 = *(_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v38);
    Bias = mlir::anec::GOC::getBias((mlir::anec::GOC *)&v43);
    matched = mlir::matchConstantWithIntValue<int>(Bias);
    if ((matched & 0xFF00000000) == 0)
      return 0;
    v34 = matched;
    v35 = BYTE4(matched);
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      if (v35)
      {
        return (uint64_t *)(v37 & 0xFFFFFFFFFFFFFFFBLL);
      }
    }
    else
    {
      v36 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v40)
                     + 136);
      if (v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
        && v36 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
      {
        return 0;
      }
      if (v35)
      {
        return (uint64_t *)(v37 & 0xFFFFFFFFFFFFFFFBLL);
      }
    }
    std::__throw_bad_optional_access[abi:nn180100]();
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldCropOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldConcatOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t *Type;
  llvm::APFloatBase *v26;
  uint64_t v27;
  _QWORD *ArgAttrsAttr;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *FloatSemantics;
  void *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  const llvm::detail::DoubleAPFloat *v64;
  void *v65;
  char *Address;
  llvm::detail::DoubleAPFloat *v67;
  llvm::APFloatBase *v68;
  const llvm::detail::DoubleAPFloat *v69;
  llvm::APFloatBase *v70;
  llvm::APFloatBase *v71;
  llvm::APFloatBase *v72;
  llvm::APFloatBase *v73;
  llvm::APFloatBase *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  llvm::APFloatBase *v78;
  llvm::APFloatBase *v79;
  _BYTE *v80;
  uint64_t v81;
  void *v82;
  _BYTE *v83;
  uint64_t v84;
  llvm::detail::DoubleAPFloat *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  unint64_t *v93;
  _QWORD *v94;
  unint64_t v95;
  llvm::APFloatBase *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  void **p_p;
  llvm::APInt *v103;
  unsigned int v104;
  unint64_t v105;
  int64_t v106;
  llvm::APFloatBase *v107;
  llvm::APFloatBase *v108;
  llvm::APFloatBase *v109;
  llvm::APFloatBase *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  __n128 *ElementsAttr;
  _BYTE *v115;
  uint64_t v116;
  void *v117;
  void *v118;
  _QWORD *ElementTypeWithLargestPrecision;
  uint64_t v121;
  uint64_t *v122;
  llvm::APFloatBase *v123;
  uint64_t v124;
  void *__p;
  uint64_t v126;
  __int16 v127;
  llvm::APFloatBase *v128;
  uint64_t v129;
  uint64_t *v130;
  llvm::APFloatBase *v131;
  uint64_t v132;
  __int16 v133;
  llvm::APFloatBase *v134;
  uint64_t v135;
  _QWORD v136[2];
  uint64_t v137;
  char v138;
  uint64_t v139;
  llvm::APFloatBase *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  _BYTE v144[128];
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147[6];

  v147[4] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v137 = a2;
  v5 = a4 - 1;
  if (a4 == 2)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
    v7 = (uint64_t *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v7)
      goto LABEL_11;
    v8 = *v7;
    v9 = mlir::TypeID::get<mlir::ShapedType>();
    v10 = *(unsigned int *)(v8 + 16);
    if (!(_DWORD)v10)
      goto LABEL_11;
    v11 = *(_QWORD **)(v8 + 8);
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
      v17 = v11[1];
    else
LABEL_11:
      v17 = 0;
    v142 = v7;
    v143 = v17;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v142))
    {
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v142);
      if (v18 >= 1)
        return v6 | 4;
    }
  }
  v20 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v137) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v20)
    v20 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(v20);
  else
    v21 = 0;
  v136[0] = v20;
  v136[1] = v21;
  v19 = 0;
  if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v137)
    && v136[0])
  {
    if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v136))
      return 0;
    v145 = v147;
    v146 = 0x400000000;
    v22 = &a3[v5];
    if (v5)
    {
      v23 = a3;
      do
      {
        if (!*v23)
        {
          v142 = 0;
          v143 = 0;
          goto LABEL_201;
        }
        v142 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*v23);
        v143 = v24;
        if (!v142)
          goto LABEL_201;
        Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v142);
        v130 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible(Type);
        v131 = v26;
        if (!v130)
          goto LABEL_201;
        if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130))
          goto LABEL_201;
        mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
        if (v27 > 1 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v130))
          goto LABEL_201;
        ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v130);
        if (v29)
        {
          v30 = 8 * v29;
          while (*ArgAttrsAttr != 0x8000000000000000)
          {
            ++ArgAttrsAttr;
            v30 -= 8;
            if (!v30)
              goto LABEL_35;
          }
          goto LABEL_201;
        }
LABEL_35:
        v31 = v130;
        v32 = v146;
        if (v146 >= (unint64_t)HIDWORD(v146))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v145, v147, v146 + 1, 8);
          v32 = v146;
        }
        v145[v32] = v31;
        v33 = (v146 + 1);
        LODWORD(v146) = v146 + 1;
        ++v23;
      }
      while (v23 != v22);
      ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision((_QWORD **)v145, v33);
      if (ElementTypeWithLargestPrecision)
        goto LABEL_41;
      goto LABEL_201;
    }
    ElementTypeWithLargestPrecision = mlir::getElementTypeWithLargestPrecision(v147, 0);
    if (ElementTypeWithLargestPrecision)
    {
LABEL_41:
      v34 = (uint64_t)ElementTypeWithLargestPrecision;
      v35 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v136)
                     + 136);
      if (v35 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        v142 = v144;
        v143 = 0x400000000;
        if (v5)
        {
          do
          {
            v86 = *a3;
            if (!*a3)
              goto LABEL_145;
            v87 = *v86;
            v88 = mlir::TypeID::get<mlir::ElementsAttr>();
            v89 = *(unsigned int *)(v87 + 16);
            if (!(_DWORD)v89)
              goto LABEL_145;
            v90 = *(_QWORD **)(v87 + 8);
            v91 = &v90[2 * v89];
            do
            {
              v92 = v89 >> 1;
              v93 = &v90[2 * (v89 >> 1)];
              v95 = *v93;
              v94 = v93 + 2;
              v89 += ~(v89 >> 1);
              if (v95 < v88)
                v90 = v94;
              else
                v89 = v92;
            }
            while (v89);
            if (v90 != v91 && *v90 == v88)
              v96 = (llvm::APFloatBase *)v90[1];
            else
LABEL_145:
              v96 = 0;
            v122 = v86;
            v123 = v96;
            mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v122, (uint64_t)&v130);
            LOWORD(v139) = (_WORD)v130;
            if ((_BYTE)v130)
              v140 = v131;
            else
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v131 + 16))(&v140);
            v97 = v132;
            v141 = v132;
            v127 = v133;
            if ((_BYTE)v133)
            {
              v128 = v134;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v134 + 16))(&v128);
              v97 = v141;
            }
            v98 = v135;
            v129 = v135;
            while (v97 != v98)
            {
              if (BYTE1(v139))
                v99 = 0;
              else
                v99 = v97;
              if ((_BYTE)v139)
              {
                v100 = (char *)v140 + 16 * v99;
                LODWORD(v126) = *((_DWORD *)v100 + 2);
                if (v126 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v100);
                else
                  __p = *(void **)v100;
              }
              else
              {
                (*(void (**)(void **__return_ptr))(*(_QWORD *)v140 + 24))(&__p);
              }
              v101 = (char *)v142;
              if (v143 >= HIDWORD(v143))
              {
                v105 = v143 + 1;
                if (v142 <= &__p && (char *)v142 + 16 * v143 > (char *)&__p)
                {
                  v106 = (char *)&__p - (_BYTE *)v142;
                  llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v142, v105);
                  v101 = (char *)v142;
                  p_p = (void **)((char *)v142 + v106);
                }
                else
                {
                  llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v142, v105);
                  p_p = &__p;
                  v101 = (char *)v142;
                }
              }
              else
              {
                p_p = &__p;
              }
              v103 = (llvm::APInt *)&v101[16 * v143];
              v104 = *((_DWORD *)p_p + 2);
              *((_DWORD *)v103 + 2) = v104;
              if (v104 > 0x40)
                llvm::APInt::initSlowCase(v103, (const void **)p_p);
              else
                *(_QWORD *)v103 = *p_p;
              LODWORD(v143) = v143 + 1;
              if (v126 >= 0x41 && __p)
                operator delete[](__p);
              v97 = ++v141;
              v98 = v129;
            }
            if (!(_BYTE)v127)
            {
              v107 = v128;
              v128 = 0;
              if (v107)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v107 + 8))(v107);
            }
            if (!(_BYTE)v139)
            {
              v108 = v140;
              v140 = 0;
              if (v108)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v108 + 8))(v108);
            }
            if (!(_BYTE)v133)
            {
              v109 = v134;
              v134 = 0;
              if (v109)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v109 + 8))(v109);
            }
            if (!(_BYTE)v130)
            {
              v110 = v131;
              v131 = 0;
              if (v110)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v110 + 8))(v110);
            }
            ++a3;
          }
          while (a3 != v22);
        }
        v111 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v136);
        v113 = (_QWORD *)mlir::RankedTensorType::get(v111, v112, v34, 0);
        ElementsAttr = mlir::createElementsAttr(v113, v142, v143);
        v115 = v142;
        if ((_DWORD)v143)
        {
          v116 = 16 * v143;
          do
          {
            if (*(_DWORD *)&v115[v116 - 8] >= 0x41u)
            {
              v117 = *(void **)&v115[v116 - 16];
              if (v117)
                operator delete[](v117);
            }
            v116 -= 16;
          }
          while (v116);
          v115 = v142;
        }
        v19 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
        if (v115 == v144)
          goto LABEL_202;
        v118 = v115;
      }
      else
      {
        if (v35 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
          && v35 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
        {
          goto LABEL_201;
        }
        v142 = v144;
        v143 = 0x400000000;
        v121 = v34;
        v130 = (uint64_t *)v34;
        FloatSemantics = mlir::FloatType::getFloatSemantics((llvm::APFloatBase *)&v130);
        if (v5)
        {
          v48 = FloatSemantics;
          do
          {
            v49 = *a3;
            if (!*a3)
              goto LABEL_89;
            v50 = *v49;
            v51 = mlir::TypeID::get<mlir::ElementsAttr>();
            v52 = *(unsigned int *)(v50 + 16);
            if (!(_DWORD)v52)
              goto LABEL_89;
            v53 = *(_QWORD **)(v50 + 8);
            v54 = &v53[2 * v52];
            do
            {
              v55 = v52 >> 1;
              v56 = &v53[2 * (v52 >> 1)];
              v58 = *v56;
              v57 = v56 + 2;
              v52 += ~(v52 >> 1);
              if (v58 < v51)
                v53 = v57;
              else
                v52 = v55;
            }
            while (v52);
            if (v53 != v54 && *v53 == v51)
              v59 = v53[1];
            else
LABEL_89:
              v59 = 0;
            __p = v49;
            v126 = v59;
            mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)&__p, (uint64_t)&v130);
            v127 = (__int16)v130;
            if ((_BYTE)v130)
              v128 = v131;
            else
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v131 + 16))(&v128);
            v60 = v132;
            v129 = v132;
            LOWORD(v122) = v133;
            if ((_BYTE)v133)
            {
              v123 = v134;
            }
            else
            {
              (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v134 + 16))(&v123);
              v60 = v129;
            }
            v61 = v135;
            v124 = v135;
            while (v60 != v61)
            {
              if (HIBYTE(v127))
                v62 = 0;
              else
                v62 = v60;
              if ((_BYTE)v127)
              {
                v63 = (char *)v128 + 32 * v62;
                v65 = (void *)*((_QWORD *)v63 + 1);
                v64 = (const llvm::detail::DoubleAPFloat *)(v63 + 8);
                if (llvm::APFloatBase::PPCDoubleDouble(v128) == v65)
                  llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v140, v64);
                else
                  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v140, v64);
              }
              else
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v128 + 24))(&v139);
              }
              v138 = 0;
              llvm::APFloat::convert((uint64_t)&v139, v48, 1, &v138);
              Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v142, (unint64_t)&v139, 1);
              v67 = (llvm::detail::DoubleAPFloat *)((char *)v142 + 32 * v143 + 8);
              v69 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
              v68 = (llvm::APFloatBase *)*((_QWORD *)Address + 1);
              v70 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
              if (v70 == v68)
                llvm::detail::DoubleAPFloat::DoubleAPFloat(v67, v69);
              else
                llvm::detail::IEEEFloat::IEEEFloat(v67, v69);
              LODWORD(v143) = v143 + 1;
              if (v70 == v140)
                llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v140);
              else
                llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v140);
              v60 = ++v129;
              v61 = v124;
            }
            if (!(_BYTE)v122)
            {
              v71 = v123;
              v123 = 0;
              if (v71)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v71 + 8))(v71);
            }
            if (!(_BYTE)v127)
            {
              v72 = v128;
              v128 = 0;
              if (v72)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v72 + 8))(v72);
            }
            if (!(_BYTE)v133)
            {
              v73 = v134;
              v134 = 0;
              if (v73)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v73 + 8))(v73);
            }
            if (!(_BYTE)v130)
            {
              v74 = v131;
              v131 = 0;
              if (v74)
                (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v74 + 8))(v74);
            }
            ++a3;
          }
          while (a3 != v22);
        }
        v75 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v136);
        v77 = (_QWORD *)mlir::RankedTensorType::get(v75, v76, v121, 0);
        v78 = (llvm::APFloatBase *)mlir::createElementsAttr(v77, (uint64_t)v142, v143);
        v79 = v78;
        v80 = v142;
        v81 = v143;
        if ((_DWORD)v143)
        {
          v82 = llvm::APFloatBase::PPCDoubleDouble(v78);
          v83 = v80 - 24;
          v84 = 32 * v81;
          do
          {
            while (1)
            {
              v85 = (llvm::detail::DoubleAPFloat *)&v83[v84];
              if (v82 != *(void **)&v83[v84])
                break;
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v85);
              v84 -= 32;
              if (!v84)
                goto LABEL_132;
            }
            llvm::detail::IEEEFloat::~IEEEFloat(v85);
            v84 -= 32;
          }
          while (v84);
LABEL_132:
          v80 = v142;
        }
        v19 = (unint64_t)v79 & 0xFFFFFFFFFFFFFFFBLL;
        if (v80 == v144)
          goto LABEL_202;
        v118 = v80;
      }
      free(v118);
      goto LABEL_202;
    }
LABEL_201:
    v19 = 0;
LABEL_202:
    if (v145 != v147)
      free(v145);
  }
  return v19;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldConcatOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReshapeOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *ArgAttrsAttr;
  uint64_t v30;
  uint64_t v31;
  _QWORD *Type;
  uint64_t ElementTypeOrSelf;
  uint64_t v34;
  uint64_t v35;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int64x2_t *v49;
  int64x2_t v50;
  int64x2_t v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57[2];
  _QWORD v58[2];
  uint64_t v59;
  __int128 v60;
  char v61;

  v59 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v59) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v58[0] = v4;
  v58[1] = v14;
  v15 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v59) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15)
    goto LABEL_20;
  v16 = *v15;
  v17 = mlir::TypeID::get<mlir::ShapedType>();
  v18 = *(unsigned int *)(v16 + 16);
  if (!(_DWORD)v18)
    goto LABEL_20;
  v19 = *(_QWORD **)(v16 + 8);
  v20 = &v19[2 * v18];
  do
  {
    v21 = v18 >> 1;
    v22 = &v19[2 * (v18 >> 1)];
    v24 = *v22;
    v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17)
      v19 = v23;
    else
      v18 = v21;
  }
  while (v18);
  if (v19 != v20 && *v19 == v17)
    v25 = v19[1];
  else
LABEL_20:
    v25 = 0;
  v57[0] = (uint64_t)v15;
  v57[1] = v25;
  if (*a3)
  {
    v26 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
    v28 = v27;
    v55 = v26;
    v56 = v27;
    if (v26 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v57))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
      if (!v30)
      {
LABEL_30:
        Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v55);
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(Type);
        LOBYTE(v60) = 0;
        v61 = 0;
        v34 = mlir::ShapedType::cloneWith(v57, &v60, ElementTypeOrSelf);
        return (unint64_t)mlir::reshapeElementsAttr((uint64_t)v26, v28, v34, v35) & 0xFFFFFFFFFFFFFFFBLL;
      }
      v31 = 8 * v30;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v31 -= 8;
        if (!v31)
          goto LABEL_30;
      }
    }
  }
  else
  {
    v55 = 0;
    v56 = 0;
  }
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v58))
    return 0;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v57))
    return 0;
  v37 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v58);
  v39 = v38;
  v40 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
  if (v39 != v41 || memcmp(v37, v40, 8 * v39))
    return 0;
  v42 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v57);
  if (v43)
  {
    v44 = (v43 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v44 >= 3)
    {
      v47 = v44 + 1;
      v48 = (v44 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v46 = (uint64_t *)(v42 + 8 * v48);
      v49 = (int64x2_t *)(v42 + 16);
      v50 = 0uLL;
      v51 = vdupq_n_s64(0x8000000000000000);
      v52 = v48;
      v53 = 0uLL;
      do
      {
        v50 = vsubq_s64(v50, vceqq_s64(v49[-1], v51));
        v53 = vsubq_s64(v53, vceqq_s64(*v49, v51));
        v49 += 2;
        v52 -= 4;
      }
      while (v52);
      v45 = vaddvq_s64(vaddq_s64(v53, v50));
      if (v47 == v48)
        goto LABEL_47;
    }
    else
    {
      v45 = 0;
      v46 = (uint64_t *)v42;
    }
    do
    {
      v54 = *v46++;
      if (v54 == 0x8000000000000000)
        ++v45;
    }
    while (v46 != (uint64_t *)(v42 + 8 * v43));
LABEL_47:
    if (v45 > 1)
      return 0;
  }
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v59) | 4;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReshapeOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldGetCoordOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t j;
  uint64_t Context;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t RawElementsAttr;
  void *__p;
  unsigned int v34;
  uint64_t v35[2];
  _QWORD *v36[2];
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
    return 0;
  v6 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v8 = (uint64_t)v7;
  v36[0] = v6;
  v36[1] = v7;
  v9 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
  v35[0] = (uint64_t)v9;
  v35[1] = v10;
  if (!v6 || v9 == 0)
    return 0;
  v12 = (uint64_t)v9;
  v13 = v10;
  if (mlir::ElementsAttr::getNumElements((uint64_t)v6, v8) != 1 || mlir::ElementsAttr::getNumElements(v12, v13) != 1)
    return 0;
  mlir::ElementsAttr::getValues<llvm::APInt>(v35, (uint64_t)&v38);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v38, 0, (llvm::APInt *)&__p);
  if (v34 > 0x40)
  {
    v14 = *(_QWORD *)__p;
    operator delete[](__p);
    if (v41)
      goto LABEL_14;
  }
  else
  {
    v14 = (uint64_t)((_QWORD)__p << -(uint64_t)v34) >> -(uint64_t)v34;
    if (v41)
      goto LABEL_14;
  }
  v15 = v42;
  v42 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
LABEL_14:
  if (!(_BYTE)v38)
  {
    v16 = v39;
    v39 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  if (v14)
    return 0;
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)v36, (uint64_t)&v38);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v38, 0, (llvm::APInt *)&__p);
  if (v34 > 0x40)
  {
    v18 = *(_QWORD *)__p;
    operator delete[](__p);
  }
  else
  {
    v18 = (uint64_t)((_QWORD)__p << -(uint64_t)v34) >> -(uint64_t)v34;
  }
  if (!v41)
  {
    v19 = v42;
    v42 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (!(_BYTE)v38)
  {
    v20 = v39;
    v39 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  __p = (void *)mlir::getElementTypeOrSelf(v36[0]);
  if (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&__p) == 32)
  {
    v38 = &v40;
    v39 = 0xC00000000;
    if (v18 < 1)
    {
      v21 = 0;
    }
    else
    {
      LODWORD(v21) = 0;
      for (i = 0; i != v18; ++i)
      {
        if (v21 >= HIDWORD(v39))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, &v40, v21 + 1, 4);
          LODWORD(v21) = v39;
        }
        *((_DWORD *)v38 + v21) = i;
        v21 = (v39 + 1);
        LODWORD(v39) = v39 + 1;
      }
    }
    v37 = v21;
    Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v26 = mlir::IntegerType::get(Context, 0x20u, 1u);
    v27 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v37, 1, v26, 0);
    v28 = v38;
    v29 = (const void *)(4 * v39);
  }
  else
  {
    v38 = &v40;
    v39 = 0x600000000;
    if (v18 < 1)
    {
      v23 = 0;
    }
    else
    {
      LODWORD(v23) = 0;
      for (j = 0; j != v18; ++j)
      {
        if (v23 >= HIDWORD(v39))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, &v40, v23 + 1, 8);
          LODWORD(v23) = v39;
        }
        *((_QWORD *)v38 + v23) = j;
        v23 = (v39 + 1);
        LODWORD(v39) = v39 + 1;
      }
    }
    v37 = v23;
    v30 = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v31 = mlir::IntegerType::get(v30, 0x40u, 1u);
    v27 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v37, 1, v31, 0);
    v28 = v38;
    v29 = (const void *)(8 * v39);
  }
  RawElementsAttr = (unint64_t)mlir::createRawElementsAttr(v27, v28, v29);
  if (v38 != &v40)
    free(v38);
  return RawElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldGetCoordOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldInitRandomPhiloxStateOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t ArgAttrsAttr;
  uint64_t v54;
  uint64_t v55;
  uint64_t ElementTypeOrSelf;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v60[2];
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66[2];
  uint64_t v67;
  void *v68[2];
  uint64_t v69;
  void *v70[2];
  _QWORD v71[2];

  v71[1] = *MEMORY[0x1E0C80C00];
  v61 = a2;
  if (!a4)
  {
LABEL_5:
    v7 = *a3;
    if (!*a3)
      goto LABEL_14;
    v8 = *v7;
    v9 = mlir::TypeID::get<mlir::ElementsAttr>();
    v10 = *(unsigned int *)(v8 + 16);
    if (!(_DWORD)v10)
      goto LABEL_14;
    v11 = *(_QWORD **)(v8 + 8);
    v12 = &v11[2 * v10];
    do
    {
      v13 = v10 >> 1;
      v14 = &v11[2 * (v10 >> 1)];
      v16 = *v14;
      v15 = v14 + 2;
      v10 += ~(v10 >> 1);
      if (v16 < v9)
        v11 = v15;
      else
        v10 = v13;
    }
    while (v10);
    if (v11 != v12 && *v11 == v9)
    {
      v17 = v11[1];
      v18 = a3[1];
      if (!v18)
        goto LABEL_23;
    }
    else
    {
LABEL_14:
      v17 = 0;
      v18 = a3[1];
      if (!v18)
        goto LABEL_23;
    }
    v19 = *v18;
    v20 = mlir::TypeID::get<mlir::ElementsAttr>();
    v21 = *(unsigned int *)(v19 + 16);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD **)(v19 + 8);
      v23 = &v22[2 * v21];
      do
      {
        v24 = v21 >> 1;
        v25 = &v22[2 * (v21 >> 1)];
        v27 = *v25;
        v26 = v25 + 2;
        v21 += ~(v21 >> 1);
        if (v27 < v20)
          v22 = v26;
        else
          v21 = v24;
      }
      while (v21);
      if (v22 != v23 && *v22 == v20)
      {
        v28 = v22[1];
        v29 = a3[2];
        if (!v29)
          goto LABEL_32;
LABEL_24:
        v30 = *v29;
        v31 = mlir::TypeID::get<mlir::ElementsAttr>();
        v32 = *(unsigned int *)(v30 + 16);
        if ((_DWORD)v32)
        {
          v33 = *(_QWORD **)(v30 + 8);
          v34 = &v33[2 * v32];
          do
          {
            v35 = v32 >> 1;
            v36 = &v33[2 * (v32 >> 1)];
            v38 = *v36;
            v37 = v36 + 2;
            v32 += ~(v32 >> 1);
            if (v38 < v31)
              v33 = v37;
            else
              v32 = v35;
          }
          while (v32);
          if (v33 != v34 && *v33 == v31)
          {
            v39 = v33[1];
            goto LABEL_33;
          }
        }
LABEL_32:
        v39 = 0;
LABEL_33:
        v70[0] = v71;
        v70[1] = (void *)0x100000000;
        v68[0] = &v69;
        v68[1] = (void *)0x100000000;
        v66[0] = &v67;
        v66[1] = (void *)0x100000000;
        mlir::getIntValues<long long>((uint64_t)v7, v17, (uint64_t)v70, 1);
        mlir::getIntValues<long long>((uint64_t)v18, v28, (uint64_t)v68, 1);
        mlir::getIntValues<long long>((uint64_t)v29, v39, (uint64_t)v66, 1);
        v62 = 1;
        v40 = *(_QWORD *)v68[0];
        v41 = *(_QWORD *)v66[0];
        v63 = *(_QWORD *)v70[0];
        v64 = v40;
        v65 = v41;
        v42 = (_QWORD *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v61) + 8) & 0xFFFFFFFFFFFFFFF8);
        if (!v42)
          goto LABEL_42;
        v43 = *v42;
        v44 = mlir::TypeID::get<mlir::ShapedType>();
        v45 = *(unsigned int *)(v43 + 16);
        if (!(_DWORD)v45)
          goto LABEL_42;
        v46 = *(_QWORD **)(v43 + 8);
        v47 = &v46[2 * v45];
        do
        {
          v48 = v45 >> 1;
          v49 = &v46[2 * (v45 >> 1)];
          v51 = *v49;
          v50 = v49 + 2;
          v45 += ~(v45 >> 1);
          if (v51 < v44)
            v46 = v50;
          else
            v45 = v48;
        }
        while (v45);
        if (v46 != v47 && *v46 == v44)
          v52 = (_QWORD *)v46[1];
        else
LABEL_42:
          v52 = 0;
        v60[0] = v42;
        v60[1] = v52;
        if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v60))
        {
          ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v60);
          v55 = v54;
          ElementTypeOrSelf = mlir::getElementTypeOrSelf(v60[0]);
          v57 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v55, ElementTypeOrSelf, 0);
          v58 = (unint64_t)mlir::createRawElementsAttr(v57, &v62, (const void *)0x1C) & 0xFFFFFFFFFFFFFFFBLL;
        }
        else
        {
          v58 = 0;
        }
        if (v66[0] != &v67)
          free(v66[0]);
        if (v68[0] != &v69)
          free(v68[0]);
        if (v70[0] != v71)
          free(v70[0]);
        return v58;
      }
    }
LABEL_23:
    v28 = 0;
    v29 = a3[2];
    if (!v29)
      goto LABEL_32;
    goto LABEL_24;
  }
  v5 = 8 * a4;
  v6 = a3;
  while (*v6)
  {
    ++v6;
    v5 -= 8;
    if (!v5)
      goto LABEL_5;
  }
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldInitRandomPhiloxStateOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldPadOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *ArgAttrsAttr;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::APFloatBase *v15;
  uint64_t v16;
  int StorageType;
  unint64_t v18;
  llvm::APFloatBase *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::APFloatBase *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  llvm::APFloatBase *v29;
  __n128 *OperandRange;
  uint64_t v31;
  llvm::APFloatBase *v32;
  llvm::APFloatBase *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  llvm::detail::DoubleAPFloat *v43;
  const llvm::detail::DoubleAPFloat *v44;
  void *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  llvm::detail::DoubleAPFloat *v50;
  const llvm::detail::DoubleAPFloat *v51;
  void *v52;
  const llvm::detail::DoubleAPFloat *v53;
  llvm::APFloatBase *v54;
  llvm::APFloatBase *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  llvm::detail::DoubleAPFloat *v59;
  const llvm::detail::DoubleAPFloat *v60;
  void *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  llvm::detail::DoubleAPFloat *v65;
  const llvm::detail::DoubleAPFloat *v66;
  void *v67;
  const void **v68;
  unsigned int v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  llvm::APInt *v74;
  unsigned int v75;
  unint64_t v76;
  _DWORD *v77;
  char *v79;
  const void **v80;
  unsigned int v81;
  char *v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  llvm::APInt *v86;
  unsigned int v87;
  unint64_t v88;
  char *v89;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  llvm::APInt *v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  llvm::APInt *v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  llvm::APInt *v111;
  unsigned int v112;
  unint64_t v113;
  _DWORD *v114;
  char *v116;
  unsigned int v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  llvm::APInt *v123;
  unsigned int v124;
  unint64_t v125;
  _DWORD *v126;
  char *v128;
  unsigned int *v129;
  uint64_t *v130;
  uint64_t v131;
  void *v132;
  uint64_t *v133;
  uint64_t v134;
  llvm::detail::DoubleAPFloat *v135;
  char *Address;
  char *v137;
  uint64_t v138;
  const llvm::detail::DoubleAPFloat *v139;
  llvm::APFloatBase *v140;
  llvm::detail::DoubleAPFloat *v141;
  uint64_t v142;
  llvm::detail::DoubleAPFloat *v143;
  char *v144;
  const llvm::detail::DoubleAPFloat *v145;
  llvm::APFloatBase *v146;
  uint64_t *v147;
  _DWORD *v148;
  uint64_t v149;
  llvm::detail::DoubleAPFloat *v150;
  char *v151;
  const llvm::detail::DoubleAPFloat *v152;
  llvm::detail::DoubleAPFloat *v153;
  uint64_t v154;
  llvm::detail::DoubleAPFloat *v155;
  char *v156;
  const void **v157;
  char *v158;
  uint64_t v159;
  void *v160;
  const void **v161;
  uint64_t v162;
  uint64_t v163;
  llvm::APInt *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  void **v169;
  int v170;
  llvm::APInt *v171;
  uint64_t v172;
  unsigned int v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  char *v179;
  uint64_t v180;
  void *v181;
  char *v182;
  uint64_t v183;
  llvm::detail::DoubleAPFloat *v184;
  uint64_t *v185;
  uint64_t v186;
  void *v187;
  uint64_t *v188;
  uint64_t v189;
  llvm::detail::DoubleAPFloat *v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  void *v195;
  const void **v196;
  uint64_t v197;
  uint64_t v198;
  llvm::APInt *v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  void **p_p;
  int v205;
  llvm::APInt *v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t ElementTypeOrSelf;
  _QWORD *v210;
  char *v211;
  uint64_t v212;
  void *v213;
  uint64_t *v214;
  uint64_t v215;
  void *v216;
  BOOL v217;
  BOOL v218;
  int64_t v219;
  int64_t v220;
  void *__p;
  _QWORD v222[2];
  __int16 v223;
  llvm::APFloatBase *v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  _QWORD *v228[2];
  _QWORD v229[2];
  uint64_t v230;
  __n128 *v231;
  _QWORD v232[3];
  void *v233;
  uint64_t v234;
  uint64_t v235;
  __int16 v236;
  llvm::APFloatBase *v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  void *v244;
  llvm::APFloatBase *v245;
  uint64_t v246;
  __int16 v247;
  llvm::APFloatBase *v248;
  uint64_t v249;
  unint64_t ArgOperands;
  uint64_t v251;
  uint64_t v252;
  char v253;
  llvm::APFloatBase *v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  v230 = a2;
  v4 = mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v230);
  v229[0] = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8));
  v229[1] = v5;
  if (!v229[0]
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v229)
    || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v229))
  {
    return 0;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v229);
  if (v7)
  {
    v8 = 8 * v7;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v8 -= 8;
      if (!v8)
        goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  v9 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v229);
  if (mlir::ShapedType::getNumElements(v9, v10) > 64)
    return 0;
  v11 = *a3;
  if (*a3)
    v11 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v11);
  else
    v12 = 0;
  v228[0] = v11;
  v228[1] = v12;
  if (!a3[1])
  {
    v226 = 0;
    v227 = 0;
    if (v11)
      goto LABEL_16;
    return 0;
  }
  v226 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
  v227 = v13;
  if (!v228[0])
    return 0;
LABEL_16:
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v228);
  v251 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&ArgOperands))
    return 0;
  v244 = (void *)mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v228);
  v245 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v244);
  if (v16 > 1 || !v226)
    return 0;
  StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v230);
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v226, (uint64_t)&ArgOperands);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&ArgOperands, 0, (llvm::APInt *)&v244);
  if (v245 > 0x40)
  {
    v18 = *(_QWORD *)v244;
    operator delete[](v244);
  }
  else
  {
    v18 = (uint64_t)((_QWORD)v244 << -(char)v245) >> -(char)v245;
  }
  if (!v253)
  {
    v19 = v254;
    v254 = 0;
    if (v19)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v19 + 8))(v19);
  }
  if (!(_BYTE)ArgOperands)
  {
    v20 = v251;
    v251 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v226, (uint64_t)&ArgOperands);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&ArgOperands, 1, (llvm::APInt *)&v244);
  if (v245 > 0x40)
  {
    v21 = *(_QWORD *)v244;
    operator delete[](v244);
  }
  else
  {
    v21 = (uint64_t)((_QWORD)v244 << -(char)v245) >> -(char)v245;
  }
  if (!v253)
  {
    v22 = v254;
    v254 = 0;
    if (v22)
      (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v22 + 8))(v22);
  }
  if (!(_BYTE)ArgOperands)
  {
    v23 = v251;
    v251 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v228);
  v251 = v24;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = (unint64_t)&v252;
    v251 = 0x300000000;
    mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)v228, (uint64_t)&v239);
    LOWORD(v231) = (_WORD)v239;
    if ((_BYTE)v239)
      v232[0] = v240;
    else
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v240 + 16))(v232);
    v232[1] = v241;
    mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)v228, (uint64_t)&v233);
    v223 = v236;
    if ((_BYTE)v236)
      v224 = v237;
    else
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v237 + 16))(&v224);
    v225 = v238;
    llvm::SmallVector<llvm::APInt,3u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(&v244, (uint64_t)&v231, (uint64_t)&v223);
    if (!(_BYTE)v223)
    {
      v32 = v224;
      v224 = 0;
      if (v32)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v32 + 8))(v32);
    }
    if (!(_BYTE)v236)
    {
      v33 = v237;
      v237 = 0;
      if (v33)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v33 + 8))(v33);
    }
    if (!(_BYTE)v233)
    {
      v34 = v234;
      v234 = 0;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    }
    if (!(_BYTE)v231)
    {
      v35 = v232[0];
      v232[0] = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    }
    if (!v242)
    {
      v36 = v243;
      v243 = 0;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    }
    if (!(_BYTE)v239)
    {
      v37 = v240;
      v240 = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    }
    switch(StorageType)
    {
      case 0:
        v38 = a3[2];
        if (v38)
          v38 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v38);
        else
          v39 = 0;
        v233 = v38;
        v234 = v39;
        if (v38 && (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v233) & 1) != 0)
        {
          mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v233, (uint64_t)&v239);
          if (BYTE1(v239))
            v175 = 0;
          else
            v175 = v241;
          if ((_BYTE)v239)
          {
            v176 = v240 + 16 * v175;
            LODWORD(v222[0]) = *(_DWORD *)(v176 + 8);
            if (LODWORD(v222[0]) > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v176);
            else
              __p = *(void **)v176;
          }
          else
          {
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v240 + 24))(&__p);
          }
          if (!(_BYTE)v239)
          {
            v192 = v240;
            v240 = 0;
            if (v192)
              (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
          }
          v239 = &v241;
          v240 = 0x300000000;
          llvm::SmallVectorImpl<llvm::APInt>::assign((uint64_t)&v239, v18, (const void **)&__p);
          llvm::SmallVectorImpl<llvm::APInt>::operator=((uint64_t)&ArgOperands, (uint64_t *)&v239);
          v193 = (char *)v239;
          if ((_DWORD)v240)
          {
            v194 = 16 * v240;
            do
            {
              if (*(_DWORD *)&v193[v194 - 8] >= 0x41u)
              {
                v195 = *(void **)&v193[v194 - 16];
                if (v195)
                  operator delete[](v195);
              }
              v194 -= 16;
            }
            while (v194);
            v193 = (char *)v239;
          }
          if (v193 != (char *)&v241)
            free(v193);
          v196 = (const void **)v244;
          v197 = v245;
          v198 = v251;
          if (v251 + (unint64_t)v245 > HIDWORD(v251))
          {
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v251 + (unint64_t)v245);
            v198 = v251;
          }
          if ((_DWORD)v197)
          {
            v199 = (llvm::APInt *)(ArgOperands + 16 * v198);
            v200 = 16 * v197;
            do
            {
              v201 = *((_DWORD *)v196 + 2);
              *((_DWORD *)v199 + 2) = v201;
              if (v201 > 0x40)
                llvm::APInt::initSlowCase(v199, v196);
              else
                *(_QWORD *)v199 = *v196;
              v196 += 2;
              v199 = (llvm::APInt *)((char *)v199 + 16);
              v200 -= 16;
            }
            while (v200);
            LODWORD(v198) = v251;
          }
          v202 = (v198 + v197);
          LODWORD(v251) = v202;
          v203 = v21 + v202;
          p_p = &__p;
          if (v21 + v202 > (unint64_t)HIDWORD(v251))
          {
            v218 = ArgOperands + 16 * v202 > (unint64_t)&__p;
            if (ArgOperands <= (unint64_t)&__p && v218)
            {
              v220 = (int64_t)&v222[-1] - ArgOperands;
              llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v203);
              p_p = (void **)(ArgOperands + v220);
            }
            else
            {
              llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v203);
              p_p = &__p;
            }
          }
          v205 = v251;
          if (v21)
          {
            v206 = (llvm::APInt *)(ArgOperands + 16 * v251);
            v207 = v21;
            do
            {
              v208 = *((_DWORD *)p_p + 2);
              *((_DWORD *)v206 + 2) = v208;
              if (v208 > 0x40)
                llvm::APInt::initSlowCase(v206, (const void **)p_p);
              else
                *(_QWORD *)v206 = *p_p;
              v206 = (llvm::APInt *)((char *)v206 + 16);
              --v207;
            }
            while (v207);
            v205 = v251;
          }
          LODWORD(v251) = v205 + v21;
          if (LODWORD(v222[0]) < 0x41)
            goto LABEL_349;
          v174 = __p;
          if (!__p)
            goto LABEL_349;
          goto LABEL_348;
        }
        v27 = 0;
        goto LABEL_350;
      case 1:
        v68 = (const void **)v244;
        v69 = v251;
        if (v18)
        {
          v70 = (char *)v244 + 16 * v18;
          v71 = (unint64_t)v70;
          do
          {
            v72 = ArgOperands;
            v73 = (char *)v71;
            if (v69 >= HIDWORD(v251))
            {
              v76 = v69 + 1;
              v77 = (_DWORD *)(ArgOperands + 16 * v69);
              if (ArgOperands <= v71 && (unint64_t)v77 > v71)
              {
                v79 = &v70[-ArgOperands];
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v76);
                v72 = ArgOperands;
                v73 = &v79[ArgOperands];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v76);
                v72 = ArgOperands;
                v73 = (char *)v71;
              }
            }
            v74 = (llvm::APInt *)(v72 + 16 * v251);
            v75 = *((_DWORD *)v73 + 2);
            *((_DWORD *)v74 + 2) = v75;
            if (v75 > 0x40)
              llvm::APInt::initSlowCase(v74, (const void **)v73);
            else
              *(_QWORD *)v74 = *(_QWORD *)v73;
            v69 = v251 + 1;
            LODWORD(v251) = v251 + 1;
            v71 -= 16;
            v70 -= 16;
            --v18;
          }
          while (v18);
          v68 = (const void **)v244;
        }
        v93 = v245;
        v94 = v69;
        v95 = v69 + (unint64_t)v245;
        if (v95 > HIDWORD(v251))
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v95);
          v94 = v251;
          v69 = v251;
        }
        if ((_DWORD)v93)
        {
          v96 = (llvm::APInt *)(ArgOperands + 16 * v94);
          v97 = 16 * v93;
          do
          {
            v98 = *((_DWORD *)v68 + 2);
            *((_DWORD *)v96 + 2) = v98;
            if (v98 > 0x40)
              llvm::APInt::initSlowCase(v96, v68);
            else
              *(_QWORD *)v96 = *v68;
            v68 += 2;
            v96 = (llvm::APInt *)((char *)v96 + 16);
            v97 -= 16;
          }
          while (v97);
          v69 = v251;
        }
        v105 = v69 + v93;
        LODWORD(v251) = v105;
        if (v21)
        {
          v106 = (char *)v244 + 16 * v245 - 32;
          v107 = -16 * v21;
          v108 = (unint64_t)v106;
          do
          {
            v109 = ArgOperands;
            v110 = (char *)v108;
            if (v105 >= HIDWORD(v251))
            {
              v113 = v105 + 1;
              v114 = (_DWORD *)(ArgOperands + 16 * v105);
              if (ArgOperands <= v108 && (unint64_t)v114 > v108)
              {
                v116 = &v106[-ArgOperands];
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v113);
                v109 = ArgOperands;
                v110 = &v116[ArgOperands];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v113);
                v109 = ArgOperands;
                v110 = (char *)v108;
              }
            }
            v111 = (llvm::APInt *)(v109 + 16 * v251);
            v112 = *((_DWORD *)v110 + 2);
            *((_DWORD *)v111 + 2) = v112;
            if (v112 > 0x40)
              llvm::APInt::initSlowCase(v111, (const void **)v110);
            else
              *(_QWORD *)v111 = *(_QWORD *)v110;
            v105 = v251 + 1;
            LODWORD(v251) = v251 + 1;
            v108 -= 16;
            v106 -= 16;
            v107 += 16;
          }
          while (v107);
        }
        goto LABEL_349;
      case 2:
        v80 = (const void **)v244;
        v81 = v251;
        if (v18)
        {
          v82 = (char *)v244 - 16;
          v83 = 16 * v18;
          do
          {
            v84 = &v82[v83];
            v85 = ArgOperands;
            if (v81 >= HIDWORD(v251))
            {
              v88 = v81 + 1;
              v89 = (char *)(ArgOperands + 16 * v81);
              if (ArgOperands <= (unint64_t)v84 && v89 > v84)
              {
                v91 = &v82[v83 - ArgOperands];
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v88);
                v85 = ArgOperands;
                v84 = &v91[ArgOperands];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v88);
                v85 = ArgOperands;
              }
            }
            v86 = (llvm::APInt *)(v85 + 16 * v251);
            v87 = *((_DWORD *)v84 + 2);
            *((_DWORD *)v86 + 2) = v87;
            if (v87 > 0x40)
              llvm::APInt::initSlowCase(v86, (const void **)v84);
            else
              *(_QWORD *)v86 = *(_QWORD *)v84;
            v81 = v251 + 1;
            LODWORD(v251) = v251 + 1;
            v83 -= 16;
          }
          while (v83);
          v80 = (const void **)v244;
        }
        v99 = v245;
        v100 = v81;
        v101 = v81 + (unint64_t)v245;
        if (v101 > HIDWORD(v251))
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v101);
          v100 = v251;
          v81 = v251;
        }
        if ((_DWORD)v99)
        {
          v102 = (llvm::APInt *)(ArgOperands + 16 * v100);
          v103 = 16 * v99;
          do
          {
            v104 = *((_DWORD *)v80 + 2);
            *((_DWORD *)v102 + 2) = v104;
            if (v104 > 0x40)
              llvm::APInt::initSlowCase(v102, v80);
            else
              *(_QWORD *)v102 = *v80;
            v80 += 2;
            v102 = (llvm::APInt *)((char *)v102 + 16);
            v103 -= 16;
          }
          while (v103);
          v81 = v251;
        }
        v117 = v81 + v99;
        LODWORD(v251) = v117;
        if (v21)
        {
          v118 = (char *)v244 + 16 * v245 - 16;
          v119 = -16 * v21;
          v120 = (unint64_t)v118;
          do
          {
            v121 = ArgOperands;
            v122 = (char *)v120;
            if (v117 >= HIDWORD(v251))
            {
              v125 = v117 + 1;
              v126 = (_DWORD *)(ArgOperands + 16 * v117);
              if (ArgOperands <= v120 && (unint64_t)v126 > v120)
              {
                v128 = &v118[-ArgOperands];
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v125);
                v121 = ArgOperands;
                v122 = &v128[ArgOperands];
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v125);
                v121 = ArgOperands;
                v122 = (char *)v120;
              }
            }
            v123 = (llvm::APInt *)(v121 + 16 * v251);
            v124 = *((_DWORD *)v122 + 2);
            *((_DWORD *)v123 + 2) = v124;
            if (v124 > 0x40)
              llvm::APInt::initSlowCase(v123, (const void **)v122);
            else
              *(_QWORD *)v123 = *(_QWORD *)v122;
            v117 = v251 + 1;
            LODWORD(v251) = v251 + 1;
            v120 -= 16;
            v118 -= 16;
            v119 += 16;
          }
          while (v119);
        }
        goto LABEL_349;
      case 3:
        v92 = (char *)v244;
        LODWORD(v234) = *((_DWORD *)v244 + 2);
        if (v234 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v233, (const void **)v244);
          v92 = (char *)v244;
        }
        else
        {
          v233 = *(void **)v244;
        }
        v156 = &v92[16 * v245];
        v157 = (const void **)(v156 - 16);
        LODWORD(v222[0]) = *((_DWORD *)v156 - 2);
        if (LODWORD(v222[0]) > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, v157);
        else
          __p = (void *)*v157;
        v239 = &v241;
        v240 = 0x300000000;
        llvm::SmallVectorImpl<llvm::APInt>::assign((uint64_t)&v239, v18, (const void **)&v233);
        llvm::SmallVectorImpl<llvm::APInt>::operator=((uint64_t)&ArgOperands, (uint64_t *)&v239);
        v158 = (char *)v239;
        if ((_DWORD)v240)
        {
          v159 = 16 * v240;
          do
          {
            if (*(_DWORD *)&v158[v159 - 8] >= 0x41u)
            {
              v160 = *(void **)&v158[v159 - 16];
              if (v160)
                operator delete[](v160);
            }
            v159 -= 16;
          }
          while (v159);
          v158 = (char *)v239;
        }
        if (v158 != (char *)&v241)
          free(v158);
        v161 = (const void **)v244;
        v162 = v245;
        v163 = v251;
        if (v251 + (unint64_t)v245 > HIDWORD(v251))
        {
          llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v251 + (unint64_t)v245);
          v163 = v251;
        }
        if ((_DWORD)v162)
        {
          v164 = (llvm::APInt *)(ArgOperands + 16 * v163);
          v165 = 16 * v162;
          do
          {
            v166 = *((_DWORD *)v161 + 2);
            *((_DWORD *)v164 + 2) = v166;
            if (v166 > 0x40)
              llvm::APInt::initSlowCase(v164, v161);
            else
              *(_QWORD *)v164 = *v161;
            v161 += 2;
            v164 = (llvm::APInt *)((char *)v164 + 16);
            v165 -= 16;
          }
          while (v165);
          LODWORD(v163) = v251;
        }
        v167 = (v163 + v162);
        LODWORD(v251) = v167;
        v168 = v21 + v167;
        v169 = &__p;
        if (v21 + v167 > (unint64_t)HIDWORD(v251))
        {
          v217 = ArgOperands + 16 * v167 > (unint64_t)&__p;
          if (ArgOperands <= (unint64_t)&__p && v217)
          {
            v219 = (int64_t)&v222[-1] - ArgOperands;
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v168);
            v169 = (void **)(ArgOperands + v219);
          }
          else
          {
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&ArgOperands, v168);
            v169 = &__p;
          }
        }
        v170 = v251;
        if (v21)
        {
          v171 = (llvm::APInt *)(ArgOperands + 16 * v251);
          v172 = v21;
          do
          {
            v173 = *((_DWORD *)v169 + 2);
            *((_DWORD *)v171 + 2) = v173;
            if (v173 > 0x40)
              llvm::APInt::initSlowCase(v171, (const void **)v169);
            else
              *(_QWORD *)v171 = *v169;
            v171 = (llvm::APInt *)((char *)v171 + 16);
            --v172;
          }
          while (v172);
          v170 = v251;
        }
        LODWORD(v251) = v170 + v21;
        if (LODWORD(v222[0]) >= 0x41 && __p)
          operator delete[](__p);
        if (v234 >= 0x41)
        {
          v174 = v233;
          if (v233)
LABEL_348:
            operator delete[](v174);
        }
        goto LABEL_349;
      default:
LABEL_349:
        v239 = (void *)v251;
        ElementTypeOrSelf = mlir::getElementTypeOrSelf(v228[0]);
        v210 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v239, 1, ElementTypeOrSelf, 0);
        v27 = (unint64_t)mlir::createElementsAttr(v210, (_DWORD *)ArgOperands, v251) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_350:
        v211 = (char *)v244;
        if ((_DWORD)v245)
        {
          v212 = 16 * v245;
          do
          {
            if (*(_DWORD *)&v211[v212 - 8] >= 0x41u)
            {
              v213 = *(void **)&v211[v212 - 16];
              if (v213)
                operator delete[](v213);
            }
            v212 -= 16;
          }
          while (v212);
          v211 = (char *)v244;
        }
        if (v211 != (char *)&v246)
          free(v211);
        v214 = (uint64_t *)ArgOperands;
        if ((_DWORD)v251)
        {
          v215 = 2 * v251;
          do
          {
            if (LODWORD(v214[v215 - 1]) >= 0x41)
            {
              v216 = (void *)v214[v215 - 2];
              if (v216)
                operator delete[](v216);
            }
            v215 -= 2;
          }
          while (v215 * 8);
          v214 = (uint64_t *)ArgOperands;
        }
        if (v214 == &v252)
          return v27;
        v191 = v214;
        break;
    }
    goto LABEL_368;
  }
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v228);
  v251 = v25;
  v26 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                 + 136);
  if (v26 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v26 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  v239 = &v241;
  v240 = 0x100000000;
  mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)v228, (uint64_t)&ArgOperands);
  v223 = ArgOperands;
  if ((_BYTE)ArgOperands)
    v224 = (llvm::APFloatBase *)v251;
  else
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v251 + 16))(&v224);
  v225 = v252;
  mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)v228, (uint64_t)&v244);
  LOWORD(__p) = v247;
  if ((_BYTE)v247)
    v222[0] = v248;
  else
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v248 + 16))(v222);
  v222[1] = v249;
  v29 = (llvm::APFloatBase *)llvm::SmallVector<llvm::APFloat,1u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>((uint64_t)&v233, (uint64_t)&v223, (uint64_t)&__p);
  if (!(_BYTE)__p)
  {
    v29 = (llvm::APFloatBase *)v222[0];
    v222[0] = 0;
    if (v29)
      v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v29 + 8))(v29);
  }
  if (!(_BYTE)v247)
  {
    v29 = v248;
    v248 = 0;
    if (v29)
      v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v29 + 8))(v29);
  }
  if (!(_BYTE)v244)
  {
    v29 = v245;
    v245 = 0;
    if (v29)
      v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v29 + 8))(v29);
  }
  if (!(_BYTE)v223)
  {
    v29 = v224;
    v224 = 0;
    if (v29)
      v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v29 + 8))(v29);
  }
  if (!v253)
  {
    v29 = v254;
    v254 = 0;
    if (v29)
      v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v29 + 8))(v29);
  }
  if (!(_BYTE)ArgOperands)
  {
    v29 = (llvm::APFloatBase *)v251;
    v251 = 0;
    if (v29)
      v29 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v29 + 8))(v29);
  }
  switch(StorageType)
  {
    case 0:
      OperandRange = (__n128 *)a3[2];
      if (OperandRange)
        OperandRange = (__n128 *)llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)OperandRange);
      else
        v31 = 0;
      v231 = OperandRange;
      v232[0] = v31;
      if (OperandRange)
      {
        OperandRange = (__n128 *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v231);
        if ((OperandRange & 1) != 0)
        {
          mlir::ElementsAttr::getSplatValue<llvm::APFloat>((mlir::BranchOpInterface *)&v231, (uint64_t)&v244);
          ArgOperands = (unint64_t)&v252;
          v251 = 0x100000000;
          llvm::SmallVectorImpl<llvm::APFloat>::assign((unsigned int *)&ArgOperands, v18, (uint64_t)&v244);
          v129 = llvm::SmallVectorImpl<llvm::APFloat>::operator=((llvm::APFloatBase *)&v239, (unsigned int *)&ArgOperands);
          v130 = (uint64_t *)ArgOperands;
          v131 = v251;
          if ((_DWORD)v251)
          {
            v132 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v129);
            v133 = v130 - 3;
            v134 = 4 * v131;
            do
            {
              while (1)
              {
                v135 = (llvm::detail::DoubleAPFloat *)&v133[v134];
                if (v132 != (void *)v133[v134])
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v135);
                v134 -= 4;
                if (!(v134 * 8))
                  goto LABEL_216;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v135);
              v134 -= 4;
            }
            while (v134 * 8);
LABEL_216:
            v130 = (uint64_t *)ArgOperands;
          }
          if (v130 != &v252)
            free(v130);
          llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>((unsigned int *)&v239, (char *)v233, (char *)v233 + 32 * v234);
          Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v239, (unint64_t)&v244, v21);
          if (v21)
          {
            v137 = (char *)v239;
            v138 = v240;
            v139 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
            v140 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
            v141 = (llvm::detail::DoubleAPFloat *)&v137[32 * v138 + 8];
            v142 = v21;
            do
            {
              if (v140 == *(llvm::APFloatBase **)v139)
                v143 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v141, v139);
              else
                v143 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v141, v139);
              v141 = (llvm::detail::DoubleAPFloat *)((char *)v143 + 32);
              --v142;
            }
            while (v142);
          }
          else
          {
            v140 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)Address);
          }
          LODWORD(v240) = v240 + v21;
          if (v140 != v245)
            goto LABEL_248;
          goto LABEL_297;
        }
      }
      v27 = 0;
      goto LABEL_299;
    case 1:
      v40 = (char *)v233;
      if (v18)
      {
        v41 = (char *)v233 + 32 * v18;
        do
        {
          v42 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v239, (unint64_t)v41, 1);
          v43 = (llvm::detail::DoubleAPFloat *)((char *)v239 + 32 * v240 + 8);
          v44 = (const llvm::detail::DoubleAPFloat *)(v42 + 8);
          v45 = (void *)*((_QWORD *)v42 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v42) == v45)
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v43, v44);
          else
            llvm::detail::IEEEFloat::IEEEFloat(v43, v44);
          LODWORD(v240) = v240 + 1;
          v41 -= 32;
          --v18;
        }
        while (v18);
        v40 = (char *)v233;
      }
      llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>((unsigned int *)&v239, v40, &v40[32 * v234]);
      if (v21)
      {
        v56 = -32 * v21;
        v57 = (char *)v233 + 32 * v234 - 64;
        do
        {
          v58 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v239, (unint64_t)v57, 1);
          v59 = (llvm::detail::DoubleAPFloat *)((char *)v239 + 32 * v240 + 8);
          v60 = (const llvm::detail::DoubleAPFloat *)(v58 + 8);
          v61 = (void *)*((_QWORD *)v58 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v58) == v61)
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v59, v60);
          else
            llvm::detail::IEEEFloat::IEEEFloat(v59, v60);
          LODWORD(v240) = v240 + 1;
          v57 -= 32;
          v56 += 32;
        }
        while (v56);
      }
      goto LABEL_298;
    case 2:
      v46 = (char *)v233;
      if (v18)
      {
        v47 = 32 * v18;
        v48 = (char *)v233 - 32;
        do
        {
          v49 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v239, (unint64_t)&v48[v47], 1);
          v50 = (llvm::detail::DoubleAPFloat *)((char *)v239 + 32 * v240 + 8);
          v51 = (const llvm::detail::DoubleAPFloat *)(v49 + 8);
          v52 = (void *)*((_QWORD *)v49 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v49) == v52)
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v50, v51);
          else
            llvm::detail::IEEEFloat::IEEEFloat(v50, v51);
          LODWORD(v240) = v240 + 1;
          v47 -= 32;
        }
        while (v47);
        v46 = (char *)v233;
      }
      llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>((unsigned int *)&v239, v46, &v46[32 * v234]);
      if (v21)
      {
        v62 = -32 * v21;
        v63 = (char *)v233 + 32 * v234 - 32;
        do
        {
          v64 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v239, (unint64_t)v63, 1);
          v65 = (llvm::detail::DoubleAPFloat *)((char *)v239 + 32 * v240 + 8);
          v66 = (const llvm::detail::DoubleAPFloat *)(v64 + 8);
          v67 = (void *)*((_QWORD *)v64 + 1);
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v64) == v67)
            llvm::detail::DoubleAPFloat::DoubleAPFloat(v65, v66);
          else
            llvm::detail::IEEEFloat::IEEEFloat(v65, v66);
          LODWORD(v240) = v240 + 1;
          v63 -= 32;
          v62 += 32;
        }
        while (v62);
      }
      goto LABEL_298;
    case 3:
      v53 = (const llvm::detail::DoubleAPFloat *)((char *)v233 + 8);
      v54 = (llvm::APFloatBase *)*((_QWORD *)v233 + 1);
      v55 = (llvm::APFloatBase *)llvm::APFloatBase::PPCDoubleDouble(v29);
      if (v55 == v54)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v245, v53);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v245, v53);
      v144 = (char *)v233 + 32 * v234;
      v146 = (llvm::APFloatBase *)*((_QWORD *)v144 - 3);
      v145 = (const llvm::detail::DoubleAPFloat *)(v144 - 24);
      if (v55 == v146)
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)v232, v145);
      else
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v232, v145);
      ArgOperands = (unint64_t)&v252;
      v251 = 0x100000000;
      llvm::SmallVectorImpl<llvm::APFloat>::assign((unsigned int *)&ArgOperands, v18, (uint64_t)&v244);
      llvm::SmallVectorImpl<llvm::APFloat>::operator=((llvm::APFloatBase *)&v239, (unsigned int *)&ArgOperands);
      v147 = (uint64_t *)ArgOperands;
      if (!(_DWORD)v251)
        goto LABEL_236;
      v148 = (_DWORD *)(ArgOperands - 24);
      v149 = 8 * v251;
      break;
    default:
      goto LABEL_298;
  }
  do
  {
    while (1)
    {
      v150 = (llvm::detail::DoubleAPFloat *)&v148[v149];
      if (v55 != *(llvm::APFloatBase **)&v148[v149])
        break;
      llvm::detail::DoubleAPFloat::~DoubleAPFloat(v150);
      v149 -= 8;
      if (!(v149 * 4))
        goto LABEL_235;
    }
    llvm::detail::IEEEFloat::~IEEEFloat(v150);
    v149 -= 8;
  }
  while (v149 * 4);
LABEL_235:
  v147 = (uint64_t *)ArgOperands;
LABEL_236:
  if (v147 != &v252)
    free(v147);
  llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>((unsigned int *)&v239, (char *)v233, (char *)v233 + 32 * v234);
  v151 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v239, (unint64_t)&v231, v21);
  if (v21)
  {
    v152 = (const llvm::detail::DoubleAPFloat *)(v151 + 8);
    v153 = (llvm::detail::DoubleAPFloat *)((char *)v239 + 32 * v240 + 8);
    v154 = v21;
    do
    {
      if (v55 == *(llvm::APFloatBase **)v152)
        v155 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v153, v152);
      else
        v155 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v153, v152);
      v153 = (llvm::detail::DoubleAPFloat *)((char *)v155 + 32);
      --v154;
    }
    while (v154);
  }
  LODWORD(v240) = v240 + v21;
  if (v55 == (llvm::APFloatBase *)v232[0])
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v232);
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v232);
  if (v55 == v245)
LABEL_297:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v245);
  else
LABEL_248:
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v245);
LABEL_298:
  ArgOperands = v240;
  v177 = mlir::getElementTypeOrSelf(v228[0]);
  v178 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&ArgOperands, 1, v177, 0);
  OperandRange = mlir::createElementsAttr(v178, (uint64_t)v239, v240);
  v27 = (unint64_t)OperandRange & 0xFFFFFFFFFFFFFFFBLL;
LABEL_299:
  v179 = (char *)v233;
  v180 = v234;
  if ((_DWORD)v234)
  {
    v181 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)OperandRange);
    v182 = v179 - 24;
    v183 = 32 * v180;
    do
    {
      while (1)
      {
        v184 = (llvm::detail::DoubleAPFloat *)&v182[v183];
        if (v181 != *(void **)&v182[v183])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v184);
        v183 -= 32;
        if (!v183)
          goto LABEL_304;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v184);
      v183 -= 32;
    }
    while (v183);
LABEL_304:
    v179 = (char *)v233;
  }
  if (v179 != (char *)&v235)
    free(v179);
  v185 = (uint64_t *)v239;
  v186 = v240;
  if ((_DWORD)v240)
  {
    v187 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)OperandRange);
    v188 = v185 - 3;
    v189 = 4 * v186;
    do
    {
      while (1)
      {
        v190 = (llvm::detail::DoubleAPFloat *)&v188[v189];
        if (v187 != (void *)v188[v189])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v190);
        v189 -= 4;
        if (!(v189 * 8))
          goto LABEL_312;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v190);
      v189 -= 4;
    }
    while (v189 * 8);
LABEL_312:
    v185 = (uint64_t *)v239;
  }
  if (v185 != &v241)
  {
    v191 = v185;
LABEL_368:
    free(v191);
  }
  return v27;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldPadOp>::externalFoldMultipleResults()
{
  return 0;
}

_QWORD *llvm::SmallVector<llvm::APInt,3u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  _QWORD v10[2];
  char v11[8];
  _QWORD v12[2];

  *a1 = a1 + 2;
  a1[1] = 0x300000000;
  v11[0] = *(_BYTE *)a2;
  v11[1] = *(_BYTE *)(a2 + 1);
  if (v11[0])
    v12[0] = *(_QWORD *)(a2 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a2 + 8) + 16))(v12);
  v12[1] = *(_QWORD *)(a2 + 16);
  v9[0] = *(_BYTE *)a3;
  v9[1] = *(_BYTE *)(a3 + 1);
  if (v9[0])
    v10[0] = *(_QWORD *)(a3 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a3 + 8) + 16))(v10);
  v10[1] = *(_QWORD *)(a3 + 16);
  llvm::SmallVectorImpl<llvm::APInt>::append<mlir::detail::ElementsAttrIterator<llvm::APInt>,void>((uint64_t)a1, v11, (uint64_t)v9);
  if (!v9[0])
  {
    v6 = v10[0];
    v10[0] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (!v11[0])
  {
    v7 = v12[0];
    v12[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return a1;
}

void llvm::SmallVectorImpl<llvm::APInt>::assign(uint64_t a1, unint64_t a2, const void **a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  llvm::APInt *v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void *v18;

  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      do
      {
        if (*(_DWORD *)(v8 + 8) > 0x40u || *((_DWORD *)a3 + 2) > 0x40u)
        {
          llvm::APInt::assignSlowCase((const void **)v8, a3);
        }
        else
        {
          *(_QWORD *)v8 = *a3;
          *(_DWORD *)(v8 + 8) = *((_DWORD *)a3 + 2);
        }
        v8 += 16;
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v13 = 16 * v6;
        v14 = 16 * v6 + *(_QWORD *)a1 - 8;
        v15 = 16 * a2 - v13;
        v16 = (unsigned int *)v14;
        do
        {
          v17 = *v16;
          v16 -= 4;
          if (v17 >= 0x41)
          {
            v18 = *(void **)(v14 - 8);
            if (v18)
              operator delete[](v18);
          }
          v14 = (uint64_t)v16;
          v15 += 16;
        }
        while (v15);
      }
    }
    else
    {
      v10 = (llvm::APInt *)(*(_QWORD *)a1 + 16 * v6);
      do
      {
        v12 = *((_DWORD *)a3 + 2);
        *((_DWORD *)v10 + 2) = v12;
        if (v12 > 0x40)
          llvm::APInt::initSlowCase(v10, a3);
        else
          *(_QWORD *)v10 = *a3;
        v10 = (llvm::APInt *)((char *)v10 + 16);
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::APInt,false>::growAndAssign(a1, a2, (uint64_t)a3);
  }
}

void llvm::SmallVectorTemplateBase<llvm::APInt,false>::growAndAssign(uint64_t a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  _DWORD *v7;
  _DWORD *v8;
  llvm::APInt *v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int v16;
  unint64_t v17;

  v17 = 0;
  v6 = (char *)(a1 + 16);
  v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 16, &v17);
  v8 = v7;
  if (a2)
  {
    v9 = (llvm::APInt *)v7;
    v10 = a2;
    do
    {
      v11 = *(_DWORD *)(a3 + 8);
      *((_DWORD *)v9 + 2) = v11;
      if (v11 > 0x40)
        llvm::APInt::initSlowCase(v9, (const void **)a3);
      else
        *(_QWORD *)v9 = *(_QWORD *)a3;
      v9 = (llvm::APInt *)((char *)v9 + 16);
      --v10;
    }
    while (v10);
  }
  v12 = *(char **)a1;
  v13 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v13)
  {
    v14 = 16 * v13;
    do
    {
      if (*(_DWORD *)&v12[v14 - 8] >= 0x41u)
      {
        v15 = *(void **)&v12[v14 - 16];
        if (v15)
          operator delete[](v15);
      }
      v14 -= 16;
    }
    while (v14);
    v12 = *(char **)a1;
  }
  v16 = v17;
  if (v12 != v6)
    free(v12);
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v16;
}

uint64_t llvm::SmallVectorImpl<llvm::APInt>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _DWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *i;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 16 * v7;
        do
        {
          if (*(_DWORD *)&v6[v8 - 8] >= 0x41u)
          {
            v9 = *(void **)&v6[v8 - 16];
            if (v9)
              operator delete[](v9);
          }
          v8 -= 16;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *a2;
      v10 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
LABEL_13:
      *v10 = 0;
      return a1;
    }
    v10 = a2 + 1;
    v12 = *((unsigned int *)a2 + 2);
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      v17 = *(char **)a1;
      if ((_DWORD)v12)
      {
        v18 = 0;
        do
        {
          v20 = &v17[v18];
          if (*(_DWORD *)&v17[v18 + 8] >= 0x41u && *(_QWORD *)v20)
            operator delete[](*(void **)v20);
          v19 = v4 + v18;
          *(_QWORD *)v20 = *(_QWORD *)(v4 + v18);
          *((_DWORD *)v20 + 2) = *(_DWORD *)(v4 + v18 + 8);
          *(_DWORD *)(v19 + 8) = 0;
          v18 += 16;
        }
        while (v19 + 16 != v4 + 16 * v12);
        v21 = &v17[v18];
        v17 = *(char **)a1;
        v13 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v21 = *(char **)a1;
      }
      for (i = &v17[16 * v13]; i != v21; i -= 16)
      {
        if (*((_DWORD *)i - 2) >= 0x41u)
        {
          v35 = (void *)*((_QWORD *)i - 2);
          if (v35)
            operator delete[](v35);
        }
      }
      *(_DWORD *)(a1 + 8) = v12;
      v36 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v36)
      {
        v37 = *a2;
        v38 = 16 * v36;
        do
        {
          if (*(_DWORD *)(v37 + v38 - 8) >= 0x41u)
          {
            v39 = *(void **)(v37 + v38 - 16);
            if (v39)
              operator delete[](v39);
          }
          v38 -= 16;
        }
        while (v38);
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if ((_DWORD)v13)
      {
        v22 = v4 + 16 * v13;
        v23 = (_DWORD *)(*(_QWORD *)a1 + 8);
        do
        {
          if (*v23 >= 0x41u)
          {
            v24 = (void *)*((_QWORD *)v23 - 1);
            if (v24)
              operator delete[](v24);
          }
          *((_QWORD *)v23 - 1) = *(_QWORD *)v4;
          *v23 = *(_DWORD *)(v4 + 8);
          v23 += 4;
          *(_DWORD *)(v4 + 8) = 0;
          v4 += 16;
        }
        while (v4 != v22);
        goto LABEL_38;
      }
    }
    else
    {
      if ((_DWORD)v13)
      {
        v14 = *(char **)a1;
        v15 = 16 * v13;
        do
        {
          if (*(_DWORD *)&v14[v15 - 8] >= 0x41u)
          {
            v16 = *(void **)&v14[v15 - 16];
            if (v16)
              operator delete[](v16);
          }
          v15 -= 16;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow(a1, v12);
    }
    v13 = 0;
LABEL_38:
    v25 = *a2;
    v26 = *((unsigned int *)a2 + 2);
    if (v13 != v26)
    {
      v27 = (16 * v13) | 8;
      v28 = (_DWORD *)(*(_QWORD *)a1 + v27);
      v29 = 16 * v26 - 16 * v13;
      v30 = (_DWORD *)(v25 + v27);
      do
      {
        *v28 = *v30;
        *((_QWORD *)v28 - 1) = *((_QWORD *)v30 - 1);
        *v30 = 0;
        v30 += 4;
        v28 += 4;
        v29 -= 16;
      }
      while (v29);
      v25 = *a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    v31 = *v10;
    if ((_DWORD)v31)
    {
      v32 = 16 * v31;
      do
      {
        if (*(_DWORD *)(v25 + v32 - 8) >= 0x41u)
        {
          v33 = *(void **)(v25 + v32 - 16);
          if (v33)
            operator delete[](v33);
        }
        v32 -= 16;
      }
      while (v32);
    }
    goto LABEL_13;
  }
  return a1;
}

uint64_t llvm::SmallVector<llvm::APFloat,1u>::SmallVector<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v9[8];
  _QWORD v10[2];
  char v11[8];
  _QWORD v12[2];

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  v11[0] = *(_BYTE *)a2;
  v11[1] = *(_BYTE *)(a2 + 1);
  if (v11[0])
    v12[0] = *(_QWORD *)(a2 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a2 + 8) + 16))(v12);
  v12[1] = *(_QWORD *)(a2 + 16);
  v9[0] = *(_BYTE *)a3;
  v9[1] = *(_BYTE *)(a3 + 1);
  if (v9[0])
    v10[0] = *(_QWORD *)(a3 + 8);
  else
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a3 + 8) + 16))(v10);
  v10[1] = *(_QWORD *)(a3 + 16);
  llvm::SmallVectorImpl<llvm::APFloat>::append<mlir::detail::ElementsAttrIterator<llvm::APFloat>,void>((unsigned int *)a1, v11, v9);
  if (!v9[0])
  {
    v6 = v10[0];
    v10[0] = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if (!v11[0])
  {
    v7 = v12[0];
    v12[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return a1;
}

unsigned int *llvm::SmallVectorImpl<llvm::APFloat>::operator=(llvm::APFloatBase *this, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  uint64_t v10;
  llvm::detail::DoubleAPFloat *v11;
  _DWORD *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::detail::DoubleAPFloat *v20;
  void *v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  llvm::APFloatBase *v27;
  uint64_t v28;
  llvm::APFloatBase *v29;
  unsigned int *v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::detail::DoubleAPFloat *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::detail::DoubleAPFloat *v52;
  unint64_t v53;

  v2 = (unsigned int *)this;
  if (this != (llvm::APFloatBase *)a2)
  {
    v5 = a2 + 4;
    v4 = *(_QWORD *)a2;
    if (*(unsigned int **)a2 == a2 + 4)
    {
      v12 = a2 + 2;
      v14 = a2[2];
      v15 = *((unsigned int *)this + 2);
      if (v15 >= v14)
      {
        v23 = *(unsigned int **)this;
        if ((_DWORD)v14)
        {
          v24 = 0;
          v25 = v4 + 8;
          do
          {
            this = llvm::APFloat::Storage::operator=((llvm::APFloatBase *)&v23[v24 + 2], (llvm::APFloatBase *)(v25 + v24 * 4));
            v24 += 8;
          }
          while (8 * v14 != v24);
          v26 = &v23[v24];
          v23 = *(unsigned int **)v2;
          v15 = v2[2];
        }
        else
        {
          v26 = *(unsigned int **)this;
        }
        v30 = &v23[8 * v15];
        if (v30 != v26)
        {
          v31 = llvm::APFloatBase::PPCDoubleDouble(this);
          this = (llvm::APFloatBase *)(v30 - 6);
          do
          {
            if (v31 == *(void **)this)
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(this);
            else
              llvm::detail::IEEEFloat::~IEEEFloat(this);
            v33 = (unsigned int *)(v32 - 8);
            this = (llvm::APFloatBase *)(v32 - 32);
          }
          while (v33 != v26);
        }
        v2[2] = v14;
        v34 = a2[2];
        if ((_DWORD)v34)
        {
          v35 = *(_QWORD *)a2;
          v36 = llvm::APFloatBase::PPCDoubleDouble(this);
          v37 = v35 - 24;
          v38 = 32 * v34;
          do
          {
            v39 = (llvm::detail::DoubleAPFloat *)(v37 + v38);
            if (v36 == *(void **)(v37 + v38))
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v39);
            else
              llvm::detail::IEEEFloat::~IEEEFloat(v39);
            v38 -= 32;
          }
          while (v38);
        }
      }
      else
      {
        if (*((_DWORD *)this + 3) >= v14)
        {
          if ((_DWORD)v15)
          {
            v27 = (llvm::APFloatBase *)(*(_QWORD *)this + 8);
            v28 = 32 * v15;
            v29 = (llvm::APFloatBase *)(v4 + 8);
            do
            {
              this = llvm::APFloat::Storage::operator=(v27, v29);
              v27 = (llvm::APFloatBase *)((char *)v27 + 32);
              v29 = (llvm::APFloatBase *)((char *)v29 + 32);
              v28 -= 32;
            }
            while (v28);
          }
          else
          {
            v15 = 0;
          }
        }
        else
        {
          if ((_DWORD)v15)
          {
            v16 = *(_QWORD *)this;
            v17 = llvm::APFloatBase::PPCDoubleDouble(this);
            v18 = v16 - 24;
            v19 = 32 * v15;
            do
            {
              while (1)
              {
                v20 = (llvm::detail::DoubleAPFloat *)(v18 + v19);
                if (v17 != *(void **)(v18 + v19))
                  break;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v20);
                v19 -= 32;
                if (!v19)
                  goto LABEL_21;
              }
              llvm::detail::IEEEFloat::~IEEEFloat(v20);
              v19 -= 32;
            }
            while (v19);
          }
LABEL_21:
          v2[2] = 0;
          v53 = 0;
          v21 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v2, v2 + 4, v14, 32, &v53);
          llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(v2, (uint64_t)v21);
          v22 = v53;
          this = *(llvm::APFloatBase **)v2;
          if (*(unsigned int **)v2 != v2 + 4)
            free(this);
          v15 = 0;
          *(_QWORD *)v2 = v21;
          v2[3] = v22;
        }
        v40 = *(_QWORD *)a2;
        v41 = a2[2];
        if (v15 != v41)
        {
          v42 = *(unsigned int **)v2;
          v43 = llvm::APFloatBase::PPCDoubleDouble(this);
          v44 = (32 * v15) | 8;
          this = (llvm::APFloatBase *)((char *)v42 + v44);
          v45 = 32 * v41 - 32 * v15;
          v46 = (void **)(v40 + v44);
          do
          {
            if (v43 == *v46)
              v47 = (uint64_t)llvm::detail::DoubleAPFloat::DoubleAPFloat(this, v46);
            else
              v47 = llvm::detail::IEEEFloat::IEEEFloat((uint64_t)this, (uint64_t)v46);
            this = (llvm::APFloatBase *)(v47 + 32);
            v46 += 4;
            v45 -= 32;
          }
          while (v45);
          v40 = *(_QWORD *)a2;
        }
        v2[2] = v14;
        v48 = *v12;
        if ((_DWORD)v48)
        {
          v49 = llvm::APFloatBase::PPCDoubleDouble(this);
          v50 = v40 - 24;
          v51 = 32 * v48;
          do
          {
            while (1)
            {
              v52 = (llvm::detail::DoubleAPFloat *)(v50 + v51);
              if (v49 != *(void **)(v50 + v51))
                break;
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v52);
              v51 -= 32;
              if (!v51)
                goto LABEL_12;
            }
            llvm::detail::IEEEFloat::~IEEEFloat(v52);
            v51 -= 32;
          }
          while (v51);
        }
      }
    }
    else
    {
      v6 = *(unsigned int **)this;
      v7 = *((unsigned int *)this + 2);
      if ((_DWORD)v7)
      {
        v8 = llvm::APFloatBase::PPCDoubleDouble(this);
        v9 = v6 - 6;
        v10 = 8 * v7;
        do
        {
          while (1)
          {
            v11 = (llvm::detail::DoubleAPFloat *)&v9[v10];
            if (v8 != *(void **)&v9[v10])
              break;
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v11);
            v10 -= 8;
            if (!(v10 * 4))
              goto LABEL_8;
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v11);
          v10 -= 8;
        }
        while (v10 * 4);
LABEL_8:
        v6 = *(unsigned int **)v2;
      }
      if (v6 != v2 + 4)
        free(v6);
      *(_QWORD *)v2 = *(_QWORD *)a2;
      v12 = a2 + 2;
      *((_QWORD *)v2 + 1) = *((_QWORD *)a2 + 1);
      *(_QWORD *)a2 = v5;
      a2[3] = 0;
    }
LABEL_12:
    *v12 = 0;
  }
  return v2;
}

void llvm::SmallVectorImpl<llvm::APFloat>::append<llvm::APFloat const*,void>(unsigned int *a1, char *a2, char *a3)
{
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  void *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  llvm::detail::DoubleAPFloat *v15;
  const llvm::detail::DoubleAPFloat *v16;
  llvm::detail::DoubleAPFloat *v17;
  char *v18;
  unint64_t v19;

  v5 = a1;
  v6 = a3 - a2;
  v7 = a1[2];
  v8 = v7 + ((a3 - a2) >> 5);
  if (v8 > a1[3])
  {
    v19 = 0;
    v9 = a1 + 4;
    v10 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)a1, a1 + 4, v8, 32, &v19);
    llvm::SmallVectorTemplateBase<llvm::APFloat,false>::moveElementsForGrow(v5, (uint64_t)v10);
    v11 = v19;
    a1 = *(unsigned int **)v5;
    if (*(unsigned int **)v5 != v9)
      free(a1);
    *(_QWORD *)v5 = v10;
    v5[3] = v11;
    LODWORD(v7) = v5[2];
  }
  if (a2 != a3)
  {
    v12 = *(unsigned int **)v5;
    v13 = v7;
    v14 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1);
    v15 = (llvm::detail::DoubleAPFloat *)&v12[8 * v13 + 2];
    v16 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
    do
    {
      if (v14 == *(void **)v16)
        v17 = llvm::detail::DoubleAPFloat::DoubleAPFloat(v15, v16);
      else
        v17 = (llvm::detail::DoubleAPFloat *)llvm::detail::IEEEFloat::IEEEFloat(v15, v16);
      v15 = (llvm::detail::DoubleAPFloat *)((char *)v17 + 32);
      v18 = (char *)v16 + 24;
      v16 = (const llvm::detail::DoubleAPFloat *)((char *)v16 + 32);
    }
    while (v18 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 5);
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldCastOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  _QWORD *v18;
  void **ElementTypeOrSelf;
  void **v20;
  unint64_t ElementBitWidth;
  void **v22;
  void **v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t ArgAttrsAttr;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v49;
  BOOL isSignedInteger;
  unsigned int IntOrFloatBitWidth;
  uint64_t *v52;
  mlir::mps::CPUNDArray *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t *v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t ElementsAttr;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t *v78;
  _QWORD *v79;
  unint64_t v80;
  _BOOL8 isF32;
  char *v82;
  _BOOL8 isF16;
  char *v84;
  mlir::mps::CPUNDArray *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float SplatFloatValue;
  float v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t *v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t *v107;
  _QWORD *v108;
  unint64_t v109;
  _BOOL8 isBF16;
  char *v111;
  uint64_t v112;
  llvm::APFloatBase *v113;
  llvm::APFloatBase *v114;
  llvm::APFloatBase *v115;
  uint64_t v116;
  _QWORD *v117;
  llvm::APFloatBase *v118;
  uint64_t v119;
  llvm::APFloatBase *v120;
  char *v121;
  char *v122;
  int v123;
  char *v124;
  llvm::detail::DoubleAPFloat *v125;
  const llvm::detail::DoubleAPFloat *v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t *v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t *v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  llvm::APFloatBase *v156;
  llvm::APFloatBase *v157;
  llvm::APFloatBase *v158;
  uint64_t v159;
  _QWORD *v160;
  llvm::APFloatBase *v161;
  void **v162;
  uint64_t v163;
  void *v164;
  void **v165;
  uint64_t v166;
  llvm::detail::DoubleAPFloat *v167;
  uint64_t v168;
  llvm::APFloatBase *inited;
  char *v170;
  char *v171;
  int Signedness;
  int v173;
  char v174;
  llvm::APFloatBase *v175;
  llvm::APFloatBase *v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  unint64_t *v183;
  _QWORD *v184;
  unint64_t v185;
  uint64_t v186;
  char *Address;
  llvm::detail::DoubleAPFloat *v188;
  const llvm::detail::DoubleAPFloat *v189;
  char *v190;
  llvm::APFloatBase *v191;
  llvm::APFloatBase *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  unint64_t v198;
  unint64_t *v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  void **v205;
  uint64_t v206;
  llvm::detail::DoubleAPFloat *v207;
  uint64_t v209;
  llvm::APFloatBase *v210;
  llvm::APFloatBase *v211;
  llvm::APFloatBase *v212;
  uint64_t v213;
  _QWORD *v214;
  llvm::APFloatBase *v215;
  uint64_t v216;
  void *v217;
  void **v218;
  uint64_t v219;
  llvm::detail::IEEEFloat *v220;
  void **v221;
  uint64_t v222;
  llvm::APFloatBase *v223;
  char *v224;
  char *v225;
  int v226;
  int v227;
  char v228;
  llvm::APFloatBase *v229;
  llvm::APFloatBase *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t *v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  llvm::detail::DoubleAPFloat *v242;
  const llvm::detail::DoubleAPFloat *v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  BOOL v249;
  int v250;
  char v251;
  uint64_t v252;
  llvm::APFloatBase *v253;
  char *v254;
  llvm::APFloatBase *v255;
  uint64_t v256;
  _QWORD *v257;
  uint64_t v258;
  llvm::APFloatBase *v259;
  char *v260;
  llvm::APFloatBase *v261;
  uint64_t v262;
  _QWORD *v263;
  void **v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t *v270;
  unsigned int v271;
  _BOOL4 v272;
  unint64_t v273;
  int v274;
  char v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  unint64_t v283;
  unint64_t *v284;
  _QWORD *v285;
  unint64_t v286;
  uint64_t v287;
  void **v288;
  void **v289;
  llvm::APInt *v290;
  unsigned int v291;
  unint64_t v292;
  int64_t v293;
  llvm::APFloatBase *v294;
  char *v295;
  llvm::APFloatBase *v296;
  uint64_t v297;
  uint64_t v298;
  llvm::APFloatBase *v299;
  llvm::APFloatBase *v300;
  llvm::APFloatBase *v301;
  uint64_t v302;
  _QWORD *v303;
  BOOL v304;
  uint64_t v305;
  char *v306;
  const llvm::detail::DoubleAPFloat *v307;
  void *v308;
  uint64_t v309;
  void **v310;
  void **p_p;
  llvm::APInt *v312;
  unsigned int v313;
  llvm::APFloatBase *v314;
  void *v315;
  unint64_t v316;
  int64_t v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  _QWORD *v323;
  _QWORD *v324;
  unint64_t v325;
  unint64_t *v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  void *v330;
  llvm::APFloatBase *v331;
  llvm::APFloatBase *v332;
  llvm::APFloatBase *v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  void **v337;
  void *__p;
  unsigned int v339;
  BOOL v340;
  void *v341;
  llvm::APFloatBase *v342;
  uint64_t v343;
  void **v344;
  llvm::APFloatBase *v345;
  uint64_t i;
  uint64_t v347;
  uint64_t v348;
  void **Type;
  void **OperandRange;
  _QWORD v351[2];
  uint64_t v352;
  void **v353;
  __int128 v354;
  __int16 v355;
  llvm::APFloatBase *v356;
  uint64_t v357;
  uint64_t Value;
  char *v359;
  uint64_t v360;
  void **v361;
  uint64_t v362;
  uint64_t v363;
  __int16 v364;
  llvm::APFloatBase *v365;
  uint64_t v366;
  char v367;
  uint64_t v368;

  v368 = *MEMORY[0x1E0C80C00];
  v352 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v352) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v351[0] = v4;
  v351[1] = v14;
  OperandRange = (void **)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v351);
  Type = (void **)mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v352);
  if (OperandRange == Type)
    return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v352) | 4;
  if (!*a3)
  {
    v347 = 0;
    v348 = 0;
    return 0;
  }
  v347 = (uint64_t)llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v348 = v15;
  if (!v347)
    return 0;
  v17 = Type;
  v18 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v347);
  ElementTypeOrSelf = (void **)mlir::getElementTypeOrSelf(v18);
  v361 = v17;
  v353 = ElementTypeOrSelf;
  if (v17 == ElementTypeOrSelf)
    return v347 & 0xFFFFFFFFFFFFFFFBLL;
  v20 = ElementTypeOrSelf;
  if (mlir::Type::isF16((mlir::Type *)&v361) || mlir::Type::isBF16((mlir::Type *)&v361))
  {
    if (mlir::Type::isF32((mlir::Type *)&v353))
      return v347 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else if (*((_UNKNOWN **)*v361 + 17) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
         && *((_UNKNOWN **)*v20 + 17) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v344 = v361;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v344);
    if (mlir::Type::isF16((mlir::Type *)&Value))
    {
      __p = v20;
      v341 = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&__p);
      if (mlir::Type::isF32((mlir::Type *)&v341))
        return v347 & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  if (mlir::ElementsAttr::getNumElements(v347, v348) >= 1025)
  {
    ElementBitWidth = mlir::getElementBitWidth(OperandRange);
    if (ElementBitWidth < mlir::getElementBitWidth(Type)
      && !mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v347))
    {
      return 0;
    }
  }
  v22 = (void **)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v347);
  v23 = v22;
  if (!v22)
    goto LABEL_39;
  v24 = *v22;
  v25 = mlir::TypeID::get<mlir::ShapedType>();
  v26 = *((unsigned int *)v24 + 4);
  if (!(_DWORD)v26)
    goto LABEL_39;
  v27 = (_QWORD *)v24[1];
  v28 = &v27[2 * v26];
  do
  {
    v29 = v26 >> 1;
    v30 = &v27[2 * (v26 >> 1)];
    v32 = *v30;
    v31 = v30 + 2;
    v26 += ~(v26 >> 1);
    if (v32 < v25)
      v27 = v31;
    else
      v26 = v29;
  }
  while (v26);
  if (v27 != v28 && *v27 == v25)
    v33 = v27[1];
  else
LABEL_39:
    v33 = 0;
  v361 = v23;
  v362 = v33;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v361);
  v36 = v35;
  v37 = (void *)*((_QWORD *)*OperandRange + 17);
  v16 = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  if (v37 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    if (v37 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v37 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return 0;
    }
    v49 = (void *)*((_QWORD *)*Type + 17);
    if (v49 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v49 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      if (v49 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      {
        v361 = (void **)&v363;
        v362 = 0x400000000;
        isSignedInteger = mlir::Type::isSignedInteger((mlir::Type *)&Type);
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Type);
        mlir::ElementsAttr::getValues<llvm::APFloat>(&v347, (uint64_t)&v353);
        LOWORD(v344) = (_WORD)v353;
        if ((_BYTE)v353)
          v345 = (llvm::APFloatBase *)v354;
        else
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v354 + 16))(&v345);
        v298 = *((_QWORD *)&v354 + 1);
        i = *((_QWORD *)&v354 + 1);
        LOWORD(v341) = v355;
        if ((_BYTE)v355)
        {
          v342 = v356;
        }
        else
        {
          (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v356 + 16))(&v342);
          v298 = i;
        }
        v343 = v357;
        if (v298 == v357)
        {
LABEL_557:
          if (!(_BYTE)v341)
          {
            v299 = v342;
            v342 = 0;
            if (v299)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v299 + 8))(v299);
          }
          if (!(_BYTE)v344)
          {
            v300 = v345;
            v345 = 0;
            if (v300)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v300 + 8))(v300);
          }
          if (!(_BYTE)v355)
          {
            v301 = v356;
            v356 = 0;
            if (v301)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v301 + 8))(v301);
          }
          if (!(_BYTE)v353)
          {
            v302 = v354;
            *(_QWORD *)&v354 = 0;
            if (v302)
              (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
          }
          v303 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
          v16 = (void *)((unint64_t)mlir::createElementsAttr(v303, v361, v362) & 0xFFFFFFFFFFFFFFFBLL);
        }
        else
        {
          v304 = !isSignedInteger;
          while (1)
          {
            if (BYTE1(v344))
              v305 = 0;
            else
              v305 = v298;
            if ((_BYTE)v344)
            {
              v306 = (char *)v345 + 32 * v305;
              v308 = (void *)*((_QWORD *)v306 + 1);
              v307 = (const llvm::detail::DoubleAPFloat *)(v306 + 8);
              if (llvm::APFloatBase::PPCDoubleDouble(v345) == v308)
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v359, v307);
              else
                llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v359, v307);
            }
            else
            {
              (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v345 + 24))(&Value);
            }
            v339 = IntOrFloatBitWidth;
            if (IntOrFloatBitWidth > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
            else
              __p = 0;
            v340 = v304;
            LOBYTE(v337) = 0;
            v309 = llvm::APFloat::convertToInteger((uint64_t)&Value, (uint64_t)&__p, 0, &v337);
            if ((_DWORD)v309)
            {
              v16 = 0;
              goto LABEL_612;
            }
            v310 = v361;
            if (v362 >= HIDWORD(v362))
            {
              v316 = v362 + 1;
              if (v361 <= &__p && &v361[2 * v362] > &__p)
              {
                v317 = (char *)&__p - (char *)v361;
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v361, v316);
                v310 = v361;
                p_p = (void **)((char *)v361 + v317);
              }
              else
              {
                llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v361, v316);
                p_p = &__p;
                v310 = v361;
              }
            }
            else
            {
              p_p = &__p;
            }
            v312 = (llvm::APInt *)&v310[2 * v362];
            v313 = *((_DWORD *)p_p + 2);
            *((_DWORD *)v312 + 2) = v313;
            if (v313 > 0x40)
              llvm::APInt::initSlowCase(v312, (const void **)p_p);
            else
              *(_QWORD *)v312 = *p_p;
            LODWORD(v362) = v362 + 1;
            v314 = (llvm::APFloatBase *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v347);
            if ((_DWORD)v314)
              break;
            if (v339 >= 0x41)
            {
              v314 = (llvm::APFloatBase *)__p;
              if (__p)
                operator delete[](__p);
            }
            v315 = v359;
            if (llvm::APFloatBase::PPCDoubleDouble(v314) == v315)
              llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v359);
            else
              llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v359);
            v298 = i + 1;
            i = v298;
            if (v298 == v343)
              goto LABEL_557;
          }
          v318 = (uint64_t *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
          v319 = (uint64_t)v318;
          if (!v318)
            goto LABEL_610;
          v320 = *v318;
          v321 = mlir::TypeID::get<mlir::ShapedType>();
          v322 = *(unsigned int *)(v320 + 16);
          if (!(_DWORD)v322)
            goto LABEL_610;
          v323 = *(_QWORD **)(v320 + 8);
          v324 = &v323[2 * v322];
          do
          {
            v325 = v322 >> 1;
            v326 = &v323[2 * (v322 >> 1)];
            v328 = *v326;
            v327 = v326 + 2;
            v322 += ~(v322 >> 1);
            if (v328 < v321)
              v323 = v327;
            else
              v322 = v325;
          }
          while (v322);
          if (v323 != v324 && *v323 == v321)
            v329 = v323[1];
          else
LABEL_610:
            v329 = 0;
          v309 = mlir::DenseElementsAttr::get(v319, v329, (llvm::APInt *)v361, 1);
          v16 = (void *)(v309 & 0xFFFFFFFFFFFFFFFBLL);
LABEL_612:
          if (v339 >= 0x41)
          {
            v309 = (uint64_t)__p;
            if (__p)
              operator delete[](__p);
          }
          v330 = v359;
          if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)v309) == v330)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v359);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v359);
          if (!(_BYTE)v341)
          {
            v331 = v342;
            v342 = 0;
            if (v331)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v331 + 8))(v331);
          }
          if (!(_BYTE)v344)
          {
            v332 = v345;
            v345 = 0;
            if (v332)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v332 + 8))(v332);
          }
          if (!(_BYTE)v355)
          {
            v333 = v356;
            v356 = 0;
            if (v333)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v333 + 8))(v333);
          }
          if (!(_BYTE)v353)
          {
            v334 = v354;
            *(_QWORD *)&v354 = 0;
            if (v334)
              (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
          }
        }
        v264 = v361;
        if ((_DWORD)v362)
        {
          v335 = 2 * v362;
          do
          {
            if (LODWORD(v264[v335 - 1]) >= 0x41)
            {
              v336 = v264[v335 - 2];
              if (v336)
                operator delete[](v336);
            }
            v335 -= 2;
          }
          while (v335 * 8);
          goto LABEL_636;
        }
        goto LABEL_637;
      }
      return 0;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Type) && !mlir::Type::isBF16((mlir::Type *)&Type)
      || !mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      return 0;
    }
    v52 = (uint64_t *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
    if (mlir::Type::isF16((mlir::Type *)&Type))
    {
      v53 = (mlir::mps::CPUNDArray *)mlir::mps::CPUNDArray::CPUNDArray(&v361, v347);
      if (v367)
      {
        _S0 = mlir::mps::CPUNDArray::getSplatFloatValue(v53);
        __asm { FCVT            H0, S0 }
        LOWORD(v353) = LOWORD(_S0);
        if (!v52)
          goto LABEL_105;
        v61 = *v52;
        v62 = mlir::TypeID::get<mlir::ShapedType>();
        v63 = *(unsigned int *)(v61 + 16);
        if (!(_DWORD)v63)
          goto LABEL_105;
        v64 = *(_QWORD **)(v61 + 8);
        v65 = &v64[2 * v63];
        do
        {
          v66 = v63 >> 1;
          v67 = &v64[2 * (v63 >> 1)];
          v69 = *v67;
          v68 = v67 + 2;
          v63 += ~(v63 >> 1);
          if (v69 < v62)
            v64 = v68;
          else
            v63 = v66;
        }
        while (v63);
        if (v64 != v65 && *v64 == v62)
          v70 = v64[1];
        else
LABEL_105:
          v70 = 0;
        v71 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v52, v70, &v353, 2, v54, v55, v56);
        ElementsAttr = (unint64_t)v71;
        if (v71)
        {
          v73 = *v71;
          v74 = mlir::TypeID::get<mlir::ElementsAttr>();
          v75 = *(unsigned int *)(v73 + 16);
          if ((_DWORD)v75)
          {
            v76 = *(_QWORD **)(v73 + 8);
            do
            {
              v77 = v75 >> 1;
              v78 = &v76[2 * (v75 >> 1)];
              v80 = *v78;
              v79 = v78 + 2;
              v75 += ~(v75 >> 1);
              if (v80 < v74)
                v76 = v79;
              else
                v75 = v77;
            }
            while (v75);
          }
        }
        goto LABEL_219;
      }
      if (!v52)
        goto LABEL_200;
      v128 = *v52;
      v129 = mlir::TypeID::get<mlir::ShapedType>();
      v130 = *(unsigned int *)(v128 + 16);
      if (!(_DWORD)v130)
        goto LABEL_200;
      v131 = *(_QWORD **)(v128 + 8);
      v132 = &v131[2 * v130];
      do
      {
        v133 = v130 >> 1;
        v134 = &v131[2 * (v130 >> 1)];
        v136 = *v134;
        v135 = v134 + 2;
        v130 += ~(v130 >> 1);
        if (v136 < v129)
          v131 = v135;
        else
          v130 = v133;
      }
      while (v130);
      if (v131 != v132 && *v131 == v129)
        v137 = v131[1];
      else
LABEL_200:
        v137 = 0;
      mlir::mps::CPUNDArray::CPUNDArray(&v353, v52, v137, 0);
      v138 = v366;
      v139 = v357;
      if (mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)&v361) >= 1)
      {
        v140 = 0;
        do
        {
          _S0 = *(_DWORD *)(v138 + 4 * v140);
          __asm { FCVT            H0, S0 }
          *(_WORD *)(v139 + 2 * v140++) = _S0;
        }
        while (v140 < mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)&v361));
      }
    }
    else
    {
      v85 = (mlir::mps::CPUNDArray *)mlir::mps::CPUNDArray::CPUNDArray(&v361, v347);
      if (v367)
      {
        SplatFloatValue = mlir::mps::CPUNDArray::getSplatFloatValue(v85);
        v90 = SplatFloatValue + (float)(COERCE_FLOAT(LODWORD(SplatFloatValue) & 0xFF800000) * 0.0039062);
        LOWORD(v353) = HIWORD(v90);
        if (!v52)
          goto LABEL_130;
        v91 = *v52;
        v92 = mlir::TypeID::get<mlir::ShapedType>();
        v93 = *(unsigned int *)(v91 + 16);
        if (!(_DWORD)v93)
          goto LABEL_130;
        v94 = *(_QWORD **)(v91 + 8);
        v95 = &v94[2 * v93];
        do
        {
          v96 = v93 >> 1;
          v97 = &v94[2 * (v93 >> 1)];
          v99 = *v97;
          v98 = v97 + 2;
          v93 += ~(v93 >> 1);
          if (v99 < v92)
            v94 = v98;
          else
            v93 = v96;
        }
        while (v93);
        if (v94 != v95 && *v94 == v92)
          v100 = v94[1];
        else
LABEL_130:
          v100 = 0;
        v101 = (uint64_t *)mlir::DenseElementsAttr::getFromRawBuffer(v52, v100, &v353, 2, v86, v87, v88);
        ElementsAttr = (unint64_t)v101;
        if (v101)
        {
          v102 = *v101;
          v103 = mlir::TypeID::get<mlir::ElementsAttr>();
          v104 = *(unsigned int *)(v102 + 16);
          if ((_DWORD)v104)
          {
            v105 = *(_QWORD **)(v102 + 8);
            do
            {
              v106 = v104 >> 1;
              v107 = &v105[2 * (v104 >> 1)];
              v109 = *v107;
              v108 = v107 + 2;
              v104 += ~(v104 >> 1);
              if (v109 < v103)
                v105 = v108;
              else
                v104 = v106;
            }
            while (v104);
          }
        }
        goto LABEL_219;
      }
      if (!v52)
        goto LABEL_214;
      v142 = *v52;
      v143 = mlir::TypeID::get<mlir::ShapedType>();
      v144 = *(unsigned int *)(v142 + 16);
      if (!(_DWORD)v144)
        goto LABEL_214;
      v145 = *(_QWORD **)(v142 + 8);
      v146 = &v145[2 * v144];
      do
      {
        v147 = v144 >> 1;
        v148 = &v145[2 * (v144 >> 1)];
        v150 = *v148;
        v149 = v148 + 2;
        v144 += ~(v144 >> 1);
        if (v150 < v143)
          v145 = v149;
        else
          v144 = v147;
      }
      while (v144);
      if (v145 != v146 && *v145 == v143)
        v151 = v145[1];
      else
LABEL_214:
        v151 = 0;
      mlir::mps::CPUNDArray::CPUNDArray(&v353, v52, v151, 0);
      v152 = v366;
      v153 = v357;
      if (mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)&v361) >= 1)
      {
        v154 = 0;
        do
        {
          *(_WORD *)(v153 + 2 * v154) = HIWORD(COERCE_UNSIGNED_INT(*(float *)(v152 + 4 * v154)+ (float)(COERCE_FLOAT(*(_DWORD *)(v152 + 4 * v154) & 0xFF800000) * 0.0039062)));
          ++v154;
        }
        while (v154 < mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)&v361));
      }
    }
    ElementsAttr = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)&v353, 0, 0);
    mlir::mps::CPUNDArray::~CPUNDArray((void **)&v353);
LABEL_219:
    mlir::mps::CPUNDArray::~CPUNDArray((void **)&v361);
    return ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
  }
  isF32 = mlir::Type::isF32((mlir::Type *)&Type);
  if (!isF32)
  {
    isF16 = mlir::Type::isF16((mlir::Type *)&Type);
    if (isF16)
    {
      v361 = (void **)&v363;
      v362 = 0x400000000;
      v84 = (char *)llvm::APFloatBase::IEEEhalf((llvm::APFloatBase *)isF16);
      mlir::ElementsAttr::getValues<llvm::APInt>(&v347, (uint64_t)&v353);
      LOWORD(v344) = (_WORD)v353;
      if ((_BYTE)v353)
        v345 = (llvm::APFloatBase *)v354;
      else
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v354 + 16))(&v345);
      v155 = *((_QWORD *)&v354 + 1);
      i = *((_QWORD *)&v354 + 1);
      LOWORD(v341) = v355;
      if ((_BYTE)v355)
      {
        v342 = v356;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v356 + 16))(&v342);
        v155 = i;
      }
      v343 = v357;
      if (v155 == v357)
      {
LABEL_225:
        if (!(_BYTE)v341)
        {
          v156 = v342;
          v342 = 0;
          if (v156)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v156 + 8))(v156);
        }
        if (!(_BYTE)v344)
        {
          v157 = v345;
          v345 = 0;
          if (v157)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v157 + 8))(v157);
        }
        if (!(_BYTE)v355)
        {
          v158 = v356;
          v356 = 0;
          if (v158)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v158 + 8))(v158);
        }
        if (!(_BYTE)v353)
        {
          v159 = v354;
          *(_QWORD *)&v354 = 0;
          if (v159)
            (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
        }
        v160 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
        v161 = (llvm::APFloatBase *)mlir::createElementsAttr(v160, (uint64_t)v361, v362);
        v16 = (void *)((unint64_t)v161 & 0xFFFFFFFFFFFFFFFBLL);
      }
      else
      {
        while (1)
        {
          if (BYTE1(v344))
            v168 = 0;
          else
            v168 = v155;
          inited = v345;
          if ((_BYTE)v344)
          {
            v170 = (char *)v345 + 16 * v168;
            v339 = *((_DWORD *)v170 + 2);
            if (v339 > 0x40)
              inited = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v170);
            else
              __p = *(void **)v170;
          }
          else
          {
            inited = (llvm::APFloatBase *)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)v345 + 24))(&__p);
          }
          v171 = (char *)llvm::APFloatBase::PPCDoubleDouble(inited);
          if (v171 == v84)
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v359, (uint64_t)v171);
          else
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v359, (uint64_t)v84);
          v337 = OperandRange;
          Signedness = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v337);
          if (v171 == v359)
            llvm::detail::DoubleAPFloat::convertFromAPInt((llvm::detail::DoubleAPFloat *)&v359, (uint64_t)&__p, Signedness == 1, 1);
          else
            llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)&v359, (uint64_t)&__p, Signedness == 1, 1);
          v173 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v347);
          v174 = v173;
          if (v173)
          {
            v175 = (llvm::APFloatBase *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
            v176 = v175;
            if (!v175)
              goto LABEL_268;
            v177 = *(_QWORD *)v175;
            v178 = mlir::TypeID::get<mlir::ShapedType>();
            v179 = *(unsigned int *)(v177 + 16);
            if (!(_DWORD)v179)
              goto LABEL_268;
            v180 = *(_QWORD **)(v177 + 8);
            v181 = &v180[2 * v179];
            do
            {
              v182 = v179 >> 1;
              v183 = &v180[2 * (v179 >> 1)];
              v185 = *v183;
              v184 = v183 + 2;
              v179 += ~(v179 >> 1);
              if (v185 < v178)
                v180 = v184;
              else
                v179 = v182;
            }
            while (v179);
            if (v180 != v181 && *v180 == v178)
              v186 = v180[1];
            else
LABEL_268:
              v186 = 0;
            v16 = (void *)(mlir::DenseElementsAttr::get(v176, v186, (uint64_t)&Value, 1) & 0xFFFFFFFFFFFFFFFBLL);
          }
          else
          {
            Address = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v361, (unint64_t)&Value, 1);
            v188 = (llvm::detail::DoubleAPFloat *)&v361[4 * v362 + 1];
            v190 = (char *)*((_QWORD *)Address + 1);
            v189 = (const llvm::detail::DoubleAPFloat *)(Address + 8);
            if (v171 == v190)
              llvm::detail::DoubleAPFloat::DoubleAPFloat(v188, v189);
            else
              llvm::detail::IEEEFloat::IEEEFloat(v188, v189);
            LODWORD(v362) = v362 + 1;
          }
          if (v171 == v359)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v359);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v359);
          if (v339 >= 0x41)
          {
            v161 = (llvm::APFloatBase *)__p;
            if (__p)
              operator delete[](__p);
          }
          if ((v174 & 1) != 0)
            break;
          v155 = i + 1;
          i = v155;
          if (v155 == v343)
            goto LABEL_225;
        }
        if (!(_BYTE)v341)
        {
          v161 = v342;
          v342 = 0;
          if (v161)
            v161 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v161 + 8))(v161);
        }
        if (!(_BYTE)v344)
        {
          v161 = v345;
          v345 = 0;
          if (v161)
            v161 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v161 + 8))(v161);
        }
        if (!(_BYTE)v355)
        {
          v161 = v356;
          v356 = 0;
          if (v161)
            v161 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v161 + 8))(v161);
        }
        if (!(_BYTE)v353)
        {
          v161 = (llvm::APFloatBase *)v354;
          *(_QWORD *)&v354 = 0;
          if (v161)
            v161 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v161 + 8))(v161);
        }
      }
      v162 = v361;
      v163 = v362;
      if ((_DWORD)v362)
      {
        v164 = llvm::APFloatBase::PPCDoubleDouble(v161);
        v165 = v162 - 3;
        v166 = 4 * v163;
        do
        {
          while (1)
          {
            v167 = (llvm::detail::DoubleAPFloat *)&v165[v166];
            if (v164 != v165[v166])
              break;
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v167);
            v166 -= 4;
            if (!(v166 * 8))
              goto LABEL_360;
          }
          llvm::detail::IEEEFloat::~IEEEFloat(v167);
          v166 -= 4;
        }
        while (v166 * 8);
LABEL_360:
        v162 = v361;
        goto LABEL_361;
      }
      goto LABEL_361;
    }
    isBF16 = mlir::Type::isBF16((mlir::Type *)&Type);
    if (isBF16)
    {
      v361 = (void **)&v363;
      v362 = 0x400000000;
      v111 = (char *)llvm::APFloatBase::BFloat((llvm::APFloatBase *)isBF16);
      mlir::ElementsAttr::getValues<llvm::APInt>(&v347, (uint64_t)&v353);
      LOWORD(v344) = (_WORD)v353;
      if ((_BYTE)v353)
        v345 = (llvm::APFloatBase *)v354;
      else
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v354 + 16))(&v345);
      v209 = *((_QWORD *)&v354 + 1);
      i = *((_QWORD *)&v354 + 1);
      LOWORD(v341) = v355;
      if ((_BYTE)v355)
      {
        v342 = v356;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v356 + 16))(&v342);
        v209 = i;
      }
      v343 = v357;
      if (v209 == v357)
      {
LABEL_342:
        if (!(_BYTE)v341)
        {
          v210 = v342;
          v342 = 0;
          if (v210)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v210 + 8))(v210);
        }
        if (!(_BYTE)v344)
        {
          v211 = v345;
          v345 = 0;
          if (v211)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v211 + 8))(v211);
        }
        if (!(_BYTE)v355)
        {
          v212 = v356;
          v356 = 0;
          if (v212)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v212 + 8))(v212);
        }
        if (!(_BYTE)v353)
        {
          v213 = v354;
          *(_QWORD *)&v354 = 0;
          if (v213)
            (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
        }
        v214 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
        v215 = (llvm::APFloatBase *)mlir::createElementsAttr(v214, (uint64_t)v361, v362);
        v16 = (void *)((unint64_t)v215 & 0xFFFFFFFFFFFFFFFBLL);
      }
      else
      {
        while (1)
        {
          if (BYTE1(v344))
            v222 = 0;
          else
            v222 = v209;
          v223 = v345;
          if ((_BYTE)v344)
          {
            v224 = (char *)v345 + 16 * v222;
            v339 = *((_DWORD *)v224 + 2);
            if (v339 > 0x40)
              v223 = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v224);
            else
              __p = *(void **)v224;
          }
          else
          {
            v223 = (llvm::APFloatBase *)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)v345 + 24))(&__p);
          }
          v225 = (char *)llvm::APFloatBase::PPCDoubleDouble(v223);
          if (v225 == v111)
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v359, (uint64_t)v225);
          else
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v359, (uint64_t)v111);
          v337 = OperandRange;
          v226 = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v337);
          if (v225 == v359)
            llvm::detail::DoubleAPFloat::convertFromAPInt((llvm::detail::DoubleAPFloat *)&v359, (uint64_t)&__p, v226 == 1, 1);
          else
            llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)&v359, (uint64_t)&__p, v226 == 1, 1);
          v227 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v347);
          v228 = v227;
          if (v227)
          {
            v229 = (llvm::APFloatBase *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
            v230 = v229;
            if (!v229)
              goto LABEL_388;
            v231 = *(_QWORD *)v229;
            v232 = mlir::TypeID::get<mlir::ShapedType>();
            v233 = *(unsigned int *)(v231 + 16);
            if (!(_DWORD)v233)
              goto LABEL_388;
            v234 = *(_QWORD **)(v231 + 8);
            v235 = &v234[2 * v233];
            do
            {
              v236 = v233 >> 1;
              v237 = &v234[2 * (v233 >> 1)];
              v239 = *v237;
              v238 = v237 + 2;
              v233 += ~(v233 >> 1);
              if (v239 < v232)
                v234 = v238;
              else
                v233 = v236;
            }
            while (v233);
            if (v234 != v235 && *v234 == v232)
              v240 = v234[1];
            else
LABEL_388:
              v240 = 0;
            v16 = (void *)(mlir::DenseElementsAttr::get(v230, v240, (uint64_t)&Value, 1) & 0xFFFFFFFFFFFFFFFBLL);
          }
          else
          {
            v241 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v361, (unint64_t)&Value, 1);
            v242 = (llvm::detail::DoubleAPFloat *)&v361[4 * v362 + 1];
            v244 = (char *)*((_QWORD *)v241 + 1);
            v243 = (const llvm::detail::DoubleAPFloat *)(v241 + 8);
            if (v225 == v244)
              llvm::detail::DoubleAPFloat::DoubleAPFloat(v242, v243);
            else
              llvm::detail::IEEEFloat::IEEEFloat(v242, v243);
            LODWORD(v362) = v362 + 1;
          }
          if (v225 == v359)
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v359);
          else
            llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v359);
          if (v339 >= 0x41)
          {
            v215 = (llvm::APFloatBase *)__p;
            if (__p)
              operator delete[](__p);
          }
          if ((v228 & 1) != 0)
            break;
          v209 = i + 1;
          i = v209;
          if (v209 == v343)
            goto LABEL_342;
        }
        if (!(_BYTE)v341)
        {
          v215 = v342;
          v342 = 0;
          if (v215)
            v215 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v215 + 8))(v215);
        }
        if (!(_BYTE)v344)
        {
          v215 = v345;
          v345 = 0;
          if (v215)
            v215 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v215 + 8))(v215);
        }
        if (!(_BYTE)v355)
        {
          v215 = v356;
          v356 = 0;
          if (v215)
            v215 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v215 + 8))(v215);
        }
        if (!(_BYTE)v353)
        {
          v215 = (llvm::APFloatBase *)v354;
          *(_QWORD *)&v354 = 0;
          if (v215)
            v215 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v215 + 8))(v215);
        }
      }
      v162 = v361;
      v216 = v362;
      if ((_DWORD)v362)
      {
        v217 = llvm::APFloatBase::PPCDoubleDouble(v215);
        v218 = v162 - 3;
        v219 = 4 * v216;
        do
        {
          while (1)
          {
            v220 = (llvm::detail::IEEEFloat *)&v218[v219];
            if (v217 == v218[v219])
              break;
            llvm::detail::IEEEFloat::~IEEEFloat(v220);
            v219 -= 4;
            if (!(v219 * 8))
              goto LABEL_360;
          }
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v220);
          v219 -= 4;
        }
        while (v219 * 8);
        goto LABEL_360;
      }
LABEL_361:
      if (v162 == (void **)&v363)
        return (uint64_t)v16;
      goto LABEL_362;
    }
    if (mlir::Type::isInteger((mlir::Type *)&Type, 1))
    {
      v353 = (void **)&v355;
      v354 = xmmword_181234800;
      mlir::ElementsAttr::getValues<llvm::APInt>(&v347, (uint64_t)&v361);
      LOWORD(Value) = (_WORD)v361;
      if ((_BYTE)v361)
        v359 = (char *)v362;
      else
        (*(void (**)(char **__return_ptr))(*(_QWORD *)v362 + 16))(&v359);
      v245 = v363;
      v360 = v363;
      LOWORD(v344) = v364;
      if ((_BYTE)v364)
      {
        v345 = v365;
      }
      else
      {
        (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v365 + 16))(&v345);
        v245 = v360;
      }
      v246 = v366;
      for (i = v366; ; v246 = i)
      {
        if (v245 == v246)
        {
          if (!(_BYTE)v344)
          {
            v253 = v345;
            v345 = 0;
            if (v253)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v253 + 8))(v253);
          }
          if (!(_BYTE)Value)
          {
            v254 = v359;
            v359 = 0;
            if (v254)
              (*(void (**)(char *))(*(_QWORD *)v254 + 8))(v254);
          }
          if (!(_BYTE)v364)
          {
            v255 = v365;
            v365 = 0;
            if (v255)
              (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v255 + 8))(v255);
          }
          if (!(_BYTE)v361)
          {
            v256 = v362;
            v362 = 0;
            if (v256)
              (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
          }
          v257 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
          v16 = (void *)((unint64_t)mlir::createElementsAttr<BOOL>(v257, v353, v354) & 0xFFFFFFFFFFFFFFFBLL);
          v221 = v353;
          if (v353 == (void **)&v355)
            return (uint64_t)v16;
LABEL_363:
          free(v221);
          return (uint64_t)v16;
        }
        v247 = BYTE1(Value) ? 0 : v245;
        if (!(_BYTE)Value)
          break;
        v248 = &v359[16 * v247];
        LODWORD(v342) = *((_DWORD *)v248 + 2);
        if (v342 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v341, (const void **)v248);
LABEL_433:
          v250 = (int)v342;
          if (v342 > 0x40)
            v249 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v341) == v250;
          else
            v249 = v341 == 0;
          goto LABEL_436;
        }
        v341 = *(void **)v248;
        v249 = v341 == 0;
LABEL_436:
        v251 = v249;
        v252 = v354;
        if ((unint64_t)(v354 + 1) > *((_QWORD *)&v354 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v353, &v355, v354 + 1, 1);
          v252 = v354;
        }
        *((_BYTE *)v353 + v252) = v251 ^ 1;
        *(_QWORD *)&v354 = v354 + 1;
        if (v342 >= 0x41 && v341)
          operator delete[](v341);
        v245 = ++v360;
      }
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v359 + 24))(&v341);
      goto LABEL_433;
    }
    if (*((_UNKNOWN **)*Type + 17) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      return 0;
    v361 = (void **)&v363;
    v362 = 0x400000000;
    mlir::ElementsAttr::getValues<llvm::APInt>(&v347, (uint64_t)&v353);
    LOWORD(Value) = (_WORD)v353;
    if ((_BYTE)v353)
      v359 = (char *)v354;
    else
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v354 + 16))(&v359);
    v258 = *((_QWORD *)&v354 + 1);
    v360 = *((_QWORD *)&v354 + 1);
    LOWORD(v344) = v355;
    if ((_BYTE)v355)
    {
      v345 = v356;
    }
    else
    {
      (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v356 + 16))(&v345);
      v258 = v360;
    }
    i = v357;
    if (v258 == v357)
    {
LABEL_467:
      if (!(_BYTE)v344)
      {
        v259 = v345;
        v345 = 0;
        if (v259)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v259 + 8))(v259);
      }
      if (!(_BYTE)Value)
      {
        v260 = v359;
        v359 = 0;
        if (v260)
          (*(void (**)(char *))(*(_QWORD *)v260 + 8))(v260);
      }
      if (!(_BYTE)v355)
      {
        v261 = v356;
        v356 = 0;
        if (v261)
          (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v261 + 8))(v261);
      }
      if (!(_BYTE)v353)
      {
        v262 = v354;
        *(_QWORD *)&v354 = 0;
        if (v262)
          (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
      }
      v263 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
      v16 = (void *)((unint64_t)mlir::createElementsAttr(v263, v361, v362) & 0xFFFFFFFFFFFFFFFBLL);
      goto LABEL_480;
    }
    while (1)
    {
      if (BYTE1(Value))
        v267 = 0;
      else
        v267 = v258;
      if ((_BYTE)Value)
      {
        v268 = &v359[16 * v267];
        LODWORD(v342) = *((_DWORD *)v268 + 2);
        if (v342 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v341, (const void **)v268);
        else
          v341 = *(void **)v268;
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v359 + 24))(&v341);
      }
      if (mlir::Type::isSignedInteger((mlir::Type *)&OperandRange))
      {
        if (v342 <= 0x40)
        {
          v269 = (uint64_t)((_QWORD)v341 << -(uint64_t)v342) >> -(uint64_t)v342;
          goto LABEL_502;
        }
        v270 = (uint64_t *)v341;
      }
      else if (v342 >= 0x41)
      {
        v270 = (uint64_t *)v341;
      }
      else
      {
        v270 = (uint64_t *)&v341;
      }
      v269 = *v270;
LABEL_502:
      v271 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Type);
      v272 = mlir::Type::isSignedInteger((mlir::Type *)&Type);
      v339 = v271;
      if (v271 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__p, v269, v272);
      }
      else
      {
        v273 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v271;
        if (!v271)
          v273 = 0;
        __p = (void *)(v273 & v269);
      }
      v274 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v347);
      v275 = v274;
      if (v274)
      {
        v276 = (uint64_t *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
        v277 = (uint64_t)v276;
        if (!v276)
          goto LABEL_517;
        v278 = *v276;
        v279 = mlir::TypeID::get<mlir::ShapedType>();
        v280 = *(unsigned int *)(v278 + 16);
        if (!(_DWORD)v280)
          goto LABEL_517;
        v281 = *(_QWORD **)(v278 + 8);
        v282 = &v281[2 * v280];
        do
        {
          v283 = v280 >> 1;
          v284 = &v281[2 * (v280 >> 1)];
          v286 = *v284;
          v285 = v284 + 2;
          v280 += ~(v280 >> 1);
          if (v286 < v279)
            v281 = v285;
          else
            v280 = v283;
        }
        while (v280);
        if (v281 != v282 && *v281 == v279)
          v287 = v281[1];
        else
LABEL_517:
          v287 = 0;
        v16 = (void *)(mlir::DenseElementsAttr::get(v277, v287, (llvm::APInt *)&__p, 1) & 0xFFFFFFFFFFFFFFFBLL);
      }
      else
      {
        v288 = v361;
        if (v362 >= HIDWORD(v362))
        {
          v292 = v362 + 1;
          if (v361 <= &__p && &v361[2 * v362] > &__p)
          {
            v293 = (char *)&__p - (char *)v361;
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v361, v292);
            v288 = v361;
            v289 = (void **)((char *)v361 + v293);
          }
          else
          {
            llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v361, v292);
            v289 = &__p;
            v288 = v361;
          }
        }
        else
        {
          v289 = &__p;
        }
        v290 = (llvm::APInt *)&v288[2 * v362];
        v291 = *((_DWORD *)v289 + 2);
        *((_DWORD *)v290 + 2) = v291;
        if (v291 > 0x40)
          llvm::APInt::initSlowCase(v290, (const void **)v289);
        else
          *(_QWORD *)v290 = *v289;
        LODWORD(v362) = v362 + 1;
      }
      if (v339 >= 0x41 && __p)
        operator delete[](__p);
      if (v342 >= 0x41 && v341)
        operator delete[](v341);
      if ((v275 & 1) != 0)
      {
        if (!(_BYTE)v344)
        {
          v294 = v345;
          v345 = 0;
          if (v294)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v294 + 8))(v294);
        }
        if (!(_BYTE)Value)
        {
          v295 = v359;
          v359 = 0;
          if (v295)
            (*(void (**)(char *))(*(_QWORD *)v295 + 8))(v295);
        }
        if (!(_BYTE)v355)
        {
          v296 = v356;
          v356 = 0;
          if (v296)
            (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v296 + 8))(v296);
        }
        if (!(_BYTE)v353)
        {
          v297 = v354;
          *(_QWORD *)&v354 = 0;
          if (v297)
            (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
        }
LABEL_480:
        v264 = v361;
        if ((_DWORD)v362)
        {
          v265 = 2 * v362;
          do
          {
            if (LODWORD(v264[v265 - 1]) >= 0x41)
            {
              v266 = v264[v265 - 2];
              if (v266)
                operator delete[](v266);
            }
            v265 -= 2;
          }
          while (v265 * 8);
LABEL_636:
          v264 = v361;
        }
LABEL_637:
        if (v264 == (void **)&v363)
          return (uint64_t)v16;
        v221 = v264;
        goto LABEL_363;
      }
      v258 = v360 + 1;
      v360 = v258;
      if (v258 == i)
        goto LABEL_467;
    }
  }
  v361 = (void **)&v363;
  v362 = 0x400000000;
  v82 = (char *)llvm::APFloatBase::IEEEsingle((llvm::APFloatBase *)isF32);
  mlir::ElementsAttr::getValues<llvm::APInt>(&v347, (uint64_t)&v353);
  LOWORD(v344) = (_WORD)v353;
  if ((_BYTE)v353)
    v345 = (llvm::APFloatBase *)v354;
  else
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v354 + 16))(&v345);
  v112 = *((_QWORD *)&v354 + 1);
  i = *((_QWORD *)&v354 + 1);
  LOWORD(v341) = v355;
  if ((_BYTE)v355)
  {
    v342 = v356;
  }
  else
  {
    (*(void (**)(llvm::APFloatBase **__return_ptr))(*(_QWORD *)v356 + 16))(&v342);
    v112 = i;
  }
  v343 = v357;
  if (v112 == v357)
  {
LABEL_148:
    if (!(_BYTE)v341)
    {
      v113 = v342;
      v342 = 0;
      if (v113)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v113 + 8))(v113);
    }
    if (!(_BYTE)v344)
    {
      v114 = v345;
      v345 = 0;
      if (v114)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v114 + 8))(v114);
    }
    if (!(_BYTE)v355)
    {
      v115 = v356;
      v356 = 0;
      if (v115)
        (*(void (**)(llvm::APFloatBase *))(*(_QWORD *)v115 + 8))(v115);
    }
    if (!(_BYTE)v353)
    {
      v116 = v354;
      *(_QWORD *)&v354 = 0;
      if (v116)
        (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
    }
    v117 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
    v118 = (llvm::APFloatBase *)mlir::createElementsAttr(v117, (uint64_t)v361, v362);
    v16 = (void *)((unint64_t)v118 & 0xFFFFFFFFFFFFFFFBLL);
  }
  else
  {
    while (1)
    {
      v119 = BYTE1(v344) ? 0 : v112;
      v120 = v345;
      if ((_BYTE)v344)
      {
        v121 = (char *)v345 + 16 * v119;
        v339 = *((_DWORD *)v121 + 2);
        if (v339 > 0x40)
          v120 = (llvm::APFloatBase *)llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v121);
        else
          __p = *(void **)v121;
      }
      else
      {
        v120 = (llvm::APFloatBase *)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)v345 + 24))(&__p);
      }
      v122 = (char *)llvm::APFloatBase::PPCDoubleDouble(v120);
      if (v122 == v82)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v359, (uint64_t)v122);
      else
        llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v359, (uint64_t)v82);
      v337 = OperandRange;
      v123 = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v337);
      if (v122 == v359)
      {
        if (llvm::detail::DoubleAPFloat::convertFromAPInt((llvm::detail::DoubleAPFloat *)&v359, (uint64_t)&__p, v123 == 1, 0))
        {
LABEL_284:
          v16 = 0;
          goto LABEL_296;
        }
      }
      else if (llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)&v359, (uint64_t)&__p, v123 == 1, 0))
      {
        goto LABEL_284;
      }
      if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v347))
        break;
      v124 = llvm::SmallVectorTemplateBase<llvm::APFloat,false>::reserveForParamAndGetAddress((unsigned int *)&v361, (unint64_t)&Value, 1);
      v125 = (llvm::detail::DoubleAPFloat *)&v361[4 * v362 + 1];
      v127 = (char *)*((_QWORD *)v124 + 1);
      v126 = (const llvm::detail::DoubleAPFloat *)(v124 + 8);
      if (v122 == v127)
        llvm::detail::DoubleAPFloat::DoubleAPFloat(v125, v126);
      else
        llvm::detail::IEEEFloat::IEEEFloat(v125, v126);
      LODWORD(v362) = v362 + 1;
      if (v122 == v359)
        llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v359);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v359);
      if (v339 >= 0x41 && __p)
        operator delete[](__p);
      v112 = i + 1;
      i = v112;
      if (v112 == v343)
        goto LABEL_148;
    }
    v191 = (llvm::APFloatBase *)mlir::RankedTensorType::get(ArgAttrsAttr, v36, (uint64_t)Type, 0);
    v192 = v191;
    if (!v191)
      goto LABEL_294;
    v193 = *(_QWORD *)v191;
    v194 = mlir::TypeID::get<mlir::ShapedType>();
    v195 = *(unsigned int *)(v193 + 16);
    if (!(_DWORD)v195)
      goto LABEL_294;
    v196 = *(_QWORD **)(v193 + 8);
    v197 = &v196[2 * v195];
    do
    {
      v198 = v195 >> 1;
      v199 = &v196[2 * (v195 >> 1)];
      v201 = *v199;
      v200 = v199 + 2;
      v195 += ~(v195 >> 1);
      if (v201 < v194)
        v196 = v200;
      else
        v195 = v198;
    }
    while (v195);
    if (v196 != v197 && *v196 == v194)
      v202 = v196[1];
    else
LABEL_294:
      v202 = 0;
    v16 = (void *)(mlir::DenseElementsAttr::get(v192, v202, (uint64_t)&Value, 1) & 0xFFFFFFFFFFFFFFFBLL);
LABEL_296:
    if (v122 == v359)
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v359);
    else
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v359);
    if (v339 >= 0x41)
    {
      v118 = (llvm::APFloatBase *)__p;
      if (__p)
        operator delete[](__p);
    }
    if (!(_BYTE)v341)
    {
      v118 = v342;
      v342 = 0;
      if (v118)
        v118 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v118 + 8))(v118);
    }
    if (!(_BYTE)v344)
    {
      v118 = v345;
      v345 = 0;
      if (v118)
        v118 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v118 + 8))(v118);
    }
    if (!(_BYTE)v355)
    {
      v118 = v356;
      v356 = 0;
      if (v118)
        v118 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v118 + 8))(v118);
    }
    if (!(_BYTE)v353)
    {
      v118 = (llvm::APFloatBase *)v354;
      *(_QWORD *)&v354 = 0;
      if (v118)
        v118 = (llvm::APFloatBase *)(*(uint64_t (**)(llvm::APFloatBase *))(*(_QWORD *)v118 + 8))(v118);
    }
  }
  v162 = v361;
  v203 = v362;
  if ((_DWORD)v362)
  {
    v204 = llvm::APFloatBase::PPCDoubleDouble(v118);
    v205 = v162 - 3;
    v206 = 4 * v203;
    do
    {
      while (1)
      {
        v207 = (llvm::detail::DoubleAPFloat *)&v205[v206];
        if (v204 != v205[v206])
          break;
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v207);
        v206 -= 4;
        if (!(v206 * 8))
          goto LABEL_331;
      }
      llvm::detail::IEEEFloat::~IEEEFloat(v207);
      v206 -= 4;
    }
    while (v206 * 8);
LABEL_331:
    v162 = v361;
  }
  if (v162 != (void **)&v363)
  {
LABEL_362:
    v221 = v162;
    goto LABEL_363;
  }
  return (uint64_t)v16;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldCastOp>::externalFoldMultipleResults()
{
  return 0;
}

_QWORD *mlir::createElementsAttr<BOOL>(_QWORD *a1, _BYTE *a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  size_t v7;
  _BYTE *v8;
  uint64_t v9;
  size_t v10;
  _QWORD *RawElementsAttr;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  _QWORD v20[6];

  v20[5] = *MEMORY[0x1E0C80C00];
  v4 = a3 + 7;
  v18 = v20;
  v19 = xmmword_181233150;
  if (a3 + 7 < 8)
    goto LABEL_9;
  v5 = a3;
  v7 = v4 >> 3;
  if (v4 < 0x148)
  {
    v9 = 0;
    v8 = v20;
    v10 = v7;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v18, v20, v4 >> 3, 1);
  v8 = v18;
  v9 = v19;
  v10 = v7 - v19;
  if (v7 != (_QWORD)v19)
  {
LABEL_6:
    bzero(&v8[v9], v10);
    v8 = v18;
  }
LABEL_7:
  *(_QWORD *)&v19 = v7;
  if (v5 == 1)
  {
    *v8 = -*a2;
  }
  else
  {
    v13 = a2 + 3;
    do
    {
      v15 = v5;
      v16 = v5 >= 8;
      v5 -= 8;
      if (v16)
        v17 = 8;
      else
        v17 = v15;
      if (v17)
      {
        v14 = *(v13 - 3);
        if (v17 != 1)
        {
          v14 |= 2 * *(v13 - 2);
          if (v17 != 2)
          {
            v14 |= 4 * *(v13 - 1);
            if (v17 != 3)
            {
              v14 |= 8 * *v13;
              if (v17 != 4)
              {
                v14 |= 16 * v13[1];
                if (v17 != 5)
                {
                  v14 |= 32 * v13[2];
                  if (v17 != 6)
                  {
                    v14 |= v13[3] << 6;
                    if (v17 != 7)
                      v14 |= v13[4] << 7;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v14 = 0;
      }
      *v8++ = v14;
      v13 += 8;
      --v7;
    }
    while (v7);
  }
LABEL_9:
  RawElementsAttr = mlir::createRawElementsAttr(a1, v18, (const void *)v19);
  if (v18 != v20)
    free(v18);
  return RawElementsAttr;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReinterpretCastOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Input;
  _QWORD *ElementTypeOrSelf;
  unint64_t ElementBitWidth;
  _QWORD *Type;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *RawStringData;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  const void *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  const void *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *__p;
  _BYTE v101[72];
  unsigned __int8 *v102;
  _BYTE v103[72];

  v99 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v99);
  ElementTypeOrSelf = (_QWORD *)mlir::getElementTypeOrSelf(Input);
  if (ElementTypeOrSelf == (_QWORD *)mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v99))
    return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v99) | 4;
  ElementBitWidth = mlir::getElementBitWidth(ElementTypeOrSelf);
  Type = (_QWORD *)mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v99);
  v8 = mlir::getElementBitWidth(Type);
  v9 = *a3;
  if (!*a3)
    return 0;
  v10 = v8;
  v11 = mlir::DenseElementsAttr::classof(*a3);
  v12 = 0;
  if (v11)
    v13 = v9;
  else
    v13 = 0;
  v98 = v13;
  if (v11)
  {
    if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v98))
    {
      v14 = ElementBitWidth >> 3;
      v15 = v10 >> 3;
      if (ElementBitWidth >= 8 && ElementBitWidth > v10)
      {
        RawStringData = (_BYTE *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v98);
        v102 = &v103[16];
        *(_OWORD *)v103 = xmmword_181234800;
        if (v15 < 5)
        {
          v20 = 0;
          if (v10 >= 8)
            goto LABEL_12;
        }
        else
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v103[16], v10 >> 3, 1);
          v20 = *(_QWORD *)v103;
          if (v10 >= 8)
          {
LABEL_12:
            memcpy(&v102[v20], RawStringData, v10 >> 3);
            goto LABEL_26;
          }
        }
        v23 = v20 + v15;
        *(_QWORD *)v103 = v23;
        if (v10 != 1 || (v24 = *RawStringData, v24 != 255) && *RawStringData)
        {
LABEL_27:
          if (!v23)
            goto LABEL_44;
          v25 = 0;
          do
          {
            v26 = RawStringData;
            v27 = v102;
            v28 = v23 - 1;
            do
            {
              v30 = *v26++;
              v29 = v30;
              v32 = *v27++;
              v31 = v32;
              v33 = v28-- != 0;
            }
            while (v33 && v29 == v31);
            v25 += v23;
            if (v25 == v14)
              break;
            RawStringData += v23;
          }
          while (v29 == v31);
          if (v29 != v31)
          {
LABEL_44:
            if (mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v98) <= 1023)
            {
              v47 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v98) * v14;
              __p = &v101[16];
              *(_OWORD *)v101 = xmmword_181234800;
              if (v47)
              {
                if (v47 < 5)
                {
                  v48 = 0;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, &v101[16], v47, 1);
                  v48 = *(_QWORD *)v101;
                }
                if (v47 != v48)
                  bzero((char *)__p + v48, v47 - v48);
                v74 = 0;
                *(_QWORD *)v101 = v47;
                do
                {
                  v75 = (char *)__p + v74;
                  v76 = (const void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v98);
                  memcpy(v75, v76, v14);
                  v74 += v14;
                }
                while (v47 != v74);
              }
              v77 = (uint64_t *)(*(_QWORD *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
              if (!v77)
                goto LABEL_95;
              v78 = *v77;
              v79 = mlir::TypeID::get<mlir::ShapedType>();
              v80 = *(unsigned int *)(v78 + 16);
              if (!(_DWORD)v80)
                goto LABEL_95;
              v81 = *(_QWORD **)(v78 + 8);
              v82 = &v81[2 * v80];
              do
              {
                v83 = v80 >> 1;
                v84 = &v81[2 * (v80 >> 1)];
                v86 = *v84;
                v85 = v84 + 2;
                v80 += ~(v80 >> 1);
                if (v86 < v79)
                  v81 = v85;
                else
                  v80 = v83;
              }
              while (v80);
              if (v81 != v82 && *v81 == v79)
                v87 = v81[1];
              else
LABEL_95:
                v87 = 0;
              v12 = mlir::DenseElementsAttr::getFromRawBuffer(v77, v87, __p, *(_QWORD *)v101, v44, v45, v46) & 0xFFFFFFFFFFFFFFFBLL;
              if (__p != &v101[16])
                free(__p);
            }
            else
            {
              v12 = 0;
            }
            goto LABEL_114;
          }
          v34 = (uint64_t *)(*(_QWORD *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v34)
            goto LABEL_112;
          v35 = *v34;
          v36 = mlir::TypeID::get<mlir::ShapedType>();
          v37 = *(unsigned int *)(v35 + 16);
          if (!(_DWORD)v37)
            goto LABEL_112;
          v38 = *(_QWORD **)(v35 + 8);
          v39 = &v38[2 * v37];
          do
          {
            v40 = v37 >> 1;
            v41 = &v38[2 * (v37 >> 1)];
            v43 = *v41;
            v42 = v41 + 2;
            v37 += ~(v37 >> 1);
            if (v43 < v36)
              v38 = v42;
            else
              v37 = v40;
          }
          while (v37);
          goto LABEL_110;
        }
        if (v23 + 1 > *(_QWORD *)&v103[8])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v103[16], v23 + 1, 1);
          v23 = *(_QWORD *)v103;
        }
        v102[v23] = v24;
        v15 = 1;
LABEL_26:
        v23 = *(_QWORD *)v103 + v15;
        *(_QWORD *)v103 += v15;
        goto LABEL_27;
      }
      if (ElementBitWidth < v10 && v10 >= 8)
      {
        if (ElementBitWidth == 1)
        {
          mlir::DenseElementsAttr::tryGetValues<llvm::APInt,void>((mlir::DenseElementsAttr *)&v98, (uint64_t)&v102);
          *(_OWORD *)&v101[8] = *(_OWORD *)&v103[8];
          mlir::DenseElementsAttr::IntElementIterator::operator*((uint64_t *)&v102, (llvm::APInt *)&__p);
          v21 = *(_DWORD *)v101;
          if (*(_DWORD *)v101 > 0x40u)
          {
            v22 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v21 - 1;
            if (__p)
              operator delete[](__p);
          }
          else
          {
            v22 = __p == (void *)1;
          }
          v102 = &v103[16];
          *(_OWORD *)v103 = xmmword_1812464B0;
          if (v10 < 0x18)
          {
            v67 = &v103[16];
          }
          else
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v103[16], v10 >> 3, 1);
            v67 = v102;
          }
          memset(v67, v22 << 31 >> 31, v10 >> 3);
          *(_QWORD *)v103 = v10 >> 3;
          v34 = (uint64_t *)(*(_QWORD *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v34)
            goto LABEL_112;
          v68 = *v34;
          v36 = mlir::TypeID::get<mlir::ShapedType>();
          v69 = *(unsigned int *)(v68 + 16);
          if (!(_DWORD)v69)
            goto LABEL_112;
          v38 = *(_QWORD **)(v68 + 8);
          v39 = &v38[2 * v69];
          do
          {
            v70 = v69 >> 1;
            v71 = &v38[2 * (v69 >> 1)];
            v73 = *v71;
            v72 = v71 + 2;
            v69 += ~(v69 >> 1);
            if (v73 < v36)
              v38 = v72;
            else
              v69 = v70;
          }
          while (v69);
LABEL_110:
          if (v38 != v39 && *v38 == v36)
          {
            v97 = v38[1];
            goto LABEL_113;
          }
LABEL_112:
          v97 = 0;
LABEL_113:
          v12 = mlir::DenseElementsAttr::getFromRawBuffer(v34, v97, v102, *(_QWORD *)v103, v16, v17, v18) & 0xFFFFFFFFFFFFFFFBLL;
LABEL_114:
          if (v102 != &v103[16])
            free(v102);
          return v12;
        }
        if (ElementBitWidth >= 8)
        {
          v102 = &v103[16];
          *(_OWORD *)v103 = xmmword_1812464B0;
          if (v10 < 0x18)
          {
            v49 = 0;
          }
          else
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v102, &v103[16], v10 >> 3, 1);
            v49 = *(_QWORD *)v103;
          }
          if (v15 != v49)
            bzero(&v102[v49], v15 - v49);
          v88 = 0;
          *(_QWORD *)v103 = v10 >> 3;
          do
          {
            v89 = (char *)&v102[v88];
            v90 = (const void *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v98);
            memcpy(v89, v90, v14);
            v88 += v14;
          }
          while (v15 != v88);
          v34 = (uint64_t *)(*(_QWORD *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
          if (!v34)
            goto LABEL_112;
          v91 = *v34;
          v36 = mlir::TypeID::get<mlir::ShapedType>();
          v92 = *(unsigned int *)(v91 + 16);
          if (!(_DWORD)v92)
            goto LABEL_112;
          v38 = *(_QWORD **)(v91 + 8);
          v39 = &v38[2 * v92];
          do
          {
            v93 = v92 >> 1;
            v94 = &v38[2 * (v92 >> 1)];
            v96 = *v94;
            v95 = v94 + 2;
            v92 += ~(v92 >> 1);
            if (v96 < v36)
              v38 = v95;
            else
              v92 = v93;
          }
          while (v92);
          goto LABEL_110;
        }
      }
    }
    if (mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v98) && ElementBitWidth != v10)
      return 0;
    v51 = (uint64_t *)(*(_QWORD *)(v99 - 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v51)
      goto LABEL_65;
    v52 = *v51;
    v53 = mlir::TypeID::get<mlir::ShapedType>();
    v54 = *(unsigned int *)(v52 + 16);
    if (!(_DWORD)v54)
      goto LABEL_65;
    v55 = *(_QWORD **)(v52 + 8);
    v56 = &v55[2 * v54];
    do
    {
      v57 = v54 >> 1;
      v58 = &v55[2 * (v54 >> 1)];
      v60 = *v58;
      v59 = v58 + 2;
      v54 += ~(v54 >> 1);
      if (v60 < v53)
        v55 = v59;
      else
        v54 = v57;
    }
    while (v54);
    if (v55 != v56 && *v55 == v53)
      v61 = v55[1];
    else
LABEL_65:
      v61 = 0;
    v62 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v98);
    return mlir::DenseElementsAttr::getFromRawBuffer(v51, v61, v62, v63, v64, v65, v66) & 0xFFFFFFFFFFFFFFFBLL;
  }
  return v12;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReinterpretCastOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldShapeOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t *result;
  uint64_t v4;
  _QWORD *ArgAttrsAttr;
  uint64_t v6;
  uint64_t v7;
  int32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ElementTypeOrSelf;
  _QWORD v12[2];
  uint64_t v13;

  v13 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v13);
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v12[0] = result;
  v12[1] = v4;
  if (result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v12)
      && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v12))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v12);
      if (!v6)
      {
LABEL_8:
        mlir::Attribute::getContext((mlir::Attribute *)(v13 + 24));
        v8 = (int32x4_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v12);
        v10 = v9;
        ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v13 - 8) & 0xFFFFFFFFFFFFFFF8));
      }
      v7 = 8 * v6;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v7 -= 8;
        if (!v7)
          goto LABEL_8;
      }
    }
    return 0;
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldShapeOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::mps::`anonymous namespace'::getIntegerTensorAttr(int32x4_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int32x4_t *v35;
  unint64_t v36;
  int32x4_t *v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int32x4_t *v45;
  int32x4_t *v46;
  uint64_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  _QWORD v58[5];

  v58[4] = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)a3 + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v4 = a3;
  else
    v4 = 0;
  v55 = v4;
  if (!v4)
    return v3;
  if (mlir::IntegerType::getWidth((mlir::IntegerType *)&v55) != 32)
  {
    v54 = a2;
    v22 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v54, 1, v55, 0);
    v23 = v22;
    if (!v22)
      goto LABEL_29;
    v24 = *v22;
    v25 = mlir::TypeID::get<mlir::ShapedType>();
    v26 = *(unsigned int *)(v24 + 16);
    if (!(_DWORD)v26)
      goto LABEL_29;
    v27 = *(_QWORD **)(v24 + 8);
    v28 = &v27[2 * v26];
    do
    {
      v29 = v26 >> 1;
      v30 = &v27[2 * (v26 >> 1)];
      v32 = *v30;
      v31 = v30 + 2;
      v26 += ~(v26 >> 1);
      if (v32 < v25)
        v27 = v31;
      else
        v26 = v29;
    }
    while (v26);
    if (v27 != v28 && *v27 == v25)
      v33 = v27[1];
    else
LABEL_29:
      v33 = 0;
    v56 = v58;
    v57 = 0x400000000;
    if ((unint64_t)(8 * a2) < 0x21)
    {
      v34 = 0;
      v20 = v58;
      if (!a2)
      {
LABEL_38:
        LODWORD(v57) = v34 + a2;
        v39 = 8 * (v34 + a2);
        v40 = v23;
        v41 = v33;
        v42 = 8;
        goto LABEL_45;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, (8 * a2) >> 3, 8);
      v34 = v57;
      v20 = v56;
      if (!a2)
        goto LABEL_38;
    }
    memcpy(&v20[v34], a1, 8 * a2);
    v34 = v57;
    v20 = v56;
    goto LABEL_38;
  }
  v54 = a2;
  v7 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v54, 1, v55, 0);
  v8 = v7;
  if (!v7)
    goto LABEL_15;
  v9 = *v7;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_15;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_15:
    v18 = 0;
  v56 = v58;
  v57 = 0x400000000;
  if ((unint64_t)(8 * a2) >= 0x21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, v58, (8 * a2) >> 3, 4);
    v19 = v57;
    v20 = v56;
    v21 = v57;
    if (!a2)
      goto LABEL_44;
LABEL_34:
    v35 = (int32x4_t *)((char *)v20 + 4 * v19);
    v36 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v36 >= 7)
    {
      v43 = v36 + 1;
      v44 = (v36 + 1) & 0x3FFFFFFFFFFFFFF8;
      v37 = (int32x4_t *)((char *)v35 + 4 * v44);
      v38 = &a1->i64[v44];
      v45 = a1 + 2;
      v46 = v35 + 1;
      v47 = v44;
      do
      {
        v49 = v45[-2];
        v48 = v45[-1];
        v51 = *v45;
        v50 = v45[1];
        v45 += 4;
        v46[-1] = vuzp1q_s32(v49, v48);
        *v46 = vuzp1q_s32(v51, v50);
        v46 += 2;
        v47 -= 8;
      }
      while (v47);
      if (v43 == v44)
        goto LABEL_43;
    }
    else
    {
      v37 = v35;
      v38 = (uint64_t *)a1;
    }
    do
    {
      v52 = *v38++;
      v37->i32[0] = v52;
      v37 = (int32x4_t *)((char *)v37 + 4);
    }
    while (v38 != (uint64_t *)((char *)a1 + 8 * a2));
LABEL_43:
    v21 = v57;
    goto LABEL_44;
  }
  v19 = 0;
  v21 = 0;
  v20 = v58;
  if (a2)
    goto LABEL_34;
LABEL_44:
  LODWORD(v57) = v21 + a2;
  v39 = 4 * (v21 + a2);
  v40 = v8;
  v41 = v18;
  v42 = 4;
LABEL_45:
  v3 = mlir::DenseElementsAttr::getFromRawBuffer(v40, v41, v20, v39, v42, 1, 1);
  if (v56 != v58)
    free(v56);
  return v3;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldRankOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t ElementTypeOrSelf;
  int32x4_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v9);
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v7.i64[1] = (uint64_t)result;
  v8 = v4;
  if (result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v7.u64[1]))
    {
      mlir::Attribute::getContext((mlir::Attribute *)(v9 + 24));
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v7.u64[1]);
      v7.i64[0] = v5;
      ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v9 - 8) & 0xFFFFFFFFFFFFFFF8));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldRankOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldSizeOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t *result;
  uint64_t v4;
  _QWORD *ArgAttrsAttr;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t ElementTypeOrSelf;
  int32x4_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v13);
  result = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v11.i64[1] = (uint64_t)result;
  v12 = v4;
  if (result)
  {
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v11.u64[1]))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v11.u64[1]);
      if (!v6)
      {
LABEL_7:
        mlir::Attribute::getContext((mlir::Attribute *)(v13 + 24));
        v8 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v11.u64[1]);
        v11.i64[0] = mlir::ShapedType::getNumElements(v8, v9);
        ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v13 - 8) & 0xFFFFFFFFFFFFFFF8));
      }
      v7 = 8 * v6;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v7 -= 8;
        if (!v7)
          goto LABEL_7;
      }
    }
    return 0;
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldSizeOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldDimensionSizeOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t ArgAttrsAttr;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int32x4_t *v26;
  uint64_t v27;
  uint64_t ElementTypeOrSelf;
  _QWORD v30[2];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[32];
  void *v35;
  uint64_t v36;
  _QWORD v37[7];

  v37[6] = *MEMORY[0x1E0C80C00];
  v31 = a2;
  v3 = *(uint64_t **)(a3 + 8);
  if (!v3)
    return 0;
  v4 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(v3);
  if (!v4)
    return 0;
  v35 = v37;
  v36 = 0x600000000;
  mlir::getIntValues<long long>((uint64_t)v4, v5, (uint64_t)&v35, 1);
  v6 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v31) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v6)
    goto LABEL_12;
  v7 = *v6;
  v8 = mlir::TypeID::get<mlir::ShapedType>();
  v9 = *(unsigned int *)(v7 + 16);
  if (!(_DWORD)v9)
    goto LABEL_12;
  v10 = *(_QWORD **)(v7 + 8);
  v11 = &v10[2 * v9];
  do
  {
    v12 = v9 >> 1;
    v13 = &v10[2 * (v9 >> 1)];
    v15 = *v13;
    v14 = v13 + 2;
    v9 += ~(v9 >> 1);
    if (v15 < v8)
      v10 = v14;
    else
      v9 = v12;
  }
  while (v9);
  if (v10 != v11 && *v10 == v8)
    v16 = v10[1];
  else
LABEL_12:
    v16 = 0;
  v30[0] = v6;
  v30[1] = v16;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v30))
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v30);
    v32 = v34;
    v33 = 0x400000000;
    if ((_DWORD)v36)
    {
      v19 = ArgAttrsAttr;
      v20 = v18;
      v21 = 0;
      v22 = v35;
      v23 = 8 * v36;
      while (1)
      {
        v24 = *(_QWORD *)(v19 + 8 * ((*v22 + v20) % v20));
        if (v24 == 0x8000000000000000)
          break;
        if (v21 >= HIDWORD(v33))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, v34, v21 + 1, 8);
          v21 = v33;
        }
        *((_QWORD *)v32 + v21) = v24;
        v21 = v33 + 1;
        LODWORD(v33) = v33 + 1;
        ++v22;
        v23 -= 8;
        if (!v23)
          goto LABEL_23;
      }
      v25 = 0;
    }
    else
    {
LABEL_23:
      mlir::Attribute::getContext((mlir::Attribute *)(v31 + 24));
      v26 = (int32x4_t *)v32;
      v27 = v33;
      ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v31 - 8) & 0xFFFFFFFFFFFFFFF8));
    }
    if (v32 != v34)
      free(v32);
  }
  else
  {
    v25 = 0;
  }
  if (v35 != v37)
    free(v35);
  return v25;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldDimensionSizeOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldDynamicShapeCastOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t Input;

  v6 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v6);
  result = mlir::Value::getDefiningOp((mlir::Value *)&Input);
  if (result)
  {
    v3 = result;
    v4 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 48) + 32))(*(_QWORD *)(v3 + 48), v4)
      && (v5 = *(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v6) + 8) & 0xFFFFFFFFFFFFFFF8,
          v5 == (*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v6) + 8) & 0xFFFFFFFFFFFFFFF8)))
    {
      return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v6) | 4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldDynamicShapeCastOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldBroadcastToOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t SingleInt;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  void *v19;
  llvm::APFloatBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __n128 *v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ElementTypeOrSelf;
  _QWORD *v34;
  __n128 *ElementsAttr;
  char *v36;
  uint64_t v37;
  llvm::detail::DoubleAPFloat *v38;
  _QWORD *v39[2];
  void *__p;
  _QWORD v41[3];
  void *v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  unint64_t ArgOperands;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
    return 0;
  v5 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
  v7 = (uint64_t)v6;
  v39[0] = v5;
  v39[1] = v6;
  v8 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a3[1]);
  if (!v5 || v8 == 0)
    return 0;
  v11 = (uint64_t)v8;
  v12 = v9;
  if (mlir::ElementsAttr::getNumElements((uint64_t)v5, v7) != 1 || mlir::ElementsAttr::getNumElements(v11, v12) != 1)
    return 0;
  SingleInt = mlir::getSingleIntValue<long long>(v11, v12);
  ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39);
  v47 = v14;
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                    + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
  {
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v39);
    v47 = v15;
    v16 = *(void **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&ArgOperands)
                   + 136);
    if (v16 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      && v16 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
    {
      return 0;
    }
    mlir::ElementsAttr::getValues<llvm::APFloat>((uint64_t *)v39, (uint64_t)&ArgOperands);
    mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APFloat>>::operator[]((char *)&ArgOperands, 0, (uint64_t)&__p);
    v42 = v44;
    v43 = 0x100000000;
    llvm::SmallVectorImpl<llvm::APFloat>::assign((unsigned int *)&v42, SingleInt, (uint64_t)&__p);
    v19 = (void *)v41[0];
    v21 = llvm::APFloatBase::PPCDoubleDouble(v20);
    if (v21 == v19)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v41);
      if (v49)
        goto LABEL_47;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v41);
      if (v49)
        goto LABEL_47;
    }
    v31 = v50;
    v50 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_47:
    if (!(_BYTE)ArgOperands)
    {
      v32 = v47;
      v47 = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    }
    ArgOperands = v43;
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v39[0]);
    v34 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&ArgOperands, 1, ElementTypeOrSelf, 0);
    ElementsAttr = mlir::createElementsAttr(v34, (uint64_t)v42, v43);
    v30 = v42;
    if ((_DWORD)v43)
    {
      v36 = (char *)v42 - 24;
      v37 = 32 * v43;
      do
      {
        while (1)
        {
          v38 = (llvm::detail::DoubleAPFloat *)&v36[v37];
          if (v21 != *(void **)&v36[v37])
            break;
          llvm::detail::DoubleAPFloat::~DoubleAPFloat(v38);
          v37 -= 32;
          if (!v37)
            goto LABEL_55;
        }
        llvm::detail::IEEEFloat::~IEEEFloat(v38);
        v37 -= 32;
      }
      while (v37);
LABEL_55:
      v30 = v42;
    }
    v17 = (unint64_t)ElementsAttr & 0xFFFFFFFFFFFFFFFBLL;
    if (v30 != v44)
      goto LABEL_57;
    return v17;
  }
  mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)v39, (uint64_t)&v42);
  mlir::detail::ElementsAttrRange<mlir::detail::ElementsAttrIterator<llvm::APInt>>::operator[]((unsigned __int8 *)&v42, 0, (llvm::APInt *)&__p);
  ArgOperands = (unint64_t)&v48;
  v47 = 0x300000000;
  llvm::SmallVectorImpl<llvm::APInt>::assign((uint64_t)&ArgOperands, SingleInt, (const void **)&__p);
  if (LODWORD(v41[0]) >= 0x41 && __p)
    operator delete[](__p);
  if (!v44[8])
  {
    v22 = v45;
    v45 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (!(_BYTE)v42)
  {
    v23 = v43;
    v43 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  v42 = (void *)v47;
  v24 = mlir::getElementTypeOrSelf(v39[0]);
  v25 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)&v42, 1, v24, 0);
  v26 = mlir::createElementsAttr(v25, (_DWORD *)ArgOperands, v47);
  v27 = (uint64_t *)ArgOperands;
  if ((_DWORD)v47)
  {
    v28 = 2 * v47;
    do
    {
      if (LODWORD(v27[v28 - 1]) >= 0x41)
      {
        v29 = (void *)v27[v28 - 2];
        if (v29)
          operator delete[](v29);
      }
      v28 -= 2;
    }
    while (v28 * 8);
    v27 = (uint64_t *)ArgOperands;
  }
  v17 = (unint64_t)v26 & 0xFFFFFFFFFFFFFFFBLL;
  if (v27 != &v48)
  {
    v30 = v27;
LABEL_57:
    free(v30);
  }
  return v17;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldBroadcastToOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldBroadcastGradientArgsOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v3;
  uint64_t Filter;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *ArgAttrsAttr;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t *v15;
  uint64_t v16;
  uint64_t ElementTypeOrSelf;
  unint64_t v18;
  void *__p;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v24);
  v22 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
  v23 = v3;
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v24);
  v5 = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Filter + 8) & 0xFFFFFFFFFFFFFFF8));
  if (!v22)
    return 0;
  v7 = (uint64_t)v5;
  v8 = v6;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v22))
    return 0;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v22);
  if (v10)
  {
    v11 = 8 * v10;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v11 -= 8;
      if (!v11)
        goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  if (!v22 || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v22))
    return 0;
  v12 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v22);
  if (v13)
  {
    v14 = 8 * v13;
    while (*v12 != 0x8000000000000000)
    {
      ++v12;
      v14 -= 8;
      if (!v14)
        goto LABEL_13;
    }
    return 0;
  }
LABEL_13:
  mlir::Attribute::getContext((mlir::Attribute *)(v24 + 24));
  mlir::mps::getBroadcastGradientArgs((uint64_t)v22, v23, v7, v8, (char **)&__p);
  v15 = (int32x4_t *)__p;
  v16 = (v21 - (_BYTE *)__p) >> 3;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v24 - 8) & 0xFFFFFFFFFFFFFFF8));
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  return v18;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldBroadcastGradientArgsOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReductionProdOp>::externalFold(uint64_t a1, uint64_t a2, _QWORD **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *ArgAttrsAttr;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t ElementTypeOrSelf;
  uint64_t v20;
  unsigned int Width;
  uint64_t Input;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *Type;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t *v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  void *v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  void *__p;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  void *__b;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v101 = a2;
  v95 = (_QWORD *)a2;
  if (!mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v95))
    goto LABEL_19;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v95) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_11;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_11;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_11:
    v14 = 0;
  __b = v4;
  v103 = v14;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__b))
    goto LABEL_19;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__b);
  if (!v16)
    goto LABEL_19;
  v17 = 8 * v16;
  while (*ArgAttrsAttr)
  {
    ++ArgAttrsAttr;
    v17 -= 8;
    if (!v17)
      goto LABEL_19;
  }
  v18 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v95) | 4;
  if (v18 <= 7)
  {
LABEL_19:
    ElementTypeOrSelf = mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(v101 - 8) & 0xFFFFFFFFFFFFFFF8));
    if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
      v20 = ElementTypeOrSelf;
    else
      v20 = 0;
    v100 = v20;
    v18 = 0;
    if (mlir::mps::ReverseOp::getAxes((mlir::mps::ReverseOp *)&v101) || !v100)
      return v18;
    Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v100);
    v99 = Width;
    if (Width > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 1, 0);
    else
      __p = (void *)(Width != 0);
    Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v101);
    __b = llvm::DefaultDoCastIfPossible<mlir::ShapedType,mlir::Type const,llvm::CastInfo<mlir::ShapedType,mlir::Type const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)(Input + 8) & 0xFFFFFFFFFFFFFFF8));
    v103 = v23;
    if (__b)
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&__b))
      {
        v18 = 0;
LABEL_127:
        if (v99 >= 0x41 && __p)
          operator delete[](__p);
        return v18;
      }
      v24 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&__b);
      if (v25)
      {
        v26 = 8 * v25;
        while (*v24)
        {
          ++v24;
          v26 -= 8;
          if (!v26)
            goto LABEL_33;
        }
        v74 = (uint64_t *)mlir::RankedTensorType::get(0, 0, v100, 0);
        v75 = (uint64_t)v74;
        if (!v74)
          goto LABEL_114;
        v76 = *v74;
        v77 = mlir::TypeID::get<mlir::ShapedType>();
        v78 = *(unsigned int *)(v76 + 16);
        if (!(_DWORD)v78)
          goto LABEL_114;
        v79 = *(_QWORD **)(v76 + 8);
        v80 = &v79[2 * v78];
        do
        {
          v81 = v78 >> 1;
          v82 = &v79[2 * (v78 >> 1)];
          v84 = *v82;
          v83 = v82 + 2;
          v78 += ~(v78 >> 1);
          if (v84 < v77)
            v79 = v83;
          else
            v78 = v81;
        }
        while (v78);
        if (v79 != v80 && *v79 == v77)
          v85 = v79[1];
        else
LABEL_114:
          v85 = 0;
        v18 = mlir::DenseElementsAttr::get(v75, v85, (llvm::APInt *)&__p, 1) & 0xFFFFFFFFFFFFFFFBLL;
        goto LABEL_127;
      }
    }
LABEL_33:
    v27 = *a3;
    if (*a3)
    {
      v28 = *v27;
      v29 = mlir::TypeID::get<mlir::ElementsAttr>();
      v30 = *(unsigned int *)(v28 + 16);
      if (!(_DWORD)v30)
        goto LABEL_42;
      v31 = *(_QWORD **)(v28 + 8);
      v32 = &v31[2 * v30];
      do
      {
        v33 = v30 >> 1;
        v34 = &v31[2 * (v30 >> 1)];
        v36 = *v34;
        v35 = v34 + 2;
        v30 += ~(v30 >> 1);
        if (v36 < v29)
          v31 = v35;
        else
          v30 = v33;
      }
      while (v30);
      if (v31 != v32 && *v31 == v29)
        v37 = v31[1];
      else
LABEL_42:
        v37 = 0;
      v95 = v27;
      v96 = v37;
      mlir::ElementsAttr::getValues<llvm::APInt>((uint64_t *)&v95, (uint64_t)&__b);
      LOWORD(v95) = (_WORD)__b;
      if ((_BYTE)__b)
        v96 = v103;
      else
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v103 + 16))(&v96);
      v38 = v104;
      v97 = v104;
      LOWORD(v92) = v105;
      if ((_BYTE)v105)
      {
        v93 = v106;
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v106 + 16))(&v93);
        v38 = v97;
      }
      v39 = v107;
      v94 = v107;
      while (v38 != v39)
      {
        if (BYTE1(v95))
          v40 = 0;
        else
          v40 = v38;
        if ((_BYTE)v95)
        {
          v41 = v96 + 16 * v40;
          v91 = *(_DWORD *)(v41 + 8);
          if (v91 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v90, (const void **)v41);
          else
            v90 = *(void **)v41;
        }
        else
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v96 + 24))(&v90);
        }
        llvm::APInt::operator*=((uint64_t)&__p, (const unint64_t **)&v90);
        if (v91 >= 0x41)
        {
          if (v90)
            operator delete[](v90);
        }
        v38 = ++v97;
        v39 = v94;
      }
      if (!(_BYTE)v92)
      {
        v42 = v93;
        v93 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
      if (!(_BYTE)v95)
      {
        v43 = v96;
        v96 = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      }
      if (!(_BYTE)v105)
      {
        v44 = v106;
        v106 = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      }
      if (!(_BYTE)__b)
      {
        v45 = v103;
        v103 = 0;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      }
      __b = &v104;
      v103 = 0x400000000;
      if (!mlir::pdl_interp::CreateOperationOp::getInferredResultTypes((mlir::pdl_interp::CreateOperationOp *)&v101))
      {
        v73 = (char *)__b;
        LODWORD(v70) = v103;
        goto LABEL_125;
      }
      v46 = *a3;
      if (!v46)
        goto LABEL_90;
      v47 = *v46;
      v48 = mlir::TypeID::get<mlir::ElementsAttr>();
      v49 = *(unsigned int *)(v47 + 16);
      if (!(_DWORD)v49)
        goto LABEL_90;
      v50 = *(_QWORD **)(v47 + 8);
      v51 = &v50[2 * v49];
      do
      {
        v52 = v49 >> 1;
        v53 = &v50[2 * (v49 >> 1)];
        v55 = *v53;
        v54 = v53 + 2;
        v49 += ~(v49 >> 1);
        if (v55 < v48)
          v50 = v54;
        else
          v49 = v52;
      }
      while (v49);
      if (v50 != v51 && *v50 == v48)
        v56 = v50[1];
      else
LABEL_90:
        v56 = 0;
      v92 = v46;
      v93 = v56;
      Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v92);
      v58 = (uint64_t)Type;
      if (!Type)
        goto LABEL_100;
      v59 = *Type;
      v60 = mlir::TypeID::get<mlir::ShapedType>();
      v61 = *(unsigned int *)(v59 + 16);
      if (!(_DWORD)v61)
        goto LABEL_100;
      v62 = *(_QWORD **)(v59 + 8);
      v63 = &v62[2 * v61];
      do
      {
        v64 = v61 >> 1;
        v65 = &v62[2 * (v61 >> 1)];
        v67 = *v65;
        v66 = v65 + 2;
        v61 += ~(v61 >> 1);
        if (v67 < v60)
          v62 = v66;
        else
          v61 = v64;
      }
      while (v61);
      if (v62 != v63 && *v62 == v60)
        v68 = v62[1];
      else
LABEL_100:
        v68 = 0;
      v95 = (_QWORD *)v58;
      v96 = v68;
      mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v95);
      v70 = v69;
      if (v69 <= HIDWORD(v103))
      {
        v73 = (char *)__b;
        v86 = v103;
        if (v103 >= v69)
          v87 = v69;
        else
          v87 = v103;
        if (v87)
          memset_pattern16(__b, &unk_181233190, 8 * v87);
        v72 = v70 - v86;
        if (v70 <= v86)
          goto LABEL_124;
        v71 = &v73[8 * v86];
      }
      else
      {
        LODWORD(v103) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__b, &v104, v69, 8);
        v71 = (char *)__b;
        v72 = v70;
        v73 = (char *)__b;
      }
      memset_pattern16(v71, &unk_181233190, 8 * v72);
LABEL_124:
      LODWORD(v103) = v70;
LABEL_125:
      v88 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v73, v70, v100, 0);
      v18 = (unint64_t)mlir::createElementsAttr(v88, &__p, 1) & 0xFFFFFFFFFFFFFFFBLL;
      if (__b != &v104)
        free(__b);
      goto LABEL_127;
    }
    if (v99 >= 0x41 && __p)
      operator delete[](__p);
    return 0;
  }
  return v18;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldReductionProdOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldConv2DOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  int StorageType;
  int WeightsLayout;
  unint64_t v39;
  _QWORD *ArgAttrsAttr;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t ElementTypeOrSelf;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  mlir::Float32Type *Context;
  mlir::MLIRContext *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *Strides;
  uint64_t *InputAttributeNames;
  uint64_t *Rewriter;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t *v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t *v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t Input;
  uint64_t Filter;
  unint64_t v110;
  int PaddingStyle;
  void *Groups;
  uint64_t *v113;
  _OWORD v114[5];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  void *v119[10];
  void *v120[10];
  void *v121[10];
  __int128 v122;
  char v123;
  BOOL v124;
  uint64_t OperandRange;
  _QWORD *v126[2];
  _QWORD *v127[2];
  uint64_t v128[2];
  uint64_t v129;
  void *v130[2];
  _BYTE v131[16];
  void *v132[2];
  _BYTE v133[16];
  void *v134[2];
  _BYTE v135[32];
  void *v136[2];
  _QWORD v137[6];

  v137[4] = *MEMORY[0x1E0C80C00];
  v129 = a2;
  v4 = (uint64_t *)(*(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v129) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v4)
    goto LABEL_10;
  v5 = *v4;
  v6 = mlir::TypeID::get<mlir::ShapedType>();
  v7 = *(unsigned int *)(v5 + 16);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *(_QWORD **)(v5 + 8);
  v9 = &v8[2 * v7];
  do
  {
    v10 = v7 >> 1;
    v11 = &v8[2 * (v7 >> 1)];
    v13 = *v11;
    v12 = v11 + 2;
    v7 += ~(v7 >> 1);
    if (v13 < v6)
      v8 = v12;
    else
      v7 = v10;
  }
  while (v7);
  if (v8 != v9 && *v8 == v6)
    v14 = v8[1];
  else
LABEL_10:
    v14 = 0;
  v128[0] = (uint64_t)v4;
  v128[1] = v14;
  v15 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v129) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v15)
    goto LABEL_20;
  v16 = *v15;
  v17 = mlir::TypeID::get<mlir::ShapedType>();
  v18 = *(unsigned int *)(v16 + 16);
  if (!(_DWORD)v18)
    goto LABEL_20;
  v19 = *(_QWORD **)(v16 + 8);
  v20 = &v19[2 * v18];
  do
  {
    v21 = v18 >> 1;
    v22 = &v19[2 * (v18 >> 1)];
    v24 = *v22;
    v23 = v22 + 2;
    v18 += ~(v18 >> 1);
    if (v24 < v17)
      v19 = v23;
    else
      v18 = v21;
  }
  while (v18);
  if (v19 != v20 && *v19 == v17)
    v25 = (_QWORD *)v19[1];
  else
LABEL_20:
    v25 = 0;
  v127[0] = v15;
  v127[1] = v25;
  v26 = (_QWORD *)(*(_QWORD *)(mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v129) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (!v26)
    goto LABEL_30;
  v27 = *v26;
  v28 = mlir::TypeID::get<mlir::ShapedType>();
  v29 = *(unsigned int *)(v27 + 16);
  if (!(_DWORD)v29)
    goto LABEL_30;
  v30 = *(_QWORD **)(v27 + 8);
  v31 = &v30[2 * v29];
  do
  {
    v32 = v29 >> 1;
    v33 = &v30[2 * (v29 >> 1)];
    v35 = *v33;
    v34 = v33 + 2;
    v29 += ~(v29 >> 1);
    if (v35 < v28)
      v30 = v34;
    else
      v29 = v32;
  }
  while (v29);
  if (v30 != v31 && *v30 == v28)
    v36 = (_QWORD *)v30[1];
  else
LABEL_30:
    v36 = 0;
  v126[0] = v26;
  v126[1] = v36;
  StorageType = mlir::mps::MaterializeSparseTensorOp::getStorageType((mlir::mps::MaterializeSparseTensorOp *)&v129);
  WeightsLayout = mlir::mps::Conv3DOp::getWeightsLayout((mlir::mps::Conv3DOp *)&v129);
  v39 = 0;
  if (StorageType || WeightsLayout != 2)
    return v39;
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v127))
    return 0;
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v127);
  if (v41)
  {
    v42 = 8 * v41;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v42 -= 8;
      if (!v42)
        goto LABEL_38;
    }
    return 0;
  }
LABEL_38:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v126))
    return 0;
  v43 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v126);
  if (v44)
  {
    v45 = 8 * v44;
    while (*v43 != 0x8000000000000000)
    {
      ++v43;
      v45 -= 8;
      if (!v45)
        goto LABEL_43;
    }
    return 0;
  }
LABEL_43:
  if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v128))
    return 0;
  v46 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v128);
  if (v47)
  {
    v48 = 8 * v47;
    while (*v46 != 0x8000000000000000)
    {
      ++v46;
      v48 -= 8;
      if (!v48)
        goto LABEL_48;
    }
    return 0;
  }
LABEL_48:
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v128);
  if (!mlir::Type::isF32((mlir::Type *)&OperandRange)
    && !mlir::Type::isF16((mlir::Type *)&OperandRange)
    && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
    return 0;
  }
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(v127[0]);
  v50 = mlir::getElementTypeOrSelf(v126[0]);
  v124 = ElementTypeOrSelf != v50;
  if (!v51)
    return 0;
  v52 = v51;
  if (!v53)
    return 0;
  v54 = v53;
  v55 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v127);
  v57 = v56;
  LOBYTE(v122) = 0;
  v123 = 0;
  v113 = (uint64_t *)v55;
  if (ElementTypeOrSelf == v50)
  {
    v60 = OperandRange;
  }
  else
  {
    Context = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)v128);
    v60 = mlir::Float32Type::get(Context, v59);
  }
  v62 = mlir::ShapedType::cloneWith(v128, &v122, v60);
  v64 = v63;
  mlir::mps::CPUNDArray::CPUNDArray(v121, v52);
  mlir::mps::CPUNDArray::CPUNDArray(v120, v54);
  mlir::mps::CPUNDArray::CPUNDArray(v119, v62, v64, 0);
  Strides = (uint64_t *)mlir::mps::Conv3DOp::getStrides((mlir::mps::Conv3DOp *)&v129);
  InputAttributeNames = (uint64_t *)mlir::pdl_interp::CreateOperationOp::getInputAttributeNames((mlir::pdl_interp::CreateOperationOp *)&v129);
  Rewriter = (uint64_t *)mlir::pdl_interp::RecordMatchOp::getRewriter((mlir::pdl_interp::RecordMatchOp *)&v129);
  Groups = mlir::mps::Conv3DOp::getGroups((mlir::mps::Conv3DOp *)&v129);
  PaddingStyle = mlir::mps::Conv3DOp::getPaddingStyle((mlir::mps::Conv3DOp *)&v129);
  v136[0] = v137;
  v136[1] = (void *)0x400000000;
  v134[0] = v135;
  v134[1] = (void *)0x400000000;
  v132[0] = v133;
  v132[1] = (void *)0x200000000;
  v130[0] = v131;
  v130[1] = (void *)0x200000000;
  v68 = *(_QWORD *)(v129 + 24);
  if (!Strides)
    goto LABEL_70;
  v69 = *Strides;
  v70 = mlir::TypeID::get<mlir::ElementsAttr>();
  v71 = *(unsigned int *)(v69 + 16);
  if (!(_DWORD)v71)
    goto LABEL_70;
  v72 = *(_QWORD **)(v69 + 8);
  v73 = &v72[2 * v71];
  do
  {
    v74 = v71 >> 1;
    v75 = &v72[2 * (v71 >> 1)];
    v77 = *v75;
    v76 = v75 + 2;
    v71 += ~(v71 >> 1);
    if (v77 < v70)
      v72 = v76;
    else
      v71 = v74;
  }
  while (v71);
  if (v72 != v73 && *v72 == v70)
  {
    v78 = v72[1];
    if (!InputAttributeNames)
      goto LABEL_79;
  }
  else
  {
LABEL_70:
    v78 = 0;
    if (!InputAttributeNames)
      goto LABEL_79;
  }
  v79 = *InputAttributeNames;
  v80 = mlir::TypeID::get<mlir::ElementsAttr>();
  v81 = *(unsigned int *)(v79 + 16);
  if (!(_DWORD)v81)
    goto LABEL_79;
  v82 = *(_QWORD **)(v79 + 8);
  v83 = &v82[2 * v81];
  do
  {
    v84 = v81 >> 1;
    v85 = &v82[2 * (v81 >> 1)];
    v87 = *v85;
    v86 = v85 + 2;
    v81 += ~(v81 >> 1);
    if (v87 < v80)
      v82 = v86;
    else
      v81 = v84;
  }
  while (v81);
  if (v82 == v83 || *v82 != v80)
  {
LABEL_79:
    v88 = 0;
    if (Rewriter)
      goto LABEL_80;
    goto LABEL_94;
  }
  v88 = v82[1];
  if (Rewriter)
  {
LABEL_80:
    v89 = (uint64_t)Rewriter;
    v90 = *Rewriter;
    v91 = mlir::TypeID::get<mlir::ElementsAttr>();
    v92 = *(unsigned int *)(v90 + 16);
    if ((_DWORD)v92)
    {
      v93 = *(_QWORD **)(v90 + 8);
      v94 = &v93[2 * v92];
      do
      {
        v95 = v92 >> 1;
        v96 = &v93[2 * (v92 >> 1)];
        v98 = *v96;
        v97 = v96 + 2;
        v92 += ~(v92 >> 1);
        if (v98 < v91)
          v93 = v97;
        else
          v92 = v95;
      }
      while (v92);
      v99 = v113;
      if (v93 == v94)
      {
        v100 = 0;
      }
      else if (*v93 == v91)
      {
        v100 = v93[1];
      }
      else
      {
        v100 = 0;
      }
    }
    else
    {
      v100 = 0;
      v99 = v113;
    }
    goto LABEL_96;
  }
LABEL_94:
  v89 = 0;
  v100 = 0;
  v99 = v113;
  if (!mlir::mps::inferConv2DParams(v68, 1, v99, v57, (uint64_t)Strides, v78, (uint64_t)InputAttributeNames, v88, v89, v100, 0, (uint64_t)v136, (unsigned int *)v134, (uint64_t)v132, (uint64_t)v130))goto LABEL_99;
LABEL_96:
  v101 = *((_QWORD *)v134[0] + 3);
  v103 = *(_QWORD *)v134[0];
  v102 = *((_QWORD *)v134[0] + 1);
  v105 = *(_QWORD *)v132[0];
  v104 = *((_QWORD *)v132[0] + 1);
  v107 = *(_QWORD *)v130[0];
  v106 = *((_QWORD *)v130[0] + 1);
  v118 = 0;
  v116 = 0u;
  v117 = 0u;
  v115 = 0u;
  memset(v114, 0, sizeof(v114));
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v129);
  Filter = mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v129);
  mlir::mps::buildConv2DDescriptor(Input, Filter, (uint64_t)Groups, v104, v105, v106, v107, (uint64_t)v114, v101, v103, v102, PaddingStyle, 0, 2, 0, 0, 0, 0);
  if (mlir::mps::doBNNSConv2D((const void **)v121, (uint64_t **)v120, v119, (unint64_t)Groups, v106, v107, v104, v105, 0, 0, *((unint64_t *)&v116 + 1), v117, *((unint64_t *)&v115 + 1), v116, v110))
  {
    v39 = (unint64_t)mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v119, 0, 0) & 0xFFFFFFFFFFFFFFFBLL;
  }
  else
  {
LABEL_99:
    v39 = 0;
  }
  if (v130[0] != v131)
    free(v130[0]);
  if (v132[0] != v133)
    free(v132[0]);
  if (v134[0] != v135)
    free(v134[0]);
  if (v136[0] != v137)
    free(v136[0]);
  mlir::mps::CPUNDArray::~CPUNDArray(v119);
  mlir::mps::CPUNDArray::~CPUNDArray(v120);
  mlir::mps::CPUNDArray::~CPUNDArray(v121);
  return v39;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldConv2DOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t *mlir::mps::`anonymous namespace'::FoldConv2DOp::externalFold(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>)const::{lambda(mlir::Attribute)#1}::operator()(_BYTE *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *Type;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  mlir::Float32Type *Context;
  mlir::MLIRContext *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *ElementsAttr;
  void *__p;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  _BYTE v40[32];
  void *v41[10];
  void *v42[10];
  __int128 v43;
  char v44;
  uint64_t OperandRange;
  uint64_t v46[2];
  uint64_t *v47;
  uint64_t v48;

  if (!a2)
  {
    v47 = 0;
    v48 = 0;
    return 0;
  }
  v47 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(a2);
  v48 = v3;
  if (!v47)
    return 0;
  Type = (uint64_t *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v47);
  v5 = (uint64_t)Type;
  if (!Type)
    goto LABEL_14;
  v6 = *Type;
  v7 = mlir::TypeID::get<mlir::ShapedType>();
  v8 = *(unsigned int *)(v6 + 16);
  if (!(_DWORD)v8)
    goto LABEL_14;
  v9 = *(_QWORD **)(v6 + 8);
  v10 = &v9[2 * v8];
  do
  {
    v11 = v8 >> 1;
    v12 = &v9[2 * (v8 >> 1)];
    v14 = *v12;
    v13 = v12 + 2;
    v8 += ~(v8 >> 1);
    if (v14 < v7)
      v9 = v13;
    else
      v8 = v11;
  }
  while (v8);
  if (v9 != v10 && *v9 == v7)
    v15 = v9[1];
  else
LABEL_14:
    v15 = 0;
  v46[0] = v5;
  v46[1] = v15;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v46);
  if (mlir::Type::isF32((mlir::Type *)&OperandRange) || !*a1)
    return v47;
  if (!mlir::Type::isF16((mlir::Type *)&OperandRange) && !mlir::Type::isBF16((mlir::Type *)&OperandRange))
    return 0;
  LOBYTE(v43) = 0;
  v44 = 0;
  Context = (mlir::Float32Type *)mlir::Attribute::getContext((mlir::Attribute *)v46);
  v18 = mlir::Float32Type::get(Context, v17);
  v19 = mlir::ShapedType::cloneWith(v46, &v43, v18);
  v21 = v20;
  mlir::mps::CPUNDArray::CPUNDArray(v42, v47);
  mlir::mps::CPUNDArray::CPUNDArray(v41, v19, v21, 0);
  mlir::mps::CPUNDArrayArithmeticUnaryKernel::CPUNDArrayArithmeticUnaryKernel((uint64_t)v40, 13, 0.0);
  v22 = operator new(8uLL);
  v37 = v22;
  *v22 = v42;
  v38 = v22 + 1;
  v39 = v22 + 1;
  v23 = operator new(8uLL);
  v34 = v23;
  *v23 = v41;
  v35 = v23 + 1;
  v36 = v23 + 1;
  v24 = operator new(8uLL);
  v31 = v24;
  *v24 = 0;
  v32 = v24 + 1;
  v33 = v24 + 1;
  v25 = operator new(8uLL);
  __p = v25;
  *v25 = 0;
  v29 = v25 + 1;
  v30 = v25 + 1;
  mlir::mps::CPUNDArrayKernel::cpuTilingEngine((uint64_t)v40, (uint64_t *)&v37, (uint64_t **)&v34, (uint64_t)&v31, (uint64_t)&__p, 0, (uint64_t)v42[2], (uint64_t)v40);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  ElementsAttr = mlir::mps::CPUNDArray::getElementsAttr((mlir::mps::CPUNDArray *)v41, 0, 0);
  mlir::mps::CPUNDArray::~CPUNDArray(v41);
  mlir::mps::CPUNDArray::~CPUNDArray(v42);
  return ElementsAttr;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldTypeConstraintOp>::externalFold(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t Type;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  unint64_t v11[2];
  unint64_t v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v7 = *(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v8) + 8) & 0xFFFFFFFFFFFFFFF8;
  mlir::ValueRange::ValueRange(v12, (uint64_t)&v7, 1uLL);
  Type = mlir::pdl_interp::CheckTypeOp::getType((mlir::pdl_interp::CheckTypeOp *)&v8);
  mlir::ValueRange::ValueRange(v11, (uint64_t)&Type, 1uLL);
  v9[0] = off_1E0DFB6F0;
  v10 = v9;
  v2 = mlir::mps::areMoreSpecializedTypes(v12[0], v12[1], v11[0], v11[1], (uint64_t)v9);
  v3 = v10;
  if (v10 == v9)
  {
    v4 = 4;
    v3 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v2)
    return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v8) | 4;
  else
    return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldTypeConstraintOp>::externalFoldMultipleResults()
{
  return 0;
}

_QWORD *std::__function::__func<mlir::mps::$_3,std::allocator<mlir::mps::$_3>,BOOL ()(mlir::Type,mlir::Type)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0DFB6F0;
  return result;
}

void std::__function::__func<mlir::mps::$_3,std::allocator<mlir::mps::$_3>,BOOL ()(mlir::Type,mlir::Type)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0DFB6F0;
}

BOOL std::__function::__func<mlir::mps::$_3,std::allocator<mlir::mps::$_3>,BOOL ()(mlir::Type,mlir::Type)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldRealPartOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v4;

  v4 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v4);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    return 0;
  else
    return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v4) | 4;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldRealPartOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldImaginaryPartOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *ArgAttrsAttr;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;

  v20 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v20);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(Input) + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v3 = (uint64_t *)(*(_QWORD *)(mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v20) + 8) & 0xFFFFFFFFFFFFFFF8);
    if (!v3)
      goto LABEL_11;
    v4 = *v3;
    v5 = mlir::TypeID::get<mlir::ShapedType>();
    v6 = *(unsigned int *)(v4 + 16);
    if (!(_DWORD)v6)
      goto LABEL_11;
    v7 = *(_QWORD **)(v4 + 8);
    v8 = &v7[2 * v6];
    do
    {
      v9 = v6 >> 1;
      v10 = &v7[2 * (v6 >> 1)];
      v12 = *v10;
      v11 = v10 + 2;
      v6 += ~(v6 >> 1);
      if (v12 < v5)
        v7 = v11;
      else
        v6 = v9;
    }
    while (v6);
    if (v7 != v8 && *v7 == v5)
      v13 = v7[1];
    else
LABEL_11:
      v13 = 0;
    v19[0] = v3;
    v19[1] = v13;
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v19))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
      if (!v15)
      {
LABEL_17:
        v17 = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v20);
        return mlir::mps::getConstantAttr<int>((uint64_t *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8), 0) & 0xFFFFFFFFFFFFFFFBLL;
      }
      v16 = 8 * v15;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v16 -= 8;
        if (!v16)
          goto LABEL_17;
      }
    }
  }
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldImaginaryPartOp>::externalFoldMultipleResults()
{
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldConjugateOp>::externalFold(uint64_t a1, uint64_t a2)
{
  uint64_t Input;
  uint64_t v4;

  v4 = a2;
  Input = mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v4);
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf(Input) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    return 0;
  else
    return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v4) | 4;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldConjugateOp>::externalFoldMultipleResults()
{
  return 0;
}

unint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldNonZeroOp>::externalFold(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t Context;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v21[2];
  unint64_t v22;
  _QWORD v23[2];
  void *v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*a3)
  {
    v4 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible(*a3);
    if (v4)
    {
      mlir::mps::CPUNDArray::CPUNDArray(v21, v4);
      mlir::mps::computeNonZeroIndices((mlir::mps *)v21, (uint64_t)&v24);
      if (!v27)
      {
        v19 = 0;
LABEL_19:
        mlir::mps::CPUNDArray::~CPUNDArray(v21);
        return v19;
      }
      v23[0] = v25 / v22;
      v23[1] = v22;
      Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
      v6 = mlir::IntegerType::get(Context, 0x20u, 1u);
      v7 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v23, 2, v6, 0);
      v8 = v7;
      if (!v7)
        goto LABEL_13;
      v9 = *v7;
      v10 = mlir::TypeID::get<mlir::ShapedType>();
      v11 = *(unsigned int *)(v9 + 16);
      if (!(_DWORD)v11)
        goto LABEL_13;
      v12 = *(_QWORD **)(v9 + 8);
      v13 = &v12[2 * v11];
      do
      {
        v14 = v11 >> 1;
        v15 = &v12[2 * (v11 >> 1)];
        v17 = *v15;
        v16 = v15 + 2;
        v11 += ~(v11 >> 1);
        if (v17 < v10)
          v12 = v16;
        else
          v11 = v14;
      }
      while (v11);
      if (v12 != v13 && *v12 == v10)
      {
        v18 = v12[1];
        if (v27)
          goto LABEL_14;
      }
      else
      {
LABEL_13:
        v18 = 0;
        if (v27)
        {
LABEL_14:
          v19 = mlir::DenseElementsAttr::getFromRawBuffer(v8, v18, v24, 4 * v25, 4, 1, 1) & 0xFFFFFFFFFFFFFFFBLL;
          if (v27 && v24 != &v26)
            free(v24);
          goto LABEL_19;
        }
      }
      std::__throw_bad_optional_access[abi:nn180100]();
    }
  }
  return 0;
}

uint64_t mlir::detail::ExternalFoldInterfaceInterfaceTraits::FallbackModel<mlir::mps::`anonymous namespace'::FoldNonZeroOp>::externalFoldMultipleResults()
{
  return 0;
}

void std::vector<long long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      abort();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

unint64_t mlir::getANENextSupportedInterleaveValue(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = 4;
  if ((unint64_t)this > 4)
    v1 = 8;
  v2 = this & 0xFFFFFFFFFFFFFF00;
  if (this > 2)
    v2 = 0;
  else
    v1 = this;
  if (this <= 8)
  {
    v3 = v2;
  }
  else
  {
    v1 = 0;
    v3 = 0;
  }
  return v3 | v1;
}

uint64_t mlir::legalizeA12(mlir::SymbolRefAttr *InterfaceFor, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  mlir::SymbolRefAttr *v6;
  uint64_t isPublic;
  uint64_t v8;
  uint64_t Inputs;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *Results;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  BOOL v29;
  char v30;
  llvm *v31;
  llvm *v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  void *v35;
  const char *v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  __int128 *v41;
  uint64_t v43;
  mlir::GenericProgramPoint *DefiningOp;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t Loc;
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  mlir::GenericProgramPoint **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  mlir::GenericProgramPoint **i;
  mlir::GenericProgramPoint *v78;
  uint64_t v79;
  mlir::Operation *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  mlir::GenericProgramPoint *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 *v97;
  mlir::GenericProgramPoint **v99;
  uint64_t v100;
  int v101;
  void *v102;
  mlir::GenericProgramPoint *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  _QWORD *v123;
  mlir::GenericProgramPoint **v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  mlir::MLIRContext *Context;
  uint64_t v137;
  char *v139;
  char *v142;
  mlir::GenericProgramPoint **v143;
  uint64_t v144;
  unint64_t v145;
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v150[2];
  uint64_t v151[2];
  mlir::GenericProgramPoint *v152;
  mlir::SymbolRefAttr *v153[2];
  unint64_t v154[2];
  unint64_t v155[2];
  void *v156;
  uint64_t v157;
  _BYTE v158[32];
  void *v159;
  uint64_t v160;
  _BYTE v161[32];
  void *v162;
  uint64_t v163;
  _BYTE v164[32];
  __int128 v165;
  _QWORD v166[4];
  void *v167;
  uint64_t v168;
  _BYTE v169[96];
  char *v170;
  uint64_t v171;
  _QWORD v172[14];

  v6 = InterfaceFor;
  v172[12] = *MEMORY[0x1E0C80C00];
  if (InterfaceFor)
    InterfaceFor = (mlir::SymbolRefAttr *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)InterfaceFor);
  v153[0] = v6;
  v153[1] = InterfaceFor;
  isPublic = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  v8 = a4[1];
  v170 = (char *)v172;
  v171 = 0x400000000;
  v167 = v169;
  v168 = 0x400000000;
  *(_QWORD *)&v165 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v153);
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v165);
  v11 = *(_QWORD *)(isPublic + 48);
  v12 = *(_QWORD *)(isPublic + 56) - v11;
  if (v10 && v12)
  {
    v13 = (_QWORD *)Inputs;
    v14 = 8 * (v12 >> 3) - 8;
    v15 = 8 * v10 - 8;
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)v11 + 8) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v165 = *(_QWORD *)v11;
      *((_QWORD *)&v165 + 1) = v16;
      v166[0] = *v13;
      if (v171 >= HIDWORD(v171))
      {
        if (!v15)
          break;
      }
      else
      {
        v17 = &v170[24 * v171];
        *(_OWORD *)v17 = v165;
        *((_QWORD *)v17 + 2) = v166[0];
        LODWORD(v171) = v171 + 1;
        if (!v15)
          break;
      }
      ++v13;
      v11 += 8;
      v18 = v14;
      v14 -= 8;
      v15 -= 8;
    }
    while (v18);
  }
  *(_QWORD *)&v165 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v153);
  Results = (_QWORD *)mlir::FunctionType::getResults((mlir::FunctionType *)&v165);
  v21 = v20;
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)isPublic);
  if ((*(_BYTE *)(v22 + 46) & 0x80) != 0)
  {
    if (v21)
    {
      v23 = *(unsigned int *)(v22 + 68);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v22 + 72) + 24;
        v25 = v23 - 1;
        v26 = 8 * v21 - 8;
        do
        {
          v27 = *(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v165 = *(_QWORD *)v24;
          *((_QWORD *)&v165 + 1) = v27;
          v166[0] = *Results;
          if (v168 >= HIDWORD(v168))
          {
          }
          else
          {
            v28 = (char *)v167 + 24 * v168;
            *(_OWORD *)v28 = v165;
            *((_QWORD *)v28 + 2) = v166[0];
            LODWORD(v168) = v168 + 1;
          }
          v29 = v25-- != 0;
          v30 = v29;
          if (!v26)
            break;
          ++Results;
          v24 += 32;
          v26 -= 8;
        }
        while ((v30 & 1) != 0);
      }
    }
  }
  if (!(_BYTE)v31)
  {
    v34 = (llvm::raw_ostream *)llvm::errs(v31);
    v35 = (void *)*((_QWORD *)v34 + 4);
    if (*((_QWORD *)v34 + 3) - (_QWORD)v35 <= 0x1DuLL)
    {
      v36 = "checkAndCollectANEArgs failed\n";
      v37 = 30;
LABEL_32:
      llvm::raw_ostream::write(v34, v36, v37);
      v33 = 0;
      goto LABEL_152;
    }
    v33 = 0;
    qmemcpy(v35, "checkAndCollectANEArgs failed\n", 30);
    v137 = *((_QWORD *)v34 + 4) + 30;
LABEL_151:
    *((_QWORD *)v34 + 4) = v137;
    goto LABEL_152;
  }
  if (!(_BYTE)v32)
  {
    v34 = (llvm::raw_ostream *)llvm::errs(v32);
    v38 = (void *)*((_QWORD *)v34 + 4);
    if (*((_QWORD *)v34 + 3) - (_QWORD)v38 <= 0x20uLL)
    {
      v36 = "checkAndCollectANEResults failed\n";
      v37 = 33;
      goto LABEL_32;
    }
    v33 = 0;
    qmemcpy(v38, "checkAndCollectANEResults failed\n", 33);
    v137 = *((_QWORD *)v34 + 4) + 33;
    goto LABEL_151;
  }
  if (!(v171 | v168))
  {
    v33 = mlir::minimalLegalize((uint64_t)v153[0], a2, a3, (uint64_t *)a5);
    goto LABEL_152;
  }
  if ((_DWORD)v171)
  {
    v39 = 0;
    v40 = v170;
    v142 = &v170[24 * v171];
    v41 = (__int128 *)(v8 + 16);
    do
    {
      if (*((_QWORD *)v40 + 1) != *((_QWORD *)v40 + 2) && a3 != 0)
      {
        v43 = a2;
        do
        {
          v146 = *v41;
          v162 = *(void **)(*(_QWORD *)(*(_QWORD *)v43 + 72) + 32 * v39 + 24);
          *(_QWORD *)&v165 = v162;
          DefiningOp = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)&v165);
          if (DefiningOp)
          {
            v45 = *((_QWORD *)DefiningOp + 2);
            mlir::GenericProgramPoint::~GenericProgramPoint(DefiningOp);
            v47 = (uint64_t *)(v46 + 8);
          }
          else
          {
            v45 = *(_QWORD *)(v165 + 16);
            v47 = (uint64_t *)(v45 + 40);
          }
          v48 = *v47;
          *(_QWORD *)(v8 + 16) = v45;
          *(_QWORD *)(v8 + 24) = v48;
          Loc = mlir::Value::getLoc((mlir::Value *)&v162);
          v50 = v162;
          v51 = (uint64_t *)*((_QWORD *)v40 + 1);
          if (!v51)
            goto LABEL_55;
          v52 = *v51;
          v53 = mlir::TypeID::get<mlir::ShapedType>();
          v54 = *(unsigned int *)(v52 + 16);
          if (!(_DWORD)v54)
            goto LABEL_55;
          v55 = *(_QWORD **)(v52 + 8);
          v56 = &v55[2 * v54];
          do
          {
            v57 = v54 >> 1;
            v58 = &v55[2 * (v54 >> 1)];
            v60 = *v58;
            v59 = v58 + 2;
            v54 += ~(v54 >> 1);
            if (v60 < v53)
              v55 = v59;
            else
              v54 = v57;
          }
          while (v54);
          if (v55 != v56 && *v55 == v53)
            v61 = v55[1];
          else
LABEL_55:
            v61 = 0;
          (*(void (**)(_QWORD *, uint64_t, void *, uint64_t *, uint64_t, uint64_t))(*a4 + 136))(a4, Loc, v50, v51, v61, a5);
          if (v8)
          {
            if ((_QWORD)v146)
            {
              *v41 = v146;
            }
            else
            {
              *(_QWORD *)v41 = 0;
              *(_QWORD *)(v8 + 24) = 0;
            }
          }
          v43 += 8;
        }
        while (v43 != a2 + 8 * a3);
      }
      ++v39;
      v40 += 24;
    }
    while (v40 != v142);
  }
  *(_QWORD *)&v165 = v166;
  *((_QWORD *)&v165 + 1) = 0x400000000;
  v62 = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  v63 = *(_QWORD *)(v62 + 48);
  v64 = *(_QWORD *)(v62 + 56) - v63;
  if (v64)
  {
    v65 = v64 >> 3;
    v66 = DWORD2(v165);
    v67 = 8 * v65;
    do
    {
      v68 = *(_QWORD *)&v170[24 * *(unsigned int *)(*(_QWORD *)v63 + 24) + 8];
      if (v66 >= HIDWORD(v165))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v165, v166, v66 + 1, 8);
        v66 = DWORD2(v165);
      }
      *(_QWORD *)(v165 + 8 * v66) = v68;
      v66 = ++DWORD2(v165);
      v63 += 8;
      v67 -= 8;
    }
    while (v67);
  }
  v162 = v164;
  v163 = 0x400000000;
  v69 = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  mlir::Block::getTerminator(v69);
  if ((*(_BYTE *)(v70 + 46) & 0x80) != 0)
  {
    v71 = *(unsigned int *)(v70 + 68);
    if ((_DWORD)v71)
    {
      v72 = 0;
      v73 = v163;
      v74 = 24 * v71;
      do
      {
        v75 = *(_QWORD *)((char *)v167 + v72 + 8);
        if (v73 >= HIDWORD(v163))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, v164, v73 + 1, 8);
          v73 = v163;
        }
        *((_QWORD *)v162 + v73) = v75;
        v73 = v163 + 1;
        LODWORD(v163) = v163 + 1;
        v72 += 24;
      }
      while (v74 != v72);
    }
  }
  v159 = v161;
  v160 = 0x400000000;
  v143 = (mlir::GenericProgramPoint **)(a2 + 8 * a3);
  if (a3)
  {
    v76 = *(_QWORD *)(v8 + 16);
    v144 = v76;
    v147 = *(_QWORD *)(v8 + 24);
    for (i = (mlir::GenericProgramPoint **)a2; i != v143; ++i)
    {
      v78 = *i;
      v79 = *((_QWORD *)*i + 2);
      mlir::GenericProgramPoint::~GenericProgramPoint(*i);
      *(_QWORD *)(v8 + 16) = v79;
      *(_QWORD *)(v8 + 24) = v81;
      if ((*((_BYTE *)v78 + 46) & 0x80) != 0)
      {
        v82 = *((_QWORD *)v78 + 9);
        v83 = *((unsigned int *)v78 + 17);
        v84 = v83;
        v156 = v158;
        v157 = 0x400000000;
        if (v83 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, v158, v83, 8);
          v85 = v157;
          goto LABEL_80;
        }
        if ((_DWORD)v83)
        {
          v85 = 0;
LABEL_80:
          v86 = (uint64_t *)((char *)v156 + 8 * v85);
          v87 = (uint64_t *)(v82 + 24);
          do
          {
            v88 = *v87;
            v150[0] = *v87;
            v151[0] = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v150, v151)&& v151[0] != *(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16))
            {
              v88 = *(_QWORD *)(v151[0] + 8);
            }
            *v86++ = v88;
            v87 += 4;
            --v83;
          }
          while (v83);
          v89 = v157;
          v76 = v144;
          goto LABEL_86;
        }
        v89 = 0;
      }
      else
      {
        v84 = 0;
        v89 = 0;
        v156 = v158;
        HIDWORD(v157) = 4;
      }
LABEL_86:
      LODWORD(v157) = v89 + v84;
      v90 = *((_QWORD *)v78 + 3);
      v151[0] = mlir::SymbolRefAttr::get(v153[0], v80);
      v150[0] = mlir::placement::RegionTypeAttr::get(*(mlir::MLIRContext **)v8, 1u);
      v91 = mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)v8, v90, (uint64_t)&v162, v151, v150, (uint64_t)&v156);
      v152 = v91;
      v92 = v160;
      if (v160 >= (unint64_t)HIDWORD(v160))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, v161, v160 + 1, 8);
        v92 = v160;
      }
      *((_QWORD *)v159 + v92) = v91;
      LODWORD(v160) = v160 + 1;
      v93 = *((unsigned int *)v78 + 9);
      v94 = (uint64_t)v78 - 16;
      if (!(_DWORD)v93)
        v94 = 0;
      v151[0] = v94;
      v151[1] = v93;
      v150[0] = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v152);
      v150[1] = v95;
      mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(a5, v151, v150);
      if (v156 != v158)
        free(v156);
      if (v76)
      {
        *(_QWORD *)(v8 + 16) = v76;
        *(_QWORD *)(v8 + 24) = v147;
      }
      else
      {
        v147 = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0;
      }
    }
  }
  if ((_DWORD)v168)
  {
    v145 = 0;
    v96 = (char *)v167;
    v139 = (char *)v167 + 24 * v168;
    v97 = (__int128 *)(v8 + 16);
    do
    {
      if (*((_QWORD *)v96 + 1) != *((_QWORD *)v96 + 2) && a3 != 0)
      {
        v99 = (mlir::GenericProgramPoint **)a2;
        do
        {
          v148 = *v97;
          if (v145 >= 6)
            v100 = (uint64_t)*v99 - 24 * (v145 - 5) - 96;
          else
            v100 = (uint64_t)*v99 + 16 * ~v145;
          v151[0] = v100;
          v156 = 0;
          v101 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156);
          v102 = 0;
          if (v101 && v156 != (void *)(*(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16)))
            v102 = (void *)*((_QWORD *)v156 + 1);
          v150[0] = (uint64_t)v102;
          v156 = v102;
          v103 = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)&v156);
          if (v103)
          {
            v104 = *((_QWORD *)v103 + 2);
            mlir::GenericProgramPoint::~GenericProgramPoint(v103);
            v106 = (uint64_t *)(v105 + 8);
          }
          else
          {
            v104 = *((_QWORD *)v156 + 2);
            v106 = (uint64_t *)(v104 + 40);
          }
          v107 = *v106;
          *(_QWORD *)(v8 + 16) = v104;
          *(_QWORD *)(v8 + 24) = v107;
          v108 = mlir::Value::getLoc((mlir::Value *)v150);
          v109 = v150[0];
          v110 = (uint64_t *)*((_QWORD *)v96 + 2);
          if (!v110)
            goto LABEL_124;
          v111 = *v110;
          v112 = mlir::TypeID::get<mlir::ShapedType>();
          v113 = *(unsigned int *)(v111 + 16);
          if (!(_DWORD)v113)
            goto LABEL_124;
          v114 = *(_QWORD **)(v111 + 8);
          v115 = &v114[2 * v113];
          do
          {
            v116 = v113 >> 1;
            v117 = &v114[2 * (v113 >> 1)];
            v119 = *v117;
            v118 = v117 + 2;
            v113 += ~(v113 >> 1);
            if (v119 < v112)
              v114 = v118;
            else
              v113 = v116;
          }
          while (v113);
          if (v114 != v115 && *v114 == v112)
            v120 = v114[1];
          else
LABEL_124:
            v120 = 0;
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*a4 + 136))(a4, v108, v109, v110, v120, a5);
          v121 = v150[0];
          v151[0] = v150[0];
          v156 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156)&& v156 != (void *)(*(_QWORD *)a5 + 16 * *(unsigned int *)(a5 + 16)))
          {
            v121 = *((_QWORD *)v156 + 1);
          }
          v151[0] = v100;
          v156 = 0;
          v122 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a5, (unint64_t *)v151, &v156);
          v123 = v156;
          if ((v122 & 1) == 0)
          {
            v123 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a5, (uint64_t)v151, (unint64_t *)v151, v156);
            *v123 = v151[0];
            v123[1] = 0;
          }
          v123[1] = v121;
          if (v8)
          {
            if ((_QWORD)v148)
            {
              *v97 = v148;
            }
            else
            {
              *(_QWORD *)v97 = 0;
              *(_QWORD *)(v8 + 24) = 0;
            }
          }
          ++v99;
        }
        while (v99 != v143);
      }
      ++v145;
      v96 += 24;
    }
    while (v96 != v139);
  }
  v124 = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v153);
  mlir::Block::getTerminator(v124);
  if ((*(_BYTE *)(v125 + 46) & 0x80) != 0)
  {
    v126 = *(unsigned int *)(v125 + 68);
    if ((_DWORD)v126 && (_DWORD)v163 != 0)
    {
      v128 = (uint64_t *)v162;
      v129 = (uint64_t *)(*(_QWORD *)(v125 + 72) + 24);
      v130 = v126 - 1;
      v131 = 8 * v163 - 8;
      do
      {
        v133 = *v129;
        v129 += 4;
        v132 = v133;
        v134 = *v128++;
        *(_QWORD *)(v132 + 8) = *(_QWORD *)(v132 + 8) & 7 | v134;
        v29 = v130-- != 0;
        if (!v29)
          break;
        v135 = v131;
        v131 -= 8;
      }
      while (v135);
    }
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::SymbolRefAttr *)((char *)v153[0] + 24));
  mlir::ValueRange::ValueRange(v155, v165, DWORD2(v165));
  mlir::ValueRange::ValueRange(v154, (uint64_t)v162, v163);
  v33 = mlir::FunctionType::get(Context, v155[0], v155[1], v154[0], v154[1]);
  if (v159 != v161)
    free(v159);
  if (v162 != v164)
    free(v162);
  if ((_QWORD *)v165 != v166)
    free((void *)v165);
LABEL_152:
  if (v167 != v169)
    free(v167);
  if (v170 != (char *)v172)
    free(v170);
  return v33;
}

uint64_t mlir::`anonymous namespace'::checkAndCollectANEArgs(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *CanonicalMemRefType;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  const void **v23[4];
  __int16 v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD v33[20];

  v33[19] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56) - (_QWORD)v3;
  if (!v4)
    return 1;
  v7 = 8 * (v4 >> 3);
  while (1)
  {
    v8 = *v3;
    if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v9 = (_QWORD *)(*(_QWORD *)(*v3 + 8) & 0xFFFFFFFFFFFFFFF8);
    else
      v9 = 0;
    v25 = v9;
    if (!v9)
    {
      v23[0] = (const void **)"Argument was not memref: ";
      v24 = 259;
      mlir::Operation::emitOpError(a1, v23, (uint64_t)&v28);
      mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v28, (uint64_t *)&v25);
      if (v28)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v29);
      return 0;
    }
    if (v25 != CanonicalMemRefType)
      break;
LABEL_3:
    ++v3;
    v7 -= 8;
    if (!v7)
      return 1;
  }
  v11 = CanonicalMemRefType;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v25);
  if (v12 == 4 || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v25), v13 == 5))
  {
      return 0;
      *(_QWORD *)(*a3 + 24 * *(unsigned int *)(v8 + 24) + 8) = v11;
    goto LABEL_3;
  }
  v23[0] = (const void **)"Region input ";
  v24 = 259;
  mlir::Operation::emitOpError(a1, v23, (uint64_t)&v28);
  if (v28)
  {
    v16 = *(unsigned int *)(v8 + 24);
    v26 = 5;
    v27 = v16;
    v17 = &v26;
    v18 = v30;
    if (v31 >= v32)
    {
      v21 = v31 + 1;
      if (v30 <= (unint64_t)&v26 && v30 + 24 * v31 > (unint64_t)&v26)
      {
        v22 = (char *)&v26 - v30;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v33, v21, 24);
        v18 = v30;
        v17 = (int *)&v22[v30];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, v33, v21, 24);
        v17 = &v26;
        v18 = v30;
      }
    }
    v19 = v18 + 24 * v31;
    v20 = *(_OWORD *)v17;
    *(_QWORD *)(v19 + 16) = *((_QWORD *)v17 + 2);
    *(_OWORD *)v19 = v20;
    ++v31;
    if (v28)
      mlir::Diagnostic::operator<<((uint64_t)v29, " was not rank-4 or rank-5");
  }
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v28);
  if (v28)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v28);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v29);
  return v14;
}

uint64_t mlir::`anonymous namespace'::checkAndCollectANEResults(uint64_t *a1, mlir::GenericProgramPoint **this, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *CanonicalMemRefType;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  unint64_t v17;
  const void **v18[4];
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[24];

  v22[23] = *MEMORY[0x1E0C80C00];
  mlir::Block::getTerminator(this);
  if ((*(_BYTE *)(v5 + 46) & 0x80) == 0)
    return 1;
  v6 = *(unsigned int *)(v5 + 68);
  if (!(_DWORD)v6)
    return 1;
  v7 = *(_QWORD *)(v5 + 72);
  v8 = 32 * v6;
  while (1)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8) + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      v9 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
    else
      v9 = 0;
    v20 = v9;
    if (!v9)
    {
      v18[0] = (const void **)"Result was not memref: ";
      v19 = 259;
      mlir::Operation::emitOpError(a1, v18, (uint64_t)&v21);
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v21, (uint64_t *)&v17);
      if (v21)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v21);
      std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v22);
      return 0;
    }
    if (v20 != CanonicalMemRefType)
      break;
LABEL_4:
    v7 += 32;
    v8 -= 32;
    if (!v8)
      return 1;
  }
  v11 = CanonicalMemRefType;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20);
  if (v12 == 4 || (mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v20), v13 == 5))
  {
      return 0;
      *(_QWORD *)(*a3 + 24 * mlir::OpOperand::getOperandNumber(v7) + 8) = v11;
    goto LABEL_4;
  }
  v16 = *(uint64_t **)(v7 + 16);
  v18[0] = (const void **)"Op output was not rank-4 or rank-5";
  v19 = 259;
  mlir::Operation::emitOpError(v16, v18, (uint64_t)&v21);
  v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v21);
  if (v21)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v21);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v22);
  return v14;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  unint64_t v25[2];
  unint64_t v26[2];
  _QWORD v27[39];

  v27[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"placement.region_call", (const unsigned __int8 *)0x15, Context);
  if (!v14)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"placement.region_call";
    v23[3] = 21;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v27);
    llvm::report_fatal_error((llvm::Twine *)v27, 1);
  }
  mlir::OperationState::OperationState(v27, a2, v13);
  mlir::ValueRange::ValueRange(v26, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  v15 = *a4;
  v16 = *a5;
  mlir::ValueRange::ValueRange(v25, *(_QWORD *)a6, *(unsigned int *)(a6 + 8));
  mlir::placement::RegionCall::build((uint64_t)a1, (uint64_t)v27, v26[0], v26[1], v15, v16, v25[0], v25[1]);
  v17 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v27);
  if (*(_UNKNOWN **)(*((_QWORD *)v17 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::placement::RegionCall,void>::id)
    v18 = v17;
  else
    v18 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v27);
  return v18;
}

uint64_t mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NextResultAtOffset;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = a2[1];
  v4 = a3[1];
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = (uint64_t *)result;
    v7 = 0;
    v8 = *a2;
    v9 = *a3;
    v10 = v3 - 1;
    v11 = v4 - 1;
    do
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v7);
      v13 = mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v7);
      v15 = NextResultAtOffset;
      v16 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v6, (unint64_t *)&v15, &v16);
      v14 = v16;
      if ((result & 1) == 0)
      {
        result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v6, (uint64_t)&v15, (unint64_t *)&v15, v16);
        v14 = (_QWORD *)result;
        *(_QWORD *)result = v15;
        *(_QWORD *)(result + 8) = 0;
      }
      v14[1] = v13;
      if (v10 == v7)
        break;
      v5 = v11 == v7++;
    }
    while (!v5);
  }
  return result;
}

uint64_t mlir::legalizeA12(mlir::SymbolRefAttr *InterfaceFor, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  mlir::SymbolRefAttr *v8;
  uint64_t isPublic;
  uint64_t Inputs;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *Results;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  BOOL v30;
  char v31;
  llvm *v32;
  llvm *v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  void *v36;
  llvm::raw_ostream *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  mlir::GenericProgramPoint *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  mlir::GenericProgramPoint **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  mlir::GenericProgramPoint **v77;
  mlir::GenericProgramPoint *v78;
  uint64_t v79;
  mlir::Operation *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  mlir::GenericProgramPoint *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v98;
  mlir::GenericProgramPoint **i;
  uint64_t v100;
  int v101;
  void *v102;
  mlir::GenericProgramPoint *DefiningOp;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t Loc;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t *v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  _QWORD *v124;
  mlir::GenericProgramPoint **v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  mlir::MLIRContext *Context;
  char *v139;
  uint64_t v140;
  char *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  mlir::GenericProgramPoint **v149;
  uint64_t v151[2];
  uint64_t v152[2];
  mlir::GenericProgramPoint *v153;
  mlir::SymbolRefAttr *v154[2];
  unint64_t v155[2];
  unint64_t v156[2];
  void *v157;
  uint64_t v158;
  _BYTE v159[32];
  void *v160;
  uint64_t v161;
  _BYTE v162[32];
  void *v163;
  uint64_t v164;
  _BYTE v165[32];
  __int128 v166;
  _QWORD v167[4];
  void *v168;
  uint64_t v169;
  _BYTE v170[96];
  char *v171;
  uint64_t v172;
  _QWORD v173[14];

  v8 = InterfaceFor;
  v173[12] = *MEMORY[0x1E0C80C00];
  if (InterfaceFor)
    InterfaceFor = (mlir::SymbolRefAttr *)mlir::OpInterface<mlir::TargetLegalizerInterface,mlir::detail::TargetLegalizerInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)InterfaceFor);
  v154[0] = v8;
  v154[1] = InterfaceFor;
  isPublic = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
  v171 = (char *)v173;
  v172 = 0x400000000;
  v168 = v170;
  v169 = 0x400000000;
  *(_QWORD *)&v166 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v154);
  Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v166);
  v12 = *(_QWORD *)(isPublic + 48);
  v13 = *(_QWORD *)(isPublic + 56) - v12;
  if (v11 && v13)
  {
    v14 = (_QWORD *)Inputs;
    v15 = 8 * (v13 >> 3) - 8;
    v16 = 8 * v11 - 8;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v166 = *(_QWORD *)v12;
      *((_QWORD *)&v166 + 1) = v17;
      v167[0] = *v14;
      if (v172 >= HIDWORD(v172))
      {
        if (!v16)
          break;
      }
      else
      {
        v18 = &v171[24 * v172];
        *(_OWORD *)v18 = v166;
        *((_QWORD *)v18 + 2) = v167[0];
        LODWORD(v172) = v172 + 1;
        if (!v16)
          break;
      }
      ++v14;
      v12 += 8;
      v19 = v15;
      v15 -= 8;
      v16 -= 8;
    }
    while (v19);
  }
  *(_QWORD *)&v166 = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v154);
  Results = (_QWORD *)mlir::FunctionType::getResults((mlir::FunctionType *)&v166);
  v22 = v21;
  mlir::Block::getTerminator((mlir::GenericProgramPoint **)isPublic);
  if ((*(_BYTE *)(v23 + 46) & 0x80) != 0)
  {
    if (v22)
    {
      v24 = *(unsigned int *)(v23 + 68);
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(v23 + 72) + 24;
        v26 = v24 - 1;
        v27 = 8 * v22 - 8;
        do
        {
          v28 = *(_QWORD *)(*(_QWORD *)v25 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&v166 = *(_QWORD *)v25;
          *((_QWORD *)&v166 + 1) = v28;
          v167[0] = *Results;
          if (v169 >= HIDWORD(v169))
          {
          }
          else
          {
            v29 = (char *)v168 + 24 * v169;
            *(_OWORD *)v29 = v166;
            *((_QWORD *)v29 + 2) = v167[0];
            LODWORD(v169) = v169 + 1;
          }
          v30 = v26-- != 0;
          v31 = v30;
          if (!v27)
            break;
          ++Results;
          v25 += 32;
          v27 -= 8;
        }
        while ((v31 & 1) != 0);
      }
    }
  }
  if (!(_BYTE)v32)
  {
    v35 = (llvm::raw_ostream *)llvm::errs(v32);
    v36 = (void *)*((_QWORD *)v35 + 4);
    if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0x1DuLL)
    {
      v34 = 0;
      qmemcpy(v36, "checkAndCollectANEArgs failed\n", 30);
      *((_QWORD *)v35 + 4) += 30;
    }
    else
    {
      llvm::raw_ostream::write(v35, "checkAndCollectANEArgs failed\n", 0x1EuLL);
      v34 = 0;
    }
    goto LABEL_141;
  }
  if (!(_BYTE)v33)
  {
    v37 = (llvm::raw_ostream *)llvm::errs(v33);
    v38 = (void *)*((_QWORD *)v37 + 4);
    if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0x20uLL)
    {
      v34 = 0;
      qmemcpy(v38, "checkAndCollectANEResults failed\n", 33);
      *((_QWORD *)v37 + 4) += 33;
    }
    else
    {
      llvm::raw_ostream::write(v37, "checkAndCollectANEResults failed\n", 0x21uLL);
      v34 = 0;
    }
    goto LABEL_141;
  }
  if (!(v172 | v169))
  {
    v34 = mlir::minimalLegalize((uint64_t)v154[0], a3, a4, (uint64_t *)a6);
    goto LABEL_141;
  }
  if (!(_DWORD)v172)
  {
LABEL_63:
    *(_QWORD *)&v166 = v167;
    *((_QWORD *)&v166 + 1) = 0x400000000;
    v62 = mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
    v63 = *(_QWORD *)(v62 + 48);
    v64 = *(_QWORD *)(v62 + 56) - v63;
    if (v64)
    {
      v65 = v64 >> 3;
      v66 = DWORD2(v166);
      v67 = 8 * v65;
      do
      {
        v68 = *(_QWORD *)&v171[24 * *(unsigned int *)(*(_QWORD *)v63 + 24) + 8];
        if (v66 >= HIDWORD(v166))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166, v167, v66 + 1, 8);
          v66 = DWORD2(v166);
        }
        *(_QWORD *)(v166 + 8 * v66) = v68;
        v66 = ++DWORD2(v166);
        v63 += 8;
        v67 -= 8;
      }
      while (v67);
    }
    v163 = v165;
    v164 = 0x400000000;
    v69 = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
    mlir::Block::getTerminator(v69);
    if ((*(_BYTE *)(v70 + 46) & 0x80) != 0)
    {
      v71 = *(unsigned int *)(v70 + 68);
      if ((_DWORD)v71)
      {
        v72 = 0;
        v73 = v164;
        v74 = 24 * v71;
        do
        {
          v75 = *(_QWORD *)((char *)v168 + v72 + 8);
          if (v73 >= HIDWORD(v164))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v163, v165, v73 + 1, 8);
            v73 = v164;
          }
          *((_QWORD *)v163 + v73) = v75;
          v73 = v164 + 1;
          LODWORD(v164) = v164 + 1;
          v72 += 24;
        }
        while (v74 != v72);
      }
    }
    v160 = v162;
    v161 = 0x400000000;
    v149 = (mlir::GenericProgramPoint **)(a3 + 8 * a4);
    if (!a4)
    {
LABEL_99:
      if ((_DWORD)v169)
      {
        v147 = 0;
        v96 = (char *)v168;
        v139 = (char *)v168 + 24 * v169;
        do
        {
          if (*((_QWORD *)v96 + 1) != *((_QWORD *)v96 + 2) && a4 != 0)
          {
            v98 = *(_QWORD *)(a2 + 16);
            v140 = *(_QWORD *)(a2 + 24);
            for (i = (mlir::GenericProgramPoint **)a3; i != v149; ++i)
            {
              if (v147 >= 6)
                v100 = (uint64_t)*i - 24 * (v147 - 5) - 96;
              else
                v100 = (uint64_t)*i + 16 * ~v147;
              v152[0] = v100;
              v157 = 0;
              v101 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157);
              v102 = 0;
              if (v101 && v157 != (void *)(*(_QWORD *)a6 + 16 * *(unsigned int *)(a6 + 16)))
                v102 = (void *)*((_QWORD *)v157 + 1);
              v151[0] = (uint64_t)v102;
              v157 = v102;
              DefiningOp = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)&v157);
              if (DefiningOp)
              {
                v104 = *((_QWORD *)DefiningOp + 2);
                mlir::GenericProgramPoint::~GenericProgramPoint(DefiningOp);
                v106 = (uint64_t *)(v105 + 8);
              }
              else
              {
                v104 = *((_QWORD *)v157 + 2);
                v106 = (uint64_t *)(v104 + 40);
              }
              v107 = *v106;
              *(_QWORD *)(a2 + 16) = v104;
              *(_QWORD *)(a2 + 24) = v107;
              Loc = mlir::Value::getLoc((mlir::Value *)v151);
              v109 = v151[0];
              v110 = (uint64_t *)*((_QWORD *)v96 + 2);
              if (!v110)
                goto LABEL_127;
              v111 = *v110;
              v112 = mlir::TypeID::get<mlir::ShapedType>();
              v113 = *(unsigned int *)(v111 + 16);
              if (!(_DWORD)v113)
                goto LABEL_127;
              v114 = *(_QWORD **)(v111 + 8);
              v115 = &v114[2 * v113];
              do
              {
                v116 = v113 >> 1;
                v117 = &v114[2 * (v113 >> 1)];
                v119 = *v117;
                v118 = v117 + 2;
                v113 += ~(v113 >> 1);
                if (v119 < v112)
                  v114 = v118;
                else
                  v113 = v116;
              }
              while (v113);
              if (v114 != v115 && *v114 == v112)
                v120 = v114[1];
              else
LABEL_127:
                v120 = 0;
              v121 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a5 + 24))(a5, a2, Loc, v109, v110, v120, a6);
              if (v121)
              {
                v122 = v151[0];
                v152[0] = v151[0];
                v157 = 0;
                if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157)&& v157 != (void *)(*(_QWORD *)a6 + 16 * *(unsigned int *)(a6 + 16)))
                {
                  v122 = *((_QWORD *)v157 + 1);
                }
                v152[0] = v100;
                v157 = 0;
                v123 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v152, &v157);
                v124 = v157;
                if ((v123 & 1) == 0)
                {
                  v124 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a6, (uint64_t)v152, (unint64_t *)v152, v157);
                  *v124 = v152[0];
                  v124[1] = 0;
                }
                v124[1] = v122;
              }
              if (v98)
              {
                *(_QWORD *)(a2 + 16) = v98;
                *(_QWORD *)(a2 + 24) = v140;
                if (!v121)
                {
LABEL_139:
                  v34 = 0;
                  goto LABEL_156;
                }
              }
              else
              {
                v140 = 0;
                *(_QWORD *)(a2 + 16) = 0;
                *(_QWORD *)(a2 + 24) = 0;
                if (!v121)
                  goto LABEL_139;
              }
            }
          }
          ++v147;
          v96 += 24;
        }
        while (v96 != v139);
      }
      v126 = (mlir::GenericProgramPoint **)mlir::SymbolOpInterface::isPublic((mlir::SymbolOpInterface *)v154);
      mlir::Block::getTerminator(v126);
      if ((*(_BYTE *)(v127 + 46) & 0x80) != 0)
      {
        v128 = *(unsigned int *)(v127 + 68);
        if ((_DWORD)v128 && (_DWORD)v164 != 0)
        {
          v130 = (uint64_t *)v163;
          v131 = (uint64_t *)(*(_QWORD *)(v127 + 72) + 24);
          v132 = v128 - 1;
          v133 = 8 * v164 - 8;
          do
          {
            v135 = *v131;
            v131 += 4;
            v134 = v135;
            v136 = *v130++;
            *(_QWORD *)(v134 + 8) = *(_QWORD *)(v134 + 8) & 7 | v136;
            v30 = v132-- != 0;
            if (!v30)
              break;
            v137 = v133;
            v133 -= 8;
          }
          while (v137);
        }
      }
      Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::SymbolRefAttr *)((char *)v154[0] + 24));
      mlir::ValueRange::ValueRange(v156, v166, DWORD2(v166));
      mlir::ValueRange::ValueRange(v155, (uint64_t)v163, v164);
      v34 = mlir::FunctionType::get(Context, v156[0], v156[1], v155[0], v155[1]);
LABEL_156:
      if (v160 != v162)
        free(v160);
      if (v163 != v165)
        free(v163);
      if ((_QWORD *)v166 != v167)
        free((void *)v166);
      goto LABEL_141;
    }
    v76 = *(_QWORD *)(a2 + 16);
    v143 = v76;
    v146 = *(_QWORD *)(a2 + 24);
    v77 = (mlir::GenericProgramPoint **)a3;
    while (1)
    {
      v78 = *v77;
      v79 = *((_QWORD *)*v77 + 2);
      mlir::GenericProgramPoint::~GenericProgramPoint(*v77);
      *(_QWORD *)(a2 + 16) = v79;
      *(_QWORD *)(a2 + 24) = v81;
      if ((*((_BYTE *)v78 + 46) & 0x80) != 0)
      {
        v82 = *((_QWORD *)v78 + 9);
        v83 = *((unsigned int *)v78 + 17);
        v84 = v83;
        v157 = v159;
        v158 = 0x400000000;
        if (v83 >= 5)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v157, v159, v83, 8);
          v85 = v158;
          goto LABEL_83;
        }
        if ((_DWORD)v83)
        {
          v85 = 0;
LABEL_83:
          v86 = (uint64_t *)((char *)v157 + 8 * v85);
          v87 = (uint64_t *)(v82 + 24);
          do
          {
            v88 = *v87;
            v151[0] = *v87;
            v152[0] = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a6, (unint64_t *)v151, v152)&& v152[0] != *(_QWORD *)a6 + 16 * *(unsigned int *)(a6 + 16))
            {
              v88 = *(_QWORD *)(v152[0] + 8);
            }
            *v86++ = v88;
            v87 += 4;
            --v83;
          }
          while (v83);
          v89 = v158;
          v76 = v143;
          goto LABEL_89;
        }
        v89 = 0;
      }
      else
      {
        v84 = 0;
        v89 = 0;
        v157 = v159;
        HIDWORD(v158) = 4;
      }
LABEL_89:
      LODWORD(v158) = v89 + v84;
      v90 = *((_QWORD *)v78 + 3);
      v152[0] = mlir::SymbolRefAttr::get(v154[0], v80);
      v151[0] = mlir::placement::RegionTypeAttr::get(*(mlir::MLIRContext **)a2, 1u);
      v91 = mlir::OpBuilder::create<mlir::placement::RegionCall,llvm::SmallVector<mlir::Type,4u> &,mlir::FlatSymbolRefAttr,mlir::placement::RegionTypeAttr,llvm::SmallVector<mlir::Value,4u> &>((mlir::OpBuilder *)a2, v90, (uint64_t)&v163, v152, v151, (uint64_t)&v157);
      v153 = v91;
      v92 = v161;
      if (v161 >= (unint64_t)HIDWORD(v161))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v160, v162, v161 + 1, 8);
        v92 = v161;
      }
      *((_QWORD *)v160 + v92) = v91;
      LODWORD(v161) = v161 + 1;
      v93 = *((unsigned int *)v78 + 9);
      v94 = (uint64_t)v78 - 16;
      if (!(_DWORD)v93)
        v94 = 0;
      v152[0] = v94;
      v152[1] = v93;
      v151[0] = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v153);
      v151[1] = v95;
      mlir::IRMapping::map<mlir::ResultRange,mlir::ResultRange,(void *)0>(a6, v152, v151);
      if (v157 != v159)
        free(v157);
      if (v76)
      {
        *(_QWORD *)(a2 + 16) = v76;
        *(_QWORD *)(a2 + 24) = v146;
      }
      else
      {
        v146 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
      }
      if (++v77 == v149)
        goto LABEL_99;
    }
  }
  v39 = 0;
  v40 = v171;
  v141 = &v171[24 * v172];
  v142 = (_QWORD *)(a2 + 16);
  while (*((_QWORD *)v40 + 1) == *((_QWORD *)v40 + 2) || a4 == 0)
  {
LABEL_34:
    ++v39;
    v40 += 24;
    if (v40 == v141)
      goto LABEL_63;
  }
  v42 = *(_QWORD *)(a2 + 16);
  v148 = *(_QWORD *)(a2 + 24);
  v43 = a3;
  while (1)
  {
    v163 = *(void **)(*(_QWORD *)(*(_QWORD *)v43 + 72) + 32 * v39 + 24);
    *(_QWORD *)&v166 = v163;
    v44 = (mlir::GenericProgramPoint *)mlir::Value::getDefiningOp((mlir::Value *)&v166);
    if (v44)
    {
      v45 = *((_QWORD *)v44 + 2);
      mlir::GenericProgramPoint::~GenericProgramPoint(v44);
      v47 = (uint64_t *)(v46 + 8);
    }
    else
    {
      v45 = *(_QWORD *)(v166 + 16);
      v47 = (uint64_t *)(v45 + 40);
    }
    v48 = *v47;
    *(_QWORD *)(a2 + 16) = v45;
    *(_QWORD *)(a2 + 24) = v48;
    v49 = mlir::Value::getLoc((mlir::Value *)&v163);
    v50 = v163;
    v51 = (uint64_t *)*((_QWORD *)v40 + 1);
    if (!v51)
      goto LABEL_54;
    v52 = *v51;
    v53 = mlir::TypeID::get<mlir::ShapedType>();
    v54 = *(unsigned int *)(v52 + 16);
    if (!(_DWORD)v54)
      goto LABEL_54;
    v55 = *(_QWORD **)(v52 + 8);
    v56 = &v55[2 * v54];
    do
    {
      v57 = v54 >> 1;
      v58 = &v55[2 * (v54 >> 1)];
      v60 = *v58;
      v59 = v58 + 2;
      v54 += ~(v54 >> 1);
      if (v60 < v53)
        v55 = v59;
      else
        v54 = v57;
    }
    while (v54);
    if (v55 != v56 && *v55 == v53)
      v61 = v55[1];
    else
LABEL_54:
      v61 = 0;
    if (!(*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a5 + 24))(a5, a2, v49, v50, v51, v61, a6))break;
    if (v42)
    {
      *(_QWORD *)(a2 + 16) = v42;
      *(_QWORD *)(a2 + 24) = v148;
    }
    else
    {
      v148 = 0;
      *v142 = 0;
      *(_QWORD *)(a2 + 24) = 0;
    }
    v43 += 8;
    if (v43 == a3 + 8 * a4)
      goto LABEL_34;
  }
  v34 = 0;
  if (v42)
  {
    *(_QWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 24) = v148;
  }
  else
  {
    *v142 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
LABEL_141:
  if (v168 != v170)
    free(v168);
  if (v171 != (char *)v173)
    free(v171);
  return v34;
}

_QWORD *mlir::`anonymous namespace'::makeCanonicalMemRefType(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  unsigned int IntOrFloatBitWidth;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t ArgAttrsAttr;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  BOOL v30;
  mlir::MLIRContext *Context;
  unint64_t StridedLinearLayoutMap;
  void *v33;
  mlir::AffineMap *v34;
  mlir::AffineMap *v35;
  uint64_t OperandRange;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v44[2];
  void *v45;
  unsigned int v46;
  int v47;
  _BYTE v48[32];
  void *RHS;
  uint64_t v50;
  _QWORD v51[5];

  v51[4] = *MEMORY[0x1E0C80C00];
  v43 = a1;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
  if (!v1)
    return v43;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v43);
  v3 = v2;
  v45 = v48;
  v47 = 4;
  if (v2 >= 5)
  {
    v46 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v2, 8);
    v4 = v45;
    v5 = 8 * v3;
LABEL_7:
    memset_pattern16(v4, &unk_181233190, v5);
    goto LABEL_8;
  }
  if (v2)
  {
    v5 = 8 * v2;
    v4 = v48;
    goto LABEL_7;
  }
LABEL_8:
  v46 = v3;
  RHS = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v43);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  *((_QWORD *)v45 + v46 - 1) = 0x40 / (IntOrFloatBitWidth >> 3);
  v8 = v43;
  if (!v43)
    goto LABEL_17;
  v9 = *v43;
  v10 = mlir::TypeID::get<mlir::ShapedType>();
  v11 = *(unsigned int *)(v9 + 16);
  if (!(_DWORD)v11)
    goto LABEL_17;
  v12 = *(_QWORD **)(v9 + 8);
  v13 = &v12[2 * v11];
  do
  {
    v14 = v11 >> 1;
    v15 = &v12[2 * (v11 >> 1)];
    v17 = *v15;
    v16 = v15 + 2;
    v11 += ~(v11 >> 1);
    if (v17 < v10)
      v12 = v16;
    else
      v11 = v14;
  }
  while (v11);
  if (v12 != v13 && *v12 == v10)
    v18 = v12[1];
  else
LABEL_17:
    v18 = 0;
  v19 = (char *)v45;
  v20 = v46;
  v44[0] = v8;
  v44[1] = v18;
  RHS = v51;
  v51[0] = 1;
  v50 = 0x400000001;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
  LODWORD(v22) = v50;
  v24 = v23 - 1;
  if (v23 != 1)
  {
    v38 = ArgAttrsAttr;
    v39 = &v19[8 * v20 - 8];
    do
    {
      v22 = v22;
      v41 = *(_QWORD *)v39;
      v39 -= 8;
      v40 = v41;
      if (v41)
        v42 = (v40 + *((_QWORD *)RHS + v22 - 1) * *(_QWORD *)(v38 + 8 * v24) - 1) / v40 * v40;
      else
        v42 = 0;
      if (v22 >= HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&RHS, v51, v22 + 1, 8);
        v22 = v50;
      }
      *((_QWORD *)RHS + v22) = v42;
      LODWORD(v22) = v50 + 1;
      LODWORD(v50) = v50 + 1;
      --v24;
    }
    while (v24);
  }
  v25 = RHS;
  v26 = v22;
  if ((_DWORD)v22)
  {
    v27 = (char *)RHS + 8 * v22 - 8;
    if (v27 > RHS)
    {
      v28 = (char *)RHS + 8;
      do
      {
        v29 = *((_QWORD *)v28 - 1);
        *((_QWORD *)v28 - 1) = *(_QWORD *)v27;
        *(_QWORD *)v27 = v29;
        v27 -= 8;
        v30 = v28 >= v27;
        v28 += 8;
      }
      while (!v30);
    }
  }
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v44);
  StridedLinearLayoutMap = mlir::makeStridedLinearLayoutMap((uint64_t)v25, v26, 0, Context);
  v33 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v44);
  v35 = v34;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v44);
  v6 = mlir::MemRefType::get(v33, v35, OperandRange, StridedLinearLayoutMap, 0);
  if (RHS != v51)
    free(RHS);
  if (v45 != v48)
    free(v45);
  return (_QWORD *)v6;
}

uint64_t mlir::`anonymous namespace'::checkStrideAndInterleave(uint64_t *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Value;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  const void **v35[4];
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE v46[152];
  char *v47;
  uint64_t v48;
  _QWORD v49[5];

  v49[4] = *MEMORY[0x1E0C80C00];
  v37 = 0;
  v38 = a2;
  v47 = (char *)v49;
  v48 = 0x400000000;
  if (!mlir::getStridesAndOffset(a2, (uint64_t)&v47, &v37))
  {
    v3 = "Unable to get strides for type: ";
    goto LABEL_5;
  }
  if (v37)
  {
    v3 = "Invalid offset for type: ";
    goto LABEL_5;
  }
  v6 = &v47[8 * v48];
  if (v48 >= 2)
  {
    v9 = v47 + 8;
    v8 = *(_QWORD *)v47;
    v10 = 8 * v48 - 8;
    v7 = v47;
    v11 = v47 + 8;
    do
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      v12 = v13;
      if (v13 < v8)
      {
        v8 = v12;
        v7 = v9;
      }
      v9 = v11;
      v10 -= 8;
    }
    while (v10);
  }
  else
  {
    v7 = v47;
  }
  v15 = v48 < 3 || v7 - v47 != 8;
  v16 = v7 + 8;
  if (v7 + 8 != v6)
  {
    v17 = v7 + 8;
    while (*(_QWORD *)v7 < *v17)
    {
      if (++v17 == (_QWORD *)v6)
        goto LABEL_27;
    }
    goto LABEL_35;
  }
LABEL_27:
  if (!v15 && *(_QWORD *)v7 == 1)
  {
    v18 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    v19 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    v20 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    v21 = *(_QWORD *)(mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38) + 8);
    Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v38);
    v4 = 1;
    if (v18 == 1 || v19 == 2 || v20 == 3 || v21 == 4 || *(_QWORD *)(Value + 8) == 8)
      goto LABEL_8;
    v3 = "Disallowed interleave size, cannot legalize argument of type: ";
LABEL_5:
    v35[0] = (const void **)v3;
    v36 = 259;
    mlir::Operation::emitOpError(a1, v35, (uint64_t)&v41);
    mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v41, &v38);
    if (v41)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
LABEL_7:
    std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
    v4 = 0;
    goto LABEL_8;
  }
LABEL_35:
  if (v16 != v6)
  {
    while (*(_QWORD *)v7 == *(_QWORD *)v16)
    {
      v16 += 8;
      if (v16 == v6)
        goto LABEL_38;
    }
    v35[0] = (const void **)"Smallest stride was: ";
    v36 = 259;
    mlir::Operation::emitOpError(a1, v35, (uint64_t)&v41);
    if (v41)
    {
      v39 = 2;
      v40 = (v7 - v47) >> 3;
      v23 = &v39;
      v24 = v43;
      if (v44 >= v45)
      {
        v31 = v44 + 1;
        if (v43 <= (unint64_t)&v39 && v43 + 24 * v44 > (unint64_t)&v39)
        {
          v33 = (char *)&v39 - v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
          v24 = v43;
          v23 = (int *)&v33[v43];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v31, 24);
          v23 = &v39;
          v24 = v43;
        }
      }
      v25 = v24 + 24 * v44;
      v26 = *(_OWORD *)v23;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v25 = v26;
      ++v44;
      if (v41)
      {
        mlir::Diagnostic::operator<<((uint64_t)v42, " expected ");
        if (v41)
        {
          v39 = 5;
          v40 = v48 - 1;
          v27 = &v39;
          v28 = v43;
          if (v44 >= v45)
          {
            v32 = v44 + 1;
            if (v43 <= (unint64_t)&v39 && v43 + 24 * v44 > (unint64_t)&v39)
            {
              v34 = (char *)&v39 - v43;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              v28 = v43;
              v27 = (int *)&v34[v43];
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              v27 = &v39;
              v28 = v43;
            }
          }
          v29 = v28 + 24 * v44;
          v30 = *(_OWORD *)v27;
          *(_QWORD *)(v29 + 16) = *((_QWORD *)v27 + 2);
          *(_OWORD *)v29 = v30;
          ++v44;
          if (v41)
            mlir::Diagnostic::operator<<((uint64_t)v42, " for type ");
        }
      }
    }
    mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&v41, &v38);
    if (v41)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
    goto LABEL_7;
  }
LABEL_38:
  v4 = 1;
LABEL_8:
  if (v47 != (char *)v49)
    free(v47);
  return v4;
}

BOOL mlir::`anonymous namespace'::isRowAligned(uint64_t *a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const std::nothrow_t *v11;
  unint64_t v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  char *v17;
  const void **v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t RHS;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = a2;
  v24 = (char *)v26;
  v25 = 0x400000000;
  if (mlir::getStridesAndOffset(a2, (uint64_t)&v24, &v20))
  {
    v3 = v24;
    v4 = v25;
    if (v25 > 1)
    {
      v7 = *(_QWORD *)v24;
      v8 = 8;
      v9 = v24;
      do
      {
        if (*(_QWORD *)&v24[v8] < v7)
        {
          v7 = *(_QWORD *)&v24[v8];
          v9 = &v24[v8];
        }
        v8 += 8;
      }
      while (8 * v25 != v8);
      v10 = 1;
      if ((_DWORD)v25 != 2)
        v10 = 2;
      if (v9 - v24 == 8)
        v5 = v10;
      else
        v5 = 1;
      if (v25 >= 0x81)
      {
        v11 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
        v12 = v25;
        while (1)
        {
          v13 = (char *)operator new(8 * v12, v11);
          if (v13)
            break;
          v14 = v12 > 1;
          v12 >>= 1;
          if (!v14)
            goto LABEL_20;
        }
        v17 = v13;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v3, &v3[8 * v4], (uint64_t)&RHS, v4, v13, v12);
        operator delete(v17);
        goto LABEL_21;
      }
    }
    else
    {
      v5 = 1;
    }
LABEL_20:
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v3, &v3[8 * v4], (uint64_t)&RHS, v4, 0, 0);
LABEL_21:
    v15 = *(_QWORD *)&v24[8 * v5];
    RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v21);
    v6 = ((v15 * (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS) >> 3)) & 0x3FLL) == 0;
    goto LABEL_22;
  }
  v18 = (const void **)"Unable to get strides for type: ";
  v19 = 259;
  mlir::Operation::emitOpError(a1, &v18, (uint64_t)&RHS);
  mlir::InFlightDiagnostic::append<mlir::Type &>((uint64_t)&RHS, &v21);
  if (RHS)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&RHS);
  std::__optional_destruct_base<mlir::Diagnostic,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)&v23);
  v6 = 0;
LABEL_22:
  if (v24 != (char *)v26)
    free(v24);
  return v6;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5, uint64_t a6)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  __n128 result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  char *v43;
  uint64_t v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;

  if (a4 >= 2)
  {
    v7 = a1;
    if (a4 == 2)
    {
      v8 = *((_QWORD *)a2 - 1);
      v9 = *(_QWORD *)a1;
      if (v8 < *(_QWORD *)a1)
      {
        *(_QWORD *)a1 = v8;
        *((_QWORD *)a2 - 1) = v9;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v21 = a4 >> 1;
      v22 = &a1[8 * (a4 >> 1)];
      v23 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, v22, a3, v23, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v7, &v7[8 * (a4 >> 1)], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
        return result;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, v22, a3, v23, a5);
      v25 = &a5[8 * v21];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[8 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v25).n128_u64[0];
      v26 = v7;
      v27 = v25;
      v28 = a5;
      v29 = &a5[8 * a4];
      do
      {
        if (v27 == v29)
        {
          if (v28 == v25)
            return result;
          v48 = &a5[8 * v21] - v28 - 8;
          if (v48 >= 0x38 && (unint64_t)(v26 - v28) >= 0x20)
          {
            v52 = 0;
            v53 = (v48 >> 3) + 1;
            v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
            v49 = &v7[v54];
            v50 = &v28[v54];
            v55 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v56 = &v7[v52];
              result = *(__n128 *)&v28[v52];
              v57 = *(_OWORD *)&v28[v52 + 16];
              *(__n128 *)v56 = result;
              *((_OWORD *)v56 + 1) = v57;
              v52 += 32;
              v55 -= 4;
            }
            while (v55);
            if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v49 = v7;
            v50 = v28;
          }
          do
          {
            v51 = *(_QWORD *)v50;
            v50 += 8;
            *(_QWORD *)v49 = v51;
            v49 += 8;
          }
          while (v50 != v25);
          return result;
        }
        v30 = v27;
        v31 = *(_QWORD *)v27;
        v32 = *(_QWORD *)v28;
        v33 = *(_QWORD *)v27 < *(_QWORD *)v28;
        v34 = !v33;
        if (v33)
          v35 = *(_QWORD *)v27;
        else
          v35 = *(_QWORD *)v28;
        v28 += 8 * v34;
        v27 += 8 * v33;
        *(_QWORD *)v7 = v35;
        v7 += 8;
        v26 += 8;
      }
      while (v28 != v25);
      if (v27 != v29)
      {
        v36 = -8;
        if (v31 >= v32)
          v36 = 0;
        v37 = &a5[8 * a4] - v30 + v36 - 8;
        if (v37 < 0x78 || (unint64_t)(v26 - &v30[8 * (v31 < v32)]) < 0x20)
          goto LABEL_52;
        v38 = 0;
        v39 = (v37 >> 3) + 1;
        v33 = v31 < v32;
        v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v7[v40];
        v27 += v40;
        v42 = v33 ? 1 : 2;
        v43 = &v30[8 * (v42 & 1)];
        v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v45 = &v7[v38];
          result = *(__n128 *)&v43[v38];
          v46 = *(_OWORD *)&v43[v38 + 16];
          *(__n128 *)v45 = result;
          *((_OWORD *)v45 + 1) = v46;
          v38 += 32;
          v44 -= 4;
        }
        while (v44);
        v7 = v41;
        if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          do
          {
            v47 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v7 = v47;
            v7 += 8;
          }
          while (v27 != v29);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 8;
      if (a1 + 8 != a2)
      {
        v12 = 0;
        v13 = a1;
        do
        {
          v16 = *(_QWORD *)v13;
          v15 = *((_QWORD *)v13 + 1);
          v13 = v11;
          if (v15 < v16)
          {
            v17 = v12;
            do
            {
              *(_QWORD *)&a1[v17 + 8] = v16;
              if (!v17)
              {
                v14 = a1;
                goto LABEL_10;
              }
              v16 = *(_QWORD *)&a1[v17 - 8];
              v17 -= 8;
            }
            while (v15 < v16);
            v14 = &a1[v17 + 8];
LABEL_10:
            *(_QWORD *)v14 = v15;
          }
          v11 = v13 + 8;
          v12 += 8;
        }
        while (v13 + 8 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *a1, char *a2, uint64_t a3, unint64_t a4, char *a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;

  if (a4)
  {
    v5 = a5;
    v7 = a1;
    if (a4 == 1)
    {
LABEL_8:
      *(_QWORD *)v5 = *(_QWORD *)v7;
      return result;
    }
    if (a4 == 2)
    {
      v9 = *((_QWORD *)a2 - 1);
      v10 = v9 < *(_QWORD *)a1;
      if (v9 >= *(_QWORD *)a1)
        v9 = *(_QWORD *)a1;
      *(_QWORD *)a5 = v9;
      v5 = a5 + 8;
      if (!v10)
        v7 = a2 - 8;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v21 = a4 >> 1;
      v22 = 8 * (a4 >> 1);
      v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(a1, &a1[v22], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(&v7[v22], a2, a3, a4 - v21, &v5[v22], a4 - v21);
      v25 = v5;
      v26 = v7;
      v27 = &v7[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23)
            return result;
          v46 = &v7[8 * v21] - v26 - 8;
          if (v46 >= 0x38 && (unint64_t)(v25 - v26) >= 0x20)
          {
            v50 = 0;
            v51 = (v46 >> 3) + 1;
            v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v5[v52];
            v48 = &v26[v52];
            v53 = v51 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v54 = &v5[v50];
              result = *(__n128 *)&v26[v50];
              v55 = *(_OWORD *)&v26[v50 + 16];
              *(__n128 *)v54 = result;
              *((_OWORD *)v54 + 1) = v55;
              v50 += 32;
              v53 -= 4;
            }
            while (v53);
            if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v47 = v5;
            v48 = v26;
          }
          do
          {
            v49 = *(_QWORD *)v48;
            v48 += 8;
            *(_QWORD *)v47 = v49;
            v47 += 8;
          }
          while (v48 != v23);
          return result;
        }
        v28 = v27;
        v29 = *(_QWORD *)v27;
        v30 = *(_QWORD *)v26;
        v31 = *(_QWORD *)v27 < *(_QWORD *)v26;
        v32 = *(_QWORD *)v27 >= *(_QWORD *)v26;
        if (v31)
          v33 = *(_QWORD *)v27;
        else
          v33 = *(_QWORD *)v26;
        v27 += 8 * v31;
        v26 += 8 * v32;
        *(_QWORD *)v5 = v33;
        v5 += 8;
        v25 += 8;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        v34 = -8;
        if (v29 >= v30)
          v34 = 0;
        v35 = a2 - v28 + v34 - 8;
        if (v35 < 0x68)
          goto LABEL_50;
        if ((unint64_t)(v25 - &v28[8 * (v29 < v30)]) < 0x20)
          goto LABEL_50;
        v36 = 0;
        v37 = (v35 >> 3) + 1;
        v38 = v29 < v30;
        v39 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        v40 = &v5[v39];
        v27 += v39;
        v41 = &v28[8 * v38];
        v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v43 = &v5[v36];
          result = *(__n128 *)&v41[v36];
          v44 = *(_OWORD *)&v41[v36 + 16];
          *(__n128 *)v43 = result;
          *((_OWORD *)v43 + 1) = v44;
          v36 += 32;
          v42 -= 4;
        }
        while (v42);
        v5 = v40;
        if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_50:
          do
          {
            v45 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v5 = v45;
            v5 += 8;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 8;
      *(_QWORD *)a5 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v12 = 0;
        v13 = a5;
        v14 = (uint64_t *)a5;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*(_QWORD *)v11 >= v16)
          {
            *v14 = *(_QWORD *)v11;
          }
          else
          {
            *((_QWORD *)v13 + 1) = v15;
            v17 = a5;
            if (v13 != a5)
            {
              v18 = v12;
              while (1)
              {
                v17 = &a5[v18];
                v19 = *(_QWORD *)&a5[v18 - 8];
                if (*(_QWORD *)v11 >= v19)
                  break;
                *(_QWORD *)v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  v17 = a5;
                  break;
                }
              }
            }
            *(_QWORD *)v17 = *(_QWORD *)v11;
          }
          v11 += 8;
          v12 += 8;
          v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  _OWORD *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL4 v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  char *v69;
  char *v70;

  if (a6)
  {
    v10 = a6;
    v12 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5)
        return result;
      v13 = *(_QWORD *)a2;
      while (1)
      {
        v14 = *(_QWORD *)v12;
        if (v13 < *(_QWORD *)v12)
          break;
        v12 += 8;
        if (!--a5)
          return result;
      }
      v70 = a3;
      if (a5 >= v10)
      {
        if (a5 == 1)
        {
          *(_QWORD *)v12 = v13;
          *(_QWORD *)a2 = v14;
          return result;
        }
        if (a5 >= 0)
          v25 = a5;
        else
          v25 = a5 + 1;
        v24 = v25 >> 1;
        v18 = &v12[8 * (v25 >> 1)];
        v17 = a3;
        if (a3 != a2)
        {
          v26 = (a3 - a2) >> 3;
          v17 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v17[8 * (v26 >> 1)];
            v30 = *(_QWORD *)v28;
            v29 = v28 + 8;
            v26 += ~(v26 >> 1);
            if (v30 < *(_QWORD *)v18)
              v17 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v16 = (v17 - a2) >> 3;
      }
      else
      {
        if (v10 >= 0)
          v15 = v10;
        else
          v15 = v10 + 1;
        v16 = v15 >> 1;
        v17 = &a2[8 * (v15 >> 1)];
        v18 = a2;
        if (v12 != a2)
        {
          v19 = (a2 - v12) >> 3;
          v18 = v12;
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[8 * (v19 >> 1)];
            v23 = *(_QWORD *)v21;
            v22 = v21 + 8;
            v19 += ~(v19 >> 1);
            if (*(_QWORD *)v17 < v23)
              v19 = v20;
            else
              v18 = v22;
          }
          while (v19);
        }
        v24 = (v18 - v12) >> 3;
      }
      a5 -= v24;
      v10 -= v16;
      v31 = std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,unsigned long long *,unsigned long long *>(v18, a2, v17);
      v32 = v31;
      if (v24 + v16 >= a5 + v10)
      {
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v31, v17, v70, a4, a5, v10, a7, a8);
        v10 = v16;
        a5 = v24;
        a3 = v32;
        a2 = v18;
        if (!v16)
          return result;
      }
      else
      {
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,long long *>(v12, v18, v31, a4, v24, v16, a7, a8);
        v12 = v32;
        a3 = v70;
        a2 = v17;
        if (!v10)
          return result;
      }
    }
    if (a5 <= v10)
    {
      if (v12 != a2)
      {
        v47 = a2 - v12 - 8;
        v48 = a7;
        v49 = v12;
        if (v47 < 0x18)
          goto LABEL_81;
        v48 = a7;
        v49 = v12;
        if ((unint64_t)(a7 - v12) < 0x20)
          goto LABEL_81;
        v50 = (v47 >> 3) + 1;
        v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        v48 = &a7[v51];
        v49 = &v12[v51];
        v52 = (__int128 *)(v12 + 16);
        v53 = a7 + 16;
        v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *v52;
          *(v53 - 1) = *(v52 - 1);
          *v53 = v55;
          v52 += 2;
          v53 += 2;
          v54 -= 4;
        }
        while (v54);
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_81:
          do
          {
            v56 = *(_QWORD *)v49;
            v49 += 8;
            *(_QWORD *)v48 = v56;
            v48 += 8;
          }
          while (v49 != a2);
        }
        if (v48 != a7)
        {
          while (a2 != a3)
          {
            v57 = *(_QWORD *)a2;
            v58 = *(_QWORD *)a2 < *(_QWORD *)a7;
            if (*(_QWORD *)a2 >= *(_QWORD *)a7)
              v57 = *(_QWORD *)a7;
            a7 += 8 * (*(_QWORD *)a2 >= *(_QWORD *)a7);
            a2 += 8 * v58;
            *(_QWORD *)v12 = v57;
            v12 += 8;
            if (a7 == v48)
              return result;
          }
          return (char *)memmove(v12, a7, v48 - a7);
        }
      }
    }
    else if (a2 != a3)
    {
      v33 = a3 - a2 - 8;
      v34 = a7;
      v35 = a2;
      if (v33 < 0x18)
        goto LABEL_82;
      v34 = a7;
      v35 = a2;
      if ((unint64_t)(a7 - a2) < 0x20)
        goto LABEL_82;
      v36 = (v33 >> 3) + 1;
      v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = &a7[v37];
      v35 = &a2[v37];
      v38 = (__int128 *)(a2 + 16);
      v39 = a7 + 16;
      v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v41 = *v38;
        *(v39 - 1) = *(v38 - 1);
        *v39 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_82:
        do
        {
          v42 = *(_QWORD *)v35;
          v35 += 8;
          *(_QWORD *)v34 = v42;
          v34 += 8;
        }
        while (v35 != a3);
      }
      if (v34 != a7)
      {
        v43 = a3;
        while (a2 != v12)
        {
          v44 = *((_QWORD *)v34 - 1);
          v45 = *((_QWORD *)a2 - 1);
          v46 = v44 < v45;
          if (v44 <= v45)
            v44 = *((_QWORD *)a2 - 1);
          if (v46)
            a2 -= 8;
          else
            v34 -= 8;
          *((_QWORD *)a3 - 1) = v44;
          a3 -= 8;
          v43 -= 8;
          if (v34 == a7)
            return result;
        }
        v59 = v34 - a7 - 8;
        if (v59 < 0x58 || (unint64_t)(v34 - v43) < 0x20)
        {
          v60 = v34;
          v61 = a3;
LABEL_72:
          v62 = v61 - 8;
          do
          {
            v63 = *((_QWORD *)v60 - 1);
            v60 -= 8;
            *(_QWORD *)v62 = v63;
            v62 -= 8;
          }
          while (v60 != a7);
          return result;
        }
        v64 = 0;
        v65 = (v59 >> 3) + 1;
        v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
        v60 = &v34[-v66];
        v61 = &a3[-v66];
        v67 = v65 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v68 = *(_OWORD *)&v34[v64 - 16];
          v69 = &a3[v64];
          *((_OWORD *)v69 - 2) = *(_OWORD *)&v34[v64 - 32];
          *((_OWORD *)v69 - 1) = v68;
          v64 -= 32;
          v67 -= 4;
        }
        while (v67);
        if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_72;
      }
    }
  }
  return result;
}

__n128 llvm::SmallVectorTemplateBase<mlir::`anonymous namespace'::ArgPack,true>::growAndEmplaceBack<mlir::`anonymous namespace'::ArgPack>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  __n128 *v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  BOOL v9;
  char *v10;
  __int128 v11;
  uint64_t v12;

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(_QWORD *)a1;
  v5 = (__n128 *)&v11;
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v3 + 1;
    v9 = v4 + 24 * v3 > (unint64_t)&v11;
    if (v4 <= (unint64_t)&v11 && v9)
    {
      v10 = (char *)&v11 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      v4 = *(_QWORD *)a1;
      v5 = (__n128 *)&v10[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
      v4 = *(_QWORD *)a1;
      v5 = (__n128 *)&v11;
    }
  }
  v6 = (__n128 *)(v4 + 24 * *(unsigned int *)(a1 + 8));
  result = *v5;
  v6[1].n128_u64[0] = v5[1].n128_u64[0];
  *v6 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL mlir::hasUniqueValues(uint64_t a1)
{
  uint64_t NumElements;
  BOOL v3;
  llvm::APInt *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  llvm::APInt *v9;
  void **p_p;
  llvm::APInt *v11;
  unsigned int v12;
  void *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::APInt *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *__p;
  unsigned int v32;
  llvm::APInt *v33;
  uint64_t v34;
  _BYTE v35[64];
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v30 = a1;
  v33 = (llvm::APInt *)v35;
  v34 = 0x400000000;
  v37 = 0;
  v38 = 0;
  v36 = (uint64_t *)&v37;
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v27, a1, 0);
  NumElements = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v30);
  mlir::DenseElementsAttr::IntElementIterator::IntElementIterator(&v24, a1, NumElements);
  while (1)
  {
    v3 = v27 == v24 && v28 == v25;
    if (v3 && v29 == v26)
      break;
    mlir::DenseElementsAttr::IntElementIterator::operator*(&v27, (llvm::APInt *)&__p);
    if (v38)
      goto LABEL_10;
    v4 = v33;
    v5 = v34;
    if (!(_DWORD)v34)
      goto LABEL_19;
    LODWORD(v6) = v34;
    v7 = __p;
    v8 = 16 * v34;
    v9 = v33;
    while (*((_DWORD *)v9 + 2) > 0x40u)
    {
      if (llvm::APInt::equalSlowCase((const void **)v9, (const void **)&__p))
        goto LABEL_17;
LABEL_14:
      v9 = (llvm::APInt *)((char *)v9 + 16);
      v8 -= 16;
      if (!v8)
        goto LABEL_18;
    }
    if (*(void **)v9 != v7)
      goto LABEL_14;
LABEL_17:
    if (v8)
      goto LABEL_29;
LABEL_18:
    if (v5 >= 4)
    {
      do
      {
        std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](&v36, (llvm::APInt *)((char *)v33 + 16 * v6 - 16));
        v6 = (v34 - 1);
        LODWORD(v34) = v6;
        if (*((_DWORD *)v33 + 4 * v6 + 2) >= 0x41u)
        {
          v13 = (void *)*((_QWORD *)v33 + 2 * v6);
          if (v13)
          {
            operator delete[](v13);
            LODWORD(v6) = v34;
          }
        }
      }
      while ((_DWORD)v6);
LABEL_10:
      std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](&v36, (llvm::APInt *)&__p);
      goto LABEL_29;
    }
LABEL_19:
    if (v5 >= HIDWORD(v34))
    {
      v14 = v5 + 1;
      if (v4 <= (llvm::APInt *)&__p && (char *)v4 + 16 * v5 > (char *)&__p)
      {
        v15 = (char *)((char *)&__p - (char *)v4);
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v33, v14);
        v4 = v33;
        p_p = (void **)&v15[(_QWORD)v33];
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::APInt,false>::grow((uint64_t)&v33, v14);
        p_p = &__p;
        v4 = v33;
      }
    }
    else
    {
      p_p = &__p;
    }
    v11 = (llvm::APInt *)((char *)v4 + 16 * v34);
    v12 = *((_DWORD *)p_p + 2);
    *((_DWORD *)v11 + 2) = v12;
    if (v12 > 0x40)
      llvm::APInt::initSlowCase(v11, (const void **)p_p);
    else
      *(_QWORD *)v11 = *p_p;
    LODWORD(v34) = v34 + 1;
LABEL_29:
    if (v32 >= 0x41)
    {
      if (__p)
        operator delete[](__p);
    }
    ++v29;
  }
  v16 = mlir::DenseElementsAttr::getNumElements((mlir::DenseElementsAttr *)&v30);
  v17 = v34;
  v18 = v38;
  std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(v37);
  v19 = v33;
  if ((_DWORD)v34)
  {
    v20 = 16 * v34;
    do
    {
      if (*(_DWORD *)((char *)v19 + v20 - 8) >= 0x41u)
      {
        v21 = *(void **)((char *)v19 + v20 - 16);
        if (v21)
          operator delete[](v21);
      }
      v20 -= 16;
    }
    while (v20);
    v19 = v33;
  }
  if (v19 != (llvm::APInt *)v35)
    free(v19);
  if (v18)
    v22 = v18;
  else
    v22 = v17;
  return v16 == v22;
}

uint64_t mlir::getSI32TensorAttr(mlir::Builder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t IntegerType;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v19[0] = a3;
  IntegerType = mlir::Builder::getIntegerType(a1, 0x20u, 1);
  v6 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v19, 1, IntegerType, 0);
  v7 = v6;
  if (!v6)
    goto LABEL_10;
  v8 = *v6;
  v9 = mlir::TypeID::get<mlir::ShapedType>();
  v10 = *(unsigned int *)(v8 + 16);
  if (!(_DWORD)v10)
    goto LABEL_10;
  v11 = *(_QWORD **)(v8 + 8);
  v12 = &v11[2 * v10];
  do
  {
    v13 = v10 >> 1;
    v14 = &v11[2 * (v10 >> 1)];
    v16 = *v14;
    v15 = v14 + 2;
    v10 += ~(v10 >> 1);
    if (v16 < v9)
      v11 = v15;
    else
      v10 = v13;
  }
  while (v10);
  if (v11 != v12 && *v11 == v9)
    v17 = v11[1];
  else
LABEL_10:
    v17 = 0;
  return mlir::DenseElementsAttr::getFromRawBuffer(v7, v17, a2, 4 * a3, 4, 1, 1);
}

void std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(*a1);
    std::__tree<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::destroy(a1[1]);
    if (*((_DWORD *)a1 + 10) >= 0x41u)
    {
      v2 = (void *)a1[4];
      if (v2)
        operator delete[](v2);
    }
    operator delete(a1);
  }
}

uint64_t std::set<llvm::APInt,mlir::hasUniqueValues(mlir::DenseIntElementsAttr,std::optional<mlir::Location>)::APIntLess,std::allocator<llvm::APInt>>::insert[abi:nn180100](uint64_t **a1, llvm::APInt *this)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  llvm::APInt *v7;
  uint64_t result;
  _DWORD *v9;
  llvm::APInt *v10;
  unsigned int v11;
  uint64_t *v12;

  v5 = (uint64_t *)(a1 + 1);
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = (llvm::APInt *)(v4 + 4);
        if ((llvm::APInt::compare(this, (const llvm::APInt *)(v4 + 4)) & 0x80000000) == 0)
          break;
        v4 = (uint64_t *)*v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      result = llvm::APInt::compare(v7, this);
      if ((result & 0x80000000) == 0)
        break;
      v4 = (uint64_t *)v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t *)(a1 + 1);
LABEL_8:
    v9 = operator new(0x30uLL);
    v10 = (llvm::APInt *)(v9 + 8);
    v11 = *((_DWORD *)this + 2);
    v9[10] = v11;
    if (v11 > 0x40)
      llvm::APInt::initSlowCase(v10, (const void **)this);
    else
      *(_QWORD *)v10 = *(_QWORD *)this;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v6;
    *v5 = (uint64_t)v9;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v9 = (_DWORD *)*v5;
    }
    result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t mlir::writeConstantData(llvm::raw_ostream *a1, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  size_t ElementDataSize;
  uint64_t v6;
  uint64_t NumElements;
  uint64_t v8;
  void *v10[6];
  char v11;

  mlir::mps::CPUNDArray::CPUNDArray(v10, a2);
  v3 = (const char *)v10[5];
  if (v11)
  {
    if (mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v10) >= 1)
    {
      v4 = 0;
      do
      {
        ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)v10);
        llvm::raw_ostream::write(a1, v3, ElementDataSize);
        ++v4;
      }
      while (v4 < mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v10));
    }
  }
  else
  {
    v6 = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)v10);
    NumElements = mlir::mps::CPUNDArray::getNumElements((mlir::mps::CPUNDArray *)v10);
    llvm::raw_ostream::write(a1, v3, NumElements * v6);
  }
  if (*((_QWORD *)a1 + 4) != *((_QWORD *)a1 + 2))
    llvm::raw_ostream::flush_nonempty(a1);
  v8 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1)
     + *((_QWORD *)a1 + 4)
     - *((_QWORD *)a1 + 2);
  mlir::mps::CPUNDArray::~CPUNDArray(v10);
  return v8;
}

BOOL mlir::detail::is_constant_int_zero(_QWORD *a1)
{
  _BOOL8 v2;
  uint64_t DefiningOp;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *__p;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  if (*(_UNKNOWN **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(a1[1] & 0xFFFFFFFFFFFFFFF8)) + 136) != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    return 0;
  v15 = 0;
  v16 = 0;
  __p = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&__p);
  if (!DefiningOp)
    return 0;
  v5 = DefiningOp;
  v6 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 48) + 32))(*(_QWORD *)(v5 + 48), v6))
    return 0;
  v17 = v19;
  v18 = 0x100000000;
  mlir::Operation::fold(v5, 0, 0, (uint64_t)&v17);
  v7 = llvm::DefaultDoCastIfPossible<mlir::ElementsAttr,mlir::Attribute const,llvm::CastInfo<mlir::ElementsAttr,mlir::Attribute const,void>>::doCastIfPossible((uint64_t *)(*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8));
  v2 = (_BOOL8)v7;
  if (v7)
  {
    v15 = v7;
    v16 = v8;
  }
  if (v17 != v19)
    free(v17);
  if (v2)
  {
    if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v15))
    {
      mlir::ElementsAttr::value_begin<llvm::APInt>((mlir::BranchOpInterface *)&v15, (uint64_t)&v17);
      if (BYTE1(v17))
        v9 = 0;
      else
        v9 = v19[0];
      if ((_BYTE)v17)
      {
        v10 = v18 + 16 * v9;
        v14 = *(_DWORD *)(v10 + 8);
        if (v14 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)v10);
        else
          __p = *(void **)v10;
      }
      else
      {
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v18 + 24))(&__p);
      }
      if (!(_BYTE)v17)
      {
        v11 = v18;
        v18 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      v12 = v14;
      if (v14 <= 0x40)
        return __p == 0;
      v2 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) == v12;
      if (__p)
        operator delete[](__p);
      return v2;
    }
    return 0;
  }
  return v2;
}

BOOL mlir::isConstantFPZero(uint64_t a1)
{
  return mlir::detail::is_constant_fp_value<unsigned long long>(a1, 0);
}

BOOL mlir::detail::is_constant_fp_value<unsigned long long>(uint64_t a1, unint64_t a2)
{
  void *v4;
  uint64_t DefiningOp;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  float v23;
  void *v24;
  llvm::APFloatBase *v25;
  unint64_t matched;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v4 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  v28 = 0;
  v29 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  if (DefiningOp)
  {
    v17 = DefiningOp;
    v18 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v17 + 48) + 32))(*(_QWORD *)(v17 + 48), v18))
    {
      v30 = v32;
      v31 = 0x100000000;
      mlir::Operation::fold(v17, 0, 0, (uint64_t)&v30);
      v19 = *(_QWORD *)v30;
      v20 = mlir::DenseFPElementsAttr::classof(*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8);
      v21 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) != 0)
        v22 = v20;
      else
        v22 = 0;
      if (v22 == 1)
        v28 = v21;
      if (v30 != v32)
        free(v30);
      if (v22 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v28, (uint64_t)&v30);
        v23 = llvm::APFloat::convertToFloat(&v30);
        v24 = (void *)v31;
        if (llvm::APFloatBase::PPCDoubleDouble(v25) == v24)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v31);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v31);
        return v23 == (float)a2;
      }
    }
  }
  matched = mlir::matchConstantWithFloatValue<float>(a1);
  if ((matched & 0xFF00000000) != 0)
  {
    v23 = *(float *)&matched;
    return v23 == (float)a2;
  }
  return 0;
}

BOOL mlir::isConstantFPOne(uint64_t a1)
{
  return mlir::detail::is_constant_fp_value<unsigned long long>(a1, 1uLL);
}

BOOL mlir::isConstantFPTwo(uint64_t a1)
{
  return mlir::detail::is_constant_fp_value<unsigned long long>(a1, 2uLL);
}

BOOL mlir::detail::is_constant_fp_value<float>(uint64_t a1, float a2)
{
  void *v4;
  uint64_t DefiningOp;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  float v23;
  void *v24;
  llvm::APFloatBase *v25;
  unint64_t matched;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v4 = *(void **)(*(_QWORD *)mlir::getElementTypeOrSelf((_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8)) + 136);
  if (v4 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v4 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    return 0;
  }
  v28 = 0;
  v29 = a1;
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v29);
  if (DefiningOp)
  {
    v17 = DefiningOp;
    v18 = mlir::TypeID::get<mlir::OpTrait::ConstantLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ConstantLike>(void)::Empty>>();
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v17 + 48) + 32))(*(_QWORD *)(v17 + 48), v18))
    {
      v30 = v32;
      v31 = 0x100000000;
      mlir::Operation::fold(v17, 0, 0, (uint64_t)&v30);
      v19 = *(_QWORD *)v30;
      v20 = mlir::DenseFPElementsAttr::classof(*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8);
      v21 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) != 0)
        v22 = v20;
      else
        v22 = 0;
      if (v22 == 1)
        v28 = v21;
      if (v30 != v32)
        free(v30);
      if (v22 && mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v28))
      {
        mlir::DenseElementsAttr::getSplatValue<llvm::APFloat>((mlir::DenseElementsAttr *)&v28, (uint64_t)&v30);
        v23 = llvm::APFloat::convertToFloat(&v30);
        v24 = (void *)v31;
        if (llvm::APFloatBase::PPCDoubleDouble(v25) == v24)
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v31);
        else
          llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v31);
        return v23 == a2;
      }
    }
  }
  matched = mlir::matchConstantWithFloatValue<float>(a1);
  if ((matched & 0xFF00000000) != 0)
  {
    v23 = *(float *)&matched;
    return v23 == a2;
  }
  return 0;
}

uint64_t mlir::mps::getBNNSDataType(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t ElementTypeOrSelf;

  v1 = 65552;
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  if (mlir::Type::isF32((mlir::Type *)&ElementTypeOrSelf))
    return 65568;
  if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
    return v1;
  if (mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf))
    return 98320;
  v1 = 262152;
  if (mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 64))
    return 262208;
  if (mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 32))
    return 262176;
  if (mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 16))
    return 262160;
  if (mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 8))
    return v1;
  if (mlir::Type::isInteger((mlir::Type *)&ElementTypeOrSelf, 1))
    return 1048584;
  result = (uint64_t)mlir::Type::dump((mlir::Type *)&ElementTypeOrSelf);
  __break(1u);
  return result;
}

uint64_t mlir::mps::CPUNDArray::CPUNDArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Type;
  uint64_t v5;
  uint64_t v6;
  _BYTE *ElementsAttrRawData;
  uint64_t v8;
  uint64_t v9;
  BOOL isInteger;
  size_t ElementDataSize;
  unint64_t v12;
  size_t *v13;
  unint64_t v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  size_t *v20;
  size_t *v21;
  size_t *v23;
  size_t v24;
  uint64_t *Value;
  uint64_t v27;
  size_t NumElements;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64x2_t v37;
  int32x2_t v38;
  uint64_t v39;
  int32x2_t v40;
  int32x2_t v41;
  int32x2_t v42;
  uint64_t v44;
  uint64_t RHS;
  uint64_t v46;
  uint64_t v47[2];

  v47[0] = a2;
  v47[1] = a3;
  Type = mlir::ElementsAttr::getType((mlir::ElementsAttr *)v47);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = Type;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(_QWORD *)(a1 + 32) = v5;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(_QWORD *)(a1 + 16) = v6;
  ElementsAttrRawData = (_BYTE *)mlir::getElementsAttrRawData(v47[0]);
  v9 = v8;
  isInteger = 0;
  if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v47))
  {
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1) + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && (v46 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1),
          mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v46) <= 7))
    {
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
      isInteger = 1;
      if (!mlir::Type::isInteger((mlir::Type *)&RHS, 1))
      {
        v44 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
        isInteger = mlir::Type::isInteger((mlir::Type *)&v44, 4);
      }
    }
    else
    {
      isInteger = 1;
    }
  }
  *(_BYTE *)(a1 + 49) = isInteger;
  ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)a1);
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 <= 1)
    v12 = 1;
  v13 = *(size_t **)(a1 + 56);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v13) >> 3;
  if (v12 <= v14)
  {
    if (v12 < v14)
      *(_QWORD *)(a1 + 64) = &v13[v12];
  }
  else
  {
    std::vector<long long>::__append(a1 + 56, v12 - v14);
    v13 = *(size_t **)(a1 + 56);
  }
  v15 = *(unsigned __int8 *)(a1 + 49);
  if (*(_BYTE *)(a1 + 49))
    v16 = 0;
  else
    v16 = ElementDataSize;
  *v13 = v16;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 >= 2)
  {
    v18 = -1;
    for (i = 1; i < v17; ++i)
    {
      if (v15)
        v16 = 0;
      else
        v16 *= *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v17 + v18));
      v13[i] = v16;
      v17 = *(_QWORD *)(a1 + 16);
      --v18;
    }
  }
  v20 = *(size_t **)(a1 + 64);
  v21 = v20 - 1;
  if (v13 != v20 && v21 > v13)
  {
    v23 = v13 + 1;
    do
    {
      v24 = *(v23 - 1);
      *(v23 - 1) = *v21;
      *v21-- = v24;
    }
    while (v23++ < v21);
  }
  if (v15)
  {
    *(_BYTE *)(a1 + 48) = 1;
    *(_QWORD *)(a1 + 40) = malloc(ElementDataSize);
    v46 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
    if (mlir::Type::isInteger((mlir::Type *)&v46, 1))
      **(_BYTE **)(a1 + 40) = *ElementsAttrRawData != 0;
    else
      memcpy(*(void **)(a1 + 40), ElementsAttrRawData, ElementDataSize);
    return a1;
  }
  v46 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)a1);
  if (!mlir::Type::isInteger((mlir::Type *)&v46, 1))
  {
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 40) = ElementsAttrRawData;
    return a1;
  }
  *(_BYTE *)(a1 + 48) = 1;
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  NumElements = mlir::ShapedType::getNumElements(Value, v27);
  v29 = (char *)malloc(NumElements);
  *(_QWORD *)(a1 + 40) = v29;
  v30 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  v32 = mlir::ShapedType::getNumElements(v30, v31);
  if (v9)
  {
    v33 = (BOOL *)(v29 + 3);
    do
    {
      if (v32 >= 8)
        v34 = 8;
      else
        v34 = v32;
      if (!v34)
        goto LABEL_34;
      if (v32 >= 8)
        v35 = 8;
      else
        v35 = v32;
      v36 = *ElementsAttrRawData;
      v37 = (uint64x2_t)vdupq_n_s64(v35 - 1);
      v38 = vmovn_s64((int64x2_t)vcgeq_u64(v37, (uint64x2_t)xmmword_181233120));
      if ((v38.i8[0] & 1) != 0)
        *(v33 - 3) = v36 & 1;
      if ((v38.i8[4] & 1) != 0)
        *(v33 - 2) = (v36 & 2) != 0;
      v39 = ((_BYTE)v35 + 1) & 0x1E;
      if (v39 == 2)
        goto LABEL_34;
      v40 = vmovn_s64((int64x2_t)vcgtq_u64(v37, (uint64x2_t)xmmword_181233160));
      if ((v40.i8[0] & 1) != 0)
      {
        *(v33 - 1) = (v36 & 4) != 0;
        if ((v40.i8[4] & 1) != 0)
          goto LABEL_52;
      }
      else if ((v40.i8[4] & 1) != 0)
      {
LABEL_52:
        *v33 = (v36 & 8) != 0;
        if (v39 == 4)
          goto LABEL_34;
        goto LABEL_53;
      }
      if (v39 == 4)
        goto LABEL_34;
LABEL_53:
      v41 = vmovn_s64((int64x2_t)vcgtq_u64(v37, (uint64x2_t)xmmword_181233170));
      if ((v41.i8[0] & 1) != 0)
      {
        v33[1] = (v36 & 0x10) != 0;
        if ((v41.i8[4] & 1) == 0)
          goto LABEL_55;
      }
      else if ((v41.i8[4] & 1) == 0)
      {
LABEL_55:
        if (v39 != 6)
          goto LABEL_59;
        goto LABEL_34;
      }
      v33[2] = (v36 & 0x20) != 0;
      if (v39 != 6)
      {
LABEL_59:
        v42 = vmovn_s64((int64x2_t)vcgtq_u64(v37, (uint64x2_t)xmmword_181233180));
        if ((v42.i8[0] & 1) != 0)
          v33[3] = (v36 & 0x40) != 0;
        if ((v42.i8[4] & 1) != 0)
          v33[4] = v36 >> 7;
      }
LABEL_34:
      ++ElementsAttrRawData;
      v33 += 8;
      v32 -= 8;
      --v9;
    }
    while (v9);
  }
  return a1;
}

uint64_t mlir::mps::CPUNDArray::getElementDataSize(mlir::mps::CPUNDArray *this)
{
  uint64_t RHS;
  uint64_t Value;

  if (*(_UNKNOWN **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS(this) + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    RHS = mlir::AffineBinaryOpExpr::getRHS(this);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&RHS);
    return ((mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value) + 7) >> 2) & 0x3FFFFFFE;
  }
  else
  {
    Value = mlir::AffineBinaryOpExpr::getRHS(this);
    return (mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&Value) + 7) >> 3;
  }
}

uint64_t mlir::mps::CPUNDArray::CPUNDArray(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  uint64_t **v7;
  uint64_t ArgAttrsAttr;
  uint64_t v9;
  uint64_t v10;
  uint64_t OperandRange;
  uint64_t v12;
  uint64_t v13;
  uint64_t ElementDataSize;
  uint64_t *Value;
  uint64_t v16;
  uint64_t NumElements;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD v34[2];

  v34[0] = a2;
  v34[1] = a3;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = 0;
  v7 = (uint64_t **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 48) = 0;
  ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v34);
  v10 = v9;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v34);
  *(_QWORD *)a1 = mlir::RankedTensorType::get(ArgAttrsAttr, v10, OperandRange, 0);
  *v6 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(_QWORD *)(a1 + 32) = v12;
  mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  *(_QWORD *)(a1 + 16) = v13;
  ElementDataSize = mlir::mps::CPUNDArray::getElementDataSize((mlir::mps::CPUNDArray *)a1);
  Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)a1);
  NumElements = mlir::ShapedType::getNumElements(Value, v16);
  if (NumElements == 1)
    v18 = 1;
  else
    v18 = a4;
  *(_BYTE *)(a1 + 49) = v18;
  if (*(_QWORD *)(a1 + 16) <= 1uLL)
    v19 = 1;
  else
    v19 = *(_QWORD *)(a1 + 16);
  v20 = *v7;
  v21 = (uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)*v7) >> 3;
  if (v19 <= v21)
  {
    if (v19 < v21)
      *(_QWORD *)(a1 + 64) = &v20[v19];
  }
  else
  {
    std::vector<long long>::__append((uint64_t)v7, v19 - v21);
    v18 = *(unsigned __int8 *)(a1 + 49);
    v20 = *(uint64_t **)(a1 + 56);
  }
  if (v18)
    v22 = 0;
  else
    v22 = ElementDataSize;
  *v20 = v22;
  v23 = *(_QWORD *)(a1 + 16);
  if (v23 >= 2)
  {
    v24 = -1;
    for (i = 1; i < v23; ++i)
    {
      if (v18)
        v22 = 0;
      else
        v22 *= *(_QWORD *)(*v6 + 8 * (v23 + v24));
      v20[i] = v22;
      v23 = *(_QWORD *)(a1 + 16);
      --v24;
    }
  }
  v26 = *(uint64_t **)(a1 + 64);
  v27 = v26 - 1;
  if (v20 != v26 && v27 > v20)
  {
    v29 = v20 + 1;
    do
    {
      v30 = *(v29 - 1);
      *(v29 - 1) = *v27;
      *v27-- = v30;
    }
    while (v29++ < v27);
  }
  *(_BYTE *)(a1 + 48) = 1;
  if (v18)
    v32 = 1;
  else
    v32 = NumElements;
  *(_QWORD *)(a1 + 40) = malloc(v32 * ElementDataSize);
  return a1;
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      abort();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

uint64_t mlir::mps::CPUNDArray::getNumElements(mlir::mps::CPUNDArray *this)
{
  uint64_t *Value;
  uint64_t v2;

  Value = (uint64_t *)mlir::ArrayAttr::getValue(this);
  return mlir::ShapedType::getNumElements(Value, v2);
}

uint64_t mlir::mps::CPUNDArray::tryMakeAliasedArray@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ArgAttrsAttr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t OperandRange;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v13);
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v13);
    v8 = v7;
    v9 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v13);
    v10 = (_QWORD *)mlir::RankedTensorType::get(ArgAttrsAttr, v8, v9, 0);
    mlir::tryCreateMutableElementsAttr(v10, (__n128 **)a3);
    if (*(_QWORD *)a3)
      return mlir::mps::CPUNDArray::CPUNDArray(a4, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  }
  return mlir::mps::CPUNDArray::CPUNDArray(a4, v13, v14, 0);
}

void mlir::mps::CPUNDArray::~CPUNDArray(void **this)
{
  void *v2;

  if (*((_BYTE *)this + 48))
    free(this[5]);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
}

BOOL mlir::mps::CPUNDArray::isComplexType(mlir::mps::CPUNDArray *this)
{
  return *(_QWORD *)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS(this) + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
}

_QWORD *mlir::mps::CPUNDArray::getElementsAttr(mlir::mps::CPUNDArray *this, int a2, int a3)
{
  unint64_t NumElements;
  uint64_t *Value;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  int v34;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v72;
  float v73;
  float v83;
  float v84;
  uint64_t v85;
  void *v86;
  float v87;
  float *v88;
  float v89;
  float v90;
  __int16 *v100;
  uint64_t v106;
  uint64_t v107;
  uint64_t RHS;

  if (*((_BYTE *)this + 49))
  {
    NumElements = 1;
  }
  else
  {
    Value = (uint64_t *)mlir::ArrayAttr::getValue(this);
    NumElements = mlir::ShapedType::getNumElements(Value, v8);
  }
  RHS = mlir::AffineBinaryOpExpr::getRHS(this);
  if (mlir::Type::isInteger((mlir::Type *)&RHS, 1))
  {
    v9 = (_BYTE *)*((_QWORD *)this + 5);
    v10 = *(uint64_t **)this;
    if (a2)
    {
      if (!v10)
        goto LABEL_15;
      v11 = *v10;
      v12 = mlir::TypeID::get<mlir::ShapedType>();
      v13 = *(unsigned int *)(v11 + 16);
      if (!(_DWORD)v13)
        goto LABEL_15;
      v14 = *(_QWORD **)(v11 + 8);
      v15 = &v14[2 * v13];
      do
      {
        v16 = v13 >> 1;
        v17 = &v14[2 * (v13 >> 1)];
        v19 = *v17;
        v18 = v17 + 2;
        v13 += ~(v13 >> 1);
        if (v19 < v12)
          v14 = v18;
        else
          v13 = v16;
      }
      while (v13);
      if (v14 != v15 && *v14 == v12)
        v20 = v14[1];
      else
LABEL_15:
        v20 = 0;
      v21 = (_QWORD *)mlir::DenseElementsAttr::get((uint64_t)v10, v20, v9, NumElements);
      v22 = v21;
      if (v21)
      {
        v23 = *v21;
        v24 = mlir::TypeID::get<mlir::ElementsAttr>();
        v25 = *(unsigned int *)(v23 + 16);
        if ((_DWORD)v25)
        {
          v26 = *(_QWORD **)(v23 + 8);
          do
          {
            v27 = v25 >> 1;
            v28 = &v26[2 * (v25 >> 1)];
            v30 = *v28;
            v29 = v28 + 2;
            v25 += ~(v25 >> 1);
            if (v30 < v24)
              v26 = v29;
            else
              v25 = v27;
          }
          while (v25);
        }
      }
      return v22;
    }
    return mlir::createElementsAttr<BOOL>(v10, v9, NumElements);
  }
  if (a3 && NumElements >= 2)
  {
    v31 = (unsigned __int8 *)*((_QWORD *)this + 5);
    RHS = mlir::AffineBinaryOpExpr::getRHS(this);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 8))
    {
      v32 = *v31;
      if (v32 != v31[1])
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v34 = v31[v33++];
        if (v32 != v34)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 8))
    {
      v36 = *v31;
      if (v36 != v31[1])
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v37 = v31[v33++];
        if (v36 != v37)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 16))
    {
      v38 = *(unsigned __int16 *)v31;
      if (v38 != *((unsigned __int16 *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v39 = *(unsigned __int16 *)&v31[2 * v33++];
        if (v38 != v39)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 16))
    {
      v40 = *(unsigned __int16 *)v31;
      if (v40 != *((unsigned __int16 *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v41 = *(unsigned __int16 *)&v31[2 * v33++];
        if (v40 != v41)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 32))
    {
      if (*(_DWORD *)v31 != *((_DWORD *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v42 = *(_DWORD *)&v31[4 * v33++];
        if (*(_DWORD *)v31 != v42)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 32))
    {
      if (*(_DWORD *)v31 != *((_DWORD *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v43 = *(_DWORD *)&v31[4 * v33++];
        if (*(_DWORD *)v31 != v43)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&RHS, 64))
    {
      if (*(_QWORD *)v31 != *((_QWORD *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v44 = *(_QWORD *)&v31[8 * v33++];
        if (*(_QWORD *)v31 != v44)
          goto LABEL_75;
      }
      goto LABEL_76;
    }
    if (mlir::Type::isInteger((mlir::Type *)&RHS, 64))
    {
      if (*(_QWORD *)v31 != *((_QWORD *)v31 + 1))
        goto LABEL_77;
      v33 = 2;
      while (NumElements != v33)
      {
        v45 = *(_QWORD *)&v31[8 * v33++];
        if (*(_QWORD *)v31 != v45)
        {
LABEL_75:
          if (v33 - 1 < NumElements)
            goto LABEL_77;
          goto LABEL_76;
        }
      }
      goto LABEL_76;
    }
    if (mlir::Type::isF32((mlir::Type *)&RHS))
    {
      if (*(float *)v31 == *((float *)v31 + 1))
      {
        v72 = 2;
        while (NumElements != v72)
        {
          v73 = *(float *)&v31[4 * v72++];
          if (*(float *)v31 != v73)
            goto LABEL_117;
        }
LABEL_76:
        NumElements = 1;
      }
    }
    else if (mlir::Type::isF16((mlir::Type *)&RHS))
    {
      _H0 = *(_WORD *)v31;
      _H1 = *((_WORD *)v31 + 1);
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      if (_S0 == _S1)
      {
        v72 = 2;
        while (NumElements != v72)
        {
          _H1 = *(_WORD *)&v31[2 * v72];
          __asm { FCVT            S1, H1 }
          ++v72;
          if (_S0 != _S1)
            goto LABEL_117;
        }
        goto LABEL_76;
      }
    }
    else if (mlir::Type::isBF16((mlir::Type *)&RHS))
    {
      LODWORD(v83) = *(unsigned __int16 *)v31 << 16;
      if (v83 == COERCE_FLOAT(*((unsigned __int16 *)v31 + 1) << 16))
      {
        v72 = 2;
        while (NumElements != v72)
        {
          LODWORD(v84) = *(unsigned __int16 *)&v31[2 * v72++] << 16;
          if (v83 != v84)
            goto LABEL_117;
        }
        goto LABEL_76;
      }
    }
    else
    {
      v85 = RHS;
      v86 = *(void **)(*(_QWORD *)RHS + 136);
      if (v86 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        v85 = 0;
      v107 = v85;
      if (v86 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v106 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v107);
        if (mlir::Type::isF32((mlir::Type *)&v106))
        {
          if (*(float *)v31 == *((float *)v31 + 2))
          {
            v87 = *((float *)v31 + 1);
            if (v87 == *((float *)v31 + 3))
            {
              v88 = (float *)(v31 + 20);
              v72 = 2;
              while (NumElements != v72)
              {
                v89 = *(v88 - 1);
                v90 = *v88;
                ++v72;
                v88 += 2;
                _ZF = *(float *)v31 == v89 && v87 == v90;
                if (!_ZF)
                  goto LABEL_117;
              }
              goto LABEL_76;
            }
          }
        }
        else
        {
          v106 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v107);
          if (mlir::Type::isF32((mlir::Type *)&v106))
          {
            _H0 = *(_WORD *)v31;
            _H1 = *((_WORD *)v31 + 2);
            __asm
            {
              FCVT            S1, H1
              FCVT            S0, H0
            }
            if (_S0 == _S1)
            {
              _H1 = *((_WORD *)v31 + 1);
              _H2 = *((_WORD *)v31 + 3);
              __asm
              {
                FCVT            S2, H2
                FCVT            S1, H1
              }
              if (_S1 == _S2)
              {
                v100 = (__int16 *)(v31 + 10);
                v72 = 2;
                while (NumElements != v72)
                {
                  _H2 = *(v100 - 1);
                  _H3 = *v100;
                  __asm { FCVT            S2, H2 }
                  ++v72;
                  v100 += 2;
                  __asm { FCVT            S2, H3 }
                  if (!_ZF || _S1 != _S2)
                  {
LABEL_117:
                    if (v72 - 1 >= NumElements)
                      goto LABEL_76;
                    goto LABEL_77;
                  }
                }
                goto LABEL_76;
              }
            }
          }
        }
      }
    }
  }
LABEL_77:
  v46 = (const void *)*((_QWORD *)this + 5);
  v50 = mlir::mps::CPUNDArray::getElementDataSize(this) * NumElements;
  v51 = *(uint64_t **)this;
  if (!a2)
    return mlir::createRawElementsAttr(v51, v46, (const void *)v50);
  if (!v51)
    goto LABEL_87;
  v52 = *v51;
  v53 = mlir::TypeID::get<mlir::ShapedType>();
  v54 = *(unsigned int *)(v52 + 16);
  if (!(_DWORD)v54)
    goto LABEL_87;
  v55 = *(_QWORD **)(v52 + 8);
  v56 = &v55[2 * v54];
  do
  {
    v57 = v54 >> 1;
    v58 = &v55[2 * (v54 >> 1)];
    v60 = *v58;
    v59 = v58 + 2;
    v54 += ~(v54 >> 1);
    if (v60 < v53)
      v55 = v59;
    else
      v54 = v57;
  }
  while (v54);
  if (v55 != v56 && *v55 == v53)
    v61 = v55[1];
  else
LABEL_87:
    v61 = 0;
  v62 = (_QWORD *)mlir::DenseElementsAttr::getFromRawBuffer(v51, v61, v46, v50, v47, v48, v49);
  v22 = v62;
  if (v62)
  {
    v63 = *v62;
    v64 = mlir::TypeID::get<mlir::ElementsAttr>();
    v65 = *(unsigned int *)(v63 + 16);
    if ((_DWORD)v65)
    {
      v66 = *(_QWORD **)(v63 + 8);
      do
      {
        v67 = v65 >> 1;
        v68 = &v66[2 * (v65 >> 1)];
        v70 = *v68;
        v69 = v68 + 2;
        v65 += ~(v65 >> 1);
        if (v70 < v64)
          v66 = v69;
        else
          v65 = v67;
      }
      while (v65);
    }
  }
  return v22;
}

BOOL mlir::mps::CPUNDArray::isFloatType(mlir::mps::CPUNDArray *this)
{
  void *v1;

  v1 = *(void **)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS(this) + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  return v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
}

BOOL mlir::mps::CPUNDArray::isIntegerType(mlir::mps::CPUNDArray *this)
{
  return *(_QWORD *)(*(_QWORD *)mlir::AffineBinaryOpExpr::getRHS(this) + 136) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
}

float mlir::mps::CPUNDArray::getSplatFloatValue(mlir::mps::CPUNDArray *this)
{
  uint64_t RHS;
  void *v3;
  float result;
  _BOOL4 isBF16;
  uint64_t v21;

  RHS = mlir::AffineBinaryOpExpr::getRHS(this);
  v3 = *(void **)(*(_QWORD *)RHS + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v3 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    RHS = 0;
  }
  v21 = RHS;
  if (mlir::Type::isF32((mlir::Type *)&v21))
    return **((float **)this + 5);
  if (mlir::Type::isF16((mlir::Type *)&v21))
  {
    _H0 = **((_WORD **)this + 5);
    __asm { FCVT            S0, H0 }
  }
  else
  {
    isBF16 = mlir::Type::isBF16((mlir::Type *)&v21);
    result = 0.0;
    if (isBF16)
      LODWORD(result) = **((unsigned __int16 **)this + 5) << 16;
  }
  return result;
}

uint64_t mlir::mps::CPUNDArray::getSplatIntegerValue(mlir::mps::CPUNDArray *this)
{
  uint64_t RHS;
  uint64_t v3;
  int Width;
  uint64_t result;
  uint64_t v6;

  RHS = mlir::AffineBinaryOpExpr::getRHS(this);
  if (*(_UNKNOWN **)(*(_QWORD *)RHS + 136) == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    v3 = RHS;
  else
    v3 = 0;
  v6 = v3;
  Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v6);
  result = 0;
  switch(Width)
  {
    case 1:
    case 4:
    case 8:
      result = **((char **)this + 5);
      break;
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return result;
    case 16:
      result = **((__int16 **)this + 5);
      break;
    case 32:
      result = **((int **)this + 5);
      break;
    default:
      if (Width == 64)
        result = **((_QWORD **)this + 5);
      break;
  }
  return result;
}

float mlir::mps::CPUNDArray::getSplatComplexValue(__int16 **this)
{
  float result;
  _BOOL4 isF16;
  __int16 *v4;
  uint64_t Value;
  uint64_t RHS;

  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)this);
  Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&RHS);
  if (mlir::Type::isF32((mlir::Type *)&Value))
    return *(float *)this[5];
  isF16 = mlir::Type::isF16((mlir::Type *)&Value);
  result = 0.0;
  if (isF16)
  {
    v4 = this[5];
    _H0 = *v4;
    __asm { FCVT            S0, H0 }
    _H1 = v4[1];
    __asm { FCVT            S1, H1 }
  }
  return result;
}

void mlir::mps::CPUNDArrayKernel::cpuTilingEngine(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char *v50;
  char *v51;
  void (*v52)(uint64_t *, uint64_t **, char **, char **, uint64_t, uint64_t, uint64_t);
  int64_t v53;
  char *v54;
  char *v55;
  int64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v66;
  size_t __sz;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;

  v12 = *(uint64_t **)a4;
  v11 = *(_QWORD *)(a4 + 8);
  v13 = v11 - *(_QWORD *)a4;
  if (v11 == *(_QWORD *)a4)
  {
    v14 = 0;
    v74 = 0;
  }
  else
  {
    if (v13 < 0)
      goto LABEL_77;
    v14 = (char *)operator new(v11 - (_QWORD)v12);
    v74 = &v14[8 * (v13 >> 3)];
    memcpy(v14, v12, v13);
  }
  v16 = *(uint64_t **)a5;
  v15 = *(_QWORD *)(a5 + 8);
  v17 = v15 - *(_QWORD *)a5;
  if (v15 == *(_QWORD *)a5)
  {
    v18 = 0;
    v73 = 0;
  }
  else
  {
    if (v17 < 0)
      goto LABEL_77;
    v18 = (char *)operator new(v15 - *(_QWORD *)a5);
    v73 = &v18[8 * (v17 >> 3)];
    memcpy(v18, v16, v17);
  }
  v64 = a7;
  if (*(_QWORD *)(a1 + 8) + a6 >= a7)
  {
    v52 = *(void (**)(uint64_t *, uint64_t **, char **, char **, uint64_t, uint64_t, uint64_t))a1;
    v85 = 0;
    v86 = 0;
    v84 = 0;
    v53 = v74 - v14;
    if (v74 != v14)
    {
      if (v53 < 0)
        goto LABEL_77;
      v54 = (char *)operator new(v74 - v14);
      v55 = &v54[8 * (v53 >> 3)];
      v84 = v54;
      v86 = v55;
      memcpy(v54, v14, v53);
      v85 = v55;
      a7 = v64;
    }
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v56 = v73 - v18;
    if (v73 == v18)
    {
LABEL_68:
      v52(a2, a3, &v84, &v81, a6, a7, a8);
      if (v81)
      {
        v82 = v81;
        operator delete(v81);
      }
      if (v84)
      {
        v85 = v84;
        operator delete(v84);
      }
      goto LABEL_72;
    }
    if ((v56 & 0x8000000000000000) == 0)
    {
      v57 = (char *)operator new(v73 - v18);
      v58 = &v57[8 * (v56 >> 3)];
      v81 = v57;
      v83 = v58;
      memcpy(v57, v18, v56);
      v82 = v58;
      a7 = v64;
      goto LABEL_68;
    }
LABEL_77:
    abort();
  }
  v19 = **a3;
  v20 = *(_QWORD *)(v19 + 16);
  v72 = 1;
  v21 = (v20 & (a6 >> 63)) + a6;
  if (v21 < 0 || !v20 || (v72 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * v21), v72 >= 1))
  {
    v22 = 0;
    v71 = a7 - a6;
    __sz = v74 - v14;
    v23 = (v74 - v14) >> 3;
    v24 = a6 - a7;
    v25 = (int)a6 - (int)a7;
    v26 = v73 - v18;
    v27 = (v73 - v18) >> 3;
    v66 = a6 + 1;
    v59 = v27;
    v60 = v23;
    if (v23 <= 1)
      v23 = 1;
    if (v27 <= 1)
      v27 = 1;
    v61 = v27;
    v62 = v23;
    do
    {
      if (v71 <= *(_QWORD *)(a1 + 8))
        goto LABEL_20;
      if (v74 != v14)
      {
        v28 = v62;
        v29 = *(uint64_t **)a4;
        v30 = *a2;
        v31 = v14;
        do
        {
          v32 = *(_QWORD **)v30;
          if (*(_BYTE *)(*(_QWORD *)v30 + 49)
            || ((v35 = v32[2], v24 < 0) ? (v36 = v32[2]) : (v36 = 0),
                (v37 = v36 + v25, v37 < 0)
             || (v37 <= (int)v35 - 1 ? (v38 = v35 == 0) : (v38 = 1), v38 || *(_QWORD *)(v32[3] + 8 * v37) == 1)))
          {
            v33 = 0;
          }
          else
          {
            v33 = *(_QWORD *)(v32[7] + 8 * v37);
          }
          v34 = *v29++;
          *v31++ = v34 + v33 * v22;
          v30 += 8;
          --v28;
        }
        while (v28);
      }
      if (v73 != v18)
      {
        v39 = *(uint64_t **)a5;
        v40 = *a3;
        v41 = v18;
        v42 = v61;
        do
        {
          v43 = (_QWORD *)*v40;
          if (*(_BYTE *)(*v40 + 49)
            || ((v46 = v43[2], v24 < 0) ? (v47 = v43[2]) : (v47 = 0),
                (v48 = v47 + v25, v48 < 0)
             || (v48 <= (int)v46 - 1 ? (v49 = v46 == 0) : (v49 = 1), v49 || *(_QWORD *)(v43[3] + 8 * v48) == 1)))
          {
            v44 = 0;
          }
          else
          {
            v44 = *(_QWORD *)(v43[7] + 8 * v48);
          }
          v45 = *v39++;
          *v41++ = v45 + v44 * v22;
          ++v40;
          --v42;
        }
        while (v42);
      }
      v78 = 0;
      v79 = 0;
      v80 = 0;
      if (v74 == v14)
      {
        v50 = 0;
      }
      else
      {
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_77;
        v50 = (char *)operator new(__sz);
        v78 = v50;
        v80 = &v50[8 * v60];
        memcpy(v50, v14, __sz);
        v79 = &v50[8 * v60];
      }
      v75 = 0;
      v76 = 0;
      v77 = 0;
      if (v73 == v18)
      {
        mlir::mps::CPUNDArrayKernel::cpuTilingEngine(a1, a2, a3, &v78, &v75, v66, a7, a8);
        if (v50)
          goto LABEL_19;
      }
      else
      {
        if ((v26 & 0x8000000000000000) != 0)
          goto LABEL_77;
        v51 = (char *)operator new(v26);
        v75 = v51;
        v77 = &v51[8 * v59];
        memcpy(v51, v18, v26);
        v76 = &v51[8 * v59];
        a7 = v64;
        mlir::mps::CPUNDArrayKernel::cpuTilingEngine(a1, a2, a3, &v78, &v75, v66, v64, a8);
        v76 = v51;
        operator delete(v51);
        if (v50)
        {
LABEL_19:
          v79 = v50;
          operator delete(v50);
        }
      }
LABEL_20:
      ++v22;
    }
    while (v22 != v72);
  }
LABEL_72:
  if (v18)
    operator delete(v18);
  if (v14)
    operator delete(v14);
}

void mlir::mps::CPUNDArrayArithmeticBinaryKernel::arithmeticBinaryTileKernel(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  const void *v21;
  int64_t v22;
  char *v23;
  char *v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  const void *v30;
  int64_t v31;
  char *v32;
  char *v33;
  const void *v34;
  int64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  const void *v39;
  int64_t v40;
  char *v41;
  char *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  const void *v48;
  int64_t v49;
  char *v50;
  char *v51;
  const void *v52;
  int64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  const void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  const void *v70;
  int64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  char *v81;
  char *v82;
  void *v83;
  void *v84;
  char *v85;
  void *v86;
  void *v87;
  char *v88;
  void *v89;
  void *v90;
  char *v91;
  void *v92;
  char *v93;
  char *v94;
  void *v95;
  void *v96;
  char *v97;
  void *v98;
  char *v99;
  char *v100;
  void *v101;
  void *v102;
  char *v103;
  void *v104;
  char *v105;
  char *v106;
  void *__p;
  void *v108;
  char *v109;
  void *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  void *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  void *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  void *v128;
  char *v129;
  char *v130;

  switch(*(_DWORD *)(a7 + 16))
  {
    case 0:
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v11 = *(const void **)a3;
      v10 = *(_QWORD *)(a3 + 8);
      v12 = v10 - *(_QWORD *)a3;
      if (v10 == *(_QWORD *)a3)
        goto LABEL_5;
      if (v12 < 0)
        goto LABEL_84;
      v13 = (char *)operator new(v10 - *(_QWORD *)a3);
      v14 = &v13[8 * (v12 >> 3)];
      v128 = v13;
      v130 = v14;
      memcpy(v13, v11, v12);
      v129 = v14;
LABEL_5:
      v125 = 0;
      v126 = 0;
      v127 = 0;
      v15 = *(const void **)a4;
      v16 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v16)
        goto LABEL_8;
      if (v16 < 0)
        goto LABEL_84;
      v17 = (char *)operator new(v16);
      v18 = &v17[8 * (v16 >> 3)];
      v125 = v17;
      v127 = v18;
      memcpy(v17, v15, v16);
      v126 = v18;
LABEL_8:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>(a1, a2, (const void **)&v128, (const void **)&v125);
      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
      v19 = v128;
      if (!v128)
        return;
      v129 = (char *)v128;
      break;
    case 1:
      v122 = 0;
      v123 = 0;
      v124 = 0;
      v21 = *(const void **)a3;
      v20 = *(_QWORD *)(a3 + 8);
      v22 = v20 - *(_QWORD *)a3;
      if (v20 == *(_QWORD *)a3)
        goto LABEL_15;
      if (v22 < 0)
        goto LABEL_84;
      v23 = (char *)operator new(v20 - *(_QWORD *)a3);
      v24 = &v23[8 * (v22 >> 3)];
      v122 = v23;
      v124 = v24;
      memcpy(v23, v21, v22);
      v123 = v24;
LABEL_15:
      v119 = 0;
      v120 = 0;
      v121 = 0;
      v25 = *(const void **)a4;
      v26 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v26)
        goto LABEL_18;
      if (v26 < 0)
        goto LABEL_84;
      v27 = (char *)operator new(v26);
      v28 = &v27[8 * (v26 >> 3)];
      v119 = v27;
      v121 = v28;
      memcpy(v27, v25, v26);
      v120 = v28;
LABEL_18:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)1>(a1, a2, (const void **)&v122, (const void **)&v119);
      if (v119)
      {
        v120 = v119;
        operator delete(v119);
      }
      v19 = v122;
      if (!v122)
        return;
      v123 = (char *)v122;
      break;
    case 2:
      v116 = 0;
      v117 = 0;
      v118 = 0;
      v30 = *(const void **)a3;
      v29 = *(_QWORD *)(a3 + 8);
      v31 = v29 - *(_QWORD *)a3;
      if (v29 == *(_QWORD *)a3)
        goto LABEL_25;
      if (v31 < 0)
        goto LABEL_84;
      v32 = (char *)operator new(v29 - *(_QWORD *)a3);
      v33 = &v32[8 * (v31 >> 3)];
      v116 = v32;
      v118 = v33;
      memcpy(v32, v30, v31);
      v117 = v33;
LABEL_25:
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v34 = *(const void **)a4;
      v35 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v35)
        goto LABEL_28;
      if (v35 < 0)
        goto LABEL_84;
      v36 = (char *)operator new(v35);
      v37 = &v36[8 * (v35 >> 3)];
      v113 = v36;
      v115 = v37;
      memcpy(v36, v34, v35);
      v114 = v37;
LABEL_28:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)2>(a1, a2, (const void **)&v116, (const void **)&v113);
      if (v113)
      {
        v114 = v113;
        operator delete(v113);
      }
      v19 = v116;
      if (!v116)
        return;
      v117 = (char *)v116;
      break;
    case 3:
      v110 = 0;
      v111 = 0;
      v112 = 0;
      v39 = *(const void **)a3;
      v38 = *(_QWORD *)(a3 + 8);
      v40 = v38 - *(_QWORD *)a3;
      if (v38 == *(_QWORD *)a3)
        goto LABEL_35;
      if (v40 < 0)
        goto LABEL_84;
      v41 = (char *)operator new(v38 - *(_QWORD *)a3);
      v42 = &v41[8 * (v40 >> 3)];
      v110 = v41;
      v112 = v42;
      memcpy(v41, v39, v40);
      v111 = v42;
LABEL_35:
      __p = 0;
      v108 = 0;
      v109 = 0;
      v43 = *(const void **)a4;
      v44 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v44)
        goto LABEL_38;
      if (v44 < 0)
        goto LABEL_84;
      v45 = (char *)operator new(v44);
      v46 = &v45[8 * (v44 >> 3)];
      __p = v45;
      v109 = v46;
      memcpy(v45, v43, v44);
      v108 = v46;
LABEL_38:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)3>(a1, a2, (const void **)&v110, (const void **)&__p);
      if (__p)
      {
        v108 = __p;
        operator delete(__p);
      }
      v19 = v110;
      if (!v110)
        return;
      v111 = (char *)v110;
      break;
    case 4:
      v104 = 0;
      v105 = 0;
      v106 = 0;
      v48 = *(const void **)a3;
      v47 = *(_QWORD *)(a3 + 8);
      v49 = v47 - *(_QWORD *)a3;
      if (v47 == *(_QWORD *)a3)
        goto LABEL_45;
      if (v49 < 0)
        goto LABEL_84;
      v50 = (char *)operator new(v47 - *(_QWORD *)a3);
      v51 = &v50[8 * (v49 >> 3)];
      v104 = v50;
      v106 = v51;
      memcpy(v50, v48, v49);
      v105 = v51;
LABEL_45:
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v52 = *(const void **)a4;
      v53 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v53)
        goto LABEL_48;
      if (v53 < 0)
        goto LABEL_84;
      v54 = (char *)operator new(v53);
      v55 = &v54[8 * (v53 >> 3)];
      v101 = v54;
      v103 = v55;
      memcpy(v54, v52, v53);
      v102 = v55;
LABEL_48:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)4>(a1, a2, (const void **)&v104, (const void **)&v101);
      if (v101)
      {
        v102 = v101;
        operator delete(v101);
      }
      v19 = v104;
      if (!v104)
        return;
      v105 = (char *)v104;
      break;
    case 5:
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v57 = *(const void **)a3;
      v56 = *(_QWORD *)(a3 + 8);
      v58 = v56 - *(_QWORD *)a3;
      if (v56 == *(_QWORD *)a3)
        goto LABEL_55;
      if (v58 < 0)
        goto LABEL_84;
      v59 = (char *)operator new(v56 - *(_QWORD *)a3);
      v60 = &v59[8 * (v58 >> 3)];
      v98 = v59;
      v100 = v60;
      memcpy(v59, v57, v58);
      v99 = v60;
LABEL_55:
      v95 = 0;
      v96 = 0;
      v97 = 0;
      v61 = *(const void **)a4;
      v62 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v62)
        goto LABEL_58;
      if (v62 < 0)
        goto LABEL_84;
      v63 = (char *)operator new(v62);
      v64 = &v63[8 * (v62 >> 3)];
      v95 = v63;
      v97 = v64;
      memcpy(v63, v61, v62);
      v96 = v64;
LABEL_58:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)5>(a1, a2, (const void **)&v98, (const void **)&v95);
      if (v95)
      {
        v96 = v95;
        operator delete(v95);
      }
      v19 = v98;
      if (!v98)
        return;
      v99 = (char *)v98;
      break;
    case 0xF:
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v66 = *(const void **)a3;
      v65 = *(_QWORD *)(a3 + 8);
      v67 = v65 - *(_QWORD *)a3;
      if (v65 == *(_QWORD *)a3)
        goto LABEL_65;
      if (v67 < 0)
        goto LABEL_84;
      v68 = (char *)operator new(v65 - *(_QWORD *)a3);
      v69 = &v68[8 * (v67 >> 3)];
      v92 = v68;
      v94 = v69;
      memcpy(v68, v66, v67);
      v93 = v69;
LABEL_65:
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v70 = *(const void **)a4;
      v71 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v71)
        goto LABEL_68;
      if (v71 < 0)
        goto LABEL_84;
      v72 = (char *)operator new(v71);
      v73 = &v72[8 * (v71 >> 3)];
      v89 = v72;
      v91 = v73;
      memcpy(v72, v70, v71);
      v90 = v73;
LABEL_68:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)15>(a1, a2, (const void **)&v92, (const void **)&v89);
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      v19 = v92;
      if (!v92)
        return;
      v93 = (char *)v92;
      break;
    case 0x10:
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v75 = *(const void **)a3;
      v74 = *(_QWORD *)(a3 + 8);
      v76 = v74 - *(_QWORD *)a3;
      if (v74 == *(_QWORD *)a3)
        goto LABEL_75;
      if (v76 < 0)
        goto LABEL_84;
      v77 = (char *)operator new(v74 - *(_QWORD *)a3);
      v78 = &v77[8 * (v76 >> 3)];
      v86 = v77;
      v88 = v78;
      memcpy(v77, v75, v76);
      v87 = v78;
LABEL_75:
      v83 = 0;
      v84 = 0;
      v85 = 0;
      v79 = *(const void **)a4;
      v80 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v80)
        goto LABEL_78;
      if (v80 < 0)
LABEL_84:
        abort();
      v81 = (char *)operator new(v80);
      v82 = &v81[8 * (v80 >> 3)];
      v83 = v81;
      v85 = v82;
      memcpy(v81, v79, v80);
      v84 = v82;
LABEL_78:
      mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)16>(a1, a2, (const void **)&v86, (const void **)&v83);
      if (v83)
      {
        v84 = v83;
        operator delete(v83);
      }
      v19 = v86;
      if (!v86)
        return;
      v87 = v86;
      break;
    default:
      return;
  }
  operator delete(v19);
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  float16x4_t v23;
  const void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  double v32;
  float16x4_t v33;
  const void *v34;
  int64_t v35;
  char *v36;
  char *v37;
  const void *v38;
  int64_t v39;
  char *v40;
  char *v41;
  const void *v42;
  int64_t v43;
  char *v44;
  char *v45;
  const void *v46;
  int64_t v47;
  char *v48;
  char *v49;
  const void *v50;
  int64_t v51;
  char *v52;
  char *v53;
  const void *v54;
  int64_t v55;
  char *v56;
  char *v57;
  const void *v58;
  int64_t v59;
  char *v60;
  char *v61;
  const void *v62;
  int64_t v63;
  char *v64;
  char *v65;
  const void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  const void *v70;
  int64_t v71;
  char *v72;
  char *v73;
  const void *v74;
  int64_t v75;
  char *v76;
  char *v77;
  const void *v78;
  int64_t v79;
  char *v80;
  char *v81;
  const void *v82;
  int64_t v83;
  char *v84;
  char *v85;
  const void *v86;
  int64_t v87;
  char *v88;
  char *v89;
  const void *v90;
  int64_t v91;
  char *v92;
  char *v93;
  const void *v94;
  int64_t v95;
  char *v96;
  char *v97;
  const void *v98;
  int64_t v99;
  char *v100;
  char *v101;
  const void *v102;
  int64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  const void *v106;
  int64_t v107;
  char *v108;
  char *v109;
  const void *v110;
  int64_t v111;
  char *v112;
  char *v113;
  const void *v114;
  int64_t v115;
  char *v116;
  char *v117;
  const void *v118;
  int64_t v119;
  char *v120;
  char *v121;
  void *v122[3];
  void *v123[3];
  void *v124[3];
  _QWORD v125[3];
  void *v126;
  void *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  void *v132;
  void *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  void *v138;
  void *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  void *v144;
  void *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  void *v150;
  void *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  void *v156;
  void *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  void *v162;
  void *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  void *v168;
  void *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  void *v174;
  void *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  void *__p;
  void *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  void *v186;
  void *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  char *v195;
  char *v196;
  char *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t Value;
  _QWORD v210[2];

  Value = *(_QWORD *)**a2;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v210[0] = ElementType;
  v208 = *(_QWORD *)**a1;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v208);
  Value = v9;
  v207 = *(_QWORD *)(*a1)[1];
  v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v207);
  v207 = ElementType;
  v208 = v10;
  v11 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v206 = ElementType;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v205 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = v10;
    else
      v13 = 0;
    v204 = v13;
    v210[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v205);
    v208 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v204);
  }
  if (mlir::Type::isF32((mlir::Type *)v210)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v208))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v201 = 0;
      v202 = 0;
      v203 = 0;
      v98 = *a3;
      v99 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v99)
      {
        if (v99 < 0)
          goto LABEL_175;
        v100 = (char *)operator new(v99);
        v101 = &v100[8 * (v99 >> 3)];
        v201 = v100;
        v203 = v101;
        memcpy(v100, v98, v99);
        v202 = v101;
      }
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v102 = *a4;
      v103 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v103)
      {
        if (v103 < 0)
          goto LABEL_175;
        v104 = operator new(v103);
        v105 = &v104[v103 >> 3];
        v198 = v104;
        v200 = v105;
        memcpy(v104, v102, v103);
        v199 = v105;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v201, &v198);
      if (v198)
      {
        v199 = v198;
        operator delete(v198);
      }
      v22 = v201;
      if (v201)
      {
        v202 = v201;
        goto LABEL_173;
      }
      return;
    }
    v195 = 0;
    v196 = 0;
    v197 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_175;
      v16 = (char *)operator new(v15);
      v17 = &v16[8 * (v15 >> 3)];
      v195 = v16;
      v197 = v17;
      memcpy(v16, v14, v15);
      v196 = v17;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_19;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = operator new(v19);
      v21 = &v20[v19 >> 3];
      v192 = v20;
      v194 = v21;
      memcpy(v20, v18, v19);
      v193 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v195, &v192);
      if (v192)
      {
        v193 = v192;
        operator delete(v192);
      }
      v22 = v195;
      if (v195)
      {
        v196 = v195;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v210)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v208))
  {
    if (!mlir::Type::isF32((mlir::Type *)v210)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v208))
    {
      if (mlir::Type::isF32((mlir::Type *)v210)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v208))
      {
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v42 = *a3;
        v43 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v43)
        {
          if (v43 < 0)
            goto LABEL_175;
          v44 = (char *)operator new(v43);
          v45 = &v44[8 * (v43 >> 3)];
          v165 = v44;
          v167 = v45;
          memcpy(v44, v42, v43);
          v166 = v45;
        }
        v162 = 0;
        v163 = 0;
        v164 = 0;
        v46 = *a4;
        v47 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v47)
        {
          if (v47 < 0)
            goto LABEL_175;
          v48 = (char *)operator new(v47);
          v49 = &v48[8 * (v47 >> 3)];
          v162 = v48;
          v164 = v49;
          memcpy(v48, v46, v47);
          v163 = v49;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v165, (_QWORD **)&v162);
        if (v162)
        {
          v163 = v162;
          operator delete(v162);
        }
        v22 = v165;
        if (v165)
        {
          v166 = v165;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v210)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v208))
      {
        v159 = 0;
        v160 = 0;
        v161 = 0;
        v50 = *a3;
        v51 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v51)
        {
          if (v51 < 0)
            goto LABEL_175;
          v52 = (char *)operator new(v51);
          v53 = &v52[8 * (v51 >> 3)];
          v159 = v52;
          v161 = v53;
          memcpy(v52, v50, v51);
          v160 = v53;
        }
        v156 = 0;
        v157 = 0;
        v158 = 0;
        v54 = *a4;
        v55 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v55)
        {
          if (v55 < 0)
            goto LABEL_175;
          v56 = (char *)operator new(v55);
          v57 = &v56[8 * (v55 >> 3)];
          v156 = v56;
          v158 = v57;
          memcpy(v56, v54, v55);
          v157 = v57;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v159, (_QWORD **)&v156);
        if (v156)
        {
          v157 = v156;
          operator delete(v156);
        }
        v22 = v159;
        if (v159)
        {
          v160 = v159;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v210))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          v147 = 0;
          v148 = 0;
          v149 = 0;
          v58 = *a3;
          v59 = (_BYTE *)a3[1] - (_BYTE *)*a3;
          if (v59)
          {
            if (v59 < 0)
              goto LABEL_175;
            v60 = (char *)operator new(v59);
            v61 = &v60[8 * (v59 >> 3)];
            v147 = v60;
            v149 = v61;
            memcpy(v60, v58, v59);
            v148 = v61;
          }
          v144 = 0;
          v145 = 0;
          v146 = 0;
          v62 = *a4;
          v63 = (_BYTE *)a4[1] - (_BYTE *)*a4;
          if (v63)
          {
            if (v63 < 0)
              goto LABEL_175;
            v64 = (char *)operator new(v63);
            v65 = &v64[8 * (v63 >> 3)];
            v144 = v64;
            v146 = v65;
            memcpy(v64, v62, v63);
            v145 = v65;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v147, (_QWORD **)&v144);
          if (v144)
          {
            v145 = v144;
            operator delete(v144);
          }
          v22 = v147;
          if (v147)
          {
            v148 = v147;
            goto LABEL_173;
          }
          return;
        }
        v153 = 0;
        v154 = 0;
        v155 = 0;
        v82 = *a3;
        v83 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v83)
        {
          if (v83 < 0)
            goto LABEL_175;
          v84 = (char *)operator new(v83);
          v85 = &v84[8 * (v83 >> 3)];
          v153 = v84;
          v155 = v85;
          memcpy(v84, v82, v83);
          v154 = v85;
        }
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v86 = *a4;
        v87 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v87)
        {
          if (v87 < 0)
            goto LABEL_175;
          v88 = (char *)operator new(v87);
          v89 = &v88[8 * (v87 >> 3)];
          v150 = v88;
          v152 = v89;
          memcpy(v88, v86, v87);
          v151 = v89;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v153, (_QWORD **)&v150);
        if (v150)
        {
          v151 = v150;
          operator delete(v150);
        }
        v22 = v153;
        if (v153)
        {
          v154 = v153;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v210))
      {
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v66 = *a3;
        v67 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v67)
        {
          if (v67 < 0)
            goto LABEL_175;
          v68 = (char *)operator new(v67);
          v69 = &v68[8 * (v67 >> 3)];
          v141 = v68;
          v143 = v69;
          memcpy(v68, v66, v67);
          v142 = v69;
        }
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v70 = *a4;
        v71 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v71)
        {
          if (v71 < 0)
            goto LABEL_175;
          v72 = (char *)operator new(v71);
          v73 = &v72[8 * (v71 >> 3)];
          v138 = v72;
          v140 = v73;
          memcpy(v72, v70, v71);
          v139 = v73;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v141, (_QWORD **)&v138);
        if (v138)
        {
          v139 = v138;
          operator delete(v138);
        }
        v22 = v141;
        if (v141)
        {
          v142 = v141;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v210, 64))
      {
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v74 = *a3;
        v75 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v75)
        {
          if (v75 < 0)
            goto LABEL_175;
          v76 = (char *)operator new(v75);
          v77 = &v76[8 * (v75 >> 3)];
          v135 = v76;
          v137 = v77;
          memcpy(v76, v74, v75);
          v136 = v77;
        }
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v78 = *a4;
        v79 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v79)
        {
          if (v79 < 0)
            goto LABEL_175;
          v80 = (char *)operator new(v79);
          v81 = &v80[8 * (v79 >> 3)];
          v132 = v80;
          v134 = v81;
          memcpy(v80, v78, v79);
          v133 = v81;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v135, (_QWORD **)&v132);
        if (v132)
        {
          v133 = v132;
          operator delete(v132);
        }
        v22 = v135;
        if (v135)
        {
          v136 = v135;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v210, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v210, 16))
        {
          std::vector<long long>::vector(v125, (uint64_t)a3);
          std::vector<long long>::vector(v124, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)v125, (_QWORD **)v124);
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          v22 = (void *)v125[0];
          if (v125[0])
          {
            v125[1] = v125[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v210, 8) && !mlir::Type::isInteger((mlir::Type *)v210, 1))
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>();
          std::vector<long long>::vector(v123, (uint64_t)a3);
          std::vector<long long>::vector(v122, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)v123, (_QWORD **)v122);
          if (v122[0])
          {
            v122[1] = v122[0];
            operator delete(v122[0]);
          }
          v22 = v123[0];
          if (v123[0])
          {
            v123[1] = v123[0];
            goto LABEL_173;
          }
        }
        return;
      }
      v129 = 0;
      v130 = 0;
      v131 = 0;
      v90 = *a3;
      v91 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v91)
      {
        if (v91 < 0)
          goto LABEL_175;
        v92 = (char *)operator new(v91);
        v93 = &v92[8 * (v91 >> 3)];
        v129 = v92;
        v131 = v93;
        memcpy(v92, v90, v91);
        v130 = v93;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v94 = *a4;
      v95 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v95)
      {
        if (v95 < 0)
          goto LABEL_175;
        v96 = (char *)operator new(v95);
        v97 = &v96[8 * (v95 >> 3)];
        v126 = v96;
        v128 = v97;
        memcpy(v96, v94, v95);
        v127 = v97;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v129, (_QWORD **)&v126);
      if (v126)
      {
        v127 = v126;
        operator delete(v126);
      }
      v22 = v129;
      if (v129)
      {
        v130 = v129;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v34 = *a3;
      v35 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v35)
      {
        if (v35 < 0)
          goto LABEL_175;
        v36 = (char *)operator new(v35);
        v37 = &v36[8 * (v35 >> 3)];
        v171 = v36;
        v173 = v37;
        memcpy(v36, v34, v35);
        v172 = v37;
      }
      v168 = 0;
      v169 = 0;
      v170 = 0;
      v38 = *a4;
      v39 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v39)
      {
        if (v39 < 0)
          goto LABEL_175;
        v40 = (char *)operator new(v39);
        v41 = &v40[8 * (v39 >> 3)];
        v168 = v40;
        v170 = v41;
        memcpy(v40, v38, v39);
        v169 = v41;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v171, (_QWORD **)&v168);
      if (v168)
      {
        v169 = v168;
        operator delete(v168);
      }
      v22 = v171;
      if (v171)
      {
        v172 = v171;
        goto LABEL_173;
      }
      return;
    }
    v177 = 0;
    v178 = 0;
    v179 = 0;
    v114 = *a3;
    v115 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v115)
    {
      if (v115 < 0)
        goto LABEL_175;
      v116 = (char *)operator new(v115);
      v117 = &v116[8 * (v115 >> 3)];
      v177 = v116;
      v179 = v117;
      memcpy(v116, v114, v115);
      v178 = v117;
    }
    v174 = 0;
    v175 = 0;
    v176 = 0;
    v118 = *a4;
    v119 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v119)
    {
      if (v119 < 0)
        goto LABEL_175;
      v120 = (char *)operator new(v119);
      v121 = &v120[8 * (v119 >> 3)];
      v174 = v120;
      v176 = v121;
      memcpy(v120, v118, v119);
      v175 = v121;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v177, (_QWORD **)&v174, v32, v33);
    if (v174)
    {
      v175 = v174;
      operator delete(v174);
    }
    v22 = v177;
    if (v177)
    {
      v178 = v177;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v190 = 0;
    v189 = 0;
    v191 = 0;
    v106 = *a3;
    v107 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v107)
    {
      if (v107 < 0)
        goto LABEL_175;
      v108 = (char *)operator new(v107);
      v109 = &v108[8 * (v107 >> 3)];
      v189 = v108;
      v191 = v109;
      memcpy(v108, v106, v107);
      v190 = v109;
    }
    v187 = 0;
    v186 = 0;
    v188 = 0;
    v110 = *a4;
    v111 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v111)
    {
      if (v111 < 0)
        goto LABEL_175;
      v112 = (char *)operator new(v111);
      v113 = &v112[8 * (v111 >> 3)];
      v186 = v112;
      v188 = v113;
      memcpy(v112, v110, v111);
      v187 = v113;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v189, (_QWORD **)&v186, v23);
    if (v186)
    {
      v187 = v186;
      operator delete(v186);
    }
    v22 = v189;
    if (v189)
    {
      v190 = v189;
      goto LABEL_173;
    }
    return;
  }
  v184 = 0;
  v183 = 0;
  v185 = 0;
  v24 = *a3;
  v25 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v25)
  {
    if (v25 < 0)
      goto LABEL_175;
    v26 = (char *)operator new(v25);
    v27 = &v26[8 * (v25 >> 3)];
    v183 = v26;
    v185 = v27;
    memcpy(v26, v24, v25);
    v184 = v27;
  }
  v181 = 0;
  __p = 0;
  v182 = 0;
  v28 = *a4;
  v29 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v29)
  {
    if (v29 < 0)
      goto LABEL_175;
    v30 = (char *)operator new(v29);
    v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    v182 = v31;
    memcpy(v30, v28, v29);
    v181 = v31;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)0>(a1, a2, (uint64_t)&v183, (_QWORD **)&__p);
  if (__p)
  {
    v181 = __p;
    operator delete(__p);
  }
  v22 = v183;
  if (v183)
  {
    v184 = v183;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)1>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  float16x4_t v23;
  const void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  double v32;
  float16x4_t v33;
  const void *v34;
  int64_t v35;
  char *v36;
  char *v37;
  const void *v38;
  int64_t v39;
  char *v40;
  char *v41;
  const void *v42;
  int64_t v43;
  char *v44;
  char *v45;
  const void *v46;
  int64_t v47;
  char *v48;
  char *v49;
  const void *v50;
  int64_t v51;
  char *v52;
  char *v53;
  const void *v54;
  int64_t v55;
  char *v56;
  char *v57;
  const void *v58;
  int64_t v59;
  char *v60;
  char *v61;
  const void *v62;
  int64_t v63;
  char *v64;
  char *v65;
  const void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  const void *v70;
  int64_t v71;
  char *v72;
  char *v73;
  const void *v74;
  int64_t v75;
  char *v76;
  char *v77;
  const void *v78;
  int64_t v79;
  char *v80;
  char *v81;
  const void *v82;
  int64_t v83;
  char *v84;
  char *v85;
  const void *v86;
  int64_t v87;
  char *v88;
  char *v89;
  const void *v90;
  int64_t v91;
  char *v92;
  char *v93;
  const void *v94;
  int64_t v95;
  char *v96;
  char *v97;
  const void *v98;
  int64_t v99;
  char *v100;
  char *v101;
  const void *v102;
  int64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  const void *v106;
  int64_t v107;
  char *v108;
  char *v109;
  const void *v110;
  int64_t v111;
  char *v112;
  char *v113;
  const void *v114;
  int64_t v115;
  char *v116;
  char *v117;
  const void *v118;
  int64_t v119;
  char *v120;
  char *v121;
  void *v122[3];
  void *v123[3];
  void *v124[3];
  _QWORD v125[3];
  void *v126;
  void *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  void *v132;
  void *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  void *v138;
  void *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  void *v144;
  void *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  void *v150;
  void *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  void *v156;
  void *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  void *v162;
  void *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  void *v168;
  void *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  void *v174;
  void *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  void *__p;
  void *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  void *v186;
  void *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  char *v195;
  char *v196;
  char *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t Value;
  _QWORD v210[2];

  Value = *(_QWORD *)**a2;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v210[0] = ElementType;
  v208 = *(_QWORD *)**a1;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v208);
  Value = v9;
  v207 = *(_QWORD *)(*a1)[1];
  v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v207);
  v207 = ElementType;
  v208 = v10;
  v11 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v206 = ElementType;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v205 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = v10;
    else
      v13 = 0;
    v204 = v13;
    v210[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v205);
    v208 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v204);
  }
  if (mlir::Type::isF32((mlir::Type *)v210)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v208))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v201 = 0;
      v202 = 0;
      v203 = 0;
      v98 = *a3;
      v99 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v99)
      {
        if (v99 < 0)
          goto LABEL_175;
        v100 = (char *)operator new(v99);
        v101 = &v100[8 * (v99 >> 3)];
        v201 = v100;
        v203 = v101;
        memcpy(v100, v98, v99);
        v202 = v101;
      }
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v102 = *a4;
      v103 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v103)
      {
        if (v103 < 0)
          goto LABEL_175;
        v104 = operator new(v103);
        v105 = &v104[v103 >> 3];
        v198 = v104;
        v200 = v105;
        memcpy(v104, v102, v103);
        v199 = v105;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v201, &v198);
      if (v198)
      {
        v199 = v198;
        operator delete(v198);
      }
      v22 = v201;
      if (v201)
      {
        v202 = v201;
        goto LABEL_173;
      }
      return;
    }
    v195 = 0;
    v196 = 0;
    v197 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_175;
      v16 = (char *)operator new(v15);
      v17 = &v16[8 * (v15 >> 3)];
      v195 = v16;
      v197 = v17;
      memcpy(v16, v14, v15);
      v196 = v17;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_19;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = operator new(v19);
      v21 = &v20[v19 >> 3];
      v192 = v20;
      v194 = v21;
      memcpy(v20, v18, v19);
      v193 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v195, &v192);
      if (v192)
      {
        v193 = v192;
        operator delete(v192);
      }
      v22 = v195;
      if (v195)
      {
        v196 = v195;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v210)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v208))
  {
    if (!mlir::Type::isF32((mlir::Type *)v210)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v208))
    {
      if (mlir::Type::isF32((mlir::Type *)v210)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v208))
      {
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v42 = *a3;
        v43 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v43)
        {
          if (v43 < 0)
            goto LABEL_175;
          v44 = (char *)operator new(v43);
          v45 = &v44[8 * (v43 >> 3)];
          v165 = v44;
          v167 = v45;
          memcpy(v44, v42, v43);
          v166 = v45;
        }
        v162 = 0;
        v163 = 0;
        v164 = 0;
        v46 = *a4;
        v47 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v47)
        {
          if (v47 < 0)
            goto LABEL_175;
          v48 = (char *)operator new(v47);
          v49 = &v48[8 * (v47 >> 3)];
          v162 = v48;
          v164 = v49;
          memcpy(v48, v46, v47);
          v163 = v49;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v165, (_QWORD **)&v162);
        if (v162)
        {
          v163 = v162;
          operator delete(v162);
        }
        v22 = v165;
        if (v165)
        {
          v166 = v165;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v210)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v208))
      {
        v159 = 0;
        v160 = 0;
        v161 = 0;
        v50 = *a3;
        v51 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v51)
        {
          if (v51 < 0)
            goto LABEL_175;
          v52 = (char *)operator new(v51);
          v53 = &v52[8 * (v51 >> 3)];
          v159 = v52;
          v161 = v53;
          memcpy(v52, v50, v51);
          v160 = v53;
        }
        v156 = 0;
        v157 = 0;
        v158 = 0;
        v54 = *a4;
        v55 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v55)
        {
          if (v55 < 0)
            goto LABEL_175;
          v56 = (char *)operator new(v55);
          v57 = &v56[8 * (v55 >> 3)];
          v156 = v56;
          v158 = v57;
          memcpy(v56, v54, v55);
          v157 = v57;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v159, (_QWORD **)&v156);
        if (v156)
        {
          v157 = v156;
          operator delete(v156);
        }
        v22 = v159;
        if (v159)
        {
          v160 = v159;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v210))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          v147 = 0;
          v148 = 0;
          v149 = 0;
          v58 = *a3;
          v59 = (_BYTE *)a3[1] - (_BYTE *)*a3;
          if (v59)
          {
            if (v59 < 0)
              goto LABEL_175;
            v60 = (char *)operator new(v59);
            v61 = &v60[8 * (v59 >> 3)];
            v147 = v60;
            v149 = v61;
            memcpy(v60, v58, v59);
            v148 = v61;
          }
          v144 = 0;
          v145 = 0;
          v146 = 0;
          v62 = *a4;
          v63 = (_BYTE *)a4[1] - (_BYTE *)*a4;
          if (v63)
          {
            if (v63 < 0)
              goto LABEL_175;
            v64 = (char *)operator new(v63);
            v65 = &v64[8 * (v63 >> 3)];
            v144 = v64;
            v146 = v65;
            memcpy(v64, v62, v63);
            v145 = v65;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v147, (_QWORD **)&v144);
          if (v144)
          {
            v145 = v144;
            operator delete(v144);
          }
          v22 = v147;
          if (v147)
          {
            v148 = v147;
            goto LABEL_173;
          }
          return;
        }
        v153 = 0;
        v154 = 0;
        v155 = 0;
        v82 = *a3;
        v83 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v83)
        {
          if (v83 < 0)
            goto LABEL_175;
          v84 = (char *)operator new(v83);
          v85 = &v84[8 * (v83 >> 3)];
          v153 = v84;
          v155 = v85;
          memcpy(v84, v82, v83);
          v154 = v85;
        }
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v86 = *a4;
        v87 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v87)
        {
          if (v87 < 0)
            goto LABEL_175;
          v88 = (char *)operator new(v87);
          v89 = &v88[8 * (v87 >> 3)];
          v150 = v88;
          v152 = v89;
          memcpy(v88, v86, v87);
          v151 = v89;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v153, (_QWORD **)&v150);
        if (v150)
        {
          v151 = v150;
          operator delete(v150);
        }
        v22 = v153;
        if (v153)
        {
          v154 = v153;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v210))
      {
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v66 = *a3;
        v67 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v67)
        {
          if (v67 < 0)
            goto LABEL_175;
          v68 = (char *)operator new(v67);
          v69 = &v68[8 * (v67 >> 3)];
          v141 = v68;
          v143 = v69;
          memcpy(v68, v66, v67);
          v142 = v69;
        }
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v70 = *a4;
        v71 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v71)
        {
          if (v71 < 0)
            goto LABEL_175;
          v72 = (char *)operator new(v71);
          v73 = &v72[8 * (v71 >> 3)];
          v138 = v72;
          v140 = v73;
          memcpy(v72, v70, v71);
          v139 = v73;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v141, (_QWORD **)&v138);
        if (v138)
        {
          v139 = v138;
          operator delete(v138);
        }
        v22 = v141;
        if (v141)
        {
          v142 = v141;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v210, 64))
      {
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v74 = *a3;
        v75 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v75)
        {
          if (v75 < 0)
            goto LABEL_175;
          v76 = (char *)operator new(v75);
          v77 = &v76[8 * (v75 >> 3)];
          v135 = v76;
          v137 = v77;
          memcpy(v76, v74, v75);
          v136 = v77;
        }
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v78 = *a4;
        v79 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v79)
        {
          if (v79 < 0)
            goto LABEL_175;
          v80 = (char *)operator new(v79);
          v81 = &v80[8 * (v79 >> 3)];
          v132 = v80;
          v134 = v81;
          memcpy(v80, v78, v79);
          v133 = v81;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v135, (_QWORD **)&v132);
        if (v132)
        {
          v133 = v132;
          operator delete(v132);
        }
        v22 = v135;
        if (v135)
        {
          v136 = v135;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v210, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v210, 16))
        {
          std::vector<long long>::vector(v125, (uint64_t)a3);
          std::vector<long long>::vector(v124, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)v125, (_QWORD **)v124);
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          v22 = (void *)v125[0];
          if (v125[0])
          {
            v125[1] = v125[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v210, 8) && !mlir::Type::isInteger((mlir::Type *)v210, 1))
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>();
          std::vector<long long>::vector(v123, (uint64_t)a3);
          std::vector<long long>::vector(v122, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)v123, (_QWORD **)v122);
          if (v122[0])
          {
            v122[1] = v122[0];
            operator delete(v122[0]);
          }
          v22 = v123[0];
          if (v123[0])
          {
            v123[1] = v123[0];
            goto LABEL_173;
          }
        }
        return;
      }
      v129 = 0;
      v130 = 0;
      v131 = 0;
      v90 = *a3;
      v91 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v91)
      {
        if (v91 < 0)
          goto LABEL_175;
        v92 = (char *)operator new(v91);
        v93 = &v92[8 * (v91 >> 3)];
        v129 = v92;
        v131 = v93;
        memcpy(v92, v90, v91);
        v130 = v93;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v94 = *a4;
      v95 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v95)
      {
        if (v95 < 0)
          goto LABEL_175;
        v96 = (char *)operator new(v95);
        v97 = &v96[8 * (v95 >> 3)];
        v126 = v96;
        v128 = v97;
        memcpy(v96, v94, v95);
        v127 = v97;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v129, (_QWORD **)&v126);
      if (v126)
      {
        v127 = v126;
        operator delete(v126);
      }
      v22 = v129;
      if (v129)
      {
        v130 = v129;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v34 = *a3;
      v35 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v35)
      {
        if (v35 < 0)
          goto LABEL_175;
        v36 = (char *)operator new(v35);
        v37 = &v36[8 * (v35 >> 3)];
        v171 = v36;
        v173 = v37;
        memcpy(v36, v34, v35);
        v172 = v37;
      }
      v168 = 0;
      v169 = 0;
      v170 = 0;
      v38 = *a4;
      v39 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v39)
      {
        if (v39 < 0)
          goto LABEL_175;
        v40 = (char *)operator new(v39);
        v41 = &v40[8 * (v39 >> 3)];
        v168 = v40;
        v170 = v41;
        memcpy(v40, v38, v39);
        v169 = v41;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v171, (_QWORD **)&v168);
      if (v168)
      {
        v169 = v168;
        operator delete(v168);
      }
      v22 = v171;
      if (v171)
      {
        v172 = v171;
        goto LABEL_173;
      }
      return;
    }
    v177 = 0;
    v178 = 0;
    v179 = 0;
    v114 = *a3;
    v115 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v115)
    {
      if (v115 < 0)
        goto LABEL_175;
      v116 = (char *)operator new(v115);
      v117 = &v116[8 * (v115 >> 3)];
      v177 = v116;
      v179 = v117;
      memcpy(v116, v114, v115);
      v178 = v117;
    }
    v174 = 0;
    v175 = 0;
    v176 = 0;
    v118 = *a4;
    v119 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v119)
    {
      if (v119 < 0)
        goto LABEL_175;
      v120 = (char *)operator new(v119);
      v121 = &v120[8 * (v119 >> 3)];
      v174 = v120;
      v176 = v121;
      memcpy(v120, v118, v119);
      v175 = v121;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v177, (_QWORD **)&v174, v32, v33);
    if (v174)
    {
      v175 = v174;
      operator delete(v174);
    }
    v22 = v177;
    if (v177)
    {
      v178 = v177;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v190 = 0;
    v189 = 0;
    v191 = 0;
    v106 = *a3;
    v107 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v107)
    {
      if (v107 < 0)
        goto LABEL_175;
      v108 = (char *)operator new(v107);
      v109 = &v108[8 * (v107 >> 3)];
      v189 = v108;
      v191 = v109;
      memcpy(v108, v106, v107);
      v190 = v109;
    }
    v187 = 0;
    v186 = 0;
    v188 = 0;
    v110 = *a4;
    v111 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v111)
    {
      if (v111 < 0)
        goto LABEL_175;
      v112 = (char *)operator new(v111);
      v113 = &v112[8 * (v111 >> 3)];
      v186 = v112;
      v188 = v113;
      memcpy(v112, v110, v111);
      v187 = v113;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v189, (_QWORD **)&v186, v23);
    if (v186)
    {
      v187 = v186;
      operator delete(v186);
    }
    v22 = v189;
    if (v189)
    {
      v190 = v189;
      goto LABEL_173;
    }
    return;
  }
  v184 = 0;
  v183 = 0;
  v185 = 0;
  v24 = *a3;
  v25 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v25)
  {
    if (v25 < 0)
      goto LABEL_175;
    v26 = (char *)operator new(v25);
    v27 = &v26[8 * (v25 >> 3)];
    v183 = v26;
    v185 = v27;
    memcpy(v26, v24, v25);
    v184 = v27;
  }
  v181 = 0;
  __p = 0;
  v182 = 0;
  v28 = *a4;
  v29 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v29)
  {
    if (v29 < 0)
      goto LABEL_175;
    v30 = (char *)operator new(v29);
    v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    v182 = v31;
    memcpy(v30, v28, v29);
    v181 = v31;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)1>(a1, a2, (uint64_t)&v183, (_QWORD **)&__p);
  if (__p)
  {
    v181 = __p;
    operator delete(__p);
  }
  v22 = v183;
  if (v183)
  {
    v184 = v183;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)2>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  float16x4_t v23;
  const void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  double v32;
  float16x4_t v33;
  const void *v34;
  int64_t v35;
  char *v36;
  char *v37;
  const void *v38;
  int64_t v39;
  char *v40;
  char *v41;
  const void *v42;
  int64_t v43;
  char *v44;
  char *v45;
  const void *v46;
  int64_t v47;
  char *v48;
  char *v49;
  const void *v50;
  int64_t v51;
  char *v52;
  char *v53;
  const void *v54;
  int64_t v55;
  char *v56;
  char *v57;
  double v58;
  float16x4_t v59;
  const void *v60;
  int64_t v61;
  char *v62;
  char *v63;
  const void *v64;
  int64_t v65;
  char *v66;
  char *v67;
  const void *v68;
  int64_t v69;
  char *v70;
  char *v71;
  const void *v72;
  int64_t v73;
  char *v74;
  char *v75;
  const void *v76;
  int64_t v77;
  char *v78;
  char *v79;
  const void *v80;
  int64_t v81;
  char *v82;
  char *v83;
  const void *v84;
  int64_t v85;
  char *v86;
  char *v87;
  const void *v88;
  int64_t v89;
  char *v90;
  char *v91;
  const void *v92;
  int64_t v93;
  char *v94;
  char *v95;
  const void *v96;
  int64_t v97;
  char *v98;
  char *v99;
  const void *v100;
  int64_t v101;
  char *v102;
  char *v103;
  const void *v104;
  int64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  const void *v108;
  int64_t v109;
  char *v110;
  char *v111;
  const void *v112;
  int64_t v113;
  char *v114;
  char *v115;
  const void *v116;
  int64_t v117;
  char *v118;
  char *v119;
  const void *v120;
  int64_t v121;
  char *v122;
  char *v123;
  void *v124[3];
  void *v125[3];
  void *v126[3];
  _QWORD v127[3];
  void *v128;
  void *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  void *v134;
  void *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  void *v140;
  void *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  void *v146;
  void *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  void *v152;
  void *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  void *v158;
  void *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  void *v164;
  void *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  void *v170;
  void *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  void *v176;
  void *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  void *__p;
  void *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  void *v188;
  void *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  char *v197;
  char *v198;
  char *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t Value;
  _QWORD v212[2];

  Value = *(_QWORD *)**a2;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v212[0] = ElementType;
  v210 = *(_QWORD *)**a1;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v210);
  Value = v9;
  v209 = *(_QWORD *)(*a1)[1];
  v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v209);
  v209 = ElementType;
  v210 = v10;
  v11 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v208 = ElementType;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v207 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = v10;
    else
      v13 = 0;
    v206 = v13;
    v212[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v208);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v207);
    v210 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
  }
  if (mlir::Type::isF32((mlir::Type *)v212)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v210))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v203 = 0;
      v204 = 0;
      v205 = 0;
      v100 = *a3;
      v101 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v101)
      {
        if (v101 < 0)
          goto LABEL_175;
        v102 = (char *)operator new(v101);
        v103 = &v102[8 * (v101 >> 3)];
        v203 = v102;
        v205 = v103;
        memcpy(v102, v100, v101);
        v204 = v103;
      }
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v104 = *a4;
      v105 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v105)
      {
        if (v105 < 0)
          goto LABEL_175;
        v106 = operator new(v105);
        v107 = &v106[v105 >> 3];
        v200 = v106;
        v202 = v107;
        memcpy(v106, v104, v105);
        v201 = v107;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v203, &v200);
      if (v200)
      {
        v201 = v200;
        operator delete(v200);
      }
      v22 = v203;
      if (v203)
      {
        v204 = v203;
        goto LABEL_173;
      }
      return;
    }
    v197 = 0;
    v198 = 0;
    v199 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_175;
      v16 = (char *)operator new(v15);
      v17 = &v16[8 * (v15 >> 3)];
      v197 = v16;
      v199 = v17;
      memcpy(v16, v14, v15);
      v198 = v17;
    }
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_19;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = operator new(v19);
      v21 = &v20[v19 >> 3];
      v194 = v20;
      v196 = v21;
      memcpy(v20, v18, v19);
      v195 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v197, &v194);
      if (v194)
      {
        v195 = v194;
        operator delete(v194);
      }
      v22 = v197;
      if (v197)
      {
        v198 = v197;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v212)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v210))
  {
    if (!mlir::Type::isF32((mlir::Type *)v212)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v210))
    {
      if (mlir::Type::isF32((mlir::Type *)v212)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v210))
      {
        v167 = 0;
        v168 = 0;
        v169 = 0;
        v42 = *a3;
        v43 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v43)
        {
          if (v43 < 0)
            goto LABEL_175;
          v44 = (char *)operator new(v43);
          v45 = &v44[8 * (v43 >> 3)];
          v167 = v44;
          v169 = v45;
          memcpy(v44, v42, v43);
          v168 = v45;
        }
        v164 = 0;
        v165 = 0;
        v166 = 0;
        v46 = *a4;
        v47 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v47)
        {
          if (v47 < 0)
            goto LABEL_175;
          v48 = (char *)operator new(v47);
          v49 = &v48[8 * (v47 >> 3)];
          v164 = v48;
          v166 = v49;
          memcpy(v48, v46, v47);
          v165 = v49;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v167, (_QWORD **)&v164);
        if (v164)
        {
          v165 = v164;
          operator delete(v164);
        }
        v22 = v167;
        if (v167)
        {
          v168 = v167;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v212)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v210))
      {
        v161 = 0;
        v162 = 0;
        v163 = 0;
        v50 = *a3;
        v51 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v51)
        {
          if (v51 < 0)
            goto LABEL_175;
          v52 = (char *)operator new(v51);
          v53 = &v52[8 * (v51 >> 3)];
          v161 = v52;
          v163 = v53;
          memcpy(v52, v50, v51);
          v162 = v53;
        }
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v54 = *a4;
        v55 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v55)
        {
          if (v55 < 0)
            goto LABEL_175;
          v56 = (char *)operator new(v55);
          v57 = &v56[8 * (v55 >> 3)];
          v158 = v56;
          v160 = v57;
          memcpy(v56, v54, v55);
          v159 = v57;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v161, (_QWORD **)&v158);
        if (v158)
        {
          v159 = v158;
          operator delete(v158);
        }
        v22 = v161;
        if (v161)
        {
          v162 = v161;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v212))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          v149 = 0;
          v150 = 0;
          v151 = 0;
          v60 = *a3;
          v61 = (_BYTE *)a3[1] - (_BYTE *)*a3;
          if (v61)
          {
            if (v61 < 0)
              goto LABEL_175;
            v62 = (char *)operator new(v61);
            v63 = &v62[8 * (v61 >> 3)];
            v149 = v62;
            v151 = v63;
            memcpy(v62, v60, v61);
            v150 = v63;
          }
          v146 = 0;
          v147 = 0;
          v148 = 0;
          v64 = *a4;
          v65 = (_BYTE *)a4[1] - (_BYTE *)*a4;
          if (v65)
          {
            if (v65 < 0)
              goto LABEL_175;
            v66 = (char *)operator new(v65);
            v67 = &v66[8 * (v65 >> 3)];
            v146 = v66;
            v148 = v67;
            memcpy(v66, v64, v65);
            v147 = v67;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v149, (_QWORD **)&v146);
          if (v146)
          {
            v147 = v146;
            operator delete(v146);
          }
          v22 = v149;
          if (v149)
          {
            v150 = v149;
            goto LABEL_173;
          }
          return;
        }
        v155 = 0;
        v156 = 0;
        v157 = 0;
        v84 = *a3;
        v85 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v85)
        {
          if (v85 < 0)
            goto LABEL_175;
          v86 = (char *)operator new(v85);
          v87 = &v86[8 * (v85 >> 3)];
          v155 = v86;
          v157 = v87;
          memcpy(v86, v84, v85);
          v156 = v87;
        }
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v88 = *a4;
        v89 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v89)
        {
          if (v89 < 0)
            goto LABEL_175;
          v90 = (char *)operator new(v89);
          v91 = &v90[8 * (v89 >> 3)];
          v152 = v90;
          v154 = v91;
          memcpy(v90, v88, v89);
          v153 = v91;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v155, (_QWORD **)&v152, v58, v59);
        if (v152)
        {
          v153 = v152;
          operator delete(v152);
        }
        v22 = v155;
        if (v155)
        {
          v156 = v155;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v212))
      {
        v143 = 0;
        v144 = 0;
        v145 = 0;
        v68 = *a3;
        v69 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v69)
        {
          if (v69 < 0)
            goto LABEL_175;
          v70 = (char *)operator new(v69);
          v71 = &v70[8 * (v69 >> 3)];
          v143 = v70;
          v145 = v71;
          memcpy(v70, v68, v69);
          v144 = v71;
        }
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v72 = *a4;
        v73 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v73)
        {
          if (v73 < 0)
            goto LABEL_175;
          v74 = (char *)operator new(v73);
          v75 = &v74[8 * (v73 >> 3)];
          v140 = v74;
          v142 = v75;
          memcpy(v74, v72, v73);
          v141 = v75;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v143, (_QWORD **)&v140);
        if (v140)
        {
          v141 = v140;
          operator delete(v140);
        }
        v22 = v143;
        if (v143)
        {
          v144 = v143;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v212, 64))
      {
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v76 = *a3;
        v77 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v77)
        {
          if (v77 < 0)
            goto LABEL_175;
          v78 = (char *)operator new(v77);
          v79 = &v78[8 * (v77 >> 3)];
          v137 = v78;
          v139 = v79;
          memcpy(v78, v76, v77);
          v138 = v79;
        }
        v134 = 0;
        v135 = 0;
        v136 = 0;
        v80 = *a4;
        v81 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v81)
        {
          if (v81 < 0)
            goto LABEL_175;
          v82 = (char *)operator new(v81);
          v83 = &v82[8 * (v81 >> 3)];
          v134 = v82;
          v136 = v83;
          memcpy(v82, v80, v81);
          v135 = v83;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v137, (_QWORD **)&v134);
        if (v134)
        {
          v135 = v134;
          operator delete(v134);
        }
        v22 = v137;
        if (v137)
        {
          v138 = v137;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v212, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v212, 16))
        {
          std::vector<long long>::vector(v127, (uint64_t)a3);
          std::vector<long long>::vector(v126, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)v127, (_QWORD **)v126);
          if (v126[0])
          {
            v126[1] = v126[0];
            operator delete(v126[0]);
          }
          v22 = (void *)v127[0];
          if (v127[0])
          {
            v127[1] = v127[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v212, 8) && !mlir::Type::isInteger((mlir::Type *)v212, 1))
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>();
          std::vector<long long>::vector(v125, (uint64_t)a3);
          std::vector<long long>::vector(v124, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)v125, (_QWORD **)v124);
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          v22 = v125[0];
          if (v125[0])
          {
            v125[1] = v125[0];
            goto LABEL_173;
          }
        }
        return;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      v92 = *a3;
      v93 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v93)
      {
        if (v93 < 0)
          goto LABEL_175;
        v94 = (char *)operator new(v93);
        v95 = &v94[8 * (v93 >> 3)];
        v131 = v94;
        v133 = v95;
        memcpy(v94, v92, v93);
        v132 = v95;
      }
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v96 = *a4;
      v97 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v97)
      {
        if (v97 < 0)
          goto LABEL_175;
        v98 = (char *)operator new(v97);
        v99 = &v98[8 * (v97 >> 3)];
        v128 = v98;
        v130 = v99;
        memcpy(v98, v96, v97);
        v129 = v99;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v131, (_QWORD **)&v128);
      if (v128)
      {
        v129 = v128;
        operator delete(v128);
      }
      v22 = v131;
      if (v131)
      {
        v132 = v131;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v173 = 0;
      v174 = 0;
      v175 = 0;
      v34 = *a3;
      v35 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v35)
      {
        if (v35 < 0)
          goto LABEL_175;
        v36 = (char *)operator new(v35);
        v37 = &v36[8 * (v35 >> 3)];
        v173 = v36;
        v175 = v37;
        memcpy(v36, v34, v35);
        v174 = v37;
      }
      v170 = 0;
      v171 = 0;
      v172 = 0;
      v38 = *a4;
      v39 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v39)
      {
        if (v39 < 0)
          goto LABEL_175;
        v40 = (char *)operator new(v39);
        v41 = &v40[8 * (v39 >> 3)];
        v170 = v40;
        v172 = v41;
        memcpy(v40, v38, v39);
        v171 = v41;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v173, (_QWORD **)&v170);
      if (v170)
      {
        v171 = v170;
        operator delete(v170);
      }
      v22 = v173;
      if (v173)
      {
        v174 = v173;
        goto LABEL_173;
      }
      return;
    }
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v116 = *a3;
    v117 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v117)
    {
      if (v117 < 0)
        goto LABEL_175;
      v118 = (char *)operator new(v117);
      v119 = &v118[8 * (v117 >> 3)];
      v179 = v118;
      v181 = v119;
      memcpy(v118, v116, v117);
      v180 = v119;
    }
    v176 = 0;
    v177 = 0;
    v178 = 0;
    v120 = *a4;
    v121 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v121)
    {
      if (v121 < 0)
        goto LABEL_175;
      v122 = (char *)operator new(v121);
      v123 = &v122[8 * (v121 >> 3)];
      v176 = v122;
      v178 = v123;
      memcpy(v122, v120, v121);
      v177 = v123;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v179, (_QWORD **)&v176, v32, v33);
    if (v176)
    {
      v177 = v176;
      operator delete(v176);
    }
    v22 = v179;
    if (v179)
    {
      v180 = v179;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v192 = 0;
    v191 = 0;
    v193 = 0;
    v108 = *a3;
    v109 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v109)
    {
      if (v109 < 0)
        goto LABEL_175;
      v110 = (char *)operator new(v109);
      v111 = &v110[8 * (v109 >> 3)];
      v191 = v110;
      v193 = v111;
      memcpy(v110, v108, v109);
      v192 = v111;
    }
    v189 = 0;
    v188 = 0;
    v190 = 0;
    v112 = *a4;
    v113 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v113)
    {
      if (v113 < 0)
        goto LABEL_175;
      v114 = (char *)operator new(v113);
      v115 = &v114[8 * (v113 >> 3)];
      v188 = v114;
      v190 = v115;
      memcpy(v114, v112, v113);
      v189 = v115;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v191, (_QWORD **)&v188, v23);
    if (v188)
    {
      v189 = v188;
      operator delete(v188);
    }
    v22 = v191;
    if (v191)
    {
      v192 = v191;
      goto LABEL_173;
    }
    return;
  }
  v186 = 0;
  v185 = 0;
  v187 = 0;
  v24 = *a3;
  v25 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v25)
  {
    if (v25 < 0)
      goto LABEL_175;
    v26 = (char *)operator new(v25);
    v27 = &v26[8 * (v25 >> 3)];
    v185 = v26;
    v187 = v27;
    memcpy(v26, v24, v25);
    v186 = v27;
  }
  v183 = 0;
  __p = 0;
  v184 = 0;
  v28 = *a4;
  v29 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v29)
  {
    if (v29 < 0)
      goto LABEL_175;
    v30 = (char *)operator new(v29);
    v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    v184 = v31;
    memcpy(v30, v28, v29);
    v183 = v31;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)2>(a1, a2, (uint64_t)&v185, (_QWORD **)&__p);
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  v22 = v185;
  if (v185)
  {
    v186 = v185;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)3>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  float16x4_t v23;
  const void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  double v32;
  float16x4_t v33;
  const void *v34;
  int64_t v35;
  char *v36;
  char *v37;
  const void *v38;
  int64_t v39;
  char *v40;
  char *v41;
  const void *v42;
  int64_t v43;
  char *v44;
  char *v45;
  const void *v46;
  int64_t v47;
  char *v48;
  char *v49;
  const void *v50;
  int64_t v51;
  char *v52;
  char *v53;
  const void *v54;
  int64_t v55;
  char *v56;
  char *v57;
  double v58;
  float16x4_t v59;
  const void *v60;
  int64_t v61;
  char *v62;
  char *v63;
  const void *v64;
  int64_t v65;
  char *v66;
  char *v67;
  const void *v68;
  int64_t v69;
  char *v70;
  char *v71;
  const void *v72;
  int64_t v73;
  char *v74;
  char *v75;
  const void *v76;
  int64_t v77;
  char *v78;
  char *v79;
  const void *v80;
  int64_t v81;
  char *v82;
  char *v83;
  const void *v84;
  int64_t v85;
  char *v86;
  char *v87;
  const void *v88;
  int64_t v89;
  char *v90;
  char *v91;
  const void *v92;
  int64_t v93;
  char *v94;
  char *v95;
  const void *v96;
  int64_t v97;
  char *v98;
  char *v99;
  const void *v100;
  int64_t v101;
  char *v102;
  char *v103;
  const void *v104;
  int64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  const void *v108;
  int64_t v109;
  char *v110;
  char *v111;
  const void *v112;
  int64_t v113;
  char *v114;
  char *v115;
  const void *v116;
  int64_t v117;
  char *v118;
  char *v119;
  const void *v120;
  int64_t v121;
  char *v122;
  char *v123;
  void *v124[3];
  void *v125[3];
  void *v126[3];
  _QWORD v127[3];
  void *v128;
  void *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  void *v134;
  void *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  void *v140;
  void *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  void *v146;
  void *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  void *v152;
  void *v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  void *v158;
  void *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  void *v164;
  void *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  void *v170;
  void *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  void *v176;
  void *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  void *__p;
  void *v183;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  void *v188;
  void *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  char *v197;
  char *v198;
  char *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t Value;
  _QWORD v212[2];

  Value = *(_QWORD *)**a2;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v212[0] = ElementType;
  v210 = *(_QWORD *)**a1;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v210);
  Value = v9;
  v209 = *(_QWORD *)(*a1)[1];
  v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v209);
  v209 = ElementType;
  v210 = v10;
  v11 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v208 = ElementType;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v207 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = v10;
    else
      v13 = 0;
    v206 = v13;
    v212[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v208);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v207);
    v210 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
  }
  if (mlir::Type::isF32((mlir::Type *)v212)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v210))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v203 = 0;
      v204 = 0;
      v205 = 0;
      v100 = *a3;
      v101 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v101)
      {
        if (v101 < 0)
          goto LABEL_175;
        v102 = (char *)operator new(v101);
        v103 = &v102[8 * (v101 >> 3)];
        v203 = v102;
        v205 = v103;
        memcpy(v102, v100, v101);
        v204 = v103;
      }
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v104 = *a4;
      v105 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v105)
      {
        if (v105 < 0)
          goto LABEL_175;
        v106 = operator new(v105);
        v107 = &v106[v105 >> 3];
        v200 = v106;
        v202 = v107;
        memcpy(v106, v104, v105);
        v201 = v107;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v203, &v200);
      if (v200)
      {
        v201 = v200;
        operator delete(v200);
      }
      v22 = v203;
      if (v203)
      {
        v204 = v203;
        goto LABEL_173;
      }
      return;
    }
    v197 = 0;
    v198 = 0;
    v199 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_175;
      v16 = (char *)operator new(v15);
      v17 = &v16[8 * (v15 >> 3)];
      v197 = v16;
      v199 = v17;
      memcpy(v16, v14, v15);
      v198 = v17;
    }
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_19;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = operator new(v19);
      v21 = &v20[v19 >> 3];
      v194 = v20;
      v196 = v21;
      memcpy(v20, v18, v19);
      v195 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v197, &v194);
      if (v194)
      {
        v195 = v194;
        operator delete(v194);
      }
      v22 = v197;
      if (v197)
      {
        v198 = v197;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v212)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v210))
  {
    if (!mlir::Type::isF32((mlir::Type *)v212)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v210))
    {
      if (mlir::Type::isF32((mlir::Type *)v212)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v210))
      {
        v167 = 0;
        v168 = 0;
        v169 = 0;
        v42 = *a3;
        v43 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v43)
        {
          if (v43 < 0)
            goto LABEL_175;
          v44 = (char *)operator new(v43);
          v45 = &v44[8 * (v43 >> 3)];
          v167 = v44;
          v169 = v45;
          memcpy(v44, v42, v43);
          v168 = v45;
        }
        v164 = 0;
        v165 = 0;
        v166 = 0;
        v46 = *a4;
        v47 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v47)
        {
          if (v47 < 0)
            goto LABEL_175;
          v48 = (char *)operator new(v47);
          v49 = &v48[8 * (v47 >> 3)];
          v164 = v48;
          v166 = v49;
          memcpy(v48, v46, v47);
          v165 = v49;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v167, (_QWORD **)&v164);
        if (v164)
        {
          v165 = v164;
          operator delete(v164);
        }
        v22 = v167;
        if (v167)
        {
          v168 = v167;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v212)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v210))
      {
        v161 = 0;
        v162 = 0;
        v163 = 0;
        v50 = *a3;
        v51 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v51)
        {
          if (v51 < 0)
            goto LABEL_175;
          v52 = (char *)operator new(v51);
          v53 = &v52[8 * (v51 >> 3)];
          v161 = v52;
          v163 = v53;
          memcpy(v52, v50, v51);
          v162 = v53;
        }
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v54 = *a4;
        v55 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v55)
        {
          if (v55 < 0)
            goto LABEL_175;
          v56 = (char *)operator new(v55);
          v57 = &v56[8 * (v55 >> 3)];
          v158 = v56;
          v160 = v57;
          memcpy(v56, v54, v55);
          v159 = v57;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v161, (_QWORD **)&v158);
        if (v158)
        {
          v159 = v158;
          operator delete(v158);
        }
        v22 = v161;
        if (v161)
        {
          v162 = v161;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v212))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          v149 = 0;
          v150 = 0;
          v151 = 0;
          v60 = *a3;
          v61 = (_BYTE *)a3[1] - (_BYTE *)*a3;
          if (v61)
          {
            if (v61 < 0)
              goto LABEL_175;
            v62 = (char *)operator new(v61);
            v63 = &v62[8 * (v61 >> 3)];
            v149 = v62;
            v151 = v63;
            memcpy(v62, v60, v61);
            v150 = v63;
          }
          v146 = 0;
          v147 = 0;
          v148 = 0;
          v64 = *a4;
          v65 = (_BYTE *)a4[1] - (_BYTE *)*a4;
          if (v65)
          {
            if (v65 < 0)
              goto LABEL_175;
            v66 = (char *)operator new(v65);
            v67 = &v66[8 * (v65 >> 3)];
            v146 = v66;
            v148 = v67;
            memcpy(v66, v64, v65);
            v147 = v67;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v149, (_QWORD **)&v146);
          if (v146)
          {
            v147 = v146;
            operator delete(v146);
          }
          v22 = v149;
          if (v149)
          {
            v150 = v149;
            goto LABEL_173;
          }
          return;
        }
        v155 = 0;
        v156 = 0;
        v157 = 0;
        v84 = *a3;
        v85 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v85)
        {
          if (v85 < 0)
            goto LABEL_175;
          v86 = (char *)operator new(v85);
          v87 = &v86[8 * (v85 >> 3)];
          v155 = v86;
          v157 = v87;
          memcpy(v86, v84, v85);
          v156 = v87;
        }
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v88 = *a4;
        v89 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v89)
        {
          if (v89 < 0)
            goto LABEL_175;
          v90 = (char *)operator new(v89);
          v91 = &v90[8 * (v89 >> 3)];
          v152 = v90;
          v154 = v91;
          memcpy(v90, v88, v89);
          v153 = v91;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v155, (_QWORD **)&v152, v58, v59);
        if (v152)
        {
          v153 = v152;
          operator delete(v152);
        }
        v22 = v155;
        if (v155)
        {
          v156 = v155;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v212))
      {
        v143 = 0;
        v144 = 0;
        v145 = 0;
        v68 = *a3;
        v69 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v69)
        {
          if (v69 < 0)
            goto LABEL_175;
          v70 = (char *)operator new(v69);
          v71 = &v70[8 * (v69 >> 3)];
          v143 = v70;
          v145 = v71;
          memcpy(v70, v68, v69);
          v144 = v71;
        }
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v72 = *a4;
        v73 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v73)
        {
          if (v73 < 0)
            goto LABEL_175;
          v74 = (char *)operator new(v73);
          v75 = &v74[8 * (v73 >> 3)];
          v140 = v74;
          v142 = v75;
          memcpy(v74, v72, v73);
          v141 = v75;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v143, (_QWORD **)&v140);
        if (v140)
        {
          v141 = v140;
          operator delete(v140);
        }
        v22 = v143;
        if (v143)
        {
          v144 = v143;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v212, 64))
      {
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v76 = *a3;
        v77 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v77)
        {
          if (v77 < 0)
            goto LABEL_175;
          v78 = (char *)operator new(v77);
          v79 = &v78[8 * (v77 >> 3)];
          v137 = v78;
          v139 = v79;
          memcpy(v78, v76, v77);
          v138 = v79;
        }
        v134 = 0;
        v135 = 0;
        v136 = 0;
        v80 = *a4;
        v81 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v81)
        {
          if (v81 < 0)
            goto LABEL_175;
          v82 = (char *)operator new(v81);
          v83 = &v82[8 * (v81 >> 3)];
          v134 = v82;
          v136 = v83;
          memcpy(v82, v80, v81);
          v135 = v83;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v137, (_QWORD **)&v134);
        if (v134)
        {
          v135 = v134;
          operator delete(v134);
        }
        v22 = v137;
        if (v137)
        {
          v138 = v137;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v212, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v212, 16))
        {
          std::vector<long long>::vector(v127, (uint64_t)a3);
          std::vector<long long>::vector(v126, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)v127, (_QWORD **)v126);
          if (v126[0])
          {
            v126[1] = v126[0];
            operator delete(v126[0]);
          }
          v22 = (void *)v127[0];
          if (v127[0])
          {
            v127[1] = v127[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v212, 8) && !mlir::Type::isInteger((mlir::Type *)v212, 1))
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>();
          std::vector<long long>::vector(v125, (uint64_t)a3);
          std::vector<long long>::vector(v124, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)v125, (_QWORD **)v124);
          if (v124[0])
          {
            v124[1] = v124[0];
            operator delete(v124[0]);
          }
          v22 = v125[0];
          if (v125[0])
          {
            v125[1] = v125[0];
            goto LABEL_173;
          }
        }
        return;
      }
      v131 = 0;
      v132 = 0;
      v133 = 0;
      v92 = *a3;
      v93 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v93)
      {
        if (v93 < 0)
          goto LABEL_175;
        v94 = (char *)operator new(v93);
        v95 = &v94[8 * (v93 >> 3)];
        v131 = v94;
        v133 = v95;
        memcpy(v94, v92, v93);
        v132 = v95;
      }
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v96 = *a4;
      v97 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v97)
      {
        if (v97 < 0)
          goto LABEL_175;
        v98 = (char *)operator new(v97);
        v99 = &v98[8 * (v97 >> 3)];
        v128 = v98;
        v130 = v99;
        memcpy(v98, v96, v97);
        v129 = v99;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v131, (_QWORD **)&v128);
      if (v128)
      {
        v129 = v128;
        operator delete(v128);
      }
      v22 = v131;
      if (v131)
      {
        v132 = v131;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v173 = 0;
      v174 = 0;
      v175 = 0;
      v34 = *a3;
      v35 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v35)
      {
        if (v35 < 0)
          goto LABEL_175;
        v36 = (char *)operator new(v35);
        v37 = &v36[8 * (v35 >> 3)];
        v173 = v36;
        v175 = v37;
        memcpy(v36, v34, v35);
        v174 = v37;
      }
      v170 = 0;
      v171 = 0;
      v172 = 0;
      v38 = *a4;
      v39 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v39)
      {
        if (v39 < 0)
          goto LABEL_175;
        v40 = (char *)operator new(v39);
        v41 = &v40[8 * (v39 >> 3)];
        v170 = v40;
        v172 = v41;
        memcpy(v40, v38, v39);
        v171 = v41;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v173, (_QWORD **)&v170);
      if (v170)
      {
        v171 = v170;
        operator delete(v170);
      }
      v22 = v173;
      if (v173)
      {
        v174 = v173;
        goto LABEL_173;
      }
      return;
    }
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v116 = *a3;
    v117 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v117)
    {
      if (v117 < 0)
        goto LABEL_175;
      v118 = (char *)operator new(v117);
      v119 = &v118[8 * (v117 >> 3)];
      v179 = v118;
      v181 = v119;
      memcpy(v118, v116, v117);
      v180 = v119;
    }
    v176 = 0;
    v177 = 0;
    v178 = 0;
    v120 = *a4;
    v121 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v121)
    {
      if (v121 < 0)
        goto LABEL_175;
      v122 = (char *)operator new(v121);
      v123 = &v122[8 * (v121 >> 3)];
      v176 = v122;
      v178 = v123;
      memcpy(v122, v120, v121);
      v177 = v123;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v179, (_QWORD **)&v176, v32, v33);
    if (v176)
    {
      v177 = v176;
      operator delete(v176);
    }
    v22 = v179;
    if (v179)
    {
      v180 = v179;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v192 = 0;
    v191 = 0;
    v193 = 0;
    v108 = *a3;
    v109 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v109)
    {
      if (v109 < 0)
        goto LABEL_175;
      v110 = (char *)operator new(v109);
      v111 = &v110[8 * (v109 >> 3)];
      v191 = v110;
      v193 = v111;
      memcpy(v110, v108, v109);
      v192 = v111;
    }
    v189 = 0;
    v188 = 0;
    v190 = 0;
    v112 = *a4;
    v113 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v113)
    {
      if (v113 < 0)
        goto LABEL_175;
      v114 = (char *)operator new(v113);
      v115 = &v114[8 * (v113 >> 3)];
      v188 = v114;
      v190 = v115;
      memcpy(v114, v112, v113);
      v189 = v115;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v191, (_QWORD **)&v188, v23);
    if (v188)
    {
      v189 = v188;
      operator delete(v188);
    }
    v22 = v191;
    if (v191)
    {
      v192 = v191;
      goto LABEL_173;
    }
    return;
  }
  v186 = 0;
  v185 = 0;
  v187 = 0;
  v24 = *a3;
  v25 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v25)
  {
    if (v25 < 0)
      goto LABEL_175;
    v26 = (char *)operator new(v25);
    v27 = &v26[8 * (v25 >> 3)];
    v185 = v26;
    v187 = v27;
    memcpy(v26, v24, v25);
    v186 = v27;
  }
  v183 = 0;
  __p = 0;
  v184 = 0;
  v28 = *a4;
  v29 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v29)
  {
    if (v29 < 0)
      goto LABEL_175;
    v30 = (char *)operator new(v29);
    v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    v184 = v31;
    memcpy(v30, v28, v29);
    v183 = v31;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)3>(a1, a2, (uint64_t)&v185, (_QWORD **)&__p);
  if (__p)
  {
    v183 = __p;
    operator delete(__p);
  }
  v22 = v185;
  if (v185)
  {
    v186 = v185;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)4>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  double v31;
  const void *v32;
  int64_t v33;
  char *v34;
  char *v35;
  const void *v36;
  int64_t v37;
  char *v38;
  char *v39;
  const void *v40;
  int64_t v41;
  char *v42;
  char *v43;
  const void *v44;
  int64_t v45;
  char *v46;
  char *v47;
  const void *v48;
  int64_t v49;
  char *v50;
  char *v51;
  const void *v52;
  int64_t v53;
  char *v54;
  char *v55;
  double v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  char *v63;
  char *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  char *v71;
  char *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  char *v79;
  char *v80;
  const void *v81;
  int64_t v82;
  char *v83;
  char *v84;
  const void *v85;
  int64_t v86;
  char *v87;
  char *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  char *v95;
  char *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  char *v111;
  char *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  const void *v117;
  int64_t v118;
  char *v119;
  char *v120;
  long double v121;
  int16x4_t v122;
  void *v123[3];
  void *v124[3];
  void *v125[3];
  _QWORD v126[3];
  void *v127;
  void *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  void *v133;
  void *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  void *v139;
  void *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  void *v145;
  void *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  void *v151;
  void *v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  void *v157;
  void *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  void *v163;
  void *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  void *v169;
  void *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  void *v175;
  void *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  void *__p;
  void *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  void *v187;
  void *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  char *v196;
  char *v197;
  char *v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t Value;
  _QWORD v211[2];

  Value = *(_QWORD *)**a2;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v211[0] = ElementType;
  v209 = *(_QWORD *)**a1;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v209);
  Value = v9;
  v208 = *(_QWORD *)(*a1)[1];
  v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v208);
  v208 = ElementType;
  v209 = v10;
  v11 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v207 = ElementType;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v206 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = v10;
    else
      v13 = 0;
    v205 = v13;
    v211[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v207);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v206);
    v209 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v205);
  }
  if (mlir::Type::isF32((mlir::Type *)v211)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v209))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v202 = 0;
      v203 = 0;
      v204 = 0;
      v97 = *a3;
      v98 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_175;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v202 = v99;
        v204 = v100;
        memcpy(v99, v97, v98);
        v203 = v100;
      }
      v199 = 0;
      v200 = 0;
      v201 = 0;
      v101 = *a4;
      v102 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_175;
        v103 = operator new(v102);
        v104 = &v103[v102 >> 3];
        v199 = v103;
        v201 = v104;
        memcpy(v103, v101, v102);
        v200 = v104;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v202, &v199);
      if (v199)
      {
        v200 = v199;
        operator delete(v199);
      }
      v22 = v202;
      if (v202)
      {
        v203 = v202;
        goto LABEL_173;
      }
      return;
    }
    v196 = 0;
    v197 = 0;
    v198 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_175;
      v16 = (char *)operator new(v15);
      v17 = &v16[8 * (v15 >> 3)];
      v196 = v16;
      v198 = v17;
      memcpy(v16, v14, v15);
      v197 = v17;
    }
    v193 = 0;
    v194 = 0;
    v195 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_19;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = operator new(v19);
      v21 = &v20[v19 >> 3];
      v193 = v20;
      v195 = v21;
      memcpy(v20, v18, v19);
      v194 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v196, &v193);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      v22 = v196;
      if (v196)
      {
        v197 = v196;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v211)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v209))
  {
    if (!mlir::Type::isF32((mlir::Type *)v211)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v209))
    {
      if (mlir::Type::isF32((mlir::Type *)v211)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v209))
      {
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v40 = *a3;
        v41 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v41)
        {
          if (v41 < 0)
            goto LABEL_175;
          v42 = (char *)operator new(v41);
          v43 = &v42[8 * (v41 >> 3)];
          v166 = v42;
          v168 = v43;
          memcpy(v42, v40, v41);
          v167 = v43;
        }
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v44 = *a4;
        v45 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v45)
        {
          if (v45 < 0)
            goto LABEL_175;
          v46 = (char *)operator new(v45);
          v47 = &v46[8 * (v45 >> 3)];
          v163 = v46;
          v165 = v47;
          memcpy(v46, v44, v45);
          v164 = v47;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v166, (_QWORD **)&v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        v22 = v166;
        if (v166)
        {
          v167 = v166;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v211)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v209))
      {
        v160 = 0;
        v161 = 0;
        v162 = 0;
        v48 = *a3;
        v49 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_175;
          v50 = (char *)operator new(v49);
          v51 = &v50[8 * (v49 >> 3)];
          v160 = v50;
          v162 = v51;
          memcpy(v50, v48, v49);
          v161 = v51;
        }
        v157 = 0;
        v158 = 0;
        v159 = 0;
        v52 = *a4;
        v53 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v53)
        {
          if (v53 < 0)
            goto LABEL_175;
          v54 = (char *)operator new(v53);
          v55 = &v54[8 * (v53 >> 3)];
          v157 = v54;
          v159 = v55;
          memcpy(v54, v52, v53);
          v158 = v55;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v160, (_QWORD **)&v157);
        if (v157)
        {
          v158 = v157;
          operator delete(v157);
        }
        v22 = v160;
        if (v160)
        {
          v161 = v160;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v211))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          v148 = 0;
          v149 = 0;
          v150 = 0;
          v57 = *a3;
          v58 = (_BYTE *)a3[1] - (_BYTE *)*a3;
          if (v58)
          {
            if (v58 < 0)
              goto LABEL_175;
            v59 = (char *)operator new(v58);
            v60 = &v59[8 * (v58 >> 3)];
            v148 = v59;
            v150 = v60;
            memcpy(v59, v57, v58);
            v149 = v60;
          }
          v145 = 0;
          v146 = 0;
          v147 = 0;
          v61 = *a4;
          v62 = (_BYTE *)a4[1] - (_BYTE *)*a4;
          if (v62)
          {
            if (v62 < 0)
              goto LABEL_175;
            v63 = (char *)operator new(v62);
            v64 = &v63[8 * (v62 >> 3)];
            v145 = v63;
            v147 = v64;
            memcpy(v63, v61, v62);
            v146 = v64;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v148, (_QWORD **)&v145);
          if (v145)
          {
            v146 = v145;
            operator delete(v145);
          }
          v22 = v148;
          if (v148)
          {
            v149 = v148;
            goto LABEL_173;
          }
          return;
        }
        v154 = 0;
        v155 = 0;
        v156 = 0;
        v81 = *a3;
        v82 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v82)
        {
          if (v82 < 0)
            goto LABEL_175;
          v83 = (char *)operator new(v82);
          v84 = &v83[8 * (v82 >> 3)];
          v154 = v83;
          v156 = v84;
          memcpy(v83, v81, v82);
          v155 = v84;
        }
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v85 = *a4;
        v86 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v86)
        {
          if (v86 < 0)
            goto LABEL_175;
          v87 = (char *)operator new(v86);
          v88 = &v87[8 * (v86 >> 3)];
          v151 = v87;
          v153 = v88;
          memcpy(v87, v85, v86);
          v152 = v88;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v154, (_QWORD **)&v151, v56);
        if (v151)
        {
          v152 = v151;
          operator delete(v151);
        }
        v22 = v154;
        if (v154)
        {
          v155 = v154;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v211))
      {
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v65 = *a3;
        v66 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_175;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v142 = v67;
          v144 = v68;
          memcpy(v67, v65, v66);
          v143 = v68;
        }
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v69 = *a4;
        v70 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_175;
          v71 = (char *)operator new(v70);
          v72 = &v71[8 * (v70 >> 3)];
          v139 = v71;
          v141 = v72;
          memcpy(v71, v69, v70);
          v140 = v72;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v142, (_QWORD **)&v139);
        if (v139)
        {
          v140 = v139;
          operator delete(v139);
        }
        v22 = v142;
        if (v142)
        {
          v143 = v142;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v211, 64))
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v73 = *a3;
        v74 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_175;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v136 = v75;
          v138 = v76;
          memcpy(v75, v73, v74);
          v137 = v76;
        }
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v77 = *a4;
        v78 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v78)
        {
          if (v78 < 0)
            goto LABEL_175;
          v79 = (char *)operator new(v78);
          v80 = &v79[8 * (v78 >> 3)];
          v133 = v79;
          v135 = v80;
          memcpy(v79, v77, v78);
          v134 = v80;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v136, (_QWORD **)&v133);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v22 = v136;
        if (v136)
        {
          v137 = v136;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v211, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v211, 16))
        {
          std::vector<long long>::vector(v126, (uint64_t)a3);
          std::vector<long long>::vector(v125, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)v126, (_QWORD **)v125, v121, v122);
          if (v125[0])
          {
            v125[1] = v125[0];
            operator delete(v125[0]);
          }
          v22 = (void *)v126[0];
          if (v126[0])
          {
            v126[1] = v126[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v211, 8) && !mlir::Type::isInteger((mlir::Type *)v211, 1))
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>();
          std::vector<long long>::vector(v124, (uint64_t)a3);
          std::vector<long long>::vector(v123, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)v124, (_QWORD **)v123);
          if (v123[0])
          {
            v123[1] = v123[0];
            operator delete(v123[0]);
          }
          v22 = v124[0];
          if (v124[0])
          {
            v124[1] = v124[0];
            goto LABEL_173;
          }
        }
        return;
      }
      v130 = 0;
      v131 = 0;
      v132 = 0;
      v89 = *a3;
      v90 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v90)
      {
        if (v90 < 0)
          goto LABEL_175;
        v91 = (char *)operator new(v90);
        v92 = &v91[8 * (v90 >> 3)];
        v130 = v91;
        v132 = v92;
        memcpy(v91, v89, v90);
        v131 = v92;
      }
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v93 = *a4;
      v94 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_175;
        v95 = (char *)operator new(v94);
        v96 = &v95[8 * (v94 >> 3)];
        v127 = v95;
        v129 = v96;
        memcpy(v95, v93, v94);
        v128 = v96;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v130, (_QWORD **)&v127);
      if (v127)
      {
        v128 = v127;
        operator delete(v127);
      }
      v22 = v130;
      if (v130)
      {
        v131 = v130;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v172 = 0;
      v173 = 0;
      v174 = 0;
      v32 = *a3;
      v33 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v33)
      {
        if (v33 < 0)
          goto LABEL_175;
        v34 = (char *)operator new(v33);
        v35 = &v34[8 * (v33 >> 3)];
        v172 = v34;
        v174 = v35;
        memcpy(v34, v32, v33);
        v173 = v35;
      }
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v36 = *a4;
      v37 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v37)
      {
        if (v37 < 0)
          goto LABEL_175;
        v38 = (char *)operator new(v37);
        v39 = &v38[8 * (v37 >> 3)];
        v169 = v38;
        v171 = v39;
        memcpy(v38, v36, v37);
        v170 = v39;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v172, (_QWORD **)&v169);
      if (v169)
      {
        v170 = v169;
        operator delete(v169);
      }
      v22 = v172;
      if (v172)
      {
        v173 = v172;
        goto LABEL_173;
      }
      return;
    }
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v113 = *a3;
    v114 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_175;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v178 = v115;
      v180 = v116;
      memcpy(v115, v113, v114);
      v179 = v116;
    }
    v175 = 0;
    v176 = 0;
    v177 = 0;
    v117 = *a4;
    v118 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v118)
    {
      if (v118 < 0)
        goto LABEL_175;
      v119 = (char *)operator new(v118);
      v120 = &v119[8 * (v118 >> 3)];
      v175 = v119;
      v177 = v120;
      memcpy(v119, v117, v118);
      v176 = v120;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v178, (_QWORD **)&v175, v31);
    if (v175)
    {
      v176 = v175;
      operator delete(v175);
    }
    v22 = v178;
    if (v178)
    {
      v179 = v178;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v191 = 0;
    v190 = 0;
    v192 = 0;
    v105 = *a3;
    v106 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v106)
    {
      if (v106 < 0)
        goto LABEL_175;
      v107 = (char *)operator new(v106);
      v108 = &v107[8 * (v106 >> 3)];
      v190 = v107;
      v192 = v108;
      memcpy(v107, v105, v106);
      v191 = v108;
    }
    v188 = 0;
    v187 = 0;
    v189 = 0;
    v109 = *a4;
    v110 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_175;
      v111 = (char *)operator new(v110);
      v112 = &v111[8 * (v110 >> 3)];
      v187 = v111;
      v189 = v112;
      memcpy(v111, v109, v110);
      v188 = v112;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v190, (_QWORD **)&v187);
    if (v187)
    {
      v188 = v187;
      operator delete(v187);
    }
    v22 = v190;
    if (v190)
    {
      v191 = v190;
      goto LABEL_173;
    }
    return;
  }
  v185 = 0;
  v184 = 0;
  v186 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_175;
    v25 = (char *)operator new(v24);
    v26 = &v25[8 * (v24 >> 3)];
    v184 = v25;
    v186 = v26;
    memcpy(v25, v23, v24);
    v185 = v26;
  }
  v182 = 0;
  __p = 0;
  v183 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_175;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v183 = v30;
    memcpy(v29, v27, v28);
    v182 = v30;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)4>(a1, a2, (uint64_t)&v184, (_QWORD **)&__p);
  if (__p)
  {
    v182 = __p;
    operator delete(__p);
  }
  v22 = v184;
  if (v184)
  {
    v185 = v184;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)5>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  char *v41;
  char *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  char *v49;
  char *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  char *v57;
  char *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  char *v65;
  char *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  char *v73;
  char *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  char *v81;
  char *v82;
  const void *v83;
  int64_t v84;
  char *v85;
  char *v86;
  const void *v87;
  int64_t v88;
  char *v89;
  char *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  char *v97;
  char *v98;
  const void *v99;
  int64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  const void *v103;
  int64_t v104;
  char *v105;
  char *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  char *v113;
  char *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  _QWORD v122[3];
  void *v123;
  void *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  void *v129;
  void *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  void *v135;
  void *v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  void *v141;
  void *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  void *v147;
  void *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  void *v153;
  void *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  void *v159;
  void *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  void *v165;
  void *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  void *v171;
  void *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  void *__p;
  void *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  void *v183;
  void *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  char *v192;
  char *v193;
  char *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t Value;
  _QWORD v207[2];

  Value = *(_QWORD *)**a2;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v207[0] = ElementType;
  v205 = *(_QWORD *)**a1;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v205);
  Value = v9;
  v204 = *(_QWORD *)(*a1)[1];
  v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v204);
  v204 = ElementType;
  v205 = v10;
  v11 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v203 = ElementType;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v202 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = v10;
    else
      v13 = 0;
    v201 = v13;
    v207[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)v207)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_175;
        v97 = (char *)operator new(v96);
        v98 = &v97[8 * (v96 >> 3)];
        v198 = v97;
        v200 = v98;
        memcpy(v97, v95, v96);
        v199 = v98;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_175;
        v101 = operator new(v100);
        v102 = &v101[v100 >> 3];
        v195 = v101;
        v197 = v102;
        memcpy(v101, v99, v100);
        v196 = v102;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v198, &v195);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_173;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_175;
      v16 = (char *)operator new(v15);
      v17 = &v16[8 * (v15 >> 3)];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_19;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v192, &v189);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v207)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (!mlir::Type::isF32((mlir::Type *)v207)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)v207)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v162 = 0;
        v163 = 0;
        v164 = 0;
        v39 = *a3;
        v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v40)
        {
          if (v40 < 0)
            goto LABEL_175;
          v41 = (char *)operator new(v40);
          v42 = &v41[8 * (v40 >> 3)];
          v162 = v41;
          v164 = v42;
          memcpy(v41, v39, v40);
          v163 = v42;
        }
        v159 = 0;
        v160 = 0;
        v161 = 0;
        v43 = *a4;
        v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v44)
        {
          if (v44 < 0)
            goto LABEL_175;
          v45 = (char *)operator new(v44);
          v46 = &v45[8 * (v44 >> 3)];
          v159 = v45;
          v161 = v46;
          memcpy(v45, v43, v44);
          v160 = v46;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v162, (_QWORD **)&v159);
        if (v159)
        {
          v160 = v159;
          operator delete(v159);
        }
        v22 = v162;
        if (v162)
        {
          v163 = v162;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v207)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v156 = 0;
        v157 = 0;
        v158 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_175;
          v49 = (char *)operator new(v48);
          v50 = &v49[8 * (v48 >> 3)];
          v156 = v49;
          v158 = v50;
          memcpy(v49, v47, v48);
          v157 = v50;
        }
        v153 = 0;
        v154 = 0;
        v155 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_175;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v153 = v53;
          v155 = v54;
          memcpy(v53, v51, v52);
          v154 = v54;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v156, (_QWORD **)&v153);
        if (v153)
        {
          v154 = v153;
          operator delete(v153);
        }
        v22 = v156;
        if (v156)
        {
          v157 = v156;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v207))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          v144 = 0;
          v145 = 0;
          v146 = 0;
          v55 = *a3;
          v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
          if (v56)
          {
            if (v56 < 0)
              goto LABEL_175;
            v57 = (char *)operator new(v56);
            v58 = &v57[8 * (v56 >> 3)];
            v144 = v57;
            v146 = v58;
            memcpy(v57, v55, v56);
            v145 = v58;
          }
          v141 = 0;
          v142 = 0;
          v143 = 0;
          v59 = *a4;
          v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
          if (v60)
          {
            if (v60 < 0)
              goto LABEL_175;
            v61 = (char *)operator new(v60);
            v62 = &v61[8 * (v60 >> 3)];
            v141 = v61;
            v143 = v62;
            memcpy(v61, v59, v60);
            v142 = v62;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v144, (_QWORD **)&v141);
          if (v141)
          {
            v142 = v141;
            operator delete(v141);
          }
          v22 = v144;
          if (v144)
          {
            v145 = v144;
            goto LABEL_173;
          }
          return;
        }
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v79 = *a3;
        v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v80)
        {
          if (v80 < 0)
            goto LABEL_175;
          v81 = (char *)operator new(v80);
          v82 = &v81[8 * (v80 >> 3)];
          v150 = v81;
          v152 = v82;
          memcpy(v81, v79, v80);
          v151 = v82;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v83 = *a4;
        v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v84)
        {
          if (v84 < 0)
            goto LABEL_175;
          v85 = (char *)operator new(v84);
          v86 = &v85[8 * (v84 >> 3)];
          v147 = v85;
          v149 = v86;
          memcpy(v85, v83, v84);
          v148 = v86;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v150, (_QWORD **)&v147);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v207))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_175;
          v65 = (char *)operator new(v64);
          v66 = &v65[8 * (v64 >> 3)];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_175;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v138, (_QWORD **)&v135);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v207, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_175;
          v73 = (char *)operator new(v72);
          v74 = &v73[8 * (v72 >> 3)];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_175;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)5>((uint64_t)a1, a2, (uint64_t)&v132, (_QWORD **)&v129);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v207, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v207, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)5>((unint64_t)a1, a2, (uint64_t)v122, (_QWORD **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = (void *)v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v207, 8) && !mlir::Type::isInteger((mlir::Type *)v207, 1))
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)5>((unint64_t)a1, a2, (uint64_t)v120, (_QWORD **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_173;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v87 = *a3;
      v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v88)
      {
        if (v88 < 0)
          goto LABEL_175;
        v89 = (char *)operator new(v88);
        v90 = &v89[8 * (v88 >> 3)];
        v126 = v89;
        v128 = v90;
        memcpy(v89, v87, v88);
        v127 = v90;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v91 = *a4;
      v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v92)
      {
        if (v92 < 0)
          goto LABEL_175;
        v93 = (char *)operator new(v92);
        v94 = &v93[8 * (v92 >> 3)];
        v123 = v93;
        v125 = v94;
        memcpy(v93, v91, v92);
        v124 = v94;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)5>((unint64_t)a1, a2, (uint64_t)&v126, (_QWORD **)&v123);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v168 = 0;
      v169 = 0;
      v170 = 0;
      v31 = *a3;
      v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v32)
      {
        if (v32 < 0)
          goto LABEL_175;
        v33 = (char *)operator new(v32);
        v34 = &v33[8 * (v32 >> 3)];
        v168 = v33;
        v170 = v34;
        memcpy(v33, v31, v32);
        v169 = v34;
      }
      v165 = 0;
      v166 = 0;
      v167 = 0;
      v35 = *a4;
      v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v36)
      {
        if (v36 < 0)
          goto LABEL_175;
        v37 = (char *)operator new(v36);
        v38 = &v37[8 * (v36 >> 3)];
        v165 = v37;
        v167 = v38;
        memcpy(v37, v35, v36);
        v166 = v38;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v168, (_QWORD **)&v165);
      if (v165)
      {
        v166 = v165;
        operator delete(v165);
      }
      v22 = v168;
      if (v168)
      {
        v169 = v168;
        goto LABEL_173;
      }
      return;
    }
    v174 = 0;
    v175 = 0;
    v176 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_175;
      v113 = (char *)operator new(v112);
      v114 = &v113[8 * (v112 >> 3)];
      v174 = v113;
      v176 = v114;
      memcpy(v113, v111, v112);
      v175 = v114;
    }
    v171 = 0;
    v172 = 0;
    v173 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_175;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v171 = v117;
      v173 = v118;
      memcpy(v117, v115, v116);
      v172 = v118;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v174, (_QWORD **)&v171);
    if (v171)
    {
      v172 = v171;
      operator delete(v171);
    }
    v22 = v174;
    if (v174)
    {
      v175 = v174;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v187 = 0;
    v186 = 0;
    v188 = 0;
    v103 = *a3;
    v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v104)
    {
      if (v104 < 0)
        goto LABEL_175;
      v105 = (char *)operator new(v104);
      v106 = &v105[8 * (v104 >> 3)];
      v186 = v105;
      v188 = v106;
      memcpy(v105, v103, v104);
      v187 = v106;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v107 = *a4;
    v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v108)
    {
      if (v108 < 0)
        goto LABEL_175;
      v109 = (char *)operator new(v108);
      v110 = &v109[8 * (v108 >> 3)];
      v183 = v109;
      v185 = v110;
      memcpy(v109, v107, v108);
      v184 = v110;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v186, (_QWORD **)&v183);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_173;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_175;
    v25 = (char *)operator new(v24);
    v26 = &v25[8 * (v24 >> 3)];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_175;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)5>(a1, a2, (uint64_t)&v180, (_QWORD **)&__p);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)15>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  char *v41;
  char *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  char *v49;
  char *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  double v55;
  float v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  char *v63;
  char *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  char *v71;
  char *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  char *v79;
  char *v80;
  const void *v81;
  int64_t v82;
  char *v83;
  char *v84;
  const void *v85;
  int64_t v86;
  char *v87;
  char *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  char *v95;
  char *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  char *v111;
  char *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  const void *v117;
  int64_t v118;
  char *v119;
  char *v120;
  void *v121[3];
  void *v122[3];
  void *v123[3];
  _QWORD v124[3];
  void *v125;
  void *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  void *v131;
  void *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  void *v137;
  void *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  void *v143;
  void *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  void *v149;
  void *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  void *v155;
  void *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  void *v161;
  void *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  void *v167;
  void *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  void *v173;
  void *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  void *__p;
  void *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  void *v185;
  void *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  char *v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t Value;
  _QWORD v209[2];

  Value = *(_QWORD *)**a2;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v209[0] = ElementType;
  v207 = *(_QWORD *)**a1;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v207);
  Value = v9;
  v206 = *(_QWORD *)(*a1)[1];
  v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v206);
  v206 = ElementType;
  v207 = v10;
  v11 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v205 = ElementType;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v204 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = v10;
    else
      v13 = 0;
    v203 = v13;
    v209[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v205);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v204);
    v207 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
  }
  if (mlir::Type::isF32((mlir::Type *)v209)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v207))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v97 = *a3;
      v98 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_175;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v200 = v99;
        v202 = v100;
        memcpy(v99, v97, v98);
        v201 = v100;
      }
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v101 = *a4;
      v102 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_175;
        v103 = operator new(v102);
        v104 = &v103[v102 >> 3];
        v197 = v103;
        v199 = v104;
        memcpy(v103, v101, v102);
        v198 = v104;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v200, &v197);
      if (v197)
      {
        v198 = v197;
        operator delete(v197);
      }
      v22 = v200;
      if (v200)
      {
        v201 = v200;
        goto LABEL_173;
      }
      return;
    }
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_175;
      v16 = (char *)operator new(v15);
      v17 = &v16[8 * (v15 >> 3)];
      v194 = v16;
      v196 = v17;
      memcpy(v16, v14, v15);
      v195 = v17;
    }
    v191 = 0;
    v192 = 0;
    v193 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_19;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = operator new(v19);
      v21 = &v20[v19 >> 3];
      v191 = v20;
      v193 = v21;
      memcpy(v20, v18, v19);
      v192 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v194, &v191);
      if (v191)
      {
        v192 = v191;
        operator delete(v191);
      }
      v22 = v194;
      if (v194)
      {
        v195 = v194;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v209)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v207))
  {
    if (!mlir::Type::isF32((mlir::Type *)v209)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v207))
    {
      if (mlir::Type::isF32((mlir::Type *)v209)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v207))
      {
        v164 = 0;
        v165 = 0;
        v166 = 0;
        v39 = *a3;
        v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v40)
        {
          if (v40 < 0)
            goto LABEL_175;
          v41 = (char *)operator new(v40);
          v42 = &v41[8 * (v40 >> 3)];
          v164 = v41;
          v166 = v42;
          memcpy(v41, v39, v40);
          v165 = v42;
        }
        v161 = 0;
        v162 = 0;
        v163 = 0;
        v43 = *a4;
        v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v44)
        {
          if (v44 < 0)
            goto LABEL_175;
          v45 = (char *)operator new(v44);
          v46 = &v45[8 * (v44 >> 3)];
          v161 = v45;
          v163 = v46;
          memcpy(v45, v43, v44);
          v162 = v46;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v164, (_QWORD **)&v161);
        if (v161)
        {
          v162 = v161;
          operator delete(v161);
        }
        v22 = v164;
        if (v164)
        {
          v165 = v164;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v209)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v207))
      {
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_175;
          v49 = (char *)operator new(v48);
          v50 = &v49[8 * (v48 >> 3)];
          v158 = v49;
          v160 = v50;
          memcpy(v49, v47, v48);
          v159 = v50;
        }
        v155 = 0;
        v156 = 0;
        v157 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_175;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v155 = v53;
          v157 = v54;
          memcpy(v53, v51, v52);
          v156 = v54;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v158, (_QWORD **)&v155);
        if (v155)
        {
          v156 = v155;
          operator delete(v155);
        }
        v22 = v158;
        if (v158)
        {
          v159 = v158;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v209))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          v146 = 0;
          v147 = 0;
          v148 = 0;
          v57 = *a3;
          v58 = (_BYTE *)a3[1] - (_BYTE *)*a3;
          if (v58)
          {
            if (v58 < 0)
              goto LABEL_175;
            v59 = (char *)operator new(v58);
            v60 = &v59[8 * (v58 >> 3)];
            v146 = v59;
            v148 = v60;
            memcpy(v59, v57, v58);
            v147 = v60;
          }
          v143 = 0;
          v144 = 0;
          v145 = 0;
          v61 = *a4;
          v62 = (_BYTE *)a4[1] - (_BYTE *)*a4;
          if (v62)
          {
            if (v62 < 0)
              goto LABEL_175;
            v63 = (char *)operator new(v62);
            v64 = &v63[8 * (v62 >> 3)];
            v143 = v63;
            v145 = v64;
            memcpy(v63, v61, v62);
            v144 = v64;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v146, (_QWORD **)&v143, v55, v56);
          if (v143)
          {
            v144 = v143;
            operator delete(v143);
          }
          v22 = v146;
          if (v146)
          {
            v147 = v146;
            goto LABEL_173;
          }
          return;
        }
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v81 = *a3;
        v82 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v82)
        {
          if (v82 < 0)
            goto LABEL_175;
          v83 = (char *)operator new(v82);
          v84 = &v83[8 * (v82 >> 3)];
          v152 = v83;
          v154 = v84;
          memcpy(v83, v81, v82);
          v153 = v84;
        }
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v85 = *a4;
        v86 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v86)
        {
          if (v86 < 0)
            goto LABEL_175;
          v87 = (char *)operator new(v86);
          v88 = &v87[8 * (v86 >> 3)];
          v149 = v87;
          v151 = v88;
          memcpy(v87, v85, v86);
          v150 = v88;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v152, (_QWORD **)&v149);
        if (v149)
        {
          v150 = v149;
          operator delete(v149);
        }
        v22 = v152;
        if (v152)
        {
          v153 = v152;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v209))
      {
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v65 = *a3;
        v66 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_175;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v140 = v67;
          v142 = v68;
          memcpy(v67, v65, v66);
          v141 = v68;
        }
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v69 = *a4;
        v70 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_175;
          v71 = (char *)operator new(v70);
          v72 = &v71[8 * (v70 >> 3)];
          v137 = v71;
          v139 = v72;
          memcpy(v71, v69, v70);
          v138 = v72;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)15>((unint64_t)a1, a2, (uint64_t)&v140, (_QWORD **)&v137);
        if (v137)
        {
          v138 = v137;
          operator delete(v137);
        }
        v22 = v140;
        if (v140)
        {
          v141 = v140;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v209, 64))
      {
        v134 = 0;
        v135 = 0;
        v136 = 0;
        v73 = *a3;
        v74 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_175;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v134 = v75;
          v136 = v76;
          memcpy(v75, v73, v74);
          v135 = v76;
        }
        v131 = 0;
        v132 = 0;
        v133 = 0;
        v77 = *a4;
        v78 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v78)
        {
          if (v78 < 0)
            goto LABEL_175;
          v79 = (char *)operator new(v78);
          v80 = &v79[8 * (v78 >> 3)];
          v131 = v79;
          v133 = v80;
          memcpy(v79, v77, v78);
          v132 = v80;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v134, (_QWORD **)&v131);
        if (v131)
        {
          v132 = v131;
          operator delete(v131);
        }
        v22 = v134;
        if (v134)
        {
          v135 = v134;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v209, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v209, 16))
        {
          std::vector<long long>::vector(v124, (uint64_t)a3);
          std::vector<long long>::vector(v123, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)v124, (_QWORD **)v123);
          if (v123[0])
          {
            v123[1] = v123[0];
            operator delete(v123[0]);
          }
          v22 = (void *)v124[0];
          if (v124[0])
          {
            v124[1] = v124[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v209, 8) && !mlir::Type::isInteger((mlir::Type *)v209, 1))
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>();
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)v122, (_QWORD **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_173;
          }
        }
        return;
      }
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v89 = *a3;
      v90 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v90)
      {
        if (v90 < 0)
          goto LABEL_175;
        v91 = (char *)operator new(v90);
        v92 = &v91[8 * (v90 >> 3)];
        v128 = v91;
        v130 = v92;
        memcpy(v91, v89, v90);
        v129 = v92;
      }
      v125 = 0;
      v126 = 0;
      v127 = 0;
      v93 = *a4;
      v94 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_175;
        v95 = (char *)operator new(v94);
        v96 = &v95[8 * (v94 >> 3)];
        v125 = v95;
        v127 = v96;
        memcpy(v95, v93, v94);
        v126 = v96;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v128, (_QWORD **)&v125);
      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
      v22 = v128;
      if (v128)
      {
        v129 = v128;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v170 = 0;
      v171 = 0;
      v172 = 0;
      v31 = *a3;
      v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v32)
      {
        if (v32 < 0)
          goto LABEL_175;
        v33 = (char *)operator new(v32);
        v34 = &v33[8 * (v32 >> 3)];
        v170 = v33;
        v172 = v34;
        memcpy(v33, v31, v32);
        v171 = v34;
      }
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v35 = *a4;
      v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v36)
      {
        if (v36 < 0)
          goto LABEL_175;
        v37 = (char *)operator new(v36);
        v38 = &v37[8 * (v36 >> 3)];
        v167 = v37;
        v169 = v38;
        memcpy(v37, v35, v36);
        v168 = v38;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v170, (_QWORD **)&v167);
      if (v167)
      {
        v168 = v167;
        operator delete(v167);
      }
      v22 = v170;
      if (v170)
      {
        v171 = v170;
        goto LABEL_173;
      }
      return;
    }
    v176 = 0;
    v177 = 0;
    v178 = 0;
    v113 = *a3;
    v114 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_175;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v176 = v115;
      v178 = v116;
      memcpy(v115, v113, v114);
      v177 = v116;
    }
    v173 = 0;
    v174 = 0;
    v175 = 0;
    v117 = *a4;
    v118 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v118)
    {
      if (v118 < 0)
        goto LABEL_175;
      v119 = (char *)operator new(v118);
      v120 = &v119[8 * (v118 >> 3)];
      v173 = v119;
      v175 = v120;
      memcpy(v119, v117, v118);
      v174 = v120;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v176, (_QWORD **)&v173);
    if (v173)
    {
      v174 = v173;
      operator delete(v173);
    }
    v22 = v176;
    if (v176)
    {
      v177 = v176;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v189 = 0;
    v188 = 0;
    v190 = 0;
    v105 = *a3;
    v106 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v106)
    {
      if (v106 < 0)
        goto LABEL_175;
      v107 = (char *)operator new(v106);
      v108 = &v107[8 * (v106 >> 3)];
      v188 = v107;
      v190 = v108;
      memcpy(v107, v105, v106);
      v189 = v108;
    }
    v186 = 0;
    v185 = 0;
    v187 = 0;
    v109 = *a4;
    v110 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_175;
      v111 = (char *)operator new(v110);
      v112 = &v111[8 * (v110 >> 3)];
      v185 = v111;
      v187 = v112;
      memcpy(v111, v109, v110);
      v186 = v112;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v188, (_QWORD **)&v185);
    if (v185)
    {
      v186 = v185;
      operator delete(v185);
    }
    v22 = v188;
    if (v188)
    {
      v189 = v188;
      goto LABEL_173;
    }
    return;
  }
  v183 = 0;
  v182 = 0;
  v184 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_175;
    v25 = (char *)operator new(v24);
    v26 = &v25[8 * (v24 >> 3)];
    v182 = v25;
    v184 = v26;
    memcpy(v25, v23, v24);
    v183 = v26;
  }
  v180 = 0;
  __p = 0;
  v181 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_175;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v181 = v30;
    memcpy(v29, v27, v28);
    v180 = v30;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)15>(a1, a2, (uint64_t)&v182, (_QWORD **)&__p);
  if (__p)
  {
    v180 = __p;
    operator delete(__p);
  }
  v22 = v182;
  if (v182)
  {
    v183 = v182;
    goto LABEL_173;
  }
}

void mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)16>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  char *v41;
  char *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  char *v49;
  char *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  double v55;
  float v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  char *v63;
  char *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  char *v71;
  char *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  char *v79;
  char *v80;
  const void *v81;
  int64_t v82;
  char *v83;
  char *v84;
  const void *v85;
  int64_t v86;
  char *v87;
  char *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  char *v95;
  char *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  char *v111;
  char *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  const void *v117;
  int64_t v118;
  char *v119;
  char *v120;
  void *v121[3];
  void *v122[3];
  void *v123[3];
  _QWORD v124[3];
  void *v125;
  void *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  void *v131;
  void *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  void *v137;
  void *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  void *v143;
  void *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  void *v149;
  void *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  void *v155;
  void *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  void *v161;
  void *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  void *v167;
  void *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  void *v173;
  void *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  void *__p;
  void *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  void *v185;
  void *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  char *v194;
  char *v195;
  char *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t Value;
  _QWORD v209[2];

  Value = *(_QWORD *)**a2;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v209[0] = ElementType;
  v207 = *(_QWORD *)**a1;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v207);
  Value = v9;
  v206 = *(_QWORD *)(*a1)[1];
  v10 = mlir::TensorType::getElementType((mlir::TensorType *)&v206);
  v206 = ElementType;
  v207 = v10;
  v11 = *(void **)(*(_QWORD *)ElementType + 136);
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v205 = ElementType;
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v12 = v9;
    else
      v12 = 0;
    v204 = v12;
    if (*(_UNKNOWN **)(*(_QWORD *)v10 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = v10;
    else
      v13 = 0;
    v203 = v13;
    v209[0] = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v205);
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v204);
    v207 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
  }
  if (mlir::Type::isF32((mlir::Type *)v209)
    && mlir::Type::isF32((mlir::Type *)&Value)
    && mlir::Type::isF32((mlir::Type *)&v207))
  {
    if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v97 = *a3;
      v98 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_175;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v200 = v99;
        v202 = v100;
        memcpy(v99, v97, v98);
        v201 = v100;
      }
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v101 = *a4;
      v102 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_175;
        v103 = operator new(v102);
        v104 = &v103[v102 >> 3];
        v197 = v103;
        v199 = v104;
        memcpy(v103, v101, v102);
        v198 = v104;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v200, &v197);
      if (v197)
      {
        v198 = v197;
        operator delete(v197);
      }
      v22 = v200;
      if (v200)
      {
        v201 = v200;
        goto LABEL_173;
      }
      return;
    }
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_175;
      v16 = (char *)operator new(v15);
      v17 = &v16[8 * (v15 >> 3)];
      v194 = v16;
      v196 = v17;
      memcpy(v16, v14, v15);
      v195 = v17;
    }
    v191 = 0;
    v192 = 0;
    v193 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_19;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = operator new(v19);
      v21 = &v20[v19 >> 3];
      v191 = v20;
      v193 = v21;
      memcpy(v20, v18, v19);
      v192 = v21;
LABEL_19:
      mlir::mps::arithmeticBinaryTileBaseKernel<float,float,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v194, &v191);
      if (v191)
      {
        v192 = v191;
        operator delete(v191);
      }
      v22 = v194;
      if (v194)
      {
        v195 = v194;
LABEL_173:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_175:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)v209)
    || !mlir::Type::isF16((mlir::Type *)&Value)
    || !mlir::Type::isF32((mlir::Type *)&v207))
  {
    if (!mlir::Type::isF32((mlir::Type *)v209)
      || !mlir::Type::isF32((mlir::Type *)&Value)
      || !mlir::Type::isF16((mlir::Type *)&v207))
    {
      if (mlir::Type::isF32((mlir::Type *)v209)
        && mlir::Type::isBF16((mlir::Type *)&Value)
        && mlir::Type::isF32((mlir::Type *)&v207))
      {
        v164 = 0;
        v165 = 0;
        v166 = 0;
        v39 = *a3;
        v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v40)
        {
          if (v40 < 0)
            goto LABEL_175;
          v41 = (char *)operator new(v40);
          v42 = &v41[8 * (v40 >> 3)];
          v164 = v41;
          v166 = v42;
          memcpy(v41, v39, v40);
          v165 = v42;
        }
        v161 = 0;
        v162 = 0;
        v163 = 0;
        v43 = *a4;
        v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v44)
        {
          if (v44 < 0)
            goto LABEL_175;
          v45 = (char *)operator new(v44);
          v46 = &v45[8 * (v44 >> 3)];
          v161 = v45;
          v163 = v46;
          memcpy(v45, v43, v44);
          v162 = v46;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,float,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v164, (_QWORD **)&v161);
        if (v161)
        {
          v162 = v161;
          operator delete(v161);
        }
        v22 = v164;
        if (v164)
        {
          v165 = v164;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF32((mlir::Type *)v209)
        && mlir::Type::isF32((mlir::Type *)&Value)
        && mlir::Type::isBF16((mlir::Type *)&v207))
      {
        v158 = 0;
        v159 = 0;
        v160 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_175;
          v49 = (char *)operator new(v48);
          v50 = &v49[8 * (v48 >> 3)];
          v158 = v49;
          v160 = v50;
          memcpy(v49, v47, v48);
          v159 = v50;
        }
        v155 = 0;
        v156 = 0;
        v157 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_175;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v155 = v53;
          v157 = v54;
          memcpy(v53, v51, v52);
          v156 = v54;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<float,__emulated_bf16,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v158, (_QWORD **)&v155);
        if (v155)
        {
          v156 = v155;
          operator delete(v155);
        }
        v22 = v158;
        if (v158)
        {
          v159 = v158;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)v209))
      {
        if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        {
          v146 = 0;
          v147 = 0;
          v148 = 0;
          v57 = *a3;
          v58 = (_BYTE *)a3[1] - (_BYTE *)*a3;
          if (v58)
          {
            if (v58 < 0)
              goto LABEL_175;
            v59 = (char *)operator new(v58);
            v60 = &v59[8 * (v58 >> 3)];
            v146 = v59;
            v148 = v60;
            memcpy(v59, v57, v58);
            v147 = v60;
          }
          v143 = 0;
          v144 = 0;
          v145 = 0;
          v61 = *a4;
          v62 = (_BYTE *)a4[1] - (_BYTE *)*a4;
          if (v62)
          {
            if (v62 < 0)
              goto LABEL_175;
            v63 = (char *)operator new(v62);
            v64 = &v63[8 * (v62 >> 3)];
            v143 = v63;
            v145 = v64;
            memcpy(v63, v61, v62);
            v144 = v64;
          }
          mlir::mps::arithmeticBinaryTileBaseKernel<half,half,half,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v146, (_QWORD **)&v143, v55, v56);
          if (v143)
          {
            v144 = v143;
            operator delete(v143);
          }
          v22 = v146;
          if (v146)
          {
            v147 = v146;
            goto LABEL_173;
          }
          return;
        }
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v81 = *a3;
        v82 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v82)
        {
          if (v82 < 0)
            goto LABEL_175;
          v83 = (char *)operator new(v82);
          v84 = &v83[8 * (v82 >> 3)];
          v152 = v83;
          v154 = v84;
          memcpy(v83, v81, v82);
          v153 = v84;
        }
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v85 = *a4;
        v86 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v86)
        {
          if (v86 < 0)
            goto LABEL_175;
          v87 = (char *)operator new(v86);
          v88 = &v87[8 * (v86 >> 3)];
          v149 = v87;
          v151 = v88;
          memcpy(v87, v85, v86);
          v150 = v88;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v152, (_QWORD **)&v149);
        if (v149)
        {
          v150 = v149;
          operator delete(v149);
        }
        v22 = v152;
        if (v152)
        {
          v153 = v152;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)v209))
      {
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v65 = *a3;
        v66 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_175;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v140 = v67;
          v142 = v68;
          memcpy(v67, v65, v66);
          v141 = v68;
        }
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v69 = *a4;
        v70 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_175;
          v71 = (char *)operator new(v70);
          v72 = &v71[8 * (v70 >> 3)];
          v137 = v71;
          v139 = v72;
          memcpy(v71, v69, v70);
          v138 = v72;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<__emulated_bf16,__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)16>((unint64_t)a1, a2, (uint64_t)&v140, (_QWORD **)&v137);
        if (v137)
        {
          v138 = v137;
          operator delete(v137);
        }
        v22 = v140;
        if (v140)
        {
          v141 = v140;
          goto LABEL_173;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)v209, 64))
      {
        v134 = 0;
        v135 = 0;
        v136 = 0;
        v73 = *a3;
        v74 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_175;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v134 = v75;
          v136 = v76;
          memcpy(v75, v73, v74);
          v135 = v76;
        }
        v131 = 0;
        v132 = 0;
        v133 = 0;
        v77 = *a4;
        v78 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v78)
        {
          if (v78 < 0)
            goto LABEL_175;
          v79 = (char *)operator new(v78);
          v80 = &v79[8 * (v78 >> 3)];
          v131 = v79;
          v133 = v80;
          memcpy(v79, v77, v78);
          v132 = v80;
        }
        mlir::mps::arithmeticBinaryTileBaseKernel<long long,long long,long long,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v134, (_QWORD **)&v131);
        if (v131)
        {
          v132 = v131;
          operator delete(v131);
        }
        v22 = v134;
        if (v134)
        {
          v135 = v134;
          goto LABEL_173;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)v209, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)v209, 16))
        {
          std::vector<long long>::vector(v124, (uint64_t)a3);
          std::vector<long long>::vector(v123, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<short,short,short,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)v124, (_QWORD **)v123);
          if (v123[0])
          {
            v123[1] = v123[0];
            operator delete(v123[0]);
          }
          v22 = (void *)v124[0];
          if (v124[0])
          {
            v124[1] = v124[0];
            goto LABEL_173;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)v209, 8) && !mlir::Type::isInteger((mlir::Type *)v209, 1))
            mlir::mps::arithmeticBinaryTileKernelType<(mlir::mps::arithmeticOp)0>();
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticBinaryTileBaseKernel<signed char,signed char,signed char,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)v122, (_QWORD **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_173;
          }
        }
        return;
      }
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v89 = *a3;
      v90 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v90)
      {
        if (v90 < 0)
          goto LABEL_175;
        v91 = (char *)operator new(v90);
        v92 = &v91[8 * (v90 >> 3)];
        v128 = v91;
        v130 = v92;
        memcpy(v91, v89, v90);
        v129 = v92;
      }
      v125 = 0;
      v126 = 0;
      v127 = 0;
      v93 = *a4;
      v94 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_175;
        v95 = (char *)operator new(v94);
        v96 = &v95[8 * (v94 >> 3)];
        v125 = v95;
        v127 = v96;
        memcpy(v95, v93, v94);
        v126 = v96;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<int,int,int,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v128, (_QWORD **)&v125);
      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
      v22 = v128;
      if (v128)
      {
        v129 = v128;
        goto LABEL_173;
      }
      return;
    }
    if (v11 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v170 = 0;
      v171 = 0;
      v172 = 0;
      v31 = *a3;
      v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v32)
      {
        if (v32 < 0)
          goto LABEL_175;
        v33 = (char *)operator new(v32);
        v34 = &v33[8 * (v32 >> 3)];
        v170 = v33;
        v172 = v34;
        memcpy(v33, v31, v32);
        v171 = v34;
      }
      v167 = 0;
      v168 = 0;
      v169 = 0;
      v35 = *a4;
      v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v36)
      {
        if (v36 < 0)
          goto LABEL_175;
        v37 = (char *)operator new(v36);
        v38 = &v37[8 * (v36 >> 3)];
        v167 = v37;
        v169 = v38;
        memcpy(v37, v35, v36);
        v168 = v38;
      }
      mlir::mps::arithmeticBinaryTileBaseKernel<float,half,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v170, (_QWORD **)&v167);
      if (v167)
      {
        v168 = v167;
        operator delete(v167);
      }
      v22 = v170;
      if (v170)
      {
        v171 = v170;
        goto LABEL_173;
      }
      return;
    }
    v176 = 0;
    v177 = 0;
    v178 = 0;
    v113 = *a3;
    v114 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_175;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v176 = v115;
      v178 = v116;
      memcpy(v115, v113, v114);
      v177 = v116;
    }
    v173 = 0;
    v174 = 0;
    v175 = 0;
    v117 = *a4;
    v118 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v118)
    {
      if (v118 < 0)
        goto LABEL_175;
      v119 = (char *)operator new(v118);
      v120 = &v119[8 * (v118 >> 3)];
      v173 = v119;
      v175 = v120;
      memcpy(v119, v117, v118);
      v174 = v120;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v176, (_QWORD **)&v173);
    if (v173)
    {
      v174 = v173;
      operator delete(v173);
    }
    v22 = v176;
    if (v176)
    {
      v177 = v176;
      goto LABEL_173;
    }
    return;
  }
  if (v11 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v189 = 0;
    v188 = 0;
    v190 = 0;
    v105 = *a3;
    v106 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v106)
    {
      if (v106 < 0)
        goto LABEL_175;
      v107 = (char *)operator new(v106);
      v108 = &v107[8 * (v106 >> 3)];
      v188 = v107;
      v190 = v108;
      memcpy(v107, v105, v106);
      v189 = v108;
    }
    v186 = 0;
    v185 = 0;
    v187 = 0;
    v109 = *a4;
    v110 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_175;
      v111 = (char *)operator new(v110);
      v112 = &v111[8 * (v110 >> 3)];
      v185 = v111;
      v187 = v112;
      memcpy(v111, v109, v110);
      v186 = v112;
    }
    mlir::mps::arithmeticBinaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v188, (_QWORD **)&v185);
    if (v185)
    {
      v186 = v185;
      operator delete(v185);
    }
    v22 = v188;
    if (v188)
    {
      v189 = v188;
      goto LABEL_173;
    }
    return;
  }
  v183 = 0;
  v182 = 0;
  v184 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_175;
    v25 = (char *)operator new(v24);
    v26 = &v25[8 * (v24 >> 3)];
    v182 = v25;
    v184 = v26;
    memcpy(v25, v23, v24);
    v183 = v26;
  }
  v180 = 0;
  __p = 0;
  v181 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_175;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v181 = v30;
    memcpy(v29, v27, v28);
    v180 = v30;
  }
  mlir::mps::arithmeticBinaryTileBaseKernel<half,float,float,(mlir::mps::arithmeticOp)16>(a1, a2, (uint64_t)&v182, (_QWORD **)&__p);
  if (__p)
  {
    v180 = __p;
    operator delete(__p);
  }
  v22 = v182;
  if (v182)
  {
    v183 = v182;
    goto LABEL_173;
  }
}

uint64_t mlir::mps::CPUNDArrayArithmeticBinaryKernel::CPUNDArrayArithmeticBinaryKernel(uint64_t result, int a2)
{
  *(_QWORD *)result = mlir::mps::CPUNDArrayArithmeticBinaryKernel::arithmeticBinaryTileKernel;
  *(_QWORD *)(result + 8) = 4;
  *(_DWORD *)(result + 16) = a2;
  return result;
}

void mlir::mps::CPUNDArrayArithmeticUnaryKernel::arithmeticUnaryTileKernel(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  const void *v40;
  int64_t v41;
  char *v42;
  char *v43;
  const void *v44;
  int64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  const void *v49;
  int64_t v50;
  char *v51;
  char *v52;
  const void *v53;
  int64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  const void *v58;
  int64_t v59;
  char *v60;
  char *v61;
  const void *v62;
  int64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  const void *v76;
  int64_t v77;
  char *v78;
  char *v79;
  const void *v80;
  int64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  const void *v85;
  int64_t v86;
  char *v87;
  char *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  void *v93;
  void *v94;
  char *v95;
  void *v96;
  void *v97;
  char *v98;
  void *v99;
  void *v100;
  char *v101;
  void *v102;
  char *v103;
  char *v104;
  void *v105;
  void *v106;
  char *v107;
  void *v108;
  char *v109;
  char *v110;
  void *v111;
  void *v112;
  char *v113;
  void *v114;
  char *v115;
  char *v116;
  void *v117;
  void *v118;
  char *v119;
  void *v120;
  char *v121;
  char *v122;
  void *__p;
  void *v124;
  char *v125;
  void *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  void *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  void *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  void *v144;
  char *v145;
  char *v146;

  switch(*(_DWORD *)(a7 + 16))
  {
    case 6:
      v10 = *(double *)(a7 + 24);
      v145 = 0;
      v146 = 0;
      v144 = 0;
      v12 = *(const void **)a3;
      v11 = *(_QWORD *)(a3 + 8);
      v13 = v11 - *(_QWORD *)a3;
      if (v11 == *(_QWORD *)a3)
        goto LABEL_5;
      if (v13 < 0)
        goto LABEL_94;
      v14 = (char *)operator new(v11 - *(_QWORD *)a3);
      v15 = &v14[8 * (v13 >> 3)];
      v144 = v14;
      v146 = v15;
      memcpy(v14, v12, v13);
      v145 = v15;
LABEL_5:
      v141 = 0;
      v142 = 0;
      v143 = 0;
      v16 = *(const void **)a4;
      v17 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v17)
        goto LABEL_8;
      if (v17 < 0)
        goto LABEL_94;
      v18 = (char *)operator new(v17);
      v19 = &v18[8 * (v17 >> 3)];
      v141 = v18;
      v143 = v19;
      memcpy(v18, v16, v17);
      v142 = v19;
LABEL_8:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>(a1, a2, (const void **)&v144, (const void **)&v141, v10);
      if (v141)
      {
        v142 = v141;
        operator delete(v141);
      }
      v20 = v144;
      if (!v144)
        return;
      v145 = (char *)v144;
      break;
    case 7:
      v138 = 0;
      v139 = 0;
      v140 = 0;
      v22 = *(const void **)a3;
      v21 = *(_QWORD *)(a3 + 8);
      v23 = v21 - *(_QWORD *)a3;
      if (v21 == *(_QWORD *)a3)
        goto LABEL_15;
      if (v23 < 0)
        goto LABEL_94;
      v24 = (char *)operator new(v21 - *(_QWORD *)a3);
      v25 = &v24[8 * (v23 >> 3)];
      v138 = v24;
      v140 = v25;
      memcpy(v24, v22, v23);
      v139 = v25;
LABEL_15:
      v135 = 0;
      v136 = 0;
      v137 = 0;
      v26 = *(const void **)a4;
      v27 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v27)
        goto LABEL_18;
      if (v27 < 0)
        goto LABEL_94;
      v28 = (char *)operator new(v27);
      v29 = &v28[8 * (v27 >> 3)];
      v135 = v28;
      v137 = v29;
      memcpy(v28, v26, v27);
      v136 = v29;
LABEL_18:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)7>(a1, a2, (const void **)&v138, (const void **)&v135);
      if (v135)
      {
        v136 = v135;
        operator delete(v135);
      }
      v20 = v138;
      if (!v138)
        return;
      v139 = (char *)v138;
      break;
    case 8:
      v132 = 0;
      v133 = 0;
      v134 = 0;
      v31 = *(const void **)a3;
      v30 = *(_QWORD *)(a3 + 8);
      v32 = v30 - *(_QWORD *)a3;
      if (v30 == *(_QWORD *)a3)
        goto LABEL_25;
      if (v32 < 0)
        goto LABEL_94;
      v33 = (char *)operator new(v30 - *(_QWORD *)a3);
      v34 = &v33[8 * (v32 >> 3)];
      v132 = v33;
      v134 = v34;
      memcpy(v33, v31, v32);
      v133 = v34;
LABEL_25:
      v129 = 0;
      v130 = 0;
      v131 = 0;
      v35 = *(const void **)a4;
      v36 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v36)
        goto LABEL_28;
      if (v36 < 0)
        goto LABEL_94;
      v37 = (char *)operator new(v36);
      v38 = &v37[8 * (v36 >> 3)];
      v129 = v37;
      v131 = v38;
      memcpy(v37, v35, v36);
      v130 = v38;
LABEL_28:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)8>(a1, a2, (const void **)&v132, (const void **)&v129);
      if (v129)
      {
        v130 = v129;
        operator delete(v129);
      }
      v20 = v132;
      if (!v132)
        return;
      v133 = (char *)v132;
      break;
    case 9:
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v40 = *(const void **)a3;
      v39 = *(_QWORD *)(a3 + 8);
      v41 = v39 - *(_QWORD *)a3;
      if (v39 == *(_QWORD *)a3)
        goto LABEL_35;
      if (v41 < 0)
        goto LABEL_94;
      v42 = (char *)operator new(v39 - *(_QWORD *)a3);
      v43 = &v42[8 * (v41 >> 3)];
      v126 = v42;
      v128 = v43;
      memcpy(v42, v40, v41);
      v127 = v43;
LABEL_35:
      __p = 0;
      v124 = 0;
      v125 = 0;
      v44 = *(const void **)a4;
      v45 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v45)
        goto LABEL_38;
      if (v45 < 0)
        goto LABEL_94;
      v46 = (char *)operator new(v45);
      v47 = &v46[8 * (v45 >> 3)];
      __p = v46;
      v125 = v47;
      memcpy(v46, v44, v45);
      v124 = v47;
LABEL_38:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)9>(a1, a2, (const void **)&v126, (const void **)&__p, 0.0);
      if (__p)
      {
        v124 = __p;
        operator delete(__p);
      }
      v20 = v126;
      if (!v126)
        return;
      v127 = (char *)v126;
      break;
    case 0xA:
      v120 = 0;
      v121 = 0;
      v122 = 0;
      v49 = *(const void **)a3;
      v48 = *(_QWORD *)(a3 + 8);
      v50 = v48 - *(_QWORD *)a3;
      if (v48 == *(_QWORD *)a3)
        goto LABEL_45;
      if (v50 < 0)
        goto LABEL_94;
      v51 = (char *)operator new(v48 - *(_QWORD *)a3);
      v52 = &v51[8 * (v50 >> 3)];
      v120 = v51;
      v122 = v52;
      memcpy(v51, v49, v50);
      v121 = v52;
LABEL_45:
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v53 = *(const void **)a4;
      v54 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v54)
        goto LABEL_48;
      if (v54 < 0)
        goto LABEL_94;
      v55 = (char *)operator new(v54);
      v56 = &v55[8 * (v54 >> 3)];
      v117 = v55;
      v119 = v56;
      memcpy(v55, v53, v54);
      v118 = v56;
LABEL_48:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)10>(a1, a2, (const void **)&v120, (const void **)&v117, 0.0);
      if (v117)
      {
        v118 = v117;
        operator delete(v117);
      }
      v20 = v120;
      if (!v120)
        return;
      v121 = (char *)v120;
      break;
    case 0xB:
      v114 = 0;
      v115 = 0;
      v116 = 0;
      v58 = *(const void **)a3;
      v57 = *(_QWORD *)(a3 + 8);
      v59 = v57 - *(_QWORD *)a3;
      if (v57 == *(_QWORD *)a3)
        goto LABEL_55;
      if (v59 < 0)
        goto LABEL_94;
      v60 = (char *)operator new(v57 - *(_QWORD *)a3);
      v61 = &v60[8 * (v59 >> 3)];
      v114 = v60;
      v116 = v61;
      memcpy(v60, v58, v59);
      v115 = v61;
LABEL_55:
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v62 = *(const void **)a4;
      v63 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v63)
        goto LABEL_58;
      if (v63 < 0)
        goto LABEL_94;
      v64 = (char *)operator new(v63);
      v65 = &v64[8 * (v63 >> 3)];
      v111 = v64;
      v113 = v65;
      memcpy(v64, v62, v63);
      v112 = v65;
LABEL_58:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)11>(a1, a2, (const void **)&v114, (const void **)&v111);
      if (v111)
      {
        v112 = v111;
        operator delete(v111);
      }
      v20 = v114;
      if (!v114)
        return;
      v115 = (char *)v114;
      break;
    case 0xC:
      v108 = 0;
      v109 = 0;
      v110 = 0;
      v67 = *(const void **)a3;
      v66 = *(_QWORD *)(a3 + 8);
      v68 = v66 - *(_QWORD *)a3;
      if (v66 == *(_QWORD *)a3)
        goto LABEL_65;
      if (v68 < 0)
        goto LABEL_94;
      v69 = (char *)operator new(v66 - *(_QWORD *)a3);
      v70 = &v69[8 * (v68 >> 3)];
      v108 = v69;
      v110 = v70;
      memcpy(v69, v67, v68);
      v109 = v70;
LABEL_65:
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v71 = *(const void **)a4;
      v72 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v72)
        goto LABEL_68;
      if (v72 < 0)
        goto LABEL_94;
      v73 = (char *)operator new(v72);
      v74 = &v73[8 * (v72 >> 3)];
      v105 = v73;
      v107 = v74;
      memcpy(v73, v71, v72);
      v106 = v74;
LABEL_68:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)12>(a1, a2, (const void **)&v108, (const void **)&v105, 0.0);
      if (v105)
      {
        v106 = v105;
        operator delete(v105);
      }
      v20 = v108;
      if (!v108)
        return;
      v109 = (char *)v108;
      break;
    case 0xD:
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v76 = *(const void **)a3;
      v75 = *(_QWORD *)(a3 + 8);
      v77 = v75 - *(_QWORD *)a3;
      if (v75 == *(_QWORD *)a3)
        goto LABEL_75;
      if (v77 < 0)
        goto LABEL_94;
      v78 = (char *)operator new(v75 - *(_QWORD *)a3);
      v79 = &v78[8 * (v77 >> 3)];
      v102 = v78;
      v104 = v79;
      memcpy(v78, v76, v77);
      v103 = v79;
LABEL_75:
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v80 = *(const void **)a4;
      v81 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v81)
        goto LABEL_78;
      if (v81 < 0)
        goto LABEL_94;
      v82 = (char *)operator new(v81);
      v83 = &v82[8 * (v81 >> 3)];
      v99 = v82;
      v101 = v83;
      memcpy(v82, v80, v81);
      v100 = v83;
LABEL_78:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)13>(a1, a2, (const void **)&v102, (const void **)&v99, 0);
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      v20 = v102;
      if (!v102)
        return;
      v103 = (char *)v102;
      break;
    case 0xE:
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v85 = *(const void **)a3;
      v84 = *(_QWORD *)(a3 + 8);
      v86 = v84 - *(_QWORD *)a3;
      if (v84 == *(_QWORD *)a3)
        goto LABEL_85;
      if (v86 < 0)
        goto LABEL_94;
      v87 = (char *)operator new(v84 - *(_QWORD *)a3);
      v88 = &v87[8 * (v86 >> 3)];
      v96 = v87;
      v98 = v88;
      memcpy(v87, v85, v86);
      v97 = v88;
LABEL_85:
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v89 = *(const void **)a4;
      v90 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
      if (!v90)
        goto LABEL_88;
      if (v90 < 0)
LABEL_94:
        abort();
      v91 = (char *)operator new(v90);
      v92 = &v91[8 * (v90 >> 3)];
      v93 = v91;
      v95 = v92;
      memcpy(v91, v89, v90);
      v94 = v92;
LABEL_88:
      mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)14>(a1, a2, (const void **)&v96, (const void **)&v93, 0.0);
      if (v93)
      {
        v94 = v93;
        operator delete(v93);
      }
      v20 = v96;
      if (!v96)
        return;
      v97 = v96;
      break;
    default:
      return;
  }
  operator delete(v20);
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const void *v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  const void *v99;
  int64_t v100;
  char *v101;
  char *v102;
  const void *v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  uint64_t *v122[3];
  void *v123;
  void *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  void *v129;
  void *v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  void *v136;
  char *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  void *v160;
  char *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  void *__p;
  void *v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  void *v183;
  void *v184;
  char *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t Value;
  uint64_t v205;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v205 = ElementType;
  v203 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  v203 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v202 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v201 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v79 = *a3;
      v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v80)
      {
        if (v80 < 0)
          goto LABEL_169;
        v81 = (uint64_t *)operator new(v80);
        v82 = &v81[v80 >> 3];
        v198 = v81;
        v200 = v82;
        memcpy(v81, v79, v80);
        v199 = v82;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v83 = *a4;
      v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_169;
        v85 = (uint64_t *)operator new(v84);
        v86 = &v85[v84 >> 3];
        v195 = v85;
        v197 = v86;
        memcpy(v85, v83, v84);
        v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v198, &v195, a5);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v192, &v189, a5);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v31 = *a3;
        v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v32)
        {
          if (v32 < 0)
            goto LABEL_169;
          v33 = (uint64_t *)operator new(v32);
          v34 = &v33[v32 >> 3];
          v168 = v33;
          v170 = v34;
          memcpy(v33, v31, v32);
          v169 = v34;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v35 = *a4;
        v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_169;
          v37 = (char *)operator new(v36);
          v38 = &v37[8 * (v36 >> 3)];
          v165 = v37;
          v167 = v38;
          memcpy(v37, v35, v36);
          v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)6>(a1, a2, &v168, (uint64_t **)&v165, a5);
        if (v165)
        {
          v166 = v165;
          operator delete(v165);
        }
        v22 = v168;
        if (v168)
        {
          v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v103 = *a3;
      v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_169;
        v105 = (uint64_t *)operator new(v104);
        v106 = &v105[v104 >> 3];
        v174 = v105;
        v176 = v106;
        memcpy(v105, v103, v104);
        v175 = v106;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v107 = *a4;
      v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v108)
      {
        if (v108 < 0)
          goto LABEL_169;
        v109 = (char *)operator new(v108);
        v110 = &v109[8 * (v108 >> 3)];
        v171 = v109;
        v173 = v110;
        memcpy(v109, v107, v108);
        v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v174, (uint64_t **)&v171, a5);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v22 = v174;
      if (v174)
      {
        v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_169;
          v49 = (uint64_t *)operator new(v48);
          v50 = &v49[v48 >> 3];
          v150 = v49;
          v152 = v50;
          memcpy(v49, v47, v48);
          v151 = v50;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_169;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v147 = v53;
          v149 = v54;
          memcpy(v53, v51, v52);
          v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v150, (uint64_t **)&v147, a5);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v55 = *a3;
        v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v56)
        {
          if (v56 < 0)
            goto LABEL_169;
          v57 = (uint64_t *)operator new(v56);
          v58 = &v57[v56 >> 3];
          v144 = v57;
          v146 = v58;
          memcpy(v57, v55, v56);
          v145 = v58;
        }
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v59 = *a4;
        v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v60)
        {
          if (v60 < 0)
            goto LABEL_169;
          v61 = (char *)operator new(v60);
          v62 = &v61[8 * (v60 >> 3)];
          v141 = v61;
          v143 = v62;
          memcpy(v61, v59, v60);
          v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)6>(a1, a2, &v144, (uint64_t **)&v141, a5);
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        v22 = v144;
        if (v144)
        {
          v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_169;
          v65 = (uint64_t *)operator new(v64);
          v66 = &v65[v64 >> 3];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_169;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)6>(a1, a2, &v138, (uint64_t **)&v135, a5);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_169;
          v73 = (uint64_t *)operator new(v72);
          v74 = &v73[v72 >> 3];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_169;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)6>(a1, a2, &v132, (uint64_t **)&v129, a5);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)6>(a1, a2, v122, (uint64_t **)v121, a5);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)6>((uint64_t)a1, a2, (uint64_t **)v120, (uint64_t **)v119, a5);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_169;
        v97 = (uint64_t *)operator new(v96);
        v98 = &v97[v96 >> 3];
        v126 = v97;
        v128 = v98;
        memcpy(v97, v95, v96);
        v127 = v98;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_169;
        v101 = (char *)operator new(v100);
        v102 = &v101[8 * (v100 >> 3)];
        v123 = v101;
        v125 = v102;
        memcpy(v101, v99, v100);
        v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)6>(a1, a2, &v126, (uint64_t **)&v123, a5);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v39 = *a3;
      v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_169;
        v41 = (uint64_t *)operator new(v40);
        v42 = &v41[v40 >> 3];
        v156 = v41;
        v158 = v42;
        memcpy(v41, v39, v40);
        v157 = v42;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v43 = *a4;
      v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_169;
        v45 = (char *)operator new(v44);
        v46 = &v45[8 * (v44 >> 3)];
        v153 = v45;
        v155 = v46;
        memcpy(v45, v43, v44);
        v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)6>(a1, a2, &v156, (uint64_t **)&v153, a5);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v22 = v156;
      if (v156)
      {
        v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_169;
      v113 = (uint64_t *)operator new(v112);
      v114 = &v113[v112 >> 3];
      v162 = v113;
      v164 = v114;
      memcpy(v113, v111, v112);
      v163 = v114;
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_169;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v159 = v117;
      v161 = v118;
      memcpy(v117, v115, v116);
      v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v162, (uint64_t **)&v159, a5);
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    v22 = v162;
    if (v162)
    {
      v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v87 = *a3;
    v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v88)
    {
      if (v88 < 0)
        goto LABEL_169;
      v89 = (uint64_t *)operator new(v88);
      v90 = &v89[v88 >> 3];
      v186 = v89;
      v188 = v90;
      memcpy(v89, v87, v88);
      v187 = v90;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v91 = *a4;
    v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v92)
    {
      if (v92 < 0)
        goto LABEL_169;
      v93 = (char *)operator new(v92);
      v94 = &v93[8 * (v92 >> 3)];
      v183 = v93;
      v185 = v94;
      memcpy(v93, v91, v92);
      v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)6>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)6>(a1, a2, &v180, (uint64_t **)&__p, a5);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)7>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  const void *v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  const void *v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  const void *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  const void *v41;
  int64_t v42;
  char *v43;
  char *v44;
  const void *v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  const void *v49;
  int64_t v50;
  char *v51;
  char *v52;
  const void *v53;
  int64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  const void *v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const void *v85;
  int64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  void *v117[3];
  void *v118[3];
  void *v119[3];
  uint64_t *v120[3];
  void *v121;
  void *v122;
  char *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  void *v127;
  void *v128;
  char *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  void *v134;
  char *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  void *v139;
  void *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  void *v145;
  void *v146;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  void *v151;
  void *v152;
  char *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  void *v157;
  void *v158;
  char *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  void *v163;
  void *v164;
  char *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  void *v169;
  void *v170;
  char *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  void *__p;
  void *v176;
  char *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  void *v181;
  void *v182;
  char *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t Value;
  uint64_t v203;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v203 = ElementType;
  v201 = *(_QWORD *)**a2;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v201);
  v201 = v9;
  Value = v9;
  v10 = *(void **)(*(_QWORD *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v200 = v9;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v11 = ElementType;
    else
      v11 = 0;
    v199 = v11;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v200);
    v203 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v199);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
  {
    if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v77 = *a3;
      v78 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v78)
      {
        if (v78 < 0)
          goto LABEL_169;
        v79 = (uint64_t *)operator new(v78);
        v80 = &v79[v78 >> 3];
        v196 = v79;
        v198 = v80;
        memcpy(v79, v77, v78);
        v197 = v80;
      }
      v193 = 0;
      v194 = 0;
      v195 = 0;
      v81 = *a4;
      v82 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v82)
      {
        if (v82 < 0)
          goto LABEL_169;
        v83 = (uint64_t *)operator new(v82);
        v84 = &v83[v82 >> 3];
        v193 = v83;
        v195 = v84;
        memcpy(v83, v81, v82);
        v194 = v84;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v196, &v193);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      v20 = v196;
      if (v196)
      {
        v197 = v196;
        goto LABEL_167;
      }
      return;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v12 = *a3;
    v13 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v13)
    {
      if (v13 < 0)
        goto LABEL_169;
      v14 = (uint64_t *)operator new(v13);
      v15 = &v14[v13 >> 3];
      v190 = v14;
      v192 = v15;
      memcpy(v14, v12, v13);
      v191 = v15;
    }
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v16 = *a4;
    v17 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v17)
      goto LABEL_15;
    if ((v17 & 0x8000000000000000) == 0)
    {
      v18 = (uint64_t *)operator new(v17);
      v19 = &v18[v17 >> 3];
      v187 = v18;
      v189 = v19;
      memcpy(v18, v16, v17);
      v188 = v19;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v190, &v187);
      if (v187)
      {
        v188 = v187;
        operator delete(v187);
      }
      v20 = v190;
      if (v190)
      {
        v191 = v190;
LABEL_167:
        operator delete(v20);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v203))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v203))
    {
      if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v29 = *a3;
        v30 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v30)
        {
          if (v30 < 0)
            goto LABEL_169;
          v31 = (uint64_t *)operator new(v30);
          v32 = &v31[v30 >> 3];
          v166 = v31;
          v168 = v32;
          memcpy(v31, v29, v30);
          v167 = v32;
        }
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v33 = *a4;
        v34 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v34)
        {
          if (v34 < 0)
            goto LABEL_169;
          v35 = (char *)operator new(v34);
          v36 = &v35[8 * (v34 >> 3)];
          v163 = v35;
          v165 = v36;
          memcpy(v35, v33, v34);
          v164 = v36;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)7>(a1, a2, &v166, (uint64_t **)&v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        v20 = v166;
        if (v166)
        {
          v167 = v166;
          goto LABEL_167;
        }
        return;
      }
      v173 = 0;
      v172 = 0;
      v174 = 0;
      v101 = *a3;
      v102 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_169;
        v103 = (uint64_t *)operator new(v102);
        v104 = &v103[v102 >> 3];
        v172 = v103;
        v174 = v104;
        memcpy(v103, v101, v102);
        v173 = v104;
      }
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v105 = *a4;
      v106 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_169;
        v107 = (char *)operator new(v106);
        v108 = &v107[8 * (v106 >> 3)];
        v169 = v107;
        v171 = v108;
        memcpy(v107, v105, v106);
        v170 = v108;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v172, (uint64_t **)&v169);
      if (v169)
      {
        v170 = v169;
        operator delete(v169);
      }
      v20 = v172;
      if (v172)
      {
        v173 = v172;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v203))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v45 = *a3;
        v46 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v46)
        {
          if (v46 < 0)
            goto LABEL_169;
          v47 = (uint64_t *)operator new(v46);
          v48 = &v47[v46 >> 3];
          v148 = v47;
          v150 = v48;
          memcpy(v47, v45, v46);
          v149 = v48;
        }
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v49 = *a4;
        v50 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v50)
        {
          if (v50 < 0)
            goto LABEL_169;
          v51 = (char *)operator new(v50);
          v52 = &v51[8 * (v50 >> 3)];
          v145 = v51;
          v147 = v52;
          memcpy(v51, v49, v50);
          v146 = v52;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v148, (uint64_t **)&v145);
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        v20 = v148;
        if (v148)
        {
          v149 = v148;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v53 = *a3;
        v54 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v54)
        {
          if (v54 < 0)
            goto LABEL_169;
          v55 = (uint64_t *)operator new(v54);
          v56 = &v55[v54 >> 3];
          v142 = v55;
          v144 = v56;
          memcpy(v55, v53, v54);
          v143 = v56;
        }
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v57 = *a4;
        v58 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v58)
        {
          if (v58 < 0)
            goto LABEL_169;
          v59 = (char *)operator new(v58);
          v60 = &v59[8 * (v58 >> 3)];
          v139 = v59;
          v141 = v60;
          memcpy(v59, v57, v58);
          v140 = v60;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)7>(a1, a2, &v142, (uint64_t **)&v139);
        if (v139)
        {
          v140 = v139;
          operator delete(v139);
        }
        v20 = v142;
        if (v142)
        {
          v143 = v142;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v61 = *a3;
        v62 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v62)
        {
          if (v62 < 0)
            goto LABEL_169;
          v63 = (uint64_t *)operator new(v62);
          v64 = &v63[v62 >> 3];
          v136 = v63;
          v138 = v64;
          memcpy(v63, v61, v62);
          v137 = v64;
        }
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v65 = *a4;
        v66 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_169;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v133 = v67;
          v135 = v68;
          memcpy(v67, v65, v66);
          v134 = v68;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)7>(a1, a2, &v136, (uint64_t **)&v133);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v20 = v136;
        if (v136)
        {
          v137 = v136;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v69 = *a3;
        v70 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_169;
          v71 = (uint64_t *)operator new(v70);
          v72 = &v71[v70 >> 3];
          v130 = v71;
          v132 = v72;
          memcpy(v71, v69, v70);
          v131 = v72;
        }
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v73 = *a4;
        v74 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_169;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v127 = v75;
          v129 = v76;
          memcpy(v75, v73, v74);
          v128 = v76;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v130, (uint64_t **)&v127);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v20 = v130;
        if (v130)
        {
          v131 = v130;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v20 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v118, (uint64_t)a3);
          std::vector<long long>::vector(v117, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v118, (uint64_t **)v117);
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
          v20 = (uint64_t *)v118[0];
          if (v118[0])
          {
            v118[1] = v118[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v93 = *a3;
      v94 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_169;
        v95 = (uint64_t *)operator new(v94);
        v96 = &v95[v94 >> 3];
        v124 = v95;
        v126 = v96;
        memcpy(v95, v93, v94);
        v125 = v96;
      }
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v97 = *a4;
      v98 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_169;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v121 = v99;
        v123 = v100;
        memcpy(v99, v97, v98);
        v122 = v100;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v124, (uint64_t **)&v121);
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      v20 = v124;
      if (v124)
      {
        v125 = v124;
        goto LABEL_167;
      }
      return;
    }
    if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v37 = *a3;
      v38 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v38)
      {
        if (v38 < 0)
          goto LABEL_169;
        v39 = (uint64_t *)operator new(v38);
        v40 = &v39[v38 >> 3];
        v154 = v39;
        v156 = v40;
        memcpy(v39, v37, v38);
        v155 = v40;
      }
      v151 = 0;
      v152 = 0;
      v153 = 0;
      v41 = *a4;
      v42 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v42)
      {
        if (v42 < 0)
          goto LABEL_169;
        v43 = (char *)operator new(v42);
        v44 = &v43[8 * (v42 >> 3)];
        v151 = v43;
        v153 = v44;
        memcpy(v43, v41, v42);
        v152 = v44;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)7>(a1, a2, &v154, (uint64_t **)&v151);
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      v20 = v154;
      if (v154)
      {
        v155 = v154;
        goto LABEL_167;
      }
      return;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v109 = *a3;
    v110 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_169;
      v111 = (uint64_t *)operator new(v110);
      v112 = &v111[v110 >> 3];
      v160 = v111;
      v162 = v112;
      memcpy(v111, v109, v110);
      v161 = v112;
    }
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v113 = *a4;
    v114 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_169;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v157 = v115;
      v159 = v116;
      memcpy(v115, v113, v114);
      v158 = v116;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v160, (uint64_t **)&v157);
    if (v157)
    {
      v158 = v157;
      operator delete(v157);
    }
    v20 = v160;
    if (v160)
    {
      v161 = v160;
      goto LABEL_167;
    }
    return;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v85 = *a3;
    v86 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v86)
    {
      if (v86 < 0)
        goto LABEL_169;
      v87 = (uint64_t *)operator new(v86);
      v88 = &v87[v86 >> 3];
      v184 = v87;
      v186 = v88;
      memcpy(v87, v85, v86);
      v185 = v88;
    }
    v182 = 0;
    v181 = 0;
    v183 = 0;
    v89 = *a4;
    v90 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v90)
    {
      if (v90 < 0)
        goto LABEL_169;
      v91 = (char *)operator new(v90);
      v92 = &v91[8 * (v90 >> 3)];
      v181 = v91;
      v183 = v92;
      memcpy(v91, v89, v90);
      v182 = v92;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)7>(a1, a2, &v184, (uint64_t **)&v181);
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
    v20 = v184;
    if (v184)
    {
      v185 = v184;
      goto LABEL_167;
    }
    return;
  }
  v179 = 0;
  v178 = 0;
  v180 = 0;
  v21 = *a3;
  v22 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v22)
  {
    if (v22 < 0)
      goto LABEL_169;
    v23 = (uint64_t *)operator new(v22);
    v24 = &v23[v22 >> 3];
    v178 = v23;
    v180 = v24;
    memcpy(v23, v21, v22);
    v179 = v24;
  }
  v176 = 0;
  __p = 0;
  v177 = 0;
  v25 = *a4;
  v26 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v26)
  {
    if (v26 < 0)
      goto LABEL_169;
    v27 = (char *)operator new(v26);
    v28 = &v27[8 * (v26 >> 3)];
    __p = v27;
    v177 = v28;
    memcpy(v27, v25, v26);
    v176 = v28;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)7>(a1, a2, &v178, (uint64_t **)&__p);
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  v20 = v178;
  if (v178)
  {
    v179 = v178;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)8>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  const void *v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  const void *v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  const void *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  const void *v41;
  int64_t v42;
  char *v43;
  char *v44;
  const void *v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  const void *v49;
  int64_t v50;
  char *v51;
  char *v52;
  const void *v53;
  int64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  const void *v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const void *v85;
  int64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  void *v117[3];
  void *v118[3];
  void *v119[3];
  uint64_t *v120[3];
  void *v121;
  void *v122;
  char *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  void *v127;
  void *v128;
  char *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  void *v134;
  char *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  void *v139;
  void *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  void *v145;
  void *v146;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  void *v151;
  void *v152;
  char *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  void *v157;
  void *v158;
  char *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  void *v163;
  void *v164;
  char *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  void *v169;
  void *v170;
  char *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  void *__p;
  void *v176;
  char *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  void *v181;
  void *v182;
  char *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t Value;
  uint64_t v203;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v203 = ElementType;
  v201 = *(_QWORD *)**a2;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v201);
  v201 = v9;
  Value = v9;
  v10 = *(void **)(*(_QWORD *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v200 = v9;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v11 = ElementType;
    else
      v11 = 0;
    v199 = v11;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v200);
    v203 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v199);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
  {
    if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v77 = *a3;
      v78 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v78)
      {
        if (v78 < 0)
          goto LABEL_169;
        v79 = (uint64_t *)operator new(v78);
        v80 = &v79[v78 >> 3];
        v196 = v79;
        v198 = v80;
        memcpy(v79, v77, v78);
        v197 = v80;
      }
      v193 = 0;
      v194 = 0;
      v195 = 0;
      v81 = *a4;
      v82 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v82)
      {
        if (v82 < 0)
          goto LABEL_169;
        v83 = (uint64_t *)operator new(v82);
        v84 = &v83[v82 >> 3];
        v193 = v83;
        v195 = v84;
        memcpy(v83, v81, v82);
        v194 = v84;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v196, &v193);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      v20 = v196;
      if (v196)
      {
        v197 = v196;
        goto LABEL_167;
      }
      return;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v12 = *a3;
    v13 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v13)
    {
      if (v13 < 0)
        goto LABEL_169;
      v14 = (uint64_t *)operator new(v13);
      v15 = &v14[v13 >> 3];
      v190 = v14;
      v192 = v15;
      memcpy(v14, v12, v13);
      v191 = v15;
    }
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v16 = *a4;
    v17 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v17)
      goto LABEL_15;
    if ((v17 & 0x8000000000000000) == 0)
    {
      v18 = (uint64_t *)operator new(v17);
      v19 = &v18[v17 >> 3];
      v187 = v18;
      v189 = v19;
      memcpy(v18, v16, v17);
      v188 = v19;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v190, &v187);
      if (v187)
      {
        v188 = v187;
        operator delete(v187);
      }
      v20 = v190;
      if (v190)
      {
        v191 = v190;
LABEL_167:
        operator delete(v20);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v203))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v203))
    {
      if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v29 = *a3;
        v30 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v30)
        {
          if (v30 < 0)
            goto LABEL_169;
          v31 = (uint64_t *)operator new(v30);
          v32 = &v31[v30 >> 3];
          v166 = v31;
          v168 = v32;
          memcpy(v31, v29, v30);
          v167 = v32;
        }
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v33 = *a4;
        v34 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v34)
        {
          if (v34 < 0)
            goto LABEL_169;
          v35 = (char *)operator new(v34);
          v36 = &v35[8 * (v34 >> 3)];
          v163 = v35;
          v165 = v36;
          memcpy(v35, v33, v34);
          v164 = v36;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)8>(a1, a2, &v166, (uint64_t **)&v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        v20 = v166;
        if (v166)
        {
          v167 = v166;
          goto LABEL_167;
        }
        return;
      }
      v173 = 0;
      v172 = 0;
      v174 = 0;
      v101 = *a3;
      v102 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_169;
        v103 = (uint64_t *)operator new(v102);
        v104 = &v103[v102 >> 3];
        v172 = v103;
        v174 = v104;
        memcpy(v103, v101, v102);
        v173 = v104;
      }
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v105 = *a4;
      v106 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_169;
        v107 = (char *)operator new(v106);
        v108 = &v107[8 * (v106 >> 3)];
        v169 = v107;
        v171 = v108;
        memcpy(v107, v105, v106);
        v170 = v108;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v172, (uint64_t **)&v169);
      if (v169)
      {
        v170 = v169;
        operator delete(v169);
      }
      v20 = v172;
      if (v172)
      {
        v173 = v172;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v203))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v45 = *a3;
        v46 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v46)
        {
          if (v46 < 0)
            goto LABEL_169;
          v47 = (uint64_t *)operator new(v46);
          v48 = &v47[v46 >> 3];
          v148 = v47;
          v150 = v48;
          memcpy(v47, v45, v46);
          v149 = v48;
        }
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v49 = *a4;
        v50 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v50)
        {
          if (v50 < 0)
            goto LABEL_169;
          v51 = (char *)operator new(v50);
          v52 = &v51[8 * (v50 >> 3)];
          v145 = v51;
          v147 = v52;
          memcpy(v51, v49, v50);
          v146 = v52;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v148, (uint64_t **)&v145);
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        v20 = v148;
        if (v148)
        {
          v149 = v148;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v53 = *a3;
        v54 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v54)
        {
          if (v54 < 0)
            goto LABEL_169;
          v55 = (uint64_t *)operator new(v54);
          v56 = &v55[v54 >> 3];
          v142 = v55;
          v144 = v56;
          memcpy(v55, v53, v54);
          v143 = v56;
        }
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v57 = *a4;
        v58 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v58)
        {
          if (v58 < 0)
            goto LABEL_169;
          v59 = (char *)operator new(v58);
          v60 = &v59[8 * (v58 >> 3)];
          v139 = v59;
          v141 = v60;
          memcpy(v59, v57, v58);
          v140 = v60;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)8>(a1, a2, &v142, (uint64_t **)&v139);
        if (v139)
        {
          v140 = v139;
          operator delete(v139);
        }
        v20 = v142;
        if (v142)
        {
          v143 = v142;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v61 = *a3;
        v62 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v62)
        {
          if (v62 < 0)
            goto LABEL_169;
          v63 = (uint64_t *)operator new(v62);
          v64 = &v63[v62 >> 3];
          v136 = v63;
          v138 = v64;
          memcpy(v63, v61, v62);
          v137 = v64;
        }
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v65 = *a4;
        v66 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_169;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v133 = v67;
          v135 = v68;
          memcpy(v67, v65, v66);
          v134 = v68;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)8>(a1, a2, &v136, (uint64_t **)&v133);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v20 = v136;
        if (v136)
        {
          v137 = v136;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v69 = *a3;
        v70 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_169;
          v71 = (uint64_t *)operator new(v70);
          v72 = &v71[v70 >> 3];
          v130 = v71;
          v132 = v72;
          memcpy(v71, v69, v70);
          v131 = v72;
        }
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v73 = *a4;
        v74 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_169;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v127 = v75;
          v129 = v76;
          memcpy(v75, v73, v74);
          v128 = v76;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v130, (uint64_t **)&v127);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v20 = v130;
        if (v130)
        {
          v131 = v130;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v20 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v118, (uint64_t)a3);
          std::vector<long long>::vector(v117, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v118, (uint64_t **)v117);
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
          v20 = (uint64_t *)v118[0];
          if (v118[0])
          {
            v118[1] = v118[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v93 = *a3;
      v94 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_169;
        v95 = (uint64_t *)operator new(v94);
        v96 = &v95[v94 >> 3];
        v124 = v95;
        v126 = v96;
        memcpy(v95, v93, v94);
        v125 = v96;
      }
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v97 = *a4;
      v98 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_169;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v121 = v99;
        v123 = v100;
        memcpy(v99, v97, v98);
        v122 = v100;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v124, (uint64_t **)&v121);
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      v20 = v124;
      if (v124)
      {
        v125 = v124;
        goto LABEL_167;
      }
      return;
    }
    if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v37 = *a3;
      v38 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v38)
      {
        if (v38 < 0)
          goto LABEL_169;
        v39 = (uint64_t *)operator new(v38);
        v40 = &v39[v38 >> 3];
        v154 = v39;
        v156 = v40;
        memcpy(v39, v37, v38);
        v155 = v40;
      }
      v151 = 0;
      v152 = 0;
      v153 = 0;
      v41 = *a4;
      v42 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v42)
      {
        if (v42 < 0)
          goto LABEL_169;
        v43 = (char *)operator new(v42);
        v44 = &v43[8 * (v42 >> 3)];
        v151 = v43;
        v153 = v44;
        memcpy(v43, v41, v42);
        v152 = v44;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)8>(a1, a2, &v154, (uint64_t **)&v151);
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      v20 = v154;
      if (v154)
      {
        v155 = v154;
        goto LABEL_167;
      }
      return;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v109 = *a3;
    v110 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_169;
      v111 = (uint64_t *)operator new(v110);
      v112 = &v111[v110 >> 3];
      v160 = v111;
      v162 = v112;
      memcpy(v111, v109, v110);
      v161 = v112;
    }
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v113 = *a4;
    v114 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_169;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v157 = v115;
      v159 = v116;
      memcpy(v115, v113, v114);
      v158 = v116;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v160, (uint64_t **)&v157);
    if (v157)
    {
      v158 = v157;
      operator delete(v157);
    }
    v20 = v160;
    if (v160)
    {
      v161 = v160;
      goto LABEL_167;
    }
    return;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v85 = *a3;
    v86 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v86)
    {
      if (v86 < 0)
        goto LABEL_169;
      v87 = (uint64_t *)operator new(v86);
      v88 = &v87[v86 >> 3];
      v184 = v87;
      v186 = v88;
      memcpy(v87, v85, v86);
      v185 = v88;
    }
    v182 = 0;
    v181 = 0;
    v183 = 0;
    v89 = *a4;
    v90 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v90)
    {
      if (v90 < 0)
        goto LABEL_169;
      v91 = (char *)operator new(v90);
      v92 = &v91[8 * (v90 >> 3)];
      v181 = v91;
      v183 = v92;
      memcpy(v91, v89, v90);
      v182 = v92;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)8>(a1, a2, &v184, (uint64_t **)&v181);
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
    v20 = v184;
    if (v184)
    {
      v185 = v184;
      goto LABEL_167;
    }
    return;
  }
  v179 = 0;
  v178 = 0;
  v180 = 0;
  v21 = *a3;
  v22 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v22)
  {
    if (v22 < 0)
      goto LABEL_169;
    v23 = (uint64_t *)operator new(v22);
    v24 = &v23[v22 >> 3];
    v178 = v23;
    v180 = v24;
    memcpy(v23, v21, v22);
    v179 = v24;
  }
  v176 = 0;
  __p = 0;
  v177 = 0;
  v25 = *a4;
  v26 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v26)
  {
    if (v26 < 0)
      goto LABEL_169;
    v27 = (char *)operator new(v26);
    v28 = &v27[8 * (v26 >> 3)];
    __p = v27;
    v177 = v28;
    memcpy(v27, v25, v26);
    v176 = v28;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)8>(a1, a2, &v178, (uint64_t **)&__p);
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  v20 = v178;
  if (v178)
  {
    v179 = v178;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)9>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const void *v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  const void *v99;
  int64_t v100;
  char *v101;
  char *v102;
  const void *v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  uint64_t *v122[3];
  void *v123;
  void *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  void *v129;
  void *v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  void *v136;
  char *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  void *v160;
  char *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  void *__p;
  void *v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  void *v183;
  void *v184;
  char *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t Value;
  uint64_t v205;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v205 = ElementType;
  v203 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  v203 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v202 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v201 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v79 = *a3;
      v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v80)
      {
        if (v80 < 0)
          goto LABEL_169;
        v81 = (uint64_t *)operator new(v80);
        v82 = &v81[v80 >> 3];
        v198 = v81;
        v200 = v82;
        memcpy(v81, v79, v80);
        v199 = v82;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v83 = *a4;
      v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_169;
        v85 = (uint64_t *)operator new(v84);
        v86 = &v85[v84 >> 3];
        v195 = v85;
        v197 = v86;
        memcpy(v85, v83, v84);
        v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v198, &v195);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v192, &v189);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v31 = *a3;
        v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v32)
        {
          if (v32 < 0)
            goto LABEL_169;
          v33 = (uint64_t *)operator new(v32);
          v34 = &v33[v32 >> 3];
          v168 = v33;
          v170 = v34;
          memcpy(v33, v31, v32);
          v169 = v34;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v35 = *a4;
        v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_169;
          v37 = (char *)operator new(v36);
          v38 = &v37[8 * (v36 >> 3)];
          v165 = v37;
          v167 = v38;
          memcpy(v37, v35, v36);
          v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)9>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          v166 = v165;
          operator delete(v165);
        }
        v22 = v168;
        if (v168)
        {
          v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v103 = *a3;
      v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_169;
        v105 = (uint64_t *)operator new(v104);
        v106 = &v105[v104 >> 3];
        v174 = v105;
        v176 = v106;
        memcpy(v105, v103, v104);
        v175 = v106;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v107 = *a4;
      v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v108)
      {
        if (v108 < 0)
          goto LABEL_169;
        v109 = (char *)operator new(v108);
        v110 = &v109[8 * (v108 >> 3)];
        v171 = v109;
        v173 = v110;
        memcpy(v109, v107, v108);
        v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v22 = v174;
      if (v174)
      {
        v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_169;
          v49 = (uint64_t *)operator new(v48);
          v50 = &v49[v48 >> 3];
          v150 = v49;
          v152 = v50;
          memcpy(v49, v47, v48);
          v151 = v50;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_169;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v147 = v53;
          v149 = v54;
          memcpy(v53, v51, v52);
          v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v55 = *a3;
        v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v56)
        {
          if (v56 < 0)
            goto LABEL_169;
          v57 = (uint64_t *)operator new(v56);
          v58 = &v57[v56 >> 3];
          v144 = v57;
          v146 = v58;
          memcpy(v57, v55, v56);
          v145 = v58;
        }
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v59 = *a4;
        v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v60)
        {
          if (v60 < 0)
            goto LABEL_169;
          v61 = (char *)operator new(v60);
          v62 = &v61[8 * (v60 >> 3)];
          v141 = v61;
          v143 = v62;
          memcpy(v61, v59, v60);
          v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)9>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        v22 = v144;
        if (v144)
        {
          v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_169;
          v65 = (uint64_t *)operator new(v64);
          v66 = &v65[v64 >> 3];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_169;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)9>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_169;
          v73 = (uint64_t *)operator new(v72);
          v74 = &v73[v72 >> 3];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_169;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)9>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)9>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)9>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_169;
        v97 = (uint64_t *)operator new(v96);
        v98 = &v97[v96 >> 3];
        v126 = v97;
        v128 = v98;
        memcpy(v97, v95, v96);
        v127 = v98;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_169;
        v101 = (char *)operator new(v100);
        v102 = &v101[8 * (v100 >> 3)];
        v123 = v101;
        v125 = v102;
        memcpy(v101, v99, v100);
        v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)9>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v39 = *a3;
      v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_169;
        v41 = (uint64_t *)operator new(v40);
        v42 = &v41[v40 >> 3];
        v156 = v41;
        v158 = v42;
        memcpy(v41, v39, v40);
        v157 = v42;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v43 = *a4;
      v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_169;
        v45 = (char *)operator new(v44);
        v46 = &v45[8 * (v44 >> 3)];
        v153 = v45;
        v155 = v46;
        memcpy(v45, v43, v44);
        v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)9>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v22 = v156;
      if (v156)
      {
        v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_169;
      v113 = (uint64_t *)operator new(v112);
      v114 = &v113[v112 >> 3];
      v162 = v113;
      v164 = v114;
      memcpy(v113, v111, v112);
      v163 = v114;
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_169;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v159 = v117;
      v161 = v118;
      memcpy(v117, v115, v116);
      v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    v22 = v162;
    if (v162)
    {
      v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v87 = *a3;
    v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v88)
    {
      if (v88 < 0)
        goto LABEL_169;
      v89 = (uint64_t *)operator new(v88);
      v90 = &v89[v88 >> 3];
      v186 = v89;
      v188 = v90;
      memcpy(v89, v87, v88);
      v187 = v90;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v91 = *a4;
    v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v92)
    {
      if (v92 < 0)
        goto LABEL_169;
      v93 = (char *)operator new(v92);
      v94 = &v93[8 * (v92 >> 3)];
      v183 = v93;
      v185 = v94;
      memcpy(v93, v91, v92);
      v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)9>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)9>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)10>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  float v31;
  const void *v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  const void *v36;
  int64_t v37;
  char *v38;
  char *v39;
  float v40;
  const void *v41;
  int64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  const void *v45;
  int64_t v46;
  char *v47;
  char *v48;
  const void *v49;
  int64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  const void *v53;
  int64_t v54;
  char *v55;
  char *v56;
  const void *v57;
  int64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  const void *v61;
  int64_t v62;
  char *v63;
  char *v64;
  const void *v65;
  int64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  const void *v69;
  int64_t v70;
  char *v71;
  char *v72;
  const void *v73;
  int64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  const void *v77;
  int64_t v78;
  char *v79;
  char *v80;
  const void *v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const void *v85;
  int64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  const void *v89;
  int64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  const void *v93;
  int64_t v94;
  char *v95;
  char *v96;
  const void *v97;
  int64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  const void *v101;
  int64_t v102;
  char *v103;
  char *v104;
  const void *v105;
  int64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  const void *v109;
  int64_t v110;
  char *v111;
  char *v112;
  const void *v113;
  int64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  const void *v117;
  int64_t v118;
  char *v119;
  char *v120;
  void *v121[3];
  void *v122[3];
  void *v123[3];
  uint64_t *v124[3];
  void *v125;
  void *v126;
  char *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  void *v131;
  void *v132;
  char *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  void *v137;
  void *v138;
  char *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  void *v143;
  void *v144;
  char *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  void *v149;
  void *v150;
  char *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  void *v155;
  void *v156;
  char *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  void *v161;
  void *v162;
  char *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  void *v167;
  void *v168;
  char *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  void *v173;
  void *v174;
  char *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  void *__p;
  void *v180;
  char *v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t *v184;
  void *v185;
  void *v186;
  char *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t Value;
  uint64_t v207;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v207 = ElementType;
  v205 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v205);
  v205 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v204 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v203 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v204);
    v207 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v207))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v200 = 0;
      v201 = 0;
      v202 = 0;
      v81 = *a3;
      v82 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v82)
      {
        if (v82 < 0)
          goto LABEL_169;
        v83 = (uint64_t *)operator new(v82);
        v84 = &v83[v82 >> 3];
        v200 = v83;
        v202 = v84;
        memcpy(v83, v81, v82);
        v201 = v84;
      }
      v197 = 0;
      v198 = 0;
      v199 = 0;
      v85 = *a4;
      v86 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v86)
      {
        if (v86 < 0)
          goto LABEL_169;
        v87 = (uint64_t *)operator new(v86);
        v88 = &v87[v86 >> 3];
        v197 = v87;
        v199 = v88;
        memcpy(v87, v85, v86);
        v198 = v88;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v200, &v197);
      if (v197)
      {
        v198 = v197;
        operator delete(v197);
      }
      v22 = v200;
      if (v200)
      {
        v201 = v200;
        goto LABEL_167;
      }
      return;
    }
    v194 = 0;
    v195 = 0;
    v196 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v194 = v16;
      v196 = v17;
      memcpy(v16, v14, v15);
      v195 = v17;
    }
    v191 = 0;
    v192 = 0;
    v193 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v191 = v20;
      v193 = v21;
      memcpy(v20, v18, v19);
      v192 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)10>(a1, a2, &v194, &v191);
      if (v191)
      {
        v192 = v191;
        operator delete(v191);
      }
      v22 = v194;
      if (v194)
      {
        v195 = v194;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v207))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v207))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v170 = 0;
        v171 = 0;
        v172 = 0;
        v32 = *a3;
        v33 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v33)
        {
          if (v33 < 0)
            goto LABEL_169;
          v34 = (uint64_t *)operator new(v33);
          v35 = &v34[v33 >> 3];
          v170 = v34;
          v172 = v35;
          memcpy(v34, v32, v33);
          v171 = v35;
        }
        v167 = 0;
        v168 = 0;
        v169 = 0;
        v36 = *a4;
        v37 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v37)
        {
          if (v37 < 0)
            goto LABEL_169;
          v38 = (char *)operator new(v37);
          v39 = &v38[8 * (v37 >> 3)];
          v167 = v38;
          v169 = v39;
          memcpy(v38, v36, v37);
          v168 = v39;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)10>(a1, a2, &v170, (uint64_t **)&v167, a5, v31);
        if (v167)
        {
          v168 = v167;
          operator delete(v167);
        }
        v22 = v170;
        if (v170)
        {
          v171 = v170;
          goto LABEL_167;
        }
        return;
      }
      v177 = 0;
      v176 = 0;
      v178 = 0;
      v105 = *a3;
      v106 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_169;
        v107 = (uint64_t *)operator new(v106);
        v108 = &v107[v106 >> 3];
        v176 = v107;
        v178 = v108;
        memcpy(v107, v105, v106);
        v177 = v108;
      }
      v173 = 0;
      v174 = 0;
      v175 = 0;
      v109 = *a4;
      v110 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v110)
      {
        if (v110 < 0)
          goto LABEL_169;
        v111 = (char *)operator new(v110);
        v112 = &v111[8 * (v110 >> 3)];
        v173 = v111;
        v175 = v112;
        memcpy(v111, v109, v110);
        v174 = v112;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v176, (uint64_t **)&v173);
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      v22 = v176;
      if (v176)
      {
        v177 = v176;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v207))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v207))
      {
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v49 = *a3;
        v50 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v50)
        {
          if (v50 < 0)
            goto LABEL_169;
          v51 = (uint64_t *)operator new(v50);
          v52 = &v51[v50 >> 3];
          v152 = v51;
          v154 = v52;
          memcpy(v51, v49, v50);
          v153 = v52;
        }
        v149 = 0;
        v150 = 0;
        v151 = 0;
        v53 = *a4;
        v54 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v54)
        {
          if (v54 < 0)
            goto LABEL_169;
          v55 = (char *)operator new(v54);
          v56 = &v55[8 * (v54 >> 3)];
          v149 = v55;
          v151 = v56;
          memcpy(v55, v53, v54);
          v150 = v56;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)10>(a1, a2, &v152, (uint64_t **)&v149);
        if (v149)
        {
          v150 = v149;
          operator delete(v149);
        }
        v22 = v152;
        if (v152)
        {
          v153 = v152;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v207))
      {
        v146 = 0;
        v147 = 0;
        v148 = 0;
        v57 = *a3;
        v58 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v58)
        {
          if (v58 < 0)
            goto LABEL_169;
          v59 = (uint64_t *)operator new(v58);
          v60 = &v59[v58 >> 3];
          v146 = v59;
          v148 = v60;
          memcpy(v59, v57, v58);
          v147 = v60;
        }
        v143 = 0;
        v144 = 0;
        v145 = 0;
        v61 = *a4;
        v62 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v62)
        {
          if (v62 < 0)
            goto LABEL_169;
          v63 = (char *)operator new(v62);
          v64 = &v63[8 * (v62 >> 3)];
          v143 = v63;
          v145 = v64;
          memcpy(v63, v61, v62);
          v144 = v64;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)10>(a1, a2, &v146, (uint64_t **)&v143);
        if (v143)
        {
          v144 = v143;
          operator delete(v143);
        }
        v22 = v146;
        if (v146)
        {
          v147 = v146;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v207))
      {
        v140 = 0;
        v141 = 0;
        v142 = 0;
        v65 = *a3;
        v66 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_169;
          v67 = (uint64_t *)operator new(v66);
          v68 = &v67[v66 >> 3];
          v140 = v67;
          v142 = v68;
          memcpy(v67, v65, v66);
          v141 = v68;
        }
        v137 = 0;
        v138 = 0;
        v139 = 0;
        v69 = *a4;
        v70 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_169;
          v71 = (char *)operator new(v70);
          v72 = &v71[8 * (v70 >> 3)];
          v137 = v71;
          v139 = v72;
          memcpy(v71, v69, v70);
          v138 = v72;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)10>(a1, a2, &v140, (uint64_t **)&v137);
        if (v137)
        {
          v138 = v137;
          operator delete(v137);
        }
        v22 = v140;
        if (v140)
        {
          v141 = v140;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v134 = 0;
        v135 = 0;
        v136 = 0;
        v73 = *a3;
        v74 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_169;
          v75 = (uint64_t *)operator new(v74);
          v76 = &v75[v74 >> 3];
          v134 = v75;
          v136 = v76;
          memcpy(v75, v73, v74);
          v135 = v76;
        }
        v131 = 0;
        v132 = 0;
        v133 = 0;
        v77 = *a4;
        v78 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v78)
        {
          if (v78 < 0)
            goto LABEL_169;
          v79 = (char *)operator new(v78);
          v80 = &v79[8 * (v78 >> 3)];
          v131 = v79;
          v133 = v80;
          memcpy(v79, v77, v78);
          v132 = v80;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)10>(a1, a2, &v134, (uint64_t **)&v131);
        if (v131)
        {
          v132 = v131;
          operator delete(v131);
        }
        v22 = v134;
        if (v134)
        {
          v135 = v134;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v124, (uint64_t)a3);
          std::vector<long long>::vector(v123, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)10>(a1, a2, v124, (uint64_t **)v123);
          if (v123[0])
          {
            v123[1] = v123[0];
            operator delete(v123[0]);
          }
          v22 = v124[0];
          if (v124[0])
          {
            v124[1] = v124[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)10>(a1, a2, (uint64_t **)v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = (uint64_t *)v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v128 = 0;
      v129 = 0;
      v130 = 0;
      v97 = *a3;
      v98 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_169;
        v99 = (uint64_t *)operator new(v98);
        v100 = &v99[v98 >> 3];
        v128 = v99;
        v130 = v100;
        memcpy(v99, v97, v98);
        v129 = v100;
      }
      v125 = 0;
      v126 = 0;
      v127 = 0;
      v101 = *a4;
      v102 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_169;
        v103 = (char *)operator new(v102);
        v104 = &v103[8 * (v102 >> 3)];
        v125 = v103;
        v127 = v104;
        memcpy(v103, v101, v102);
        v126 = v104;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)10>(a1, a2, &v128, (uint64_t **)&v125);
      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
      v22 = v128;
      if (v128)
      {
        v129 = v128;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v158 = 0;
      v159 = 0;
      v160 = 0;
      v41 = *a3;
      v42 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v42)
      {
        if (v42 < 0)
          goto LABEL_169;
        v43 = (uint64_t *)operator new(v42);
        v44 = &v43[v42 >> 3];
        v158 = v43;
        v160 = v44;
        memcpy(v43, v41, v42);
        v159 = v44;
      }
      v155 = 0;
      v156 = 0;
      v157 = 0;
      v45 = *a4;
      v46 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v46)
      {
        if (v46 < 0)
          goto LABEL_169;
        v47 = (char *)operator new(v46);
        v48 = &v47[8 * (v46 >> 3)];
        v155 = v47;
        v157 = v48;
        memcpy(v47, v45, v46);
        v156 = v48;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)10>(a1, a2, &v158, (uint64_t **)&v155, a5, v40);
      if (v155)
      {
        v156 = v155;
        operator delete(v155);
      }
      v22 = v158;
      if (v158)
      {
        v159 = v158;
        goto LABEL_167;
      }
      return;
    }
    v164 = 0;
    v165 = 0;
    v166 = 0;
    v113 = *a3;
    v114 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_169;
      v115 = (uint64_t *)operator new(v114);
      v116 = &v115[v114 >> 3];
      v164 = v115;
      v166 = v116;
      memcpy(v115, v113, v114);
      v165 = v116;
    }
    v161 = 0;
    v162 = 0;
    v163 = 0;
    v117 = *a4;
    v118 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v118)
    {
      if (v118 < 0)
        goto LABEL_169;
      v119 = (char *)operator new(v118);
      v120 = &v119[8 * (v118 >> 3)];
      v161 = v119;
      v163 = v120;
      memcpy(v119, v117, v118);
      v162 = v120;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v164, (uint64_t **)&v161);
    if (v161)
    {
      v162 = v161;
      operator delete(v161);
    }
    v22 = v164;
    if (v164)
    {
      v165 = v164;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v188 = 0;
    v189 = 0;
    v190 = 0;
    v89 = *a3;
    v90 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v90)
    {
      if (v90 < 0)
        goto LABEL_169;
      v91 = (uint64_t *)operator new(v90);
      v92 = &v91[v90 >> 3];
      v188 = v91;
      v190 = v92;
      memcpy(v91, v89, v90);
      v189 = v92;
    }
    v186 = 0;
    v185 = 0;
    v187 = 0;
    v93 = *a4;
    v94 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v94)
    {
      if (v94 < 0)
        goto LABEL_169;
      v95 = (char *)operator new(v94);
      v96 = &v95[8 * (v94 >> 3)];
      v185 = v95;
      v187 = v96;
      memcpy(v95, v93, v94);
      v186 = v96;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)10>(a1, a2, &v188, (uint64_t **)&v185);
    if (v185)
    {
      v186 = v185;
      operator delete(v185);
    }
    v22 = v188;
    if (v188)
    {
      v189 = v188;
      goto LABEL_167;
    }
    return;
  }
  v183 = 0;
  v182 = 0;
  v184 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v182 = v25;
    v184 = v26;
    memcpy(v25, v23, v24);
    v183 = v26;
  }
  v180 = 0;
  __p = 0;
  v181 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v181 = v30;
    memcpy(v29, v27, v28);
    v180 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)10>(a1, a2, &v182, (uint64_t **)&__p);
  if (__p)
  {
    v180 = __p;
    operator delete(__p);
  }
  v22 = v182;
  if (v182)
  {
    v183 = v182;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)11>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4)
{
  uint64_t ElementType;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  const void *v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  const void *v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  const void *v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  const void *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  const void *v41;
  int64_t v42;
  char *v43;
  char *v44;
  const void *v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  const void *v49;
  int64_t v50;
  char *v51;
  char *v52;
  const void *v53;
  int64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  const void *v61;
  int64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  const void *v65;
  int64_t v66;
  char *v67;
  char *v68;
  const void *v69;
  int64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  const void *v73;
  int64_t v74;
  char *v75;
  char *v76;
  const void *v77;
  int64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  const void *v81;
  int64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  const void *v85;
  int64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  const void *v89;
  int64_t v90;
  char *v91;
  char *v92;
  const void *v93;
  int64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  const void *v97;
  int64_t v98;
  char *v99;
  char *v100;
  const void *v101;
  int64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  const void *v105;
  int64_t v106;
  char *v107;
  char *v108;
  const void *v109;
  int64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  const void *v113;
  int64_t v114;
  char *v115;
  char *v116;
  void *v117[3];
  void *v118[3];
  void *v119[3];
  uint64_t *v120[3];
  void *v121;
  void *v122;
  char *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  void *v127;
  void *v128;
  char *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  void *v133;
  void *v134;
  char *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  void *v139;
  void *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  void *v145;
  void *v146;
  char *v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  void *v151;
  void *v152;
  char *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  void *v157;
  void *v158;
  char *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  void *v163;
  void *v164;
  char *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  void *v169;
  void *v170;
  char *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  void *__p;
  void *v176;
  char *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  void *v181;
  void *v182;
  char *v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t Value;
  uint64_t v203;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v203 = ElementType;
  v201 = *(_QWORD *)**a2;
  v9 = mlir::TensorType::getElementType((mlir::TensorType *)&v201);
  v201 = v9;
  Value = v9;
  v10 = *(void **)(*(_QWORD *)v9 + 136);
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v200 = v9;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v11 = ElementType;
    else
      v11 = 0;
    v199 = v11;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v200);
    v203 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v199);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
  {
    if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v77 = *a3;
      v78 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v78)
      {
        if (v78 < 0)
          goto LABEL_169;
        v79 = (uint64_t *)operator new(v78);
        v80 = &v79[v78 >> 3];
        v196 = v79;
        v198 = v80;
        memcpy(v79, v77, v78);
        v197 = v80;
      }
      v193 = 0;
      v194 = 0;
      v195 = 0;
      v81 = *a4;
      v82 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v82)
      {
        if (v82 < 0)
          goto LABEL_169;
        v83 = (uint64_t *)operator new(v82);
        v84 = &v83[v82 >> 3];
        v193 = v83;
        v195 = v84;
        memcpy(v83, v81, v82);
        v194 = v84;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v196, &v193);
      if (v193)
      {
        v194 = v193;
        operator delete(v193);
      }
      v20 = v196;
      if (v196)
      {
        v197 = v196;
        goto LABEL_167;
      }
      return;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v12 = *a3;
    v13 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v13)
    {
      if (v13 < 0)
        goto LABEL_169;
      v14 = (uint64_t *)operator new(v13);
      v15 = &v14[v13 >> 3];
      v190 = v14;
      v192 = v15;
      memcpy(v14, v12, v13);
      v191 = v15;
    }
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v16 = *a4;
    v17 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v17)
      goto LABEL_15;
    if ((v17 & 0x8000000000000000) == 0)
    {
      v18 = (uint64_t *)operator new(v17);
      v19 = &v18[v17 >> 3];
      v187 = v18;
      v189 = v19;
      memcpy(v18, v16, v17);
      v188 = v19;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v190, &v187);
      if (v187)
      {
        v188 = v187;
        operator delete(v187);
      }
      v20 = v190;
      if (v190)
      {
        v191 = v190;
LABEL_167:
        operator delete(v20);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v203))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v203))
    {
      if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v29 = *a3;
        v30 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v30)
        {
          if (v30 < 0)
            goto LABEL_169;
          v31 = (uint64_t *)operator new(v30);
          v32 = &v31[v30 >> 3];
          v166 = v31;
          v168 = v32;
          memcpy(v31, v29, v30);
          v167 = v32;
        }
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v33 = *a4;
        v34 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v34)
        {
          if (v34 < 0)
            goto LABEL_169;
          v35 = (char *)operator new(v34);
          v36 = &v35[8 * (v34 >> 3)];
          v163 = v35;
          v165 = v36;
          memcpy(v35, v33, v34);
          v164 = v36;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)11>(a1, a2, &v166, (uint64_t **)&v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        v20 = v166;
        if (v166)
        {
          v167 = v166;
          goto LABEL_167;
        }
        return;
      }
      v173 = 0;
      v172 = 0;
      v174 = 0;
      v101 = *a3;
      v102 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v102)
      {
        if (v102 < 0)
          goto LABEL_169;
        v103 = (uint64_t *)operator new(v102);
        v104 = &v103[v102 >> 3];
        v172 = v103;
        v174 = v104;
        memcpy(v103, v101, v102);
        v173 = v104;
      }
      v169 = 0;
      v170 = 0;
      v171 = 0;
      v105 = *a4;
      v106 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v106)
      {
        if (v106 < 0)
          goto LABEL_169;
        v107 = (char *)operator new(v106);
        v108 = &v107[8 * (v106 >> 3)];
        v169 = v107;
        v171 = v108;
        memcpy(v107, v105, v106);
        v170 = v108;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v172, (uint64_t **)&v169);
      if (v169)
      {
        v170 = v169;
        operator delete(v169);
      }
      v20 = v172;
      if (v172)
      {
        v173 = v172;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v203))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v45 = *a3;
        v46 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v46)
        {
          if (v46 < 0)
            goto LABEL_169;
          v47 = (uint64_t *)operator new(v46);
          v48 = &v47[v46 >> 3];
          v148 = v47;
          v150 = v48;
          memcpy(v47, v45, v46);
          v149 = v48;
        }
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v49 = *a4;
        v50 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v50)
        {
          if (v50 < 0)
            goto LABEL_169;
          v51 = (char *)operator new(v50);
          v52 = &v51[8 * (v50 >> 3)];
          v145 = v51;
          v147 = v52;
          memcpy(v51, v49, v50);
          v146 = v52;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v148, (uint64_t **)&v145);
        if (v145)
        {
          v146 = v145;
          operator delete(v145);
        }
        v20 = v148;
        if (v148)
        {
          v149 = v148;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v203))
      {
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v53 = *a3;
        v54 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v54)
        {
          if (v54 < 0)
            goto LABEL_169;
          v55 = (uint64_t *)operator new(v54);
          v56 = &v55[v54 >> 3];
          v142 = v55;
          v144 = v56;
          memcpy(v55, v53, v54);
          v143 = v56;
        }
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v57 = *a4;
        v58 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v58)
        {
          if (v58 < 0)
            goto LABEL_169;
          v59 = (char *)operator new(v58);
          v60 = &v59[8 * (v58 >> 3)];
          v139 = v59;
          v141 = v60;
          memcpy(v59, v57, v58);
          v140 = v60;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)11>(a1, a2, &v142, (uint64_t **)&v139);
        if (v139)
        {
          v140 = v139;
          operator delete(v139);
        }
        v20 = v142;
        if (v142)
        {
          v143 = v142;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v203))
      {
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v61 = *a3;
        v62 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v62)
        {
          if (v62 < 0)
            goto LABEL_169;
          v63 = (uint64_t *)operator new(v62);
          v64 = &v63[v62 >> 3];
          v136 = v63;
          v138 = v64;
          memcpy(v63, v61, v62);
          v137 = v64;
        }
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v65 = *a4;
        v66 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v66)
        {
          if (v66 < 0)
            goto LABEL_169;
          v67 = (char *)operator new(v66);
          v68 = &v67[8 * (v66 >> 3)];
          v133 = v67;
          v135 = v68;
          memcpy(v67, v65, v66);
          v134 = v68;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)11>(a1, a2, &v136, (uint64_t **)&v133);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        v20 = v136;
        if (v136)
        {
          v137 = v136;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v69 = *a3;
        v70 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v70)
        {
          if (v70 < 0)
            goto LABEL_169;
          v71 = (uint64_t *)operator new(v70);
          v72 = &v71[v70 >> 3];
          v130 = v71;
          v132 = v72;
          memcpy(v71, v69, v70);
          v131 = v72;
        }
        v127 = 0;
        v128 = 0;
        v129 = 0;
        v73 = *a4;
        v74 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v74)
        {
          if (v74 < 0)
            goto LABEL_169;
          v75 = (char *)operator new(v74);
          v76 = &v75[8 * (v74 >> 3)];
          v127 = v75;
          v129 = v76;
          memcpy(v75, v73, v74);
          v128 = v76;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)7>(a1, a2, &v130, (uint64_t **)&v127);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v20 = v130;
        if (v130)
        {
          v131 = v130;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v20 = v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v118, (uint64_t)a3);
          std::vector<long long>::vector(v117, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v118, (uint64_t **)v117);
          if (v117[0])
          {
            v117[1] = v117[0];
            operator delete(v117[0]);
          }
          v20 = (uint64_t *)v118[0];
          if (v118[0])
          {
            v118[1] = v118[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v93 = *a3;
      v94 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v94)
      {
        if (v94 < 0)
          goto LABEL_169;
        v95 = (uint64_t *)operator new(v94);
        v96 = &v95[v94 >> 3];
        v124 = v95;
        v126 = v96;
        memcpy(v95, v93, v94);
        v125 = v96;
      }
      v121 = 0;
      v122 = 0;
      v123 = 0;
      v97 = *a4;
      v98 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v98)
      {
        if (v98 < 0)
          goto LABEL_169;
        v99 = (char *)operator new(v98);
        v100 = &v99[8 * (v98 >> 3)];
        v121 = v99;
        v123 = v100;
        memcpy(v99, v97, v98);
        v122 = v100;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v124, (uint64_t **)&v121);
      if (v121)
      {
        v122 = v121;
        operator delete(v121);
      }
      v20 = v124;
      if (v124)
      {
        v125 = v124;
        goto LABEL_167;
      }
      return;
    }
    if (v10 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v37 = *a3;
      v38 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v38)
      {
        if (v38 < 0)
          goto LABEL_169;
        v39 = (uint64_t *)operator new(v38);
        v40 = &v39[v38 >> 3];
        v154 = v39;
        v156 = v40;
        memcpy(v39, v37, v38);
        v155 = v40;
      }
      v151 = 0;
      v152 = 0;
      v153 = 0;
      v41 = *a4;
      v42 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v42)
      {
        if (v42 < 0)
          goto LABEL_169;
        v43 = (char *)operator new(v42);
        v44 = &v43[8 * (v42 >> 3)];
        v151 = v43;
        v153 = v44;
        memcpy(v43, v41, v42);
        v152 = v44;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)11>(a1, a2, &v154, (uint64_t **)&v151);
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      v20 = v154;
      if (v154)
      {
        v155 = v154;
        goto LABEL_167;
      }
      return;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v109 = *a3;
    v110 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v110)
    {
      if (v110 < 0)
        goto LABEL_169;
      v111 = (uint64_t *)operator new(v110);
      v112 = &v111[v110 >> 3];
      v160 = v111;
      v162 = v112;
      memcpy(v111, v109, v110);
      v161 = v112;
    }
    v157 = 0;
    v158 = 0;
    v159 = 0;
    v113 = *a4;
    v114 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v114)
    {
      if (v114 < 0)
        goto LABEL_169;
      v115 = (char *)operator new(v114);
      v116 = &v115[8 * (v114 >> 3)];
      v157 = v115;
      v159 = v116;
      memcpy(v115, v113, v114);
      v158 = v116;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v160, (uint64_t **)&v157);
    if (v157)
    {
      v158 = v157;
      operator delete(v157);
    }
    v20 = v160;
    if (v160)
    {
      v161 = v160;
      goto LABEL_167;
    }
    return;
  }
  if (v10 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v85 = *a3;
    v86 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v86)
    {
      if (v86 < 0)
        goto LABEL_169;
      v87 = (uint64_t *)operator new(v86);
      v88 = &v87[v86 >> 3];
      v184 = v87;
      v186 = v88;
      memcpy(v87, v85, v86);
      v185 = v88;
    }
    v182 = 0;
    v181 = 0;
    v183 = 0;
    v89 = *a4;
    v90 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v90)
    {
      if (v90 < 0)
        goto LABEL_169;
      v91 = (char *)operator new(v90);
      v92 = &v91[8 * (v90 >> 3)];
      v181 = v91;
      v183 = v92;
      memcpy(v91, v89, v90);
      v182 = v92;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)11>(a1, a2, &v184, (uint64_t **)&v181);
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
    v20 = v184;
    if (v184)
    {
      v185 = v184;
      goto LABEL_167;
    }
    return;
  }
  v179 = 0;
  v178 = 0;
  v180 = 0;
  v21 = *a3;
  v22 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v22)
  {
    if (v22 < 0)
      goto LABEL_169;
    v23 = (uint64_t *)operator new(v22);
    v24 = &v23[v22 >> 3];
    v178 = v23;
    v180 = v24;
    memcpy(v23, v21, v22);
    v179 = v24;
  }
  v176 = 0;
  __p = 0;
  v177 = 0;
  v25 = *a4;
  v26 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v26)
  {
    if (v26 < 0)
      goto LABEL_169;
    v27 = (char *)operator new(v26);
    v28 = &v27[8 * (v26 >> 3)];
    __p = v27;
    v177 = v28;
    memcpy(v27, v25, v26);
    v176 = v28;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)11>(a1, a2, &v178, (uint64_t **)&__p);
  if (__p)
  {
    v176 = __p;
    operator delete(__p);
  }
  v20 = v178;
  if (v178)
  {
    v179 = v178;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)12>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, double a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const void *v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  const void *v99;
  int64_t v100;
  char *v101;
  char *v102;
  const void *v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  uint64_t *v122[3];
  void *v123;
  void *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  void *v129;
  void *v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  void *v136;
  char *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  void *v160;
  char *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  void *__p;
  void *v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  void *v183;
  void *v184;
  char *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t Value;
  uint64_t v205;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v205 = ElementType;
  v203 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  v203 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v202 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v201 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v79 = *a3;
      v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v80)
      {
        if (v80 < 0)
          goto LABEL_169;
        v81 = (uint64_t *)operator new(v80);
        v82 = &v81[v80 >> 3];
        v198 = v81;
        v200 = v82;
        memcpy(v81, v79, v80);
        v199 = v82;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v83 = *a4;
      v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_169;
        v85 = (uint64_t *)operator new(v84);
        v86 = &v85[v84 >> 3];
        v195 = v85;
        v197 = v86;
        memcpy(v85, v83, v84);
        v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v198, &v195);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v192, &v189);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v31 = *a3;
        v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v32)
        {
          if (v32 < 0)
            goto LABEL_169;
          v33 = (uint64_t *)operator new(v32);
          v34 = &v33[v32 >> 3];
          v168 = v33;
          v170 = v34;
          memcpy(v33, v31, v32);
          v169 = v34;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v35 = *a4;
        v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_169;
          v37 = (char *)operator new(v36);
          v38 = &v37[8 * (v36 >> 3)];
          v165 = v37;
          v167 = v38;
          memcpy(v37, v35, v36);
          v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)12>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          v166 = v165;
          operator delete(v165);
        }
        v22 = v168;
        if (v168)
        {
          v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v103 = *a3;
      v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_169;
        v105 = (uint64_t *)operator new(v104);
        v106 = &v105[v104 >> 3];
        v174 = v105;
        v176 = v106;
        memcpy(v105, v103, v104);
        v175 = v106;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v107 = *a4;
      v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v108)
      {
        if (v108 < 0)
          goto LABEL_169;
        v109 = (char *)operator new(v108);
        v110 = &v109[8 * (v108 >> 3)];
        v171 = v109;
        v173 = v110;
        memcpy(v109, v107, v108);
        v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v174, (uint64_t **)&v171, a5);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v22 = v174;
      if (v174)
      {
        v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_169;
          v49 = (uint64_t *)operator new(v48);
          v50 = &v49[v48 >> 3];
          v150 = v49;
          v152 = v50;
          memcpy(v49, v47, v48);
          v151 = v50;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_169;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v147 = v53;
          v149 = v54;
          memcpy(v53, v51, v52);
          v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v55 = *a3;
        v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v56)
        {
          if (v56 < 0)
            goto LABEL_169;
          v57 = (uint64_t *)operator new(v56);
          v58 = &v57[v56 >> 3];
          v144 = v57;
          v146 = v58;
          memcpy(v57, v55, v56);
          v145 = v58;
        }
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v59 = *a4;
        v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v60)
        {
          if (v60 < 0)
            goto LABEL_169;
          v61 = (char *)operator new(v60);
          v62 = &v61[8 * (v60 >> 3)];
          v141 = v61;
          v143 = v62;
          memcpy(v61, v59, v60);
          v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)12>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        v22 = v144;
        if (v144)
        {
          v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_169;
          v65 = (uint64_t *)operator new(v64);
          v66 = &v65[v64 >> 3];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_169;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)12>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_169;
          v73 = (uint64_t *)operator new(v72);
          v74 = &v73[v72 >> 3];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_169;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)12>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)12>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)12>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_169;
        v97 = (uint64_t *)operator new(v96);
        v98 = &v97[v96 >> 3];
        v126 = v97;
        v128 = v98;
        memcpy(v97, v95, v96);
        v127 = v98;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_169;
        v101 = (char *)operator new(v100);
        v102 = &v101[8 * (v100 >> 3)];
        v123 = v101;
        v125 = v102;
        memcpy(v101, v99, v100);
        v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)12>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v39 = *a3;
      v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_169;
        v41 = (uint64_t *)operator new(v40);
        v42 = &v41[v40 >> 3];
        v156 = v41;
        v158 = v42;
        memcpy(v41, v39, v40);
        v157 = v42;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v43 = *a4;
      v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_169;
        v45 = (char *)operator new(v44);
        v46 = &v45[8 * (v44 >> 3)];
        v153 = v45;
        v155 = v46;
        memcpy(v45, v43, v44);
        v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)12>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v22 = v156;
      if (v156)
      {
        v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_169;
      v113 = (uint64_t *)operator new(v112);
      v114 = &v113[v112 >> 3];
      v162 = v113;
      v164 = v114;
      memcpy(v113, v111, v112);
      v163 = v114;
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_169;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v159 = v117;
      v161 = v118;
      memcpy(v117, v115, v116);
      v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    v22 = v162;
    if (v162)
    {
      v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v87 = *a3;
    v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v88)
    {
      if (v88 < 0)
        goto LABEL_169;
      v89 = (uint64_t *)operator new(v88);
      v90 = &v89[v88 >> 3];
      v186 = v89;
      v188 = v90;
      memcpy(v89, v87, v88);
      v187 = v90;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v91 = *a4;
    v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v92)
    {
      if (v92 < 0)
        goto LABEL_169;
      v93 = (char *)operator new(v92);
      v94 = &v93[8 * (v92 >> 3)];
      v183 = v93;
      v185 = v94;
      memcpy(v93, v91, v92);
      v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)12>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)12>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)13>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float16x4_t a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  const void *v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  const void *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  char *v46;
  const void *v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  int64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  const void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  const void *v63;
  int64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  const void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  const void *v79;
  int64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  const void *v83;
  int64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  const void *v87;
  int64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  const void *v91;
  int64_t v92;
  char *v93;
  char *v94;
  const void *v95;
  int64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  const void *v99;
  int64_t v100;
  char *v101;
  char *v102;
  const void *v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  const void *v107;
  int64_t v108;
  char *v109;
  char *v110;
  const void *v111;
  int64_t v112;
  uint64_t *v113;
  uint64_t *v114;
  const void *v115;
  int64_t v116;
  char *v117;
  char *v118;
  void *v119[3];
  void *v120[3];
  void *v121[3];
  uint64_t *v122[3];
  void *v123;
  void *v124;
  char *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  void *v129;
  void *v130;
  char *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  void *v135;
  void *v136;
  char *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  void *v147;
  void *v148;
  char *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  void *v153;
  void *v154;
  char *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t *v158;
  void *v159;
  void *v160;
  char *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  void *v165;
  void *v166;
  char *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  void *v171;
  void *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  void *__p;
  void *v178;
  char *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  void *v183;
  void *v184;
  char *v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t Value;
  uint64_t v205;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v205 = ElementType;
  v203 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v203);
  v203 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v202 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v201 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
    v205 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v201);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v198 = 0;
      v199 = 0;
      v200 = 0;
      v79 = *a3;
      v80 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v80)
      {
        if (v80 < 0)
          goto LABEL_169;
        v81 = (uint64_t *)operator new(v80);
        v82 = &v81[v80 >> 3];
        v198 = v81;
        v200 = v82;
        memcpy(v81, v79, v80);
        v199 = v82;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      v83 = *a4;
      v84 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v84)
      {
        if (v84 < 0)
          goto LABEL_169;
        v85 = (uint64_t *)operator new(v84);
        v86 = &v85[v84 >> 3];
        v195 = v85;
        v197 = v86;
        memcpy(v85, v83, v84);
        v196 = v86;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v198, &v195);
      if (v195)
      {
        v196 = v195;
        operator delete(v195);
      }
      v22 = v198;
      if (v198)
      {
        v199 = v198;
        goto LABEL_167;
      }
      return;
    }
    v192 = 0;
    v193 = 0;
    v194 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v192 = v16;
      v194 = v17;
      memcpy(v16, v14, v15);
      v193 = v17;
    }
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v189 = v20;
      v191 = v21;
      memcpy(v20, v18, v19);
      v190 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v192, &v189);
      if (v189)
      {
        v190 = v189;
        operator delete(v189);
      }
      v22 = v192;
      if (v192)
      {
        v193 = v192;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v205))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v205))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v31 = *a3;
        v32 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v32)
        {
          if (v32 < 0)
            goto LABEL_169;
          v33 = (uint64_t *)operator new(v32);
          v34 = &v33[v32 >> 3];
          v168 = v33;
          v170 = v34;
          memcpy(v33, v31, v32);
          v169 = v34;
        }
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v35 = *a4;
        v36 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v36)
        {
          if (v36 < 0)
            goto LABEL_169;
          v37 = (char *)operator new(v36);
          v38 = &v37[8 * (v36 >> 3)];
          v165 = v37;
          v167 = v38;
          memcpy(v37, v35, v36);
          v166 = v38;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)13>(a1, a2, &v168, (uint64_t **)&v165);
        if (v165)
        {
          v166 = v165;
          operator delete(v165);
        }
        v22 = v168;
        if (v168)
        {
          v169 = v168;
          goto LABEL_167;
        }
        return;
      }
      v175 = 0;
      v174 = 0;
      v176 = 0;
      v103 = *a3;
      v104 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v104)
      {
        if (v104 < 0)
          goto LABEL_169;
        v105 = (uint64_t *)operator new(v104);
        v106 = &v105[v104 >> 3];
        v174 = v105;
        v176 = v106;
        memcpy(v105, v103, v104);
        v175 = v106;
      }
      v171 = 0;
      v172 = 0;
      v173 = 0;
      v107 = *a4;
      v108 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v108)
      {
        if (v108 < 0)
          goto LABEL_169;
        v109 = (char *)operator new(v108);
        v110 = &v109[8 * (v108 >> 3)];
        v171 = v109;
        v173 = v110;
        memcpy(v109, v107, v108);
        v172 = v110;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v174, (uint64_t **)&v171);
      if (v171)
      {
        v172 = v171;
        operator delete(v171);
      }
      v22 = v174;
      if (v174)
      {
        v175 = v174;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v205))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v47 = *a3;
        v48 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v48)
        {
          if (v48 < 0)
            goto LABEL_169;
          v49 = (uint64_t *)operator new(v48);
          v50 = &v49[v48 >> 3];
          v150 = v49;
          v152 = v50;
          memcpy(v49, v47, v48);
          v151 = v50;
        }
        v147 = 0;
        v148 = 0;
        v149 = 0;
        v51 = *a4;
        v52 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v52)
        {
          if (v52 < 0)
            goto LABEL_169;
          v53 = (char *)operator new(v52);
          v54 = &v53[8 * (v52 >> 3)];
          v147 = v53;
          v149 = v54;
          memcpy(v53, v51, v52);
          v148 = v54;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v150, (uint64_t **)&v147);
        if (v147)
        {
          v148 = v147;
          operator delete(v147);
        }
        v22 = v150;
        if (v150)
        {
          v151 = v150;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v205))
      {
        v144 = 0;
        v145 = 0;
        v146 = 0;
        v55 = *a3;
        v56 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v56)
        {
          if (v56 < 0)
            goto LABEL_169;
          v57 = (uint64_t *)operator new(v56);
          v58 = &v57[v56 >> 3];
          v144 = v57;
          v146 = v58;
          memcpy(v57, v55, v56);
          v145 = v58;
        }
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v59 = *a4;
        v60 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v60)
        {
          if (v60 < 0)
            goto LABEL_169;
          v61 = (char *)operator new(v60);
          v62 = &v61[8 * (v60 >> 3)];
          v141 = v61;
          v143 = v62;
          memcpy(v61, v59, v60);
          v142 = v62;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, &v144, (uint64_t **)&v141);
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        v22 = v144;
        if (v144)
        {
          v145 = v144;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v205))
      {
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v63 = *a3;
        v64 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v64)
        {
          if (v64 < 0)
            goto LABEL_169;
          v65 = (uint64_t *)operator new(v64);
          v66 = &v65[v64 >> 3];
          v138 = v65;
          v140 = v66;
          memcpy(v65, v63, v64);
          v139 = v66;
        }
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v67 = *a4;
        v68 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v68)
        {
          if (v68 < 0)
            goto LABEL_169;
          v69 = (char *)operator new(v68);
          v70 = &v69[8 * (v68 >> 3)];
          v135 = v69;
          v137 = v70;
          memcpy(v69, v67, v68);
          v136 = v70;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)13>(a1, a2, &v138, (uint64_t **)&v135);
        if (v135)
        {
          v136 = v135;
          operator delete(v135);
        }
        v22 = v138;
        if (v138)
        {
          v139 = v138;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v71 = *a3;
        v72 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v72)
        {
          if (v72 < 0)
            goto LABEL_169;
          v73 = (uint64_t *)operator new(v72);
          v74 = &v73[v72 >> 3];
          v132 = v73;
          v134 = v74;
          memcpy(v73, v71, v72);
          v133 = v74;
        }
        v129 = 0;
        v130 = 0;
        v131 = 0;
        v75 = *a4;
        v76 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v76)
        {
          if (v76 < 0)
            goto LABEL_169;
          v77 = (char *)operator new(v76);
          v78 = &v77[8 * (v76 >> 3)];
          v129 = v77;
          v131 = v78;
          memcpy(v77, v75, v76);
          v130 = v78;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)13>(a1, a2, &v132, (uint64_t **)&v129);
        if (v129)
        {
          v130 = v129;
          operator delete(v129);
        }
        v22 = v132;
        if (v132)
        {
          v133 = v132;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v122, (uint64_t)a3);
          std::vector<long long>::vector(v121, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v122, (uint64_t **)v121);
          if (v121[0])
          {
            v121[1] = v121[0];
            operator delete(v121[0]);
          }
          v22 = v122[0];
          if (v122[0])
          {
            v122[1] = v122[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v120, (uint64_t)a3);
          std::vector<long long>::vector(v119, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v120, (uint64_t **)v119);
          if (v119[0])
          {
            v119[1] = v119[0];
            operator delete(v119[0]);
          }
          v22 = (uint64_t *)v120[0];
          if (v120[0])
          {
            v120[1] = v120[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v126 = 0;
      v127 = 0;
      v128 = 0;
      v95 = *a3;
      v96 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v96)
      {
        if (v96 < 0)
          goto LABEL_169;
        v97 = (uint64_t *)operator new(v96);
        v98 = &v97[v96 >> 3];
        v126 = v97;
        v128 = v98;
        memcpy(v97, v95, v96);
        v127 = v98;
      }
      v123 = 0;
      v124 = 0;
      v125 = 0;
      v99 = *a4;
      v100 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v100)
      {
        if (v100 < 0)
          goto LABEL_169;
        v101 = (char *)operator new(v100);
        v102 = &v101[8 * (v100 >> 3)];
        v123 = v101;
        v125 = v102;
        memcpy(v101, v99, v100);
        v124 = v102;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v126, (uint64_t **)&v123);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v22 = v126;
      if (v126)
      {
        v127 = v126;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      v39 = *a3;
      v40 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_169;
        v41 = (uint64_t *)operator new(v40);
        v42 = &v41[v40 >> 3];
        v156 = v41;
        v158 = v42;
        memcpy(v41, v39, v40);
        v157 = v42;
      }
      v153 = 0;
      v154 = 0;
      v155 = 0;
      v43 = *a4;
      v44 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v44)
      {
        if (v44 < 0)
          goto LABEL_169;
        v45 = (char *)operator new(v44);
        v46 = &v45[8 * (v44 >> 3)];
        v153 = v45;
        v155 = v46;
        memcpy(v45, v43, v44);
        v154 = v46;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)13>(a1, a2, &v156, (uint64_t **)&v153);
      if (v153)
      {
        v154 = v153;
        operator delete(v153);
      }
      v22 = v156;
      if (v156)
      {
        v157 = v156;
        goto LABEL_167;
      }
      return;
    }
    v162 = 0;
    v163 = 0;
    v164 = 0;
    v111 = *a3;
    v112 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v112)
    {
      if (v112 < 0)
        goto LABEL_169;
      v113 = (uint64_t *)operator new(v112);
      v114 = &v113[v112 >> 3];
      v162 = v113;
      v164 = v114;
      memcpy(v113, v111, v112);
      v163 = v114;
    }
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v115 = *a4;
    v116 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v116)
    {
      if (v116 < 0)
        goto LABEL_169;
      v117 = (char *)operator new(v116);
      v118 = &v117[8 * (v116 >> 3)];
      v159 = v117;
      v161 = v118;
      memcpy(v117, v115, v116);
      v160 = v118;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v162, (uint64_t **)&v159);
    if (v159)
    {
      v160 = v159;
      operator delete(v159);
    }
    v22 = v162;
    if (v162)
    {
      v163 = v162;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v186 = 0;
    v187 = 0;
    v188 = 0;
    v87 = *a3;
    v88 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v88)
    {
      if (v88 < 0)
        goto LABEL_169;
      v89 = (uint64_t *)operator new(v88);
      v90 = &v89[v88 >> 3];
      v186 = v89;
      v188 = v90;
      memcpy(v89, v87, v88);
      v187 = v90;
    }
    v184 = 0;
    v183 = 0;
    v185 = 0;
    v91 = *a4;
    v92 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v92)
    {
      if (v92 < 0)
        goto LABEL_169;
      v93 = (char *)operator new(v92);
      v94 = &v93[8 * (v92 >> 3)];
      v183 = v93;
      v185 = v94;
      memcpy(v93, v91, v92);
      v184 = v94;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)13>(a1, a2, &v186, (uint64_t **)&v183, a5);
    if (v183)
    {
      v184 = v183;
      operator delete(v183);
    }
    v22 = v186;
    if (v186)
    {
      v187 = v186;
      goto LABEL_167;
    }
    return;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v180 = v25;
    v182 = v26;
    memcpy(v25, v23, v24);
    v181 = v26;
  }
  v178 = 0;
  __p = 0;
  v179 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v179 = v30;
    memcpy(v29, v27, v28);
    v178 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)13>(a1, a2, &v180, (uint64_t **)&__p);
  if (__p)
  {
    v178 = __p;
    operator delete(__p);
  }
  v22 = v180;
  if (v180)
  {
    v181 = v180;
    goto LABEL_167;
  }
}

void mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)14>(uint64_t **a1, uint64_t **a2, const void **a3, const void **a4, float a5)
{
  uint64_t ElementType;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  const void *v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  const void *v27;
  int64_t v28;
  char *v29;
  char *v30;
  float v31;
  const void *v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  const void *v36;
  int64_t v37;
  char *v38;
  char *v39;
  const void *v40;
  int64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  const void *v44;
  int64_t v45;
  char *v46;
  char *v47;
  const void *v48;
  int64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  const void *v52;
  int64_t v53;
  char *v54;
  char *v55;
  const void *v56;
  int64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  const void *v60;
  int64_t v61;
  char *v62;
  char *v63;
  const void *v64;
  int64_t v65;
  uint64_t *v66;
  char *v67;
  const void *v68;
  int64_t v69;
  char *v70;
  char *v71;
  const void *v72;
  int64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  const void *v76;
  int64_t v77;
  char *v78;
  char *v79;
  const void *v80;
  int64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  const void *v84;
  int64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  const void *v88;
  int64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  const void *v92;
  int64_t v93;
  char *v94;
  char *v95;
  const void *v96;
  int64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  const void *v100;
  int64_t v101;
  char *v102;
  char *v103;
  const void *v104;
  int64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  const void *v108;
  int64_t v109;
  char *v110;
  char *v111;
  const void *v112;
  int64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  const void *v116;
  int64_t v117;
  char *v118;
  char *v119;
  void *v120[3];
  void *v121[3];
  void *v122[3];
  uint64_t *v123[3];
  void *v124;
  void *v125;
  char *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  void *v130;
  void *v131;
  char *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  void *v136;
  void *v137;
  char *v138;
  uint64_t *v139;
  uint64_t *v140;
  char *v141;
  void *v142;
  void *v143;
  char *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  void *v148;
  void *v149;
  char *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  void *v154;
  void *v155;
  char *v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t *v159;
  void *v160;
  void *v161;
  char *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  void *v166;
  void *v167;
  char *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  void *v172;
  void *v173;
  char *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  void *__p;
  void *v179;
  char *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  void *v184;
  void *v185;
  char *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t Value;
  uint64_t v206;

  Value = *(_QWORD *)**a1;
  ElementType = mlir::TensorType::getElementType((mlir::TensorType *)&Value);
  v206 = ElementType;
  v204 = *(_QWORD *)**a2;
  v11 = mlir::TensorType::getElementType((mlir::TensorType *)&v204);
  v204 = v11;
  Value = v11;
  v12 = *(void **)(*(_QWORD *)v11 + 136);
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v203 = v11;
    if (*(_UNKNOWN **)(*(_QWORD *)ElementType + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v13 = ElementType;
    else
      v13 = 0;
    v202 = v13;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v203);
    v206 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v202);
  }
  if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v206))
  {
    if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v199 = 0;
      v200 = 0;
      v201 = 0;
      v80 = *a3;
      v81 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v81)
      {
        if (v81 < 0)
          goto LABEL_169;
        v82 = (uint64_t *)operator new(v81);
        v83 = &v82[v81 >> 3];
        v199 = v82;
        v201 = v83;
        memcpy(v82, v80, v81);
        v200 = v83;
      }
      v196 = 0;
      v197 = 0;
      v198 = 0;
      v84 = *a4;
      v85 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v85)
      {
        if (v85 < 0)
          goto LABEL_169;
        v86 = (uint64_t *)operator new(v85);
        v87 = &v86[v85 >> 3];
        v196 = v86;
        v198 = v87;
        memcpy(v86, v84, v85);
        v197 = v87;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>(a1, a2, &v199, &v196);
      if (v196)
      {
        v197 = v196;
        operator delete(v196);
      }
      v22 = v199;
      if (v199)
      {
        v200 = v199;
        goto LABEL_167;
      }
      return;
    }
    v193 = 0;
    v194 = 0;
    v195 = 0;
    v14 = *a3;
    v15 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v15)
    {
      if (v15 < 0)
        goto LABEL_169;
      v16 = (uint64_t *)operator new(v15);
      v17 = &v16[v15 >> 3];
      v193 = v16;
      v195 = v17;
      memcpy(v16, v14, v15);
      v194 = v17;
    }
    v190 = 0;
    v191 = 0;
    v192 = 0;
    v18 = *a4;
    v19 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (!v19)
      goto LABEL_15;
    if ((v19 & 0x8000000000000000) == 0)
    {
      v20 = (uint64_t *)operator new(v19);
      v21 = &v20[v19 >> 3];
      v190 = v20;
      v192 = v21;
      memcpy(v20, v18, v19);
      v191 = v21;
LABEL_15:
      mlir::mps::arithmeticUnaryTileBaseKernel<float,float,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v193, &v190);
      if (v190)
      {
        v191 = v190;
        operator delete(v190);
      }
      v22 = v193;
      if (v193)
      {
        v194 = v193;
LABEL_167:
        operator delete(v22);
        return;
      }
      return;
    }
LABEL_169:
    abort();
  }
  if (!mlir::Type::isF32((mlir::Type *)&Value) || !mlir::Type::isF16((mlir::Type *)&v206))
  {
    if (mlir::Type::isF16((mlir::Type *)&Value) && mlir::Type::isF16((mlir::Type *)&v206))
    {
      if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      {
        v169 = 0;
        v170 = 0;
        v171 = 0;
        v32 = *a3;
        v33 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v33)
        {
          if (v33 < 0)
            goto LABEL_169;
          v34 = (uint64_t *)operator new(v33);
          v35 = &v34[v33 >> 3];
          v169 = v34;
          v171 = v35;
          memcpy(v34, v32, v33);
          v170 = v35;
        }
        v166 = 0;
        v167 = 0;
        v168 = 0;
        v36 = *a4;
        v37 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v37)
        {
          if (v37 < 0)
            goto LABEL_169;
          v38 = (char *)operator new(v37);
          v39 = &v38[8 * (v37 >> 3)];
          v166 = v38;
          v168 = v39;
          memcpy(v38, v36, v37);
          v167 = v39;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<half,half,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v169, (uint64_t **)&v166, a5, v31);
        if (v166)
        {
          v167 = v166;
          operator delete(v166);
        }
        v22 = v169;
        if (v169)
        {
          v170 = v169;
          goto LABEL_167;
        }
        return;
      }
      v176 = 0;
      v175 = 0;
      v177 = 0;
      v104 = *a3;
      v105 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v105)
      {
        if (v105 < 0)
          goto LABEL_169;
        v106 = (uint64_t *)operator new(v105);
        v107 = &v106[v105 >> 3];
        v175 = v106;
        v177 = v107;
        memcpy(v106, v104, v105);
        v176 = v107;
      }
      v172 = 0;
      v173 = 0;
      v174 = 0;
      v108 = *a4;
      v109 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v109)
      {
        if (v109 < 0)
          goto LABEL_169;
        v110 = (char *)operator new(v109);
        v111 = &v110[8 * (v109 >> 3)];
        v172 = v110;
        v174 = v111;
        memcpy(v110, v108, v109);
        v173 = v111;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v175, (uint64_t **)&v172, a5, v31);
      if (v172)
      {
        v173 = v172;
        operator delete(v172);
      }
      v22 = v175;
      if (v175)
      {
        v176 = v175;
        goto LABEL_167;
      }
      return;
    }
    if (!mlir::Type::isF16((mlir::Type *)&Value) || !mlir::Type::isF32((mlir::Type *)&v206))
    {
      if (mlir::Type::isF32((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v206))
      {
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v48 = *a3;
        v49 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_169;
          v50 = (uint64_t *)operator new(v49);
          v51 = &v50[v49 >> 3];
          v151 = v50;
          v153 = v51;
          memcpy(v50, v48, v49);
          v152 = v51;
        }
        v148 = 0;
        v149 = 0;
        v150 = 0;
        v52 = *a4;
        v53 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v53)
        {
          if (v53 < 0)
            goto LABEL_169;
          v54 = (char *)operator new(v53);
          v55 = &v54[8 * (v53 >> 3)];
          v148 = v54;
          v150 = v55;
          memcpy(v54, v52, v53);
          v149 = v55;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,float,(mlir::mps::arithmeticOp)14>(a1, a2, &v151, (uint64_t **)&v148);
        if (v148)
        {
          v149 = v148;
          operator delete(v148);
        }
        v22 = v151;
        if (v151)
        {
          v152 = v151;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isBF16((mlir::Type *)&v206))
      {
        v145 = 0;
        v146 = 0;
        v147 = 0;
        v56 = *a3;
        v57 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v57)
        {
          if (v57 < 0)
            goto LABEL_169;
          v58 = (uint64_t *)operator new(v57);
          v59 = &v58[v57 >> 3];
          v145 = v58;
          v147 = v59;
          memcpy(v58, v56, v57);
          v146 = v59;
        }
        v142 = 0;
        v143 = 0;
        v144 = 0;
        v60 = *a4;
        v61 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v61)
        {
          if (v61 < 0)
            goto LABEL_169;
          v62 = (char *)operator new(v61);
          v63 = &v62[8 * (v61 >> 3)];
          v142 = v62;
          v144 = v63;
          memcpy(v62, v60, v61);
          v143 = v63;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<__emulated_bf16,__emulated_bf16,(mlir::mps::arithmeticOp)14>(a1, a2, &v145, (uint64_t **)&v142);
        if (v142)
        {
          v143 = v142;
          operator delete(v142);
        }
        v22 = v145;
        if (v145)
        {
          v146 = v145;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isBF16((mlir::Type *)&Value) && mlir::Type::isF32((mlir::Type *)&v206))
      {
        v139 = 0;
        v140 = 0;
        v141 = 0;
        v64 = *a3;
        v65 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v65)
        {
          if (v65 < 0)
            goto LABEL_169;
          v66 = (uint64_t *)operator new(v65);
          v67 = (char *)&v66[v65 >> 3];
          v139 = v66;
          v141 = v67;
          memcpy(v66, v64, v65);
          v140 = (uint64_t *)v67;
        }
        v136 = 0;
        v137 = 0;
        v138 = 0;
        v68 = *a4;
        v69 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v69)
        {
          if (v69 < 0)
            goto LABEL_169;
          v70 = (char *)operator new(v69);
          v71 = &v70[8 * (v69 >> 3)];
          v136 = v70;
          v138 = v71;
          memcpy(v70, v68, v69);
          v137 = v71;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<float,__emulated_bf16,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, (uint64_t)&v139, (uint64_t **)&v136);
        if (v136)
        {
          v137 = v136;
          operator delete(v136);
        }
        v22 = v139;
        if (v139)
        {
          v140 = v139;
          goto LABEL_167;
        }
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&Value, 64))
      {
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v72 = *a3;
        v73 = (_BYTE *)a3[1] - (_BYTE *)*a3;
        if (v73)
        {
          if (v73 < 0)
            goto LABEL_169;
          v74 = (uint64_t *)operator new(v73);
          v75 = &v74[v73 >> 3];
          v133 = v74;
          v135 = v75;
          memcpy(v74, v72, v73);
          v134 = v75;
        }
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v76 = *a4;
        v77 = (_BYTE *)a4[1] - (_BYTE *)*a4;
        if (v77)
        {
          if (v77 < 0)
            goto LABEL_169;
          v78 = (char *)operator new(v77);
          v79 = &v78[8 * (v77 >> 3)];
          v130 = v78;
          v132 = v79;
          memcpy(v78, v76, v77);
          v131 = v79;
        }
        mlir::mps::arithmeticUnaryTileBaseKernel<long long,long long,(mlir::mps::arithmeticOp)13>(a1, a2, &v133, (uint64_t **)&v130);
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        v22 = v133;
        if (v133)
        {
          v134 = v133;
          goto LABEL_167;
        }
        return;
      }
      if (!mlir::Type::isInteger((mlir::Type *)&Value, 32))
      {
        if (mlir::Type::isInteger((mlir::Type *)&Value, 16))
        {
          std::vector<long long>::vector(v123, (uint64_t)a3);
          std::vector<long long>::vector(v122, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<short,short,(mlir::mps::arithmeticOp)7>(a1, a2, v123, (uint64_t **)v122);
          if (v122[0])
          {
            v122[1] = v122[0];
            operator delete(v122[0]);
          }
          v22 = v123[0];
          if (v123[0])
          {
            v123[1] = v123[0];
            goto LABEL_167;
          }
        }
        else
        {
          if (!mlir::Type::isInteger((mlir::Type *)&Value, 8) && !mlir::Type::isInteger((mlir::Type *)&Value, 1))
            mlir::mps::arithmeticUnaryTileKernelType<(mlir::mps::arithmeticOp)6>();
          std::vector<long long>::vector(v121, (uint64_t)a3);
          std::vector<long long>::vector(v120, (uint64_t)a4);
          mlir::mps::arithmeticUnaryTileBaseKernel<signed char,signed char,(mlir::mps::arithmeticOp)7>(a1, a2, (uint64_t **)v121, (uint64_t **)v120);
          if (v120[0])
          {
            v120[1] = v120[0];
            operator delete(v120[0]);
          }
          v22 = (uint64_t *)v121[0];
          if (v121[0])
          {
            v121[1] = v121[0];
            goto LABEL_167;
          }
        }
        return;
      }
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v96 = *a3;
      v97 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v97)
      {
        if (v97 < 0)
          goto LABEL_169;
        v98 = (uint64_t *)operator new(v97);
        v99 = &v98[v97 >> 3];
        v127 = v98;
        v129 = v99;
        memcpy(v98, v96, v97);
        v128 = v99;
      }
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v100 = *a4;
      v101 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v101)
      {
        if (v101 < 0)
          goto LABEL_169;
        v102 = (char *)operator new(v101);
        v103 = &v102[8 * (v101 >> 3)];
        v124 = v102;
        v126 = v103;
        memcpy(v102, v100, v101);
        v125 = v103;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<int,int,(mlir::mps::arithmeticOp)7>(a1, a2, &v127, (uint64_t **)&v124);
      if (v124)
      {
        v125 = v124;
        operator delete(v124);
      }
      v22 = v127;
      if (v127)
      {
        v128 = v127;
        goto LABEL_167;
      }
      return;
    }
    if (v12 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      v157 = 0;
      v158 = 0;
      v159 = 0;
      v40 = *a3;
      v41 = (_BYTE *)a3[1] - (_BYTE *)*a3;
      if (v41)
      {
        if (v41 < 0)
          goto LABEL_169;
        v42 = (uint64_t *)operator new(v41);
        v43 = &v42[v41 >> 3];
        v157 = v42;
        v159 = v43;
        memcpy(v42, v40, v41);
        v158 = v43;
      }
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v44 = *a4;
      v45 = (_BYTE *)a4[1] - (_BYTE *)*a4;
      if (v45)
      {
        if (v45 < 0)
          goto LABEL_169;
        v46 = (char *)operator new(v45);
        v47 = &v46[8 * (v45 >> 3)];
        v154 = v46;
        v156 = v47;
        memcpy(v46, v44, v45);
        v155 = v47;
      }
      mlir::mps::arithmeticUnaryTileBaseKernel<float,half,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v157, (uint64_t **)&v154);
      if (v154)
      {
        v155 = v154;
        operator delete(v154);
      }
      v22 = v157;
      if (v157)
      {
        v158 = v157;
        goto LABEL_167;
      }
      return;
    }
    v163 = 0;
    v164 = 0;
    v165 = 0;
    v112 = *a3;
    v113 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v113)
    {
      if (v113 < 0)
        goto LABEL_169;
      v114 = (uint64_t *)operator new(v113);
      v115 = &v114[v113 >> 3];
      v163 = v114;
      v165 = v115;
      memcpy(v114, v112, v113);
      v164 = v115;
    }
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v116 = *a4;
    v117 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v117)
    {
      if (v117 < 0)
        goto LABEL_169;
      v118 = (char *)operator new(v117);
      v119 = &v118[8 * (v117 >> 3)];
      v160 = v118;
      v162 = v119;
      memcpy(v118, v116, v117);
      v161 = v119;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<float,(void *)0>,complex_support::complex_fp<half,(void *)0>,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v163, (uint64_t **)&v160);
    if (v160)
    {
      v161 = v160;
      operator delete(v160);
    }
    v22 = v163;
    if (v163)
    {
      v164 = v163;
      goto LABEL_167;
    }
    return;
  }
  if (v12 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    v187 = 0;
    v188 = 0;
    v189 = 0;
    v88 = *a3;
    v89 = (_BYTE *)a3[1] - (_BYTE *)*a3;
    if (v89)
    {
      if (v89 < 0)
        goto LABEL_169;
      v90 = (uint64_t *)operator new(v89);
      v91 = &v90[v89 >> 3];
      v187 = v90;
      v189 = v91;
      memcpy(v90, v88, v89);
      v188 = v91;
    }
    v185 = 0;
    v184 = 0;
    v186 = 0;
    v92 = *a4;
    v93 = (_BYTE *)a4[1] - (_BYTE *)*a4;
    if (v93)
    {
      if (v93 < 0)
        goto LABEL_169;
      v94 = (char *)operator new(v93);
      v95 = &v94[8 * (v93 >> 3)];
      v184 = v94;
      v186 = v95;
      memcpy(v94, v92, v93);
      v185 = v95;
    }
    mlir::mps::arithmeticUnaryTileBaseKernel<complex_support::complex_fp<half,(void *)0>,complex_support::complex_fp<float,(void *)0>,(mlir::mps::arithmeticOp)14>((uint64_t)a1, a2, &v187, (uint64_t **)&v184, a5);
    if (v184)
    {
      v185 = v184;
      operator delete(v184);
    }
    v22 = v187;
    if (v187)
    {
      v188 = v187;
      goto LABEL_167;
    }
    return;
  }
  v182 = 0;
  v181 = 0;
  v183 = 0;
  v23 = *a3;
  v24 = (_BYTE *)a3[1] - (_BYTE *)*a3;
  if (v24)
  {
    if (v24 < 0)
      goto LABEL_169;
    v25 = (uint64_t *)operator new(v24);
    v26 = &v25[v24 >> 3];
    v181 = v25;
    v183 = v26;
    memcpy(v25, v23, v24);
    v182 = v26;
  }
  v179 = 0;
  __p = 0;
  v180 = 0;
  v27 = *a4;
  v28 = (_BYTE *)a4[1] - (_BYTE *)*a4;
  if (v28)
  {
    if (v28 < 0)
      goto LABEL_169;
    v29 = (char *)operator new(v28);
    v30 = &v29[8 * (v28 >> 3)];
    __p = v29;
    v180 = v30;
    memcpy(v29, v27, v28);
    v179 = v30;
  }
  mlir::mps::arithmeticUnaryTileBaseKernel<half,float,(mlir::mps::arithmeticOp)14>(a1, a2, &v181, (uint64_t **)&__p, a5);
  if (__p)
  {
    v179 = __p;
    operator delete(__p);
  }
  v22 = v181;
  if (v181)
  {
    v182 = v181;
    goto LABEL_167;
  }
}

