uint64_t mlir::RewritePatternSet::add<mlir::mps::RandomTruncatedNormalOp>(mlir::LogicalResult (*)(mlir::mps::RandomTruncatedNormalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RandomUniformOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::RandomUniformOp>(mlir::LogicalResult (*)(mlir::mps::RandomUniformOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RandomUniformOp>(mlir::LogicalResult (*)(mlir::mps::RandomUniformOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomUniformOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomUniformOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RandomUniformOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RandomUniformOp>(mlir::LogicalResult (*)(mlir::mps::RandomUniformOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::RankOp>(mlir::LogicalResult (*)(mlir::mps::RankOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RankOp>(mlir::LogicalResult (*)(mlir::mps::RankOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RankOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RankOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RankOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RankOp>(mlir::LogicalResult (*)(mlir::mps::RankOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReadVariableOp>(mlir::LogicalResult (*)(mlir::mps::ReadVariableOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReadVariableOp>(mlir::LogicalResult (*)(mlir::mps::ReadVariableOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReadVariableOp>(mlir::LogicalResult (*)(mlir::mps::ReadVariableOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::RealPartOp>(mlir::LogicalResult (*)(mlir::mps::RealPartOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RealPartOp>(mlir::LogicalResult (*)(mlir::mps::RealPartOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealPartOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealPartOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealPartOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RealPartOp>(mlir::LogicalResult (*)(mlir::mps::RealPartOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::RealToHermiteanFFTOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::RealToHermiteanFFTOp>(mlir::LogicalResult (*)(mlir::mps::RealToHermiteanFFTOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RealToHermiteanFFTOp>(mlir::LogicalResult (*)(mlir::mps::RealToHermiteanFFTOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealToHermiteanFFTOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealToHermiteanFFTOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RealToHermiteanFFTOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RealToHermiteanFFTOp>(mlir::LogicalResult (*)(mlir::mps::RealToHermiteanFFTOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReciprocalOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReciprocalOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReciprocalOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReciprocalSquareRootOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalSquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReciprocalSquareRootOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalSquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalSquareRootOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalSquareRootOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReciprocalSquareRootOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReciprocalSquareRootOp>(mlir::LogicalResult (*)(mlir::mps::ReciprocalSquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionAndOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionAndOp>(mlir::LogicalResult (*)(mlir::mps::ReductionAndOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionAndOp>(mlir::LogicalResult (*)(mlir::mps::ReductionAndOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionAndOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionAndOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionAndOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionAndOp>(mlir::LogicalResult (*)(mlir::mps::ReductionAndOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionArgMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionArgMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionArgMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionArgMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionArgMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionArgMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionArgMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionArgMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionLogSumExpOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionLogSumExpOp>(mlir::LogicalResult (*)(mlir::mps::ReductionLogSumExpOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionLogSumExpOp>(mlir::LogicalResult (*)(mlir::mps::ReductionLogSumExpOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionLogSumExpOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionLogSumExpOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionLogSumExpOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionLogSumExpOp>(mlir::LogicalResult (*)(mlir::mps::ReductionLogSumExpOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMaxOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionMaxOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMeanOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionMeanOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMeanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionMeanOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMeanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionMeanOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionMeanOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionMeanOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionMeanOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMeanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionMinOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionMinOp>(mlir::LogicalResult (*)(mlir::mps::ReductionMinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionOrOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionOrOp>(mlir::LogicalResult (*)(mlir::mps::ReductionOrOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionOrOp>(mlir::LogicalResult (*)(mlir::mps::ReductionOrOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionOrOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionOrOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionOrOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionOrOp>(mlir::LogicalResult (*)(mlir::mps::ReductionOrOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionProdOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionProdOp>(mlir::LogicalResult (*)(mlir::mps::ReductionProdOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionProdOp>(mlir::LogicalResult (*)(mlir::mps::ReductionProdOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionProdOp>(mlir::LogicalResult (*)(mlir::mps::ReductionProdOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionSumOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionSumOp>(mlir::LogicalResult (*)(mlir::mps::ReductionSumOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionSumOp>(mlir::LogicalResult (*)(mlir::mps::ReductionSumOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionSumOp>(mlir::LogicalResult (*)(mlir::mps::ReductionSumOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReductionVarianceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReductionVarianceOp>(mlir::LogicalResult (*)(mlir::mps::ReductionVarianceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReductionVarianceOp>(mlir::LogicalResult (*)(mlir::mps::ReductionVarianceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionVarianceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionVarianceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReductionVarianceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReductionVarianceOp>(mlir::LogicalResult (*)(mlir::mps::ReductionVarianceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReinterpretCastOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReinterpretCastOp>(mlir::LogicalResult (*)(mlir::mps::ReinterpretCastOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReinterpretCastOp>(mlir::LogicalResult (*)(mlir::mps::ReinterpretCastOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReinterpretCastOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReinterpretCastOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReinterpretCastOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReinterpretCastOp>(mlir::LogicalResult (*)(mlir::mps::ReinterpretCastOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::Relu6Op>(mlir::LogicalResult (*)(mlir::mps::Relu6Op,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::Relu6Op>(mlir::LogicalResult (*)(mlir::mps::Relu6Op,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Relu6Op>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Relu6Op>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::Relu6Op>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::Relu6Op>(mlir::LogicalResult (*)(mlir::mps::Relu6Op,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReluGradOp>(mlir::LogicalResult (*)(mlir::mps::ReluGradOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReluGradOp>(mlir::LogicalResult (*)(mlir::mps::ReluGradOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluGradOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluGradOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluGradOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReluGradOp>(mlir::LogicalResult (*)(mlir::mps::ReluGradOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReluOp>(mlir::LogicalResult (*)(mlir::mps::ReluOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReluOp>(mlir::LogicalResult (*)(mlir::mps::ReluOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReluOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReluOp>(mlir::LogicalResult (*)(mlir::mps::ReluOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ReshapeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReshapeOp>(mlir::LogicalResult (*)(mlir::mps::ReshapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReshapeOp>(mlir::LogicalResult (*)(mlir::mps::ReshapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReshapeOp>(mlir::LogicalResult (*)(mlir::mps::ReshapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ResizeGradientOp>(mlir::LogicalResult (*)(mlir::mps::ResizeGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ResizeGradientOp>(mlir::LogicalResult (*)(mlir::mps::ResizeGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ResizeGradientOp>(mlir::LogicalResult (*)(mlir::mps::ResizeGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ResizeOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ResizeOp>(mlir::LogicalResult (*)(mlir::mps::ResizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ResizeOp>(mlir::LogicalResult (*)(mlir::mps::ResizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ResizeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ResizeOp>(mlir::LogicalResult (*)(mlir::mps::ResizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ReverseOp>(mlir::LogicalResult (*)(mlir::mps::ReverseOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ReverseOp>(mlir::LogicalResult (*)(mlir::mps::ReverseOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReverseOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReverseOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ReverseOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ReverseOp>(mlir::LogicalResult (*)(mlir::mps::ReverseOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::RintOp>(mlir::LogicalResult (*)(mlir::mps::RintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RintOp>(mlir::LogicalResult (*)(mlir::mps::RintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RintOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RintOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RintOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RintOp>(mlir::LogicalResult (*)(mlir::mps::RintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::RoundOp>(mlir::LogicalResult (*)(mlir::mps::RoundOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::RoundOp>(mlir::LogicalResult (*)(mlir::mps::RoundOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RoundOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RoundOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::RoundOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::RoundOp>(mlir::LogicalResult (*)(mlir::mps::RoundOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridDataGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SampleGridDataGradientOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridDataGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SampleGridDataGradientOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridDataGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridDataGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridDataGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridDataGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SampleGridDataGradientOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridDataGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SampleGridOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SampleGridOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SampleGridOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SampleGridOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SampleGridOp>(mlir::LogicalResult (*)(mlir::mps::SampleGridOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterAlongAxisOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ScatterAlongAxisOp>(mlir::LogicalResult (*)(mlir::mps::ScatterAlongAxisOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ScatterAlongAxisOp>(mlir::LogicalResult (*)(mlir::mps::ScatterAlongAxisOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterAlongAxisOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterAlongAxisOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterAlongAxisOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ScatterAlongAxisOp>(mlir::LogicalResult (*)(mlir::mps::ScatterAlongAxisOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterNDOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ScatterNDOp>(mlir::LogicalResult (*)(mlir::mps::ScatterNDOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ScatterNDOp>(mlir::LogicalResult (*)(mlir::mps::ScatterNDOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterNDOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterNDOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterNDOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ScatterNDOp>(mlir::LogicalResult (*)(mlir::mps::ScatterNDOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::ScatterOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ScatterOp>(mlir::LogicalResult (*)(mlir::mps::ScatterOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ScatterOp>(mlir::LogicalResult (*)(mlir::mps::ScatterOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ScatterOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ScatterOp>(mlir::LogicalResult (*)(mlir::mps::ScatterOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SelectOp>(mlir::LogicalResult (*)(mlir::mps::SelectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SelectOp>(mlir::LogicalResult (*)(mlir::mps::SelectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SelectOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SelectOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SelectOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SelectOp>(mlir::LogicalResult (*)(mlir::mps::SelectOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::ShapeOp>(mlir::LogicalResult (*)(mlir::mps::ShapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::ShapeOp>(mlir::LogicalResult (*)(mlir::mps::ShapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ShapeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ShapeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::ShapeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::ShapeOp>(mlir::LogicalResult (*)(mlir::mps::ShapeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientWithSigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientWithSigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientWithSigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientWithSigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientWithSigmoidOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientWithSigmoidOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidGradientWithSigmoidOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SigmoidGradientWithSigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidGradientWithSigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SigmoidHardOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidHardOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SigmoidHardOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidHardOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidHardOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidHardOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidHardOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SigmoidHardOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidHardOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SigmoidOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SigmoidOp>(mlir::LogicalResult (*)(mlir::mps::SigmoidOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SignOp>(mlir::LogicalResult (*)(mlir::mps::SignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SignOp>(mlir::LogicalResult (*)(mlir::mps::SignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SignOp>(mlir::LogicalResult (*)(mlir::mps::SignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SignbitOp>(mlir::LogicalResult (*)(mlir::mps::SignbitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SignbitOp>(mlir::LogicalResult (*)(mlir::mps::SignbitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignbitOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignbitOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SignbitOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SignbitOp>(mlir::LogicalResult (*)(mlir::mps::SignbitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SinOp>(mlir::LogicalResult (*)(mlir::mps::SinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SinOp>(mlir::LogicalResult (*)(mlir::mps::SinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SinOp>(mlir::LogicalResult (*)(mlir::mps::SinOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNGradientOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNGradientOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNGradientOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SingleGateRNNOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SingleGateRNNOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SingleGateRNNOp>(mlir::LogicalResult (*)(mlir::mps::SingleGateRNNOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SinhOp>(mlir::LogicalResult (*)(mlir::mps::SinhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SinhOp>(mlir::LogicalResult (*)(mlir::mps::SinhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinhOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinhOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SinhOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SinhOp>(mlir::LogicalResult (*)(mlir::mps::SinhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SizeOp>(mlir::LogicalResult (*)(mlir::mps::SizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SizeOp>(mlir::LogicalResult (*)(mlir::mps::SizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SizeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SizeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SizeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SizeOp>(mlir::LogicalResult (*)(mlir::mps::SizeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SliceOp>(mlir::LogicalResult (*)(mlir::mps::SliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SliceOp>(mlir::LogicalResult (*)(mlir::mps::SliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SliceOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SliceOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SliceOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SliceOp>(mlir::LogicalResult (*)(mlir::mps::SliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SoftmaxOp>(mlir::LogicalResult (*)(mlir::mps::SoftmaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SoftmaxOp>(mlir::LogicalResult (*)(mlir::mps::SoftmaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftmaxOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftmaxOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftmaxOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SoftmaxOp>(mlir::LogicalResult (*)(mlir::mps::SoftmaxOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SoftplusOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SoftplusOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SoftplusOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SoftplusParametricOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusParametricOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SoftplusParametricOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusParametricOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusParametricOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusParametricOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftplusParametricOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SoftplusParametricOp>(mlir::LogicalResult (*)(mlir::mps::SoftplusParametricOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SoftsignOp>(mlir::LogicalResult (*)(mlir::mps::SoftsignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SoftsignOp>(mlir::LogicalResult (*)(mlir::mps::SoftsignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftsignOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftsignOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SoftsignOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SoftsignOp>(mlir::LogicalResult (*)(mlir::mps::SoftsignOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SortOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SortOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SortOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SortOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SortOp>(mlir::LogicalResult (*)(mlir::mps::SortOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SortOp>(mlir::LogicalResult (*)(mlir::mps::SortOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SortOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SortOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SortOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SortOp>(mlir::LogicalResult (*)(mlir::mps::SortOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToBatchOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SpaceToBatchOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToBatchOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SpaceToBatchOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToBatchOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToBatchOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToBatchOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToBatchOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SpaceToBatchOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToBatchOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SpaceToDepth2DOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SpaceToDepth2DOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToDepth2DOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SpaceToDepth2DOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToDepth2DOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToDepth2DOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToDepth2DOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SpaceToDepth2DOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SpaceToDepth2DOp>(mlir::LogicalResult (*)(mlir::mps::SpaceToDepth2DOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::SplitOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SplitOp>(mlir::LogicalResult (*)(mlir::mps::SplitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SplitOp>(mlir::LogicalResult (*)(mlir::mps::SplitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SplitOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SplitOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SplitOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SplitOp>(mlir::LogicalResult (*)(mlir::mps::SplitOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SquareOp>(mlir::LogicalResult (*)(mlir::mps::SquareOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SquareOp>(mlir::LogicalResult (*)(mlir::mps::SquareOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SquareOp>(mlir::LogicalResult (*)(mlir::mps::SquareOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SquareRootOp>(mlir::LogicalResult (*)(mlir::mps::SquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SquareRootOp>(mlir::LogicalResult (*)(mlir::mps::SquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareRootOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareRootOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SquareRootOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SquareRootOp>(mlir::LogicalResult (*)(mlir::mps::SquareRootOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SqueezeOp>(mlir::LogicalResult (*)(mlir::mps::SqueezeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SqueezeOp>(mlir::LogicalResult (*)(mlir::mps::SqueezeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SqueezeOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SqueezeOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SqueezeOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SqueezeOp>(mlir::LogicalResult (*)(mlir::mps::SqueezeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StencilOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::StencilOp>(mlir::LogicalResult (*)(mlir::mps::StencilOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::StencilOp>(mlir::LogicalResult (*)(mlir::mps::StencilOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StencilOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StencilOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StencilOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::StencilOp>(mlir::LogicalResult (*)(mlir::mps::StencilOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::StridedSliceGradientOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::StridedSliceGradientOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::StridedSliceGradientOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::StridedSliceOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::StridedSliceOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::StridedSliceOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::StridedSliceUpdateOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::StridedSliceUpdateOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceUpdateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::StridedSliceUpdateOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceUpdateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceUpdateOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceUpdateOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::StridedSliceUpdateOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::StridedSliceUpdateOp>(mlir::LogicalResult (*)(mlir::mps::StridedSliceUpdateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SubtractOp>(mlir::LogicalResult (*)(mlir::mps::SubtractOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SubtractOp>(mlir::LogicalResult (*)(mlir::mps::SubtractOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SubtractOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SubtractOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SubtractOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SubtractOp>(mlir::LogicalResult (*)(mlir::mps::SubtractOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::SwishOp>(mlir::LogicalResult (*)(mlir::mps::SwishOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::SwishOp>(mlir::LogicalResult (*)(mlir::mps::SwishOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SwishOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SwishOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::SwishOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::SwishOp>(mlir::LogicalResult (*)(mlir::mps::SwishOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TanOp>(mlir::LogicalResult (*)(mlir::mps::TanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TanOp>(mlir::LogicalResult (*)(mlir::mps::TanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TanOp>(mlir::LogicalResult (*)(mlir::mps::TanOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TanhOp>(mlir::LogicalResult (*)(mlir::mps::TanhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TanhOp>(mlir::LogicalResult (*)(mlir::mps::TanhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanhOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanhOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TanhOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TanhOp>(mlir::LogicalResult (*)(mlir::mps::TanhOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TileGradientOp>(mlir::LogicalResult (*)(mlir::mps::TileGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TileGradientOp>(mlir::LogicalResult (*)(mlir::mps::TileGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TileGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TileGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TileGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TileGradientOp>(mlir::LogicalResult (*)(mlir::mps::TileGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TileOp>(mlir::LogicalResult (*)(mlir::mps::TileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TileOp>(mlir::LogicalResult (*)(mlir::mps::TileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TileOp>(mlir::LogicalResult (*)(mlir::mps::TileOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKGradientOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TopKGradientOp>(mlir::LogicalResult (*)(mlir::mps::TopKGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TopKGradientOp>(mlir::LogicalResult (*)(mlir::mps::TopKGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKGradientOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKGradientOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKGradientOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TopKGradientOp>(mlir::LogicalResult (*)(mlir::mps::TopKGradientOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TopKOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TopKOp>(mlir::LogicalResult (*)(mlir::mps::TopKOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TopKOp>(mlir::LogicalResult (*)(mlir::mps::TopKOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TopKOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TopKOp>(mlir::LogicalResult (*)(mlir::mps::TopKOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TransposeOp>(mlir::LogicalResult (*)(mlir::mps::TransposeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TransposeOp>(mlir::LogicalResult (*)(mlir::mps::TransposeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TransposeOp>(mlir::LogicalResult (*)(mlir::mps::TransposeOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TruncateOp>(mlir::LogicalResult (*)(mlir::mps::TruncateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TruncateOp>(mlir::LogicalResult (*)(mlir::mps::TruncateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TruncateOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TruncateOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TruncateOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TruncateOp>(mlir::LogicalResult (*)(mlir::mps::TruncateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

void llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::detail::TypeConstraintOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::TypeConstraintOp>(mlir::LogicalResult (*)(mlir::mps::TypeConstraintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::TypeConstraintOp>(mlir::LogicalResult (*)(mlir::mps::TypeConstraintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TypeConstraintOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TypeConstraintOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::TypeConstraintOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::TypeConstraintOp>(mlir::LogicalResult (*)(mlir::mps::TypeConstraintOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::UnrealizedFoldOp>(mlir::LogicalResult (*)(mlir::mps::UnrealizedFoldOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::UnrealizedFoldOp>(mlir::LogicalResult (*)(mlir::mps::UnrealizedFoldOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UnrealizedFoldOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UnrealizedFoldOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UnrealizedFoldOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::UnrealizedFoldOp>(mlir::LogicalResult (*)(mlir::mps::UnrealizedFoldOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::UpdateRandomStateOp>(mlir::LogicalResult (*)(mlir::mps::UpdateRandomStateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::UpdateRandomStateOp>(mlir::LogicalResult (*)(mlir::mps::UpdateRandomStateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UpdateRandomStateOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UpdateRandomStateOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::UpdateRandomStateOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::UpdateRandomStateOp>(mlir::LogicalResult (*)(mlir::mps::UpdateRandomStateOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::VariableFromTensorOp>(mlir::LogicalResult (*)(mlir::mps::VariableFromTensorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::VariableFromTensorOp>(mlir::LogicalResult (*)(mlir::mps::VariableFromTensorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::VariableFromTensorOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::VariableFromTensorOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::VariableFromTensorOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::VariableFromTensorOp>(mlir::LogicalResult (*)(mlir::mps::VariableFromTensorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::XnorOp>(mlir::LogicalResult (*)(mlir::mps::XnorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::XnorOp>(mlir::LogicalResult (*)(mlir::mps::XnorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XnorOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XnorOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XnorOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::XnorOp>(mlir::LogicalResult (*)(mlir::mps::XnorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

_QWORD *mlir::RewritePatternSet::add<mlir::mps::XorOp>(mlir::LogicalResult (*)(mlir::mps::XorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::RewritePatternSet::add<mlir::mps::XorOp>(mlir::LogicalResult (*)(mlir::mps::XorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::~FnPattern(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XorOp>::rewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XorOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t mlir::detail::OpOrInterfaceRewritePatternBase<mlir::mps::XorOp>::matchAndRewrite(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::RewritePatternSet::add<mlir::mps::XorOp>(mlir::LogicalResult (*)(mlir::mps::XorOp,mlir::PatternRewriter &),mlir::PatternBenefit,llvm::ArrayRef<llvm::StringRef>)::FnPattern::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a2, a3);
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::writeAttribute(uint64_t a1, __n128 *a2, uint64_t a3)
{
  void *v5;
  unsigned int Kind;
  uint64_t Value;
  __n128 Handle;
  uint64_t v9;
  __n128 v11;
  __n128 *v12;

  v5 = *(void **)(a2->n128_u64[0] + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, 0);
    v12 = a2;
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, Value);
    Handle = mlir::mps::MPSBufferTensorAttr::getHandle(&v12, &v11);
    (*(void (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)a3 + 40))(a3, &v11, Handle);
    v9 = mlir::OpPassManager::begin((mlir::OpPassManager *)&v12);
LABEL_50:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v9);
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::CropResizeAlignmentModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 1);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::CropResizeCoordinateModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 2);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::DeviceHintAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 3);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::FFTScalingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 4);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::GRUGateLayoutAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 5);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::LSTMGateLayoutAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 6);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::MetalPixelFormatAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 7);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::NearestRoundingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 8);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PaddingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 9);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PaddingStyleAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 10);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PoolIndicesModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 11);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PruningMetricAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 12);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::PruningStructureAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 13);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::RNNActivationAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 14);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::NormalSamplingMethodAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 15);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::ReductionModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 16);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::SamplingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 17);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::ScatterModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 18);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::SimilarityTypeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 19);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::SparseTensorStorageAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 20);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::StencilPaddingModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 21);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::TensorDataLayoutAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 22);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
    goto LABEL_49;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::mps::CallInlineModeAttr,void>::id)
  {
    v11.n128_u64[0] = (unint64_t)a2;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 23);
    Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v11);
LABEL_49:
    v9 = Kind;
    goto LABEL_50;
  }
  return 1;
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::readAttribute(mlir::DialectInterface *a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  Context = (mlir::MLIRContext *)mlir::DialectInterface::getContext(a1);
  v5 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v5))
    return 0;
  switch(v5)
  {
    case 0:
      v12 = 0;
      if (!mlir::DialectBytecodeReader::readType<mlir::RankedTensorType>(a2, &v12))
        return 0;
      mlir::DialectBytecodeReader::readResourceHandle<mlir::mps::MPSDialectResourceBlobHandle>(a2, (uint64_t)&v9);
      if (!v11)
        return 0;
      v8 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v8))
        return 0;
      v6 = v9;
      v7 = v10;
      result = mlir::mps::MPSBufferTensorAttr::get(Context, v12, &v6, v8);
      break;
    case 1:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::CropResizeAlignmentModeAttr::get(Context, v9);
      break;
    case 2:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::CropResizeCoordinateModeAttr::get(Context, v9);
      break;
    case 3:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::DeviceHintAttr::get(Context, v9);
      break;
    case 4:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::FFTScalingModeAttr::get(Context, v9);
      break;
    case 5:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::GRUGateLayoutAttr::get(Context, v9);
      break;
    case 6:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::LSTMGateLayoutAttr::get(Context, v9);
      break;
    case 7:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::MetalPixelFormatAttr::get(Context, v9);
      break;
    case 8:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::NearestRoundingModeAttr::get(Context, v9);
      break;
    case 9:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::PaddingModeAttr::get(Context, v9);
      break;
    case 10:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::PaddingStyleAttr::get(Context, v9);
      break;
    case 11:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::PoolIndicesModeAttr::get(Context, v9);
      break;
    case 12:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::PruningMetricAttr::get(Context, v9);
      break;
    case 13:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::PruningStructureAttr::get(Context, v9);
      break;
    case 14:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::RNNActivationAttr::get(Context, v9);
      break;
    case 15:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::NormalSamplingMethodAttr::get(Context, v9);
      break;
    case 16:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::ReductionModeAttr::get(Context, v9);
      break;
    case 17:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::SamplingModeAttr::get(Context, v9);
      break;
    case 18:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::ScatterModeAttr::get(Context, v9);
      break;
    case 19:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::SimilarityTypeAttr::get(Context, v9);
      break;
    case 20:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::SparseTensorStorageAttr::get(Context, v9);
      break;
    case 21:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::StencilPaddingModeAttr::get(Context, v9);
      break;
    case 22:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::TensorDataLayoutAttr::get(Context, v9);
      break;
    case 23:
      *(_QWORD *)&v9 = 0;
      if (!(*(unsigned __int8 (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 72))(a2, &v9))
        return 0;
      result = mlir::mps::CallInlineModeAttr::get(Context, v9);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::writeType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_UNKNOWN **)(*(_QWORD *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, 1);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 48))(a3, 0);
  }
  return 1;
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::readType(mlir::DialectInterface *a1, uint64_t a2)
{
  mlir::MLIRContext *Context;
  char v4;
  uint64_t result;
  BOOL v6;
  char v7;
  BOOL v8;
  uint64_t *TypeUniquer;
  uint64_t v10;
  uint64_t v11;

  Context = (mlir::MLIRContext *)mlir::DialectInterface::getContext(a1);
  v10 = 0;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v10);
  result = 0;
  if (v4)
    v6 = v10 == 1;
  else
    v6 = 0;
  if (v6)
  {
    v11 = 0;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 72))(a2, &v11);
    result = 0;
    if (v7)
      v8 = v11 == 0;
    else
      v8 = 0;
    if (v8)
    {
      TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(Context);
      return mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id);
    }
  }
  return result;
}

void mlir::mps::MPSBytecodeDialectInterface::~MPSBytecodeDialectInterface(mlir::mps::MPSBytecodeDialectInterface *this)
{
  void *v1;

  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  operator delete(v1);
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::writeVersion(unsigned int *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, a1[8]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, a1[9]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, a1[10]);
}

_DWORD *mlir::mps::MPSBytecodeDialectInterface::readVersion@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *result;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v8 = 0;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v10)
    && (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v9)
    && (*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, &v8))
  {
    result = operator new(0x18uLL);
    v6 = v9;
    v5 = v10;
    v7 = v8;
    *(_QWORD *)result = &unk_1E0E4B858;
    result[2] = v5;
    result[3] = v6;
    result[4] = v7;
    *a2 = result;
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t mlir::mps::MPSBytecodeDialectInterface::upgradeFromVersion(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD **v16;
  _QWORD **v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  const char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[2];
  int v34;
  _QWORD v35[3];
  void *v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  void *__p;
  _QWORD **v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v33[0] = &unk_1E0E4B858;
  v33[1] = 0x200000001;
  v34 = 1;
  v4 = a3[2];
  if (v4)
  {
    if (v4 != 1)
      goto LABEL_8;
    v5 = a3[3];
    if (v5 == 2)
    {
      v6 = a3[4];
      if (v6)
      {
        if (v6 != 1)
        {
LABEL_8:
          v23 = "current mps dialect version is {0}, can't parse version {1}";
          v24 = 59;
          v25 = v30;
          v26 = 2;
          v27 = &unk_1E0E23F50;
          v28 = v33;
          v29[0] = &unk_1E0E23F50;
          v29[1] = a3;
          v30[0] = &v27;
          v30[1] = v29;
          v32 = 263;
          v31[0] = &v23;
          mlir::Operation::emitError(a2, (uint64_t)v31, (uint64_t)v35);
          v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v35);
          if (v35[0])
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v35);
          if (v42)
          {
            v8 = (_QWORD **)__p;
            if (__p)
            {
              v9 = v41;
              v10 = __p;
              if (v41 != __p)
              {
                do
                  v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
                while (v9 != v8);
                v10 = __p;
              }
              v41 = v8;
              operator delete(v10);
            }
            v11 = v38;
            if (!v38)
              goto LABEL_40;
            v12 = v39;
            v13 = v38;
            if (v39 == v38)
            {
LABEL_39:
              v39 = v11;
              operator delete(v13);
LABEL_40:
              if (v36 != &v37)
                free(v36);
              return v7;
            }
            do
            {
              v15 = (void *)*--v12;
              v14 = v15;
              *v12 = 0;
              if (v15)
                operator delete[](v14);
            }
            while (v12 != v11);
LABEL_38:
            v13 = v38;
            goto LABEL_39;
          }
          return v7;
        }
        return 1;
      }
    }
    else if (v5 >= 3)
    {
      goto LABEL_8;
    }
  }
  if (mlir::detail::upgradeFromVersion((mlir::ForwardIterator *)a2, (uint64_t)a3))
    return 1;
  v23 = "IR upgrade to version {0} failed";
  v24 = 32;
  v25 = v29;
  v26 = 1;
  v27 = &unk_1E0E23F50;
  v28 = v33;
  v29[0] = &v27;
  v32 = 263;
  v31[0] = &v23;
  mlir::Operation::emitError(a2, (uint64_t)v31, (uint64_t)v35);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v35);
  if (v35[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v35);
  if (v42)
  {
    v16 = (_QWORD **)__p;
    if (__p)
    {
      v17 = v41;
      v18 = __p;
      if (v41 != __p)
      {
        do
          v17 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v17 - 1);
        while (v17 != v16);
        v18 = __p;
      }
      v41 = v16;
      operator delete(v18);
    }
    v11 = v38;
    if (!v38)
      goto LABEL_40;
    v19 = v39;
    v13 = v38;
    if (v39 == v38)
      goto LABEL_39;
    do
    {
      v21 = (void *)*--v19;
      v20 = v21;
      *v19 = 0;
      if (v21)
        operator delete[](v20);
    }
    while (v19 != v11);
    goto LABEL_38;
  }
  return v7;
}

uint64_t mlir::DialectBytecodeReader::readType<mlir::RankedTensorType>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void ***v14;
  char *v15;
  char *v16;
  __int128 v17;
  const void ***v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  _WORD v38[20];
  uint64_t v39;
  const void **v40;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  _BYTE v49[96];
  void *v50;
  _QWORD *v51;
  void *__p;
  _QWORD **v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 64))(a1, &v39))
    return 0;
  v4 = v39;
  v5 = *(void **)(*(_QWORD *)v39 + 136);
  if (v5 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    v4 = 0;
  *a2 = v4;
  if (v5 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    return 1;
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    v41 = (unint64_t)"expected ";
    v42 = 9;
    v6 = &v40;
    v7 = (char *)v46;
    if (v47 >= v48)
    {
      v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        v35 = (char *)&v40 - (_BYTE *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v7 = (char *)v46;
        v6 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        v6 = &v40;
        v7 = (char *)v46;
      }
    }
    v8 = &v7[24 * v47];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v47;
  }
  v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::RankedTensorType]";
  v41 = 72;
  v10 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v10)
      v11 = v10;
    else
      v11 = v41;
    v12 = 18;
    if (v41 - v11 < 0x12)
      v12 = v41 - v11;
    v13 = v41 - v11 - v12;
    if (v13 >= v13 - 1)
      --v13;
    v43 = 261;
    v40 = (const void **)((char *)v40 + v11 + v12);
    v41 = v13;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      v41 = (unint64_t)", but got: ";
      v42 = 11;
      v14 = &v40;
      v15 = (char *)v46;
      if (v47 >= v48)
      {
        v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          v36 = (char *)&v40 - (_BYTE *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v15 = (char *)v46;
          v14 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v14 = &v40;
          v15 = (char *)v46;
        }
      }
      v16 = &v15[24 * v47];
      v17 = *(_OWORD *)v14;
      *((_QWORD *)v16 + 2) = v14[2];
      *(_OWORD *)v16 = v17;
      ++v47;
      if (v44)
      {
        v18 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        v19 = (char *)v46;
        if (v47 >= v48)
        {
          v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            v37 = (char *)&v40 - (_BYTE *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v19 = (char *)v46;
            v18 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            v18 = &v40;
            v19 = (char *)v46;
          }
        }
        v20 = &v19[24 * v47];
        v21 = *(_OWORD *)v18;
        *((_QWORD *)v20 + 2) = v18[2];
        *(_OWORD *)v20 = v21;
        ++v47;
      }
    }
  }
  v22 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  if (v54)
  {
    v23 = (_QWORD **)__p;
    if (__p)
    {
      v24 = v53;
      v25 = __p;
      if (v53 != __p)
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p;
      }
      v53 = v23;
      operator delete(v25);
    }
    v26 = v50;
    if (v50)
    {
      v27 = v51;
      v28 = v50;
      if (v51 != v50)
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v50;
      }
      v51 = v26;
      operator delete(v28);
    }
    if (v46 != v49)
      free(v46);
  }
  return v22;
}

void mlir::DialectBytecodeReader::readResourceHandle<mlir::mps::MPSDialectResourceBlobHandle>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  unsigned __int8 v5;
  void **p_vtable;
  int *v7;
  char *v8;
  char *v9;
  __int128 v10;
  const char *v11;
  _QWORD **v12;
  _QWORD **v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  void *v30;
  char v31[32];
  __int16 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  int v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[96];
  void *v45;
  _QWORD *v46;
  void *__p;
  _QWORD **v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 128))(&v33);
  if (!v35)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  v4 = (void *)*((_QWORD *)&v33 + 1);
  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v5 & 1) == 0)
  {
    v30 = (void *)*((_QWORD *)&v33 + 1);
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v4 = v30;
    if (v21)
    {
      v39 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSDialectResourceBlobHandle]";
      v40 = 89;
      v22 = llvm::StringRef::find((uint64_t *)&v39, "DesiredTypeName = ", 0x12uLL, 0);
      if (v40 >= v22)
        v23 = v22;
      else
        v23 = v40;
      v24 = &v39[v23];
      v25 = v40 - v23;
      if (v40 - v23 >= 0x12)
        v26 = 18;
      else
        v26 = v40 - v23;
      v27 = v25 - v26;
      if (v27 >= v27 - 1)
        v28 = v27 - 1;
      else
        v28 = v27;
      mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      v4 = v30;
    }
  }
  if (v4 == p_vtable[491])
  {
    *(_OWORD *)a2 = v33;
    *(_QWORD *)(a2 + 16) = v34;
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  v32 = 257;
  (*(void (**)(const char **__return_ptr, uint64_t, char *))(*(_QWORD *)a1 + 16))(&v39, a1, v31);
  if (!v39)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (!v49)
      return;
    goto LABEL_13;
  }
  v36 = 3;
  v37 = "provided resource handle differs from the expected resource type";
  v38 = 64;
  v7 = &v36;
  v8 = (char *)v41;
  if (v42 >= v43)
  {
    v20 = v42 + 1;
    if (v41 <= &v36 && (char *)v41 + 24 * v42 > (char *)&v36)
    {
      v29 = (char *)&v36 - (_BYTE *)v41;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v20, 24);
      v8 = (char *)v41;
      v7 = (int *)((char *)v41 + v29);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v20, 24);
      v7 = &v36;
      v8 = (char *)v41;
    }
  }
  v9 = &v8[24 * v42];
  v10 = *(_OWORD *)v7;
  *((_QWORD *)v9 + 2) = *((_QWORD *)v7 + 2);
  *(_OWORD *)v9 = v10;
  ++v42;
  v11 = v39;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v11)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v39);
  if (v49)
  {
LABEL_13:
    v12 = (_QWORD **)__p;
    if (__p)
    {
      v13 = v48;
      v14 = __p;
      if (v48 != __p)
      {
        do
          v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        v14 = __p;
      }
      v48 = v12;
      operator delete(v14);
    }
    v15 = v45;
    if (v45)
    {
      v16 = v46;
      v17 = v45;
      if (v46 != v45)
      {
        do
        {
          v19 = (void *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
            operator delete[](v18);
        }
        while (v16 != v15);
        v17 = v45;
      }
      v46 = v15;
      operator delete(v17);
    }
    if (v41 != v44)
      free(v41);
  }
}

uint64_t mlir::mps::serialization::FuncOp::parse(mlir::AsmParser *a1, uint64_t a2)
{
  char v3;

  return mlir::function_interface_impl::parseFunctionOp(a1, a2, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 8), (uint64_t (*)(uint64_t, mlir::DictionaryAttr **, void *, _QWORD, void *, _QWORD, _QWORD, void **))llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mps::serialization::FuncOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)&v3, **(_QWORD **)(*(_QWORD *)(a2 + 8) + 96), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 96) + 16));
}

void mlir::mps::serialization::FuncOp::print(mlir::mps::serialization::FuncOp *this, mlir::OpAsmPrinter *a2)
{
  uint64_t v4;
  uint64_t InterfaceFor;
  uint64_t AttrData;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)this;
  InterfaceFor = mlir::OpInterface<mlir::FunctionOpInterface,mlir::detail::FunctionOpInterfaceInterfaceTraits>::getInterfaceFor(*(_QWORD *)this);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 48) + 96) + 8);
  AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  v7 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)this + 48) + 96);
  mlir::function_interface_impl::printFunctionOp((uint64_t)a2, v4, InterfaceFor, 0, AttrData, v8, *v7, v7[2]);
}

void mlir::mps::serialization::ConditionOp::getSuccessorRegions(mlir::Operation **a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  mlir::Block *v8;
  unsigned int *ParentOp;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42[40];
  _QWORD **v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46[3];

  v46[2] = *MEMORY[0x1E0C80C00];
  mlir::mps::serialization::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v42, *a1);
  v43 = a2;
  v44 = a3;
  v8 = (mlir::Block *)*((_QWORD *)*a1 + 2);
  if (v8)
  {
    ParentOp = (unsigned int *)mlir::Block::getParentOp(v8);
    v10 = *v43;
    if (*v43)
      goto LABEL_3;
LABEL_26:
    v41 = 0;
    v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0)
    {
LABEL_9:
      v13 = (((unint64_t)&ParentOp[4 * ((v12 >> 23) & 1) + 17] + ((v12 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
          + 32 * ParentOp[10];
      v14 = v13 + 24;
      if (*(_QWORD *)(v13 + 24) != v13 + 24)
        goto LABEL_10;
      goto LABEL_28;
    }
LABEL_27:
    v13 = 0;
    v14 = 24;
    if (MEMORY[0x18] != 24)
    {
LABEL_10:
      v15 = *(_QWORD *)(v13 + 32);
      if (v15)
        v16 = v15 - 8;
      else
        v16 = 0;
      v17 = *(_QWORD *)(v16 + 48);
      v18 = (*(_QWORD *)(v16 + 56) - v17) >> 3;
      v19 = *(_DWORD *)(a4 + 8);
      if (v19 < *(_DWORD *)(a4 + 12))
        goto LABEL_14;
      goto LABEL_29;
    }
LABEL_28:
    v17 = 0;
    v18 = 0;
    v19 = *(_DWORD *)(a4 + 8);
    if (v19 < *(_DWORD *)(a4 + 12))
    {
LABEL_14:
      v20 = (uint64_t *)(*(_QWORD *)a4 + 24 * v19);
      *v20 = v14;
      mlir::ValueRange::ValueRange((unint64_t *)v20 + 1, v17, v18);
LABEL_15:
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_16;
    }
LABEL_29:
    v45 = v14;
    v25 = (char *)&v45;
    mlir::ValueRange::ValueRange(v46, v17, v18);
    v26 = *(unsigned int *)(a4 + 8);
    v27 = *(_QWORD *)a4;
    if (v26 >= *(_DWORD *)(a4 + 12))
    {
      v35 = v26 + 1;
      v36 = v27 + 24 * v26 > (unint64_t)&v45;
      if (v27 <= (unint64_t)&v45 && v36)
      {
        v39 = (char *)&v46[-1] - v27;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        v27 = *(_QWORD *)a4;
        v25 = &v39[*(_QWORD *)a4];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v35, 24);
        v27 = *(_QWORD *)a4;
        v25 = (char *)&v45;
      }
    }
    v28 = v27 + 24 * *(unsigned int *)(a4 + 8);
    v29 = *(_OWORD *)v25;
    *(_QWORD *)(v28 + 16) = *((_QWORD *)v25 + 2);
    *(_OWORD *)v28 = v29;
    goto LABEL_15;
  }
  ParentOp = 0;
  v10 = *a2;
  if (!v10)
    goto LABEL_26;
LABEL_3:
  if (mlir::BoolAttr::classof(v10))
    v11 = v10;
  else
    v11 = 0;
  v41 = v11;
  if (!v11 || mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    v12 = ParentOp[11];
    if ((v12 & 0x7FFFFF) != 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_16:
  if (!v41 || !mlir::BoolAttr::getValue((mlir::BoolAttr *)&v41))
  {
    v21 = ParentOp[9];
    if ((_DWORD)v21)
      v22 = (uint64_t)(ParentOp - 4);
    else
      v22 = 0;
    v23 = *(_DWORD *)(a4 + 8);
    if (v23 >= *(_DWORD *)(a4 + 12))
    {
      v45 = 0;
      v30 = (char *)&v45;
      mlir::ValueRange::ValueRange(v46, v22, v21);
      v31 = *(unsigned int *)(a4 + 8);
      v32 = *(_QWORD *)a4;
      if (v31 >= *(_DWORD *)(a4 + 12))
      {
        v37 = v31 + 1;
        v38 = v32 + 24 * v31 > (unint64_t)&v45;
        if (v32 <= (unint64_t)&v45 && v38)
        {
          v40 = (char *)&v46[-1] - v32;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          v32 = *(_QWORD *)a4;
          v30 = &v40[*(_QWORD *)a4];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v37, 24);
          v32 = *(_QWORD *)a4;
          v30 = (char *)&v45;
        }
      }
      v33 = v32 + 24 * *(unsigned int *)(a4 + 8);
      v34 = *(_OWORD *)v30;
      *(_QWORD *)(v33 + 16) = *((_QWORD *)v30 + 2);
      *(_OWORD *)v33 = v34;
    }
    else
    {
      v24 = (_QWORD *)(*(_QWORD *)a4 + 24 * v23);
      *v24 = 0;
      mlir::ValueRange::ValueRange(v24 + 1, v22, v21);
    }
    ++*(_DWORD *)(a4 + 8);
  }
}

uint64_t mlir::mps::serialization::IfOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v15;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23[2];
  _QWORD v24[2];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v24[0] = a9;
  v24[1] = a10;
  if (!a10)
    return 0;
  v11 = (_QWORD *)mlir::RegionRange::dereference_iterator(v24, 0);
  if ((_QWORD *)*v11 == v11)
    return 0;
  v12 = v11[1];
  v13 = v12 ? v12 - 8 : 0;
  v14 = *(mlir::GenericProgramPoint **)(v13 + 32);
  if (v14 == (mlir::GenericProgramPoint *)(v13 + 32))
    return 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(v14);
  if (!v15
    || *(_QWORD *)(*(_QWORD *)(v15 + 48) + 16) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::mps::serialization::YieldOp,void>::id)
  {
    return 0;
  }
  if ((*(_BYTE *)(v15 + 46) & 0x80) != 0)
  {
    v18 = *(_QWORD *)(v15 + 72);
    v19 = *(unsigned int *)(v15 + 68);
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v25 = v18;
  v26 = v19;
  mlir::OperandRange::getTypes(&v25, &v20);
  mlir::ValueRange::ValueRange((unint64_t *)&v25, v20 + 32 * v21, v22 - v21);
  mlir::TypeRange::TypeRange(v23, v25, v26);
  llvm::SmallVectorImpl<mlir::Type>::insert<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,void>(a11, *(_QWORD *)a11 + 8 * *(unsigned int *)(a11 + 8), v23[0], 0, v23[0], v23[1]);
  return 1;
}

BOOL mlir::mps::serialization::IfOp::parse(uint64_t a1, mlir::OperationState *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  mlir::Builder *v6;
  uint64_t IntegerType;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v11[4];

  llvm::SmallVectorImpl<std::unique_ptr<mlir::Region>>::reserve((uint64_t)a2 + 224, 2uLL);
  v4 = (_QWORD *)mlir::OperationState::addRegion(a2);
  v5 = (_QWORD *)mlir::OperationState::addRegion(a2);
  v6 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  memset(v11, 0, 24);
  IntegerType = mlir::Builder::getIntegerType(v6, 1u);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v11, 1)
    && (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v11, IntegerType, (uint64_t)a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 536))(a1, (uint64_t)a2 + 64)&& (*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    mlir::impl::ensureRegionTerminator(v4, v8, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::IfOp>::buildTerminator);
    if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 376))(a1, "else", 4))
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
    if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v5, 0, 0, 0))
    {
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      mlir::impl::ensureRegionTerminator(v5, v9, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::IfOp>::buildTerminator);
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, (uint64_t)a2 + 112) != 0;
    }
  }
  return 0;
}

uint64_t mlir::mps::serialization::WhileOp::parse(uint64_t a1, mlir::OperationState *this)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  BOOL v7;
  uint64_t v8;
  const void *Results;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  int Kind;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Inputs;
  uint64_t v21;
  int *v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int *v32;
  char *v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  unsigned int v41;
  int *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  int *v47;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  _QWORD **v52;
  _QWORD **v53;
  void *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  void *v58;
  void *v59;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  BOOL v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  char v77[32];
  __int16 v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  _QWORD v83[3];
  void *v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE v87[96];
  void *v88;
  _QWORD *v89;
  void *__p;
  _QWORD **v91;
  char v92;
  void *v93;
  uint64_t v94;
  _BYTE v95[128];
  void *v96;
  uint64_t v97;
  _QWORD v98[34];

  v98[32] = *MEMORY[0x1E0C80C00];
  v96 = v98;
  v97 = 0x400000000;
  v93 = v95;
  v94 = 0x400000000;
  v4 = mlir::OperationState::addRegion(this);
  v5 = mlir::OperationState::addRegion(this);
  v6 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 792))(a1, &v96, &v93);
  v7 = v6 >= 0x100u && v6 == 0;
  if (v7
    || (v79 = 0,
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !mlir::AsmParser::parseColonType<mlir::FunctionType>(a1, &v79)))
  {
LABEL_53:
    v51 = 0;
    goto LABEL_54;
  }
  Results = (const void *)mlir::FunctionType::getResults((mlir::FunctionType *)&v79);
  v11 = v10;
  v12 = 8 * v10;
  v13 = *((unsigned int *)this + 18);
  v14 = v13 + ((8 * v10) >> 3);
  if (v14 > *((unsigned int *)this + 19))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v14, 8);
    LODWORD(v13) = *((_DWORD *)this + 18);
  }
  if (v11)
  {
    memcpy((void *)(*((_QWORD *)this + 8) + 8 * v13), Results, v12);
    LODWORD(v13) = *((_DWORD *)this + 18);
  }
  *((_DWORD *)this + 18) = v13 + (v12 >> 3);
  Kind = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v79);
  if ((_DWORD)v94 == Kind)
  {
    v83[0] = mlir::FunctionType::getInputs((mlir::FunctionType *)&v79);
    v83[1] = v16;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,3u> &,llvm::ArrayRef<mlir::Type>>(a1, (uint64_t *)&v93, v83, v17, (uint64_t)this + 16))
    {
      if ((_DWORD)v97)
      {
        v18 = 0;
        v19 = 8 * v97;
        do
        {
          Inputs = mlir::FunctionType::getInputs((mlir::FunctionType *)&v79);
          *((_QWORD *)v96 + v18 + 4) = *(_QWORD *)(Inputs + v18);
          v18 += 8;
        }
        while (v19 != v18);
        v21 = v97;
      }
      else
      {
        v21 = 0;
      }
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t, void *, uint64_t, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, v96, v21, 0))
      {
        LOWORD(v85) = 257;
        if ((*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, "do", 2, v83))
        {
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v5, 0, 0, 0))
          {
            v51 = (*(unsigned __int8 (**)(uint64_t, char *))(*(_QWORD *)a1 + 464))(a1, (char *)this + 112) != 0;
            goto LABEL_54;
          }
        }
      }
    }
    goto LABEL_53;
  }
  v78 = 257;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(v83, a1, v8, v77);
  if (v83[0])
  {
    v80 = 3;
    v81 = "expected as many input types as operands ";
    v82 = 41;
    v22 = &v80;
    v23 = (char *)v84;
    if (v85 >= v86)
    {
      v61 = v85 + 1;
      if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
      {
        v71 = (char *)&v80 - (_BYTE *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
        v23 = (char *)v84;
        v22 = (int *)((char *)v84 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v61, 24);
        v22 = &v80;
        v23 = (char *)v84;
      }
    }
    v24 = &v23[24 * v85];
    v25 = *(_OWORD *)v22;
    *((_QWORD *)v24 + 2) = *((_QWORD *)v22 + 2);
    *(_OWORD *)v24 = v25;
    v26 = ++v85;
    if (v83[0])
    {
      v80 = 3;
      v81 = "(expected ";
      v82 = 10;
      v27 = &v80;
      v28 = (char *)v84;
      if (v26 >= v86)
      {
        v63 = v26 + 1;
        v64 = (char *)v84 + 24 * v26 > (char *)&v80;
        if (v84 <= &v80 && v64)
        {
          v73 = (char *)&v80 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
          v28 = (char *)v84;
          v27 = (int *)((char *)v84 + v73);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v63, 24);
          v27 = &v80;
          v28 = (char *)v84;
        }
      }
      v29 = &v28[24 * v85];
      v30 = *(_OWORD *)v27;
      *((_QWORD *)v29 + 2) = *((_QWORD *)v27 + 2);
      *(_OWORD *)v29 = v30;
      v31 = ++v85;
      if (v83[0])
      {
        v80 = 5;
        v81 = (const char *)v94;
        v32 = &v80;
        v33 = (char *)v84;
        if (v31 >= v86)
        {
          v67 = v31 + 1;
          v68 = (char *)v84 + 24 * v31 > (char *)&v80;
          if (v84 <= &v80 && v68)
          {
            v75 = (char *)&v80 - (_BYTE *)v84;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v67, 24);
            v33 = (char *)v84;
            v32 = (int *)((char *)v84 + v75);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v67, 24);
            v32 = &v80;
            v33 = (char *)v84;
          }
        }
        v34 = &v33[24 * v85];
        v35 = *(_OWORD *)v32;
        *((_QWORD *)v34 + 2) = *((_QWORD *)v32 + 2);
        *(_OWORD *)v34 = v35;
        v36 = ++v85;
        if (v83[0])
        {
          v80 = 3;
          v81 = " got ";
          v82 = 5;
          v37 = &v80;
          v38 = (char *)v84;
          if (v36 >= v86)
          {
            v69 = v36 + 1;
            v70 = (char *)v84 + 24 * v36 > (char *)&v80;
            if (v84 <= &v80 && v70)
            {
              v76 = (char *)&v80 - (_BYTE *)v84;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v69, 24);
              v38 = (char *)v84;
              v37 = (int *)((char *)v84 + v76);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v69, 24);
              v37 = &v80;
              v38 = (char *)v84;
            }
          }
          v39 = &v38[24 * v85];
          v40 = *(_OWORD *)v37;
          *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
          *(_OWORD *)v39 = v40;
          ++v85;
        }
      }
    }
  }
  v41 = mlir::AffineExpr::getKind((mlir::AffineExpr *)&v79);
  if (v83[0])
  {
    v80 = 5;
    v81 = (const char *)v41;
    v42 = &v80;
    v43 = (char *)v84;
    if (v85 >= v86)
    {
      v62 = v85 + 1;
      if (v84 <= &v80 && (char *)v84 + 24 * v85 > (char *)&v80)
      {
        v72 = (char *)&v80 - (_BYTE *)v84;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
        v43 = (char *)v84;
        v42 = (int *)((char *)v84 + v72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v62, 24);
        v42 = &v80;
        v43 = (char *)v84;
      }
    }
    v44 = &v43[24 * v85];
    v45 = *(_OWORD *)v42;
    *((_QWORD *)v44 + 2) = *((_QWORD *)v42 + 2);
    *(_OWORD *)v44 = v45;
    v46 = ++v85;
    if (v83[0])
    {
      v80 = 3;
      v81 = ")";
      v82 = 1;
      v47 = &v80;
      v48 = (char *)v84;
      if (v46 >= v86)
      {
        v65 = v46 + 1;
        v66 = (char *)v84 + 24 * v46 > (char *)&v80;
        if (v84 <= &v80 && v66)
        {
          v74 = (char *)&v80 - (_BYTE *)v84;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v65, 24);
          v48 = (char *)v84;
          v47 = (int *)((char *)v84 + v74);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v84, v87, v65, 24);
          v47 = &v80;
          v48 = (char *)v84;
        }
      }
      v49 = &v48[24 * v85];
      v50 = *(_OWORD *)v47;
      *((_QWORD *)v49 + 2) = *((_QWORD *)v47 + 2);
      *(_OWORD *)v49 = v50;
      ++v85;
    }
  }
  v51 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v83);
  if (v83[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v83);
  if (v92)
  {
    v52 = (_QWORD **)__p;
    if (__p)
    {
      v53 = v91;
      v54 = __p;
      if (v91 != __p)
      {
        do
          v53 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v53 - 1);
        while (v53 != v52);
        v54 = __p;
      }
      v91 = v52;
      operator delete(v54);
    }
    v55 = v88;
    if (v88)
    {
      v56 = v89;
      v57 = v88;
      if (v89 != v88)
      {
        do
        {
          v59 = (void *)*--v56;
          v58 = v59;
          *v56 = 0;
          if (v59)
            operator delete[](v58);
        }
        while (v56 != v55);
        v57 = v88;
      }
      v89 = v55;
      operator delete(v57);
    }
    if (v84 != v87)
      free(v84);
  }
LABEL_54:
  if (v93 != v95)
    free(v93);
  if (v96 != v98)
    free(v96);
  return v51;
}

uint64_t mlir::mps::serialization::WhileOp::verify(mlir::mps::serialization::WhileOp *this)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  mlir::GenericProgramPoint *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void ***v17;
  uint64_t v18;
  __int128 v19;
  _QWORD **v20;
  _QWORD **v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  mlir::GenericProgramPoint *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  const void ***v37;
  uint64_t v38;
  __int128 v39;
  _QWORD **v40;
  _QWORD **v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  const void **v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59[2];
  void *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  void *__p;
  _QWORD **v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)this;
  v3 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((v3 & 0x7FFFFF) != 0)
  {
    v4 = (_QWORD *)(((v2 + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v2 + 40));
    if ((_QWORD *)*v4 == v4)
      goto LABEL_14;
  }
  else
  {
    v4 = 0;
    if (!MEMORY[0])
    {
LABEL_14:
      v9 = 0;
      goto LABEL_15;
    }
  }
  v5 = v4[1];
  if (v5)
    v6 = v5 - 8;
  else
    v6 = 0;
  v7 = *(mlir::GenericProgramPoint **)(v6 + 32);
  if (v7 == (mlir::GenericProgramPoint *)(v6 + 32))
    goto LABEL_14;
  mlir::GenericProgramPoint::~GenericProgramPoint(v7);
  v9 = v8;
  if (v8
    && *(_UNKNOWN **)(*(_QWORD *)(v8 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ConditionOp,void>::id)
  {
    v10 = *(_QWORD *)this;
    v11 = *(unsigned int *)(*(_QWORD *)this + 44);
    if ((v11 & 0x7FFFFF) != 0)
    {
      v12 = ((v10 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *(unsigned int *)(v10 + 40);
      if (*(_QWORD *)(v12 + 24) == v12 + 24)
        goto LABEL_40;
    }
    else
    {
      v12 = 0;
      if (MEMORY[0x18] == 24)
        goto LABEL_40;
    }
    v28 = *(_QWORD *)(v12 + 32);
    if (v28)
      v29 = v28 - 8;
    else
      v29 = 0;
    v30 = *(mlir::GenericProgramPoint **)(v29 + 32);
    if (v30 != (mlir::GenericProgramPoint *)(v29 + 32))
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v30);
      v32 = v31;
      if (v31
        && *(_UNKNOWN **)(*(_QWORD *)(v31 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::YieldOp,void>::id)
      {
        return 1;
      }
      goto LABEL_41;
    }
LABEL_40:
    v32 = 0;
LABEL_41:
    v57 = 261;
    v54 = (const void **)"expects the 'after' region to terminate with 'mps.yield'";
    v55 = 56;
    mlir::Operation::emitOpError((uint64_t *)v10, &v54, (uint64_t)&v58);
    if (v32)
    {
      v34 = mlir::Diagnostic::attachNote(v59, *(_QWORD *)(v32 + 24), 1);
      v35 = *(_QWORD *)(v34 + 16);
      LODWORD(v54) = 3;
      v55 = (uint64_t)"terminator here";
      v56 = 15;
      v36 = *(unsigned int *)(v34 + 24);
      v37 = &v54;
      if (v36 >= *(_DWORD *)(v34 + 28))
      {
        v48 = v36 + 1;
        v49 = v35 + 24 * v36 > (unint64_t)&v54;
        if (v35 <= (unint64_t)&v54 && v49)
        {
          v52 = (char *)&v54 - v35;
          v53 = v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v34 + 16, (void *)(v34 + 32), v48, 24);
          v34 = v53;
          v35 = *(_QWORD *)(v53 + 16);
          v37 = (const void ***)&v52[v35];
        }
        else
        {
          v50 = v34;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v34 + 16, (void *)(v34 + 32), v48, 24);
          v34 = v50;
          v35 = *(_QWORD *)(v50 + 16);
          v37 = &v54;
        }
      }
      v38 = v35 + 24 * *(unsigned int *)(v34 + 24);
      v39 = *(_OWORD *)v37;
      *(_QWORD *)(v38 + 16) = v37[2];
      *(_OWORD *)v38 = v39;
      ++*(_DWORD *)(v34 + 24);
    }
    if (v58)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
    if (!v66)
      return 0;
    v40 = (_QWORD **)__p;
    if (__p)
    {
      v41 = v65;
      v42 = __p;
      if (v65 != __p)
      {
        do
          v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        v42 = __p;
      }
      v65 = v40;
      operator delete(v42);
    }
    v23 = v62;
    if (!v62)
      goto LABEL_60;
    v43 = v63;
    v25 = v62;
    if (v63 == v62)
      goto LABEL_59;
    do
    {
      v45 = (void *)*--v43;
      v44 = v45;
      *v43 = 0;
      if (v45)
        operator delete[](v44);
    }
    while (v43 != v23);
    goto LABEL_58;
  }
LABEL_15:
  v57 = 261;
  v54 = (const void **)"expects the 'before' region to terminate with 'mps.condition'";
  v55 = 61;
  mlir::Operation::emitOpError((uint64_t *)v2, &v54, (uint64_t)&v58);
  if (v9)
  {
    v13 = mlir::Diagnostic::attachNote(v59, *(_QWORD *)(v9 + 24), 1);
    v14 = v13 + 16;
    v15 = *(_QWORD *)(v13 + 16);
    LODWORD(v54) = 3;
    v55 = (uint64_t)"terminator here";
    v56 = 15;
    v16 = *(unsigned int *)(v13 + 24);
    v17 = &v54;
    if (v16 >= *(_DWORD *)(v13 + 28))
    {
      v46 = v16 + 1;
      v47 = v15 + 24 * v16 > (unint64_t)&v54;
      if (v15 <= (unint64_t)&v54 && v47)
      {
        v51 = (char *)&v54 - v15;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v13 + 32), v46, 24);
        v15 = *(_QWORD *)(v13 + 16);
        v17 = (const void ***)&v51[v15];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v14, (void *)(v13 + 32), v46, 24);
        v15 = *(_QWORD *)(v13 + 16);
        v17 = &v54;
      }
    }
    v18 = v15 + 24 * *(unsigned int *)(v13 + 24);
    v19 = *(_OWORD *)v17;
    *(_QWORD *)(v18 + 16) = v17[2];
    *(_OWORD *)v18 = v19;
    ++*(_DWORD *)(v13 + 24);
  }
  if (v58)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v58);
  if (!v66)
    return 0;
  v20 = (_QWORD **)__p;
  if (__p)
  {
    v21 = v65;
    v22 = __p;
    if (v65 != __p)
    {
      do
        v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
      while (v21 != v20);
      v22 = __p;
    }
    v65 = v20;
    operator delete(v22);
  }
  v23 = v62;
  if (v62)
  {
    v24 = v63;
    v25 = v62;
    if (v63 == v62)
      goto LABEL_59;
    do
    {
      v27 = (void *)*--v24;
      v26 = v27;
      *v24 = 0;
      if (v27)
        operator delete[](v26);
    }
    while (v24 != v23);
LABEL_58:
    v25 = v62;
LABEL_59:
    v63 = v23;
    operator delete(v25);
  }
LABEL_60:
  if (v60 != &v61)
    free(v60);
  return 0;
}

_QWORD *mlir::mps::serialization::ForOp::build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t), uint64_t a10)
{
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t Loc;
  _QWORD *result;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41[3];

  v41[2] = *MEMORY[0x1E0C80C00];
  v38 = a3;
  v39 = a4;
  v40 = a5;
  mlir::ValueRange::ValueRange(v41, (uint64_t)&v38, 3uLL);
  mlir::OperationState::addOperands(a2, v41[0], v41[1]);
  mlir::OperationState::addOperands(a2, a6, a7);
  v38 = a6;
  v39 = 0;
  if (a7)
  {
    v15 = 0;
    do
    {
      v17 = *(_QWORD *)(mlir::ValueRange::dereference_iterator(&v38, v15) + 8);
      v18 = *(unsigned int *)(a2 + 72);
      if (v18 >= *(unsigned int *)(a2 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v18 + 1, 8);
        v18 = *(unsigned int *)(a2 + 72);
      }
      *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v18) = v17 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(a2 + 72);
      v15 = ++v39;
    }
    while (v38 != a6 || v15 != a7);
  }
  v19 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF8;
  v20 = (uint64_t *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
  v21 = operator new(0x48uLL);
  *v21 = 0u;
  v21[1] = 0u;
  *((_QWORD *)v21 + 4) = v21 + 2;
  *((_QWORD *)v21 + 5) = v21 + 2;
  *((_QWORD *)v21 + 7) = 0;
  *((_QWORD *)v21 + 8) = 0;
  *((_QWORD *)v21 + 6) = 0;
  llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v20, (uint64_t)v21);
  v22 = *v20;
  *((_QWORD *)v21 + 2) = v20;
  *((_QWORD *)v21 + 1) = v22;
  v21 = (_OWORD *)((char *)v21 + 8);
  *(_QWORD *)(v22 + 8) = v21;
  *v20 = (uint64_t)v21;
  v23 = v20[1];
  if (v23)
    v24 = (_QWORD *)(v23 - 8);
  else
    v24 = 0;
  mlir::Block::addArgument(v24, v19, *(_QWORD *)a2);
  v38 = a6;
  v39 = 0;
  if (!a7)
  {
    if (!a9)
      return (_QWORD *)mlir::impl::ensureRegionTerminator(v20, a1, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::ForOp>::buildTerminator);
    goto LABEL_22;
  }
  v25 = 0;
  do
  {
    v36 = mlir::ValueRange::dereference_iterator(&v38, v25);
    v26 = *(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF8;
    Loc = mlir::Value::getLoc((mlir::Value *)&v36);
    result = mlir::Block::addArgument(v24, v26, Loc);
    v25 = ++v39;
  }
  while (v38 != a6 || v25 != a7);
  if (a9)
  {
LABEL_22:
    v30 = (_OWORD *)(a1 + 16);
    v35 = *(_OWORD *)(a1 + 16);
    v31 = v24[5];
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(a1 + 24) = v31;
    v32 = *(_QWORD *)a2;
    v33 = (uint64_t *)v24[6];
    v34 = *v33;
    mlir::ValueRange::ValueRange(v37, (uint64_t)(v33 + 1), ((uint64_t)(v24[7] - (_QWORD)v33) >> 3) - 1);
    result = (_QWORD *)a9(a10, a1, v32, v34, v37[0], v37[1]);
    if ((_QWORD)v35)
    {
      *v30 = v35;
    }
    else
    {
      *(_QWORD *)v30 = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return result;
}

uint64_t mlir::mps::serialization::ForOp::verify(uint64_t **this)
{
  uint64_t DefiningOp;
  uint64_t v3;
  BOOL v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _QWORD **v9;
  _QWORD **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD **v17;
  _QWORD **v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  void *v22;
  const void **v23[4];
  __int16 v24;
  unint64_t v25;
  void *v26[2];
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *__p;
  _QWORD **v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v23[0] = *(const void ***)((*this)[9] + 88);
  DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v23);
  if (!DefiningOp)
    goto LABEL_12;
  v3 = DefiningOp;
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((_QWORD *)(DefiningOp + 48)))
    goto LABEL_12;
  v26[0] = &v27;
  v26[1] = (void *)0x100000000;
  mlir::Operation::fold(v3, 0, 0, (uint64_t)v26);
  v4 = (*(_QWORD *)v26[0] & 0xFFFFFFFFFFFFFFF8) == 0
    || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26[0] & 0xFFFFFFFFFFFFFFF8) + 136) != (_QWORD)&mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (!v4)
    v25 = *(_QWORD *)v26[0] & 0xFFFFFFFFFFFFFFF8;
  if (v26[0] != &v27)
    free(v26[0]);
  if (!v4 && mlir::IntegerAttr::getInt((mlir::IntegerAttr *)&v25) <= 0)
  {
    v23[0] = (const void **)"constant step operand must be positive";
    v24 = 259;
    mlir::OpState::emitOpError(this, v23, (uint64_t)v26);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v34)
    {
      v9 = (_QWORD **)__p;
      if (__p)
      {
        v10 = v33;
        v11 = __p;
        if (v33 != __p)
        {
          do
            v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
          while (v10 != v9);
          v11 = __p;
        }
        v33 = v9;
        operator delete(v11);
      }
      v12 = v30;
      if (!v30)
        goto LABEL_48;
      v13 = v31;
      v14 = v30;
      if (v31 == v30)
        goto LABEL_47;
      do
      {
        v16 = (void *)*--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
          operator delete[](v15);
      }
      while (v13 != v12);
      goto LABEL_46;
    }
  }
  else
  {
LABEL_12:
    v5 = *this;
    v6 = *((_DWORD *)*this + 9);
    if (!v6)
      return 1;
    if ((*((_BYTE *)v5 + 46) & 0x80) != 0)
    {
      if (*((_DWORD *)v5 + 17) - 3 == v6)
        return 1;
    }
    else if (v6 == -3)
    {
      return 1;
    }
    v23[0] = (const void **)"mismatch in number of loop-carried values and defined values";
    v24 = 259;
    mlir::OpState::emitOpError(this, v23, (uint64_t)v26);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v26);
    if (v26[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v26);
    if (v34)
    {
      v17 = (_QWORD **)__p;
      if (__p)
      {
        v18 = v33;
        v19 = __p;
        if (v33 != __p)
        {
          do
            v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
          while (v18 != v17);
          v19 = __p;
        }
        v33 = v17;
        operator delete(v19);
      }
      v12 = v30;
      if (!v30)
        goto LABEL_48;
      v20 = v31;
      v14 = v30;
      if (v31 == v30)
      {
LABEL_47:
        v31 = v12;
        operator delete(v14);
LABEL_48:
        if (v28 != &v29)
          free(v28);
        return v7;
      }
      do
      {
        v22 = (void *)*--v20;
        v21 = v22;
        *v20 = 0;
        if (v22)
          operator delete[](v21);
      }
      while (v20 != v12);
LABEL_46:
      v14 = v30;
      goto LABEL_47;
    }
  }
  return v7;
}

uint64_t mlir::mps::serialization::ForOp::verifyRegions(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD **v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t NextResultAtOffset;
  unint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  _QWORD **v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  int *v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  int *v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  int *v45;
  char *v46;
  char *v47;
  __int128 v48;
  _QWORD **v49;
  _QWORD **v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  int *v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  int *v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  int *v65;
  char *v66;
  char *v67;
  __int128 v68;
  _QWORD **v69;
  _QWORD **v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  void *v74;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  BOOL v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  BOOL v85;
  int64_t v86;
  int64_t v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  const void **v92[4];
  __int16 v93;
  int v94;
  const char *v95;
  uint64_t v96;
  _QWORD v97[3];
  void *v98;
  unsigned int v99;
  unsigned int v100;
  _BYTE v101[96];
  void *v102;
  _QWORD *v103;
  void *__p;
  _QWORD **v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *(_QWORD *)((((unint64_t)&(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8]
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 7) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v3)
    v4 = v3 - 8;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 48);
  v6 = v2[9];
  if ((*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    v92[0] = (const void **)"expected induction variable to be same type as bounds and step";
    v93 = 259;
    mlir::OpState::emitOpError(this, v92, (uint64_t)v97);
    v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
    if (v97[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
    if (v106)
    {
      v8 = (_QWORD **)__p;
      if (__p)
      {
        v9 = v105;
        v10 = __p;
        if (v105 != __p)
        {
          do
            v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
          while (v9 != v8);
          v10 = __p;
        }
        v105 = v8;
        operator delete(v10);
      }
      v11 = v102;
      if (!v102)
        goto LABEL_89;
      v12 = v103;
      v13 = v102;
      if (v103 == v102)
      {
LABEL_88:
        v103 = v11;
        operator delete(v13);
LABEL_89:
        if (v98 != v101)
          free(v98);
        return v7;
      }
      do
      {
        v15 = (void *)*--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          operator delete[](v14);
      }
      while (v12 != v11);
LABEL_87:
      v13 = v102;
      goto LABEL_88;
    }
    return v7;
  }
  v16 = *((unsigned int *)v2 + 9);
  if (!(_DWORD)v16)
    return 1;
  v17 = *(_QWORD *)(v4 + 56) - v5;
  if (((unint64_t)v17 >> 3) - 1 == (_DWORD)v16)
  {
    v18 = *((unsigned int *)v2 + 17);
    v7 = 1;
    if ((_DWORD)v18 == 3 || v17 == 8)
      return v7;
    v19 = 0;
    v20 = (uint64_t)(v2 - 2);
    v21 = v5 + 8;
    v22 = 8 * (v17 >> 3) - 16;
    v23 = (uint64_t *)(v6 + 120);
    v24 = v18 - 4;
    while (v16 != v19)
    {
      v25 = *v23;
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v20, v19);
      v27 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (v27 != (*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v93 = 257;
        mlir::OpState::emitOpError(this, v92, (uint64_t)v97);
        if (v97[0])
        {
          v94 = 3;
          v95 = "types mismatch between ";
          v96 = 23;
          v35 = &v94;
          v36 = (char *)v98;
          if (v99 >= v100)
          {
            v76 = v99 + 1;
            if (v98 <= &v94 && (char *)v98 + 24 * v99 > (char *)&v94)
            {
              v86 = (char *)&v94 - (_BYTE *)v98;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v76, 24);
              v36 = (char *)v98;
              v35 = (int *)((char *)v98 + v86);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v76, 24);
              v35 = &v94;
              v36 = (char *)v98;
            }
          }
          v37 = &v36[24 * v99];
          v38 = *(_OWORD *)v35;
          *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
          *(_OWORD *)v37 = v38;
          v39 = ++v99;
          if (v97[0])
          {
            v94 = 5;
            v95 = (const char *)v19;
            v40 = &v94;
            v41 = (char *)v98;
            if (v39 >= v100)
            {
              v78 = v39 + 1;
              v79 = (char *)v98 + 24 * v39 > (char *)&v94;
              if (v98 <= &v94 && v79)
              {
                v88 = (char *)&v94 - (_BYTE *)v98;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v78, 24);
                v41 = (char *)v98;
                v40 = (int *)((char *)v98 + v88);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v78, 24);
                v40 = &v94;
                v41 = (char *)v98;
              }
            }
            v42 = &v41[24 * v99];
            v43 = *(_OWORD *)v40;
            *((_QWORD *)v42 + 2) = *((_QWORD *)v40 + 2);
            *(_OWORD *)v42 = v43;
            v44 = ++v99;
            if (v97[0])
            {
              v94 = 3;
              v95 = "th iter operand and defined value";
              v96 = 33;
              v45 = &v94;
              v46 = (char *)v98;
              if (v44 >= v100)
              {
                v82 = v44 + 1;
                v83 = (char *)v98 + 24 * v44 > (char *)&v94;
                if (v98 <= &v94 && v83)
                {
                  v90 = (char *)&v94 - (_BYTE *)v98;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v82, 24);
                  v46 = (char *)v98;
                  v45 = (int *)((char *)v98 + v90);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v82, 24);
                  v45 = &v94;
                  v46 = (char *)v98;
                }
              }
              v47 = &v46[24 * v99];
              v48 = *(_OWORD *)v45;
              *((_QWORD *)v47 + 2) = *((_QWORD *)v45 + 2);
              *(_OWORD *)v47 = v48;
              ++v99;
            }
          }
        }
        v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
        if (v97[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
        if (!v106)
          return v7;
        v49 = (_QWORD **)__p;
        if (__p)
        {
          v50 = v105;
          v51 = __p;
          if (v105 != __p)
          {
            do
              v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
            while (v50 != v49);
            v51 = __p;
          }
          v105 = v49;
          operator delete(v51);
        }
        v11 = v102;
        if (!v102)
          goto LABEL_89;
        v52 = v103;
        v13 = v102;
        if (v103 == v102)
          goto LABEL_88;
        do
        {
          v54 = (void *)*--v52;
          v53 = v54;
          *v52 = 0;
          if (v54)
            operator delete[](v53);
        }
        while (v52 != v11);
        goto LABEL_87;
      }
      if ((*(_QWORD *)(*(_QWORD *)(v21 + 8 * v19) + 8) & 0xFFFFFFFFFFFFFFF8) != v27)
      {
        v93 = 257;
        mlir::OpState::emitOpError(this, v92, (uint64_t)v97);
        if (v97[0])
        {
          v94 = 3;
          v95 = "types mismatch between ";
          v96 = 23;
          v55 = &v94;
          v56 = (char *)v98;
          if (v99 >= v100)
          {
            v77 = v99 + 1;
            if (v98 <= &v94 && (char *)v98 + 24 * v99 > (char *)&v94)
            {
              v87 = (char *)&v94 - (_BYTE *)v98;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v77, 24);
              v56 = (char *)v98;
              v55 = (int *)((char *)v98 + v87);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v77, 24);
              v55 = &v94;
              v56 = (char *)v98;
            }
          }
          v57 = &v56[24 * v99];
          v58 = *(_OWORD *)v55;
          *((_QWORD *)v57 + 2) = *((_QWORD *)v55 + 2);
          *(_OWORD *)v57 = v58;
          v59 = ++v99;
          if (v97[0])
          {
            v94 = 5;
            v95 = (const char *)v19;
            v60 = &v94;
            v61 = (char *)v98;
            if (v59 >= v100)
            {
              v80 = v59 + 1;
              v81 = (char *)v98 + 24 * v59 > (char *)&v94;
              if (v98 <= &v94 && v81)
              {
                v89 = (char *)&v94 - (_BYTE *)v98;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v80, 24);
                v61 = (char *)v98;
                v60 = (int *)((char *)v98 + v89);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v80, 24);
                v60 = &v94;
                v61 = (char *)v98;
              }
            }
            v62 = &v61[24 * v99];
            v63 = *(_OWORD *)v60;
            *((_QWORD *)v62 + 2) = *((_QWORD *)v60 + 2);
            *(_OWORD *)v62 = v63;
            v64 = ++v99;
            if (v97[0])
            {
              v94 = 3;
              v95 = "th iter region arg and defined value";
              v96 = 36;
              v65 = &v94;
              v66 = (char *)v98;
              if (v64 >= v100)
              {
                v84 = v64 + 1;
                v85 = (char *)v98 + 24 * v64 > (char *)&v94;
                if (v98 <= &v94 && v85)
                {
                  v91 = (char *)&v94 - (_BYTE *)v98;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v84, 24);
                  v66 = (char *)v98;
                  v65 = (int *)((char *)v98 + v91);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, v101, v84, 24);
                  v65 = &v94;
                  v66 = (char *)v98;
                }
              }
              v67 = &v66[24 * v99];
              v68 = *(_OWORD *)v65;
              *((_QWORD *)v67 + 2) = *((_QWORD *)v65 + 2);
              *(_OWORD *)v67 = v68;
              ++v99;
            }
          }
        }
        v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
        if (v97[0])
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
        if (!v106)
          return v7;
        v69 = (_QWORD **)__p;
        if (__p)
        {
          v70 = v105;
          v71 = __p;
          if (v105 != __p)
          {
            do
              v70 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v70 - 1);
            while (v70 != v69);
            v71 = __p;
          }
          v105 = v69;
          operator delete(v71);
        }
        v11 = v102;
        if (!v102)
          goto LABEL_89;
        v72 = v103;
        v13 = v102;
        if (v103 == v102)
          goto LABEL_88;
        do
        {
          v74 = (void *)*--v72;
          v73 = v74;
          *v72 = 0;
          if (v74)
            operator delete[](v73);
        }
        while (v72 != v11);
        goto LABEL_87;
      }
      v7 = 1;
      if (v24 != v19)
      {
        ++v19;
        v28 = v22;
        v22 -= 8;
        v23 += 4;
        if (v28)
          continue;
      }
      return v7;
    }
    return 1;
  }
  v92[0] = (const void **)"mismatch in number of basic block args and defined values";
  v93 = 259;
  mlir::OpState::emitOpError(this, v92, (uint64_t)v97);
  v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v97);
  if (v97[0])
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v97);
  if (v106)
  {
    v29 = (_QWORD **)__p;
    if (__p)
    {
      v30 = v105;
      v31 = __p;
      if (v105 != __p)
      {
        do
          v30 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v30 - 1);
        while (v30 != v29);
        v31 = __p;
      }
      v105 = v29;
      operator delete(v31);
    }
    v11 = v102;
    if (!v102)
      goto LABEL_89;
    v32 = v103;
    v13 = v102;
    if (v103 == v102)
      goto LABEL_88;
    do
    {
      v34 = (void *)*--v32;
      v33 = v34;
      *v32 = 0;
      if (v34)
        operator delete[](v33);
    }
    while (v32 != v11);
    goto LABEL_87;
  }
  return v7;
}

uint64_t mlir::mps::serialization::ForOp::print(mlir::Operation **this, mlir::OpAsmPrinter *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _DWORD *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  mlir::Operation *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  mlir::Operation *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  _BYTE *v37;
  mlir::Operation *v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL8 v41;
  mlir::Operation *v42;
  mlir::ArrayAttr *v43;
  uint64_t Value;
  uint64_t v45;
  uint64_t v47[2];
  uint64_t v48[4];
  _QWORD v49[2];
  unint64_t v50[3];

  v50[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, " ", 1uLL);
  }
  else
  {
    *v5 = 32;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = *(_QWORD *)((((unint64_t)*this
                   + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)*this + 10)
                 + 8);
  if (v6)
    v7 = v6 - 8;
  else
    v7 = 0;
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, **(_QWORD **)(v7 + 48));
  v8 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 32;
    *(_WORD *)v9 = 15648;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 24));
  v10 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v11 = (_DWORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 3uLL)
  {
    *v11 = 544175136;
    *((_QWORD *)v10 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v10, " to ", 4uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 56));
  v12 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 5)
  {
    *(_WORD *)(v13 + 4) = 8304;
    *(_DWORD *)v13 = 1702130464;
    *((_QWORD *)v12 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v12, " step ", 6uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, _QWORD))(*(_QWORD *)a2 + 160))(a2, *(_QWORD *)(*((_QWORD *)*this + 9) + 88));
  v14 = *this;
  v15 = *((unsigned int *)*this + 11);
  v16 = *(_QWORD *)((((unint64_t)*this + 16 * ((v15 >> 23) & 1) + ((v15 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v17 + 48);
  v19 = ((*(_QWORD *)(v17 + 56) - v18) >> 3) - 1;
  v20 = (_QWORD *)(v18 + 8);
  if ((v15 & 0x800000) != 0)
  {
    v21 = *((_QWORD *)v14 + 9);
    v22 = *((unsigned int *)v14 + 17) - 3;
  }
  else
  {
    v21 = 0;
    v22 = -3;
  }
  mlir::ValueRange::ValueRange(v50, v21 + 96, v22);
  printInitializationList(a2, v20, v19, v50[0], v50[1], " iter_args", 0xAuLL);
  if ((*((_BYTE *)*this + 46) & 0x80) == 0 || *((_DWORD *)*this + 17) != 3)
  {
    v23 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v24 = *((_QWORD *)v23 + 4);
    if ((unint64_t)(*((_QWORD *)v23 + 3) - v24) > 4)
    {
      *(_BYTE *)(v24 + 4) = 40;
      *(_DWORD *)v24 = 540945696;
      *((_QWORD *)v23 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v23, " -> (", 5uLL);
    }
    v25 = *this;
    if ((*((_BYTE *)*this + 46) & 0x80) != 0)
    {
      v26 = *((_QWORD *)v25 + 9);
      v27 = *((unsigned int *)v25 + 17) - 3;
    }
    else
    {
      v26 = 0;
      v27 = -3;
    }
    v47[0] = v26 + 96;
    v47[1] = v27;
    mlir::OperandRange::getTypes(v47, v48);
    v49[0] = ", ";
    v49[1] = 2;
    llvm::interleave<mlir::ValueTypeIterator<llvm::detail::indexed_accessor_range_base<mlir::OperandRange,mlir::OpOperand *,mlir::Value,mlir::Value,mlir::Value>::iterator>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},void llvm::interleave<mlir::ValueTypeRange<mlir::OperandRange>,void llvm::interleaveComma<mlir::ValueTypeRange<mlir::OperandRange>,mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &)::{lambda(mlir::Type const&)#1},mlir::OpAsmPrinter,mlir::Type>(mlir::ValueTypeRange<mlir::OperandRange> const&,mlir::OpAsmPrinter &,mlir::OpAsmPrinter,llvm::StringRef const&)::{lambda(void)#1},void>(v48[0], v48[1], v48[2], v48[3], (uint64_t)a2, (uint64_t)a2, (uint64_t)v49);
    v28 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
    v29 = (_BYTE *)*((_QWORD *)v28 + 4);
    if ((unint64_t)v29 >= *((_QWORD *)v28 + 3))
    {
      llvm::raw_ostream::write(v28, 41);
    }
    else
    {
      *((_QWORD *)v28 + 4) = v29 + 1;
      *v29 = 41;
    }
  }
  v30 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v31 = (_BYTE *)*((_QWORD *)v30 + 4);
  if ((unint64_t)v31 >= *((_QWORD *)v30 + 3))
  {
    llvm::raw_ostream::write(v30, 32);
  }
  else
  {
    *((_QWORD *)v30 + 4) = v31 + 1;
    *v31 = 32;
  }
  v32 = *(_QWORD *)((((unint64_t)*this
                    + 16 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)*this + 10)
                  + 8);
  if (v32)
    v33 = v32 - 8;
  else
    v33 = 0;
  v48[0] = *(_QWORD *)(**(_QWORD **)(v33 + 48) + 8) & 0xFFFFFFFFFFFFFFF8;
  if (mlir::Type::isIndex((mlir::Type *)v48))
  {
LABEL_43:
    v38 = *this;
    v39 = *((unsigned int *)*this + 11);
    if ((v39 & 0x7FFFFF) != 0)
      goto LABEL_44;
LABEL_51:
    v40 = 0;
    if ((v39 & 0x800000) != 0)
      goto LABEL_45;
    goto LABEL_52;
  }
  v34 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v35 = *((_QWORD *)v34 + 4);
  if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 2)
  {
    *(_BYTE *)(v35 + 2) = 32;
    *(_WORD *)v35 = 14880;
    *((_QWORD *)v34 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v34, " : ", 3uLL);
  }
  (*(void (**)(mlir::OpAsmPrinter *, uint64_t))(*(_QWORD *)a2 + 32))(a2, v48[0]);
  v36 = (llvm::raw_ostream *)(*(uint64_t (**)(mlir::OpAsmPrinter *))(*(_QWORD *)a2 + 16))(a2);
  v37 = (_BYTE *)*((_QWORD *)v36 + 4);
  if ((unint64_t)v37 < *((_QWORD *)v36 + 3))
  {
    *((_QWORD *)v36 + 4) = v37 + 1;
    *v37 = 32;
    goto LABEL_43;
  }
  llvm::raw_ostream::write(v36, 32);
  v38 = *this;
  v39 = *((unsigned int *)*this + 11);
  if ((v39 & 0x7FFFFF) == 0)
    goto LABEL_51;
LABEL_44:
  v40 = (((unint64_t)v38 + 16 * ((v39 >> 23) & 1) + ((v39 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *((unsigned int *)v38 + 10);
  if ((v39 & 0x800000) != 0)
  {
LABEL_45:
    v41 = *((_DWORD *)v38 + 17) > 3u;
    goto LABEL_46;
  }
LABEL_52:
  v41 = 0;
LABEL_46:
  (*(void (**)(mlir::OpAsmPrinter *, unint64_t, _QWORD, _BOOL8, _QWORD))(*(_QWORD *)a2 + 224))(a2, v40, 0, v41, 0);
  v42 = *this;
  if (*((_BYTE *)*this + 47))
  {
    v48[0] = mlir::Operation::getAttrDictionary(v42);
    v43 = (mlir::ArrayAttr *)v48;
  }
  else
  {
    v43 = (mlir::Operation *)((char *)v42 + 56);
  }
  Value = mlir::ArrayAttr::getValue(v43);
  return (*(uint64_t (**)(mlir::OpAsmPrinter *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, Value, v45, 0, 0);
}

uint64_t mlir::mps::serialization::ForOp::parse(uint64_t a1, uint64_t a2)
{
  mlir::IndexType **v4;
  __n128 v5;
  char v6;
  mlir::MLIRContext *v7;
  uint64_t IndexType;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  const char *v22;
  __int16 v23;
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[6];
  char v28;
  char v29;
  uint64_t v30;
  void *v31[24];
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  void *v35;
  uint64_t v36;
  _BYTE v37[16];
  __int16 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v30 = 0;
  memset(v27, 0, 24);
  v29 = 0;
  v27[4] = 0;
  v27[5] = 0;
  v28 = 0;
  memset(v26, 0, 24);
  memset(v25, 0, 24);
  memset(v24, 0, 24);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v27, 1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1))
    return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v26, 1))
    return 0;
  v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "to", 2, &v35))return 0;
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v25, 1))
    return 0;
  v38 = 257;
  if (!(*(unsigned __int8 (**)(uint64_t, const char *, uint64_t, void **))(*(_QWORD *)a1 + 368))(a1, "step", 4, &v35)|| !(*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v24, 1))
  {
    return 0;
  }
  v35 = v37;
  v36 = 0x400000000;
  v32 = v34;
  v33 = 0x400000000;
  v5 = llvm::SmallVectorTemplateBase<mlir::OpAsmParser::Argument,true>::push_back((uint64_t)&v35, (unint64_t)v27);
  v6 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)a1 + 376))(a1, "iter_args", 9, v5);
  if (v6
    && (!mlir::OpAsmParser::parseAssignmentList(a1)
     || !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 528))(a1, a2 + 64)))
  {
    goto LABEL_34;
  }
  if (*(unsigned int *)(a2 + 72) + 1 == v36)
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    {
      if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 504))(a1, &v30))
        goto LABEL_34;
      IndexType = v30;
    }
    else
    {
      IndexType = mlir::Builder::getIndexType(v4, v7);
      v30 = IndexType;
    }
    *((_QWORD *)v35 + 4) = IndexType;
    if ((*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 696))(a1, v26)
      && (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v25, v30, a2 + 16)&& (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v24, v30, a2 + 16))
    {
      if (v6)
      {
        if ((_DWORD)v36 != 1)
        {
          if ((_DWORD)v33)
          {
            v12 = *(unsigned int *)(a2 + 72);
            if ((_DWORD)v12)
            {
              v13 = 0;
              v14 = (char *)v32;
              v15 = *(_QWORD **)(a2 + 64);
              v20 = ((unint64_t)v36 << 6) - 128;
              v21 = (char *)v35 + 96;
              v19 = (v12 << 6) - 64;
              v16 = ((unint64_t)v33 << 6) - 64;
              while (1)
              {
                *(_QWORD *)&v21[v13] = *v15;
                if (!(*(unsigned __int8 (**)(uint64_t, char *))(*(_QWORD *)a1 + 696))(a1, v14))
                  goto LABEL_34;
                if (v20 != v13 && v16 != v13)
                {
                  v14 += 32;
                  ++v15;
                  v17 = v19 == v13;
                  v13 += 64;
                  if (!v17)
                    continue;
                }
                break;
              }
            }
          }
        }
      }
      v18 = (_QWORD *)mlir::OperationState::addRegion((mlir::OperationState *)a2);
      if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, void *, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v18, v35, v36, 0))
      {
        mlir::impl::ensureRegionTerminator(v18, v4, *(_QWORD *)a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>::callback_fn<mlir::Operation * ()(mlir::OpBuilder &,mlir::Location)>, (uint64_t)mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::ForOp>::buildTerminator);
        v9 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112) != 0;
        goto LABEL_35;
      }
    }
LABEL_34:
    v9 = 0;
    goto LABEL_35;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v22 = "mismatch in number of loop-carried values and defined values";
  v23 = 259;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const char **))(*(_QWORD *)a1 + 24))(v31, a1, v11, &v22);
  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)v31);
LABEL_35:
  if (v32 != v34)
    free(v32);
  if (v35 != v37)
    free(v35);
  return v9;
}

uint64_t mlir::mps::serialization::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mps.condition", 13, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::mps::serialization::ConditionOp::verifyInvariantsImpl(uint64_t **this)
{
  return mlir::complex::__mlir_ods_local_type_constraint_ComplexOps3(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0) != 0;
}

BOOL mlir::mps::serialization::ConditionOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  mlir::Builder *v5;
  uint64_t IntegerType;
  uint64_t v7;
  _BOOL8 v8;
  void *v10[2];
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[128];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  memset(v15, 0, 24);
  v12 = v14;
  v13 = 0x400000000;
  v10[0] = &v11;
  v10[1] = (void *)0x100000000;
  v8 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v15, 1))
    && (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1)
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
    && (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        (*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v12, 0, 1, 0xFFFFFFFFLL))&& (!(_DWORD)v13|| (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)&& mlir::AsmParser::parseTypeList(a1, (uint64_t)v10))&& (v5 = (mlir::Builder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1), IntegerType = mlir::Builder::getIntegerType(v5, 1u), v7 = a2 + 16, (*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v15, IntegerType, v7))&& mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v12,
                          (uint64_t)v10,
                          v4,
                          v7) != 0;
  if (v10[0] != &v11)
    free(v10[0]);
  if (v12 != v14)
    free(v12);
  return v8;
}

uint64_t mlir::mps::serialization::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mps.for", 7, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::ForOp::getInitArgs(mlir::mps::serialization::ForOp *this)
{
  if ((*(_BYTE *)(*(_QWORD *)this + 46) & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)this + 72) + 96;
  else
    return 96;
}

BOOL mlir::mps::serialization::ForOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  if (!mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 0)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 56) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 1u)|| !mlir::scf::__mlir_ods_local_type_constraint_SCFOps2(*this, *(_QWORD *)(*(_QWORD *)((*this)[9] + 88) + 8) & 0xFFFFFFFFFFFFFFF8, (const void **)"operand", (const void **)7, 2u))
  {
    return 0;
  }
  v2 = *this;
  v3 = *((unsigned int *)*this + 9);
  if (*((_DWORD *)*this + 9))
    v4 = (uint64_t)(*this - 2);
  else
    v4 = 0;
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
      mlir::detail::OpResultImpl::getNextResultAtOffset(v4, i);
    v2 = *this;
  }
  return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(v2, (((unint64_t)&v2[2 * (((unint64_t)*((unsigned int *)v2 + 11) >> 23) & 1) + 8]+ (((unint64_t)*((unsigned int *)v2 + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)v2 + 10), (uint64_t)"region", 6, 0) != 0;
}

uint64_t mlir::mps::serialization::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mps.if", 6, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mps.extract", 11, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::ExtractOp::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v17[0] = a4;
  v17[1] = a5;
  v11 = *(_DWORD *)(a11 + 8);
  if (v11 == 1)
    goto LABEL_8;
  if (!v11)
  {
    if (*(_DWORD *)(a11 + 12))
    {
      v12 = 0;
LABEL_6:
      bzero((void *)(*(_QWORD *)a11 + 8 * v12), 8 - 8 * v12);
      goto LABEL_7;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod(a11, (void *)(a11 + 16), 1uLL, 8);
    v12 = *(_DWORD *)(a11 + 8);
    if (v12 != 1)
      goto LABEL_6;
  }
LABEL_7:
  *(_DWORD *)(a11 + 8) = 1;
LABEL_8:
  v13 = (_QWORD *)(*(_QWORD *)(mlir::ValueRange::dereference_iterator(v17, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v13)
    v14 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v13 + 8);
  else
    v14 = 0;
  v16[0] = v13;
  v16[1] = v14;
  **(_QWORD **)a11 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v16);
  return 1;
}

uint64_t mlir::mps::serialization::ExtractOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  int *v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char v23;
  _QWORD **v24;
  _QWORD **v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t *v39;
  char *v40;
  int *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  int *v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  int *v51;
  char *v52;
  __int128 v53;
  int *v54;
  char *v55;
  char *v56;
  __int128 v57;
  char v58;
  _QWORD **v59;
  _QWORD **v60;
  void *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  BOOL v71;
  unint64_t v72;
  int64_t v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t OperandRange;
  uint64_t v84;
  _QWORD **v85;
  _QWORD **v86;
  void *v87;
  _QWORD *v88;
  _QWORD *v89;
  void *v90;
  void *v91;
  void *v92;
  unint64_t v94;
  unint64_t v95;
  BOOL v96;
  unint64_t v97;
  BOOL v98;
  unint64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  const void **v104;
  uint64_t v105;
  __int16 v106;
  int v107;
  const char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  unsigned int v113;
  unsigned int v114;
  _BYTE v115[96];
  void *v116;
  _QWORD *v117;
  void *__p;
  _QWORD **v119;
  char v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  v3 = *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)v3;
  if (*(_UNKNOWN **)(*(_QWORD *)v3 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v110 = *(_QWORD *)(*(_QWORD *)(v2[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
    v111 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(v4 + 8);
    mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v110);
  }
  else
  {
    v106 = 261;
    v104 = (const void **)"operand";
    v105 = 7;
    mlir::Operation::emitOpError(v2, &v104, (uint64_t)&v110);
    if (v110)
    {
      v107 = 3;
      v108 = " #";
      v109 = 2;
      v5 = &v107;
      v6 = (char *)v112;
      if (v113 >= v114)
      {
        v94 = v113 + 1;
        if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
        {
          v100 = (char *)&v107 - (_BYTE *)v112;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          v6 = (char *)v112;
          v5 = (int *)((char *)v112 + v100);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v94, 24);
          v5 = &v107;
          v6 = (char *)v112;
        }
      }
      v7 = &v6[24 * v113];
      v8 = *(_OWORD *)v5;
      *((_QWORD *)v7 + 2) = *((_QWORD *)v5 + 2);
      *(_OWORD *)v7 = v8;
      v9 = ++v113;
      if (v110)
      {
        v107 = 5;
        v108 = 0;
        v10 = &v107;
        v11 = (char *)v112;
        if (v9 >= v114)
        {
          v95 = v9 + 1;
          v96 = (char *)v112 + 24 * v9 > (char *)&v107;
          if (v112 <= &v107 && v96)
          {
            v101 = (char *)&v107 - (_BYTE *)v112;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
            v11 = (char *)v112;
            v10 = (int *)((char *)v112 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v95, 24);
            v10 = &v107;
            v11 = (char *)v112;
          }
        }
        v12 = &v11[24 * v113];
        v13 = *(_OWORD *)v10;
        *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v12 = v13;
        v14 = ++v113;
        if (v110)
        {
          v107 = 3;
          v108 = " must be ranked tensor of any type values, but got ";
          v109 = 51;
          v15 = &v107;
          v16 = (char *)v112;
          if (v14 >= v114)
          {
            v97 = v14 + 1;
            v98 = (char *)v112 + 24 * v14 > (char *)&v107;
            if (v112 <= &v107 && v98)
            {
              v102 = (char *)&v107 - (_BYTE *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
              v16 = (char *)v112;
              v15 = (int *)((char *)v112 + v102);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v97, 24);
              v15 = &v107;
              v16 = (char *)v112;
            }
          }
          v17 = &v16[24 * v113];
          v18 = *(_OWORD *)v15;
          *((_QWORD *)v17 + 2) = *((_QWORD *)v15 + 2);
          *(_OWORD *)v17 = v18;
          ++v113;
          if (v110)
          {
            v19 = &v107;
            mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v3);
            v20 = (char *)v112;
            if (v113 >= v114)
            {
              v99 = v113 + 1;
              if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
              {
                v103 = (char *)&v107 - (_BYTE *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v99, 24);
                v20 = (char *)v112;
                v19 = (int *)((char *)v112 + v103);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v99, 24);
                v19 = &v107;
                v20 = (char *)v112;
              }
            }
            v21 = &v20[24 * v113];
            v22 = *(_OWORD *)v19;
            *((_QWORD *)v21 + 2) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v21 = v22;
            ++v113;
          }
        }
      }
    }
    v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
    if (v110)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
    if (v120)
    {
      v24 = (_QWORD **)__p;
      if (__p)
      {
        v25 = v119;
        v26 = __p;
        if (v119 != __p)
        {
          do
            v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
          while (v25 != v24);
          v26 = __p;
        }
        v119 = v24;
        operator delete(v26);
      }
      v27 = v116;
      if (v116)
      {
        v28 = v117;
        v29 = v116;
        if (v117 != v116)
        {
          do
          {
            v31 = (void *)*--v28;
            v30 = v31;
            *v28 = 0;
            if (v31)
              operator delete[](v30);
          }
          while (v28 != v27);
          v29 = v116;
        }
        v117 = v27;
        operator delete(v29);
      }
      if (v112 != v115)
        free(v112);
    }
    if (!v23)
      return 0;
  }
  v32 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) == 0)
  {
    v34 = -1;
    v35 = 32;
LABEL_34:
    v36 = 0;
    v37 = 1;
    while (1)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(v35 + 32 * v36 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
      if (*(_UNKNOWN **)(*(_QWORD *)v38 + 136) != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
      {
        v39 = *this;
        v106 = 261;
        v104 = (const void **)"operand";
        v105 = 7;
        mlir::Operation::emitOpError(v39, &v104, (uint64_t)&v110);
        if (v110)
        {
          v107 = 3;
          v108 = " #";
          v109 = 2;
          v40 = (char *)v112;
          if (v113 >= v114)
          {
            v67 = v113 + 1;
            if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
            {
              v73 = (char *)&v107 - (_BYTE *)v112;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v67, 24);
              v40 = (char *)v112;
              v41 = (int *)((char *)v112 + v73);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v67, 24);
              v41 = &v107;
              v40 = (char *)v112;
            }
          }
          else
          {
            v41 = &v107;
          }
          v42 = &v40[24 * v113];
          v43 = *(_OWORD *)v41;
          *((_QWORD *)v42 + 2) = *((_QWORD *)v41 + 2);
          *(_OWORD *)v42 = v43;
          v44 = ++v113;
          if (v110)
          {
            v107 = 5;
            v108 = (const char *)v37;
            v45 = (char *)v112;
            if (v44 >= v114)
            {
              v68 = v44 + 1;
              v69 = (char *)v112 + 24 * v44 > (char *)&v107;
              if (v112 <= &v107 && v69)
              {
                v74 = (char *)&v107 - (_BYTE *)v112;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v68, 24);
                v45 = (char *)v112;
                v46 = (int *)((char *)v112 + v74);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v68, 24);
                v46 = &v107;
                v45 = (char *)v112;
              }
            }
            else
            {
              v46 = &v107;
            }
            v47 = &v45[24 * v113];
            v48 = *(_OWORD *)v46;
            *((_QWORD *)v47 + 2) = *((_QWORD *)v46 + 2);
            *(_OWORD *)v47 = v48;
            v49 = ++v113;
            if (v110)
            {
              v107 = 3;
              v108 = " must be variadic of index, but got ";
              v109 = 36;
              v50 = (char *)v112;
              if (v49 >= v114)
              {
                v70 = v49 + 1;
                v71 = (char *)v112 + 24 * v49 > (char *)&v107;
                if (v112 <= &v107 && v71)
                {
                  v75 = (char *)&v107 - (_BYTE *)v112;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v70, 24);
                  v50 = (char *)v112;
                  v51 = (int *)((char *)v112 + v75);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v70, 24);
                  v51 = &v107;
                  v50 = (char *)v112;
                }
              }
              else
              {
                v51 = &v107;
              }
              v52 = &v50[24 * v113];
              v53 = *(_OWORD *)v51;
              *((_QWORD *)v52 + 2) = *((_QWORD *)v51 + 2);
              *(_OWORD *)v52 = v53;
              ++v113;
              if (v110)
              {
                v54 = &v107;
                mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v107, v38);
                v55 = (char *)v112;
                if (v113 >= v114)
                {
                  v72 = v113 + 1;
                  if (v112 <= &v107 && (char *)v112 + 24 * v113 > (char *)&v107)
                  {
                    v76 = (char *)&v107 - (_BYTE *)v112;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v72, 24);
                    v55 = (char *)v112;
                    v54 = (int *)((char *)v112 + v76);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, v115, v72, 24);
                    v54 = &v107;
                    v55 = (char *)v112;
                  }
                }
                v56 = &v55[24 * v113];
                v57 = *(_OWORD *)v54;
                *((_QWORD *)v56 + 2) = *((_QWORD *)v54 + 2);
                *(_OWORD *)v56 = v57;
                ++v113;
              }
            }
          }
        }
        v58 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
        if (v110)
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
        if (v120)
        {
          v59 = (_QWORD **)__p;
          if (__p)
          {
            v60 = v119;
            v61 = __p;
            if (v119 != __p)
            {
              do
                v60 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v60 - 1);
              while (v60 != v59);
              v61 = __p;
            }
            v119 = v59;
            operator delete(v61);
          }
          v62 = v116;
          if (v116)
          {
            v63 = v117;
            v64 = v116;
            if (v117 != v116)
            {
              do
              {
                v66 = (void *)*--v63;
                v65 = v66;
                *v63 = 0;
                if (v66)
                  operator delete[](v65);
              }
              while (v63 != v62);
              v64 = v116;
            }
            v117 = v62;
            operator delete(v64);
          }
          if (v112 != v115)
            free(v112);
        }
        if (!v58)
          return 0;
      }
      ++v37;
      if (++v36 == v34)
      {
        v32 = *this;
        goto LABEL_86;
      }
    }
  }
  v33 = *((unsigned int *)v32 + 17);
  v34 = v33 - 1;
  if (v33 != 1)
  {
    v35 = v32[9] + 32;
    goto LABEL_34;
  }
LABEL_86:
  v78 = *((_DWORD *)v32 + 9);
  v79 = (uint64_t)(v32 - 2);
  if (v78)
    v80 = v79;
  else
    v80 = 0;
  mlir::detail::OpResultImpl::getNextResultAtOffset(v80, 0);
  v81 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)((*this)[9] + 24) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v81)
    v82 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v81 + 8);
  else
    v82 = 0;
  v110 = (unint64_t)v81;
  v111 = v82;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v110);
  if (*((_DWORD *)*this + 9))
    v84 = (uint64_t)(*this - 2);
  else
    v84 = 0;
  if (OperandRange == (*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v84, 0) + 8) & 0xFFFFFFFFFFFFFFF8))
    return 1;
  v104 = (const void **)"failed to verify that result type matches element type of tensor";
  v106 = 259;
  mlir::OpState::emitOpError(this, &v104, (uint64_t)&v110);
  v77 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v110);
  if (v110)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v110);
  if (v120)
  {
    v85 = (_QWORD **)__p;
    if (__p)
    {
      v86 = v119;
      v87 = __p;
      if (v119 != __p)
      {
        do
          v86 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v86 - 1);
        while (v86 != v85);
        v87 = __p;
      }
      v119 = v85;
      operator delete(v87);
    }
    v88 = v116;
    if (v116)
    {
      v89 = v117;
      v90 = v116;
      if (v117 != v116)
      {
        do
        {
          v92 = (void *)*--v89;
          v91 = v92;
          *v89 = 0;
          if (v92)
            operator delete[](v91);
        }
        while (v89 != v88);
        v90 = v116;
      }
      v117 = v88;
      operator delete(v90);
    }
    if (v112 != v115)
      free(v112);
  }
  return v77;
}

uint64_t mlir::mps::serialization::ExtractOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  mlir::IndexType **v12;
  mlir::MLIRContext *v13;
  uint64_t IndexType;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25[2];
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE v31[128];
  _QWORD v32[5];

  v32[4] = *MEMORY[0x1E0C80C00];
  memset(v32, 0, 24);
  v25[0] = (uint64_t)v32;
  v25[1] = 1;
  v28 = 0;
  v29 = v31;
  v30 = 0x400000000;
  v24[0] = &v28;
  v24[1] = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((*(unsigned __int8 (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 672))(a1, v32, 1))
  {
    if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      if ((*(unsigned __int8 (**)(uint64_t, _BYTE **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v29, 0, 1, 0xFFFFFFFFLL))
      {
        if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))
          {
            if ((*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
            {
              v26 = 0;
              if (mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v26))
              {
                v5 = v26;
                v28 = (_QWORD *)v26;
                v23 = v26;
                if (*(_UNKNOWN **)(*(_QWORD *)v26 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
                {
                  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
                  v22 = 257;
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(&v26, a1, v6, v21);
                  v7 = mlir::InFlightDiagnostic::operator<<<char const(&)[44]>((uint64_t)&v26, "'tensor' must be ranked tensor of any type values, but got ");
                  v8 = mlir::InFlightDiagnostic::append<mlir::Type &>(v7, &v23);
                  v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v8);
                  mlir::InFlightDiagnostic::~InFlightDiagnostic((mlir::InFlightDiagnostic *)&v26);
                  v10 = v29;
                  if (v29 == v31)
                    return v9;
                  goto LABEL_22;
                }
                v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v26 + 8);
                v26 = v5;
                v27 = v11;
                mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
                v12 = (mlir::IndexType **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
                IndexType = mlir::Builder::getIndexType(v12, v13);
                v15 = v28;
                v16 = v28 ? mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v28 + 8) : 0;
                v26 = (uint64_t)v15;
                v27 = v16;
                v21[0] = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v26);
                mlir::OperationState::addTypes(a2, v21, 1);
                v17 = a2 + 16;
                if (mlir::OpAsmParser::resolveOperands<llvm::ArrayRef<mlir::OpAsmParser::UnresolvedOperand> &,llvm::ArrayRef<mlir::Type> &>(a1, v25, v24, v4, v17))
                {
                  if (!(_DWORD)v30)
                  {
                    v9 = 1;
                    v10 = v29;
                    if (v29 == v31)
                      return v9;
                    goto LABEL_22;
                  }
                  v18 = v29;
                  v19 = 32 * v30;
                  v9 = 1;
                  while ((*(unsigned __int8 (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 696))(a1, v18, IndexType, v17))
                  {
                    v18 += 32;
                    v19 -= 32;
                    if (!v19)
                      goto LABEL_21;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
LABEL_21:
  v10 = v29;
  if (v29 != v31)
LABEL_22:
    free(v10);
  return v9;
}

uint64_t mlir::mps::serialization::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mps.from_elements", 17, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::FromElementsOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t v2;
  uint64_t NextResultAtOffset;
  uint64_t *v4;
  const void **v5;
  const void *v6;
  _QWORD *ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char v29;
  _QWORD **v30;
  _QWORD **v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t NumElements;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *OperandRange;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  int64x2_t v52;
  int64x2_t *v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const void **v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  _QWORD **v66;
  _QWORD **v67;
  void *v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  void *v72;
  void *v73;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85[2];
  _QWORD v86[2];
  const void **v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  _QWORD *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  unsigned int v98;
  unsigned int v99;
  _BYTE v100[96];
  void *v101;
  _QWORD *v102;
  void *__p;
  _QWORD **v104;
  char v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)*this + 9))
    v2 = (uint64_t)(*this - 2);
  else
    v2 = 0;
  NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
  v4 = *this;
  v5 = (const void **)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
  v6 = *v5;
  if (*((_UNKNOWN **)*v5 + 17) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
  {
    v94 = (void *)(*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8);
    v95 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)v6 + 8);
    if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v94))
    {
      ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v94);
      if (!v8)
      {
LABEL_10:
        v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>((uint64_t)*v5 + 8);
        v87 = v5;
        v88 = v10;
        mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v87);
        goto LABEL_39;
      }
      v9 = 8 * v8;
      while (*ArgAttrsAttr != 0x8000000000000000)
      {
        ++ArgAttrsAttr;
        v9 -= 8;
        if (!v9)
          goto LABEL_10;
      }
    }
  }
  v90 = 261;
  v87 = (const void **)"result";
  v88 = 6;
  mlir::Operation::emitOpError(v4, &v87, (uint64_t)&v94);
  if (v94)
  {
    LODWORD(v91) = 3;
    v92 = " #";
    v93 = 2;
    v11 = (char *)&v91;
    v12 = (char *)v97;
    if (v98 >= v99)
    {
      v75 = v98 + 1;
      if (v97 <= &v91 && (char *)v97 + 24 * v98 > (char *)&v91)
      {
        v81 = (char *)&v91 - (_BYTE *)v97;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v75, 24);
        v12 = (char *)v97;
        v11 = (char *)v97 + v81;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v75, 24);
        v11 = (char *)&v91;
        v12 = (char *)v97;
      }
    }
    v13 = &v12[24 * v98];
    v14 = *(_OWORD *)v11;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v11 + 2);
    *(_OWORD *)v13 = v14;
    v15 = ++v98;
    if (v94)
    {
      LODWORD(v91) = 5;
      v92 = 0;
      v16 = (char *)&v91;
      v17 = (char *)v97;
      if (v15 >= v99)
      {
        v76 = v15 + 1;
        v77 = (char *)v97 + 24 * v15 > (char *)&v91;
        if (v97 <= &v91 && v77)
        {
          v82 = (char *)&v91 - (_BYTE *)v97;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v76, 24);
          v17 = (char *)v97;
          v16 = (char *)v97 + v82;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v76, 24);
          v16 = (char *)&v91;
          v17 = (char *)v97;
        }
      }
      v18 = &v17[24 * v98];
      v19 = *(_OWORD *)v16;
      *((_QWORD *)v18 + 2) = *((_QWORD *)v16 + 2);
      *(_OWORD *)v18 = v19;
      v20 = ++v98;
      if (v94)
      {
        LODWORD(v91) = 3;
        v92 = " must be statically shaped tensor of any type values, but got ";
        v93 = 62;
        v21 = (char *)&v91;
        v22 = (char *)v97;
        if (v20 >= v99)
        {
          v78 = v20 + 1;
          v79 = (char *)v97 + 24 * v20 > (char *)&v91;
          if (v97 <= &v91 && v79)
          {
            v83 = (char *)&v91 - (_BYTE *)v97;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v78, 24);
            v22 = (char *)v97;
            v21 = (char *)v97 + v83;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v78, 24);
            v21 = (char *)&v91;
            v22 = (char *)v97;
          }
        }
        v23 = &v22[24 * v98];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        ++v98;
        if (v94)
        {
          v25 = (char *)&v91;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v91, (uint64_t)v5);
          v26 = (char *)v97;
          if (v98 >= v99)
          {
            v80 = v98 + 1;
            if (v97 <= &v91 && (char *)v97 + 24 * v98 > (char *)&v91)
            {
              v84 = (char *)&v91 - (_BYTE *)v97;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v80, 24);
              v26 = (char *)v97;
              v25 = (char *)v97 + v84;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, v100, v80, 24);
              v25 = (char *)&v91;
              v26 = (char *)v97;
            }
          }
          v27 = &v26[24 * v98];
          v28 = *(_OWORD *)v25;
          *((_QWORD *)v27 + 2) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v27 = v28;
          ++v98;
        }
      }
    }
  }
  v29 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v94);
  if (v94)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v94);
  if (v105)
  {
    v30 = (_QWORD **)__p;
    if (__p)
    {
      v31 = v104;
      v32 = __p;
      if (v104 != __p)
      {
        do
          v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        v32 = __p;
      }
      v104 = v30;
      operator delete(v32);
    }
    v33 = v101;
    if (v101)
    {
      v34 = v102;
      v35 = v101;
      if (v102 != v101)
      {
        do
        {
          v37 = (void *)*--v34;
          v36 = v37;
          *v34 = 0;
          if (v37)
            operator delete[](v36);
        }
        while (v34 != v33);
        v35 = v101;
      }
      v102 = v33;
      operator delete(v35);
    }
    if (v97 != v100)
      free(v97);
  }
  if (!v29)
    return 0;
LABEL_39:
  if (*((_DWORD *)*this + 9))
    v38 = (uint64_t)(*this - 2);
  else
    v38 = 0;
  v39 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v38, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v39)
    v40 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8);
  else
    v40 = 0;
  v91 = v39;
  v92 = (const char *)v40;
  v42 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v91);
  NumElements = mlir::ShapedType::getNumElements(v42, v43);
  if (*((_DWORD *)*this + 9))
    v45 = (uint64_t)(*this - 2);
  else
    v45 = 0;
  v46 = (_QWORD *)(*(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v45, 0) + 8) & 0xFFFFFFFFFFFFFFF8);
  if (v46)
    v47 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v46 + 8);
  else
    v47 = 0;
  v86[0] = v46;
  v86[1] = v47;
  OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v86);
  v49 = (unint64_t)OperandRange;
  v94 = &v96;
  HIDWORD(v95) = 2;
  if (NumElements < 3)
  {
    if (NumElements)
    {
      v96 = OperandRange;
      if (NumElements != 1)
        v97 = OperandRange;
    }
  }
  else
  {
    LODWORD(v95) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, &v96, NumElements, 8);
    if (NumElements == 3)
    {
      v50 = 3;
      v51 = (unint64_t *)v94;
    }
    else
    {
      v51 = (unint64_t *)((char *)v94 + 8 * (NumElements & 0xFFFFFFFFFFFFFFFCLL));
      v50 = NumElements & 3;
      v52 = vdupq_n_s64(v49);
      v53 = (int64x2_t *)((char *)v94 + 16);
      v54 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v53[-1] = v52;
        *v53 = v52;
        v53 += 2;
        v54 -= 4;
      }
      while (v54);
      if (NumElements == (NumElements & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_62;
    }
    do
    {
      *v51++ = v49;
      --v50;
    }
    while (v50);
  }
LABEL_62:
  LODWORD(v95) = NumElements;
  v55 = *this;
  if ((*((_BYTE *)*this + 46) & 0x80) != 0)
  {
    v56 = *((unsigned int *)v55 + 17);
    v57 = v55[9];
  }
  else
  {
    v57 = 0;
    v56 = 0;
  }
  v85[0] = v57;
  v85[1] = v56;
  mlir::OperandRange::getTypes(v85, (uint64_t *)&v87);
  if (v89 - v88 != v95)
  {
    v64 = 0;
    goto LABEL_74;
  }
  if ((_DWORD)v95)
  {
    v58 = 8 * v95 - 8;
    v59 = &v87[4 * v88 + 3];
    v60 = (uint64_t *)v94;
    do
    {
      v61 = *v59;
      v59 += 4;
      v62 = v61[1];
      v63 = *v60++;
      v64 = v63 == (v62 & 0xFFFFFFFFFFFFFFF8);
      v65 = v63 != (v62 & 0xFFFFFFFFFFFFFFF8) || v58 == 0;
      v58 -= 8;
    }
    while (!v65);
LABEL_74:
    if (v94 == &v96)
      goto LABEL_76;
    goto LABEL_75;
  }
  v64 = 1;
  if (v94 != &v96)
LABEL_75:
    free(v94);
LABEL_76:
  if (v64)
    return 1;
  v87 = (const void **)"failed to verify that operand types match result element type";
  v90 = 259;
  mlir::OpState::emitOpError(this, &v87, (uint64_t)&v94);
  v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v94);
  if (v94)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v94);
  if (v105)
  {
    v66 = (_QWORD **)__p;
    if (__p)
    {
      v67 = v104;
      v68 = __p;
      if (v104 != __p)
      {
        do
          v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
        while (v67 != v66);
        v68 = __p;
      }
      v104 = v66;
      operator delete(v68);
    }
    v69 = v101;
    if (v101)
    {
      v70 = v102;
      v71 = v101;
      if (v102 != v101)
      {
        do
        {
          v73 = (void *)*--v70;
          v72 = v73;
          *v70 = 0;
          if (v73)
            operator delete[](v72);
        }
        while (v70 != v69);
        v71 = v101;
      }
      v102 = v69;
      operator delete(v71);
    }
    if (v97 != v100)
      free(v97);
  }
  return v41;
}

uint64_t mlir::mps::serialization::FromElementsOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *ArgAttrsAttr;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t NumElements;
  uint64_t v16;
  void *OperandRange;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  _QWORD **v32;
  _QWORD **v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  void *v38;
  void *v39;
  int64x2_t v41;
  int64x2_t *v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  __int16 v51;
  _QWORD *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE v61[96];
  void *v62;
  _QWORD *v63;
  void *__p;
  _QWORD **v65;
  char v66;
  uint64_t v67[2];
  _QWORD v68[17];

  v68[16] = *MEMORY[0x1E0C80C00];
  v67[0] = (uint64_t)v68;
  v67[1] = 0x400000000;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, v67, 0, 1, 0xFFFFFFFFLL)|| ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1), !(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112))|| !(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| (v55 = 0, !mlir::AsmParser::parseType<mlir::RankedTensorType>(a1, &v55)))
  {
    v21 = 0;
    v22 = (void *)v67[0];
    if ((_QWORD *)v67[0] == v68)
      return v21;
    goto LABEL_42;
  }
  v5 = v55;
  if (*(_UNKNOWN **)(*(_QWORD *)v55 + 136) != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
    || (v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*(_QWORD *)v55 + 8),
        v55 = v5,
        v56 = v6,
        !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v55)))
  {
LABEL_18:
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v51 = 257;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)a1 + 24))(&v55, a1, v23, &v49);
    if (v55)
    {
      LODWORD(v52) = 3;
      v53 = "'result' must be statically shaped tensor of any type values, but got ";
      v54 = 70;
      v24 = (char *)&v52;
      v25 = (char *)v58;
      if (v59 >= v60)
      {
        v45 = v59 + 1;
        if (v58 <= &v52 && (char *)v58 + 24 * v59 > (char *)&v52)
        {
          v47 = (char *)&v52 - (_BYTE *)v58;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v45, 24);
          v25 = (char *)v58;
          v24 = (char *)v58 + v47;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v45, 24);
          v24 = (char *)&v52;
          v25 = (char *)v58;
        }
      }
      v26 = &v25[24 * v59];
      v27 = *(_OWORD *)v24;
      *((_QWORD *)v26 + 2) = *((_QWORD *)v24 + 2);
      *(_OWORD *)v26 = v27;
      ++v59;
      if (v55)
      {
        v28 = (char *)&v52;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v52, (uint64_t)v5);
        v29 = (char *)v58;
        if (v59 >= v60)
        {
          v46 = v59 + 1;
          if (v58 <= &v52 && (char *)v58 + 24 * v59 > (char *)&v52)
          {
            v48 = (char *)&v52 - (_BYTE *)v58;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
            v29 = (char *)v58;
            v28 = (char *)v58 + v48;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v61, v46, 24);
            v28 = (char *)&v52;
            v29 = (char *)v58;
          }
        }
        v30 = &v29[24 * v59];
        v31 = *(_OWORD *)v28;
        *((_QWORD *)v30 + 2) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v30 = v31;
        ++v59;
      }
    }
    v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v55);
    if (v55)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v55);
    if (v66)
    {
      v32 = (_QWORD **)__p;
      if (__p)
      {
        v33 = v65;
        v34 = __p;
        if (v65 != __p)
        {
          do
            v33 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v33 - 1);
          while (v33 != v32);
          v34 = __p;
        }
        v65 = v32;
        operator delete(v34);
      }
      v35 = v62;
      if (v62)
      {
        v36 = v63;
        v37 = v62;
        if (v63 != v62)
        {
          do
          {
            v39 = (void *)*--v36;
            v38 = v39;
            *v36 = 0;
            if (v39)
              operator delete[](v38);
          }
          while (v36 != v35);
          v37 = v62;
        }
        v63 = v35;
        operator delete(v37);
      }
      if (v58 != v61)
        free(v58);
    }
    v22 = (void *)v67[0];
    if ((_QWORD *)v67[0] != v68)
      goto LABEL_42;
    return v21;
  }
  ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v55);
  if (v8)
  {
    v9 = 8 * v8;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v9 -= 8;
      if (!v9)
        goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_11:
  v10 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  v49 = v5;
  v50 = v10;
  mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v49);
  v11 = *(unsigned int *)(a2 + 72);
  if (v11 >= *(_DWORD *)(a2 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, (void *)(a2 + 80), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a2 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v11) = v5;
  ++*(_DWORD *)(a2 + 72);
  v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  v49 = v5;
  v50 = v12;
  v13 = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v49);
  NumElements = mlir::ShapedType::getNumElements(v13, v14);
  v16 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v5 + 8);
  v52 = v5;
  v53 = (const char *)v16;
  OperandRange = (void *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v52);
  v18 = (unint64_t)OperandRange;
  v55 = &v57;
  HIDWORD(v56) = 2;
  if (NumElements < 3)
  {
    if (NumElements)
    {
      v57 = OperandRange;
      if (NumElements != 1)
        v58 = OperandRange;
    }
  }
  else
  {
    LODWORD(v56) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, &v57, NumElements, 8);
    if (NumElements == 3)
    {
      v19 = 3;
      v20 = (unint64_t *)v55;
      do
      {
LABEL_50:
        *v20++ = v18;
        --v19;
      }
      while (v19);
      goto LABEL_51;
    }
    v20 = (unint64_t *)((char *)v55 + 8 * (NumElements & 0xFFFFFFFFFFFFFFFCLL));
    v19 = NumElements & 3;
    v41 = vdupq_n_s64(v18);
    v42 = (int64x2_t *)((char *)v55 + 16);
    v43 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v42[-1] = v41;
      *v42 = v41;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (NumElements != (NumElements & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_50;
  }
LABEL_51:
  LODWORD(v56) = NumElements;
  v44 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, v67, (uint64_t)&v55, v4, a2 + 16);
  if (v55 != &v57)
    free(v55);
  v21 = v44 != 0;
  v22 = (void *)v67[0];
  if ((_QWORD *)v67[0] != v68)
LABEL_42:
    free(v22);
  return v21;
}

uint64_t mlir::mps::serialization::FuncOp::getInherentAttr(int a1, _QWORD *a2, _QWORD *__s1, size_t __n)
{
  switch(__n)
  {
    case 8uLL:
      if (memcmp(__s1, "sym_name", __n))
        return 0;
      return a2[3];
    case 9uLL:
      if (*__s1 == 0x727474615F677261 && *((_BYTE *)__s1 + 8) == 115)
        return *a2;
      if (memcmp(__s1, "res_attrs", __n))
        return 0;
      return a2[2];
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
      return 0;
    case 0xDuLL:
      if (memcmp(__s1, "function_type", __n))
        return 0;
      return a2[1];
    case 0xEuLL:
      if (memcmp(__s1, "sym_visibility", __n))
        return 0;
      return a2[4];
    default:
      return 0;
  }
}

uint64_t mlir::mps::serialization::FuncOp::setInherentAttr(uint64_t result, _QWORD *__s1, size_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (_QWORD *)result;
  switch(a3)
  {
    case 8uLL:
      result = memcmp(__s1, "sym_name", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
            v10 = a4;
          else
            v10 = 0;
          v5[3] = v10;
        }
        else
        {
          v5[3] = 0;
        }
      }
      break;
    case 9uLL:
      if (*__s1 == 0x727474615F677261 && *((_BYTE *)__s1 + 8) == 115)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
            v11 = a4;
          else
            v11 = 0;
          *(_QWORD *)result = v11;
        }
        else
        {
          *(_QWORD *)result = 0;
        }
      }
      else
      {
        result = memcmp(__s1, "res_attrs", a3);
        if (!(_DWORD)result)
        {
          if (a4)
          {
            if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
              v7 = a4;
            else
              v7 = 0;
            v5[2] = v7;
          }
          else
          {
            v5[2] = 0;
          }
        }
      }
      break;
    case 0xDuLL:
      result = memcmp(__s1, "function_type", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
            v8 = a4;
          else
            v8 = 0;
          v5[1] = v8;
        }
        else
        {
          v5[1] = 0;
        }
      }
      break;
    case 0xEuLL:
      result = memcmp(__s1, "sym_visibility", a3);
      if (!(_DWORD)result)
      {
        if (a4)
        {
          if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
            v9 = a4;
          else
            v9 = 0;
          v5[4] = v9;
        }
        else
        {
          v5[4] = 0;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL mlir::mps::serialization::FuncOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readAttribute<mlir::TypeAttr>(a1, v3 + 1)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::ArrayAttr>(a1, v3 + 2)
      && mlir::DialectBytecodeReader::readAttribute<mlir::StringAttr>(a1, v3 + 3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 4) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _OWORD *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x28uLL);
    *v3 = 0u;
    v3[1] = 0u;
    *((_QWORD *)v3 + 4) = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v4 = &mlir::detail::TypeIDResolver<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if ((v5 & 1) == 0)
    {
      v4 = &mlir::detail::TypeIDResolver<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties]";
        v15 = 120;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v4 = &mlir::detail::TypeIDResolver<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v4[74];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::serialization::FuncOp::writeProperties(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64);
  else
    v3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v3);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v3[1]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v3[2]);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v3[3]);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v3[4]);
}

uint64_t mlir::mps::serialization::FuncOp::getSymName(mlir::mps::serialization::FuncOp *this)
{
  unint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  v3 = *(_QWORD *)(v1 + 24);
  return mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v3);
}

uint64_t mlir::mps::serialization::FuncOp::getSymVisibility@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v3 = 0;
  v5 = *(_QWORD *)(v3 + 32);
  if (v5)
  {
    this = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v5);
    *(_QWORD *)a2 = this;
    *(_QWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t mlir::mps::serialization::FuncOp::removeArgAttrsAttr(mlir::mps::serialization::FuncOp *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  *v1 = 0;
  return 0;
}

uint64_t mlir::mps::serialization::FuncOp::removeResAttrsAttr(mlir::mps::serialization::FuncOp *this)
{
  unint64_t v1;

  v1 = *(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64;
  if (!HIBYTE(*(_DWORD *)(*(_QWORD *)this + 44)))
    v1 = 0;
  *(_QWORD *)(v1 + 16) = 0;
  return 0;
}

BOOL mlir::mps::serialization::FuncOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD **v18;
  _QWORD **v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  const void **v28[4];
  __int16 v29;
  _QWORD v30[3];
  void *v31;
  _BYTE v32[96];
  void *v33;
  _QWORD *v34;
  void *__p;
  _QWORD **v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = (const void **)v3[1];
  if (v4)
  {
    v5 = v3[3];
    if (v5)
    {
      v6 = *v3;
      v7 = v3[2];
      v8 = v3[4];
      v30[0] = v2;
      if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0;
      v30[0] = *this;
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps2(v4, (const void **)"function_type", (const char *)0xD, (void (*)(const void ***__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0;
      v30[0] = *this;
      if (!mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0;
      v30[0] = *this;
      if (!mlir::func::__mlir_ods_local_attr_constraint_FuncOps3(v6, (const void **)"arg_attrs", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30))return 0;
      v30[0] = *this;
      return mlir::func::__mlir_ods_local_attr_constraint_FuncOps3(v7, (const void **)"res_attrs", (const char *)9, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)v30) != 0;
    }
    v28[0] = (const void **)"requires attribute 'sym_name'";
    v29 = 259;
    mlir::OpState::emitOpError(this, v28, (uint64_t)v30);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    if (v37)
    {
      v18 = (_QWORD **)__p;
      if (__p)
      {
        v19 = v36;
        v20 = __p;
        if (v36 != __p)
        {
          do
            v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          v20 = __p;
        }
        v36 = v18;
        operator delete(v20);
      }
      v21 = v33;
      if (v33)
      {
        v22 = v34;
        v23 = v33;
        if (v34 != v33)
        {
          do
          {
            v25 = (void *)*--v22;
            v24 = v25;
            *v22 = 0;
            if (v25)
              operator delete[](v24);
          }
          while (v22 != v21);
          v23 = v33;
        }
        v34 = v21;
        operator delete(v23);
      }
      v26 = v31;
      if (v31 != v32)
LABEL_47:
        free(v26);
    }
  }
  else
  {
    v28[0] = (const void **)"requires attribute 'function_type'";
    v29 = 259;
    mlir::OpState::emitOpError(this, v28, (uint64_t)v30);
    v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v30);
    if (v30[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v30);
    if (v37)
    {
      v10 = (_QWORD **)__p;
      if (__p)
      {
        v11 = v36;
        v12 = __p;
        if (v36 != __p)
        {
          do
            v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          v12 = __p;
        }
        v36 = v10;
        operator delete(v12);
      }
      v13 = v33;
      if (v33)
      {
        v14 = v34;
        v15 = v33;
        if (v34 != v33)
        {
          do
          {
            v17 = (void *)*--v14;
            v16 = v17;
            *v14 = 0;
            if (v17)
              operator delete[](v16);
          }
          while (v14 != v13);
          v15 = v33;
        }
        v34 = v13;
        operator delete(v15);
      }
      v26 = v31;
      if (v31 != v32)
        goto LABEL_47;
    }
  }
  return v9;
}

uint64_t mlir::mps::serialization::ModuleOp::getInherentAttr(int a1, _QWORD *a2, _QWORD *__s1, size_t __n)
{
  if (__n == 14)
  {
    if (!memcmp(__s1, "sym_visibility", 0xEuLL))
      return a2[1];
    return 0;
  }
  if (__n != 8 || *__s1 != 0x656D616E5F6D7973)
    return 0;
  return *a2;
}

uint64_t mlir::mps::serialization::ModuleOp::setInherentAttr(uint64_t result, _QWORD *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = result;
  if (a3 == 14)
  {
    result = memcmp(__s1, "sym_visibility", 0xEuLL);
    if (!(_DWORD)result)
    {
      if (a4)
      {
        if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
          v6 = a4;
        else
          v6 = 0;
        *(_QWORD *)(v5 + 8) = v6;
      }
      else
      {
        *(_QWORD *)(v5 + 8) = 0;
      }
    }
  }
  else if (a3 == 8 && *__s1 == 0x656D616E5F6D7973)
  {
    if (a4)
    {
      if (*(_UNKNOWN **)(*(_QWORD *)a4 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
        v7 = a4;
      else
        v7 = 0;
      *(_QWORD *)result = v7;
    }
    else
    {
      *(_QWORD *)result = 0;
    }
  }
  return result;
}

void mlir::mps::serialization::ModuleOp::populateInherentAttrs(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (*a2)
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_name", 8, *a2);
  v5 = a2[1];
  if (v5)
    mlir::NamedAttrList::append(a3, (uint64_t)"sym_visibility", 14, v5);
}

BOOL mlir::mps::serialization::ModuleOp::verifyInherentAttrs(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;

  v8 = mlir::NamedAttrList::get(a2, **(_QWORD **)(a1 + 96));
  result = 0;
  if (!v8
    || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"sym_name", (const char *)8, a3, a4))
  {
    v9 = mlir::NamedAttrList::get(a2, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8));
    if (!v9
      || mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v9, (const void **)"sym_visibility", (const char *)0xE, a3, a4))
    {
      return 1;
    }
  }
  return result;
}

BOOL mlir::mps::serialization::ModuleOp::readProperties(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
  return mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3)
      && mlir::DialectBytecodeReader::readOptionalAttribute<mlir::StringAttr>(a1, v3 + 1) != 0;
}

uint64_t mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;

  result = a1[32];
  if (!result)
  {
    v3 = operator new(0x10uLL);
    *v3 = 0;
    v3[1] = 0;
    a1[32] = v3;
    a1[34] = llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>;
    a1[35] = &v14;
    a1[36] = llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>;
    a1[37] = &v14;
    v5 = &mlir::detail::TypeIDResolver<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
    if ((v4 & 1) == 0)
    {
      v5 = &mlir::detail::TypeIDResolver<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      if (v6)
      {
        v14 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::serialization::detail::ModuleOpGenericAdaptorB"
              "ase::Properties]";
        v15 = 122;
        v7 = llvm::StringRef::find((uint64_t *)&v14, "DesiredTypeName = ", 0x12uLL, 0);
        if (v15 >= v7)
          v8 = v7;
        else
          v8 = v15;
        v9 = &v14[v8];
        v10 = v15 - v8;
        if (v15 - v8 >= 0x12)
          v11 = 18;
        else
          v11 = v15 - v8;
        v12 = v10 - v11;
        if (v12 >= v12 - 1)
          v13 = v12 - 1;
        else
          v13 = v12;
        mlir::detail::TypeIDResolver<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
        v5 = &mlir::detail::TypeIDResolver<mlir::mps::detail::RandomNormalOpGenericAdaptorBase::Properties,void>::resolveTypeID(void)::id;
      }
    }
    a1[33] = v5[76];
    return a1[32];
  }
  return result;
}

uint64_t mlir::mps::serialization::ModuleOp::writeProperties(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  if (HIBYTE(*(_DWORD *)(*(_QWORD *)a1 + 44)))
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 44) >> 23) & 1) + 64);
  else
    v3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v3);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, v3[1]);
}

uint64_t mlir::mps::serialization::ModuleOp::getSymName@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)this + 16 * (((unint64_t)*(unsigned int *)(*(_QWORD *)this + 44) >> 23) & 1) + 64);
  if (v4)
  {
    this = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v4);
    *(_QWORD *)a2 = this;
    *(_QWORD *)(a2 + 8) = v3;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

BOOL mlir::mps::serialization::ModuleOp::verifyInvariantsImpl(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;

  v2 = *this;
  if (HIBYTE(*((_DWORD *)*this + 11)))
    v3 = &(*this)[2 * (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1) + 8];
  else
    v3 = 0;
  v4 = *v3;
  v5 = v3[1];
  v7 = v2;
  if (mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v4, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)&& (v7 = *this, mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v5, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>, (uint64_t)&v7)))
  {
    return mlir::scf::__mlir_ods_local_region_constraint_SCFOps1(*this, (((unint64_t)&(*this)[2* (((unint64_t)*((unsigned int *)*this + 11) >> 23) & 1)+ 8]+ (((unint64_t)*((unsigned int *)*this + 11) >> 21) & 0x7F8)+ 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *((unsigned int *)*this + 10), (uint64_t)"bodyRegion", 10, 0) != 0;
  }
  else
  {
    return 0;
  }
}

BOOL mlir::mps::serialization::ModuleOp::verifyInvariants(uint64_t **this)
{
  return mlir::mps::serialization::ModuleOp::verifyInvariantsImpl(this) && mlir::ModuleOp::verify(this);
}

uint64_t mlir::mps::serialization::ModuleOp::parse(uint64_t a1, _QWORD *a2)
{
  mlir::Region *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[3];
  uint64_t v15;
  mlir::Region *v16;
  uint64_t v17;

  v17 = 0;
  v4 = (mlir::Region *)operator new(0x18uLL);
  *(_QWORD *)v4 = v4;
  *((_QWORD *)v4 + 1) = v4;
  *((_QWORD *)v4 + 2) = 0;
  v16 = v4;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 496))(a1, &v17);
  if (v17)
  {
    v5 = (_QWORD *)mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(a2);
    *v5 = v17;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 464))(a1, a2 + 14)
    || (v6 = a2[1],
        v14[0] = a1,
        v14[1] = &v15,
        v14[2] = a2,
        (v7 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), **(_QWORD **)(v6 + 96))) != 0)
    && !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v7, (const void **)"sym_name", (const char *)8, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v14)|| (v8 = mlir::NamedAttrList::get((uint64_t)(a2 + 14), *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8))) != 0&& !mlir::cf::__mlir_ods_local_attr_constraint_ControlFlowOps0(v8, (const void **)"sym_visibility", (const char *)0xE, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>, (uint64_t)v14)|| !(*(unsigned __int8 (**)(uint64_t, mlir::Region *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 744))(a1, v4, 0, 0, 0))
  {
    v11 = 0;
    v16 = 0;
LABEL_14:
    mlir::Region::~Region(v4);
    operator delete(v12);
    return v11;
  }
  if (*(mlir::Region **)v4 == v4)
  {
    v9 = operator new(0x48uLL);
    *v9 = 0u;
    v9[1] = 0u;
    *((_QWORD *)v9 + 4) = v9 + 2;
    *((_QWORD *)v9 + 5) = v9 + 2;
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 8) = 0;
    *((_QWORD *)v9 + 6) = 0;
    llvm::ilist_traits<mlir::Block>::addNodeToList((uint64_t)v4, (uint64_t)v9);
    v10 = *(_QWORD *)v4;
    *((_QWORD *)v9 + 2) = v4;
    *((_QWORD *)v9 + 1) = v10;
    v9 = (_OWORD *)((char *)v9 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)v4 = v9;
  }
  mlir::OperationState::addRegion((uint64_t)a2, (unint64_t)&v16);
  v4 = v16;
  v16 = 0;
  v11 = 1;
  if (v4)
    goto LABEL_14;
  return v11;
}

BOOL mlir::mps::serialization::ReturnOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  void *v8[2];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| (_DWORD)v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    v5 = 0;
    v6 = v8[0];
    if (v8[0] == &v9)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  v6 = v8[0];
  if (v8[0] != &v9)
LABEL_9:
    free(v6);
LABEL_10:
  if (v10 != v12)
    free(v10);
  return v5;
}

uint64_t mlir::mps::serialization::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase(uint64_t a1, unsigned int *a2)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary((mlir::Operation *)a2);
  v5 = a2[11];
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)&a2[4 * ((v5 >> 23) & 1) + 17] + ((v5 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
       + 32 * a2[10];
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mps.while", 9, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t mlir::mps::serialization::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase(uint64_t a1, mlir::Operation *this)
{
  unint64_t AttrDictionary;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t Context;
  unint64_t v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  AttrDictionary = mlir::Operation::getAttrDictionary(this);
  v5 = *((unsigned int *)this + 11);
  v6 = v5 & 0x7FFFFF;
  if ((v5 & 0x7FFFFF) != 0)
  {
    v7 = (((unint64_t)this + 16 * ((v5 >> 23) & 1) + ((v5 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  mlir::ValueRange::ValueRange(v10, v7, v6);
  *(_QWORD *)a1 = AttrDictionary;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  if (AttrDictionary)
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)a1);
    if (*(_BYTE *)(a1 + 16))
      *(_BYTE *)(a1 + 16) = 0;
    mlir::OperationName::OperationName(a1 + 8, "mps.yield", 9, Context);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

BOOL mlir::mps::serialization::YieldOp::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  void *v8[2];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = 0x400000000;
  v8[0] = &v9;
  v8[1] = (void *)0x100000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(a1, a2 + 112)
    || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1),
        !(*(unsigned __int8 (**)(uint64_t, void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 688))(a1, &v10, 0, 1, 0xFFFFFFFFLL))|| (_DWORD)v11&& (!(*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1)|| !mlir::AsmParser::parseTypeList(a1, (uint64_t)v8)))
  {
    v5 = 0;
    v6 = v8[0];
    if (v8[0] == &v9)
      goto LABEL_10;
    goto LABEL_9;
  }
  v5 = mlir::OpAsmParser::resolveOperands<llvm::SmallVector<mlir::OpAsmParser::UnresolvedOperand,4u> &,llvm::SmallVector<mlir::Type,1u> &>(a1, (uint64_t *)&v10, (uint64_t)v8, v4, a2 + 16) != 0;
  v6 = v8[0];
  if (v8[0] != &v9)
LABEL_9:
    free(v6);
LABEL_10:
  if (v10 != v12)
    free(v10);
  return v5;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps0(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps1(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::__mlir_ods_local_attr_constraint_MPSSerializationOps2(mlir::Operation *,mlir::Attribute,llvm::StringRef)::$_0>(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  const void **v3;
  __int16 v4;

  v2 = *a1;
  v4 = 257;
  mlir::Operation::emitOpError(v2, &v3, a2);
}

uint64_t llvm::function_ref<mlir::Type ()(mlir::Builder &,llvm::ArrayRef<mlir::Type>,llvm::ArrayRef<mlir::Type>,mlir::function_interface_impl::VariadicFlag,std::string &)>::callback_fn<mlir::mps::serialization::FuncOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t a1, mlir::MLIRContext **a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v10[2];
  unint64_t v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  mlir::ValueRange::ValueRange(v10, a5, a6);
  return mlir::Builder::getFunctionType(a2, v11[0], v11[1], v10[0], v10[1]);
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::IfOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"mps.yield", 9);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::mps::serialization::YieldOp>::Impl<mlir::mps::serialization::ForOp>::buildTerminator(uint64_t a1, uint64_t a2)
{
  const mlir::OperationState *v2;
  uint64_t v3;
  _QWORD v5[39];

  v5[38] = *MEMORY[0x1E0C80C00];
  mlir::OperationState::OperationState(v5, a2, (uint64_t)"mps.yield", 9);
  v3 = mlir::Operation::create((mlir::Operation *)v5, v2);
  mlir::OperationState::~OperationState((mlir::OperationState *)v5);
  return v3;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::FuncOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

void llvm::function_ref<void ()(mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties)#1}>(int a1, void *__p)
{
  if (__p)
    operator delete(__p);
}

__n128 llvm::function_ref<void ()(mlir::OpaqueProperties,mlir::OpaqueProperties)>::callback_fn<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties & mlir::OperationState::getOrAddProperties<mlir::mps::serialization::detail::ModuleOpGenericAdaptorBase::Properties>(void)::{lambda(mlir::OpaqueProperties,mlir::OpaqueProperties)#1}>(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void llvm::function_ref<mlir::InFlightDiagnostic ()(void)>::callback_fn<mlir::mps::serialization::ModuleOp::parse(mlir::OpAsmParser &,mlir::OperationState &)::$_0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const void ***v6;
  char *v7;
  char *v8;
  __int128 v9;
  const void **AttrData;
  const char *v11;
  uint64_t v12;
  const void ***v13;
  char *v14;
  char *v15;
  __int128 v16;
  unint64_t v17;
  void *v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _QWORD **v23;
  _QWORD **v24;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  char v35[32];
  __int16 v36;
  const void **v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[96];
  void *v48[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *(_QWORD *)a1[1];
  v36 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(_QWORD *)v4 + 24))(&v41, v4, v5, v35);
  if (v41)
  {
    LODWORD(v37) = 3;
    v38 = "'";
    v39 = 1;
    v6 = &v37;
    v7 = (char *)v44;
    if (v45 >= v46)
    {
      v31 = v45 + 1;
      if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
      {
        v33 = (char *)&v37 - (_BYTE *)v44;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v7 = (char *)v44;
        v6 = (const void ***)((char *)v44 + v33);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v31, 24);
        v6 = &v37;
        v7 = (char *)v44;
      }
    }
    v8 = &v7[24 * v45];
    v9 = *(_OWORD *)v6;
    *((_QWORD *)v8 + 2) = v6[2];
    *(_OWORD *)v8 = v9;
    ++v45;
  }
  v37 = *(const void ***)(*(_QWORD *)(a1[2] + 8) + 8);
  AttrData = (const void **)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v37);
  v12 = v41;
  if (v41)
  {
    v40 = 261;
    v37 = AttrData;
    v38 = v11;
    mlir::Diagnostic::operator<<((uint64_t)&v42, &v37);
    v12 = v41;
    if (v41)
    {
      LODWORD(v37) = 3;
      v38 = "' op ";
      v39 = 5;
      v13 = &v37;
      v14 = (char *)v44;
      if (v45 >= v46)
      {
        v32 = v45 + 1;
        if (v44 <= &v37 && (char *)v44 + 24 * v45 > (char *)&v37)
        {
          v34 = (char *)&v37 - (_BYTE *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v14 = (char *)v44;
          v13 = (const void ***)((char *)v44 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v32, 24);
          v13 = &v37;
          v14 = (char *)v44;
        }
      }
      v15 = &v14[24 * v45];
      v16 = *(_OWORD *)v13;
      *((_QWORD *)v15 + 2) = v13[2];
      *(_OWORD *)v15 = v16;
      ++v45;
      v12 = v41;
    }
  }
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  if (v52)
  {
    *(_QWORD *)(a2 + 8) = v42;
    v17 = v45;
    *(_DWORD *)(a2 + 16) = v43;
    v18 = (void *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = a2 + 40;
    *(_QWORD *)(a2 + 32) = 0x400000000;
    if (!(_DWORD)v17 || &v41 == (uint64_t *)a2)
    {
      v21 = 1;
      goto LABEL_21;
    }
    v19 = v47;
    if (v44 != v47)
    {
      *(_QWORD *)(a2 + 24) = v44;
      v20 = v46;
      *(_DWORD *)(a2 + 32) = v17;
      *(_DWORD *)(a2 + 36) = v20;
      v44 = v47;
      v46 = 0;
      v21 = 1;
LABEL_20:
      v45 = 0;
LABEL_21:
      *(_OWORD *)(a2 + 136) = *(_OWORD *)v48;
      *(_QWORD *)(a2 + 152) = v49;
      v48[0] = 0;
      v48[1] = 0;
      *(_OWORD *)(a2 + 160) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 176) = v51;
      v49 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v51 = 0;
      *(_BYTE *)(a2 + 184) = 1;
      if (v21)
      {
        if (v44 != v47)
          free(v44);
        v52 = 0;
      }
      goto LABEL_25;
    }
    if (v17 < 5)
    {
      v22 = v17;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v17, 24);
      v22 = v45;
      if (!v45)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v17;
        v21 = v52;
        goto LABEL_20;
      }
      v19 = v44;
      v18 = *(void **)(a2 + 24);
    }
    memcpy(v18, v19, 24 * v22);
    goto LABEL_19;
  }
LABEL_25:
  mlir::InFlightDiagnostic::abandon(&v41);
  if (v41)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v41);
  if (v52)
  {
    v23 = (_QWORD **)__p[0];
    if (__p[0])
    {
      v24 = (_QWORD **)__p[1];
      v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
    v26 = v48[0];
    if (v48[0])
    {
      v27 = v48[1];
      v28 = v48[0];
      if (v48[1] != v48[0])
      {
        do
        {
          v30 = (void *)*--v27;
          v29 = v30;
          *v27 = 0;
          if (v30)
            operator delete[](v29);
        }
        while (v27 != v26);
        v28 = v48[0];
      }
      v48[1] = v26;
      operator delete(v28);
    }
    if (v44 != v47)
      free(v44);
  }
}

uint64_t mlir::mps::MPSDialect::parseType(uint64_t a1, mlir::AsmParser *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *TypeUniquer;
  _QWORD **v10;
  _QWORD **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *__p;
  _QWORD **v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = 0;
  if (mlir::AsmParser::parseKeyword(this, (llvm::StringRef *)&v20))
  {
    v4 = (*(uint64_t (**)(mlir::AsmParser *))(*(_QWORD *)this + 16))(this);
    v5 = (*(uint64_t (**)(mlir::AsmParser *, uint64_t))(*(_QWORD *)this + 48))(this, v4);
    if (v21 == 3)
    {
      v6 = v20;
      if (*(_WORD *)v20 == 26222 && *(_BYTE *)(v20 + 2) == 52)
      {
        TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
        return mlir::StorageUniquer::getSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::NF4Type,void>::id);
      }
    }
    else
    {
      v6 = v20;
    }
    v19 = 1283;
    v18[0] = "unknown MPS type: ";
    v18[2] = v6;
    v18[3] = v21;
    mlir::emitError(v5, (uint64_t)v18, (uint64_t)v22);
    if (v22[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v22);
    if (v29)
    {
      v10 = (_QWORD **)__p;
      if (__p)
      {
        v11 = v28;
        v12 = __p;
        if (v28 != __p)
        {
          do
            v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          v12 = __p;
        }
        v28 = v10;
        operator delete(v12);
      }
      v13 = v25;
      if (v25)
      {
        v14 = v26;
        v15 = v25;
        if (v26 != v25)
        {
          do
          {
            v17 = (void *)*--v14;
            v16 = v17;
            *v14 = 0;
            if (v17)
              operator delete[](v16);
          }
          while (v14 != v13);
          v15 = v25;
        }
        v26 = v13;
        operator delete(v15);
      }
      if (v23 != &v24)
        free(v23);
    }
  }
  return 0;
}

llvm::raw_ostream *mlir::mps::MPSDialect::printType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *result;
  uint64_t v4;

  result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v4 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v4) <= 2)
    return llvm::raw_ostream::write(result, "nf4", 3uLL);
  *(_BYTE *)(v4 + 2) = 52;
  *(_WORD *)v4 = 26222;
  *((_QWORD *)result + 4) += 3;
  return result;
}

uint64_t mlir::mps::serializeMPSModule(unsigned int *a1, uint64_t a2, mlir::Operation *a3, llvm::raw_ostream *a4, void (*a5)(uint64_t, mlir *), uint64_t a6)
{
  mlir::StringAttr *Context;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  mlir::Dialect *Dialect;
  char v27;
  uint64_t LoadedDialect;
  _QWORD *v29;
  int v30;
  const mlir::BytecodeWriterConfig *v31;
  mlir::Operation *v32;
  uint64_t v34;
  _BYTE *v35[8];
  mlir *v36;
  mlir::StringAttr *v37[4];
  mlir::StringAttr *v38;

  Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 6));
  v37[0] = Context;
  memset(&v37[1], 0, 24);
  v36 = mlir::OpBuilder::create<mlir::mps::serialization::ModuleOp>(v37, *((_QWORD *)a1 + 3));
  v13 = *(_QWORD *)((((unint64_t)v36
                    + 16 * (((unint64_t)*((unsigned int *)v36 + 11) >> 23) & 1)
                    + (((unint64_t)*((unsigned int *)v36 + 11) >> 21) & 0x7F8)
                    + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *((unsigned int *)v36 + 10)
                  + 8);
  v14 = v13 == 0;
  v15 = v13 - 8;
  if (v14)
    v15 = 0;
  v16 = *(_QWORD *)((((unint64_t)&a1[4 * (((unint64_t)a1[11] >> 23) & 1) + 17]
                    + (((unint64_t)a1[11] >> 21) & 0x7F8)
                    + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a1[10]
                  + 8);
  if (v16)
    v17 = v16 - 8;
  else
    v17 = 0;
  v18 = (uint64_t *)(v17 + 32);
  if (*(_QWORD *)(v17 + 32) != v17 + 32)
  {
    v19 = *(uint64_t **)(v15 + 40);
    if (v19 != v18)
    {
      v20 = *(uint64_t **)(v17 + 40);
      llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v15 + 32, v17 + 32, (uint64_t)v20, v17 + 32);
      if (v20 != v18)
      {
        v21 = *v18;
        v22 = *v20;
        *(_QWORD *)(v22 + 8) = v18;
        *v18 = v22;
        v23 = *v19;
        *(_QWORD *)(v21 + 8) = v19;
        *v20 = v23;
        *(_QWORD *)(v23 + 8) = v20;
        *v19 = v21;
      }
    }
  }
  if (!mlir::mps::serialization::ModuleOp::verifyInvariants((uint64_t **)&v36))
  {
    v32 = v36;
    if (!v36)
      return 0;
    goto LABEL_23;
  }
  mlir::PassManager::PassManager(v35, (uint64_t)Context, "any", 3uLL, 1);
  v24 = operator new(0x158uLL);
  v24[2] = 0u;
  v24[3] = 0u;
  v24[4] = 0u;
  v24[5] = 0u;
  v24[6] = 0u;
  v24[7] = 0u;
  v24[8] = 0u;
  v24[9] = 0u;
  v24[10] = 0u;
  v24[11] = 0u;
  v24[12] = 0u;
  v24[13] = 0u;
  v24[14] = 0u;
  v24[15] = 0u;
  v24[16] = 0u;
  v24[17] = 0u;
  *((_QWORD *)v24 + 2) = "mps.module";
  *((_QWORD *)v24 + 3) = 10;
  *((_BYTE *)v24 + 32) = 1;
  v24[9] = 0u;
  v24[10] = 0u;
  v24[8] = 0u;
  *((_QWORD *)v24 + 22) = 0;
  *((_QWORD *)v24 + 23) = (char *)v24 + 200;
  *((_QWORD *)v24 + 29) = (char *)v24 + 248;
  *((_DWORD *)v24 + 49) = 4;
  *((_DWORD *)v24 + 61) = 4;
  *((_QWORD *)v24 + 35) = 0;
  *((_QWORD *)v24 + 36) = 0;
  *((_QWORD *)v24 + 37) = 0x1000000000;
  v24[19] = 0u;
  v24[20] = 0u;
  *((_QWORD *)v24 + 42) = 0;
  *(_QWORD *)v24 = &unk_1E0E4B9F8;
  *((_QWORD *)v24 + 1) = &mlir::mps::MPSSerializationPass::resolveTypeID(void)::id;
  v34 = (uint64_t)v24;
  mlir::OpPassManager::addPass(v35, &v34);
  v25 = v34;
  v34 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (!mlir::PassManager::run((mlir::PassManager *)v35, v36))
  {
    mlir::PassManager::~PassManager((mlir::PassManager *)v35);
    v32 = v36;
    if (!v36)
      return 0;
    goto LABEL_23;
  }
  v38 = Context;
  Dialect = mlir::MLIRContext::getOrLoadDialect(Context, (uint64_t)"mps", 3, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mps::MPSDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mps::MPSDialect>(void)::{lambda(void)#1}>, (uint64_t)&v38);
  v27 = *((_BYTE *)Dialect + 40);
  *((_BYTE *)Dialect + 40) = 1;
  if (mlir::detail::downgradeToVersion(v36, a2))
  {
    if (a5)
      a5(a6, v36);
    LoadedDialect = mlir::MLIRContext::getLoadedDialect((uint64_t *)Context, (uint64_t)"mps", 3);
    v29 = mlir::Dialect::getRegisteredInterface<mlir::BytecodeDialectInterface>(LoadedDialect);
    v30 = *(_DWORD *)(a2 + 16);
    v29[4] = *(_QWORD *)(a2 + 8);
    *((_DWORD *)v29 + 10) = v30;
    mlir::writeBytecodeToFile(v36, a3, a4, v31);
  }
  *((_BYTE *)Dialect + 40) = v27;
  mlir::PassManager::~PassManager((mlir::PassManager *)v35);
  v32 = v36;
  if (v36)
LABEL_23:
    mlir::Operation::erase(v32);
  return 0;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ModuleOp>(mlir::StringAttr **a1, uint64_t a2)
{
  uint64_t *Context;
  uint64_t v5;
  char v6;
  mlir::GenericProgramPoint *v7;
  mlir::GenericProgramPoint *v8;
  _BYTE v10[24];
  uint64_t v11;
  const char *v12;
  __int16 v13;
  uint64_t v14[4];
  __int16 v15;
  _QWORD v16[39];

  v16[38] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  v5 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.module", (const unsigned __int8 *)0xA, Context);
  if (!v6)
  {
    v15 = 1283;
    v14[2] = (uint64_t)"mps.module";
    v14[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v13 = 259;
    llvm::operator+(v14, (uint64_t *)&v12, (uint64_t)v16);
    llvm::report_fatal_error((llvm::Twine *)v16, 1);
  }
  mlir::OperationState::OperationState(v16, a2, v5);
  v10[0] = 0;
  v10[16] = 0;
  mlir::ModuleOp::build(a1, (mlir::OperationState *)v16, (uint64_t)v10);
  v7 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v16);
  if (*(_UNKNOWN **)(*((_QWORD *)v7 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ModuleOp,void>::id)
    v8 = v7;
  else
    v8 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v16);
  return v8;
}

void mlir::mps::importMPSModule(uint64_t ***a1@<X0>, mlir::StringAttr **a2@<X1>, mlir::GenericProgramPoint **a3@<X8>)
{
  const llvm::MemoryBuffer *v6;
  mlir::StringAttr *v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  mlir::Dialect *Dialect;
  char v12;
  mlir::Operation::CloneOptions *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  llvm *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  _OWORD *v32;
  uint64_t v33;
  mlir::GenericProgramPoint *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _OWORD v51[2];
  _BYTE v52[32];
  mlir::GenericProgramPoint *v53;
  mlir::StringAttr *v54[4];
  __int128 v55;
  llvm *v56[2];
  uint64_t v57;
  mlir::GenericProgramPoint *v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];
  void *v62;
  uint64_t v63;
  _BYTE v64[48];
  _OWORD v65[2];
  _QWORD v66[6];

  v66[5] = *MEMORY[0x1E0C80C00];
  v6 = (const llvm::MemoryBuffer *)***a1;
  v7 = *a2;
  v8 = (const char *)(*(uint64_t (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v6 + 16))(v6);
  v10 = mlir::FileLineColLoc::get(v7, v8, v9, 0, 0);
  *(_QWORD *)&v55 = *a2;
  Dialect = mlir::MLIRContext::getOrLoadDialect((_QWORD *)v55, (uint64_t)"mps", 3, (uint64_t)&mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::mps::MPSDialect * mlir::MLIRContext::getOrLoadDialect<mlir::mps::MPSDialect>(void)::{lambda(void)#1}>, (uint64_t)&v55);
  v12 = *((_BYTE *)Dialect + 40);
  *((_BYTE *)Dialect + 40) = 1;
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v52, v6);
  if (!mlir::isBytecode((uint64_t)v52))
  {
    *(_QWORD *)&v55 = *a2;
    BYTE8(v55) = 1;
    v56[0] = 0;
    v56[1] = 0;
    LODWORD(v57) = 0;
    v58 = 0;
    v59 = v61;
    v60 = 0x600000000;
    v62 = v64;
    v63 = 0x600000000;
    v54[0] = 0;
    memset(v65, 0, sizeof(v65));
    v66[0] = v66;
    v66[1] = v66;
    memset(&v66[2], 0, 24);
    if (mlir::parseSourceFile(a1, (uint64_t)v65, (uint64_t ***)&v55, (uint64_t *)v54))
    {
      mlir::detail::constructContainerOpForParserIfNecessary<mlir::ModuleOp>((uint64_t)v65, (mlir::StringAttr *)v55, (uint64_t)v54[0], a3);
      mlir::Block::~Block((mlir::Block *)v65);
      v16 = (char *)v62;
      v17 = v63;
      if (!(_DWORD)v63)
        goto LABEL_16;
    }
    else
    {
      *a3 = 0;
      mlir::Block::~Block((mlir::Block *)v65);
      v16 = (char *)v62;
      v17 = v63;
      if (!(_DWORD)v63)
        goto LABEL_16;
    }
    v18 = 8 * v17;
    v19 = v16 - 8;
    do
    {
      v20 = *(_QWORD *)&v19[v18];
      *(_QWORD *)&v19[v18] = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v18 -= 8;
    }
    while (v18);
    v16 = (char *)v62;
LABEL_16:
    if (v16 != v64)
      free(v16);
    v21 = v59;
    if ((_DWORD)v60)
    {
      v22 = 8 * v60;
      v23 = (char *)v59 - 8;
      do
      {
        v24 = *(_QWORD *)&v23[v22];
        *(_QWORD *)&v23[v22] = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v22 -= 8;
      }
      while (v22);
      v21 = v59;
    }
    if (v21 != v61)
      free(v21);
    v25 = v56[0];
    if ((_DWORD)v57)
    {
      v26 = 24 * v57;
      v27 = (uint64_t *)((char *)v56[0] + 16);
      do
      {
        if ((unint64_t)*(v27 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v28 = *v27;
          *v27 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        v27 += 3;
        v26 -= 24;
      }
      while (v26);
      v25 = v56[0];
      v29 = 24 * v57;
    }
    else
    {
      v29 = 0;
    }
    llvm::deallocate_buffer(v25, (void *)v29);
  }
  v55 = 0u;
  *(_OWORD *)v56 = 0u;
  v57 = (uint64_t)&v57;
  v58 = (mlir::GenericProgramPoint *)&v57;
  v60 = 0;
  v61[0] = 0;
  v59 = 0;
  llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v51, v6);
  if (!mlir::readBytecodeFile(v51, (uint64_t)&v55, a2))
    goto LABEL_6;
  mlir::GenericProgramPoint::~GenericProgramPoint(v58);
  if (v13)
  {
    v14 = (uint64_t)v13;
    if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
    {
      v49 = mlir::Operation::CloneOptions::all(v13);
      mlir::Operation::clone(v14, v49);
    }
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v58);
  if (*(_UNKNOWN **)(*(_QWORD *)(v15 + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ModuleOp,void>::id)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v58);
    v31 = v30;
    mlir::PassManager::PassManager(v65, (uint64_t)*a2, "any", 3uLL, 1);
    v32 = operator new(0x158uLL);
    v32[2] = 0u;
    v32[3] = 0u;
    v32[4] = 0u;
    v32[5] = 0u;
    v32[6] = 0u;
    v32[7] = 0u;
    v32[8] = 0u;
    v32[9] = 0u;
    v32[10] = 0u;
    v32[11] = 0u;
    v32[12] = 0u;
    v32[13] = 0u;
    v32[14] = 0u;
    v32[15] = 0u;
    v32[16] = 0u;
    v32[17] = 0u;
    *((_QWORD *)v32 + 2) = "mps.module";
    *((_QWORD *)v32 + 3) = 10;
    *((_BYTE *)v32 + 32) = 1;
    v32[9] = 0u;
    v32[10] = 0u;
    v32[8] = 0u;
    *((_QWORD *)v32 + 22) = 0;
    *((_QWORD *)v32 + 23) = (char *)v32 + 200;
    *((_QWORD *)v32 + 29) = (char *)v32 + 248;
    *((_DWORD *)v32 + 49) = 4;
    *((_DWORD *)v32 + 61) = 4;
    *((_QWORD *)v32 + 35) = 0;
    *((_QWORD *)v32 + 36) = 0;
    *((_QWORD *)v32 + 37) = 0x1000000000;
    v32[19] = 0u;
    v32[20] = 0u;
    *((_QWORD *)v32 + 42) = 0;
    *(_QWORD *)v32 = &unk_1E0E4BB78;
    *((_QWORD *)v32 + 1) = &mlir::mps::MPSDeserializationPass::resolveTypeID(void)::id;
    v50 = (uint64_t)v32;
    mlir::OpPassManager::addPass((_BYTE **)v65, &v50);
    v33 = v50;
    v50 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    if (mlir::PassManager::run((mlir::PassManager *)v65, (mlir::Operation *)v31))
    {
      v54[0] = *a2;
      memset(&v54[1], 0, 24);
      v34 = mlir::OpBuilder::create<mlir::ModuleOp>(v54, v10);
      v35 = (((unint64_t)v34
            + 16 * (((unint64_t)*((unsigned int *)v34 + 11) >> 23) & 1)
            + (((unint64_t)*((unsigned int *)v34 + 11) >> 21) & 0x7F8)
            + 71) & 0xFFFFFFFFFFFFFFF8)
          + 32 * *((unsigned int *)v34 + 10);
      v37 = v31[10];
      v36 = v31[11];
      v53 = v34;
      v38 = *(_QWORD *)(v35 + 8);
      v39 = v38 == 0;
      v40 = v38 - 8;
      if (v39)
        v40 = 0;
      v41 = *(_QWORD *)((((unint64_t)&v31[4 * ((v36 >> 23) & 1) + 17] + ((v36 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * v37
                      + 8);
      if (v41)
        v42 = v41 - 8;
      else
        v42 = 0;
      v43 = (uint64_t *)(v42 + 32);
      if (*(_QWORD *)(v42 + 32) != v42 + 32)
      {
        v44 = *(uint64_t **)(v40 + 40);
        if (v44 != v43)
        {
          v45 = *(uint64_t **)(v42 + 40);
          llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v40 + 32, v42 + 32, (uint64_t)v45, v42 + 32);
          if (v45 != v43)
          {
            v46 = *v43;
            v47 = *v45;
            *(_QWORD *)(v47 + 8) = v43;
            *v43 = v47;
            v48 = *v44;
            *(_QWORD *)(v46 + 8) = v44;
            *v45 = v48;
            *(_QWORD *)(v48 + 8) = v45;
            *v44 = v46;
          }
        }
      }
      if (!mlir::ModuleOp::verifyInvariants((uint64_t **)&v53))
      {
        mlir::Operation::erase(v34);
        v34 = 0;
      }
      *a3 = v34;
    }
    else
    {
      *a3 = 0;
    }
    mlir::PassManager::~PassManager((mlir::PassManager *)v65);
  }
  else
  {
LABEL_6:
    *a3 = 0;
  }
  mlir::Block::~Block((mlir::Block *)&v55);
  *((_BYTE *)Dialect + 40) = v12;
}

void mlir::detail::constructContainerOpForParserIfNecessary<mlir::ModuleOp>(uint64_t a1@<X0>, mlir::StringAttr *a2@<X1>, uint64_t a3@<X2>, mlir::GenericProgramPoint **a4@<X8>)
{
  mlir::GenericProgramPoint *v8;
  mlir::GenericProgramPoint *v9;
  uint64_t *v10;
  BOOL v11;
  mlir::GenericProgramPoint *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mlir::GenericProgramPoint *v17;
  mlir::GenericProgramPoint *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  mlir::GenericProgramPoint *v23;
  mlir::StringAttr *v24[4];

  v8 = (mlir::GenericProgramPoint *)(a1 + 32);
  v9 = *(mlir::GenericProgramPoint **)(a1 + 40);
  if (v9 != v8
    && *((mlir::GenericProgramPoint **)v9 + 1) == v8
    && ((mlir::GenericProgramPoint::~GenericProgramPoint(v9), v10)
      ? (v11 = *(_QWORD *)(v10[6] + 16) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::ModuleOp,void>::id)
      : (v11 = 0),
        v11))
  {
    v22 = v10;
    mlir::Operation::remove(v10);
    *a4 = (mlir::GenericProgramPoint *)v22;
  }
  else
  {
    v24[0] = a2;
    memset(&v24[1], 0, 24);
    v12 = mlir::OpBuilder::create<mlir::ModuleOp>(v24, a3);
    v14 = *((unsigned int *)v12 + 10);
    v13 = *((unsigned int *)v12 + 11);
    v23 = v12;
    v15 = *(_QWORD *)((((unint64_t)v12 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                    + 32 * v14
                    + 8);
    if (v15)
      v16 = v15 - 8;
    else
      v16 = 0;
    if (*(mlir::GenericProgramPoint **)v8 != v8)
    {
      v17 = *(mlir::GenericProgramPoint **)(v16 + 40);
      if (v17 != v8)
      {
        v18 = *(mlir::GenericProgramPoint **)(a1 + 40);
        llvm::ilist_traits<mlir::Operation>::transferNodesFromList(v16 + 32, (uint64_t)v8, (uint64_t)v18, (uint64_t)v8);
        if (v18 != v8)
        {
          v19 = *(_QWORD **)v8;
          v20 = *(_QWORD *)v18;
          *(_QWORD *)(v20 + 8) = v8;
          *(_QWORD *)v8 = v20;
          v21 = *(_QWORD *)v17;
          v19[1] = v17;
          *(_QWORD *)v18 = v21;
          *(_QWORD *)(v21 + 8) = v18;
          *(_QWORD *)v17 = v19;
        }
      }
    }
    if (!mlir::ModuleOp::verifyInvariants((uint64_t **)&v23))
    {
      mlir::Operation::erase(v12);
      v12 = 0;
    }
    *a4 = v12;
  }
}

void mlir::mps::MPSSerializationPass::~MPSSerializationPass(mlir::mps::MPSSerializationPass *this)
{
  void *v1;

  mlir::Pass::~Pass(this);
  operator delete(v1);
}

const char *mlir::PassWrapper<mlir::mps::MPSSerializationPass,mlir::OperationPass<mlir::mps::serialization::ModuleOp>>::getName()
{
  unint64_t v0;
  unint64_t v1;
  const char *v2;
  uint64_t v3;
  const char *v5;
  unint64_t v6;

  v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSSerializationPass]";
  v6 = 81;
  v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0)
    v1 = v0;
  else
    v1 = v6;
  v2 = &v5[v1];
  if (v6 - v1 >= 0x12)
    v3 = 18;
  else
    v3 = v6 - v1;
  return &v2[v3];
}

_QWORD *mlir::mps::MPSSerializationPass::getDependentDialects(mlir::mps::MPSSerializationPass *this, uint64_t **a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = off_1E0E50948;
  v12 = v11;
  v3 = 4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::func::FuncDialect,void>::id, "func", 4uLL, v11);
  v4 = v12;
  if (v12 == v11)
  {
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v3))();
LABEL_6:
  v11[0] = off_1E0E50870;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v11[0] = off_1E0E508B8;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::scf::SCFDialect,void>::id, "scf", 3uLL, v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v11[0] = off_1E0E50A20;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::tensor::TensorDialect,void>::id, "tensor", 6uLL, v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

const char *mlir::mps::MPSSerializationPass::getArgument(mlir::mps::MPSSerializationPass *this)
{
  return "mps-serialize";
}

const char *mlir::mps::MPSSerializationPass::getDescription(mlir::mps::MPSSerializationPass *this)
{
  return "Converts module to a fully versioned MPS module";
}

void mlir::mps::MPSSerializationPass::runOnOperation(mlir::mps::MPSSerializationPass *this)
{
  mlir::ForwardIterator *v2;
  uint64_t Context;
  mlir::Attribute *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  const char *v86;
  unint64_t v87;
  char *v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  int64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  void *v115;
  unint64_t v116;
  unint64_t v117;
  const char *v118;
  unint64_t v119;
  uint64_t v120;
  const char *v121;
  unint64_t v122;
  char *v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  int64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  void *v150;
  unint64_t v151;
  unint64_t v152;
  const char *v153;
  unint64_t v154;
  uint64_t v155;
  const char *v156;
  unint64_t v157;
  char *v158;
  int64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  int64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  void *v185;
  unint64_t v186;
  unint64_t v187;
  const char *v188;
  unint64_t v189;
  uint64_t v190;
  const char *v191;
  unint64_t v192;
  char *v193;
  int64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  int64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  void *v220;
  unint64_t v221;
  unint64_t v222;
  const char *v223;
  unint64_t v224;
  uint64_t v225;
  const char *v226;
  unint64_t v227;
  char *v228;
  int64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  int64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  const mlir::FrozenRewritePatternSet *v251;
  _QWORD v252[4];
  const char *v253;
  unint64_t v254;
  void *v255;
  void *__p[2];
  __int128 v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD v260[8];
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268[3];
  int v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD v272[2];
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  v252[0] = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  memset(&v252[1], 0, 24);
  v2 = (mlir::ForwardIterator *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v268[0] = (uint64_t)v252;
  v255 = v268;
  mlir::detail::walk<mlir::ForwardIterator>(v2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps20MPSSerializationPass14runOnOperationEvEUlNS1_4func6FuncOpEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v255, 1);
  Context = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v268[1] = 0;
  v268[2] = 0;
  v268[0] = (uint64_t)off_1E0E2B708;
  v269 = 0;
  v274 = 0;
  v275 = 0;
  v270 = v272;
  v271 = 0;
  v272[0] = 0;
  v272[1] = 0;
  v273 = 0;
  v276 = 0x1000000000;
  v277 = 0;
  v278 = 0;
  v279 = 0x2800000000;
  v280 = 0;
  v281 = Context;
  v255 = &__p[1];
  __p[1] = "mps";
  *(_QWORD *)&v257 = 3;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1])
    free(v255);
  v255 = (void *)mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  *(_OWORD *)__p = 0u;
  v257 = 0u;
  v258 = v260;
  v259 = 0x600000000;
  v260[6] = 0;
  v260[7] = 0;
  v261 = 0;
  v262 = 0;
  v263 = 0;
  v264 = 0x2800000000;
  v265 = 0;
  v4 = (mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24);
  v266 = 0;
  v267 = 0x2800000000;
  v5 = mlir::Attribute::getContext(v4);
  v6 = operator new(0x68uLL);
  mlir::PatternBenefit::PatternBenefit(&v253, 1);
  mlir::Pattern::Pattern((uint64_t)(v6 + 1), (uint64_t)"scf.for", 7, (__int16)v253, v5, 0, 0);
  v6[12] = 0;
  *v6 = &off_1E0E48970;
  if (v6[9])
  {
    v7 = *((unsigned int *)v6 + 22);
    if (v7 <= *((_DWORD *)v6 + 23))
      goto LABEL_5;
  }
  else
  {
    v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertForOp<mlir::scf::Fo"
           "rOp, mlir::mps::serialization::ForOp>]";
    v254 = 147;
    v11 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
    if (v254 >= v11)
      v12 = v11;
    else
      v12 = v254;
    v13 = &v253[v12];
    v14 = v254 - v12;
    if (v254 - v12 >= 0x12)
      v15 = 18;
    else
      v15 = v254 - v12;
    v16 = &v13[v15];
    v17 = v14 - v15;
    if (v17 >= v17 - 1)
      --v17;
    v6[8] = v16;
    v6[9] = v17;
    v7 = *((unsigned int *)v6 + 22);
    if (v7 <= *((_DWORD *)v6 + 23))
    {
LABEL_5:
      *((_DWORD *)v6 + 22) = v7;
      v9 = (char *)__p[1];
      v8 = v257;
      if (__p[1] < (void *)v257)
      {
LABEL_6:
        *(_QWORD *)v9 = v6;
        v10 = v9 + 8;
        goto LABEL_41;
      }
LABEL_17:
      v18 = (char *)__p[0];
      v19 = v9 - (char *)__p[0];
      v20 = (v9 - (char *)__p[0]) >> 3;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        goto LABEL_270;
      v22 = v8 - (unint64_t)__p[0];
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          goto LABEL_271;
        v24 = (char *)operator new(8 * v23);
        v25 = &v24[8 * v20];
        v26 = &v24[8 * v23];
        *(_QWORD *)v25 = v6;
        v10 = v25 + 8;
        v27 = v9 - v18;
        if (v9 != v18)
          goto LABEL_26;
      }
      else
      {
        v24 = 0;
        v25 = (char *)(8 * v20);
        v26 = 0;
        *(_QWORD *)(8 * v20) = v6;
        v10 = (void *)(8 * v20 + 8);
        v27 = v9 - v18;
        if (v9 != v18)
        {
LABEL_26:
          v28 = v27 - 8;
          if (v28 < 0x78
            || &v9[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] < v25 && &v24[v19 - (v28 & 0xFFFFFFFFFFFFFFF8) - 8] < v9)
          {
            goto LABEL_274;
          }
          v29 = (v28 >> 3) + 1;
          v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = &v9[-v30];
          v25 -= v30;
          v32 = &v24[8 * v20 - 16];
          v33 = v9 - 16;
          v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v36 = *((_OWORD *)v33 - 1);
            v35 = *(_OWORD *)v33;
            *((_OWORD *)v33 - 1) = 0uLL;
            *(_OWORD *)v33 = 0uLL;
            *((_OWORD *)v32 - 1) = v36;
            *(_OWORD *)v32 = v35;
            v32 -= 32;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          v9 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_274:
            do
            {
              v37 = *((_QWORD *)v9 - 1);
              v9 -= 8;
              *(_QWORD *)v9 = 0;
              *((_QWORD *)v25 - 1) = v37;
              v25 -= 8;
            }
            while (v9 != v18);
          }
          v9 = (char *)__p[0];
          v38 = (char *)__p[1];
          __p[0] = v25;
          __p[1] = v10;
          *(_QWORD *)&v257 = v26;
          while (v38 != v9)
          {
            v40 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            v39 = v40;
            *(_QWORD *)v38 = 0;
            if (v40)
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          }
          goto LABEL_39;
        }
      }
      __p[0] = v25;
      __p[1] = v10;
      *(_QWORD *)&v257 = v26;
LABEL_39:
      if (v9)
        operator delete(v9);
LABEL_41:
      __p[1] = v10;
      v41 = operator new(0x68uLL);
      mlir::PatternBenefit::PatternBenefit(&v253, 1);
      mlir::Pattern::Pattern((uint64_t)(v41 + 1), (uint64_t)"scf.while", 9, (__int16)v253, v5, 0, 0);
      v41[12] = 0;
      *v41 = &off_1E0E48D00;
      if (v41[9])
      {
        v42 = *((unsigned int *)v41 + 22);
        if (v42 <= *((_DWORD *)v41 + 23))
          goto LABEL_43;
      }
      else
      {
        v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertWhileOp<mlir::s"
               "cf::WhileOp, mlir::mps::serialization::WhileOp>]";
        v254 = 153;
        v46 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
        if (v254 >= v46)
          v47 = v46;
        else
          v47 = v254;
        v48 = &v253[v47];
        v49 = v254 - v47;
        if (v254 - v47 >= 0x12)
          v50 = 18;
        else
          v50 = v254 - v47;
        v51 = &v48[v50];
        v52 = v49 - v50;
        if (v52 >= v52 - 1)
          --v52;
        v41[8] = v51;
        v41[9] = v52;
        v42 = *((unsigned int *)v41 + 22);
        if (v42 <= *((_DWORD *)v41 + 23))
        {
LABEL_43:
          *((_DWORD *)v41 + 22) = v42;
          v44 = (char *)__p[1];
          v43 = v257;
          if (__p[1] < (void *)v257)
          {
LABEL_44:
            *(_QWORD *)v44 = v41;
            v45 = v44 + 8;
            goto LABEL_79;
          }
LABEL_55:
          v53 = (char *)__p[0];
          v54 = v44 - (char *)__p[0];
          v55 = (v44 - (char *)__p[0]) >> 3;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
            goto LABEL_270;
          v57 = v43 - (unint64_t)__p[0];
          if (v57 >> 2 > v56)
            v56 = v57 >> 2;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            if (v58 >> 61)
              goto LABEL_271;
            v59 = (char *)operator new(8 * v58);
            v60 = &v59[8 * v55];
            v61 = &v59[8 * v58];
            *(_QWORD *)v60 = v41;
            v45 = v60 + 8;
            v62 = v44 - v53;
            if (v44 != v53)
              goto LABEL_64;
          }
          else
          {
            v59 = 0;
            v60 = (char *)(8 * v55);
            v61 = 0;
            *(_QWORD *)(8 * v55) = v41;
            v45 = (void *)(8 * v55 + 8);
            v62 = v44 - v53;
            if (v44 != v53)
            {
LABEL_64:
              v63 = v62 - 8;
              if (v63 < 0x78
                || &v44[-(v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v60 && &v59[v54 - (v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v44)
              {
                goto LABEL_275;
              }
              v64 = (v63 >> 3) + 1;
              v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              v66 = &v44[-v65];
              v60 -= v65;
              v67 = &v59[8 * v55 - 16];
              v68 = v44 - 16;
              v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *((_OWORD *)v68 - 1);
                v70 = *(_OWORD *)v68;
                *((_OWORD *)v68 - 1) = 0uLL;
                *(_OWORD *)v68 = 0uLL;
                *((_OWORD *)v67 - 1) = v71;
                *(_OWORD *)v67 = v70;
                v67 -= 32;
                v68 -= 32;
                v69 -= 4;
              }
              while (v69);
              v44 = v66;
              if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_275:
                do
                {
                  v72 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  *(_QWORD *)v44 = 0;
                  *((_QWORD *)v60 - 1) = v72;
                  v60 -= 8;
                }
                while (v44 != v53);
              }
              v44 = (char *)__p[0];
              v73 = (char *)__p[1];
              __p[0] = v60;
              __p[1] = v45;
              *(_QWORD *)&v257 = v61;
              while (v73 != v44)
              {
                v75 = *((_QWORD *)v73 - 1);
                v73 -= 8;
                v74 = v75;
                *(_QWORD *)v73 = 0;
                if (v75)
                  (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
              }
              goto LABEL_77;
            }
          }
          __p[0] = v60;
          __p[1] = v45;
          *(_QWORD *)&v257 = v61;
LABEL_77:
          if (v44)
            operator delete(v44);
LABEL_79:
          __p[1] = v45;
          v76 = operator new(0x68uLL);
          mlir::PatternBenefit::PatternBenefit(&v253, 1);
          mlir::Pattern::Pattern((uint64_t)(v76 + 1), (uint64_t)"scf.if", 6, (__int16)v253, v5, 0, 0);
          v76[12] = 0;
          *v76 = &off_1E0E48848;
          if (v76[9])
          {
            v77 = *((unsigned int *)v76 + 22);
            if (v77 <= *((_DWORD *)v76 + 23))
              goto LABEL_81;
          }
          else
          {
            v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertIfOp<mlir::"
                   "scf::IfOp, mlir::mps::serialization::IfOp>]";
            v254 = 144;
            v81 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
            if (v254 >= v81)
              v82 = v81;
            else
              v82 = v254;
            v83 = &v253[v82];
            v84 = v254 - v82;
            if (v254 - v82 >= 0x12)
              v85 = 18;
            else
              v85 = v254 - v82;
            v86 = &v83[v85];
            v87 = v84 - v85;
            if (v87 >= v87 - 1)
              --v87;
            v76[8] = v86;
            v76[9] = v87;
            v77 = *((unsigned int *)v76 + 22);
            if (v77 <= *((_DWORD *)v76 + 23))
            {
LABEL_81:
              *((_DWORD *)v76 + 22) = v77;
              v79 = (char *)__p[1];
              v78 = v257;
              if (__p[1] < (void *)v257)
              {
LABEL_82:
                *(_QWORD *)v79 = v76;
                v80 = v79 + 8;
                goto LABEL_117;
              }
LABEL_93:
              v88 = (char *)__p[0];
              v89 = v79 - (char *)__p[0];
              v90 = (v79 - (char *)__p[0]) >> 3;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61)
                goto LABEL_270;
              v92 = v78 - (unint64_t)__p[0];
              if (v92 >> 2 > v91)
                v91 = v92 >> 2;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v91;
              if (v93)
              {
                if (v93 >> 61)
                  goto LABEL_271;
                v94 = (char *)operator new(8 * v93);
                v95 = &v94[8 * v90];
                v96 = &v94[8 * v93];
                *(_QWORD *)v95 = v76;
                v80 = v95 + 8;
                v97 = v79 - v88;
                if (v79 != v88)
                  goto LABEL_102;
              }
              else
              {
                v94 = 0;
                v95 = (char *)(8 * v90);
                v96 = 0;
                *(_QWORD *)(8 * v90) = v76;
                v80 = (void *)(8 * v90 + 8);
                v97 = v79 - v88;
                if (v79 != v88)
                {
LABEL_102:
                  v98 = v97 - 8;
                  if (v98 < 0x78
                    || &v79[-(v98 & 0xFFFFFFFFFFFFFFF8) - 8] < v95
                    && &v94[v89 - (v98 & 0xFFFFFFFFFFFFFFF8) - 8] < v79)
                  {
                    goto LABEL_276;
                  }
                  v99 = (v98 >> 3) + 1;
                  v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                  v101 = &v79[-v100];
                  v95 -= v100;
                  v102 = &v94[8 * v90 - 16];
                  v103 = v79 - 16;
                  v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v106 = *((_OWORD *)v103 - 1);
                    v105 = *(_OWORD *)v103;
                    *((_OWORD *)v103 - 1) = 0uLL;
                    *(_OWORD *)v103 = 0uLL;
                    *((_OWORD *)v102 - 1) = v106;
                    *(_OWORD *)v102 = v105;
                    v102 -= 32;
                    v103 -= 32;
                    v104 -= 4;
                  }
                  while (v104);
                  v79 = v101;
                  if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_276:
                    do
                    {
                      v107 = *((_QWORD *)v79 - 1);
                      v79 -= 8;
                      *(_QWORD *)v79 = 0;
                      *((_QWORD *)v95 - 1) = v107;
                      v95 -= 8;
                    }
                    while (v79 != v88);
                  }
                  v79 = (char *)__p[0];
                  v108 = (char *)__p[1];
                  __p[0] = v95;
                  __p[1] = v80;
                  *(_QWORD *)&v257 = v96;
                  while (v108 != v79)
                  {
                    v110 = *((_QWORD *)v108 - 1);
                    v108 -= 8;
                    v109 = v110;
                    *(_QWORD *)v108 = 0;
                    if (v110)
                      (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
                  }
                  goto LABEL_115;
                }
              }
              __p[0] = v95;
              __p[1] = v80;
              *(_QWORD *)&v257 = v96;
LABEL_115:
              if (v79)
                operator delete(v79);
LABEL_117:
              __p[1] = v80;
              v111 = operator new(0x68uLL);
              mlir::PatternBenefit::PatternBenefit(&v253, 1);
              mlir::Pattern::Pattern((uint64_t)(v111 + 1), (uint64_t)"scf.condition", 13, (__int16)v253, v5, 0, 0);
              v111[12] = 0;
              *v111 = &off_1E0E49788;
              if (v111[9])
              {
                v112 = *((unsigned int *)v111 + 22);
                if (v112 <= *((_DWORD *)v111 + 23))
                  goto LABEL_119;
              }
              else
              {
                v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertConditi"
                       "onOp<mlir::scf::ConditionOp, mlir::mps::serialization::ConditionOp>]";
                v254 = 165;
                v116 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                if (v254 >= v116)
                  v117 = v116;
                else
                  v117 = v254;
                v118 = &v253[v117];
                v119 = v254 - v117;
                if (v254 - v117 >= 0x12)
                  v120 = 18;
                else
                  v120 = v254 - v117;
                v121 = &v118[v120];
                v122 = v119 - v120;
                if (v122 >= v122 - 1)
                  --v122;
                v111[8] = v121;
                v111[9] = v122;
                v112 = *((unsigned int *)v111 + 22);
                if (v112 <= *((_DWORD *)v111 + 23))
                {
LABEL_119:
                  *((_DWORD *)v111 + 22) = v112;
                  v114 = (char *)__p[1];
                  v113 = v257;
                  if (__p[1] < (void *)v257)
                  {
LABEL_120:
                    *(_QWORD *)v114 = v111;
                    v115 = v114 + 8;
                    goto LABEL_155;
                  }
LABEL_131:
                  v123 = (char *)__p[0];
                  v124 = v114 - (char *)__p[0];
                  v125 = (v114 - (char *)__p[0]) >> 3;
                  v126 = v125 + 1;
                  if ((unint64_t)(v125 + 1) >> 61)
                    goto LABEL_270;
                  v127 = v113 - (unint64_t)__p[0];
                  if (v127 >> 2 > v126)
                    v126 = v127 >> 2;
                  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
                    v128 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v128 = v126;
                  if (v128)
                  {
                    if (v128 >> 61)
                      goto LABEL_271;
                    v129 = (char *)operator new(8 * v128);
                    v130 = &v129[8 * v125];
                    v131 = &v129[8 * v128];
                    *(_QWORD *)v130 = v111;
                    v115 = v130 + 8;
                    v132 = v114 - v123;
                    if (v114 != v123)
                      goto LABEL_140;
                  }
                  else
                  {
                    v129 = 0;
                    v130 = (char *)(8 * v125);
                    v131 = 0;
                    *(_QWORD *)(8 * v125) = v111;
                    v115 = (void *)(8 * v125 + 8);
                    v132 = v114 - v123;
                    if (v114 != v123)
                    {
LABEL_140:
                      v133 = v132 - 8;
                      if (v133 < 0x78
                        || &v114[-(v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v130
                        && &v129[v124 - (v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v114)
                      {
                        goto LABEL_277;
                      }
                      v134 = (v133 >> 3) + 1;
                      v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
                      v136 = &v114[-v135];
                      v130 -= v135;
                      v137 = &v129[8 * v125 - 16];
                      v138 = v114 - 16;
                      v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v141 = *((_OWORD *)v138 - 1);
                        v140 = *(_OWORD *)v138;
                        *((_OWORD *)v138 - 1) = 0uLL;
                        *(_OWORD *)v138 = 0uLL;
                        *((_OWORD *)v137 - 1) = v141;
                        *(_OWORD *)v137 = v140;
                        v137 -= 32;
                        v138 -= 32;
                        v139 -= 4;
                      }
                      while (v139);
                      v114 = v136;
                      if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_277:
                        do
                        {
                          v142 = *((_QWORD *)v114 - 1);
                          v114 -= 8;
                          *(_QWORD *)v114 = 0;
                          *((_QWORD *)v130 - 1) = v142;
                          v130 -= 8;
                        }
                        while (v114 != v123);
                      }
                      v114 = (char *)__p[0];
                      v143 = (char *)__p[1];
                      __p[0] = v130;
                      __p[1] = v115;
                      *(_QWORD *)&v257 = v131;
                      while (v143 != v114)
                      {
                        v145 = *((_QWORD *)v143 - 1);
                        v143 -= 8;
                        v144 = v145;
                        *(_QWORD *)v143 = 0;
                        if (v145)
                          (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
                      }
                      goto LABEL_153;
                    }
                  }
                  __p[0] = v130;
                  __p[1] = v115;
                  *(_QWORD *)&v257 = v131;
LABEL_153:
                  if (v114)
                    operator delete(v114);
LABEL_155:
                  __p[1] = v115;
                  v146 = operator new(0x68uLL);
                  mlir::PatternBenefit::PatternBenefit(&v253, 1);
                  mlir::Pattern::Pattern((uint64_t)(v146 + 1), (uint64_t)"scf.yield", 9, (__int16)v253, v5, 0, 0);
                  v146[12] = 0;
                  *v146 = &off_1E0E48DD0;
                  if (v146[9])
                  {
                    v147 = *((unsigned int *)v146 + 22);
                    if (v147 <= *((_DWORD *)v146 + 23))
                      goto LABEL_157;
                  }
                  else
                  {
                    v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertYie"
                           "ldOp<mlir::scf::YieldOp, mlir::mps::serialization::YieldOp>]";
                    v254 = 153;
                    v151 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                    if (v254 >= v151)
                      v152 = v151;
                    else
                      v152 = v254;
                    v153 = &v253[v152];
                    v154 = v254 - v152;
                    if (v254 - v152 >= 0x12)
                      v155 = 18;
                    else
                      v155 = v254 - v152;
                    v156 = &v153[v155];
                    v157 = v154 - v155;
                    if (v157 >= v157 - 1)
                      --v157;
                    v146[8] = v156;
                    v146[9] = v157;
                    v147 = *((unsigned int *)v146 + 22);
                    if (v147 <= *((_DWORD *)v146 + 23))
                    {
LABEL_157:
                      *((_DWORD *)v146 + 22) = v147;
                      v149 = (char *)__p[1];
                      v148 = v257;
                      if (__p[1] < (void *)v257)
                      {
LABEL_158:
                        *(_QWORD *)v149 = v146;
                        v150 = v149 + 8;
                        goto LABEL_193;
                      }
LABEL_169:
                      v158 = (char *)__p[0];
                      v159 = v149 - (char *)__p[0];
                      v160 = (v149 - (char *)__p[0]) >> 3;
                      v161 = v160 + 1;
                      if ((unint64_t)(v160 + 1) >> 61)
                        goto LABEL_270;
                      v162 = v148 - (unint64_t)__p[0];
                      if (v162 >> 2 > v161)
                        v161 = v162 >> 2;
                      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
                        v163 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v163 = v161;
                      if (v163)
                      {
                        if (v163 >> 61)
                          goto LABEL_271;
                        v164 = (char *)operator new(8 * v163);
                        v165 = &v164[8 * v160];
                        v166 = &v164[8 * v163];
                        *(_QWORD *)v165 = v146;
                        v150 = v165 + 8;
                        v167 = v149 - v158;
                        if (v149 != v158)
                          goto LABEL_178;
                      }
                      else
                      {
                        v164 = 0;
                        v165 = (char *)(8 * v160);
                        v166 = 0;
                        *(_QWORD *)(8 * v160) = v146;
                        v150 = (void *)(8 * v160 + 8);
                        v167 = v149 - v158;
                        if (v149 != v158)
                        {
LABEL_178:
                          v168 = v167 - 8;
                          if (v168 < 0x78
                            || &v149[-(v168 & 0xFFFFFFFFFFFFFFF8) - 8] < v165
                            && &v164[v159 - (v168 & 0xFFFFFFFFFFFFFFF8) - 8] < v149)
                          {
                            goto LABEL_278;
                          }
                          v169 = (v168 >> 3) + 1;
                          v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
                          v171 = &v149[-v170];
                          v165 -= v170;
                          v172 = &v164[8 * v160 - 16];
                          v173 = v149 - 16;
                          v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v176 = *((_OWORD *)v173 - 1);
                            v175 = *(_OWORD *)v173;
                            *((_OWORD *)v173 - 1) = 0uLL;
                            *(_OWORD *)v173 = 0uLL;
                            *((_OWORD *)v172 - 1) = v176;
                            *(_OWORD *)v172 = v175;
                            v172 -= 32;
                            v173 -= 32;
                            v174 -= 4;
                          }
                          while (v174);
                          v149 = v171;
                          if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_278:
                            do
                            {
                              v177 = *((_QWORD *)v149 - 1);
                              v149 -= 8;
                              *(_QWORD *)v149 = 0;
                              *((_QWORD *)v165 - 1) = v177;
                              v165 -= 8;
                            }
                            while (v149 != v158);
                          }
                          v149 = (char *)__p[0];
                          v178 = (char *)__p[1];
                          __p[0] = v165;
                          __p[1] = v150;
                          *(_QWORD *)&v257 = v166;
                          while (v178 != v149)
                          {
                            v180 = *((_QWORD *)v178 - 1);
                            v178 -= 8;
                            v179 = v180;
                            *(_QWORD *)v178 = 0;
                            if (v180)
                              (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
                          }
                          goto LABEL_191;
                        }
                      }
                      __p[0] = v165;
                      __p[1] = v150;
                      *(_QWORD *)&v257 = v166;
LABEL_191:
                      if (v149)
                        operator delete(v149);
LABEL_193:
                      __p[1] = v150;
                      v181 = operator new(0x68uLL);
                      mlir::PatternBenefit::PatternBenefit(&v253, 1);
                      mlir::Pattern::Pattern((uint64_t)(v181 + 1), (uint64_t)"tensor.from_elements", 20, (__int16)v253, v5, 0, 0);
                      v181[12] = 0;
                      *v181 = &off_1E0E4A1B8;
                      if (v181[9])
                      {
                        v182 = *((unsigned int *)v181 + 22);
                        if (v182 <= *((_DWORD *)v181 + 23))
                          goto LABEL_195;
                      }
                      else
                      {
                        v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::Conver"
                               "tFromElementsOp<mlir::tensor::FromElementsOp, mlir::mps::serialization::FromElementsOp>]";
                        v254 = 177;
                        v186 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                        if (v254 >= v186)
                          v187 = v186;
                        else
                          v187 = v254;
                        v188 = &v253[v187];
                        v189 = v254 - v187;
                        if (v254 - v187 >= 0x12)
                          v190 = 18;
                        else
                          v190 = v254 - v187;
                        v191 = &v188[v190];
                        v192 = v189 - v190;
                        if (v192 >= v192 - 1)
                          --v192;
                        v181[8] = v191;
                        v181[9] = v192;
                        v182 = *((unsigned int *)v181 + 22);
                        if (v182 <= *((_DWORD *)v181 + 23))
                        {
LABEL_195:
                          *((_DWORD *)v181 + 22) = v182;
                          v184 = (char *)__p[1];
                          v183 = v257;
                          if (__p[1] < (void *)v257)
                          {
LABEL_196:
                            *(_QWORD *)v184 = v181;
                            v185 = v184 + 8;
                            goto LABEL_231;
                          }
LABEL_207:
                          v193 = (char *)__p[0];
                          v194 = v184 - (char *)__p[0];
                          v195 = (v184 - (char *)__p[0]) >> 3;
                          v196 = v195 + 1;
                          if ((unint64_t)(v195 + 1) >> 61)
                            goto LABEL_270;
                          v197 = v183 - (unint64_t)__p[0];
                          if (v197 >> 2 > v196)
                            v196 = v197 >> 2;
                          if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8)
                            v198 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v198 = v196;
                          if (v198)
                          {
                            if (v198 >> 61)
                              goto LABEL_271;
                            v199 = (char *)operator new(8 * v198);
                            v200 = &v199[8 * v195];
                            v201 = &v199[8 * v198];
                            *(_QWORD *)v200 = v181;
                            v185 = v200 + 8;
                            v202 = v184 - v193;
                            if (v184 != v193)
                              goto LABEL_216;
                          }
                          else
                          {
                            v199 = 0;
                            v200 = (char *)(8 * v195);
                            v201 = 0;
                            *(_QWORD *)(8 * v195) = v181;
                            v185 = (void *)(8 * v195 + 8);
                            v202 = v184 - v193;
                            if (v184 != v193)
                            {
LABEL_216:
                              v203 = v202 - 8;
                              if (v203 < 0x78
                                || &v184[-(v203 & 0xFFFFFFFFFFFFFFF8) - 8] < v200
                                && &v199[v194 - (v203 & 0xFFFFFFFFFFFFFFF8) - 8] < v184)
                              {
                                goto LABEL_279;
                              }
                              v204 = (v203 >> 3) + 1;
                              v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
                              v206 = &v184[-v205];
                              v200 -= v205;
                              v207 = &v199[8 * v195 - 16];
                              v208 = v184 - 16;
                              v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v211 = *((_OWORD *)v208 - 1);
                                v210 = *(_OWORD *)v208;
                                *((_OWORD *)v208 - 1) = 0uLL;
                                *(_OWORD *)v208 = 0uLL;
                                *((_OWORD *)v207 - 1) = v211;
                                *(_OWORD *)v207 = v210;
                                v207 -= 32;
                                v208 -= 32;
                                v209 -= 4;
                              }
                              while (v209);
                              v184 = v206;
                              if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_279:
                                do
                                {
                                  v212 = *((_QWORD *)v184 - 1);
                                  v184 -= 8;
                                  *(_QWORD *)v184 = 0;
                                  *((_QWORD *)v200 - 1) = v212;
                                  v200 -= 8;
                                }
                                while (v184 != v193);
                              }
                              v184 = (char *)__p[0];
                              v213 = (char *)__p[1];
                              __p[0] = v200;
                              __p[1] = v185;
                              *(_QWORD *)&v257 = v201;
                              while (v213 != v184)
                              {
                                v215 = *((_QWORD *)v213 - 1);
                                v213 -= 8;
                                v214 = v215;
                                *(_QWORD *)v213 = 0;
                                if (v215)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
                              }
                              goto LABEL_229;
                            }
                          }
                          __p[0] = v200;
                          __p[1] = v185;
                          *(_QWORD *)&v257 = v201;
LABEL_229:
                          if (v184)
                            operator delete(v184);
LABEL_231:
                          __p[1] = v185;
                          v216 = operator new(0x68uLL);
                          mlir::PatternBenefit::PatternBenefit(&v253, 1);
                          mlir::Pattern::Pattern((uint64_t)(v216 + 1), (uint64_t)"tensor.extract", 14, (__int16)v253, v5, 0, 0);
                          v216[12] = 0;
                          *v216 = &off_1E0E491F8;
                          if (v216[9])
                          {
                            v217 = *((unsigned int *)v216 + 22);
                            if (v217 <= *((_DWORD *)v216 + 23))
                              goto LABEL_233;
                          }
                          else
                          {
                            v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::Co"
                                   "nvertExtractOp<mlir::tensor::ExtractOp, mlir::mps::serialization::ExtractOp>]";
                            v254 = 162;
                            v221 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                            if (v254 >= v221)
                              v222 = v221;
                            else
                              v222 = v254;
                            v223 = &v253[v222];
                            v224 = v254 - v222;
                            if (v254 - v222 >= 0x12)
                              v225 = 18;
                            else
                              v225 = v254 - v222;
                            v226 = &v223[v225];
                            v227 = v224 - v225;
                            if (v227 >= v227 - 1)
                              --v227;
                            v216[8] = v226;
                            v216[9] = v227;
                            v217 = *((unsigned int *)v216 + 22);
                            if (v217 <= *((_DWORD *)v216 + 23))
                            {
LABEL_233:
                              *((_DWORD *)v216 + 22) = v217;
                              v219 = (char *)__p[1];
                              v218 = v257;
                              if (__p[1] < (void *)v257)
                              {
LABEL_234:
                                *(_QWORD *)v219 = v216;
                                v220 = v219 + 8;
                                goto LABEL_269;
                              }
LABEL_245:
                              v228 = (char *)__p[0];
                              v229 = v219 - (char *)__p[0];
                              v230 = (v219 - (char *)__p[0]) >> 3;
                              v231 = v230 + 1;
                              if (!((unint64_t)(v230 + 1) >> 61))
                              {
                                v232 = v218 - (unint64_t)__p[0];
                                if (v232 >> 2 > v231)
                                  v231 = v232 >> 2;
                                if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
                                  v233 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v233 = v231;
                                if (!v233)
                                {
                                  v234 = 0;
                                  v235 = (char *)(8 * v230);
                                  v236 = 0;
                                  *(_QWORD *)(8 * v230) = v216;
                                  v220 = (void *)(8 * v230 + 8);
                                  v237 = v219 - v228;
                                  if (v219 != v228)
                                    goto LABEL_254;
                                  goto LABEL_266;
                                }
                                if (!(v233 >> 61))
                                {
                                  v234 = (char *)operator new(8 * v233);
                                  v235 = &v234[8 * v230];
                                  v236 = &v234[8 * v233];
                                  *(_QWORD *)v235 = v216;
                                  v220 = v235 + 8;
                                  v237 = v219 - v228;
                                  if (v219 != v228)
                                  {
LABEL_254:
                                    v238 = v237 - 8;
                                    if (v238 < 0x78
                                      || &v219[-(v238 & 0xFFFFFFFFFFFFFFF8) - 8] < v235
                                      && &v234[v229 - (v238 & 0xFFFFFFFFFFFFFFF8) - 8] < v219)
                                    {
                                      goto LABEL_280;
                                    }
                                    v239 = (v238 >> 3) + 1;
                                    v240 = 8 * (v239 & 0x3FFFFFFFFFFFFFFCLL);
                                    v241 = &v219[-v240];
                                    v235 -= v240;
                                    v242 = &v234[8 * v230 - 16];
                                    v243 = v219 - 16;
                                    v244 = v239 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v246 = *((_OWORD *)v243 - 1);
                                      v245 = *(_OWORD *)v243;
                                      *((_OWORD *)v243 - 1) = 0uLL;
                                      *(_OWORD *)v243 = 0uLL;
                                      *((_OWORD *)v242 - 1) = v246;
                                      *(_OWORD *)v242 = v245;
                                      v242 -= 32;
                                      v243 -= 32;
                                      v244 -= 4;
                                    }
                                    while (v244);
                                    v219 = v241;
                                    if (v239 != (v239 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
LABEL_280:
                                      do
                                      {
                                        v247 = *((_QWORD *)v219 - 1);
                                        v219 -= 8;
                                        *(_QWORD *)v219 = 0;
                                        *((_QWORD *)v235 - 1) = v247;
                                        v235 -= 8;
                                      }
                                      while (v219 != v228);
                                    }
                                    v219 = (char *)__p[0];
                                    v248 = (char *)__p[1];
                                    __p[0] = v235;
                                    __p[1] = v220;
                                    *(_QWORD *)&v257 = v236;
                                    while (v248 != v219)
                                    {
                                      v250 = *((_QWORD *)v248 - 1);
                                      v248 -= 8;
                                      v249 = v250;
                                      *(_QWORD *)v248 = 0;
                                      if (v250)
                                        (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
                                    }
                                    goto LABEL_267;
                                  }
LABEL_266:
                                  __p[0] = v235;
                                  __p[1] = v220;
                                  *(_QWORD *)&v257 = v236;
LABEL_267:
                                  if (v219)
                                    operator delete(v219);
LABEL_269:
                                  __p[1] = v220;
                                  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v253, &v255, 0, 0, 0, 0);
                                  mlir::applyFullConversion(v2, (mlir::Operation *)v268, (const mlir::ConversionTarget *)&v253, v251);
                                }
LABEL_271:
                                std::__throw_bad_array_new_length[abi:nn180100]();
                              }
LABEL_270:
                              abort();
                            }
                          }
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v216 + 10), v216 + 12, v217, 16);
                          *((_DWORD *)v216 + 22) = *((_DWORD *)v216 + 22);
                          v219 = (char *)__p[1];
                          v218 = v257;
                          if (__p[1] < (void *)v257)
                            goto LABEL_234;
                          goto LABEL_245;
                        }
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v181 + 10), v181 + 12, v182, 16);
                      *((_DWORD *)v181 + 22) = *((_DWORD *)v181 + 22);
                      v184 = (char *)__p[1];
                      v183 = v257;
                      if (__p[1] < (void *)v257)
                        goto LABEL_196;
                      goto LABEL_207;
                    }
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v146 + 10), v146 + 12, v147, 16);
                  *((_DWORD *)v146 + 22) = *((_DWORD *)v146 + 22);
                  v149 = (char *)__p[1];
                  v148 = v257;
                  if (__p[1] < (void *)v257)
                    goto LABEL_158;
                  goto LABEL_169;
                }
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v111 + 10), v111 + 12, v112, 16);
              *((_DWORD *)v111 + 22) = *((_DWORD *)v111 + 22);
              v114 = (char *)__p[1];
              v113 = v257;
              if (__p[1] < (void *)v257)
                goto LABEL_120;
              goto LABEL_131;
            }
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v76 + 10), v76 + 12, v77, 16);
          *((_DWORD *)v76 + 22) = *((_DWORD *)v76 + 22);
          v79 = (char *)__p[1];
          v78 = v257;
          if (__p[1] < (void *)v257)
            goto LABEL_82;
          goto LABEL_93;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v41 + 10), v41 + 12, v42, 16);
      *((_DWORD *)v41 + 22) = *((_DWORD *)v41 + 22);
      v44 = (char *)__p[1];
      v43 = v257;
      if (__p[1] < (void *)v257)
        goto LABEL_44;
      goto LABEL_55;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 10), v6 + 12, v7, 16);
  *((_DWORD *)v6 + 22) = *((_DWORD *)v6 + 22);
  v9 = (char *)__p[1];
  v8 = v257;
  if (__p[1] < (void *)v257)
    goto LABEL_6;
  goto LABEL_17;
}

BOOL mlir::OperationPass<mlir::mps::serialization::ModuleOp>::canScheduleOn(uint64_t a1, uint64_t a2)
{
  const void *AttrData;
  size_t v4;
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 8);
  AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v6);
  if (!*(_BYTE *)(a1 + 32) || v4 != *(_QWORD *)(a1 + 24))
    return 0;
  if (v4)
    return memcmp(AttrData, *(const void **)(a1 + 16), v4) == 0;
  return 1;
}

double mlir::PassWrapper<mlir::mps::MPSSerializationPass,mlir::OperationPass<mlir::mps::serialization::ModuleOp>>::clonePass@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  double result;

  v4 = operator new(0x158uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  *((_BYTE *)v4 + 40) = 0;
  *((_BYTE *)v4 + 120) = 0;
  result = 0.0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = (char *)v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = (char *)v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *(_QWORD *)v4 = &unk_1E0E4B9F8;
  *((_QWORD *)v4 + 1) = v5;
  *a2 = v4;
  return result;
}

mlir::StringAttr ****_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps20MPSSerializationPass14runOnOperationEvEUlNS1_4func6FuncOpEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(mlir::StringAttr ****result, mlir::GenericProgramPoint *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
      return (mlir::StringAttr ****)mlir::mps::MPSSerializationPass::runOnOperation(void)::{lambda(mlir::func::FuncOp)#1}::operator()(*result, a2);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::mps::MPSSerializationPass::runOnOperation(void)::{lambda(mlir::func::FuncOp)#1}::operator()(mlir::StringAttr ***a1, mlir::GenericProgramPoint *this)
{
  mlir::StringAttr **v4;
  uint64_t v5;
  uint64_t v6;
  mlir::StringAttr *v7;
  mlir::StringAttr **v8;
  uint64_t v9;
  uint64_t InherentAttr;
  char v11;
  uint64_t v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  uint64_t Value;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t CallableRegion;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  mlir::Region *Body;
  mlir::Region *v24;
  mlir::GenericProgramPoint *result;
  __int128 v26;
  _QWORD v27[2];
  uint64_t FunctionType;
  mlir::StringAttr **v29;
  __int128 v30;
  mlir::ForwardIterator *v31;
  mlir::Operation *v32;

  v32 = this;
  v4 = *a1;
  v5 = (uint64_t)(*a1 + 2);
  v26 = *(_OWORD *)v5;
  v6 = *((_QWORD *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *(_QWORD *)v5 = v6;
  v4[3] = v7;
  v8 = *a1;
  v9 = *((_QWORD *)this + 3);
  if (*((_BYTE *)this + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8);
    if (v11)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_8:
      v12 = 0;
      goto LABEL_9;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_name", 8uLL);
  if (!InherentAttr)
    goto LABEL_8;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    v12 = InherentAttr;
  else
    v12 = 0;
LABEL_9:
  v29 = (mlir::StringAttr **)v12;
  *(_QWORD *)&v30 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v29);
  *((_QWORD *)&v30 + 1) = v13;
  v27[1] = 0;
  FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v32);
  v27[0] = 0;
  v14 = mlir::OpBuilder::create<mlir::mps::serialization::FuncOp,llvm::StringRef,mlir::FunctionType,llvm::ArrayRef<mlir::NamedAttribute>>(v8, v9, (uint64_t *)&v30, &FunctionType, (uint64_t)v27);
  v31 = v14;
  v27[0] = mlir::Operation::getAttrDictionary(v14);
  *(_QWORD *)&v30 = mlir::Operation::getAttrDictionary(v32);
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
  if (v16)
  {
    v17 = (__int128 *)Value;
    v18 = 16 * v16;
    do
    {
      v30 = *v17;
      CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v30);
      if ((mlir::DictionaryAttr::contains((uint64_t)v27, CallableRegion) & 1) == 0)
      {
        v20 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v30);
        mlir::Operation::setAttr((uint64_t)v14, v20, *((uint64_t *)&v30 + 1));
      }
      ++v17;
      v18 -= 16;
    }
    while (v18);
  }
  mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock((mlir::func::FuncOp *)&v31);
  v21 = *((unsigned int *)v31 + 11);
  if ((v21 & 0x7FFFFF) != 0)
  {
    v22 = (_QWORD *)((((unint64_t)v31 + 16 * ((v21 >> 23) & 1) + ((v21 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v31 + 10));
    if ((_QWORD *)*v22 != v22)
    {
LABEL_16:
      Body = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v31);
      goto LABEL_19;
    }
  }
  else if (MEMORY[0])
  {
    goto LABEL_16;
  }
  Body = 0;
LABEL_19:
  v24 = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v32);
  mlir::Region::takeBody(Body, v24);
  mlir::Operation::erase(v32);
  v29 = *a1;
  *(_QWORD *)&v30 = &v29;
  result = mlir::detail::walk<mlir::ForwardIterator>(v31, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_3mps20MPSSerializationPass14runOnOperationEvENKUlNS1_4func6FuncOpEE_clESE_EUlNSD_8ReturnOpEE_SG_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESP_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v30, 1);
  if (v4)
  {
    if ((_QWORD)v26)
    {
      *(_OWORD *)v5 = v26;
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::FuncOp,llvm::StringRef,mlir::FunctionType,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  _QWORD v22[39];

  v22[38] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.func", (const unsigned __int8 *)8, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"mps.func";
    v20[3] = 8;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v11);
  mlir::func::FuncOp::build(a1, (uint64_t)v22, *a3, a3[1], *a4, *(const void **)a5, *(_QWORD *)(a5 + 8), v13, 0, 0);
  v14 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::FuncOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_3mps20MPSSerializationPass14runOnOperationEvENKUlNS1_4func6FuncOpEE_clESE_EUlNSD_8ReturnOpEE_SG_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESP_E4typeES3_OT1_EUlS3_E_EEvlS3_(mlir::OpBuilder ***a1, mlir::GenericProgramPoint *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id)
      mlir::mps::MPSSerializationPass::runOnOperation(void)::{lambda(mlir::func::FuncOp)#1}::operator() const(mlir::func::FuncOp)::{lambda(mlir::func::ReturnOp)#1}::operator()(*a1, a2);
  }
}

void mlir::mps::MPSSerializationPass::runOnOperation(void)::{lambda(mlir::func::FuncOp)#1}::operator() const(mlir::func::FuncOp)::{lambda(mlir::func::ReturnOp)#1}::operator()(mlir::OpBuilder **a1, mlir::GenericProgramPoint *this)
{
  mlir::OpBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  mlir::OpBuilder *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t Inputs;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  const double *v15;
  unsigned __int128 *v16;
  unint64_t v17;
  const double *v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  mlir::Operation *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  v25 = this;
  v4 = *a1;
  v5 = *((_QWORD *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *((_QWORD *)v4 + 2) = v5;
  *((_QWORD *)v4 + 3) = v6;
  v7 = *a1;
  v8 = *((_QWORD *)this + 3);
  Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&v25);
  v11 = v9;
  v26 = v28;
  v27 = 0x600000000;
  if (v9 < 7)
  {
    if (!v9)
    {
      v24 = 0;
      goto LABEL_16;
    }
    v12 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v9, 8);
    v12 = (char *)v26 + 8 * v27;
    if (v11 >= 0xD
      && ((unint64_t)v12 >= Inputs + 32 * v11
       || Inputs + 24 >= (unint64_t)v26 + 8 * v11 + 8 * v27))
    {
      v14 = v11 & 3;
      if ((v11 & 3) == 0)
        v14 = 4;
      v13 = v11 - v14;
      v12 += v13;
      v15 = (const double *)(Inputs + 88);
      v16 = (unsigned __int128 *)((char *)v26 + 8 * v27 + 16);
      v17 = v13;
      do
      {
        v18 = v15 - 8;
        v19 = (unsigned __int128)vld4q_f64(v18);
        v20 = (unsigned __int128)vld4q_f64(v15);
        *(v16 - 1) = v19;
        *v16 = v20;
        v15 += 16;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      goto LABEL_13;
    }
  }
  v13 = 0;
LABEL_13:
  v21 = v11 - v13;
  v22 = (uint64_t *)(Inputs + 32 * v13 + 24);
  do
  {
    v23 = *v22;
    v22 += 4;
    *v12++ = v23;
    --v21;
  }
  while (v21);
  v24 = v27;
LABEL_16:
  LODWORD(v27) = v24 + v11;
  mlir::OpBuilder::create<mlir::mps::serialization::ReturnOp,llvm::SmallVector<mlir::Value,6u>>(v7, v8, (uint64_t)&v26);
  if (v26 != v28)
    free(v26);
  mlir::Operation::erase(v25);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ReturnOp,llvm::SmallVector<mlir::Value,6u>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.return", (const unsigned __int8 *)0xA, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"mps.return";
    v15[3] = 10;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::RegionReturn::build((uint64_t)a1, (uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ReturnOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertForOp<mlir::scf::ForOp,mlir::mps::serialization::ForOp>::~ConvertForOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertForOp<mlir::scf::ForOp,mlir::mps::serialization::ForOp>::~ConvertForOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ForOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ForOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertForOp<mlir::scf::ForOp,mlir::mps::serialization::ForOp>::matchAndRewrite(int a1, uint64_t a2, mlir::scf::detail::ForOpGenericAdaptorBase *this, uint64_t (***a4)(_QWORD, uint64_t, unint64_t, char *))
{
  uint64_t v6;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t Body;
  _QWORD *v17;
  _QWORD *i;
  _QWORD *v19;
  mlir::Block *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t Results;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  mlir::GenericProgramPoint *v29;
  unsigned int *v30;
  unint64_t v31[2];
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  ODSOperandIndexAndLength = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 12));
  v8 = *((_QWORD *)this + 5);
  v32 = v8;
  v33 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v8 = mlir::ValueRange::offset_base(&v32, ODSOperandIndexAndLength);
  v32 = v8;
  v33 = 0;
  v28 = mlir::ValueRange::dereference_iterator(&v32, 0);
  v9 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 12));
  v10 = *((_QWORD *)this + 5);
  v32 = v10;
  v33 = v9;
  if (v9)
    v10 = mlir::ValueRange::offset_base(&v32, v9);
  v32 = v10;
  v33 = 0;
  v27 = mlir::ValueRange::dereference_iterator(&v32, 0);
  v11 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 2u, *((_DWORD *)this + 12));
  v12 = *((_QWORD *)this + 5);
  v32 = v12;
  v33 = v11;
  if (v11)
    v12 = mlir::ValueRange::offset_base(&v32, v11);
  v32 = v12;
  v33 = 0;
  v26 = mlir::ValueRange::dereference_iterator(&v32, 0);
  v13 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 3u, *((_DWORD *)this + 12));
  v14 = *((_QWORD *)this + 5);
  v32 = v14;
  v33 = v13;
  if ((_DWORD)v13)
  {
    v14 = mlir::ValueRange::offset_base(&v32, v13);
    v15 = v33;
  }
  else
  {
    v15 = 0;
  }
  v32 = v14;
  v33 = (HIDWORD(v13) + v13) - v15;
  v29 = mlir::OpBuilder::create<mlir::mps::serialization::ForOp,mlir::Value,mlir::Value,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 1), v6, &v28, &v27, &v26, (uint64_t *)&v32);
  Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v30);
  v17 = (_QWORD *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
  for (i = (_QWORD *)*v17; (_QWORD *)*v17 != v17; i = (_QWORD *)*v17)
  {
    if (i)
      v19 = i - 1;
    else
      v19 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v19);
  }
  mlir::ValueRange::ValueRange(&v32, 0, 0);
  mlir::OpBuilder::createBlock(a4 + 1, (uint64_t)v17, 0, v32, v33, 0, 0);
  if (*v17)
    v20 = (mlir::Block *)(*v17 - 8);
  else
    v20 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, Body, v20);
  if (*v17)
    v21 = *v17 - 8;
  else
    v21 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v21);
  v22 = v30;
  Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v29);
  mlir::ValueRange::ValueRange(v31, Results, v24);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v22, v31[0], v31[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ForOp,mlir::Value,mlir::Value,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.for", (const unsigned __int8 *)7, Context);
  if (!v14)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"mps.for";
    v23[3] = 7;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v13);
  mlir::mps::serialization::ForOp::build((uint64_t)a1, (uint64_t)v25, *a3, *a4, *a5, *a6, a6[1], v15, 0, v19);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ForOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertWhileOp<mlir::scf::WhileOp,mlir::mps::serialization::WhileOp>::~ConvertWhileOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertWhileOp<mlir::scf::WhileOp,mlir::mps::serialization::WhileOp>::~ConvertWhileOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::WhileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::scf::WhileOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::WhileOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertWhileOp<mlir::scf::WhileOp,mlir::mps::serialization::WhileOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, uint64_t, unint64_t, char *))
{
  mlir::OpBuilder *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  _BYTE *v15;
  unint64_t Body;
  _QWORD *v17;
  _QWORD *i;
  _QWORD *v19;
  mlir::Block *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *j;
  _QWORD *v25;
  mlir::Block *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t Results;
  unint64_t v30;
  mlir::GenericProgramPoint *v32;
  unsigned int *v33;
  unint64_t v34[2];
  __int128 v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[48];
  uint64_t v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v33 = (unsigned int *)a2;
  v6 = (mlir::OpBuilder *)(a4 + 1);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8)
    v9 = a2 - 16;
  else
    v9 = 0;
  v36 = v38;
  v37 = 0x600000000;
  if (v8 < 7)
  {
    if (!(_DWORD)v8)
    {
      v14 = 0;
      v15 = v38;
      goto LABEL_11;
    }
    v10 = 0;
    v11 = v38;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v8, 8);
    v10 = v37;
    v11 = v36;
  }
  v12 = 0;
  v13 = &v11[8 * v10];
  do
  {
    *(_QWORD *)&v13[8 * v12] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v12;
  }
  while (v8 != v12);
  v14 = v37;
  v15 = v36;
LABEL_11:
  LODWORD(v37) = v14 + v8;
  mlir::ValueRange::ValueRange((unint64_t *)v39, (uint64_t)v15, (v14 + v8));
  v35 = *(_OWORD *)(a3 + 40);
  v32 = mlir::OpBuilder::create<mlir::mps::serialization::WhileOp,mlir::TypeRange,mlir::ValueRange>(v6, v7, v39, (uint64_t *)&v35);
  if (v36 != v38)
    free(v36);
  Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v33);
  v17 = (_QWORD *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v32);
  for (i = (_QWORD *)*v17; (_QWORD *)*v17 != v17; i = (_QWORD *)*v17)
  {
    if (i)
      v19 = i - 1;
    else
      v19 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v19);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v36, 0, 0);
  mlir::OpBuilder::createBlock(v6, (uint64_t)v17, 0, (uint64_t)v36, v37, 0, 0);
  if (*v17)
    v20 = (mlir::Block *)(*v17 - 8);
  else
    v20 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, Body, v20);
  if (*v17)
    v21 = *v17 - 8;
  else
    v21 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v21);
  v22 = mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v33);
  v23 = (_QWORD *)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v32);
  for (j = (_QWORD *)*v23; (_QWORD *)*v23 != v23; j = (_QWORD *)*v23)
  {
    if (j)
      v25 = j - 1;
    else
      v25 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v25);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v36, 0, 0);
  mlir::OpBuilder::createBlock(v6, (uint64_t)v23, 0, (uint64_t)v36, v37, 0, 0);
  if (*v23)
    v26 = (mlir::Block *)(*v23 - 8);
  else
    v26 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, v22, v26);
  if (*v23)
    v27 = *v23 - 8;
  else
    v27 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v27);
  v28 = v33;
  Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v32);
  mlir::ValueRange::ValueRange(v34, Results, v30);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v28, v34[0], v34[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::WhileOp,mlir::TypeRange,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.while", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.while";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::scf::WhileOp::build((uint64_t)a1, (uint64_t)v19, *a3, a3[1], *a4, a4[1], 0, 0);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::WhileOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertIfOp<mlir::scf::IfOp,mlir::mps::serialization::IfOp>::~ConvertIfOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertIfOp<mlir::scf::IfOp,mlir::mps::serialization::IfOp>::~ConvertIfOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::IfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::scf::IfOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::IfOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertIfOp<mlir::scf::IfOp,mlir::mps::serialization::IfOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::scf::detail::IfOpGenericAdaptorBase *a3, uint64_t (***a4)(_QWORD, uint64_t, unint64_t, char *))
{
  mlir::OpBuilder *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  _BYTE *v15;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v17;
  unint64_t Body;
  _QWORD *v19;
  _QWORD *i;
  _QWORD *v21;
  mlir::Block *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *j;
  _QWORD *v27;
  mlir::Block *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t Results;
  unint64_t v32;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36[2];
  void *v37;
  uint64_t v38;
  _BYTE v39[48];
  uint64_t v40[2];
  mlir::GenericProgramPoint *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v35 = (unsigned int *)a2;
  v6 = (mlir::OpBuilder *)(a4 + 1);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8)
    v9 = a2 - 16;
  else
    v9 = 0;
  v37 = v39;
  v38 = 0x600000000;
  if (v8 < 7)
  {
    if (!(_DWORD)v8)
    {
      v14 = 0;
      v15 = v39;
      goto LABEL_11;
    }
    v10 = 0;
    v11 = v39;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v8, 8);
    v10 = v38;
    v11 = v37;
  }
  v12 = 0;
  v13 = &v11[8 * v10];
  do
  {
    *(_QWORD *)&v13[8 * v12] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v12;
  }
  while (v8 != v12);
  v14 = v38;
  v15 = v37;
LABEL_11:
  LODWORD(v38) = v14 + v8;
  mlir::ValueRange::ValueRange((unint64_t *)v40, (uint64_t)v15, (v14 + v8));
  ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(a3, 0);
  v17 = *((_QWORD *)a3 + 5);
  v41 = (mlir::GenericProgramPoint *)v17;
  v42 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v17 = mlir::ValueRange::offset_base(&v41, ODSOperandIndexAndLength);
  v41 = (mlir::GenericProgramPoint *)v17;
  v42 = 0;
  v34 = mlir::ValueRange::dereference_iterator(&v41, 0);
  v41 = mlir::OpBuilder::create<mlir::mps::serialization::IfOp,mlir::TypeRange,mlir::Value>(v6, v7, v40, &v34);
  if (v37 != v39)
    free(v37);
  Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v35);
  v19 = (_QWORD *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v41);
  for (i = (_QWORD *)*v19; (_QWORD *)*v19 != v19; i = (_QWORD *)*v19)
  {
    if (i)
      v21 = i - 1;
    else
      v21 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v21);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v37, 0, 0);
  mlir::OpBuilder::createBlock(v6, (uint64_t)v19, 0, (uint64_t)v37, v38, 0, 0);
  if (*v19)
    v22 = (mlir::Block *)(*v19 - 8);
  else
    v22 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, Body, v22);
  if (*v19)
    v23 = *v19 - 8;
  else
    v23 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v23);
  v24 = mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v35);
  v25 = (_QWORD *)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v41);
  for (j = (_QWORD *)*v25; (_QWORD *)*v25 != v25; j = (_QWORD *)*v25)
  {
    if (j)
      v27 = j - 1;
    else
      v27 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v27);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v37, 0, 0);
  mlir::OpBuilder::createBlock(v6, (uint64_t)v25, 0, (uint64_t)v37, v38, 0, 0);
  if (*v25)
    v28 = (mlir::Block *)(*v25 - 8);
  else
    v28 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, v24, v28);
  if (*v25)
    v29 = *v25 - 8;
  else
    v29 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v29);
  v30 = v35;
  Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v41);
  mlir::ValueRange::ValueRange(v36, Results, v32);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v30, v36[0], v36[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::IfOp,mlir::TypeRange,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.if", (const unsigned __int8 *)6, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.if";
    v17[3] = 6;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::scf::IfOp::build(a1, (unsigned int *)v19, *a3, a3[1], *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::IfOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertConditionOp<mlir::scf::ConditionOp,mlir::mps::serialization::ConditionOp>::~ConvertConditionOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertConditionOp<mlir::scf::ConditionOp,mlir::mps::serialization::ConditionOp>::~ConvertConditionOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ConditionOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ConditionOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::ConditionOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertConditionOp<mlir::scf::ConditionOp,mlir::mps::serialization::ConditionOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  mlir::GenericProgramPoint *v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[48];
  uint64_t v26[2];
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7)
    v8 = a2 - 16;
  else
    v8 = 0;
  v23 = v25;
  v24 = 0x600000000;
  if (v7 < 7)
  {
    if (!(_DWORD)v7)
    {
      v13 = 0;
      v14 = v25;
      goto LABEL_11;
    }
    v9 = 0;
    v10 = v25;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v7, 8);
    v9 = v24;
    v10 = v23;
  }
  v11 = 0;
  v12 = &v10[8 * v9];
  do
  {
    *(_QWORD *)&v12[8 * v11] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v11) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v11;
  }
  while (v7 != v11);
  v13 = v24;
  v14 = v23;
LABEL_11:
  LODWORD(v24) = v13 + v7;
  mlir::ValueRange::ValueRange((unint64_t *)v26, (uint64_t)v14, (v13 + v7));
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 0, *(_DWORD *)(a3 + 48));
  v16 = *(_QWORD *)(a3 + 40);
  v27 = v16;
  v28 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v16 = mlir::ValueRange::offset_base(&v27, ODSOperandIndexAndLength);
  v27 = v16;
  v28 = 0;
  v22 = mlir::ValueRange::dereference_iterator(&v27, 0);
  v17 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 1u, *(_DWORD *)(a3 + 48));
  v18 = *(_QWORD *)(a3 + 40);
  v27 = v18;
  v28 = v17;
  if ((_DWORD)v17)
  {
    v18 = mlir::ValueRange::offset_base(&v27, v17);
    v19 = v28;
  }
  else
  {
    v19 = 0;
  }
  v27 = v18;
  v28 = (HIDWORD(v17) + v17) - v19;
  v20 = mlir::OpBuilder::create<mlir::mps::serialization::ConditionOp,mlir::TypeRange,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(a2 + 24), v26, &v22, (uint64_t *)&v27);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v20);
  if (v23 != v25)
    free(v23);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ConditionOp,mlir::TypeRange,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.condition", (const unsigned __int8 *)0xD, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"mps.condition";
    v19[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::scf::ConditionOp::build((uint64_t)a1, (uint64_t)v21, *a3, a3[1], *a4, *a5, a5[1]);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ConditionOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertYieldOp<mlir::scf::YieldOp,mlir::mps::serialization::YieldOp>::~ConvertYieldOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertYieldOp<mlir::scf::YieldOp,mlir::mps::serialization::YieldOp>::~ConvertYieldOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::scf::YieldOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::scf::YieldOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::scf::YieldOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::scf::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertYieldOp<mlir::scf::YieldOp,mlir::mps::serialization::YieldOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  unint64_t ODSOperandIndexAndLength;
  unint64_t v16;
  uint64_t v17;
  mlir::GenericProgramPoint *v18;
  void *v20;
  uint64_t v21;
  _BYTE v22[48];
  uint64_t v23[2];
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7)
    v8 = a2 - 16;
  else
    v8 = 0;
  v20 = v22;
  v21 = 0x600000000;
  if (v7 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v7, 8);
    v9 = v21;
    v10 = v20;
    goto LABEL_8;
  }
  if ((_DWORD)v7)
  {
    v9 = 0;
    v10 = v22;
LABEL_8:
    v11 = 0;
    v12 = &v10[8 * v9];
    do
    {
      *(_QWORD *)&v12[8 * v11] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v11) + 8) & 0xFFFFFFFFFFFFFFF8;
      ++v11;
    }
    while (v7 != v11);
    v13 = v21;
    v14 = v20;
    goto LABEL_11;
  }
  v13 = 0;
  v14 = v22;
LABEL_11:
  LODWORD(v21) = v13 + v7;
  mlir::ValueRange::ValueRange((unint64_t *)v23, (uint64_t)v14, (v13 + v7));
  ODSOperandIndexAndLength = mlir::scf::detail::YieldOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::YieldOpGenericAdaptorBase *)a3, 0, *(unsigned int *)(a3 + 48));
  v16 = *(_QWORD *)(a3 + 40);
  v24 = v16;
  v25 = ODSOperandIndexAndLength;
  if ((_DWORD)ODSOperandIndexAndLength)
  {
    v16 = mlir::ValueRange::offset_base(&v24, ODSOperandIndexAndLength);
    v17 = v25;
  }
  else
  {
    v17 = 0;
  }
  v24 = v16;
  v25 = (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength) - v17;
  v18 = mlir::OpBuilder::create<mlir::mps::serialization::YieldOp,mlir::TypeRange,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(a2 + 24), v23, (uint64_t *)&v24);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v18);
  if (v20 != v22)
    free(v20);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::YieldOp,mlir::TypeRange,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.yield", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.yield";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v19, *a3, a3[1], *a4, a4[1], 0, 0);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::YieldOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertFromElementsOp<mlir::tensor::FromElementsOp,mlir::mps::serialization::FromElementsOp>::~ConvertFromElementsOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertFromElementsOp<mlir::tensor::FromElementsOp,mlir::mps::serialization::FromElementsOp>::~ConvertFromElementsOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::FromElementsOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::FromElementsOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::tensor::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::FromElementsOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::tensor::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertFromElementsOp<mlir::tensor::FromElementsOp,mlir::mps::serialization::FromElementsOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::GenericProgramPoint *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v9 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v10) + 8) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v11 = *(_OWORD *)(a3 + 40);
  v7 = mlir::OpBuilder::create<mlir::mps::serialization::FromElementsOp,mlir::RankedTensorType,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v9, v11);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v7);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::FromElementsOp,mlir::RankedTensorType,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.from_elements", (const unsigned __int8 *)0x11, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"mps.from_elements";
    v17[3] = 17;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::CreateRangeOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4, a4[1]);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::FromElementsOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertExtractOp<mlir::tensor::ExtractOp,mlir::mps::serialization::ExtractOp>::~ConvertExtractOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertExtractOp<mlir::tensor::ExtractOp,mlir::mps::serialization::ExtractOp>::~ConvertExtractOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::ExtractOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::ExtractOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::tensor::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::tensor::ExtractOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::tensor::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertExtractOp<mlir::tensor::ExtractOp,mlir::mps::serialization::ExtractOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  v15 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v16) + 8) & 0xFFFFFFFFFFFFFFF8;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 0, *(_DWORD *)(a3 + 48));
  v8 = *(_QWORD *)(a3 + 40);
  v17 = v8;
  v18 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v8 = mlir::ValueRange::offset_base(&v17, ODSOperandIndexAndLength);
  v17 = v8;
  v18 = 0;
  v14 = mlir::ValueRange::dereference_iterator(&v17, 0);
  v9 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 1u, *(_DWORD *)(a3 + 48));
  v10 = *(_QWORD *)(a3 + 40);
  v17 = v10;
  v18 = v9;
  if ((_DWORD)v9)
  {
    v10 = mlir::ValueRange::offset_base(&v17, v9);
    v11 = v18;
  }
  else
  {
    v11 = 0;
  }
  v17 = v10;
  v18 = (HIDWORD(v9) + v9) - v11;
  v12 = mlir::OpBuilder::create<mlir::mps::serialization::ExtractOp,mlir::Type,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v15, &v14, (uint64_t *)&v17);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v12);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::mps::serialization::ExtractOp,mlir::Type,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"mps.extract", (const unsigned __int8 *)0xB, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"mps.extract";
    v19[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::tensor::ExtractOp::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5, a5[1]);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ExtractOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

void mlir::mps::MPSDeserializationPass::~MPSDeserializationPass(mlir::mps::MPSDeserializationPass *this)
{
  void *v1;

  mlir::Pass::~Pass(this);
  operator delete(v1);
}

const char *mlir::PassWrapper<mlir::mps::MPSDeserializationPass,mlir::OperationPass<mlir::mps::serialization::ModuleOp>>::getName()
{
  unint64_t v0;
  unint64_t v1;
  const char *v2;
  uint64_t v3;
  const char *v5;
  unint64_t v6;

  v5 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSDeserializationPass]";
  v6 = 83;
  v0 = llvm::StringRef::find((uint64_t *)&v5, "DesiredTypeName = ", 0x12uLL, 0);
  if (v6 >= v0)
    v1 = v0;
  else
    v1 = v6;
  v2 = &v5[v1];
  if (v6 - v1 >= 0x12)
    v3 = 18;
  else
    v3 = v6 - v1;
  return &v2[v3];
}

_QWORD *mlir::mps::MPSDeserializationPass::getDependentDialects(mlir::mps::MPSDeserializationPass *this, uint64_t **a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11[0] = off_1E0E50948;
  v12 = v11;
  v3 = 4;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::func::FuncDialect,void>::id, "func", 4uLL, v11);
  v4 = v12;
  if (v12 == v11)
  {
    v4 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v3))();
LABEL_6:
  v11[0] = off_1E0E50870;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::mps::MPSDialect,void>::id, "mps", 3uLL, v11);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v11[0] = off_1E0E508B8;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::scf::SCFDialect,void>::id, "scf", 3uLL, v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v11[0] = off_1E0E50A20;
  v12 = v11;
  mlir::DialectRegistry::insert(a2, &mlir::detail::TypeIDResolver<mlir::tensor::TensorDialect,void>::id, "tensor", 6uLL, v11);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

const char *mlir::mps::MPSDeserializationPass::getArgument(mlir::mps::MPSDeserializationPass *this)
{
  return "mps-deserialize";
}

const char *mlir::mps::MPSDeserializationPass::getDescription(mlir::mps::MPSDeserializationPass *this)
{
  return "Convert serialized MPS module to a runnable form";
}

void mlir::mps::MPSDeserializationPass::runOnOperation(mlir::mps::MPSDeserializationPass *this)
{
  mlir::ForwardIterator *v2;
  uint64_t Context;
  mlir::Attribute *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  void *v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  uint64_t v85;
  const char *v86;
  unint64_t v87;
  char *v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  int64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  void *v115;
  unint64_t v116;
  unint64_t v117;
  const char *v118;
  unint64_t v119;
  uint64_t v120;
  const char *v121;
  unint64_t v122;
  char *v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  int64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  void *v150;
  unint64_t v151;
  unint64_t v152;
  const char *v153;
  unint64_t v154;
  uint64_t v155;
  const char *v156;
  unint64_t v157;
  char *v158;
  int64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  int64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  void *v185;
  unint64_t v186;
  unint64_t v187;
  const char *v188;
  unint64_t v189;
  uint64_t v190;
  const char *v191;
  unint64_t v192;
  char *v193;
  int64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  int64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  void *v220;
  unint64_t v221;
  unint64_t v222;
  const char *v223;
  unint64_t v224;
  uint64_t v225;
  const char *v226;
  unint64_t v227;
  char *v228;
  int64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  int64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  const mlir::FrozenRewritePatternSet *v251;
  _QWORD v252[4];
  const char *v253;
  unint64_t v254;
  void *v255;
  void *__p[2];
  __int128 v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD v260[8];
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268[3];
  int v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD v272[2];
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  v252[0] = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  memset(&v252[1], 0, 24);
  v2 = (mlir::ForwardIterator *)(*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8);
  v268[0] = (uint64_t)v252;
  v255 = v268;
  mlir::detail::walk<mlir::ForwardIterator>(v2, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps22MPSDeserializationPass14runOnOperationEvEUlNSB_13serialization6FuncOpEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v255, 1);
  Context = mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  v268[1] = 0;
  v268[2] = 0;
  v268[0] = (uint64_t)off_1E0E2B708;
  v269 = 0;
  v274 = 0;
  v275 = 0;
  v270 = v272;
  v271 = 0;
  v272[0] = 0;
  v272[1] = 0;
  v273 = 0;
  v276 = 0x1000000000;
  v277 = 0;
  v278 = 0;
  v279 = 0x2800000000;
  v280 = 0;
  v281 = Context;
  v255 = &__p[1];
  __p[1] = "mps";
  *(_QWORD *)&v257 = 3;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1])
    free(v255);
  v255 = &__p[1];
  __p[1] = "scf";
  *(_QWORD *)&v257 = 3;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1])
    free(v255);
  v255 = &__p[1];
  __p[1] = "tensor";
  *(_QWORD *)&v257 = 6;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1])
    free(v255);
  v255 = &__p[1];
  __p[1] = "func";
  *(_QWORD *)&v257 = 4;
  __p[0] = (void *)0x200000001;
  mlir::ConversionTarget::setDialectAction(v268, (uint64_t)&__p[1], 1, 0);
  if (v255 != &__p[1])
    free(v255);
  mlir::OperationName::OperationName(&v255, "mps.for", 7, v281);
  mlir::ConversionTarget::setOpAction((uint64_t)v268, (uint64_t)v255, 2);
  mlir::OperationName::OperationName(&v255, "mps.while", 9, v281);
  mlir::ConversionTarget::setOpAction((uint64_t)v268, (uint64_t)v255, 2);
  mlir::OperationName::OperationName(&v255, "mps.if", 6, v281);
  mlir::ConversionTarget::setOpAction((uint64_t)v268, (uint64_t)v255, 2);
  mlir::ConversionTarget::addIllegalOp<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::YieldOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp>((uint64_t)v268);
  v255 = (void *)mlir::Attribute::getContext((mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24));
  *(_OWORD *)__p = 0u;
  v257 = 0u;
  v258 = v260;
  v259 = 0x600000000;
  v260[6] = 0;
  v260[7] = 0;
  v261 = 0;
  v262 = 0;
  v263 = 0;
  v264 = 0x2800000000;
  v265 = 0;
  v4 = (mlir::Attribute *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 24);
  v266 = 0;
  v267 = 0x2800000000;
  v5 = mlir::Attribute::getContext(v4);
  v6 = operator new(0x68uLL);
  mlir::PatternBenefit::PatternBenefit(&v253, 1);
  mlir::Pattern::Pattern((uint64_t)(v6 + 1), (uint64_t)"mps.for", 7, (__int16)v253, v5, 0, 0);
  v6[12] = 0;
  *v6 = &off_1E0E48908;
  if (v6[9])
  {
    v7 = *((unsigned int *)v6 + 22);
    if (v7 <= *((_DWORD *)v6 + 23))
      goto LABEL_11;
  }
  else
  {
    v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertForOp<mlir::mps::se"
           "rialization::ForOp, mlir::scf::ForOp>]";
    v254 = 147;
    v11 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
    if (v254 >= v11)
      v12 = v11;
    else
      v12 = v254;
    v13 = &v253[v12];
    v14 = v254 - v12;
    if (v254 - v12 >= 0x12)
      v15 = 18;
    else
      v15 = v254 - v12;
    v16 = &v13[v15];
    v17 = v14 - v15;
    if (v17 >= v17 - 1)
      --v17;
    v6[8] = v16;
    v6[9] = v17;
    v7 = *((unsigned int *)v6 + 22);
    if (v7 <= *((_DWORD *)v6 + 23))
    {
LABEL_11:
      *((_DWORD *)v6 + 22) = v7;
      v9 = (char *)__p[1];
      v8 = v257;
      if (__p[1] < (void *)v257)
      {
LABEL_12:
        *(_QWORD *)v9 = v6;
        v10 = v9 + 8;
        goto LABEL_47;
      }
LABEL_23:
      v18 = (char *)__p[0];
      v19 = v9 - (char *)__p[0];
      v20 = (v9 - (char *)__p[0]) >> 3;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        goto LABEL_276;
      v22 = v8 - (unint64_t)__p[0];
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          goto LABEL_277;
        v24 = (char *)operator new(8 * v23);
        v25 = &v24[8 * v20];
        v26 = &v24[8 * v23];
        *(_QWORD *)v25 = v6;
        v10 = v25 + 8;
        v27 = v9 - v18;
        if (v9 != v18)
          goto LABEL_32;
      }
      else
      {
        v24 = 0;
        v25 = (char *)(8 * v20);
        v26 = 0;
        *(_QWORD *)(8 * v20) = v6;
        v10 = (void *)(8 * v20 + 8);
        v27 = v9 - v18;
        if (v9 != v18)
        {
LABEL_32:
          v28 = v27 - 8;
          if (v28 < 0x78
            || &v9[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] < v25 && &v24[v19 - (v28 & 0xFFFFFFFFFFFFFFF8) - 8] < v9)
          {
            goto LABEL_280;
          }
          v29 = (v28 >> 3) + 1;
          v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = &v9[-v30];
          v25 -= v30;
          v32 = &v24[8 * v20 - 16];
          v33 = v9 - 16;
          v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v36 = *((_OWORD *)v33 - 1);
            v35 = *(_OWORD *)v33;
            *((_OWORD *)v33 - 1) = 0uLL;
            *(_OWORD *)v33 = 0uLL;
            *((_OWORD *)v32 - 1) = v36;
            *(_OWORD *)v32 = v35;
            v32 -= 32;
            v33 -= 32;
            v34 -= 4;
          }
          while (v34);
          v9 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_280:
            do
            {
              v37 = *((_QWORD *)v9 - 1);
              v9 -= 8;
              *(_QWORD *)v9 = 0;
              *((_QWORD *)v25 - 1) = v37;
              v25 -= 8;
            }
            while (v9 != v18);
          }
          v9 = (char *)__p[0];
          v38 = (char *)__p[1];
          __p[0] = v25;
          __p[1] = v10;
          *(_QWORD *)&v257 = v26;
          while (v38 != v9)
          {
            v40 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            v39 = v40;
            *(_QWORD *)v38 = 0;
            if (v40)
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          }
          goto LABEL_45;
        }
      }
      __p[0] = v25;
      __p[1] = v10;
      *(_QWORD *)&v257 = v26;
LABEL_45:
      if (v9)
        operator delete(v9);
LABEL_47:
      __p[1] = v10;
      v41 = operator new(0x68uLL);
      mlir::PatternBenefit::PatternBenefit(&v253, 1);
      mlir::Pattern::Pattern((uint64_t)(v41 + 1), (uint64_t)"mps.while", 9, (__int16)v253, v5, 0, 0);
      v41[12] = 0;
      *v41 = &off_1E0E48C98;
      if (v41[9])
      {
        v42 = *((unsigned int *)v41 + 22);
        if (v42 <= *((_DWORD *)v41 + 23))
          goto LABEL_49;
      }
      else
      {
        v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertWhileOp<mlir::m"
               "ps::serialization::WhileOp, mlir::scf::WhileOp>]";
        v254 = 153;
        v46 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
        if (v254 >= v46)
          v47 = v46;
        else
          v47 = v254;
        v48 = &v253[v47];
        v49 = v254 - v47;
        if (v254 - v47 >= 0x12)
          v50 = 18;
        else
          v50 = v254 - v47;
        v51 = &v48[v50];
        v52 = v49 - v50;
        if (v52 >= v52 - 1)
          --v52;
        v41[8] = v51;
        v41[9] = v52;
        v42 = *((unsigned int *)v41 + 22);
        if (v42 <= *((_DWORD *)v41 + 23))
        {
LABEL_49:
          *((_DWORD *)v41 + 22) = v42;
          v44 = (char *)__p[1];
          v43 = v257;
          if (__p[1] < (void *)v257)
          {
LABEL_50:
            *(_QWORD *)v44 = v41;
            v45 = v44 + 8;
            goto LABEL_85;
          }
LABEL_61:
          v53 = (char *)__p[0];
          v54 = v44 - (char *)__p[0];
          v55 = (v44 - (char *)__p[0]) >> 3;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
            goto LABEL_276;
          v57 = v43 - (unint64_t)__p[0];
          if (v57 >> 2 > v56)
            v56 = v57 >> 2;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
            v58 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            if (v58 >> 61)
              goto LABEL_277;
            v59 = (char *)operator new(8 * v58);
            v60 = &v59[8 * v55];
            v61 = &v59[8 * v58];
            *(_QWORD *)v60 = v41;
            v45 = v60 + 8;
            v62 = v44 - v53;
            if (v44 != v53)
              goto LABEL_70;
          }
          else
          {
            v59 = 0;
            v60 = (char *)(8 * v55);
            v61 = 0;
            *(_QWORD *)(8 * v55) = v41;
            v45 = (void *)(8 * v55 + 8);
            v62 = v44 - v53;
            if (v44 != v53)
            {
LABEL_70:
              v63 = v62 - 8;
              if (v63 < 0x78
                || &v44[-(v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v60 && &v59[v54 - (v63 & 0xFFFFFFFFFFFFFFF8) - 8] < v44)
              {
                goto LABEL_281;
              }
              v64 = (v63 >> 3) + 1;
              v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
              v66 = &v44[-v65];
              v60 -= v65;
              v67 = &v59[8 * v55 - 16];
              v68 = v44 - 16;
              v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *((_OWORD *)v68 - 1);
                v70 = *(_OWORD *)v68;
                *((_OWORD *)v68 - 1) = 0uLL;
                *(_OWORD *)v68 = 0uLL;
                *((_OWORD *)v67 - 1) = v71;
                *(_OWORD *)v67 = v70;
                v67 -= 32;
                v68 -= 32;
                v69 -= 4;
              }
              while (v69);
              v44 = v66;
              if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_281:
                do
                {
                  v72 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  *(_QWORD *)v44 = 0;
                  *((_QWORD *)v60 - 1) = v72;
                  v60 -= 8;
                }
                while (v44 != v53);
              }
              v44 = (char *)__p[0];
              v73 = (char *)__p[1];
              __p[0] = v60;
              __p[1] = v45;
              *(_QWORD *)&v257 = v61;
              while (v73 != v44)
              {
                v75 = *((_QWORD *)v73 - 1);
                v73 -= 8;
                v74 = v75;
                *(_QWORD *)v73 = 0;
                if (v75)
                  (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
              }
              goto LABEL_83;
            }
          }
          __p[0] = v60;
          __p[1] = v45;
          *(_QWORD *)&v257 = v61;
LABEL_83:
          if (v44)
            operator delete(v44);
LABEL_85:
          __p[1] = v45;
          v76 = operator new(0x68uLL);
          mlir::PatternBenefit::PatternBenefit(&v253, 1);
          mlir::Pattern::Pattern((uint64_t)(v76 + 1), (uint64_t)"mps.if", 6, (__int16)v253, v5, 0, 0);
          v76[12] = 0;
          *v76 = &off_1E0E487E0;
          if (v76[9])
          {
            v77 = *((unsigned int *)v76 + 22);
            if (v77 <= *((_DWORD *)v76 + 23))
              goto LABEL_87;
          }
          else
          {
            v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertIfOp<mlir::"
                   "mps::serialization::IfOp, mlir::scf::IfOp>]";
            v254 = 144;
            v81 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
            if (v254 >= v81)
              v82 = v81;
            else
              v82 = v254;
            v83 = &v253[v82];
            v84 = v254 - v82;
            if (v254 - v82 >= 0x12)
              v85 = 18;
            else
              v85 = v254 - v82;
            v86 = &v83[v85];
            v87 = v84 - v85;
            if (v87 >= v87 - 1)
              --v87;
            v76[8] = v86;
            v76[9] = v87;
            v77 = *((unsigned int *)v76 + 22);
            if (v77 <= *((_DWORD *)v76 + 23))
            {
LABEL_87:
              *((_DWORD *)v76 + 22) = v77;
              v79 = (char *)__p[1];
              v78 = v257;
              if (__p[1] < (void *)v257)
              {
LABEL_88:
                *(_QWORD *)v79 = v76;
                v80 = v79 + 8;
                goto LABEL_123;
              }
LABEL_99:
              v88 = (char *)__p[0];
              v89 = v79 - (char *)__p[0];
              v90 = (v79 - (char *)__p[0]) >> 3;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61)
                goto LABEL_276;
              v92 = v78 - (unint64_t)__p[0];
              if (v92 >> 2 > v91)
                v91 = v92 >> 2;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
                v93 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v93 = v91;
              if (v93)
              {
                if (v93 >> 61)
                  goto LABEL_277;
                v94 = (char *)operator new(8 * v93);
                v95 = &v94[8 * v90];
                v96 = &v94[8 * v93];
                *(_QWORD *)v95 = v76;
                v80 = v95 + 8;
                v97 = v79 - v88;
                if (v79 != v88)
                  goto LABEL_108;
              }
              else
              {
                v94 = 0;
                v95 = (char *)(8 * v90);
                v96 = 0;
                *(_QWORD *)(8 * v90) = v76;
                v80 = (void *)(8 * v90 + 8);
                v97 = v79 - v88;
                if (v79 != v88)
                {
LABEL_108:
                  v98 = v97 - 8;
                  if (v98 < 0x78
                    || &v79[-(v98 & 0xFFFFFFFFFFFFFFF8) - 8] < v95
                    && &v94[v89 - (v98 & 0xFFFFFFFFFFFFFFF8) - 8] < v79)
                  {
                    goto LABEL_282;
                  }
                  v99 = (v98 >> 3) + 1;
                  v100 = 8 * (v99 & 0x3FFFFFFFFFFFFFFCLL);
                  v101 = &v79[-v100];
                  v95 -= v100;
                  v102 = &v94[8 * v90 - 16];
                  v103 = v79 - 16;
                  v104 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v106 = *((_OWORD *)v103 - 1);
                    v105 = *(_OWORD *)v103;
                    *((_OWORD *)v103 - 1) = 0uLL;
                    *(_OWORD *)v103 = 0uLL;
                    *((_OWORD *)v102 - 1) = v106;
                    *(_OWORD *)v102 = v105;
                    v102 -= 32;
                    v103 -= 32;
                    v104 -= 4;
                  }
                  while (v104);
                  v79 = v101;
                  if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_282:
                    do
                    {
                      v107 = *((_QWORD *)v79 - 1);
                      v79 -= 8;
                      *(_QWORD *)v79 = 0;
                      *((_QWORD *)v95 - 1) = v107;
                      v95 -= 8;
                    }
                    while (v79 != v88);
                  }
                  v79 = (char *)__p[0];
                  v108 = (char *)__p[1];
                  __p[0] = v95;
                  __p[1] = v80;
                  *(_QWORD *)&v257 = v96;
                  while (v108 != v79)
                  {
                    v110 = *((_QWORD *)v108 - 1);
                    v108 -= 8;
                    v109 = v110;
                    *(_QWORD *)v108 = 0;
                    if (v110)
                      (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
                  }
                  goto LABEL_121;
                }
              }
              __p[0] = v95;
              __p[1] = v80;
              *(_QWORD *)&v257 = v96;
LABEL_121:
              if (v79)
                operator delete(v79);
LABEL_123:
              __p[1] = v80;
              v111 = operator new(0x68uLL);
              mlir::PatternBenefit::PatternBenefit(&v253, 1);
              mlir::Pattern::Pattern((uint64_t)(v111 + 1), (uint64_t)"mps.condition", 13, (__int16)v253, v5, 0, 0);
              v111[12] = 0;
              *v111 = &off_1E0E49720;
              if (v111[9])
              {
                v112 = *((unsigned int *)v111 + 22);
                if (v112 <= *((_DWORD *)v111 + 23))
                  goto LABEL_125;
              }
              else
              {
                v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertConditi"
                       "onOp<mlir::mps::serialization::ConditionOp, mlir::scf::ConditionOp>]";
                v254 = 165;
                v116 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                if (v254 >= v116)
                  v117 = v116;
                else
                  v117 = v254;
                v118 = &v253[v117];
                v119 = v254 - v117;
                if (v254 - v117 >= 0x12)
                  v120 = 18;
                else
                  v120 = v254 - v117;
                v121 = &v118[v120];
                v122 = v119 - v120;
                if (v122 >= v122 - 1)
                  --v122;
                v111[8] = v121;
                v111[9] = v122;
                v112 = *((unsigned int *)v111 + 22);
                if (v112 <= *((_DWORD *)v111 + 23))
                {
LABEL_125:
                  *((_DWORD *)v111 + 22) = v112;
                  v114 = (char *)__p[1];
                  v113 = v257;
                  if (__p[1] < (void *)v257)
                  {
LABEL_126:
                    *(_QWORD *)v114 = v111;
                    v115 = v114 + 8;
                    goto LABEL_161;
                  }
LABEL_137:
                  v123 = (char *)__p[0];
                  v124 = v114 - (char *)__p[0];
                  v125 = (v114 - (char *)__p[0]) >> 3;
                  v126 = v125 + 1;
                  if ((unint64_t)(v125 + 1) >> 61)
                    goto LABEL_276;
                  v127 = v113 - (unint64_t)__p[0];
                  if (v127 >> 2 > v126)
                    v126 = v127 >> 2;
                  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
                    v128 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v128 = v126;
                  if (v128)
                  {
                    if (v128 >> 61)
                      goto LABEL_277;
                    v129 = (char *)operator new(8 * v128);
                    v130 = &v129[8 * v125];
                    v131 = &v129[8 * v128];
                    *(_QWORD *)v130 = v111;
                    v115 = v130 + 8;
                    v132 = v114 - v123;
                    if (v114 != v123)
                      goto LABEL_146;
                  }
                  else
                  {
                    v129 = 0;
                    v130 = (char *)(8 * v125);
                    v131 = 0;
                    *(_QWORD *)(8 * v125) = v111;
                    v115 = (void *)(8 * v125 + 8);
                    v132 = v114 - v123;
                    if (v114 != v123)
                    {
LABEL_146:
                      v133 = v132 - 8;
                      if (v133 < 0x78
                        || &v114[-(v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v130
                        && &v129[v124 - (v133 & 0xFFFFFFFFFFFFFFF8) - 8] < v114)
                      {
                        goto LABEL_283;
                      }
                      v134 = (v133 >> 3) + 1;
                      v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
                      v136 = &v114[-v135];
                      v130 -= v135;
                      v137 = &v129[8 * v125 - 16];
                      v138 = v114 - 16;
                      v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v141 = *((_OWORD *)v138 - 1);
                        v140 = *(_OWORD *)v138;
                        *((_OWORD *)v138 - 1) = 0uLL;
                        *(_OWORD *)v138 = 0uLL;
                        *((_OWORD *)v137 - 1) = v141;
                        *(_OWORD *)v137 = v140;
                        v137 -= 32;
                        v138 -= 32;
                        v139 -= 4;
                      }
                      while (v139);
                      v114 = v136;
                      if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_283:
                        do
                        {
                          v142 = *((_QWORD *)v114 - 1);
                          v114 -= 8;
                          *(_QWORD *)v114 = 0;
                          *((_QWORD *)v130 - 1) = v142;
                          v130 -= 8;
                        }
                        while (v114 != v123);
                      }
                      v114 = (char *)__p[0];
                      v143 = (char *)__p[1];
                      __p[0] = v130;
                      __p[1] = v115;
                      *(_QWORD *)&v257 = v131;
                      while (v143 != v114)
                      {
                        v145 = *((_QWORD *)v143 - 1);
                        v143 -= 8;
                        v144 = v145;
                        *(_QWORD *)v143 = 0;
                        if (v145)
                          (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
                      }
                      goto LABEL_159;
                    }
                  }
                  __p[0] = v130;
                  __p[1] = v115;
                  *(_QWORD *)&v257 = v131;
LABEL_159:
                  if (v114)
                    operator delete(v114);
LABEL_161:
                  __p[1] = v115;
                  v146 = operator new(0x68uLL);
                  mlir::PatternBenefit::PatternBenefit(&v253, 1);
                  mlir::Pattern::Pattern((uint64_t)(v146 + 1), (uint64_t)"mps.yield", 9, (__int16)v253, v5, 0, 0);
                  v146[12] = 0;
                  *v146 = &off_1E0E48D68;
                  if (v146[9])
                  {
                    v147 = *((unsigned int *)v146 + 22);
                    if (v147 <= *((_DWORD *)v146 + 23))
                      goto LABEL_163;
                  }
                  else
                  {
                    v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::ConvertYie"
                           "ldOp<mlir::mps::serialization::YieldOp, mlir::scf::YieldOp>]";
                    v254 = 153;
                    v151 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                    if (v254 >= v151)
                      v152 = v151;
                    else
                      v152 = v254;
                    v153 = &v253[v152];
                    v154 = v254 - v152;
                    if (v254 - v152 >= 0x12)
                      v155 = 18;
                    else
                      v155 = v254 - v152;
                    v156 = &v153[v155];
                    v157 = v154 - v155;
                    if (v157 >= v157 - 1)
                      --v157;
                    v146[8] = v156;
                    v146[9] = v157;
                    v147 = *((unsigned int *)v146 + 22);
                    if (v147 <= *((_DWORD *)v146 + 23))
                    {
LABEL_163:
                      *((_DWORD *)v146 + 22) = v147;
                      v149 = (char *)__p[1];
                      v148 = v257;
                      if (__p[1] < (void *)v257)
                      {
LABEL_164:
                        *(_QWORD *)v149 = v146;
                        v150 = v149 + 8;
                        goto LABEL_199;
                      }
LABEL_175:
                      v158 = (char *)__p[0];
                      v159 = v149 - (char *)__p[0];
                      v160 = (v149 - (char *)__p[0]) >> 3;
                      v161 = v160 + 1;
                      if ((unint64_t)(v160 + 1) >> 61)
                        goto LABEL_276;
                      v162 = v148 - (unint64_t)__p[0];
                      if (v162 >> 2 > v161)
                        v161 = v162 >> 2;
                      if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF8)
                        v163 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v163 = v161;
                      if (v163)
                      {
                        if (v163 >> 61)
                          goto LABEL_277;
                        v164 = (char *)operator new(8 * v163);
                        v165 = &v164[8 * v160];
                        v166 = &v164[8 * v163];
                        *(_QWORD *)v165 = v146;
                        v150 = v165 + 8;
                        v167 = v149 - v158;
                        if (v149 != v158)
                          goto LABEL_184;
                      }
                      else
                      {
                        v164 = 0;
                        v165 = (char *)(8 * v160);
                        v166 = 0;
                        *(_QWORD *)(8 * v160) = v146;
                        v150 = (void *)(8 * v160 + 8);
                        v167 = v149 - v158;
                        if (v149 != v158)
                        {
LABEL_184:
                          v168 = v167 - 8;
                          if (v168 < 0x78
                            || &v149[-(v168 & 0xFFFFFFFFFFFFFFF8) - 8] < v165
                            && &v164[v159 - (v168 & 0xFFFFFFFFFFFFFFF8) - 8] < v149)
                          {
                            goto LABEL_284;
                          }
                          v169 = (v168 >> 3) + 1;
                          v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
                          v171 = &v149[-v170];
                          v165 -= v170;
                          v172 = &v164[8 * v160 - 16];
                          v173 = v149 - 16;
                          v174 = v169 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v176 = *((_OWORD *)v173 - 1);
                            v175 = *(_OWORD *)v173;
                            *((_OWORD *)v173 - 1) = 0uLL;
                            *(_OWORD *)v173 = 0uLL;
                            *((_OWORD *)v172 - 1) = v176;
                            *(_OWORD *)v172 = v175;
                            v172 -= 32;
                            v173 -= 32;
                            v174 -= 4;
                          }
                          while (v174);
                          v149 = v171;
                          if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_284:
                            do
                            {
                              v177 = *((_QWORD *)v149 - 1);
                              v149 -= 8;
                              *(_QWORD *)v149 = 0;
                              *((_QWORD *)v165 - 1) = v177;
                              v165 -= 8;
                            }
                            while (v149 != v158);
                          }
                          v149 = (char *)__p[0];
                          v178 = (char *)__p[1];
                          __p[0] = v165;
                          __p[1] = v150;
                          *(_QWORD *)&v257 = v166;
                          while (v178 != v149)
                          {
                            v180 = *((_QWORD *)v178 - 1);
                            v178 -= 8;
                            v179 = v180;
                            *(_QWORD *)v178 = 0;
                            if (v180)
                              (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
                          }
                          goto LABEL_197;
                        }
                      }
                      __p[0] = v165;
                      __p[1] = v150;
                      *(_QWORD *)&v257 = v166;
LABEL_197:
                      if (v149)
                        operator delete(v149);
LABEL_199:
                      __p[1] = v150;
                      v181 = operator new(0x68uLL);
                      mlir::PatternBenefit::PatternBenefit(&v253, 1);
                      mlir::Pattern::Pattern((uint64_t)(v181 + 1), (uint64_t)"mps.from_elements", 17, (__int16)v253, v5, 0, 0);
                      v181[12] = 0;
                      *v181 = &off_1E0E4A150;
                      if (v181[9])
                      {
                        v182 = *((unsigned int *)v181 + 22);
                        if (v182 <= *((_DWORD *)v181 + 23))
                          goto LABEL_201;
                      }
                      else
                      {
                        v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::Conver"
                               "tFromElementsOp<mlir::mps::serialization::FromElementsOp, mlir::tensor::FromElementsOp>]";
                        v254 = 177;
                        v186 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                        if (v254 >= v186)
                          v187 = v186;
                        else
                          v187 = v254;
                        v188 = &v253[v187];
                        v189 = v254 - v187;
                        if (v254 - v187 >= 0x12)
                          v190 = 18;
                        else
                          v190 = v254 - v187;
                        v191 = &v188[v190];
                        v192 = v189 - v190;
                        if (v192 >= v192 - 1)
                          --v192;
                        v181[8] = v191;
                        v181[9] = v192;
                        v182 = *((unsigned int *)v181 + 22);
                        if (v182 <= *((_DWORD *)v181 + 23))
                        {
LABEL_201:
                          *((_DWORD *)v181 + 22) = v182;
                          v184 = (char *)__p[1];
                          v183 = v257;
                          if (__p[1] < (void *)v257)
                          {
LABEL_202:
                            *(_QWORD *)v184 = v181;
                            v185 = v184 + 8;
                            goto LABEL_237;
                          }
LABEL_213:
                          v193 = (char *)__p[0];
                          v194 = v184 - (char *)__p[0];
                          v195 = (v184 - (char *)__p[0]) >> 3;
                          v196 = v195 + 1;
                          if ((unint64_t)(v195 + 1) >> 61)
                            goto LABEL_276;
                          v197 = v183 - (unint64_t)__p[0];
                          if (v197 >> 2 > v196)
                            v196 = v197 >> 2;
                          if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFF8)
                            v198 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v198 = v196;
                          if (v198)
                          {
                            if (v198 >> 61)
                              goto LABEL_277;
                            v199 = (char *)operator new(8 * v198);
                            v200 = &v199[8 * v195];
                            v201 = &v199[8 * v198];
                            *(_QWORD *)v200 = v181;
                            v185 = v200 + 8;
                            v202 = v184 - v193;
                            if (v184 != v193)
                              goto LABEL_222;
                          }
                          else
                          {
                            v199 = 0;
                            v200 = (char *)(8 * v195);
                            v201 = 0;
                            *(_QWORD *)(8 * v195) = v181;
                            v185 = (void *)(8 * v195 + 8);
                            v202 = v184 - v193;
                            if (v184 != v193)
                            {
LABEL_222:
                              v203 = v202 - 8;
                              if (v203 < 0x78
                                || &v184[-(v203 & 0xFFFFFFFFFFFFFFF8) - 8] < v200
                                && &v199[v194 - (v203 & 0xFFFFFFFFFFFFFFF8) - 8] < v184)
                              {
                                goto LABEL_285;
                              }
                              v204 = (v203 >> 3) + 1;
                              v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
                              v206 = &v184[-v205];
                              v200 -= v205;
                              v207 = &v199[8 * v195 - 16];
                              v208 = v184 - 16;
                              v209 = v204 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v211 = *((_OWORD *)v208 - 1);
                                v210 = *(_OWORD *)v208;
                                *((_OWORD *)v208 - 1) = 0uLL;
                                *(_OWORD *)v208 = 0uLL;
                                *((_OWORD *)v207 - 1) = v211;
                                *(_OWORD *)v207 = v210;
                                v207 -= 32;
                                v208 -= 32;
                                v209 -= 4;
                              }
                              while (v209);
                              v184 = v206;
                              if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
                              {
LABEL_285:
                                do
                                {
                                  v212 = *((_QWORD *)v184 - 1);
                                  v184 -= 8;
                                  *(_QWORD *)v184 = 0;
                                  *((_QWORD *)v200 - 1) = v212;
                                  v200 -= 8;
                                }
                                while (v184 != v193);
                              }
                              v184 = (char *)__p[0];
                              v213 = (char *)__p[1];
                              __p[0] = v200;
                              __p[1] = v185;
                              *(_QWORD *)&v257 = v201;
                              while (v213 != v184)
                              {
                                v215 = *((_QWORD *)v213 - 1);
                                v213 -= 8;
                                v214 = v215;
                                *(_QWORD *)v213 = 0;
                                if (v215)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
                              }
                              goto LABEL_235;
                            }
                          }
                          __p[0] = v200;
                          __p[1] = v185;
                          *(_QWORD *)&v257 = v201;
LABEL_235:
                          if (v184)
                            operator delete(v184);
LABEL_237:
                          __p[1] = v185;
                          v216 = operator new(0x68uLL);
                          mlir::PatternBenefit::PatternBenefit(&v253, 1);
                          mlir::Pattern::Pattern((uint64_t)(v216 + 1), (uint64_t)"mps.extract", 11, (__int16)v253, v5, 0, 0);
                          v216[12] = 0;
                          *v216 = &off_1E0E49190;
                          if (v216[9])
                          {
                            v217 = *((unsigned int *)v216 + 22);
                            if (v217 <= *((_DWORD *)v216 + 23))
                              goto LABEL_239;
                          }
                          else
                          {
                            v253 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::(anonymous namespace)::Co"
                                   "nvertExtractOp<mlir::mps::serialization::ExtractOp, mlir::tensor::ExtractOp>]";
                            v254 = 162;
                            v221 = llvm::StringRef::find((uint64_t *)&v253, "DesiredTypeName = ", 0x12uLL, 0);
                            if (v254 >= v221)
                              v222 = v221;
                            else
                              v222 = v254;
                            v223 = &v253[v222];
                            v224 = v254 - v222;
                            if (v254 - v222 >= 0x12)
                              v225 = 18;
                            else
                              v225 = v254 - v222;
                            v226 = &v223[v225];
                            v227 = v224 - v225;
                            if (v227 >= v227 - 1)
                              --v227;
                            v216[8] = v226;
                            v216[9] = v227;
                            v217 = *((unsigned int *)v216 + 22);
                            if (v217 <= *((_DWORD *)v216 + 23))
                            {
LABEL_239:
                              *((_DWORD *)v216 + 22) = v217;
                              v219 = (char *)__p[1];
                              v218 = v257;
                              if (__p[1] < (void *)v257)
                              {
LABEL_240:
                                *(_QWORD *)v219 = v216;
                                v220 = v219 + 8;
                                goto LABEL_275;
                              }
LABEL_251:
                              v228 = (char *)__p[0];
                              v229 = v219 - (char *)__p[0];
                              v230 = (v219 - (char *)__p[0]) >> 3;
                              v231 = v230 + 1;
                              if (!((unint64_t)(v230 + 1) >> 61))
                              {
                                v232 = v218 - (unint64_t)__p[0];
                                if (v232 >> 2 > v231)
                                  v231 = v232 >> 2;
                                if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF8)
                                  v233 = 0x1FFFFFFFFFFFFFFFLL;
                                else
                                  v233 = v231;
                                if (!v233)
                                {
                                  v234 = 0;
                                  v235 = (char *)(8 * v230);
                                  v236 = 0;
                                  *(_QWORD *)(8 * v230) = v216;
                                  v220 = (void *)(8 * v230 + 8);
                                  v237 = v219 - v228;
                                  if (v219 != v228)
                                    goto LABEL_260;
                                  goto LABEL_272;
                                }
                                if (!(v233 >> 61))
                                {
                                  v234 = (char *)operator new(8 * v233);
                                  v235 = &v234[8 * v230];
                                  v236 = &v234[8 * v233];
                                  *(_QWORD *)v235 = v216;
                                  v220 = v235 + 8;
                                  v237 = v219 - v228;
                                  if (v219 != v228)
                                  {
LABEL_260:
                                    v238 = v237 - 8;
                                    if (v238 < 0x78
                                      || &v219[-(v238 & 0xFFFFFFFFFFFFFFF8) - 8] < v235
                                      && &v234[v229 - (v238 & 0xFFFFFFFFFFFFFFF8) - 8] < v219)
                                    {
                                      goto LABEL_286;
                                    }
                                    v239 = (v238 >> 3) + 1;
                                    v240 = 8 * (v239 & 0x3FFFFFFFFFFFFFFCLL);
                                    v241 = &v219[-v240];
                                    v235 -= v240;
                                    v242 = &v234[8 * v230 - 16];
                                    v243 = v219 - 16;
                                    v244 = v239 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v246 = *((_OWORD *)v243 - 1);
                                      v245 = *(_OWORD *)v243;
                                      *((_OWORD *)v243 - 1) = 0uLL;
                                      *(_OWORD *)v243 = 0uLL;
                                      *((_OWORD *)v242 - 1) = v246;
                                      *(_OWORD *)v242 = v245;
                                      v242 -= 32;
                                      v243 -= 32;
                                      v244 -= 4;
                                    }
                                    while (v244);
                                    v219 = v241;
                                    if (v239 != (v239 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
LABEL_286:
                                      do
                                      {
                                        v247 = *((_QWORD *)v219 - 1);
                                        v219 -= 8;
                                        *(_QWORD *)v219 = 0;
                                        *((_QWORD *)v235 - 1) = v247;
                                        v235 -= 8;
                                      }
                                      while (v219 != v228);
                                    }
                                    v219 = (char *)__p[0];
                                    v248 = (char *)__p[1];
                                    __p[0] = v235;
                                    __p[1] = v220;
                                    *(_QWORD *)&v257 = v236;
                                    while (v248 != v219)
                                    {
                                      v250 = *((_QWORD *)v248 - 1);
                                      v248 -= 8;
                                      v249 = v250;
                                      *(_QWORD *)v248 = 0;
                                      if (v250)
                                        (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
                                    }
                                    goto LABEL_273;
                                  }
LABEL_272:
                                  __p[0] = v235;
                                  __p[1] = v220;
                                  *(_QWORD *)&v257 = v236;
LABEL_273:
                                  if (v219)
                                    operator delete(v219);
LABEL_275:
                                  __p[1] = v220;
                                  mlir::FrozenRewritePatternSet::FrozenRewritePatternSet(&v253, &v255, 0, 0, 0, 0);
                                  mlir::applyFullConversion(v2, (mlir::Operation *)v268, (const mlir::ConversionTarget *)&v253, v251);
                                }
LABEL_277:
                                std::__throw_bad_array_new_length[abi:nn180100]();
                              }
LABEL_276:
                              abort();
                            }
                          }
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v216 + 10), v216 + 12, v217, 16);
                          *((_DWORD *)v216 + 22) = *((_DWORD *)v216 + 22);
                          v219 = (char *)__p[1];
                          v218 = v257;
                          if (__p[1] < (void *)v257)
                            goto LABEL_240;
                          goto LABEL_251;
                        }
                      }
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v181 + 10), v181 + 12, v182, 16);
                      *((_DWORD *)v181 + 22) = *((_DWORD *)v181 + 22);
                      v184 = (char *)__p[1];
                      v183 = v257;
                      if (__p[1] < (void *)v257)
                        goto LABEL_202;
                      goto LABEL_213;
                    }
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v146 + 10), v146 + 12, v147, 16);
                  *((_DWORD *)v146 + 22) = *((_DWORD *)v146 + 22);
                  v149 = (char *)__p[1];
                  v148 = v257;
                  if (__p[1] < (void *)v257)
                    goto LABEL_164;
                  goto LABEL_175;
                }
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v111 + 10), v111 + 12, v112, 16);
              *((_DWORD *)v111 + 22) = *((_DWORD *)v111 + 22);
              v114 = (char *)__p[1];
              v113 = v257;
              if (__p[1] < (void *)v257)
                goto LABEL_126;
              goto LABEL_137;
            }
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v76 + 10), v76 + 12, v77, 16);
          *((_DWORD *)v76 + 22) = *((_DWORD *)v76 + 22);
          v79 = (char *)__p[1];
          v78 = v257;
          if (__p[1] < (void *)v257)
            goto LABEL_88;
          goto LABEL_99;
        }
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v41 + 10), v41 + 12, v42, 16);
      *((_DWORD *)v41 + 22) = *((_DWORD *)v41 + 22);
      v44 = (char *)__p[1];
      v43 = v257;
      if (__p[1] < (void *)v257)
        goto LABEL_50;
      goto LABEL_61;
    }
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 10), v6 + 12, v7, 16);
  *((_DWORD *)v6 + 22) = *((_DWORD *)v6 + 22);
  v9 = (char *)__p[1];
  v8 = v257;
  if (__p[1] < (void *)v257)
    goto LABEL_12;
  goto LABEL_23;
}

double mlir::PassWrapper<mlir::mps::MPSDeserializationPass,mlir::OperationPass<mlir::mps::serialization::ModuleOp>>::clonePass@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  uint64_t v5;
  double result;

  v4 = operator new(0x158uLL);
  v5 = *(_QWORD *)(a1 + 8);
  v4[1] = *(_OWORD *)(a1 + 16);
  *((_QWORD *)v4 + 4) = *(_QWORD *)(a1 + 32);
  *((_BYTE *)v4 + 40) = 0;
  *((_BYTE *)v4 + 120) = 0;
  result = 0.0;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = (char *)v4 + 200;
  *((_QWORD *)v4 + 24) = 0x400000000;
  *((_QWORD *)v4 + 29) = (char *)v4 + 248;
  *((_QWORD *)v4 + 30) = 0x400000000;
  *((_QWORD *)v4 + 35) = 0;
  *((_QWORD *)v4 + 36) = 0;
  *((_DWORD *)v4 + 74) = 0;
  *((_DWORD *)v4 + 75) = 16;
  v4[19] = 0u;
  v4[20] = 0u;
  *((_QWORD *)v4 + 42) = 0;
  *(_QWORD *)v4 = &unk_1E0E4BB78;
  *((_QWORD *)v4 + 1) = v5;
  *a2 = v4;
  return result;
}

mlir::StringAttr ****_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZNS1_3mps22MPSDeserializationPass14runOnOperationEvEUlNSB_13serialization6FuncOpEE_SE_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESN_E4typeES3_OT1_EUlS3_E_EEvlS3_(mlir::StringAttr ****result, mlir::GenericProgramPoint *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::FuncOp,void>::id)
      return (mlir::StringAttr ****)mlir::mps::MPSDeserializationPass::runOnOperation(void)::{lambda(mlir::mps::serialization::FuncOp)#1}::operator()(*result, a2);
  }
  return result;
}

mlir::GenericProgramPoint *mlir::mps::MPSDeserializationPass::runOnOperation(void)::{lambda(mlir::mps::serialization::FuncOp)#1}::operator()(mlir::StringAttr ***a1, mlir::GenericProgramPoint *this)
{
  mlir::StringAttr **v4;
  uint64_t v5;
  uint64_t v6;
  mlir::StringAttr *v7;
  mlir::StringAttr **v8;
  uint64_t v9;
  uint64_t InherentAttr;
  char v11;
  uint64_t v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  uint64_t Value;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t CallableRegion;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  mlir::Region *Body;
  mlir::Region *v24;
  mlir::GenericProgramPoint *result;
  __int128 v26;
  _QWORD v27[2];
  uint64_t FunctionType;
  mlir::StringAttr **v29;
  __int128 v30;
  mlir::ForwardIterator *v31;
  mlir::Operation *v32;

  v32 = this;
  v4 = *a1;
  v5 = (uint64_t)(*a1 + 2);
  v26 = *(_OWORD *)v5;
  v6 = *((_QWORD *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *(_QWORD *)v5 = v6;
  v4[3] = v7;
  v8 = *a1;
  v9 = *((_QWORD *)this + 3);
  if (*((_BYTE *)this + 47))
  {
    InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8);
    if (v11)
    {
      if (InherentAttr)
        goto LABEL_4;
LABEL_8:
      v12 = 0;
      goto LABEL_9;
    }
  }
  InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_name", 8uLL);
  if (!InherentAttr)
    goto LABEL_8;
LABEL_4:
  if (*(_UNKNOWN **)(*(_QWORD *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
    v12 = InherentAttr;
  else
    v12 = 0;
LABEL_9:
  v29 = (mlir::StringAttr **)v12;
  *(_QWORD *)&v30 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v29);
  *((_QWORD *)&v30 + 1) = v13;
  v27[1] = 0;
  FunctionType = mlir::func::FuncOp::getFunctionType((mlir::func::FuncOp *)&v32);
  v27[0] = 0;
  v14 = mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef,mlir::FunctionType,llvm::ArrayRef<mlir::NamedAttribute>>(v8, v9, (uint64_t *)&v30, &FunctionType, (uint64_t)v27);
  v31 = v14;
  v27[0] = mlir::Operation::getAttrDictionary(v14);
  *(_QWORD *)&v30 = mlir::Operation::getAttrDictionary(v32);
  Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v30);
  if (v16)
  {
    v17 = (__int128 *)Value;
    v18 = 16 * v16;
    do
    {
      v30 = *v17;
      CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v30);
      if ((mlir::DictionaryAttr::contains((uint64_t)v27, CallableRegion) & 1) == 0)
      {
        v20 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v30);
        mlir::Operation::setAttr((uint64_t)v14, v20, *((uint64_t *)&v30 + 1));
      }
      ++v17;
      v18 -= 16;
    }
    while (v18);
  }
  mlir::detail::FunctionOpInterfaceTrait<mlir::func::FuncOp>::addEntryBlock((mlir::func::FuncOp *)&v31);
  v21 = *((unsigned int *)v31 + 11);
  if ((v21 & 0x7FFFFF) != 0)
  {
    v22 = (_QWORD *)((((unint64_t)v31 + 16 * ((v21 >> 23) & 1) + ((v21 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                   + 32 * *((unsigned int *)v31 + 10));
    if ((_QWORD *)*v22 != v22)
    {
LABEL_16:
      Body = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v31);
      goto LABEL_19;
    }
  }
  else if (MEMORY[0])
  {
    goto LABEL_16;
  }
  Body = 0;
LABEL_19:
  v24 = (mlir::Region *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v32);
  mlir::Region::takeBody(Body, v24);
  mlir::Operation::erase(v32);
  v29 = *a1;
  *(_QWORD *)&v30 = &v29;
  result = mlir::detail::walk<mlir::ForwardIterator>(v31, (mlir::Operation *)_ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_3mps22MPSDeserializationPass14runOnOperationEvENKUlNSB_13serialization6FuncOpEE_clESE_EUlNSD_8ReturnOpEE_SG_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESP_E4typeES3_OT1_EUlS3_E_EEvlS3_, (uint64_t)&v30, 1);
  if (v4)
  {
    if ((_QWORD)v26)
    {
      *(_OWORD *)v5 = v26;
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
  }
  return result;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::func::FuncOp,llvm::StringRef,mlir::FunctionType,llvm::ArrayRef<mlir::NamedAttribute>>(mlir::StringAttr **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  uint64_t v13;
  mlir::GenericProgramPoint *v14;
  mlir::GenericProgramPoint *v15;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  _QWORD v22[39];

  v22[38] = *MEMORY[0x1E0C80C00];
  v17 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"func.func", (const unsigned __int8 *)9, Context);
  if (!v12)
  {
    v21 = 1283;
    v20[2] = (uint64_t)"func.func";
    v20[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v19 = 259;
    llvm::operator+(v20, (uint64_t *)&v18, (uint64_t)v22);
    llvm::report_fatal_error((llvm::Twine *)v22, 1);
  }
  mlir::OperationState::OperationState(v22, a2, v11);
  mlir::func::FuncOp::build(a1, (uint64_t)v22, *a3, a3[1], *a4, *(const void **)a5, *(_QWORD *)(a5 + 8), v13, 0, 0);
  v14 = mlir::OpBuilder::create((mlir::OpBuilder *)a1, (const mlir::OperationState *)v22);
  if (*(_UNKNOWN **)(*((_QWORD *)v14 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::FuncOp,void>::id)
    v15 = v14;
  else
    v15 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v22);
  return v15;
}

void _ZN4llvm12function_refIFvPN4mlir9OperationEEE11callback_fnIZNS1_6detail4walkILNS1_9WalkOrderE1ENS1_15ForwardIteratorEZZNS1_3mps22MPSDeserializationPass14runOnOperationEvENKUlNSB_13serialization6FuncOpEE_clESE_EUlNSD_8ReturnOpEE_SG_vEENSt3__19enable_ifIXaantsr4llvm9is_one_ofIT2_S3_PNS1_6RegionEPNS1_5BlockEEE5valuesr3std7is_sameIT3_vEE5valueESP_E4typeES3_OT1_EUlS3_E_EEvlS3_(mlir::OpBuilder ***a1, mlir::GenericProgramPoint *a2)
{
  if (a2)
  {
    if (*(_UNKNOWN **)(*((_QWORD *)a2 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::mps::serialization::ReturnOp,void>::id)
      mlir::mps::MPSDeserializationPass::runOnOperation(void)::{lambda(mlir::mps::serialization::FuncOp)#1}::operator() const(mlir::mps::serialization::FuncOp)::{lambda(mlir::mps::serialization::ReturnOp)#1}::operator()(*a1, a2);
  }
}

void mlir::mps::MPSDeserializationPass::runOnOperation(void)::{lambda(mlir::mps::serialization::FuncOp)#1}::operator() const(mlir::mps::serialization::FuncOp)::{lambda(mlir::mps::serialization::ReturnOp)#1}::operator()(mlir::OpBuilder **a1, mlir::GenericProgramPoint *this)
{
  mlir::OpBuilder *v4;
  uint64_t v5;
  uint64_t v6;
  mlir::OpBuilder *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t Inputs;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  const double *v15;
  unsigned __int128 *v16;
  unint64_t v17;
  const double *v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  mlir::Operation *v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  v25 = this;
  v4 = *a1;
  v5 = *((_QWORD *)this + 2);
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  *((_QWORD *)v4 + 2) = v5;
  *((_QWORD *)v4 + 3) = v6;
  v7 = *a1;
  v8 = *((_QWORD *)this + 3);
  Inputs = mlir::anec::Concat::getInputs((mlir::anec::Concat *)&v25);
  v11 = v9;
  v26 = v28;
  v27 = 0x600000000;
  if (v9 < 7)
  {
    if (!v9)
    {
      v24 = 0;
      goto LABEL_16;
    }
    v12 = v28;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v9, 8);
    v12 = (char *)v26 + 8 * v27;
    if (v11 >= 0xD
      && ((unint64_t)v12 >= Inputs + 32 * v11
       || Inputs + 24 >= (unint64_t)v26 + 8 * v11 + 8 * v27))
    {
      v14 = v11 & 3;
      if ((v11 & 3) == 0)
        v14 = 4;
      v13 = v11 - v14;
      v12 += v13;
      v15 = (const double *)(Inputs + 88);
      v16 = (unsigned __int128 *)((char *)v26 + 8 * v27 + 16);
      v17 = v13;
      do
      {
        v18 = v15 - 8;
        v19 = (unsigned __int128)vld4q_f64(v18);
        v20 = (unsigned __int128)vld4q_f64(v15);
        *(v16 - 1) = v19;
        *v16 = v20;
        v15 += 16;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      goto LABEL_13;
    }
  }
  v13 = 0;
LABEL_13:
  v21 = v11 - v13;
  v22 = (uint64_t *)(Inputs + 32 * v13 + 24);
  do
  {
    v23 = *v22;
    v22 += 4;
    *v12++ = v23;
    --v21;
  }
  while (v21);
  v24 = v27;
LABEL_16:
  LODWORD(v27) = v24 + v11;
  mlir::OpBuilder::create<mlir::func::ReturnOp,llvm::SmallVector<mlir::Value,6u>>(v7, v8, (uint64_t)&v26);
  if (v26 != v28)
    free(v26);
  mlir::Operation::erase(v25);
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::func::ReturnOp,llvm::SmallVector<mlir::Value,6u>>(mlir::OpBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *Context;
  uint64_t v7;
  char v8;
  mlir::GenericProgramPoint *v9;
  mlir::GenericProgramPoint *v10;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[4];
  __int16 v16;
  unint64_t v17[2];
  _QWORD v18[39];

  v18[38] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  v7 = mlir::RegisteredOperationName::lookup((int8x16_t *)"func.return", (const unsigned __int8 *)0xB, Context);
  if (!v8)
  {
    v16 = 1283;
    v15[2] = (uint64_t)"func.return";
    v15[3] = 11;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v14 = 259;
    llvm::operator+(v15, (uint64_t *)&v13, (uint64_t)v18);
    llvm::report_fatal_error((llvm::Twine *)v18, 1);
  }
  mlir::OperationState::OperationState(v18, a2, v7);
  mlir::ValueRange::ValueRange(v17, *(_QWORD *)a3, *(unsigned int *)(a3 + 8));
  mlir::anec::RegionReturn::build((uint64_t)a1, (uint64_t)v18, v17[0], v17[1]);
  v9 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v18);
  if (*(_UNKNOWN **)(*((_QWORD *)v9 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::func::ReturnOp,void>::id)
    v10 = v9;
  else
    v10 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v18);
  return v10;
}

_DWORD *mlir::ConversionTarget::addIllegalOp<mlir::mps::serialization::ConditionOp,mlir::mps::serialization::YieldOp,mlir::mps::serialization::ExtractOp,mlir::mps::serialization::FromElementsOp>(uint64_t a1)
{
  uint64_t v3;

  mlir::OperationName::OperationName(&v3, "mps.condition", 13, *(_QWORD *)(a1 + 152));
  mlir::ConversionTarget::setOpAction(a1, v3, 2);
  mlir::OperationName::OperationName(&v3, "mps.yield", 9, *(_QWORD *)(a1 + 152));
  mlir::ConversionTarget::setOpAction(a1, v3, 2);
  mlir::OperationName::OperationName(&v3, "mps.extract", 11, *(_QWORD *)(a1 + 152));
  mlir::ConversionTarget::setOpAction(a1, v3, 2);
  mlir::OperationName::OperationName(&v3, "mps.from_elements", 17, *(_QWORD *)(a1 + 152));
  return mlir::ConversionTarget::setOpAction(a1, v3, 2);
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertForOp<mlir::mps::serialization::ForOp,mlir::scf::ForOp>::~ConvertForOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertForOp<mlir::mps::serialization::ForOp,mlir::scf::ForOp>::~ConvertForOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ForOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ForOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ForOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::ForOpGenericAdaptorBase::ForOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertForOp<mlir::mps::serialization::ForOp,mlir::scf::ForOp>::matchAndRewrite(int a1, uint64_t a2, mlir::scf::detail::ForOpGenericAdaptorBase *this, uint64_t (***a4)(_QWORD, uint64_t, unint64_t, char *))
{
  uint64_t v6;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t Body;
  _QWORD *v17;
  _QWORD *i;
  _QWORD *v19;
  mlir::Block *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t Results;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  mlir::GenericProgramPoint *v29;
  unsigned int *v30;
  unint64_t v31[2];
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30 = (unsigned int *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  ODSOperandIndexAndLength = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 0, *((_DWORD *)this + 12));
  v8 = *((_QWORD *)this + 5);
  v32 = v8;
  v33 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v8 = mlir::ValueRange::offset_base(&v32, ODSOperandIndexAndLength);
  v32 = v8;
  v33 = 0;
  v28 = mlir::ValueRange::dereference_iterator(&v32, 0);
  v9 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 1u, *((_DWORD *)this + 12));
  v10 = *((_QWORD *)this + 5);
  v32 = v10;
  v33 = v9;
  if (v9)
    v10 = mlir::ValueRange::offset_base(&v32, v9);
  v32 = v10;
  v33 = 0;
  v27 = mlir::ValueRange::dereference_iterator(&v32, 0);
  v11 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 2u, *((_DWORD *)this + 12));
  v12 = *((_QWORD *)this + 5);
  v32 = v12;
  v33 = v11;
  if (v11)
    v12 = mlir::ValueRange::offset_base(&v32, v11);
  v32 = v12;
  v33 = 0;
  v26 = mlir::ValueRange::dereference_iterator(&v32, 0);
  v13 = mlir::scf::detail::ForOpGenericAdaptorBase::getODSOperandIndexAndLength(this, 3u, *((_DWORD *)this + 12));
  v14 = *((_QWORD *)this + 5);
  v32 = v14;
  v33 = v13;
  if ((_DWORD)v13)
  {
    v14 = mlir::ValueRange::offset_base(&v32, v13);
    v15 = v33;
  }
  else
  {
    v15 = 0;
  }
  v32 = v14;
  v33 = (HIDWORD(v13) + v13) - v15;
  v29 = mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 1), v6, &v28, &v27, &v26, (uint64_t *)&v32);
  Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v30);
  v17 = (_QWORD *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v29);
  for (i = (_QWORD *)*v17; (_QWORD *)*v17 != v17; i = (_QWORD *)*v17)
  {
    if (i)
      v19 = i - 1;
    else
      v19 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v19);
  }
  mlir::ValueRange::ValueRange(&v32, 0, 0);
  mlir::OpBuilder::createBlock(a4 + 1, (uint64_t)v17, 0, v32, v33, 0, 0);
  if (*v17)
    v20 = (mlir::Block *)(*v17 - 8);
  else
    v20 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, Body, v20);
  if (*v17)
    v21 = *v17 - 8;
  else
    v21 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v21);
  v22 = v30;
  Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v29);
  mlir::ValueRange::ValueRange(v31, Results, v24);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v22, v31[0], v31[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ForOp,mlir::Value,mlir::Value,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t *Context;
  uint64_t v13;
  char v14;
  uint64_t v15;
  mlir::GenericProgramPoint *v16;
  mlir::GenericProgramPoint *v17;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  __int16 v22;
  uint64_t v23[4];
  __int16 v24;
  _QWORD v25[39];

  v25[38] = *MEMORY[0x1E0C80C00];
  v20 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  v13 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.for", (const unsigned __int8 *)7, Context);
  if (!v14)
  {
    v24 = 1283;
    v23[2] = (uint64_t)"scf.for";
    v23[3] = 7;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v22 = 259;
    llvm::operator+(v23, (uint64_t *)&v21, (uint64_t)v25);
    llvm::report_fatal_error((llvm::Twine *)v25, 1);
  }
  mlir::OperationState::OperationState(v25, a2, v13);
  mlir::scf::ForOp::build((uint64_t)a1, (uint64_t)v25, *a3, *a4, *a5, *a6, a6[1], v15, 0, v19);
  v16 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v25);
  if (*(_UNKNOWN **)(*((_QWORD *)v16 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ForOp,void>::id)
    v17 = v16;
  else
    v17 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v25);
  return v17;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertWhileOp<mlir::mps::serialization::WhileOp,mlir::scf::WhileOp>::~ConvertWhileOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertWhileOp<mlir::mps::serialization::WhileOp,mlir::scf::WhileOp>::~ConvertWhileOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::WhileOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::WhileOp>::rewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::WhileOp>::matchAndRewrite(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::WhileOpGenericAdaptorBase::WhileOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, unsigned int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertWhileOp<mlir::mps::serialization::WhileOp,mlir::scf::WhileOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, uint64_t, unint64_t, char *))
{
  mlir::OpBuilder *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  _BYTE *v15;
  unint64_t Body;
  _QWORD *v17;
  _QWORD *i;
  _QWORD *v19;
  mlir::Block *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *j;
  _QWORD *v25;
  mlir::Block *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t Results;
  unint64_t v30;
  mlir::GenericProgramPoint *v32;
  unsigned int *v33;
  unint64_t v34[2];
  __int128 v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[48];
  uint64_t v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v33 = (unsigned int *)a2;
  v6 = (mlir::OpBuilder *)(a4 + 1);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8)
    v9 = a2 - 16;
  else
    v9 = 0;
  v36 = v38;
  v37 = 0x600000000;
  if (v8 < 7)
  {
    if (!(_DWORD)v8)
    {
      v14 = 0;
      v15 = v38;
      goto LABEL_11;
    }
    v10 = 0;
    v11 = v38;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v38, v8, 8);
    v10 = v37;
    v11 = v36;
  }
  v12 = 0;
  v13 = &v11[8 * v10];
  do
  {
    *(_QWORD *)&v13[8 * v12] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v12;
  }
  while (v8 != v12);
  v14 = v37;
  v15 = v36;
LABEL_11:
  LODWORD(v37) = v14 + v8;
  mlir::ValueRange::ValueRange((unint64_t *)v39, (uint64_t)v15, (v14 + v8));
  v35 = *(_OWORD *)(a3 + 40);
  v32 = mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::TypeRange,mlir::ValueRange>(v6, v7, v39, (uint64_t *)&v35);
  if (v36 != v38)
    free(v36);
  Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v33);
  v17 = (_QWORD *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v32);
  for (i = (_QWORD *)*v17; (_QWORD *)*v17 != v17; i = (_QWORD *)*v17)
  {
    if (i)
      v19 = i - 1;
    else
      v19 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v19);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v36, 0, 0);
  mlir::OpBuilder::createBlock(v6, (uint64_t)v17, 0, (uint64_t)v36, v37, 0, 0);
  if (*v17)
    v20 = (mlir::Block *)(*v17 - 8);
  else
    v20 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, Body, v20);
  if (*v17)
    v21 = *v17 - 8;
  else
    v21 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v21);
  v22 = mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v33);
  v23 = (_QWORD *)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v32);
  for (j = (_QWORD *)*v23; (_QWORD *)*v23 != v23; j = (_QWORD *)*v23)
  {
    if (j)
      v25 = j - 1;
    else
      v25 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v25);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v36, 0, 0);
  mlir::OpBuilder::createBlock(v6, (uint64_t)v23, 0, (uint64_t)v36, v37, 0, 0);
  if (*v23)
    v26 = (mlir::Block *)(*v23 - 8);
  else
    v26 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, v22, v26);
  if (*v23)
    v27 = *v23 - 8;
  else
    v27 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v27);
  v28 = v33;
  Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v32);
  mlir::ValueRange::ValueRange(v34, Results, v30);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v28, v34[0], v34[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::WhileOp,mlir::TypeRange,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.while", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"scf.while";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::scf::WhileOp::build((uint64_t)a1, (uint64_t)v19, *a3, a3[1], *a4, a4[1], 0, 0);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::WhileOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertIfOp<mlir::mps::serialization::IfOp,mlir::scf::IfOp>::~ConvertIfOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertIfOp<mlir::mps::serialization::IfOp,mlir::scf::IfOp>::~ConvertIfOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::IfOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::IfOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::IfOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::IfOpGenericAdaptorBase::IfOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertIfOp<mlir::mps::serialization::IfOp,mlir::scf::IfOp>::matchAndRewrite(uint64_t a1, uint64_t a2, mlir::scf::detail::IfOpGenericAdaptorBase *a3, uint64_t (***a4)(_QWORD, uint64_t, unint64_t, char *))
{
  mlir::OpBuilder *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  _BYTE *v15;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v17;
  unint64_t Body;
  _QWORD *v19;
  _QWORD *i;
  _QWORD *v21;
  mlir::Block *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *j;
  _QWORD *v27;
  mlir::Block *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t Results;
  unint64_t v32;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36[2];
  void *v37;
  uint64_t v38;
  _BYTE v39[48];
  uint64_t v40[2];
  mlir::GenericProgramPoint *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v35 = (unsigned int *)a2;
  v6 = (mlir::OpBuilder *)(a4 + 1);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8)
    v9 = a2 - 16;
  else
    v9 = 0;
  v37 = v39;
  v38 = 0x600000000;
  if (v8 < 7)
  {
    if (!(_DWORD)v8)
    {
      v14 = 0;
      v15 = v39;
      goto LABEL_11;
    }
    v10 = 0;
    v11 = v39;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, v39, v8, 8);
    v10 = v38;
    v11 = v37;
  }
  v12 = 0;
  v13 = &v11[8 * v10];
  do
  {
    *(_QWORD *)&v13[8 * v12] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v9, v12) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v12;
  }
  while (v8 != v12);
  v14 = v38;
  v15 = v37;
LABEL_11:
  LODWORD(v38) = v14 + v8;
  mlir::ValueRange::ValueRange((unint64_t *)v40, (uint64_t)v15, (v14 + v8));
  ODSOperandIndexAndLength = mlir::scf::detail::IfOpGenericAdaptorBase::getODSOperandIndexAndLength(a3, 0);
  v17 = *((_QWORD *)a3 + 5);
  v41 = (mlir::GenericProgramPoint *)v17;
  v42 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v17 = mlir::ValueRange::offset_base(&v41, ODSOperandIndexAndLength);
  v41 = (mlir::GenericProgramPoint *)v17;
  v42 = 0;
  v34 = mlir::ValueRange::dereference_iterator(&v41, 0);
  v41 = mlir::OpBuilder::create<mlir::scf::IfOp,mlir::TypeRange,mlir::Value>(v6, v7, v40, &v34);
  if (v37 != v39)
    free(v37);
  Body = mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v35);
  v19 = (_QWORD *)mlir::anec::A11Legacy::getBody((mlir::anec::A11Legacy *)&v41);
  for (i = (_QWORD *)*v19; (_QWORD *)*v19 != v19; i = (_QWORD *)*v19)
  {
    if (i)
      v21 = i - 1;
    else
      v21 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v21);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v37, 0, 0);
  mlir::OpBuilder::createBlock(v6, (uint64_t)v19, 0, (uint64_t)v37, v38, 0, 0);
  if (*v19)
    v22 = (mlir::Block *)(*v19 - 8);
  else
    v22 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, Body, v22);
  if (*v19)
    v23 = *v19 - 8;
  else
    v23 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v23);
  v24 = mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v35);
  v25 = (_QWORD *)mlir::scf::WhileOp::getAfter((mlir::scf::WhileOp *)&v41);
  for (j = (_QWORD *)*v25; (_QWORD *)*v25 != v25; j = (_QWORD *)*v25)
  {
    if (j)
      v27 = j - 1;
    else
      v27 = 0;
    ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), _QWORD *))(*a4)[6])(a4, v27);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v37, 0, 0);
  mlir::OpBuilder::createBlock(v6, (uint64_t)v25, 0, (uint64_t)v37, v38, 0, 0);
  if (*v25)
    v28 = (mlir::Block *)(*v25 - 8);
  else
    v28 = 0;
  mlir::RewriterBase::inlineRegionBefore(a4, v24, v28);
  if (*v25)
    v29 = *v25 - 8;
  else
    v29 = 0;
  ((void (*)(uint64_t (***)(_QWORD, uint64_t, unint64_t, char *), uint64_t))(*a4)[6])(a4, v29);
  v30 = v35;
  Results = mlir::pdl::ApplyNativeRewriteOp::getResults((mlir::pdl::ApplyNativeRewriteOp *)&v41);
  mlir::ValueRange::ValueRange(v36, Results, v32);
  mlir::ConversionPatternRewriter::replaceOp((uint64_t)a4, v30, v36[0], v36[1]);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::IfOp,mlir::TypeRange,mlir::Value>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.if", (const unsigned __int8 *)6, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"scf.if";
    v17[3] = 6;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::scf::IfOp::build(a1, (unsigned int *)v19, *a3, a3[1], *a4);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::IfOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertConditionOp<mlir::mps::serialization::ConditionOp,mlir::scf::ConditionOp>::~ConvertConditionOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertConditionOp<mlir::mps::serialization::ConditionOp,mlir::scf::ConditionOp>::~ConvertConditionOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ConditionOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ConditionOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ConditionOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::ConditionOpGenericAdaptorBase::ConditionOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertConditionOp<mlir::mps::serialization::ConditionOp,mlir::scf::ConditionOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  unsigned int ODSOperandIndexAndLength;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  mlir::GenericProgramPoint *v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[48];
  uint64_t v26[2];
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7)
    v8 = a2 - 16;
  else
    v8 = 0;
  v23 = v25;
  v24 = 0x600000000;
  if (v7 < 7)
  {
    if (!(_DWORD)v7)
    {
      v13 = 0;
      v14 = v25;
      goto LABEL_11;
    }
    v9 = 0;
    v10 = v25;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v7, 8);
    v9 = v24;
    v10 = v23;
  }
  v11 = 0;
  v12 = &v10[8 * v9];
  do
  {
    *(_QWORD *)&v12[8 * v11] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v11) + 8) & 0xFFFFFFFFFFFFFFF8;
    ++v11;
  }
  while (v7 != v11);
  v13 = v24;
  v14 = v23;
LABEL_11:
  LODWORD(v24) = v13 + v7;
  mlir::ValueRange::ValueRange((unint64_t *)v26, (uint64_t)v14, (v13 + v7));
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 0, *(_DWORD *)(a3 + 48));
  v16 = *(_QWORD *)(a3 + 40);
  v27 = v16;
  v28 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v16 = mlir::ValueRange::offset_base(&v27, ODSOperandIndexAndLength);
  v27 = v16;
  v28 = 0;
  v22 = mlir::ValueRange::dereference_iterator(&v27, 0);
  v17 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 1u, *(_DWORD *)(a3 + 48));
  v18 = *(_QWORD *)(a3 + 40);
  v27 = v18;
  v28 = v17;
  if ((_DWORD)v17)
  {
    v18 = mlir::ValueRange::offset_base(&v27, v17);
    v19 = v28;
  }
  else
  {
    v19 = 0;
  }
  v27 = v18;
  v28 = (HIDWORD(v17) + v17) - v19;
  v20 = mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::TypeRange,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(a2 + 24), v26, &v22, (uint64_t *)&v27);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v20);
  if (v23 != v25)
    free(v23);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::ConditionOp,mlir::TypeRange,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.condition", (const unsigned __int8 *)0xD, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"scf.condition";
    v19[3] = 13;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::scf::ConditionOp::build((uint64_t)a1, (uint64_t)v21, *a3, a3[1], *a4, *a5, a5[1]);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::ConditionOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertYieldOp<mlir::mps::serialization::YieldOp,mlir::scf::YieldOp>::~ConvertYieldOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertYieldOp<mlir::mps::serialization::YieldOp,mlir::scf::YieldOp>::~ConvertYieldOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::YieldOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::YieldOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::YieldOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::YieldOpGenericAdaptorBase::YieldOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertYieldOp<mlir::mps::serialization::YieldOp,mlir::scf::YieldOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  unint64_t ODSOperandIndexAndLength;
  unint64_t v16;
  uint64_t v17;
  mlir::GenericProgramPoint *v18;
  void *v20;
  uint64_t v21;
  _BYTE v22[48];
  uint64_t v23[2];
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7)
    v8 = a2 - 16;
  else
    v8 = 0;
  v20 = v22;
  v21 = 0x600000000;
  if (v7 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, v7, 8);
    v9 = v21;
    v10 = v20;
    goto LABEL_8;
  }
  if ((_DWORD)v7)
  {
    v9 = 0;
    v10 = v22;
LABEL_8:
    v11 = 0;
    v12 = &v10[8 * v9];
    do
    {
      *(_QWORD *)&v12[8 * v11] = *(_QWORD *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v11) + 8) & 0xFFFFFFFFFFFFFFF8;
      ++v11;
    }
    while (v7 != v11);
    v13 = v21;
    v14 = v20;
    goto LABEL_11;
  }
  v13 = 0;
  v14 = v22;
LABEL_11:
  LODWORD(v21) = v13 + v7;
  mlir::ValueRange::ValueRange((unint64_t *)v23, (uint64_t)v14, (v13 + v7));
  ODSOperandIndexAndLength = mlir::scf::detail::YieldOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::YieldOpGenericAdaptorBase *)a3, 0, *(unsigned int *)(a3 + 48));
  v16 = *(_QWORD *)(a3 + 40);
  v24 = v16;
  v25 = ODSOperandIndexAndLength;
  if ((_DWORD)ODSOperandIndexAndLength)
  {
    v16 = mlir::ValueRange::offset_base(&v24, ODSOperandIndexAndLength);
    v17 = v25;
  }
  else
  {
    v17 = 0;
  }
  v24 = v16;
  v25 = (HIDWORD(ODSOperandIndexAndLength) + ODSOperandIndexAndLength) - v17;
  v18 = mlir::OpBuilder::create<mlir::scf::YieldOp,mlir::TypeRange,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(a2 + 24), v23, (uint64_t *)&v24);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v18);
  if (v20 != v22)
    free(v20);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::scf::YieldOp,mlir::TypeRange,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"scf.yield", (const unsigned __int8 *)9, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"scf.yield";
    v17[3] = 9;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::arith::CmpIOp::build((uint64_t)a1, (uint64_t)v19, *a3, a3[1], *a4, a4[1], 0, 0);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::scf::YieldOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertFromElementsOp<mlir::mps::serialization::FromElementsOp,mlir::tensor::FromElementsOp>::~ConvertFromElementsOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertFromElementsOp<mlir::mps::serialization::FromElementsOp,mlir::tensor::FromElementsOp>::~ConvertFromElementsOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::FromElementsOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::FromElementsOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::FromElementsOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::FromElementsOpGenericAdaptorBase::FromElementsOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertFromElementsOp<mlir::mps::serialization::FromElementsOp,mlir::tensor::FromElementsOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mlir::GenericProgramPoint *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11[3];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v9 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v10) + 8) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)v11 = *(_OWORD *)(a3 + 40);
  v7 = mlir::OpBuilder::create<mlir::tensor::FromElementsOp,mlir::RankedTensorType,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v9, v11);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v7);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::FromElementsOp,mlir::RankedTensorType,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *Context;
  uint64_t v9;
  char v10;
  mlir::GenericProgramPoint *v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  _QWORD v19[39];

  v19[38] = *MEMORY[0x1E0C80C00];
  v14 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  v9 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.from_elements", (const unsigned __int8 *)0x14, Context);
  if (!v10)
  {
    v18 = 1283;
    v17[2] = (uint64_t)"tensor.from_elements";
    v17[3] = 20;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    llvm::report_fatal_error((llvm::Twine *)v19, 1);
  }
  mlir::OperationState::OperationState(v19, a2, v9);
  mlir::pdl_interp::CreateRangeOp::build((uint64_t)a1, (uint64_t)v19, *a3, *a4, a4[1]);
  v11 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v19);
  if (*(_UNKNOWN **)(*((_QWORD *)v11 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::FromElementsOp,void>::id)
    v12 = v11;
  else
    v12 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v19);
  return v12;
}

_QWORD *mlir::mps::`anonymous namespace'::ConvertExtractOp<mlir::mps::serialization::ExtractOp,mlir::tensor::ExtractOp>::~ConvertExtractOp(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 != a1 + 6)
    free(v3);
  return a1;
}

void mlir::mps::`anonymous namespace'::ConvertExtractOp<mlir::mps::serialization::ExtractOp,mlir::tensor::ExtractOp>::~ConvertExtractOp(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)__p[10];
  if (v2 != __p + 12)
    free(v2);
  v3 = (_QWORD *)__p[4];
  if (v3 != __p + 6)
    free(v3);
  operator delete(__p);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ExtractOp>::match(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ExtractOp>::rewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, v12, a5);
}

uint64_t mlir::OpConversionPattern<mlir::mps::serialization::ExtractOp>::matchAndRewrite(uint64_t a1, mlir::Operation *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v11[2];
  _BYTE v12[40];
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  mlir::ValueRange::ValueRange(v11, a3, a4);
  v8 = v11[0];
  v9 = v11[1];
  mlir::mps::serialization::detail::ExtractOpGenericAdaptorBase::ExtractOpGenericAdaptorBase((uint64_t)v12, a2);
  v13 = v8;
  v14 = v9;
  return (*(uint64_t (**)(uint64_t, mlir::Operation *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, v12, a5);
}

uint64_t mlir::mps::`anonymous namespace'::ConvertExtractOp<mlir::mps::serialization::ExtractOp,mlir::tensor::ExtractOp>::matchAndRewrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int ODSOperandIndexAndLength;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  mlir::GenericProgramPoint *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  v15 = *(_QWORD *)(mlir::anec::Broadcast::getResult((mlir::anec::Broadcast *)&v16) + 8) & 0xFFFFFFFFFFFFFFF8;
  ODSOperandIndexAndLength = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 0, *(_DWORD *)(a3 + 48));
  v8 = *(_QWORD *)(a3 + 40);
  v17 = v8;
  v18 = ODSOperandIndexAndLength;
  if (ODSOperandIndexAndLength)
    v8 = mlir::ValueRange::offset_base(&v17, ODSOperandIndexAndLength);
  v17 = v8;
  v18 = 0;
  v14 = mlir::ValueRange::dereference_iterator(&v17, 0);
  v9 = mlir::scf::detail::ConditionOpGenericAdaptorBase::getODSOperandIndexAndLength((mlir::scf::detail::ConditionOpGenericAdaptorBase *)a3, 1u, *(_DWORD *)(a3 + 48));
  v10 = *(_QWORD *)(a3 + 40);
  v17 = v10;
  v18 = v9;
  if ((_DWORD)v9)
  {
    v10 = mlir::ValueRange::offset_base(&v17, v9);
    v11 = v18;
  }
  else
  {
    v11 = 0;
  }
  v17 = v10;
  v18 = (HIDWORD(v9) + v9) - v11;
  v12 = mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::Type,mlir::Value,mlir::ValueRange>((mlir::OpBuilder *)(a4 + 8), *(_QWORD *)(a2 + 24), (uint64_t *)&v15, &v14, (uint64_t *)&v17);
  (*(void (**)(uint64_t, uint64_t, mlir::GenericProgramPoint *))(*(_QWORD *)a4 + 32))(a4, a2, v12);
  return 1;
}

mlir::GenericProgramPoint *mlir::OpBuilder::create<mlir::tensor::ExtractOp,mlir::Type,mlir::Value,mlir::ValueRange>(mlir::OpBuilder *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *Context;
  uint64_t v11;
  char v12;
  mlir::GenericProgramPoint *v13;
  mlir::GenericProgramPoint *v14;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _QWORD v21[39];

  v21[38] = *MEMORY[0x1E0C80C00];
  v16 = a2;
  Context = (uint64_t *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  v11 = mlir::RegisteredOperationName::lookup((int8x16_t *)"tensor.extract", (const unsigned __int8 *)0xE, Context);
  if (!v12)
  {
    v20 = 1283;
    v19[2] = (uint64_t)"tensor.extract";
    v19[3] = 14;
          " the dialect. See also https://mlir.llvm.org/getting_started/Faq/#registered-loaded-dependent-whats-up-with-di"
          "alects-management";
    v18 = 259;
    llvm::operator+(v19, (uint64_t *)&v17, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  mlir::OperationState::OperationState(v21, a2, v11);
  mlir::tensor::ExtractOp::build((uint64_t)a1, (uint64_t)v21, *a3, *a4, *a5, a5[1]);
  v13 = mlir::OpBuilder::create(a1, (const mlir::OperationState *)v21);
  if (*(_UNKNOWN **)(*((_QWORD *)v13 + 6) + 16) == &mlir::detail::TypeIDResolver<mlir::tensor::ExtractOp,void>::id)
    v14 = v13;
  else
    v14 = 0;
  mlir::OperationState::~OperationState((mlir::OperationState *)v21);
  return v14;
}

mlir::mps::MPSResourceBlobManagerInterface *mlir::mps::MPSResourceBlobManagerInterface::MPSResourceBlobManagerInterface(mlir::mps::MPSResourceBlobManagerInterface *this, mlir::Dialect *a2)
{
  unsigned __int8 v3;
  void **p_vtable;
  void *v5;
  _QWORD *v6;
  int v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  mlir::Dialect *v16;
  const char *v17;
  unint64_t v18;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v3 & 1) == 0)
  {
    v16 = a2;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    a2 = v16;
    if (v8)
    {
      v17 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSResourceBlobManagerInterface]";
      v18 = 92;
      v9 = llvm::StringRef::find((uint64_t *)&v17, "DesiredTypeName = ", 0x12uLL, 0);
      if (v18 >= v9)
        v10 = v9;
      else
        v10 = v18;
      v11 = &v17[v10];
      v12 = v18 - v10;
      if (v18 - v10 >= 0x12)
        v13 = 18;
      else
        v13 = v18 - v10;
      v14 = v12 - v13;
      if (v14 >= v14 - 1)
        v15 = v14 - 1;
      else
        v15 = v14;
      mlir::detail::TypeIDResolver<mlir::mps::MPSResourceBlobManagerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v11[v13], v15);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a2 = v16;
    }
  }
  v5 = p_vtable[492];
  *(_QWORD *)this = off_1E0E4BD20;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0x7000000000;
  llvm::sys::RWMutexImpl::RWMutexImpl((mlir::mps::MPSResourceBlobManagerInterface *)((char *)this + 48));
  *((_QWORD *)this + 7) = 0;
  v6 = operator new(8uLL);
  *v6 = off_1E0E4A990;
  *((_QWORD *)this + 8) = v6;
  return this;
}

void mlir::mps::MPSResourceBlobManagerInterface::~MPSResourceBlobManagerInterface(mlir::mps::MPSResourceBlobManagerInterface *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;

  *(_QWORD *)this = off_1E0E4BD20;
  v2 = (_QWORD *)((char *)this + 24);
  if (*((_DWORD *)this + 9))
  {
    v3 = *((unsigned int *)this + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      do
      {
        v5 = *(llvm **)(*v2 + v4);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::StringMapEntry<mlir::mps::MPSResourceBlobEntry>::Destroy<llvm::MallocAllocator>(v5);
        *(_QWORD *)(*v2 + v4) = 0;
        v4 += 8;
      }
      while (8 * v3 != v4);
    }
    *((_DWORD *)this + 9) = 0;
    *((_DWORD *)this + 10) = 0;
  }
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  llvm::sys::RWMutexImpl::~RWMutexImpl((pthread_rwlock_t **)this + 6);
  if (*((_DWORD *)this + 9))
  {
    v9 = *((unsigned int *)this + 8);
    if ((_DWORD)v9)
    {
      v10 = 0;
      do
      {
        v11 = *(llvm **)(*v2 + v10);
        if (v11 != (llvm *)-8 && v11 != 0)
          llvm::StringMapEntry<mlir::mps::MPSResourceBlobEntry>::Destroy<llvm::MallocAllocator>(v11);
        v10 += 8;
      }
      while (8 * v9 != v10);
    }
  }
  free(*((void **)this + 3));
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
}

{
  void *v1;

  mlir::mps::MPSResourceBlobManagerInterface::~MPSResourceBlobManagerInterface(this);
  operator delete(v1);
}

void *mlir::mps::MPSResourceBlobManagerInterface::getManager(mlir::mps::MPSResourceBlobManagerInterface *this, mlir::MLIRContext *a2)
{
  uint64_t LoadedDialect;

  LoadedDialect = mlir::MLIRContext::getLoadedDialect((uint64_t *)this, (uint64_t)"mps", 3);
  return mlir::Dialect::getRegisteredInterface<mlir::mps::MPSResourceBlobManagerInterface>(LoadedDialect);
}

void *mlir::Dialect::getRegisteredInterface<mlir::mps::MPSResourceBlobManagerInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  int v9;
  int v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSResourceBlobManagerInterface]";
      v23 = 92;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::mps::MPSResourceBlobManagerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4)
  {
    v5 = p_vtable[492];
    LODWORD(v6) = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
    v7 = (void **)(v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == v5)
      goto LABEL_9;
    v9 = 1;
    while (v8 != (void *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v4 - 1);
      v8 = *(void **)(v3 + 16 * v6);
      if (v8 == v5)
      {
        v7 = (void **)(v3 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  v7 = (void **)(v3 + 16 * v4);
LABEL_9:
  if (v7 == (void **)(v3 + 16 * v4))
    return 0;
  else
    return v7[1];
}

uint64_t mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob@<X0>(mlir::mps::MPSResourceBlobManagerInterface *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  v7 = *((_QWORD *)this + 8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 48) = (char *)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0,mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0,void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallbacksHolder<mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0,mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0,void>::Callbacks
     + 2 >= 8)
    *(_QWORD *)(a4 + 24) = v7;
  *(_BYTE *)(a4 + 56) = 1;
  return result;
}

uint64_t mlir::mps::MPSResourceBlobManagerInterface::lookup(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  pthread_rwlock_t **v6;
  int Key;
  uint64_t v8;

  v6 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 48));
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 24), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 32))
    v8 = 0;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * Key) + 8;
  llvm::sys::RWMutexImpl::unlock_shared(v6);
  return v8;
}

BOOL mlir::mps::MPSResourceBlobManagerInterface::contains(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  pthread_rwlock_t **v6;
  int Key;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  v6 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 48));
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 24), a2, a3);
  if (Key == -1)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v8 = v9;
  }
  else
  {
    v8 = Key;
    v9 = *(unsigned int *)(a1 + 32);
  }
  v10 = v8 != v9;
  llvm::sys::RWMutexImpl::unlock_shared(v6);
  return v10;
}

uint64_t *mlir::mps::MPSResourceBlobManagerInterface::defineEntryValue(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, __int128 *a4)
{
  pthread_rwlock_t **v8;
  int Key;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  char v13;
  uint64_t *result;
  __int128 *v15;
  char v16;
  __int128 *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(a1 + 48));
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 24), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 32))
    v10 = 0;
  else
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * Key) + 8;
  llvm::sys::RWMutexImpl::unlock_shared(v8);
  v21 = *a4;
  v11 = *((_QWORD *)a4 + 6);
  v22 = *((_QWORD *)a4 + 2);
  v25 = v11;
  if (v11 >= 8)
  {
    v12 = (__int128 *)((char *)a4 + 24);
    if ((v11 & 2) != 0 && (v11 & 4) != 0)
    {
      (*(void (**)(__int128 *, __int128 *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(&v23, v12);
    }
    else
    {
      v23 = *v12;
      v24 = *((_QWORD *)a4 + 5);
    }
    *((_QWORD *)a4 + 6) = 0;
  }
  v13 = *((_BYTE *)a4 + 56);
  v26 = v13;
  result = (uint64_t *)(v10 + 16);
  if (*(_BYTE *)(v10 + 80))
  {
    result = mlir::AsmResourceBlob::operator=(result, (uint64_t)&v21);
    if (v25 >= 8)
    {
      v15 = (v25 & 2) != 0 ? &v23 : (__int128 *)v23;
      result = (uint64_t *)(*(uint64_t (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v25 & 0xFFFFFFFFFFFFFFF8))(v15, v21, *((_QWORD *)&v21 + 1), v22);
      v16 = v25;
      if (v25 >= 8)
      {
        if ((v25 & 4) != 0)
        {
          if ((v25 & 2) != 0)
            v17 = &v23;
          else
            v17 = (__int128 *)v23;
          result = (uint64_t *)(*(uint64_t (**)(__int128 *))((v25 & 0xFFFFFFFFFFFFFFF8) + 16))(v17);
        }
        if ((v16 & 2) == 0)
          llvm::deallocate_buffer((llvm *)v23, *((void **)&v23 + 1));
      }
    }
  }
  else
  {
    v18 = v22;
    *(_OWORD *)result = v21;
    *(_QWORD *)(v10 + 32) = v18;
    v19 = v25;
    *(_QWORD *)(v10 + 64) = v25;
    if (v19 >= 8)
    {
      result = (uint64_t *)(v10 + 40);
      if ((v19 & 2) != 0 && (v19 & 4) != 0)
      {
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *, __int128 *))((v19 & 0xFFFFFFFFFFFFFFF8) + 8))(result, &v23);
        v13 = v26;
      }
      else
      {
        v20 = v24;
        *(_OWORD *)result = v23;
        *(_QWORD *)(v10 + 56) = v20;
      }
    }
    *(_BYTE *)(v10 + 72) = v13;
    *(_BYTE *)(v10 + 80) = 1;
  }
  *(_BYTE *)(v10 + 96) = 1;
  return result;
}

BOOL mlir::mps::MPSResourceBlobManagerInterface::insert@<W0>(uint64_t a1@<X0>, int8x16_t *a2@<X1>, const unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  pthread_rwlock_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  const unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unint64_t v44;
  __int16 v45;
  _QWORD v46[2];
  void *v47;
  __int128 v48;
  _QWORD v49[5];

  v49[4] = *MEMORY[0x1E0C80C00];
  v10 = (pthread_rwlock_t **)(a1 + 48);
  llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(a1 + 48));
  v46[0] = a1;
  v46[1] = a4;
  v11 = mlir::mps::MPSResourceBlobManagerInterface::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(v46, a2, a3);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)(a1 + 8);
    if ((v14 & 1) == 0
    {
      v47 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSDialectResourceBlobHandle]";
      *(_QWORD *)&v48 = 89;
      v26 = llvm::StringRef::find((uint64_t *)&v47, "DesiredTypeName = ", 0x12uLL, 0);
      if ((unint64_t)v48 >= v26)
        v27 = v26;
      else
        v27 = v48;
      v28 = (char *)v47 + v27;
      v29 = v48 - v27;
      if ((unint64_t)(v48 - v27) >= 0x12)
        v30 = 18;
      else
        v30 = v48 - v27;
      v31 = v29 - v30;
      if (v31 >= v31 - 1)
        v32 = v31 - 1;
      else
        v32 = v31;
      mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v28[v30], v32);
    }
    v15 = mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id;
    *a5 = v12;
    a5[1] = v15;
    a5[2] = v13;
    return llvm::sys::RWMutexImpl::unlock_shared(v10);
  }
  v47 = v49;
  v48 = xmmword_181233280;
  if ((unint64_t)a3 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v47, v49, (unint64_t)a3, 1);
    v16 = v48;
LABEL_7:
    memcpy((char *)v47 + v16, a2, (size_t)a3);
    v16 = v48;
    goto LABEL_8;
  }
  v16 = 0;
  if (a3)
    goto LABEL_7;
LABEL_8:
  v17 = &a3[v16];
  *(_QWORD *)&v48 = v17;
  if ((unint64_t)(v17 + 1) > *((_QWORD *)&v48 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v47, v49, (unint64_t)(v17 + 1), 1);
    v17 = (const unsigned __int8 *)v48;
  }
  v17[(_QWORD)v47] = 95;
  *(_QWORD *)&v48 = v48 + 1;
  v18 = (unint64_t)(a3 + 1);
  v19 = 1;
  while (1)
  {
    v42 = v19;
    v43 = (const char *)&v42;
    v45 = 267;
    llvm::Twine::toVector((uint64_t)&v43, (uint64_t)&v47);
    v20 = mlir::mps::MPSResourceBlobManagerInterface::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(v46, (int8x16_t *)v47, (const unsigned __int8 *)v48);
    if (v20)
      break;
    v21 = v48;
    if ((_QWORD)v48 == v18)
    {
      ++v19;
    }
    else
    {
      if ((unint64_t)v48 <= v18)
      {
        if (*((_QWORD *)&v48 + 1) < v18)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v47, v49, v18, 1);
          v21 = v48;
        }
        if (v18 != v21)
          bzero((char *)v47 + v21, v18 - v21);
      }
      *(_QWORD *)&v48 = v18;
      ++v19;
    }
  }
  v22 = *(_QWORD *)(a1 + 8);
  if ((v23 & 1) == 0)
  {
    v33 = v20;
    v20 = v33;
    if (v34)
    {
      v43 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::mps::MPSDialectResourceBlobHandle]";
      v44 = 89;
      v35 = llvm::StringRef::find((uint64_t *)&v43, "DesiredTypeName = ", 0x12uLL, 0);
      if (v44 >= v35)
        v36 = v35;
      else
        v36 = v44;
      v37 = &v43[v36];
      v38 = v44 - v36;
      if (v44 - v36 >= 0x12)
        v39 = 18;
      else
        v39 = v44 - v36;
      v40 = v38 - v39;
      if (v40 >= v40 - 1)
        v41 = v40 - 1;
      else
        v41 = v40;
      mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      v20 = v33;
    }
  }
  v24 = mlir::detail::TypeIDResolver<mlir::mps::MPSDialectResourceBlobHandle,void>::resolveTypeID(void)::id;
  *a5 = v20;
  a5[1] = v24;
  a5[2] = v22;
  if (v47 != v49)
    free(v47);
  return llvm::sys::RWMutexImpl::unlock_shared(v10);
}

uint64_t mlir::mps::MPSResourceBlobManagerInterface::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(_QWORD *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v4;
  uint64_t *v5;
  char v6;
  char v7;
  __int128 *v8;
  char v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 *v20;
  char v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *a1 + 24;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  *(_OWORD *)v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v5 = llvm::StringMap<mlir::mps::MPSResourceBlobEntry,llvm::MallocAllocator>::try_emplace<mlir::mps::MPSResourceBlobEntry>(v4, a2, a3, (uint64_t)&v30);
  v7 = v6;
  if ((_BYTE)v35 && (unint64_t)v34 >= 8)
  {
    v8 = (v34 & 2) != 0 ? (__int128 *)((char *)&v32 + 8) : (__int128 *)*((_QWORD *)&v32 + 1);
    (*(void (**)(__int128 *, _QWORD, _QWORD, _QWORD))(v34 & 0xFFFFFFFFFFFFFFF8))(v8, v31, *((_QWORD *)&v31 + 1), v32);
    v9 = v34;
    if ((unint64_t)v34 >= 8)
    {
      if ((v34 & 4) != 0)
      {
        if ((v34 & 2) != 0)
          v10 = (char *)&v32 + 8;
        else
          v10 = (char *)*((_QWORD *)&v32 + 1);
        (*(void (**)(char *))((v34 & 0xFFFFFFFFFFFFFFF8) + 16))(v10);
      }
      if ((v9 & 2) == 0)
        llvm::deallocate_buffer(*((llvm **)&v32 + 1), (void *)v33[0]);
    }
  }
  if (!v7)
    return 0;
  v11 = (_QWORD *)*v5;
  v12 = *v5 + 112;
  v13 = *(_QWORD *)*v5;
  v14 = (__int128 *)a1[1];
  LOBYTE(v23) = 0;
  v29 = 0;
  if (*((_BYTE *)v14 + 64))
  {
    v15 = *((_QWORD *)v14 + 2);
    v23 = *v14;
    v16 = *((_QWORD *)v14 + 6);
    v24 = v15;
    v27 = v16;
    if (v16 >= 8)
    {
      v17 = (__int128 *)((char *)v14 + 24);
      if ((v16 & 2) != 0 && (v16 & 4) != 0)
      {
        (*(void (**)(__int128 *, __int128 *))((v16 & 0xFFFFFFFFFFFFFFF8) + 8))(&v25, v17);
      }
      else
      {
        v18 = *v17;
        v26 = *((_QWORD *)v14 + 5);
        v25 = v18;
      }
      *((_QWORD *)v14 + 6) = 0;
    }
    v28 = *((_BYTE *)v14 + 56);
    v29 = 1;
  }
  v11[1] = v12;
  v11[2] = v13;
  std::__optional_storage_base<mlir::AsmResourceBlob,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<mlir::AsmResourceBlob,false>>(v11 + 3, (uint64_t)&v23);
  *((_BYTE *)v11 + 104) = *((_BYTE *)v11 + 88);
  v11[12] = 0;
  if (v29 && v27 >= 8)
  {
    v20 = (v27 & 2) != 0 ? &v25 : (__int128 *)v25;
    (*(void (**)(__int128 *, _QWORD, _QWORD, uint64_t))(v27 & 0xFFFFFFFFFFFFFFF8))(v20, v23, *((_QWORD *)&v23 + 1), v24);
    v21 = v27;
    if (v27 >= 8)
    {
      if ((v27 & 4) != 0)
      {
        if ((v27 & 2) != 0)
          v22 = &v25;
        else
          v22 = (__int128 *)v25;
        (*(void (**)(__int128 *))((v27 & 0xFFFFFFFFFFFFFFF8) + 16))(v22);
      }
      if ((v21 & 2) == 0)
        llvm::deallocate_buffer((llvm *)v25, *((void **)&v25 + 1));
    }
  }
  return *v5 + 8;
}

uint64_t *llvm::StringMap<mlir::mps::MPSResourceBlobEntry,llvm::MallocAllocator>::try_emplace<mlir::mps::MPSResourceBlobEntry>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *buffer;
  void *v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;

  v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 113), (std::align_val_t)8uLL);
    v12 = buffer + 112;
    if (!a3)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v10)
  {
    while (!v10 || v10 == -8)
    {
      v16 = v9[1];
      ++v9;
      v10 = v16;
    }
    return v9;
  }
  buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 113), (std::align_val_t)8uLL);
  v12 = buffer + 112;
  if (a3)
LABEL_4:
    memcpy(v12, a2, (size_t)a3);
LABEL_5:
  a3[(_QWORD)v12] = 0;
  *(_QWORD *)buffer = a3;
  *(_OWORD *)(buffer + 8) = *(_OWORD *)a4;
  buffer[24] = 0;
  buffer[88] = 0;
  if (*(_BYTE *)(a4 + 80))
  {
    *(_OWORD *)(buffer + 24) = *(_OWORD *)(a4 + 16);
    *((_QWORD *)buffer + 5) = *(_QWORD *)(a4 + 32);
    v13 = *(_QWORD *)(a4 + 64);
    *((_QWORD *)buffer + 9) = v13;
    if (v13 >= 8)
    {
      v14 = buffer + 48;
      v15 = (_OWORD *)(a4 + 40);
      if ((v13 & 2) != 0 && (v13 & 4) != 0)
      {
        (*(void (**)(_OWORD *, _OWORD *))((v13 & 0xFFFFFFFFFFFFFFF8) + 8))(v14, v15);
      }
      else
      {
        *v14 = *v15;
        *((_QWORD *)buffer + 8) = *(_QWORD *)(a4 + 56);
      }
      *(_QWORD *)(a4 + 64) = 0;
    }
    buffer[80] = *(_BYTE *)(a4 + 72);
    buffer[88] = 1;
  }
  *((_QWORD *)buffer + 12) = *(_QWORD *)(a4 + 88);
  buffer[104] = *(_BYTE *)(a4 + 96);
  *v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  v9 = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9)
    v17 = *v9 == -8;
  else
    v17 = 1;
  if (v17)
  {
    do
    {
      v19 = v9[1];
      ++v9;
      v18 = v19;
      if (v19)
        v20 = v18 == -8;
      else
        v20 = 1;
    }
    while (v20);
  }
  return v9;
}

void *mlir::mps::`anonymous namespace'::DefaultResourceAllocator::allocateResource(mlir::mps::_anonymous_namespace_::DefaultResourceAllocator *this, size_t __sz, std::align_val_t a3)
{
  return operator new(__sz, a3);
}

void mlir::mps::`anonymous namespace'::DefaultResourceAllocator::deallocateResource(mlir::mps::_anonymous_namespace_::DefaultResourceAllocator *this, void *a2)
{
  JUMPOUT(0x186DA1674);
}

void llvm::StringMapEntry<mlir::mps::MPSResourceBlobEntry>::Destroy<llvm::MallocAllocator>(llvm *this)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;

  v2 = *(_QWORD *)this;
  if (*((_BYTE *)this + 88))
  {
    v3 = *((_QWORD *)this + 9);
    if (v3 >= 8)
    {
      v4 = (char *)this + 48;
      v5 = *((_QWORD *)this + 3);
      v6 = *((_QWORD *)this + 4);
      v7 = *((_QWORD *)this + 5);
      v8 = (char *)this + 48;
      if ((v3 & 2) == 0)
        v8 = *(char **)v4;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFF8))(v8, v5, v6, v7);
      v9 = *((_QWORD *)this + 9);
      if (v9 >= 8)
      {
        if ((v9 & 4) != 0)
        {
          if ((v9 & 2) == 0)
            v4 = *(char **)v4;
          (*(void (**)(char *))((v9 & 0xFFFFFFFFFFFFFFF8) + 16))(v4);
        }
        if ((v9 & 2) == 0)
          llvm::deallocate_buffer(*((llvm **)this + 6), *((void **)this + 7));
      }
    }
  }
  llvm::deallocate_buffer(this, (void *)(v2 + 113));
}

uint64_t llvm::detail::UniqueFunctionBase<void,void *,unsigned long,unsigned long>::CallImpl<mlir::mps::MPSResourceBlobManagerInterface::allocateBufferTensorBlob(unsigned long,unsigned long)::$_0>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
}

_QWORD *mlir::createRawElementsAttr(_QWORD *a1, const void *a2, const void *a3)
{
  uint64_t v5;
  uint64_t RHS;
  char isCompatibleWithDenseStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *BufferTensorAttr;
  _QWORD *v17;

  v5 = (uint64_t)a1;
  v17 = a1;
  if ((unint64_t)a3 <= 0x40
    && (RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v17),
        v5 = (uint64_t)v17,
        (isCompatibleWithDenseStorage & 1) != 0))
  {
    if (v17)
    {
      v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v17 + 8);
      BufferTensorAttr = (_QWORD *)mlir::DenseElementsAttr::getFromRawBuffer(v5, v11, a2, a3, v12, v13, v14);
      if (!BufferTensorAttr)
        return BufferTensorAttr;
    }
    else
    {
      BufferTensorAttr = (_QWORD *)mlir::DenseElementsAttr::getFromRawBuffer(0, 0, a2, a3, v8, v9, v10);
      if (!BufferTensorAttr)
        return BufferTensorAttr;
    }
  }
  else
  {
    BufferTensorAttr = (_QWORD *)mlir::mps::getBufferTensorAttr(v5, a2, a3);
    if (!BufferTensorAttr)
      return BufferTensorAttr;
  }
  mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*BufferTensorAttr + 8);
  return BufferTensorAttr;
}

uint64_t mlir::`anonymous namespace'::isCompatibleWithDenseStorage(uint64_t a1)
{
  uint64_t v1;
  uint64_t Value;
  uint64_t result;
  unsigned int IntOrFloatBitWidth;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v1 = a1;
  else
    v1 = 0;
  v6 = v1;
  if (v1)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v6);
  }
  else
  {
    result = mlir::Type::isIntOrFloat((mlir::Type *)&v7);
    if ((_DWORD)result)
    {
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v7);
      return IntOrFloatBitWidth == 1 || IntOrFloatBitWidth > 7;
    }
  }
  return result;
}

uint64_t mlir::getElementsAttrRawData(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = mlir::DenseElementsAttr::classof(a1);
  if ((_DWORD)result)
    v3 = a1;
  else
    v3 = 0;
  v5 = v3;
  if (v3)
    return mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v5);
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    v4 = a1;
  else
    v4 = 0;
  v5 = v4;
  if (v4)
    return mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v5);
  return result;
}

uint64_t mlir::tryCreateMutableElementsAttr(_QWORD *a1, __n128 **a2)
{
  uint64_t v4;
  uint64_t result;
  __n128 *BufferTensorAttr;
  __n128 *v7;
  unint64_t v8;
  __n128 v9;
  __n128 *v10;

  if (a1)
  {
    v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
    {
LABEL_3:
      result = 0;
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
  }
  {
    goto LABEL_3;
  }
  BufferTensorAttr = (__n128 *)mlir::mps::getBufferTensorAttr(a1);
  v7 = BufferTensorAttr;
  v10 = BufferTensorAttr;
  if (BufferTensorAttr)
    BufferTensorAttr = (__n128 *)mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(BufferTensorAttr->n128_u64[0] + 8);
  *a2 = v7;
  a2[1] = BufferTensorAttr;
  mlir::mps::MPSBufferTensorAttr::getHandle(&v10, &v9);
  if (*(_BYTE *)(v9.n128_u64[0] + 80))
    v8 = v9.n128_u64[0] + 16;
  else
    v8 = 0;
  return *(_QWORD *)v8;
}

uint64_t mlir::convertElementsAttr(uint64_t a1, uint64_t a2, int a3)
{
  const void *v3;
  const void *v5;
  const void *v6;
  uint64_t RawStringData;
  const void *v8;
  const void *v9;
  _QWORD *Type;
  uint64_t ElementTypeOrSelf;
  int isCompatibleWithDenseStorage;
  int v13;
  int v14;
  uint64_t ArgOperands;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *BufferTensorAttr;
  uint64_t v22;
  uint64_t v23[2];
  const void *v24;

  v5 = (const void *)a1;
  v23[0] = a1;
  v23[1] = a2;
  if (mlir::DenseElementsAttr::classof(a1))
    v6 = v5;
  else
    v6 = 0;
  v24 = v6;
  if (v6)
  {
    RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v24);
LABEL_11:
    v3 = (const void *)RawStringData;
    v5 = v8;
    goto LABEL_12;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    v9 = v5;
  else
    v9 = 0;
  v24 = v9;
  if (v9)
  {
    RawStringData = mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v24);
    goto LABEL_11;
  }
LABEL_12:
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)v23);
  ElementTypeOrSelf = mlir::getElementTypeOrSelf(Type);
  if ((unint64_t)v5 < 0x41)
    v13 = 1;
  else
    v13 = a3;
  v14 = v13 & isCompatibleWithDenseStorage;
  if ((v13 & isCompatibleWithDenseStorage) == mlir::DenseElementsAttr::classof(v23[0]))
    return v23[0];
  if (v14)
  {
    ArgOperands = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v23);
    BufferTensorAttr = (_QWORD *)mlir::DenseElementsAttr::getFromRawBuffer(ArgOperands, v16, v3, v5, v17, v18, v19);
    if (!BufferTensorAttr)
      return (uint64_t)BufferTensorAttr;
  }
  else
  {
    v22 = mlir::ElementsAttr::getType((mlir::ElementsAttr *)v23);
    BufferTensorAttr = (_QWORD *)mlir::mps::getBufferTensorAttr(v22, v3, v5);
    if (!BufferTensorAttr)
      return (uint64_t)BufferTensorAttr;
  }
  mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*BufferTensorAttr + 8);
  return (uint64_t)BufferTensorAttr;
}

_QWORD *mlir::reshapeElementsAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v7;
  _QWORD *v8;
  __n128 *v10;
  mlir::MLIRContext *Context;
  uint64_t ArgAttrsAttr;
  uint64_t v13;
  uint64_t v14;
  uint64_t OperandRange;
  uint64_t v16;
  __n128 v17;
  __n128 *v18;
  _QWORD v19[2];

  v19[0] = a3;
  v19[1] = a4;
  if (mlir::DenseElementsAttr::classof(a1))
    v7 = (__n128 *)a1;
  else
    v7 = 0;
  v18 = v7;
  if (v7)
  {
    v8 = (_QWORD *)mlir::DenseElementsAttr::reshape((uint64_t *)&v18, a3, a4);
    if (v8)
    {
LABEL_6:
      mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*v8 + 8);
      return v8;
    }
    return v8;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    v10 = (__n128 *)a1;
  else
    v10 = 0;
  v18 = v10;
  if (v10)
  {
    Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v19);
    ArgAttrsAttr = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v19);
    v14 = v13;
    OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v19);
    v16 = mlir::RankedTensorType::get(ArgAttrsAttr, v14, OperandRange, 0);
    mlir::mps::MPSBufferTensorAttr::getHandle(&v18, &v17);
    v8 = (_QWORD *)mlir::mps::MPSBufferTensorAttr::get(Context, v16, (uint64_t)&v17);
    if (v8)
      goto LABEL_6;
    return v8;
  }
  return (_QWORD *)a4;
}

__n128 *mlir::createElementsAttr(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  unsigned int IntOrFloatBitWidth;
  uint64_t MutableElementsAttr;
  char *v7;
  __n128 *RawElementsAttr;
  _BYTE *v9;
  char *ElementsAttrStorageSize;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  BOOL v14;
  unsigned int v15;
  BOOL v16;
  _BYTE *v17;
  char *v18;
  size_t v19;
  char *v20;
  const void *v21;
  char v22;
  void *v23;
  BOOL v25;
  char v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  llvm::APInt *v31;
  unsigned int v32;
  BOOL v33;
  char v35;
  llvm::APInt *v36;
  unsigned int v37;
  BOOL v38;
  _BOOL4 v39;
  char v40;
  llvm::APInt *v41;
  unsigned int v42;
  char v43;
  char v44;
  llvm::APInt *v45;
  unsigned int v46;
  BOOL v47;
  char v49;
  llvm::APInt *v50;
  unsigned int v51;
  BOOL v52;
  _BOOL4 v53;
  char v54;
  llvm::APInt *v55;
  unsigned int v56;
  BOOL v57;
  _BOOL4 v58;
  char v59;
  llvm::APInt *v60;
  unsigned int v61;
  void *__dst;
  uint64_t v63;
  __n128 *v64[2];
  uint64_t RHS;
  __int128 v66;
  uint64_t v67;
  _QWORD *v68;

  v68 = a1;
  RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v68);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  v64[1] = 0;
  RHS = (uint64_t)&v67;
  v66 = xmmword_181234800;
  v64[0] = 0;
  MutableElementsAttr = mlir::tryCreateMutableElementsAttr(v68, v64);
  RawElementsAttr = v64[0];
  if (!v64[0])
  {
    v11 = v68;
    if (v68)
    {
      v12 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v68 + 8);
      v13 = (_BYTE *)v66;
      v14 = (unint64_t)v66 > (unint64_t)ElementsAttrStorageSize;
      if ((char *)v66 == ElementsAttrStorageSize)
        goto LABEL_13;
    }
    else
    {
      v13 = (_BYTE *)v66;
      v14 = (unint64_t)v66 > (unint64_t)ElementsAttrStorageSize;
      if ((char *)v66 == ElementsAttrStorageSize)
      {
LABEL_13:
        v9 = (_BYTE *)RHS;
        goto LABEL_14;
      }
    }
    if (!v14)
    {
      if (*((_QWORD *)&v66 + 1) < (unint64_t)ElementsAttrStorageSize)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&RHS, &v67, (unint64_t)ElementsAttrStorageSize, 1);
        v13 = (_BYTE *)v66;
      }
      if (ElementsAttrStorageSize != v13)
        bzero(&v13[RHS], ElementsAttrStorageSize - v13);
    }
    *(_QWORD *)&v66 = ElementsAttrStorageSize;
    goto LABEL_13;
  }
  v9 = (_BYTE *)MutableElementsAttr;
  ElementsAttrStorageSize = v7;
LABEL_14:
  v63 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v68);
  __dst = v9;
  if (mlir::Type::isInteger((mlir::Type *)&v63, 1) && a3 == 1)
  {
    v15 = a2[2];
    if (v15 > 0x40)
      v16 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) == v15;
    else
      v16 = *(_QWORD *)a2 == 0;
    v22 = v16;
    *v9 = v22 - 1;
    goto LABEL_31;
  }
  v63 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v68);
  if (mlir::Type::isInteger((mlir::Type *)&v63, 1))
  {
    if (!ElementsAttrStorageSize)
      goto LABEL_31;
    v17 = v9;
    v18 = ElementsAttrStorageSize;
    while (1)
    {
      while (1)
      {
        v29 = a3 - 8;
        if ((unint64_t)a3 >= 8)
          a3 = 8;
        if (a3)
          break;
        *v17++ = 0;
        a3 = v29;
        if (!--v18)
          goto LABEL_31;
      }
      v30 = a2[2];
      if (v30 > 0x40)
      {
        v28 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) != v30;
        if (a3 == 1)
          goto LABEL_45;
      }
      else
      {
        v28 = *(_QWORD *)a2 != 0;
        if (a3 == 1)
          goto LABEL_45;
      }
      v31 = (llvm::APInt *)(a2 + 4);
      v32 = a2[6];
      if (v32 >= 0x41)
        v33 = llvm::APInt::countLeadingZerosSlowCase(v31) == v32;
      else
        v33 = *(_QWORD *)v31 == 0;
      if (v33)
        v35 = 0;
      else
        v35 = 2;
      v28 |= v35;
      if (a3 != 2)
      {
        v36 = (llvm::APInt *)(a2 + 8);
        v37 = a2[10];
        v38 = v37 >= 0x41 ? llvm::APInt::countLeadingZerosSlowCase(v36) == v37 : *(_QWORD *)v36 == 0;
        v39 = v38;
        v40 = v39 ? 0 : 4;
        v28 |= v40;
        if (a3 != 3)
        {
          v41 = (llvm::APInt *)(a2 + 12);
          v42 = a2[14];
          if (v42 >= 0x41)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v41) == v42)
              v44 = 0;
            else
              v44 = 8;
            v28 |= v44;
            if (a3 != 4)
            {
LABEL_85:
              v45 = (llvm::APInt *)(a2 + 16);
              v46 = a2[18];
              if (v46 >= 0x41)
                v47 = llvm::APInt::countLeadingZerosSlowCase(v45) == v46;
              else
                v47 = *(_QWORD *)v45 == 0;
              if (v47)
                v49 = 0;
              else
                v49 = 16;
              v28 |= v49;
              if (a3 != 5)
              {
                v50 = (llvm::APInt *)(a2 + 20);
                v51 = a2[22];
                v52 = v51 >= 0x41
                    ? llvm::APInt::countLeadingZerosSlowCase(v50) == v51
                    : *(_QWORD *)v50 == 0;
                v53 = v52;
                v54 = v53 ? 0 : 32;
                v28 |= v54;
                if (a3 != 6)
                {
                  v55 = (llvm::APInt *)(a2 + 24);
                  v56 = a2[26];
                  v57 = v56 >= 0x41
                      ? llvm::APInt::countLeadingZerosSlowCase(v55) == v56
                      : *(_QWORD *)v55 == 0;
                  v58 = v57;
                  v59 = v58 ? 0 : 64;
                  v28 |= v59;
                  if (a3 != 7)
                  {
                    v60 = (llvm::APInt *)(a2 + 28);
                    v61 = a2[30];
                    if (v61 < 0x41)
                      v25 = *(_QWORD *)v60 == 0;
                    else
                      v25 = llvm::APInt::countLeadingZerosSlowCase(v60) == v61;
                    if (v25)
                      v27 = 0;
                    else
                      v27 = 0x80;
                    v28 |= v27;
                  }
                }
              }
            }
          }
          else
          {
            if (*(_QWORD *)v41)
              v43 = 8;
            else
              v43 = 0;
            v28 |= v43;
            if (a3 != 4)
              goto LABEL_85;
          }
        }
      }
LABEL_45:
      a2 += 4 * a3;
      *v17++ = v28;
      a3 = v29;
      if (!--v18)
        goto LABEL_31;
    }
  }
  if (a3 >= 1)
  {
    v19 = IntOrFloatBitWidth >> 3;
    v20 = v9;
    do
    {
      v21 = a2;
      if (a2[2] >= 0x41u)
        v21 = *(const void **)a2;
      memcpy(v20, v21, v19);
      v20 += v19;
      a2 += 4;
      --a3;
    }
    while (a3);
  }
LABEL_31:
  if (!RawElementsAttr)
  {
    RawElementsAttr = (__n128 *)mlir::createRawElementsAttr(v68, __dst, ElementsAttrStorageSize);
    v23 = (void *)RHS;
    if ((uint64_t *)RHS == &v67)
      return RawElementsAttr;
    goto LABEL_33;
  }
  v23 = (void *)RHS;
  if ((uint64_t *)RHS != &v67)
LABEL_33:
    free(v23);
  return RawElementsAttr;
}

__n128 *mlir::createElementsAttr(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int IntOrFloatBitWidth;
  llvm::APFloatBase *MutableElementsAttr;
  const void *v7;
  __n128 *RawElementsAttr;
  llvm::APFloatBase *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  size_t v15;
  void *v16;
  llvm::detail::DoubleAPFloat *v17;
  llvm::APFloatBase *v18;
  unsigned int v19;
  void *v20;
  void **v21;
  llvm::APFloatBase *v23;
  const void *v25;
  void *v26;
  unsigned int v27;
  __n128 *v28[2];
  llvm::APFloatBase *RHS;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;

  v32 = a1;
  RHS = (llvm::APFloatBase *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v32);
  IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&RHS);
  v28[1] = 0;
  RHS = (llvm::APFloatBase *)&v31;
  v30 = xmmword_181234800;
  v28[0] = 0;
  MutableElementsAttr = (llvm::APFloatBase *)mlir::tryCreateMutableElementsAttr(v32, v28);
  RawElementsAttr = v28[0];
  if (v28[0])
  {
    v9 = MutableElementsAttr;
    v25 = v7;
    if (a3 < 1)
      goto LABEL_28;
    goto LABEL_15;
  }
  v10 = v32;
  if (v32)
  {
    v11 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v32 + 8);
    v12 = (unint64_t)MutableElementsAttr;
    v13 = v30;
    v14 = (unint64_t)v30 > (unint64_t)MutableElementsAttr;
    if ((llvm::APFloatBase *)v30 == MutableElementsAttr)
      goto LABEL_14;
  }
  else
  {
    v12 = (unint64_t)MutableElementsAttr;
    v13 = v30;
    v14 = (unint64_t)v30 > (unint64_t)MutableElementsAttr;
    if ((llvm::APFloatBase *)v30 == MutableElementsAttr)
      goto LABEL_14;
  }
  if (!v14)
  {
    if (*((_QWORD *)&v30 + 1) < v12)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&RHS, &v31, v12, 1);
      v13 = v30;
    }
    if (v12 != v13)
      bzero((char *)RHS + v13, v12 - v13);
  }
  *(_QWORD *)&v30 = v12;
LABEL_14:
  v25 = (const void *)v12;
  v9 = RHS;
  if (a3 < 1)
    goto LABEL_28;
LABEL_15:
  v15 = IntOrFloatBitWidth >> 3;
  v16 = llvm::APFloatBase::PPCDoubleDouble(MutableElementsAttr);
  v17 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v18 = v9;
  do
  {
    if (v16 == *(void **)v17)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v17, (llvm::APInt *)&v26);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt(v17, (uint64_t)&v26);
    v19 = v27;
    v20 = v26;
    if (v27 >= 0x41)
      v21 = (void **)v26;
    else
      v21 = &v26;
    memcpy(v18, v21, v15);
    if (v19 >= 0x41 && v20 != 0)
      operator delete[](v20);
    v18 = (llvm::APFloatBase *)((char *)v18 + v15);
    v17 = (llvm::detail::DoubleAPFloat *)((char *)v17 + 32);
    --a3;
  }
  while (a3);
LABEL_28:
  if (!RawElementsAttr)
  {
    RawElementsAttr = (__n128 *)mlir::createRawElementsAttr(v32, v9, v25);
    v23 = RHS;
    if (RHS == (llvm::APFloatBase *)&v31)
      return RawElementsAttr;
    goto LABEL_30;
  }
  v23 = RHS;
  if (RHS != (llvm::APFloatBase *)&v31)
LABEL_30:
    free(v23);
  return RawElementsAttr;
}

_QWORD *mlir::createSplatF16ElementsAttr(_QWORD *a1, float _S0)
{
  __int16 v8;

  __asm { FCVT            H0, S0 }
  v8 = _H0;
  return mlir::createRawElementsAttr(a1, &v8, (const void *)2);
}

_QWORD *mlir::rewriteElementsAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned __int8 *RawStringData;
  uint64_t v6;
  uint64_t v8;
  mlir::CallableOpInterface *v9;
  _QWORD *ArgAttrsAttr;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t OperandRange;
  uint64_t v17;
  uint64_t RHS;
  unint64_t ElementsAttrStorageSize;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *RawElementsAttr;
  unsigned __int8 *v29;
  _QWORD *Type;
  _QWORD *v31;
  int v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t NumElements;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _WORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  int v49;
  unsigned __int8 *MutableRawData;
  unsigned __int8 *v51;
  uint64_t v52;
  int64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t j;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t k;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t nn;
  uint64_t v68;
  uint64_t m;
  uint64_t v70;
  uint64_t i1;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t i8;
  uint64_t v76;
  uint64_t n;
  uint64_t v78;
  uint64_t i2;
  uint64_t v80;
  uint64_t i9;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t i13;
  uint64_t v86;
  uint64_t ii;
  uint64_t v88;
  uint64_t i3;
  uint64_t v90;
  uint64_t i10;
  uint64_t v92;
  uint64_t i14;
  uint64_t v94;
  uint64_t jj;
  uint64_t v96;
  uint64_t i4;
  uint64_t v98;
  uint64_t i11;
  uint64_t v100;
  uint64_t i15;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  uint64_t v107;
  uint64_t i5;
  uint64_t v109;
  unint64_t v110;
  uint64_t i16;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  _WORD *v129;
  uint64_t kk;
  uint64_t v131;
  unint64_t v138;
  unint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _WORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  _WORD *v154;
  unint64_t v155;
  unint64_t v156;
  unsigned __int8 *v157;
  float *v158;
  float v159;
  uint64_t i6;
  uint64_t v161;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  _WORD *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unsigned __int8 *v174;
  double *v175;
  double v176;
  unint64_t v177;
  unint64_t v178;
  unsigned __int8 *v179;
  float *v180;
  float v181;
  unint64_t v182;
  uint64_t v183;
  int8x16x4_t *v184;
  _OWORD *v185;
  unint64_t v186;
  __int128 v187;
  __int128 v188;
  unint64_t v189;
  int8x16x4_t *v190;
  unsigned __int8 *v191;
  unint64_t v192;
  int32x4_t *v193;
  int16x8_t *v194;
  unint64_t v195;
  int16x8_t v196;
  int64_t v197;
  _WORD *v198;
  unsigned __int8 *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t i;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unsigned __int8 *v207;
  double *v208;
  double v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v222;
  _WORD *v224;
  int8x16x4_t *v225;
  _OWORD *v226;
  unint64_t v227;
  __int128 v228;
  __int128 v229;
  unint64_t v230;
  int8x16x4_t *v231;
  unsigned __int8 *v232;
  unint64_t v233;
  int8x16x4_t *v234;
  _OWORD *v235;
  unint64_t v236;
  __int128 v237;
  __int128 v238;
  unint64_t v239;
  int8x16x4_t *v240;
  unsigned __int8 *v241;
  unint64_t v242;
  int32x4_t *v243;
  int16x8_t *v244;
  unint64_t v245;
  int16x8_t v246;
  int64_t v247;
  _WORD *v248;
  unsigned __int8 *v249;
  uint64_t v250;
  int32x4_t *v251;
  int16x8_t *v252;
  unint64_t v253;
  int16x8_t v254;
  int64_t v255;
  _WORD *v256;
  unsigned __int8 *v257;
  uint64_t v258;
  uint64_t *Value;
  uint64_t v260;
  uint64_t mm;
  uint64_t v262;
  uint64_t v263;
  uint64_t v267;
  uint64_t v268;
  unsigned int IntOrFloatBitWidth;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v279;
  _WORD *v281;
  int8x16x4_t *v282;
  _OWORD *v283;
  unint64_t v284;
  __int128 v285;
  __int128 v286;
  unint64_t v287;
  int8x16x4_t *v288;
  unsigned __int8 *v289;
  unint64_t v290;
  int32x4_t *v291;
  int16x8_t *v292;
  unint64_t v293;
  int16x8_t v294;
  int64_t v295;
  _WORD *v296;
  unsigned __int8 *v297;
  uint64_t v298;
  uint64_t i7;
  uint64_t v300;
  uint64_t v301;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  float32x4_t *v308;
  int8x16_t *v309;
  unint64_t v310;
  int8x16_t v311;
  uint32x4_t v312;
  unint64_t v313;
  float32x4_t *v314;
  unsigned __int8 *v315;
  unint64_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t *v319;
  int16x8_t *v320;
  unint64_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  int64_t v326;
  _WORD *v327;
  float *v328;
  float v329;
  unint64_t v330;
  uint64_t i12;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  uint64_t v335;
  unint64_t v336;
  int8x16_t *v337;
  float64x2_t *v338;
  int8x16_t v339;
  int8x16_t v340;
  unint64_t v341;
  float64x2_t *v342;
  int8x8_t *v343;
  unint64_t v344;
  float32x4_t *v345;
  int8x16_t *v346;
  unint64_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int8x16_t v351;
  unint64_t v352;
  float32x4_t *v353;
  int8x8_t *v354;
  unint64_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float64x2_t *v358;
  int8x16_t *v359;
  unint64_t v360;
  float64x2_t v361;
  int32x2_t v362;
  int32x2_t v363;
  int32x2_t v364;
  int32x2_t v365;
  int8x16_t v366;
  int32x2_t v367;
  int32x2_t v368;
  int32x2_t v369;
  int64_t v370;
  _WORD *v371;
  double *v372;
  double v373;
  float32x4_t *v374;
  int16x8_t *v375;
  unint64_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  int64_t v381;
  _WORD *v382;
  float *v383;
  float v384;
  unint64_t v385;
  unint64_t v386;
  int8x16_t *v387;
  float64x2_t *v388;
  int8x16_t v389;
  int8x16_t v390;
  unint64_t v391;
  float64x2_t *v392;
  int8x8_t *v393;
  unint64_t v394;
  float64x2_t *v395;
  int8x16_t *v396;
  unint64_t v397;
  float64x2_t v398;
  int32x2_t v399;
  int32x2_t v400;
  int32x2_t v401;
  int32x2_t v402;
  int8x16_t v403;
  int32x2_t v404;
  int32x2_t v405;
  int32x2_t v406;
  int64_t v407;
  _WORD *v408;
  double *v409;
  double v410;
  unint64_t v411;
  __int128 *v412;
  _OWORD *v413;
  unint64_t v414;
  __int128 v415;
  unint64_t v416;
  char *v417;
  unsigned __int8 *v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unsigned __int8 *v422;
  char *v423;
  unsigned __int8 v424;
  int8x16_t v425;
  int8x16_t *v426;
  unint64_t v427;
  unint64_t v428;
  int8x8_t v429;
  int8x8_t *v430;
  unint64_t v431;
  int16x8_t v432;
  int16x8_t *v433;
  unint64_t v434;
  int64_t v435;
  _WORD *v436;
  unint64_t v437;
  __int128 *v438;
  _OWORD *v439;
  unint64_t v440;
  __int128 v441;
  unint64_t v442;
  char *v443;
  unsigned __int8 *v444;
  unint64_t v445;
  uint64_t v446;
  unint64_t v447;
  unsigned __int8 *v448;
  char *v449;
  unsigned __int8 v450;
  int8x16_t v451;
  int8x16_t *v452;
  unint64_t v453;
  unint64_t v454;
  int8x8_t v455;
  int8x8_t *v456;
  unint64_t v457;
  int16x8_t v458;
  int16x8_t *v459;
  unint64_t v460;
  int64_t v461;
  _WORD *v462;
  uint8x8_t *v463;
  uint16x8_t *v464;
  unint64_t v465;
  uint8x16_t v466;
  uint16x8_t v467;
  uint16x8_t v468;
  unint64_t v469;
  uint8x8_t *v470;
  uint16x8_t *v471;
  unint64_t v472;
  uint8x8_t v473;
  unint64_t v474;
  _WORD *v475;
  char *v476;
  __int16 v477;
  uint8x8_t *v478;
  uint16x8_t *v479;
  unint64_t v480;
  uint8x16_t v481;
  uint16x8_t v482;
  uint16x8_t v483;
  unint64_t v484;
  uint8x8_t *v485;
  uint16x8_t *v486;
  unint64_t v487;
  uint8x8_t v488;
  unint64_t v489;
  _WORD *v490;
  char *v491;
  __int16 v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  _QWORD *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  void *v502;
  unint64_t v504;
  unint64_t v507;
  _QWORD *v510;
  _QWORD v511[2];
  _QWORD v512[2];
  __int128 v513;
  uint64_t v514;
  _QWORD *v515;
  _QWORD *v516;
  __int128 v517;
  void *v518;
  __int128 v519;
  _BYTE v520[16];
  void *v521;
  unint64_t v522;
  _QWORD v523[6];
  int8x16x2_t v524;
  int8x16x4_t v525;

  v523[5] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v513 = a1;
  *((_QWORD *)&v513 + 1) = a2;
  v512[0] = a3;
  v512[1] = a4;
  v511[0] = mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v513);
  v511[1] = v8;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v512))
  {
    v9 = (mlir::CallableOpInterface *)v512;
    ArgAttrsAttr = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v512);
    if (!v11)
      goto LABEL_8;
    v12 = 8 * v11;
    while (*ArgAttrsAttr != 0x8000000000000000)
    {
      ++ArgAttrsAttr;
      v12 -= 8;
      if (!v12)
      {
        v9 = (mlir::CallableOpInterface *)v512;
        goto LABEL_8;
      }
    }
  }
  v9 = (mlir::CallableOpInterface *)v511;
LABEL_8:
  v13 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr(v9);
  v15 = v14;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v512);
  v510 = (_QWORD *)mlir::RankedTensorType::get((uint64_t)v13, v15, OperandRange, 0);
  v17 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v511);
  if (v17 != mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v512))
  {
    if (*(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v511)
                      + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id
      && *(_UNKNOWN **)(*(_QWORD *)mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v512)
                      + 136) != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      return 0;
    }
    v518 = v520;
    v519 = xmmword_181236BC0;
    if (mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v513))
    {
      RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
                                                 + 7) >> 3;
      v20 = v519;
      v21 = (unint64_t)v519 > ElementsAttrStorageSize;
      if ((_QWORD)v519 == ElementsAttrStorageSize)
        goto LABEL_31;
    }
    else if (v510)
    {
      v27 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v510 + 8);
      v20 = v519;
      v21 = (unint64_t)v519 > ElementsAttrStorageSize;
      if ((_QWORD)v519 == ElementsAttrStorageSize)
        goto LABEL_31;
    }
    else
    {
      v20 = v519;
      v21 = (unint64_t)v519 > ElementsAttrStorageSize;
      if ((_QWORD)v519 == ElementsAttrStorageSize)
        goto LABEL_31;
    }
    if (!v21)
    {
      if (*((_QWORD *)&v519 + 1) < ElementsAttrStorageSize)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v518, v520, ElementsAttrStorageSize, 1);
        v20 = v519;
      }
      if (ElementsAttrStorageSize != v20)
        bzero((char *)v518 + v20, ElementsAttrStorageSize - v20);
    }
    *(_QWORD *)&v519 = ElementsAttrStorageSize;
LABEL_31:
    v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v521, 8))
    {
      v29 = (unsigned __int8 *)v518;
      v517 = v513;
      Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v517);
      v31 = Type;
      if (Type)
        Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
      v515 = v31;
      v516 = Type;
      v514 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v515);
      v32 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v517);
      v33 = (void *)v517;
      if (mlir::DenseElementsAttr::classof(v517))
        v34 = v33;
      else
        v34 = 0;
      v521 = v34;
      if (v34)
      {
        RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v521);
        v6 = v35;
        if ((v32 & 1) != 0)
          goto LABEL_39;
LABEL_66:
        NumElements = mlir::ElementsAttr::getNumElements(v517, *((uint64_t *)&v517 + 1));
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 8))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_68;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 8))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_89;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 16))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_118;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 16))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_157;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 32))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_206;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 32))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_250;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 64))
        {
          if (NumElements < 1)
            goto LABEL_871;
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
          {
            v103 = 0;
            goto LABEL_298;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            v103 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v184 = (int8x16x4_t *)(RawStringData + 128);
            v185 = v29 + 16;
            v186 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(_QWORD *)&v187 = vqtbl4q_s8(v184[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
              *(_QWORD *)&v188 = vqtbl4q_s8(*v184, (int8x16_t)xmmword_18125CFF0).u64[0];
              *((_QWORD *)&v187 + 1) = vqtbl4q_s8(v184[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
              *((_QWORD *)&v188 + 1) = vqtbl4q_s8(v184[1], (int8x16_t)xmmword_18125CFF0).u64[0];
              *(v185 - 1) = v187;
              *v185 = v188;
              v184 += 4;
              v185 += 2;
              v186 -= 32;
            }
            while (v186);
            if (NumElements == v103)
              goto LABEL_871;
            if ((NumElements & 0x18) == 0)
            {
LABEL_298:
              v104 = NumElements - v103;
              v105 = &v29[v103];
              v106 = &RawStringData[8 * v103];
              do
              {
                v107 = *(_QWORD *)v106;
                v106 += 8;
                *v105++ = v107;
                --v104;
              }
              while (v104);
              goto LABEL_871;
            }
          }
          else
          {
            v103 = 0;
          }
          v189 = v103;
          v103 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v190 = (int8x16x4_t *)&RawStringData[8 * v189];
          v191 = &v29[v189];
          v192 = v189 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(_QWORD *)v191 = vqtbl4q_s8(*v190, (int8x16_t)xmmword_18125D000).u64[0];
            v191 += 8;
            ++v190;
            v192 += 8;
          }
          while (v192);
          if (NumElements == v103)
            goto LABEL_871;
          goto LABEL_298;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 64))
        {
          if (NumElements < 1)
            goto LABEL_871;
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
          {
            v113 = 0;
            goto LABEL_336;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            v113 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v225 = (int8x16x4_t *)(RawStringData + 128);
            v226 = v29 + 16;
            v227 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(_QWORD *)&v228 = vqtbl4q_s8(v225[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
              *(_QWORD *)&v229 = vqtbl4q_s8(*v225, (int8x16_t)xmmword_18125CFF0).u64[0];
              *((_QWORD *)&v228 + 1) = vqtbl4q_s8(v225[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
              *((_QWORD *)&v229 + 1) = vqtbl4q_s8(v225[1], (int8x16_t)xmmword_18125CFF0).u64[0];
              *(v226 - 1) = v228;
              *v226 = v229;
              v225 += 4;
              v226 += 2;
              v227 -= 32;
            }
            while (v227);
            if (NumElements == v113)
              goto LABEL_871;
            if ((NumElements & 0x18) == 0)
            {
LABEL_336:
              v114 = NumElements - v113;
              v115 = &v29[v113];
              v116 = &RawStringData[8 * v113];
              do
              {
                v117 = *(_QWORD *)v116;
                v116 += 8;
                *v115++ = v117;
                --v114;
              }
              while (v114);
              goto LABEL_871;
            }
          }
          else
          {
            v113 = 0;
          }
          v230 = v113;
          v113 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v231 = (int8x16x4_t *)&RawStringData[8 * v230];
          v232 = &v29[v230];
          v233 = v230 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(_QWORD *)v232 = vqtbl4q_s8(*v231, (int8x16_t)xmmword_18125D000).u64[0];
            v232 += 8;
            ++v231;
            v233 += 8;
          }
          while (v233);
          if (NumElements == v113)
            goto LABEL_871;
          goto LABEL_336;
        }
        if (mlir::Type::isF16((mlir::Type *)&v514))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_375;
        }
        if (mlir::Type::isF32((mlir::Type *)&v514))
        {
          if (NumElements < 1)
            goto LABEL_871;
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[4 * NumElements] && &v29[NumElements] > RawStringData)
          {
            v155 = 0;
            goto LABEL_433;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            v155 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v308 = (float32x4_t *)(RawStringData + 64);
            v309 = (int8x16_t *)(v29 + 16);
            v310 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v525.val[3] = (int8x16_t)vcvtq_u32_f32(v308[-1]);
              v525.val[2] = (int8x16_t)vcvtq_u32_f32(v308[-2]);
              v525.val[1] = (int8x16_t)vcvtq_u32_f32(v308[-3]);
              v525.val[0] = (int8x16_t)vcvtq_u32_f32(v308[-4]);
              v311 = vqtbl4q_s8(v525, (int8x16_t)xmmword_18125D010);
              v525.val[2] = (int8x16_t)vcvtq_u32_f32(v308[3]);
              v525.val[1] = (int8x16_t)vcvtq_u32_f32(v308[2]);
              v525.val[0] = (int8x16_t)vcvtq_u32_f32(v308[1]);
              v312 = vcvtq_u32_f32(*v308);
              v309[-1] = v311;
              *v309 = vqtbl4q_s8(v525, (int8x16_t)xmmword_18125D010);
              v308 += 8;
              v309 += 2;
              v310 -= 32;
            }
            while (v310);
            if (NumElements == v155)
              goto LABEL_871;
            if ((NumElements & 0x18) == 0)
            {
LABEL_433:
              v156 = NumElements - v155;
              v157 = &v29[v155];
              v158 = (float *)&RawStringData[4 * v155];
              do
              {
                v159 = *v158++;
                *v157++ = (int)v159;
                --v156;
              }
              while (v156);
              goto LABEL_871;
            }
          }
          else
          {
            v155 = 0;
          }
          v313 = v155;
          v155 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v314 = (float32x4_t *)&RawStringData[4 * v313];
          v315 = &v29[v313];
          v316 = v313 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v317 = *v314;
            v318 = v314[1];
            v314 += 2;
            v524.val[1] = (int8x16_t)vcvtq_u32_f32(v318);
            v524.val[0] = (int8x16_t)vcvtq_u32_f32(v317);
            *(_QWORD *)v315 = vqtbl2q_s8(v524, (int8x16_t)xmmword_18125D020).u64[0];
            v315 += 8;
            v316 += 8;
          }
          while (v316);
          if (NumElements == v155)
            goto LABEL_871;
          goto LABEL_433;
        }
        if (!mlir::Type::isF64((mlir::Type *)&v514))
        {
          if (!mlir::Type::isBF16((mlir::Type *)&v514))
            goto LABEL_551;
          if (NumElements < 1)
            goto LABEL_871;
LABEL_528:
          for (i = 0; i != NumElements; ++i)
          {
            if (v32)
              v204 = 0;
            else
              v204 = i;
            v29[i] = (int)COERCE_FLOAT(*(unsigned __int16 *)&RawStringData[2 * v204] << 16);
          }
          goto LABEL_871;
        }
        if (NumElements < 1)
          goto LABEL_871;
        if ((unint64_t)NumElements < 8
          || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
        {
          v172 = 0;
          goto LABEL_474;
        }
        if ((unint64_t)NumElements >= 0x10)
        {
          v172 = NumElements & 0x7FFFFFFFFFFFFFF0;
          v336 = NumElements & 0xFFFFFFFFFFFFFFF0;
          v337 = (int8x16_t *)v29;
          v338 = (float64x2_t *)RawStringData;
          do
          {
            *(int16x4_t *)v339.i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v338[4])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v338[5])));
            v339.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v338[6])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v338[7])));
            *(int16x4_t *)v340.i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v338)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v338[1])));
            v340.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v338[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v338[3])));
            *v337++ = vuzp1q_s8(v340, v339);
            v338 += 8;
            v336 -= 16;
          }
          while (v336);
          if (NumElements == v172)
            goto LABEL_871;
          if ((NumElements & 8) == 0)
          {
LABEL_474:
            v173 = NumElements - v172;
            v174 = &v29[v172];
            v175 = (double *)&RawStringData[8 * v172];
            do
            {
              v176 = *v175++;
              *v174++ = (int)v176;
              --v173;
            }
            while (v173);
            goto LABEL_871;
          }
        }
        else
        {
          v172 = 0;
        }
        v341 = v172;
        v172 = NumElements & 0xFFFFFFFFFFFFFFF8;
        v342 = (float64x2_t *)&RawStringData[8 * v341];
        v343 = (int8x8_t *)&v29[v341];
        v344 = v341 - (NumElements & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v343++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v342)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v342[1]))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v342[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v342[3]))));
          v342 += 4;
          v344 += 8;
        }
        while (v344);
        if (NumElements == v172)
          goto LABEL_871;
        goto LABEL_474;
      }
      if (*(_UNKNOWN **)(*(_QWORD *)v33 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
        v54 = v33;
      else
        v54 = 0;
      v521 = v54;
      if (v54)
      {
        RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v521);
        v6 = v55;
        if ((v32 & 1) == 0)
          goto LABEL_66;
      }
      else if ((v32 & 1) == 0)
      {
        goto LABEL_66;
      }
LABEL_39:
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 8))
      {
        NumElements = 1;
LABEL_68:
        for (j = 0; j != NumElements; ++j)
        {
          if (v32)
            v57 = 0;
          else
            v57 = j;
          v29[j] = RawStringData[v57];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 8))
      {
        NumElements = 1;
LABEL_89:
        for (k = 0; k != NumElements; ++k)
        {
          if (v32)
            v64 = 0;
          else
            v64 = k;
          v29[k] = RawStringData[v64];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 16))
      {
        NumElements = 1;
LABEL_118:
        for (m = 0; m != NumElements; ++m)
        {
          if (v32)
            v70 = 0;
          else
            v70 = m;
          v29[m] = *(_WORD *)&RawStringData[2 * v70];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 16))
      {
        NumElements = 1;
LABEL_157:
        for (n = 0; n != NumElements; ++n)
        {
          if (v32)
            v78 = 0;
          else
            v78 = n;
          v29[n] = *(_WORD *)&RawStringData[2 * v78];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 32))
      {
        NumElements = 1;
LABEL_206:
        for (ii = 0; ii != NumElements; ++ii)
        {
          if (v32)
            v88 = 0;
          else
            v88 = ii;
          v29[ii] = *(_DWORD *)&RawStringData[4 * v88];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 32))
      {
        NumElements = 1;
LABEL_250:
        for (jj = 0; jj != NumElements; ++jj)
        {
          if (v32)
            v96 = 0;
          else
            v96 = jj;
          v29[jj] = *(_DWORD *)&RawStringData[4 * v96];
        }
        goto LABEL_871;
      }
      if (!mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 64) && !mlir::Type::isInteger((mlir::Type *)&v514, 64))
      {
        if (mlir::Type::isF16((mlir::Type *)&v514))
        {
          NumElements = 1;
LABEL_375:
          for (kk = 0; kk != NumElements; ++kk)
          {
            if (v32)
              v131 = 0;
            else
              v131 = kk;
            _H0 = *(_WORD *)&RawStringData[2 * v131];
            __asm { FCVT            S0, H0 }
            v29[kk] = (int)_S0;
          }
          goto LABEL_871;
        }
        if (!mlir::Type::isF32((mlir::Type *)&v514))
        {
          if (!mlir::Type::isF64((mlir::Type *)&v514))
          {
            NumElements = 1;
            if (!mlir::Type::isBF16((mlir::Type *)&v514))
            {
LABEL_551:
              if (mlir::Type::isInteger((mlir::Type *)&v514, 1))
              {
                llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)&v521, NumElements);
                mlir::detail::unpackBooleanData(RawStringData, v6, (uint64_t)v521, v522);
                v212 = (char *)v521;
                if (NumElements < 1)
                  goto LABEL_846;
                if ((v32 & 1) != 0)
                {
                  if ((unint64_t)NumElements < 8
                    || v29 < (unsigned __int8 *)((char *)v521 + 1) && v521 < &v29[NumElements])
                  {
                    v213 = 0;
                    goto LABEL_558;
                  }
                  if ((unint64_t)NumElements >= 0x20)
                  {
                    v213 = NumElements & 0x7FFFFFFFFFFFFFE0;
                    v425 = vld1q_dup_s8((const char *)v521);
                    v426 = (int8x16_t *)(v29 + 16);
                    v427 = NumElements & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v426[-1] = v425;
                      *v426 = v425;
                      v426 += 2;
                      v427 -= 32;
                    }
                    while (v427);
                    if (NumElements == v213)
                      goto LABEL_846;
                    if ((NumElements & 0x18) == 0)
                    {
LABEL_558:
                      v214 = NumElements - v213;
                      v215 = (char *)&v29[v213];
                      do
                      {
                        *v215++ = *v212;
                        --v214;
                      }
                      while (v214);
                      goto LABEL_846;
                    }
                  }
                  else
                  {
                    v213 = 0;
                  }
                  v428 = v213;
                  v213 = NumElements & 0xFFFFFFFFFFFFFFF8;
                  v429 = vld1_dup_s8(v212);
                  v430 = (int8x8_t *)&v29[v428];
                  v431 = v428 - (NumElements & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    *v430++ = v429;
                    v431 += 8;
                  }
                  while (v431);
                  if (NumElements != v213)
                    goto LABEL_558;
LABEL_846:
                  if (v212 == (char *)v523)
                    goto LABEL_871;
                  goto LABEL_847;
                }
                v330 = 0;
                if ((unint64_t)NumElements >= 8 && (unint64_t)(v29 - (_BYTE *)v521) >= 0x20)
                {
                  if ((unint64_t)NumElements < 0x20)
                  {
                    v330 = 0;
LABEL_775:
                    v416 = v330;
                    v330 = NumElements & 0xFFFFFFFFFFFFFFF8;
                    v417 = &v212[v416];
                    v418 = &v29[v416];
                    v419 = v416 - (NumElements & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v420 = *(_QWORD *)v417;
                      v417 += 8;
                      *(_QWORD *)v418 = v420;
                      v418 += 8;
                      v419 += 8;
                    }
                    while (v419);
                    if (NumElements == v330)
                      goto LABEL_846;
                    goto LABEL_778;
                  }
                  v330 = NumElements & 0x7FFFFFFFFFFFFFE0;
                  v412 = (__int128 *)((char *)v521 + 16);
                  v413 = v29 + 16;
                  v414 = NumElements & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v415 = *v412;
                    *(v413 - 1) = *(v412 - 1);
                    *v413 = v415;
                    v412 += 2;
                    v413 += 2;
                    v414 -= 32;
                  }
                  while (v414);
                  if (NumElements == v330)
                    goto LABEL_846;
                  if ((NumElements & 0x18) != 0)
                    goto LABEL_775;
                }
LABEL_778:
                v421 = NumElements - v330;
                v422 = &v29[v330];
                v423 = &v212[v330];
                do
                {
                  v424 = *v423++;
                  *v422++ = v424;
                  --v421;
                }
                while (v421);
                goto LABEL_846;
              }
LABEL_623:
              mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v514);
              IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v514);
              mlir::detail::unpackQuantizedData<unsigned char>(RawStringData, v6, (uint64_t)v29, NumElements, IntOrFloatBitWidth);
              goto LABEL_871;
            }
            goto LABEL_528;
          }
LABEL_519:
          *v29 = (int)*(double *)RawStringData;
          goto LABEL_871;
        }
LABEL_464:
        *v29 = (int)*(float *)RawStringData;
        goto LABEL_871;
      }
LABEL_327:
      *v29 = *(_QWORD *)RawStringData;
      goto LABEL_871;
    }
    v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
    if (mlir::Type::isInteger((mlir::Type *)&v521, 8))
    {
      v29 = (unsigned __int8 *)v518;
      v517 = v513;
      v40 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v517);
      v41 = v40;
      if (v40)
        v40 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v40 + 8);
      v515 = v41;
      v516 = v40;
      v514 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v515);
      v42 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v517);
      v43 = (void *)v517;
      if (mlir::DenseElementsAttr::classof(v517))
        v44 = v43;
      else
        v44 = 0;
      v521 = v44;
      if (v44)
      {
        RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v521);
        v6 = v45;
        if ((v42 & 1) != 0)
          goto LABEL_49;
LABEL_100:
        NumElements = mlir::ElementsAttr::getNumElements(v517, *((uint64_t *)&v517 + 1));
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 8))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_102;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 8))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_126;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 16))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_165;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 16))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_214;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 32))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_258;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 32))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_303;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 64))
        {
          if (NumElements < 1)
            goto LABEL_871;
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
          {
            v118 = 0;
            goto LABEL_345;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            v118 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v234 = (int8x16x4_t *)(RawStringData + 128);
            v235 = v29 + 16;
            v236 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(_QWORD *)&v237 = vqtbl4q_s8(v234[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
              *(_QWORD *)&v238 = vqtbl4q_s8(*v234, (int8x16_t)xmmword_18125CFF0).u64[0];
              *((_QWORD *)&v237 + 1) = vqtbl4q_s8(v234[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
              *((_QWORD *)&v238 + 1) = vqtbl4q_s8(v234[1], (int8x16_t)xmmword_18125CFF0).u64[0];
              *(v235 - 1) = v237;
              *v235 = v238;
              v234 += 4;
              v235 += 2;
              v236 -= 32;
            }
            while (v236);
            if (NumElements == v118)
              goto LABEL_871;
            if ((NumElements & 0x18) == 0)
            {
LABEL_345:
              v119 = NumElements - v118;
              v120 = &v29[v118];
              v121 = &RawStringData[8 * v118];
              do
              {
                v122 = *(_QWORD *)v121;
                v121 += 8;
                *v120++ = v122;
                --v119;
              }
              while (v119);
              goto LABEL_871;
            }
          }
          else
          {
            v118 = 0;
          }
          v239 = v118;
          v118 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v240 = (int8x16x4_t *)&RawStringData[8 * v239];
          v241 = &v29[v239];
          v242 = v239 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(_QWORD *)v241 = vqtbl4q_s8(*v240, (int8x16_t)xmmword_18125D000).u64[0];
            v241 += 8;
            ++v240;
            v242 += 8;
          }
          while (v242);
          if (NumElements == v118)
            goto LABEL_871;
          goto LABEL_345;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 64))
        {
          if (NumElements < 1)
            goto LABEL_871;
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
          {
            v138 = 0;
            goto LABEL_387;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            v138 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v282 = (int8x16x4_t *)(RawStringData + 128);
            v283 = v29 + 16;
            v284 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(_QWORD *)&v285 = vqtbl4q_s8(v282[-2], (int8x16_t)xmmword_18125CFF0).u64[0];
              *(_QWORD *)&v286 = vqtbl4q_s8(*v282, (int8x16_t)xmmword_18125CFF0).u64[0];
              *((_QWORD *)&v285 + 1) = vqtbl4q_s8(v282[-1], (int8x16_t)xmmword_18125CFF0).u64[0];
              *((_QWORD *)&v286 + 1) = vqtbl4q_s8(v282[1], (int8x16_t)xmmword_18125CFF0).u64[0];
              *(v283 - 1) = v285;
              *v283 = v286;
              v282 += 4;
              v283 += 2;
              v284 -= 32;
            }
            while (v284);
            if (NumElements == v138)
              goto LABEL_871;
            if ((NumElements & 0x18) == 0)
            {
LABEL_387:
              v139 = NumElements - v138;
              v140 = &v29[v138];
              v141 = &RawStringData[8 * v138];
              do
              {
                v142 = *(_QWORD *)v141;
                v141 += 8;
                *v140++ = v142;
                --v139;
              }
              while (v139);
              goto LABEL_871;
            }
          }
          else
          {
            v138 = 0;
          }
          v287 = v138;
          v138 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v288 = (int8x16x4_t *)&RawStringData[8 * v287];
          v289 = &v29[v287];
          v290 = v287 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *(_QWORD *)v289 = vqtbl4q_s8(*v288, (int8x16_t)xmmword_18125D000).u64[0];
            v289 += 8;
            ++v288;
            v290 += 8;
          }
          while (v290);
          if (NumElements == v138)
            goto LABEL_871;
          goto LABEL_387;
        }
        if (mlir::Type::isF16((mlir::Type *)&v514))
        {
          if (NumElements < 1)
            goto LABEL_871;
          goto LABEL_438;
        }
        if (mlir::Type::isF32((mlir::Type *)&v514))
        {
          if (NumElements < 1)
            goto LABEL_871;
          if ((unint64_t)NumElements < 8
            || v29 < &RawStringData[4 * NumElements] && &v29[NumElements] > RawStringData)
          {
            v177 = 0;
            goto LABEL_483;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            v177 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v345 = (float32x4_t *)(RawStringData + 64);
            v346 = (int8x16_t *)(v29 + 16);
            v347 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              *(int16x4_t *)v348.i8 = vmovn_s32(vcvtq_s32_f32(v345[-2]));
              v348.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v345[-1]));
              *(int16x4_t *)v349.i8 = vmovn_s32(vcvtq_s32_f32(v345[-4]));
              v349.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v345[-3]));
              v350 = vuzp1q_s8(v349, v348);
              *(int16x4_t *)v348.i8 = vmovn_s32(vcvtq_s32_f32(v345[2]));
              v348.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v345[3]));
              *(int16x4_t *)v351.i8 = vmovn_s32(vcvtq_s32_f32(*v345));
              v351.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v345[1]));
              v346[-1] = v350;
              *v346 = vuzp1q_s8(v351, v348);
              v345 += 8;
              v346 += 2;
              v347 -= 32;
            }
            while (v347);
            if (NumElements == v177)
              goto LABEL_871;
            if ((NumElements & 0x18) == 0)
            {
LABEL_483:
              v178 = NumElements - v177;
              v179 = &v29[v177];
              v180 = (float *)&RawStringData[4 * v177];
              do
              {
                v181 = *v180++;
                *v179++ = (int)v181;
                --v178;
              }
              while (v178);
              goto LABEL_871;
            }
          }
          else
          {
            v177 = 0;
          }
          v352 = v177;
          v177 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v353 = (float32x4_t *)&RawStringData[4 * v352];
          v354 = (int8x8_t *)&v29[v352];
          v355 = v352 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v356 = *v353;
            v357 = v353[1];
            v353 += 2;
            *v354++ = vuzp1_s8((int8x8_t)vmovn_s32(vcvtq_s32_f32(v356)), (int8x8_t)vmovn_s32(vcvtq_s32_f32(v357)));
            v355 += 8;
          }
          while (v355);
          if (NumElements == v177)
            goto LABEL_871;
          goto LABEL_483;
        }
        if (!mlir::Type::isF64((mlir::Type *)&v514))
        {
          if (!mlir::Type::isBF16((mlir::Type *)&v514))
            goto LABEL_624;
          if (NumElements < 1)
            goto LABEL_871;
LABEL_609:
          for (mm = 0; mm != NumElements; ++mm)
          {
            if (v42)
              v262 = 0;
            else
              v262 = mm;
            v29[mm] = (int)COERCE_FLOAT(*(unsigned __int16 *)&RawStringData[2 * v262] << 16);
          }
          goto LABEL_871;
        }
        if (NumElements < 1)
          goto LABEL_871;
        if ((unint64_t)NumElements < 8
          || v29 < &RawStringData[8 * NumElements] && &v29[NumElements] > RawStringData)
        {
          v205 = 0;
          goto LABEL_540;
        }
        if ((unint64_t)NumElements >= 0x10)
        {
          v205 = NumElements & 0x7FFFFFFFFFFFFFF0;
          v386 = NumElements & 0xFFFFFFFFFFFFFFF0;
          v387 = (int8x16_t *)v29;
          v388 = (float64x2_t *)RawStringData;
          do
          {
            *(int16x4_t *)v389.i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v388[4])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v388[5])));
            v389.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v388[6])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v388[7])));
            *(int16x4_t *)v390.i8 = vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v388)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v388[1])));
            v390.u64[1] = (unint64_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v388[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v388[3])));
            *v387++ = vuzp1q_s8(v390, v389);
            v388 += 8;
            v386 -= 16;
          }
          while (v386);
          if (NumElements == v205)
            goto LABEL_871;
          if ((NumElements & 8) == 0)
          {
LABEL_540:
            v206 = NumElements - v205;
            v207 = &v29[v205];
            v208 = (double *)&RawStringData[8 * v205];
            do
            {
              v209 = *v208++;
              *v207++ = (int)v209;
              --v206;
            }
            while (v206);
            goto LABEL_871;
          }
        }
        else
        {
          v205 = 0;
        }
        v391 = v205;
        v205 = NumElements & 0xFFFFFFFFFFFFFFF8;
        v392 = (float64x2_t *)&RawStringData[8 * v391];
        v393 = (int8x8_t *)&v29[v391];
        v394 = v391 - (NumElements & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v393++ = vuzp1_s8((int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(*v392)), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v392[1]))), (int8x8_t)vuzp1_s16((int16x4_t)vmovn_s64(vcvtq_s64_f64(v392[2])), (int16x4_t)vmovn_s64(vcvtq_s64_f64(v392[3]))));
          v392 += 4;
          v394 += 8;
        }
        while (v394);
        if (NumElements == v205)
          goto LABEL_871;
        goto LABEL_540;
      }
      if (*(_UNKNOWN **)(*(_QWORD *)v43 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
        v65 = v43;
      else
        v65 = 0;
      v521 = v65;
      if (v65)
      {
        RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v521);
        v6 = v66;
        if ((v42 & 1) == 0)
          goto LABEL_100;
      }
      else if ((v42 & 1) == 0)
      {
        goto LABEL_100;
      }
LABEL_49:
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 8))
      {
        NumElements = 1;
LABEL_102:
        for (nn = 0; nn != NumElements; ++nn)
        {
          if (v42)
            v68 = 0;
          else
            v68 = nn;
          v29[nn] = RawStringData[v68];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 8))
      {
        NumElements = 1;
LABEL_126:
        for (i1 = 0; i1 != NumElements; ++i1)
        {
          if (v42)
            v72 = 0;
          else
            v72 = i1;
          v29[i1] = RawStringData[v72];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 16))
      {
        NumElements = 1;
LABEL_165:
        for (i2 = 0; i2 != NumElements; ++i2)
        {
          if (v42)
            v80 = 0;
          else
            v80 = i2;
          v29[i2] = *(_WORD *)&RawStringData[2 * v80];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 16))
      {
        NumElements = 1;
LABEL_214:
        for (i3 = 0; i3 != NumElements; ++i3)
        {
          if (v42)
            v90 = 0;
          else
            v90 = i3;
          v29[i3] = *(_WORD *)&RawStringData[2 * v90];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 32))
      {
        NumElements = 1;
LABEL_258:
        for (i4 = 0; i4 != NumElements; ++i4)
        {
          if (v42)
            v98 = 0;
          else
            v98 = i4;
          v29[i4] = *(_DWORD *)&RawStringData[4 * v98];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 32))
      {
        NumElements = 1;
LABEL_303:
        for (i5 = 0; i5 != NumElements; ++i5)
        {
          if (v42)
            v109 = 0;
          else
            v109 = i5;
          v29[i5] = *(_DWORD *)&RawStringData[4 * v109];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 64) || mlir::Type::isInteger((mlir::Type *)&v514, 64))
        goto LABEL_327;
      if (mlir::Type::isF16((mlir::Type *)&v514))
      {
        NumElements = 1;
LABEL_438:
        for (i6 = 0; i6 != NumElements; ++i6)
        {
          if (v42)
            v161 = 0;
          else
            v161 = i6;
          _H0 = *(_WORD *)&RawStringData[2 * v161];
          __asm { FCVT            S0, H0 }
          v29[i6] = (int)_S0;
        }
        goto LABEL_871;
      }
      if (mlir::Type::isF32((mlir::Type *)&v514))
        goto LABEL_464;
      if (mlir::Type::isF64((mlir::Type *)&v514))
        goto LABEL_519;
      NumElements = 1;
      if (!mlir::Type::isBF16((mlir::Type *)&v514))
      {
LABEL_624:
        if (!mlir::Type::isInteger((mlir::Type *)&v514, 1))
          goto LABEL_623;
        llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)&v521, NumElements);
        mlir::detail::unpackBooleanData(RawStringData, v6, (uint64_t)v521, v522);
        v212 = (char *)v521;
        if (NumElements < 1)
          goto LABEL_846;
        if ((v42 & 1) != 0)
        {
          if ((unint64_t)NumElements < 8
            || v29 < (unsigned __int8 *)((char *)v521 + 1) && v521 < &v29[NumElements])
          {
            v270 = 0;
            goto LABEL_631;
          }
          if ((unint64_t)NumElements >= 0x20)
          {
            v270 = NumElements & 0x7FFFFFFFFFFFFFE0;
            v451 = vld1q_dup_s8((const char *)v521);
            v452 = (int8x16_t *)(v29 + 16);
            v453 = NumElements & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v452[-1] = v451;
              *v452 = v451;
              v452 += 2;
              v453 -= 32;
            }
            while (v453);
            if (NumElements == v270)
              goto LABEL_846;
            if ((NumElements & 0x18) == 0)
            {
LABEL_631:
              v271 = NumElements - v270;
              v272 = (char *)&v29[v270];
              do
              {
                *v272++ = *v212;
                --v271;
              }
              while (v271);
              goto LABEL_846;
            }
          }
          else
          {
            v270 = 0;
          }
          v454 = v270;
          v270 = NumElements & 0xFFFFFFFFFFFFFFF8;
          v455 = vld1_dup_s8(v212);
          v456 = (int8x8_t *)&v29[v454];
          v457 = v454 - (NumElements & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v456++ = v455;
            v457 += 8;
          }
          while (v457);
          if (NumElements == v270)
            goto LABEL_846;
          goto LABEL_631;
        }
        v385 = 0;
        if ((unint64_t)NumElements >= 8 && (unint64_t)(v29 - (_BYTE *)v521) >= 0x20)
        {
          if ((unint64_t)NumElements < 0x20)
          {
            v385 = 0;
LABEL_803:
            v442 = v385;
            v385 = NumElements & 0xFFFFFFFFFFFFFFF8;
            v443 = &v212[v442];
            v444 = &v29[v442];
            v445 = v442 - (NumElements & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v446 = *(_QWORD *)v443;
              v443 += 8;
              *(_QWORD *)v444 = v446;
              v444 += 8;
              v445 += 8;
            }
            while (v445);
            if (NumElements == v385)
              goto LABEL_846;
            goto LABEL_806;
          }
          v385 = NumElements & 0x7FFFFFFFFFFFFFE0;
          v438 = (__int128 *)((char *)v521 + 16);
          v439 = v29 + 16;
          v440 = NumElements & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v441 = *v438;
            *(v439 - 1) = *(v438 - 1);
            *v439 = v441;
            v438 += 2;
            v439 += 2;
            v440 -= 32;
          }
          while (v440);
          if (NumElements == v385)
            goto LABEL_846;
          if ((NumElements & 0x18) != 0)
            goto LABEL_803;
        }
LABEL_806:
        v447 = NumElements - v385;
        v448 = &v29[v385];
        v449 = &v212[v385];
        do
        {
          v450 = *v449++;
          *v448++ = v450;
          --v447;
        }
        while (v447);
        goto LABEL_846;
      }
      goto LABEL_609;
    }
    v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v521, 16))
    {
      v46 = v518;
      v517 = v513;
      v47 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v517);
      v48 = v47;
      if (v47)
        v47 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v47 + 8);
      v515 = v48;
      v516 = v47;
      v514 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v515);
      v49 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v517);
      MutableRawData = (unsigned __int8 *)v517;
      if (mlir::DenseElementsAttr::classof(v517))
        v51 = MutableRawData;
      else
        v51 = 0;
      v521 = v51;
      if (v51)
      {
        MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v521);
        v6 = v52;
        if ((v49 & 1) != 0)
          goto LABEL_59;
LABEL_137:
        v53 = mlir::ElementsAttr::getNumElements(v517, *((uint64_t *)&v517 + 1));
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 8))
        {
          if (v53 < 1)
            goto LABEL_871;
          goto LABEL_139;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 8))
        {
          if (v53 < 1)
            goto LABEL_871;
          goto LABEL_173;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 16))
        {
          if (v53 < 1)
            goto LABEL_871;
          goto LABEL_222;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 16))
        {
          if (v53 < 1)
            goto LABEL_871;
          goto LABEL_266;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 32))
        {
          if (v53 < 1)
            goto LABEL_871;
          goto LABEL_311;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 32))
        {
          if (v53 < 1)
            goto LABEL_871;
          goto LABEL_350;
        }
        if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 64))
        {
          if (v53 < 1)
            goto LABEL_871;
          if ((unint64_t)v53 >= 0x10)
          {
            v143 = v53 & 0x7FFFFFFFFFFFFFF0;
            v193 = (int32x4_t *)(MutableRawData + 64);
            v194 = (int16x8_t *)(v46 + 8);
            v195 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v196 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v193, v193[1]), (int16x8_t)vuzp1q_s32(v193[2], v193[3]));
              v194[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v193[-4], v193[-3]), (int16x8_t)vuzp1q_s32(v193[-2], v193[-1]));
              *v194 = v196;
              v193 += 8;
              v194 += 2;
              v195 -= 16;
            }
            while (v195);
            if (v53 == v143)
              goto LABEL_871;
          }
          else
          {
            v143 = 0;
          }
          v197 = v53 - v143;
          v198 = &v46[v143];
          v199 = &MutableRawData[8 * v143];
          do
          {
            v200 = *(_QWORD *)v199;
            v199 += 8;
            *v198++ = v200;
            --v197;
          }
          while (v197);
          goto LABEL_871;
        }
        if (mlir::Type::isInteger((mlir::Type *)&v514, 64))
        {
          if (v53 < 1)
            goto LABEL_871;
          if ((unint64_t)v53 >= 0x10)
          {
            v164 = v53 & 0x7FFFFFFFFFFFFFF0;
            v243 = (int32x4_t *)(MutableRawData + 64);
            v244 = (int16x8_t *)(v46 + 8);
            v245 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v246 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v243, v243[1]), (int16x8_t)vuzp1q_s32(v243[2], v243[3]));
              v244[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v243[-4], v243[-3]), (int16x8_t)vuzp1q_s32(v243[-2], v243[-1]));
              *v244 = v246;
              v243 += 8;
              v244 += 2;
              v245 -= 16;
            }
            while (v245);
            if (v53 == v164)
              goto LABEL_871;
          }
          else
          {
            v164 = 0;
          }
          v247 = v53 - v164;
          v248 = &v46[v164];
          v249 = &MutableRawData[8 * v164];
          do
          {
            v250 = *(_QWORD *)v249;
            v249 += 8;
            *v248++ = v250;
            --v247;
          }
          while (v247);
          goto LABEL_871;
        }
        if (mlir::Type::isF16((mlir::Type *)&v514))
        {
          if (v53 < 1)
            goto LABEL_871;
          goto LABEL_488;
        }
        if (mlir::Type::isF32((mlir::Type *)&v514))
        {
          if (v53 < 1)
            goto LABEL_871;
          if ((unint64_t)v53 >= 0x10)
          {
            v210 = v53 & 0x7FFFFFFFFFFFFFF0;
            v319 = (float32x4_t *)(MutableRawData + 32);
            v320 = (int16x8_t *)(v46 + 8);
            v321 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v322 = v319[-2];
              v323 = v319[-1];
              v324 = *v319;
              v325 = v319[1];
              v319 += 4;
              v320[-1] = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(v322), (int16x8_t)vcvtq_u32_f32(v323));
              *v320 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(v324), (int16x8_t)vcvtq_u32_f32(v325));
              v320 += 2;
              v321 -= 16;
            }
            while (v321);
            if (v53 == v210)
              goto LABEL_871;
          }
          else
          {
            v210 = 0;
          }
          v326 = v53 - v210;
          v327 = &v46[v210];
          v328 = (float *)&MutableRawData[4 * v210];
          do
          {
            v329 = *v328++;
            *v327++ = (int)v329;
            --v326;
          }
          while (v326);
          goto LABEL_871;
        }
        if (mlir::Type::isF64((mlir::Type *)&v514))
        {
          if (v53 < 1)
            goto LABEL_871;
          if ((unint64_t)v53 >= 0x10)
          {
            v267 = v53 & 0x7FFFFFFFFFFFFFF0;
            v358 = (float64x2_t *)(MutableRawData + 64);
            v359 = (int8x16_t *)(v46 + 8);
            v360 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v361 = v358[3];
              v362 = vmovn_s64(vcvtq_s64_f64(v358[-1]));
              v363 = vmovn_s64(vcvtq_s64_f64(v358[-2]));
              v364 = vmovn_s64(vcvtq_s64_f64(v358[-3]));
              v365 = vmovn_s64(vcvtq_s64_f64(v358[-4]));
              v366 = vqtbl4q_s8(*(int8x16x4_t *)(&v263 - 1), (int8x16_t)xmmword_18125CFE0);
              v367 = vmovn_s64(vcvtq_s64_f64(v361));
              v368 = vmovn_s64(vcvtq_s64_f64(v358[2]));
              v369 = vmovn_s64(vcvtq_s64_f64(v358[1]));
              *(int32x2_t *)&v361.f64[0] = vmovn_s64(vcvtq_s64_f64(*v358));
              v359[-1] = v366;
              *v359 = vqtbl4q_s8(*(int8x16x4_t *)(&v263 - 3), (int8x16_t)xmmword_18125CFE0);
              v358 += 8;
              v359 += 2;
              v360 -= 16;
            }
            while (v360);
            if (v53 == v267)
              goto LABEL_871;
          }
          else
          {
            v267 = 0;
          }
          v370 = v53 - v267;
          v371 = &v46[v267];
          v372 = (double *)&MutableRawData[8 * v267];
          do
          {
            v373 = *v372++;
            *v371++ = (int)v373;
            --v370;
          }
          while (v370);
          goto LABEL_871;
        }
        if (!mlir::Type::isBF16((mlir::Type *)&v514))
        {
LABEL_675:
          if (mlir::Type::isInteger((mlir::Type *)&v514, 1))
          {
            llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)&v521, v53);
            mlir::detail::unpackBooleanData(MutableRawData, v6, (uint64_t)v521, v522);
            v212 = (char *)v521;
            if (v53 < 1)
              goto LABEL_846;
            if ((v49 & 1) != 0)
            {
              v306 = *(unsigned __int8 *)v521;
              if ((unint64_t)v53 >= 0x10)
              {
                v307 = v53 & 0x7FFFFFFFFFFFFFF0;
                v432 = vdupq_n_s16(v306);
                v433 = (int16x8_t *)(v46 + 8);
                v434 = v53 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  v433[-1] = v432;
                  *v433 = v432;
                  v433 += 2;
                  v434 -= 16;
                }
                while (v434);
                if (v53 == v307)
                  goto LABEL_846;
              }
              else
              {
                v307 = 0;
              }
              v435 = v53 - v307;
              v436 = &v46[v307];
              do
              {
                *v436++ = v306;
                --v435;
              }
              while (v435);
              goto LABEL_846;
            }
            if ((unint64_t)v53 < 8)
            {
              v411 = 0;
              goto LABEL_834;
            }
            if ((unint64_t)v53 >= 0x20)
            {
              v411 = v53 & 0x7FFFFFFFFFFFFFE0;
              v463 = (uint8x8_t *)((char *)v521 + 16);
              v464 = (uint16x8_t *)(v46 + 16);
              v465 = v53 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v466 = *(uint8x16_t *)v463[-2].i8;
                v467 = vmovl_u8(*v463);
                v468 = vmovl_high_u8(*(uint8x16_t *)v463->i8);
                v464[-2] = vmovl_u8(*(uint8x8_t *)v466.i8);
                v464[-1] = vmovl_high_u8(v466);
                *v464 = v467;
                v464[1] = v468;
                v464 += 4;
                v463 += 4;
                v465 -= 32;
              }
              while (v465);
              if (v53 == v411)
                goto LABEL_846;
              if ((v53 & 0x18) == 0)
              {
LABEL_834:
                v474 = v53 - v411;
                v475 = &v46[v411];
                v476 = &v212[v411];
                do
                {
                  v477 = *v476++;
                  *v475++ = v477;
                  --v474;
                }
                while (v474);
                goto LABEL_846;
              }
            }
            else
            {
              v411 = 0;
            }
            v469 = v411;
            v411 = v53 & 0xFFFFFFFFFFFFFFF8;
            v470 = (uint8x8_t *)&v212[v469];
            v471 = (uint16x8_t *)&v46[v469];
            v472 = v469 - (v53 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v473 = *v470++;
              *v471++ = vmovl_u8(v473);
              v472 += 8;
            }
            while (v472);
            if (v53 == v411)
              goto LABEL_846;
            goto LABEL_834;
          }
LABEL_712:
          mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v514);
          v333 = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v514);
          mlir::detail::unpackQuantizedData<unsigned short>(MutableRawData, v6, (uint64_t)v46, v53, v333);
          goto LABEL_871;
        }
        if (v53 < 1)
          goto LABEL_871;
LABEL_664:
        for (i7 = 0; i7 != v53; ++i7)
        {
          if (v49)
            v300 = 0;
          else
            v300 = i7;
          v46[i7] = (int)COERCE_FLOAT(*(unsigned __int16 *)&MutableRawData[2 * v300] << 16);
        }
        goto LABEL_871;
      }
      if (*(_UNKNOWN **)(*(_QWORD *)MutableRawData + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
        v73 = MutableRawData;
      else
        v73 = 0;
      v521 = v73;
      if (v73)
      {
        MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v521);
        v6 = v74;
        if ((v49 & 1) == 0)
          goto LABEL_137;
      }
      else if ((v49 & 1) == 0)
      {
        goto LABEL_137;
      }
LABEL_59:
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 8))
      {
        v53 = 1;
LABEL_139:
        for (i8 = 0; i8 != v53; ++i8)
        {
          if (v49)
            v76 = 0;
          else
            v76 = i8;
          v46[i8] = MutableRawData[v76];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 8))
      {
        v53 = 1;
LABEL_173:
        for (i9 = 0; i9 != v53; ++i9)
        {
          if (v49)
            v82 = 0;
          else
            v82 = i9;
          v46[i9] = (char)MutableRawData[v82];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 16))
      {
        v53 = 1;
LABEL_222:
        for (i10 = 0; i10 != v53; ++i10)
        {
          if (v49)
            v92 = 0;
          else
            v92 = i10;
          v46[i10] = *(_WORD *)&MutableRawData[2 * v92];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 16))
      {
        v53 = 1;
LABEL_266:
        for (i11 = 0; i11 != v53; ++i11)
        {
          if (v49)
            v100 = 0;
          else
            v100 = i11;
          v46[i11] = *(_WORD *)&MutableRawData[2 * v100];
        }
        goto LABEL_871;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 32))
      {
        v53 = 1;
LABEL_311:
        if ((unint64_t)v53 >= 2)
        {
          v125 = 0;
          v110 = v53 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            if (v49)
              v126 = 0;
            else
              v126 = v125;
            if (v49)
              v127 = 0;
            else
              v127 = v125 + 1;
            v128 = *(_DWORD *)&MutableRawData[4 * v127];
            v129 = &v46[v125];
            *v129 = *(_DWORD *)&MutableRawData[4 * v126];
            v129[1] = v128;
            v125 += 2;
          }
          while (v125 != v110);
          goto LABEL_852;
        }
        v110 = 0;
        do
        {
          if (v49)
            v493 = 0;
          else
            v493 = v110;
          v46[v110++] = *(_DWORD *)&MutableRawData[4 * v493];
LABEL_852:
          ;
        }
        while (v53 != v110);
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 32))
      {
        v53 = 1;
LABEL_350:
        if ((unint64_t)v53 >= 2)
        {
          v145 = 0;
          v123 = v53 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            if (v49)
              v146 = 0;
            else
              v146 = v145;
            if (v49)
              v147 = 0;
            else
              v147 = v145 + 1;
            v148 = *(_DWORD *)&MutableRawData[4 * v147];
            v149 = &v46[v145];
            *v149 = *(_DWORD *)&MutableRawData[4 * v146];
            v149[1] = v148;
            v145 += 2;
          }
          while (v145 != v123);
          goto LABEL_858;
        }
        v123 = 0;
        do
        {
          if (v49)
            v494 = 0;
          else
            v494 = v123;
          v46[v123++] = *(_DWORD *)&MutableRawData[4 * v494];
LABEL_858:
          ;
        }
        while (v53 != v123);
        goto LABEL_871;
      }
      if (!mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 64) && !mlir::Type::isInteger((mlir::Type *)&v514, 64))
      {
        if (mlir::Type::isF16((mlir::Type *)&v514))
        {
          v53 = 1;
LABEL_488:
          if ((unint64_t)v53 >= 2)
          {
            v216 = 0;
            v182 = v53 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              if (v49)
                v217 = 0;
              else
                v217 = v216;
              if (v49)
                v218 = 0;
              else
                v218 = v216 + 1;
              _H0 = *(_WORD *)&MutableRawData[2 * v217];
              _H1 = *(_WORD *)&MutableRawData[2 * v218];
              __asm { FCVT            S0, H0 }
              v222 = (int)_S0;
              __asm { FCVT            S0, H1 }
              v224 = &v46[v216];
              *v224 = v222;
              v224[1] = (int)_S0;
              v216 += 2;
            }
            while (v216 != v182);
            goto LABEL_886;
          }
          v182 = 0;
          do
          {
            if (v49)
              v504 = 0;
            else
              v504 = v182;
            _H0 = *(_WORD *)&MutableRawData[2 * v504];
            __asm { FCVT            S0, H0 }
            v46[v182++] = (int)_S0;
LABEL_886:
            ;
          }
          while (v53 != v182);
          goto LABEL_871;
        }
        if (!mlir::Type::isF32((mlir::Type *)&v514))
        {
          if (!mlir::Type::isF64((mlir::Type *)&v514))
          {
            v53 = 1;
            if (!mlir::Type::isBF16((mlir::Type *)&v514))
              goto LABEL_675;
            goto LABEL_664;
          }
LABEL_661:
          *v46 = (int)*(double *)MutableRawData;
          goto LABEL_871;
        }
LABEL_604:
        *v46 = (int)*(float *)MutableRawData;
        goto LABEL_871;
      }
LABEL_424:
      *v46 = *(_QWORD *)MutableRawData;
      goto LABEL_871;
    }
    v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
    if (!mlir::Type::isInteger((mlir::Type *)&v521, 16))
    {
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v521, 32))
      {
        mlir::copyElementsAttrData<unsigned int>(v513, *((uint64_t *)&v513 + 1), (int32x4_t *)v518);
        goto LABEL_871;
      }
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isInteger((mlir::Type *)&v521, 32))
      {
        mlir::copyElementsAttrData<int>(v513, *((uint64_t *)&v513 + 1), (int32x4_t *)v518);
        goto LABEL_871;
      }
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v521, 64))
      {
        mlir::copyElementsAttrData<unsigned long long>(v513, *((uint64_t *)&v513 + 1), v518);
        goto LABEL_871;
      }
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isInteger((mlir::Type *)&v521, 64))
      {
        mlir::copyElementsAttrData<long long>(v513, *((uint64_t *)&v513 + 1), (int64x2_t *)v518);
        goto LABEL_871;
      }
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isF16((mlir::Type *)&v521))
      {
        mlir::copyElementsAttrData<half>(v513, *((uint64_t *)&v513 + 1), (float16x8_t *)v518);
        goto LABEL_871;
      }
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isBF16((mlir::Type *)&v521))
      {
        mlir::copyElementsAttrData<__emulated_bf16>(v513, *((uint64_t *)&v513 + 1), (uint64_t)v518);
        goto LABEL_871;
      }
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isF32((mlir::Type *)&v521))
      {
        mlir::copyElementsAttrData<float>(v513, *((uint64_t *)&v513 + 1), v518);
        goto LABEL_871;
      }
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isF64((mlir::Type *)&v521))
      {
        mlir::copyElementsAttrData<double>(v513, *((uint64_t *)&v513 + 1), v518);
        goto LABEL_871;
      }
      v521 = (void *)mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (mlir::Type::isInteger((mlir::Type *)&v521, 1))
      {
        if ((mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v513) & 1) != 0)
        {
          v171 = 1;
        }
        else
        {
          Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v510);
          v171 = mlir::ShapedType::getNumElements(Value, v260);
        }
        llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)&v521, v171);
        mlir::copyElementsAttrData<BOOL>(v513, *((uint64_t *)&v513 + 1), (unint64_t)v521);
        mlir::detail::packBooleanData(v521, v522, v518, v519);
        v212 = (char *)v521;
        if (v521 == v523)
          goto LABEL_871;
LABEL_847:
        free(v212);
        goto LABEL_871;
      }
      v201 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v510);
      if (*(_UNKNOWN **)(*(_QWORD *)v201 + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
        v202 = (void *)v201;
      else
        v202 = 0;
      v521 = v202;
      if (v202)
      {
        *(_QWORD *)&v517 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v521);
        if (mlir::Type::isF32((mlir::Type *)&v517))
        {
          mlir::copyElementsAttrData<complex_support::complex_fp<float,(void *)0>>(v513, *((uint64_t *)&v513 + 1), (unint64_t)v518);
        }
        else
        {
          *(_QWORD *)&v517 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v521);
          mlir::Type::isF16((mlir::Type *)&v517);
          mlir::copyElementsAttrData<complex_support::complex_fp<half,(void *)0>>(v513, *((uint64_t *)&v513 + 1), (unint64_t)v518);
        }
      }
LABEL_871:
      v497 = v510;
      if (a5)
      {
        if (v510)
        {
          v498 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v510 + 8);
          RawElementsAttr = (_QWORD *)mlir::DenseElementsAttr::getFromRawBuffer(v497, v498, v518, v519, v499, v500, v501);
          if (RawElementsAttr)
            goto LABEL_874;
        }
        else
        {
          RawElementsAttr = (_QWORD *)mlir::DenseElementsAttr::getFromRawBuffer(0, 0, v518, v519, v36, v37, v38);
          if (RawElementsAttr)
          {
LABEL_874:
            mlir::detail::InterfaceMap::lookup<mlir::ElementsAttr>(*RawElementsAttr + 8);
            v502 = v518;
            if (v518 == v520)
              return RawElementsAttr;
            goto LABEL_877;
          }
        }
        v502 = v518;
        if (v518 == v520)
          return RawElementsAttr;
      }
      else
      {
        RawElementsAttr = mlir::createRawElementsAttr(v510, v518, (const void *)v519);
        v502 = v518;
        if (v518 == v520)
          return RawElementsAttr;
      }
LABEL_877:
      free(v502);
      return RawElementsAttr;
    }
    v46 = v518;
    v517 = v513;
    v58 = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v517);
    v59 = v58;
    if (v58)
      v58 = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v58 + 8);
    v515 = v59;
    v516 = v58;
    v514 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v515);
    v60 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v517);
    MutableRawData = (unsigned __int8 *)v517;
    if (mlir::DenseElementsAttr::classof(v517))
      v61 = MutableRawData;
    else
      v61 = 0;
    v521 = v61;
    if (v61)
    {
      MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v521);
      v6 = v62;
      if ((v60 & 1) != 0)
        goto LABEL_85;
LABEL_184:
      v53 = mlir::ElementsAttr::getNumElements(v517, *((uint64_t *)&v517 + 1));
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 8))
      {
        if (v53 < 1)
          goto LABEL_871;
        goto LABEL_186;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 8))
      {
        if (v53 < 1)
          goto LABEL_871;
        goto LABEL_230;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 16))
      {
        if (v53 < 1)
          goto LABEL_871;
        goto LABEL_274;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 16))
      {
        if (v53 < 1)
          goto LABEL_871;
        goto LABEL_315;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 32))
      {
        if (v53 < 1)
          goto LABEL_871;
        goto LABEL_354;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 32))
      {
        if (v53 < 1)
          goto LABEL_871;
        goto LABEL_396;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 64))
      {
        if (v53 < 1)
          goto LABEL_871;
        if ((unint64_t)v53 >= 0x10)
        {
          v165 = v53 & 0x7FFFFFFFFFFFFFF0;
          v251 = (int32x4_t *)(MutableRawData + 64);
          v252 = (int16x8_t *)(v46 + 8);
          v253 = v53 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v254 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v251, v251[1]), (int16x8_t)vuzp1q_s32(v251[2], v251[3]));
            v252[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v251[-4], v251[-3]), (int16x8_t)vuzp1q_s32(v251[-2], v251[-1]));
            *v252 = v254;
            v251 += 8;
            v252 += 2;
            v253 -= 16;
          }
          while (v253);
          if (v53 == v165)
            goto LABEL_871;
        }
        else
        {
          v165 = 0;
        }
        v255 = v53 - v165;
        v256 = &v46[v165];
        v257 = &MutableRawData[8 * v165];
        do
        {
          v258 = *(_QWORD *)v257;
          v257 += 8;
          *v256++ = v258;
          --v255;
        }
        while (v255);
        goto LABEL_871;
      }
      if (mlir::Type::isInteger((mlir::Type *)&v514, 64))
      {
        if (v53 < 1)
          goto LABEL_871;
        if ((unint64_t)v53 >= 0x10)
        {
          v183 = v53 & 0x7FFFFFFFFFFFFFF0;
          v291 = (int32x4_t *)(MutableRawData + 64);
          v292 = (int16x8_t *)(v46 + 8);
          v293 = v53 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v294 = vuzp1q_s16((int16x8_t)vuzp1q_s32(*v291, v291[1]), (int16x8_t)vuzp1q_s32(v291[2], v291[3]));
            v292[-1] = vuzp1q_s16((int16x8_t)vuzp1q_s32(v291[-4], v291[-3]), (int16x8_t)vuzp1q_s32(v291[-2], v291[-1]));
            *v292 = v294;
            v291 += 8;
            v292 += 2;
            v293 -= 16;
          }
          while (v293);
          if (v53 == v183)
            goto LABEL_871;
        }
        else
        {
          v183 = 0;
        }
        v295 = v53 - v183;
        v296 = &v46[v183];
        v297 = &MutableRawData[8 * v183];
        do
        {
          v298 = *(_QWORD *)v297;
          v297 += 8;
          *v296++ = v298;
          --v295;
        }
        while (v295);
        goto LABEL_871;
      }
      if (mlir::Type::isF16((mlir::Type *)&v514))
      {
        if (v53 < 1)
          goto LABEL_871;
        goto LABEL_549;
      }
      if (mlir::Type::isF32((mlir::Type *)&v514))
      {
        if (v53 < 1)
          goto LABEL_871;
        if ((unint64_t)v53 >= 0x10)
        {
          v268 = v53 & 0x7FFFFFFFFFFFFFF0;
          v374 = (float32x4_t *)(MutableRawData + 32);
          v375 = (int16x8_t *)(v46 + 8);
          v376 = v53 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v377 = v374[-2];
            v378 = v374[-1];
            v379 = *v374;
            v380 = v374[1];
            v374 += 4;
            v375[-1] = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v377), (int16x8_t)vcvtq_s32_f32(v378));
            *v375 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v379), (int16x8_t)vcvtq_s32_f32(v380));
            v375 += 2;
            v376 -= 16;
          }
          while (v376);
          if (v53 == v268)
            goto LABEL_871;
        }
        else
        {
          v268 = 0;
        }
        v381 = v53 - v268;
        v382 = &v46[v268];
        v383 = (float *)&MutableRawData[4 * v268];
        do
        {
          v384 = *v383++;
          *v382++ = (int)v384;
          --v381;
        }
        while (v381);
        goto LABEL_871;
      }
      if (mlir::Type::isF64((mlir::Type *)&v514))
      {
        if (v53 < 1)
          goto LABEL_871;
        if ((unint64_t)v53 >= 0x10)
        {
          v305 = v53 & 0x7FFFFFFFFFFFFFF0;
          v395 = (float64x2_t *)(MutableRawData + 64);
          v396 = (int8x16_t *)(v46 + 8);
          v397 = v53 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v398 = v395[3];
            v399 = vmovn_s64(vcvtq_s64_f64(v395[-1]));
            v400 = vmovn_s64(vcvtq_s64_f64(v395[-2]));
            v401 = vmovn_s64(vcvtq_s64_f64(v395[-3]));
            v402 = vmovn_s64(vcvtq_s64_f64(v395[-4]));
            v403 = vqtbl4q_s8(*(int8x16x4_t *)(&v301 - 1), (int8x16_t)xmmword_18125CFE0);
            v404 = vmovn_s64(vcvtq_s64_f64(v398));
            v405 = vmovn_s64(vcvtq_s64_f64(v395[2]));
            v406 = vmovn_s64(vcvtq_s64_f64(v395[1]));
            *(int32x2_t *)&v398.f64[0] = vmovn_s64(vcvtq_s64_f64(*v395));
            v396[-1] = v403;
            *v396 = vqtbl4q_s8(*(int8x16x4_t *)(&v301 - 3), (int8x16_t)xmmword_18125CFE0);
            v395 += 8;
            v396 += 2;
            v397 -= 16;
          }
          while (v397);
          if (v53 == v305)
            goto LABEL_871;
        }
        else
        {
          v305 = 0;
        }
        v407 = v53 - v305;
        v408 = &v46[v305];
        v409 = (double *)&MutableRawData[8 * v305];
        do
        {
          v410 = *v409++;
          *v408++ = (int)v410;
          --v407;
        }
        while (v407);
        goto LABEL_871;
      }
      if (!mlir::Type::isBF16((mlir::Type *)&v514))
      {
LABEL_713:
        if (!mlir::Type::isInteger((mlir::Type *)&v514, 1))
          goto LABEL_712;
        llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)&v521, v53);
        mlir::detail::unpackBooleanData(MutableRawData, v6, (uint64_t)v521, v522);
        v212 = (char *)v521;
        if (v53 < 1)
          goto LABEL_846;
        if ((v60 & 1) != 0)
        {
          v334 = *(unsigned __int8 *)v521;
          if ((unint64_t)v53 >= 0x10)
          {
            v335 = v53 & 0x7FFFFFFFFFFFFFF0;
            v458 = vdupq_n_s16(v334);
            v459 = (int16x8_t *)(v46 + 8);
            v460 = v53 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v459[-1] = v458;
              *v459 = v458;
              v459 += 2;
              v460 -= 16;
            }
            while (v460);
            if (v53 == v335)
              goto LABEL_846;
          }
          else
          {
            v335 = 0;
          }
          v461 = v53 - v335;
          v462 = &v46[v335];
          do
          {
            *v462++ = v334;
            --v461;
          }
          while (v461);
          goto LABEL_846;
        }
        if ((unint64_t)v53 < 8)
        {
          v437 = 0;
          goto LABEL_844;
        }
        if ((unint64_t)v53 >= 0x20)
        {
          v437 = v53 & 0x7FFFFFFFFFFFFFE0;
          v478 = (uint8x8_t *)((char *)v521 + 16);
          v479 = (uint16x8_t *)(v46 + 16);
          v480 = v53 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v481 = *(uint8x16_t *)v478[-2].i8;
            v482 = vmovl_u8(*v478);
            v483 = vmovl_high_u8(*(uint8x16_t *)v478->i8);
            v479[-2] = vmovl_u8(*(uint8x8_t *)v481.i8);
            v479[-1] = vmovl_high_u8(v481);
            *v479 = v482;
            v479[1] = v483;
            v479 += 4;
            v478 += 4;
            v480 -= 32;
          }
          while (v480);
          if (v53 == v437)
            goto LABEL_846;
          if ((v53 & 0x18) == 0)
          {
LABEL_844:
            v489 = v53 - v437;
            v490 = &v46[v437];
            v491 = &v212[v437];
            do
            {
              v492 = *v491++;
              *v490++ = v492;
              --v489;
            }
            while (v489);
            goto LABEL_846;
          }
        }
        else
        {
          v437 = 0;
        }
        v484 = v437;
        v437 = v53 & 0xFFFFFFFFFFFFFFF8;
        v485 = (uint8x8_t *)&v212[v484];
        v486 = (uint16x8_t *)&v46[v484];
        v487 = v484 - (v53 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v488 = *v485++;
          *v486++ = vmovl_u8(v488);
          v487 += 8;
        }
        while (v487);
        if (v53 == v437)
          goto LABEL_846;
        goto LABEL_844;
      }
      if (v53 < 1)
        goto LABEL_871;
LABEL_706:
      for (i12 = 0; i12 != v53; ++i12)
      {
        if (v60)
          v332 = 0;
        else
          v332 = i12;
        v46[i12] = (int)COERCE_FLOAT(*(unsigned __int16 *)&MutableRawData[2 * v332] << 16);
      }
      goto LABEL_871;
    }
    if (*(_UNKNOWN **)(*(_QWORD *)MutableRawData + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v83 = MutableRawData;
    else
      v83 = 0;
    v521 = v83;
    if (v83)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)&v521);
      v6 = v84;
      if ((v60 & 1) == 0)
        goto LABEL_184;
    }
    else if ((v60 & 1) == 0)
    {
      goto LABEL_184;
    }
LABEL_85:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 8))
    {
      v53 = 1;
LABEL_186:
      for (i13 = 0; i13 != v53; ++i13)
      {
        if (v60)
          v86 = 0;
        else
          v86 = i13;
        v46[i13] = MutableRawData[v86];
      }
      goto LABEL_871;
    }
    if (mlir::Type::isInteger((mlir::Type *)&v514, 8))
    {
      v53 = 1;
LABEL_230:
      for (i14 = 0; i14 != v53; ++i14)
      {
        if (v60)
          v94 = 0;
        else
          v94 = i14;
        v46[i14] = (char)MutableRawData[v94];
      }
      goto LABEL_871;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 16))
    {
      v53 = 1;
LABEL_274:
      for (i15 = 0; i15 != v53; ++i15)
      {
        if (v60)
          v102 = 0;
        else
          v102 = i15;
        v46[i15] = *(_WORD *)&MutableRawData[2 * v102];
      }
      goto LABEL_871;
    }
    if (mlir::Type::isInteger((mlir::Type *)&v514, 16))
    {
      v53 = 1;
LABEL_315:
      for (i16 = 0; i16 != v53; ++i16)
      {
        if (v60)
          v112 = 0;
        else
          v112 = i16;
        v46[i16] = *(_WORD *)&MutableRawData[2 * v112];
      }
      goto LABEL_871;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 32))
    {
      v53 = 1;
LABEL_354:
      if ((unint64_t)v53 >= 2)
      {
        v150 = 0;
        v124 = v53 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v60)
            v151 = 0;
          else
            v151 = v150;
          if (v60)
            v152 = 0;
          else
            v152 = v150 + 1;
          v153 = *(_DWORD *)&MutableRawData[4 * v152];
          v154 = &v46[v150];
          *v154 = *(_DWORD *)&MutableRawData[4 * v151];
          v154[1] = v153;
          v150 += 2;
        }
        while (v150 != v124);
        goto LABEL_864;
      }
      v124 = 0;
      do
      {
        if (v60)
          v495 = 0;
        else
          v495 = v124;
        v46[v124++] = *(_DWORD *)&MutableRawData[4 * v495];
LABEL_864:
        ;
      }
      while (v53 != v124);
      goto LABEL_871;
    }
    if (mlir::Type::isInteger((mlir::Type *)&v514, 32))
    {
      v53 = 1;
LABEL_396:
      if ((unint64_t)v53 >= 2)
      {
        v166 = 0;
        v144 = v53 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v60)
            v167 = 0;
          else
            v167 = v166;
          if (v60)
            v168 = 0;
          else
            v168 = v166 + 1;
          v169 = *(_DWORD *)&MutableRawData[4 * v168];
          v170 = &v46[v166];
          *v170 = *(_DWORD *)&MutableRawData[4 * v167];
          v170[1] = v169;
          v166 += 2;
        }
        while (v166 != v144);
        goto LABEL_870;
      }
      v144 = 0;
      do
      {
        if (v60)
          v496 = 0;
        else
          v496 = v144;
        v46[v144++] = *(_DWORD *)&MutableRawData[4 * v496];
LABEL_870:
        ;
      }
      while (v53 != v144);
      goto LABEL_871;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&v514, 64) || mlir::Type::isInteger((mlir::Type *)&v514, 64))
      goto LABEL_424;
    if (mlir::Type::isF16((mlir::Type *)&v514))
    {
      v53 = 1;
LABEL_549:
      if ((unint64_t)v53 >= 2)
      {
        v273 = 0;
        v211 = v53 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v60)
            v274 = 0;
          else
            v274 = v273;
          if (v60)
            v275 = 0;
          else
            v275 = v273 + 1;
          _H0 = *(_WORD *)&MutableRawData[2 * v274];
          _H1 = *(_WORD *)&MutableRawData[2 * v275];
          __asm { FCVT            S0, H0 }
          v279 = (int)_S0;
          __asm { FCVT            S0, H1 }
          v281 = &v46[v273];
          *v281 = v279;
          v281[1] = (int)_S0;
          v273 += 2;
        }
        while (v273 != v211);
        goto LABEL_892;
      }
      v211 = 0;
      do
      {
        if (v60)
          v507 = 0;
        else
          v507 = v211;
        _H0 = *(_WORD *)&MutableRawData[2 * v507];
        __asm { FCVT            S0, H0 }
        v46[v211++] = (int)_S0;
LABEL_892:
        ;
      }
      while (v53 != v211);
      goto LABEL_871;
    }
    if (mlir::Type::isF32((mlir::Type *)&v514))
      goto LABEL_604;
    if (mlir::Type::isF64((mlir::Type *)&v514))
      goto LABEL_661;
    v53 = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&v514))
      goto LABEL_713;
    goto LABEL_706;
  }
  *(_QWORD *)&v513 = mlir::convertElementsAttr(v513, *((uint64_t *)&v513 + 1), a5);
  *((_QWORD *)&v513 + 1) = v22;
  v23 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v511);
  if (v15 == v24 && !memcmp(v13, v23, 8 * v15))
    return (_QWORD *)v513;
  v25 = v513;
  if (v510)
    v26 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v510 + 8);
  else
    v26 = 0;
  return mlir::reshapeElementsAttr(v25, *((uint64_t *)&v25 + 1), (uint64_t)v510, v26);
}

float mlir::copyElementsAttrData<unsigned int>(uint64_t a1, uint64_t a2, int32x4_t *a3)
{
  unsigned __int8 *RawStringData;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int64_t NumElements;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int32 v25;
  __int32 *v26;
  uint64_t k;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int32 v32;
  __int32 *v33;
  uint64_t m;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int32x4_t *v39;
  int32x4_t *v40;
  unint64_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  unsigned __int8 *v46;
  int64_t v47;
  __int32 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v61;
  unsigned int *v62;
  int32x4_t *v63;
  int32x4_t *v64;
  unint64_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  unsigned __int8 *v70;
  int64_t v71;
  __int32 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int8x16_t v76;
  char *v77;
  unsigned int v78;
  uint64_t v79;
  float32x4_t *v80;
  uint32x4_t *v81;
  unint64_t v82;
  uint32x4_t v83;
  uint64_t v84;
  float *v85;
  int64_t v86;
  __int32 *v87;
  float v88;
  unsigned int IntOrFloatBitWidth;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  float64x2_t *v94;
  int32x4_t *v95;
  unint64_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  double *v101;
  int64_t v102;
  __int32 *v103;
  double v104;
  unint64_t v105;
  int32x4_t *v106;
  unint64_t v107;
  int64_t v108;
  unsigned int *v109;
  int8x16_t *v110;
  int8x16_t *v111;
  unint64_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  int8x16_t *v119;
  unint64_t v120;
  uint64_t v121;
  int8x16_t v122;
  char *v123;
  unint64_t v124;
  __int32 *v125;
  __int32 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v131;
  uint64_t OperandRange;
  _QWORD v134[2];
  uint64_t v135;
  uint64_t v136;
  void *v137[3];
  _QWORD v138[6];

  v138[5] = *MEMORY[0x1E0C80C00];
  v135 = a1;
  v136 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v135);
  v7 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v134[0] = v7;
  v134[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v134);
  v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v135);
  v9 = v135;
  if (mlir::DenseElementsAttr::classof(v135))
    v10 = (void *)v9;
  else
    v10 = 0;
  v137[0] = v10;
  if (v10)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v137);
    v4 = v11;
    if ((v8 & 1) == 0)
    {
LABEL_19:
      NumElements = mlir::ElementsAttr::getNumElements(v135, v136);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_21;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_29;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_39;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_45;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_60;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_79;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v36 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v39 = (int32x4_t *)(RawStringData + 32);
          v40 = a3 + 1;
          v41 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v43 = v39[-2];
            v42 = v39[-1];
            v45 = *v39;
            v44 = v39[1];
            v39 += 4;
            _Q0 = vuzp1q_s32(v43, v42);
            v40[-1] = _Q0;
            *v40 = vuzp1q_s32(v45, v44);
            v40 += 2;
            v41 -= 8;
          }
          while (v41);
          if (NumElements == v36)
            return *(float *)_Q0.i32;
        }
        else
        {
          v36 = 0;
        }
        v46 = &RawStringData[8 * v36];
        v47 = NumElements - v36;
        v48 = &a3->i32[v36];
        do
        {
          v49 = *(_QWORD *)v46;
          v46 += 8;
          *v48++ = v49;
          --v47;
        }
        while (v47);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v37 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v63 = (int32x4_t *)(RawStringData + 32);
          v64 = a3 + 1;
          v65 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v67 = v63[-2];
            v66 = v63[-1];
            v69 = *v63;
            v68 = v63[1];
            v63 += 4;
            _Q0 = vuzp1q_s32(v67, v66);
            v64[-1] = _Q0;
            *v64 = vuzp1q_s32(v69, v68);
            v64 += 2;
            v65 -= 8;
          }
          while (v65);
          if (NumElements == v37)
            return *(float *)_Q0.i32;
        }
        else
        {
          v37 = 0;
        }
        v70 = &RawStringData[8 * v37];
        v71 = NumElements - v37;
        v72 = &a3->i32[v37];
        do
        {
          v73 = *(_QWORD *)v70;
          v70 += 8;
          *v72++ = v73;
          --v71;
        }
        while (v71);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_100;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v50 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v80 = (float32x4_t *)(RawStringData + 16);
          v81 = (uint32x4_t *)&a3[1];
          v82 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            _Q0 = (int32x4_t)vcvtq_u32_f32(v80[-1]);
            v83 = vcvtq_u32_f32(*v80);
            v81[-1] = (uint32x4_t)_Q0;
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 8;
          }
          while (v82);
          if (NumElements == v50)
            return *(float *)_Q0.i32;
        }
        else
        {
          v50 = 0;
        }
        v84 = v50;
        v85 = (float *)&RawStringData[4 * v50];
        v86 = NumElements - v50;
        v87 = &a3->i32[v84];
        do
        {
          v88 = *v85++;
          *(float *)_Q0.i32 = v88;
          *v87++ = v88;
          --v86;
        }
        while (v86);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v74 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v94 = (float64x2_t *)(RawStringData + 32);
          v95 = a3 + 1;
          v96 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v97 = v94[-2];
            v98 = v94[-1];
            v99 = *v94;
            v100 = v94[1];
            v94 += 4;
            _Q0 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v97), (int32x4_t)vcvtq_u64_f64(v98));
            v95[-1] = _Q0;
            *v95 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v99), (int32x4_t)vcvtq_u64_f64(v100));
            v95 += 2;
            v96 -= 8;
          }
          while (v96);
          if (NumElements == v74)
            return *(float *)_Q0.i32;
        }
        else
        {
          v74 = 0;
        }
        v101 = (double *)&RawStringData[8 * v74];
        v102 = NumElements - v74;
        v103 = &a3->i32[v74];
        do
        {
          v104 = *v101++;
          _Q0.i32[0] = LODWORD(v104);
          *v103++ = v104;
          --v102;
        }
        while (v102);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_139;
      }
LABEL_141:
      if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
      {
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        mlir::detail::unpackQuantizedData<unsigned int>(RawStringData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
        return *(float *)_Q0.i32;
      }
      llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v137, NumElements);
      mlir::detail::unpackBooleanData(RawStringData, v4, (uint64_t)v137[0], (unint64_t)v137[1]);
      v77 = (char *)v137[0];
      if (NumElements < 1)
        goto LABEL_187;
      if ((v8 & 1) != 0)
      {
        v78 = *(unsigned __int8 *)v137[0];
        if ((unint64_t)NumElements < 8)
        {
          v79 = 0;
LABEL_173:
          v108 = NumElements - v79;
          v109 = (unsigned int *)a3 + v79;
          do
          {
            *v109++ = v78;
            --v108;
          }
          while (v108);
          goto LABEL_187;
        }
        v79 = NumElements & 0x7FFFFFFFFFFFFFF8;
        _Q0 = vdupq_n_s32(v78);
        v106 = a3 + 1;
        v107 = NumElements & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v106[-1] = _Q0;
          *v106 = _Q0;
          v106 += 2;
          v107 -= 8;
        }
        while (v107);
        if (NumElements != v79)
          goto LABEL_173;
LABEL_187:
        if (v77 != (char *)v138)
          free(v77);
        return *(float *)_Q0.i32;
      }
      if ((unint64_t)NumElements < 8)
      {
        v105 = 0;
        goto LABEL_185;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        v105 = NumElements & 0x7FFFFFFFFFFFFFE0;
        v110 = (int8x16_t *)((char *)v137[0] + 16);
        v111 = (int8x16_t *)&a3[4];
        _Q0.i32[0] = -256;
        v76.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
        v112 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v113 = v110[-1];
          v114 = *v110;
          v115 = vqtbl1q_s8(*v110, (int8x16_t)xmmword_18125D030);
          v116 = vqtbl1q_s8(*v110, (int8x16_t)xmmword_18125D040);
          v111[-2] = vqtbl1q_s8(v113, (int8x16_t)xmmword_18125D050);
          v111[-1] = vqtbl1q_s8(v113, (int8x16_t)xmmword_18125D060);
          v111[-4] = vqtbl1q_s8(v113, (int8x16_t)xmmword_18125D030);
          v111[-3] = vqtbl1q_s8(v113, (int8x16_t)xmmword_18125D040);
          v111[2] = vqtbl1q_s8(v114, (int8x16_t)xmmword_18125D050);
          v111[3] = vqtbl1q_s8(v114, (int8x16_t)xmmword_18125D060);
          *v111 = v115;
          v111[1] = v116;
          v111 += 8;
          v110 += 2;
          v112 -= 32;
        }
        while (v112);
        if (NumElements == v105)
          goto LABEL_187;
        if ((NumElements & 0x18) == 0)
        {
LABEL_185:
          v123 = &v77[v105];
          v124 = NumElements - v105;
          v125 = &a3->i32[v105];
          do
          {
            v126 = *v123++;
            *v125++ = v126;
            --v124;
          }
          while (v124);
          goto LABEL_187;
        }
      }
      else
      {
        v105 = 0;
      }
      v117 = v105;
      v105 = NumElements & 0xFFFFFFFFFFFFFFF8;
      v118 = (uint64_t *)&v77[v117];
      v119 = (int8x16_t *)((char *)a3 + 4 * v117);
      v120 = v117 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      _Q0.i32[0] = -256;
      do
      {
        v121 = *v118++;
        v76.i64[0] = v121;
        v122 = vqtbl1q_s8(v76, (int8x16_t)xmmword_18125D030);
        v76 = vqtbl1q_s8(v76, (int8x16_t)xmmword_18125D040);
        *v119 = v122;
        v119[1] = v76;
        v119 += 2;
        v120 += 8;
      }
      while (v120);
      if (NumElements == v105)
        goto LABEL_187;
      goto LABEL_185;
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v12 = (void *)v9;
    else
      v12 = 0;
    v137[0] = v12;
    if (v12)
    {
      RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v137);
      v4 = v13;
      if ((v8 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_21:
    for (i = 0; i != NumElements; ++i)
    {
      if (v8)
        v17 = 0;
      else
        v17 = i;
      a3->i32[i] = RawStringData[v17];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_29:
    for (j = 0; j != NumElements; ++j)
    {
      if (v8)
        v19 = 0;
      else
        v19 = j;
      a3->i32[j] = (char)RawStringData[v19];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    if ((unint64_t)NumElements >= 2)
    {
      v22 = 0;
      v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v23 = 0;
        else
          v23 = v22;
        if (v8)
          v24 = 0;
        else
          v24 = v22 + 1;
        v25 = *(unsigned __int16 *)&RawStringData[2 * v24];
        v26 = &a3->i32[v22];
        *v26 = *(unsigned __int16 *)&RawStringData[2 * v23];
        v26[1] = v25;
        v22 += 2;
      }
      while (v22 != v20);
      goto LABEL_189;
    }
    v20 = 0;
    do
    {
      if (v8)
        v127 = 0;
      else
        v127 = v20;
      a3->i32[v20++] = *(unsigned __int16 *)&RawStringData[2 * v127];
LABEL_189:
      ;
    }
    while (NumElements != v20);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_45:
    if ((unint64_t)NumElements >= 2)
    {
      v29 = 0;
      v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v30 = 0;
        else
          v30 = v29;
        if (v8)
          v31 = 0;
        else
          v31 = v29 + 1;
        v32 = *(__int16 *)&RawStringData[2 * v31];
        v33 = &a3->i32[v29];
        *v33 = *(__int16 *)&RawStringData[2 * v30];
        v33[1] = v32;
        v29 += 2;
      }
      while (v29 != v21);
      goto LABEL_194;
    }
    v21 = 0;
    do
    {
      if (v8)
        v128 = 0;
      else
        v128 = v21;
      a3->i32[v21++] = *(__int16 *)&RawStringData[2 * v128];
LABEL_194:
      ;
    }
    while (NumElements != v21);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_60:
    for (k = 0; k != NumElements; ++k)
    {
      if (v8)
        v28 = 0;
      else
        v28 = k;
      a3->i32[k] = *(_DWORD *)&RawStringData[4 * v28];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_79:
    for (m = 0; m != NumElements; ++m)
    {
      if (v8)
        v35 = 0;
      else
        v35 = m;
      a3->i32[m] = *(_DWORD *)&RawStringData[4 * v35];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
    || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    a3->i32[0] = *(_QWORD *)RawStringData;
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_100:
    if ((unint64_t)NumElements >= 2)
    {
      v51 = 0;
      v38 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v52 = 0;
        else
          v52 = v51;
        if (v8)
          v53 = 0;
        else
          v53 = v51 + 1;
        _H0 = *(_WORD *)&RawStringData[2 * v52];
        _H1 = *(_WORD *)&RawStringData[2 * v53];
        __asm { FCVT            S0, H0 }
        v61 = _S0;
        __asm { FCVT            S0, H1 }
        v62 = (unsigned int *)a3 + v51;
        *v62 = v61;
        v62[1] = *(float *)_Q0.i32;
        v51 += 2;
      }
      while (v51 != v38);
      goto LABEL_199;
    }
    v38 = 0;
    do
    {
      if (v8)
        v129 = 0;
      else
        v129 = v38;
      _H0 = *(_WORD *)&RawStringData[2 * v129];
      __asm { FCVT            S0, H0 }
      a3->i32[v38++] = *(float *)_Q0.i32;
LABEL_199:
      ;
    }
    while (NumElements != v38);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    _Q0.i32[0] = *(_DWORD *)RawStringData;
    a3->i32[0] = *(float *)RawStringData;
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    _Q0.i64[0] = *(_QWORD *)RawStringData;
    a3->i32[0] = *(double *)RawStringData;
    return *(float *)_Q0.i32;
  }
  NumElements = 1;
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_141;
LABEL_139:
  if ((unint64_t)NumElements >= 2)
  {
    v90 = 0;
    v75 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    v91 = (uint64_t *)a3;
    do
    {
      if (v8)
        v92 = 0;
      else
        v92 = v90;
      if (v8)
        v93 = 0;
      else
        v93 = v90 + 1;
      _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v92];
      _Q0.i16[2] = *(_WORD *)&RawStringData[2 * v93];
      *(uint32x2_t *)_Q0.i8 = vcvt_u32_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)_Q0.i8, 0x10uLL));
      *v91++ = _Q0.i64[0];
      v90 += 2;
    }
    while (v90 != v75);
    goto LABEL_204;
  }
  v75 = 0;
  do
  {
    if (v8)
      v131 = 0;
    else
      v131 = v75;
    _Q0.i32[0] = *(unsigned __int16 *)&RawStringData[2 * v131] << 16;
    a3->i32[v75++] = *(float *)_Q0.i32;
LABEL_204:
    ;
  }
  while (NumElements != v75);
  return *(float *)_Q0.i32;
}

float mlir::copyElementsAttrData<int>(uint64_t a1, uint64_t a2, int32x4_t *a3)
{
  unsigned __int8 *RawStringData;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int64_t NumElements;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int32 v25;
  __int32 *v26;
  uint64_t k;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int32 v32;
  __int32 *v33;
  uint64_t m;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int32x4_t *v39;
  int32x4_t *v40;
  unint64_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  unsigned __int8 *v46;
  int64_t v47;
  __int32 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v61;
  int *v62;
  int32x4_t *v63;
  int32x4_t *v64;
  unint64_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  unsigned __int8 *v70;
  int64_t v71;
  __int32 *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int8x16_t v76;
  char *v77;
  unsigned int v78;
  uint64_t v79;
  float32x4_t *v80;
  int32x4_t *v81;
  unint64_t v82;
  int32x4_t v83;
  uint64_t v84;
  float *v85;
  int64_t v86;
  __int32 *v87;
  float v88;
  unsigned int IntOrFloatBitWidth;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  float64x2_t *v94;
  int32x4_t *v95;
  unint64_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  double *v101;
  int64_t v102;
  __int32 *v103;
  double v104;
  unint64_t v105;
  int32x4_t *v106;
  unint64_t v107;
  int64_t v108;
  unsigned int *v109;
  int8x16_t *v110;
  int8x16_t *v111;
  unint64_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  unint64_t v117;
  uint64_t *v118;
  int8x16_t *v119;
  unint64_t v120;
  uint64_t v121;
  int8x16_t v122;
  char *v123;
  unint64_t v124;
  __int32 *v125;
  __int32 v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v131;
  uint64_t OperandRange;
  _QWORD v134[2];
  uint64_t v135;
  uint64_t v136;
  void *v137[3];
  _QWORD v138[6];

  v138[5] = *MEMORY[0x1E0C80C00];
  v135 = a1;
  v136 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v135);
  v7 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v134[0] = v7;
  v134[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v134);
  v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v135);
  v9 = v135;
  if (mlir::DenseElementsAttr::classof(v135))
    v10 = (void *)v9;
  else
    v10 = 0;
  v137[0] = v10;
  if (v10)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v137);
    v4 = v11;
    if ((v8 & 1) == 0)
    {
LABEL_19:
      NumElements = mlir::ElementsAttr::getNumElements(v135, v136);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_21;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_29;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_39;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_45;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_60;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_79;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v36 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v39 = (int32x4_t *)(RawStringData + 32);
          v40 = a3 + 1;
          v41 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v43 = v39[-2];
            v42 = v39[-1];
            v45 = *v39;
            v44 = v39[1];
            v39 += 4;
            _Q0 = vuzp1q_s32(v43, v42);
            v40[-1] = _Q0;
            *v40 = vuzp1q_s32(v45, v44);
            v40 += 2;
            v41 -= 8;
          }
          while (v41);
          if (NumElements == v36)
            return *(float *)_Q0.i32;
        }
        else
        {
          v36 = 0;
        }
        v46 = &RawStringData[8 * v36];
        v47 = NumElements - v36;
        v48 = &a3->i32[v36];
        do
        {
          v49 = *(_QWORD *)v46;
          v46 += 8;
          *v48++ = v49;
          --v47;
        }
        while (v47);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v37 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v63 = (int32x4_t *)(RawStringData + 32);
          v64 = a3 + 1;
          v65 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v67 = v63[-2];
            v66 = v63[-1];
            v69 = *v63;
            v68 = v63[1];
            v63 += 4;
            _Q0 = vuzp1q_s32(v67, v66);
            v64[-1] = _Q0;
            *v64 = vuzp1q_s32(v69, v68);
            v64 += 2;
            v65 -= 8;
          }
          while (v65);
          if (NumElements == v37)
            return *(float *)_Q0.i32;
        }
        else
        {
          v37 = 0;
        }
        v70 = &RawStringData[8 * v37];
        v71 = NumElements - v37;
        v72 = &a3->i32[v37];
        do
        {
          v73 = *(_QWORD *)v70;
          v70 += 8;
          *v72++ = v73;
          --v71;
        }
        while (v71);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_100;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v50 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v80 = (float32x4_t *)(RawStringData + 16);
          v81 = a3 + 1;
          v82 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            _Q0 = vcvtq_s32_f32(v80[-1]);
            v83 = vcvtq_s32_f32(*v80);
            v81[-1] = _Q0;
            *v81 = v83;
            v80 += 2;
            v81 += 2;
            v82 -= 8;
          }
          while (v82);
          if (NumElements == v50)
            return *(float *)_Q0.i32;
        }
        else
        {
          v50 = 0;
        }
        v84 = v50;
        v85 = (float *)&RawStringData[4 * v50];
        v86 = NumElements - v50;
        v87 = &a3->i32[v84];
        do
        {
          v88 = *v85++;
          *(float *)_Q0.i32 = v88;
          *v87++ = (int)v88;
          --v86;
        }
        while (v86);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v74 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v94 = (float64x2_t *)(RawStringData + 32);
          v95 = a3 + 1;
          v96 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v97 = v94[-2];
            v98 = v94[-1];
            v99 = *v94;
            v100 = v94[1];
            v94 += 4;
            _Q0 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v97), (int32x4_t)vcvtq_s64_f64(v98));
            v95[-1] = _Q0;
            *v95 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v99), (int32x4_t)vcvtq_s64_f64(v100));
            v95 += 2;
            v96 -= 8;
          }
          while (v96);
          if (NumElements == v74)
            return *(float *)_Q0.i32;
        }
        else
        {
          v74 = 0;
        }
        v101 = (double *)&RawStringData[8 * v74];
        v102 = NumElements - v74;
        v103 = &a3->i32[v74];
        do
        {
          v104 = *v101++;
          _Q0.i32[0] = LODWORD(v104);
          *v103++ = (int)v104;
          --v102;
        }
        while (v102);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_139;
      }
LABEL_141:
      if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
      {
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        mlir::detail::unpackQuantizedData<int>(RawStringData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
        return *(float *)_Q0.i32;
      }
      llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v137, NumElements);
      mlir::detail::unpackBooleanData(RawStringData, v4, (uint64_t)v137[0], (unint64_t)v137[1]);
      v77 = (char *)v137[0];
      if (NumElements < 1)
        goto LABEL_187;
      if ((v8 & 1) != 0)
      {
        v78 = *(unsigned __int8 *)v137[0];
        if ((unint64_t)NumElements < 8)
        {
          v79 = 0;
LABEL_173:
          v108 = NumElements - v79;
          v109 = (unsigned int *)a3 + v79;
          do
          {
            *v109++ = v78;
            --v108;
          }
          while (v108);
          goto LABEL_187;
        }
        v79 = NumElements & 0x7FFFFFFFFFFFFFF8;
        _Q0 = vdupq_n_s32(v78);
        v106 = a3 + 1;
        v107 = NumElements & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v106[-1] = _Q0;
          *v106 = _Q0;
          v106 += 2;
          v107 -= 8;
        }
        while (v107);
        if (NumElements != v79)
          goto LABEL_173;
LABEL_187:
        if (v77 != (char *)v138)
          free(v77);
        return *(float *)_Q0.i32;
      }
      if ((unint64_t)NumElements < 8)
      {
        v105 = 0;
        goto LABEL_185;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        v105 = NumElements & 0x7FFFFFFFFFFFFFE0;
        v110 = (int8x16_t *)((char *)v137[0] + 16);
        v111 = (int8x16_t *)&a3[4];
        _Q0.i32[0] = -256;
        v76.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
        v112 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v113 = v110[-1];
          v114 = *v110;
          v115 = vqtbl1q_s8(*v110, (int8x16_t)xmmword_18125D030);
          v116 = vqtbl1q_s8(*v110, (int8x16_t)xmmword_18125D040);
          v111[-2] = vqtbl1q_s8(v113, (int8x16_t)xmmword_18125D050);
          v111[-1] = vqtbl1q_s8(v113, (int8x16_t)xmmword_18125D060);
          v111[-4] = vqtbl1q_s8(v113, (int8x16_t)xmmword_18125D030);
          v111[-3] = vqtbl1q_s8(v113, (int8x16_t)xmmword_18125D040);
          v111[2] = vqtbl1q_s8(v114, (int8x16_t)xmmword_18125D050);
          v111[3] = vqtbl1q_s8(v114, (int8x16_t)xmmword_18125D060);
          *v111 = v115;
          v111[1] = v116;
          v111 += 8;
          v110 += 2;
          v112 -= 32;
        }
        while (v112);
        if (NumElements == v105)
          goto LABEL_187;
        if ((NumElements & 0x18) == 0)
        {
LABEL_185:
          v123 = &v77[v105];
          v124 = NumElements - v105;
          v125 = &a3->i32[v105];
          do
          {
            v126 = *v123++;
            *v125++ = v126;
            --v124;
          }
          while (v124);
          goto LABEL_187;
        }
      }
      else
      {
        v105 = 0;
      }
      v117 = v105;
      v105 = NumElements & 0xFFFFFFFFFFFFFFF8;
      v118 = (uint64_t *)&v77[v117];
      v119 = (int8x16_t *)((char *)a3 + 4 * v117);
      v120 = v117 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      _Q0.i32[0] = -256;
      do
      {
        v121 = *v118++;
        v76.i64[0] = v121;
        v122 = vqtbl1q_s8(v76, (int8x16_t)xmmword_18125D030);
        v76 = vqtbl1q_s8(v76, (int8x16_t)xmmword_18125D040);
        *v119 = v122;
        v119[1] = v76;
        v119 += 2;
        v120 += 8;
      }
      while (v120);
      if (NumElements == v105)
        goto LABEL_187;
      goto LABEL_185;
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v12 = (void *)v9;
    else
      v12 = 0;
    v137[0] = v12;
    if (v12)
    {
      RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v137);
      v4 = v13;
      if ((v8 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_21:
    for (i = 0; i != NumElements; ++i)
    {
      if (v8)
        v17 = 0;
      else
        v17 = i;
      a3->i32[i] = RawStringData[v17];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_29:
    for (j = 0; j != NumElements; ++j)
    {
      if (v8)
        v19 = 0;
      else
        v19 = j;
      a3->i32[j] = (char)RawStringData[v19];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    if ((unint64_t)NumElements >= 2)
    {
      v22 = 0;
      v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v23 = 0;
        else
          v23 = v22;
        if (v8)
          v24 = 0;
        else
          v24 = v22 + 1;
        v25 = *(unsigned __int16 *)&RawStringData[2 * v24];
        v26 = &a3->i32[v22];
        *v26 = *(unsigned __int16 *)&RawStringData[2 * v23];
        v26[1] = v25;
        v22 += 2;
      }
      while (v22 != v20);
      goto LABEL_189;
    }
    v20 = 0;
    do
    {
      if (v8)
        v127 = 0;
      else
        v127 = v20;
      a3->i32[v20++] = *(unsigned __int16 *)&RawStringData[2 * v127];
LABEL_189:
      ;
    }
    while (NumElements != v20);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_45:
    if ((unint64_t)NumElements >= 2)
    {
      v29 = 0;
      v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v30 = 0;
        else
          v30 = v29;
        if (v8)
          v31 = 0;
        else
          v31 = v29 + 1;
        v32 = *(__int16 *)&RawStringData[2 * v31];
        v33 = &a3->i32[v29];
        *v33 = *(__int16 *)&RawStringData[2 * v30];
        v33[1] = v32;
        v29 += 2;
      }
      while (v29 != v21);
      goto LABEL_194;
    }
    v21 = 0;
    do
    {
      if (v8)
        v128 = 0;
      else
        v128 = v21;
      a3->i32[v21++] = *(__int16 *)&RawStringData[2 * v128];
LABEL_194:
      ;
    }
    while (NumElements != v21);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_60:
    for (k = 0; k != NumElements; ++k)
    {
      if (v8)
        v28 = 0;
      else
        v28 = k;
      a3->i32[k] = *(_DWORD *)&RawStringData[4 * v28];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_79:
    for (m = 0; m != NumElements; ++m)
    {
      if (v8)
        v35 = 0;
      else
        v35 = m;
      a3->i32[m] = *(_DWORD *)&RawStringData[4 * v35];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
    || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    a3->i32[0] = *(_QWORD *)RawStringData;
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_100:
    if ((unint64_t)NumElements >= 2)
    {
      v51 = 0;
      v38 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v52 = 0;
        else
          v52 = v51;
        if (v8)
          v53 = 0;
        else
          v53 = v51 + 1;
        _H0 = *(_WORD *)&RawStringData[2 * v52];
        _H1 = *(_WORD *)&RawStringData[2 * v53];
        __asm { FCVT            S0, H0 }
        v61 = (int)_S0;
        __asm { FCVT            S0, H1 }
        v62 = &a3->i32[v51];
        *v62 = v61;
        v62[1] = (int)*(float *)_Q0.i32;
        v51 += 2;
      }
      while (v51 != v38);
      goto LABEL_199;
    }
    v38 = 0;
    do
    {
      if (v8)
        v129 = 0;
      else
        v129 = v38;
      _H0 = *(_WORD *)&RawStringData[2 * v129];
      __asm { FCVT            S0, H0 }
      a3->i32[v38++] = (int)*(float *)_Q0.i32;
LABEL_199:
      ;
    }
    while (NumElements != v38);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    _Q0.i32[0] = *(_DWORD *)RawStringData;
    a3->i32[0] = (int)*(float *)RawStringData;
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    _Q0.i64[0] = *(_QWORD *)RawStringData;
    a3->i32[0] = (int)*(double *)RawStringData;
    return *(float *)_Q0.i32;
  }
  NumElements = 1;
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_141;
LABEL_139:
  if ((unint64_t)NumElements >= 2)
  {
    v90 = 0;
    v75 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    v91 = (uint64_t *)a3;
    do
    {
      if (v8)
        v92 = 0;
      else
        v92 = v90;
      if (v8)
        v93 = 0;
      else
        v93 = v90 + 1;
      _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v92];
      _Q0.i16[2] = *(_WORD *)&RawStringData[2 * v93];
      *(int32x2_t *)_Q0.i8 = vcvt_s32_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)_Q0.i8, 0x10uLL));
      *v91++ = _Q0.i64[0];
      v90 += 2;
    }
    while (v90 != v75);
    goto LABEL_204;
  }
  v75 = 0;
  do
  {
    if (v8)
      v131 = 0;
    else
      v131 = v75;
    _Q0.i32[0] = *(unsigned __int16 *)&RawStringData[2 * v131] << 16;
    a3->i32[v75++] = (int)*(float *)_Q0.i32;
LABEL_204:
    ;
  }
  while (NumElements != v75);
  return *(float *)_Q0.i32;
}

float mlir::copyElementsAttrData<unsigned long long>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 *RawStringData;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int64_t NumElements;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64x2_t *v40;
  int64x2_t *v41;
  unint64_t v42;
  int64x2_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int64x2_t *v55;
  int64x2_t *v56;
  unint64_t v57;
  int64x2_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  float32x2_t *v83;
  uint64x2_t *v84;
  unint64_t v85;
  float32x4_t v86;
  uint64x2_t v87;
  float64x2_t v88;
  float *v89;
  int64_t v90;
  _QWORD *v91;
  float v92;
  unsigned int IntOrFloatBitWidth;
  uint64_t v94;
  int64x2_t *v95;
  uint64_t v96;
  uint64_t v97;
  float64x2_t *v98;
  uint64x2_t *v99;
  unint64_t v100;
  uint64x2_t v101;
  uint64_t v102;
  double *v103;
  int64_t v104;
  _QWORD *v105;
  double v106;
  unint64_t v107;
  int64x2_t *v108;
  unint64_t v109;
  int64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint8x8_t *v113;
  _OWORD *v114;
  unint64_t v115;
  uint8x8_t v116;
  uint16x8_t v117;
  uint32x4_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  unint64_t v122;
  _OWORD *v123;
  uint8x16_t *v124;
  uint8x16_t v125;
  uint16x8_t v126;
  uint32x4_t v127;
  __int128 v128;
  __int128 v129;
  uint32x4_t v130;
  __int128 v131;
  uint16x8_t v132;
  uint32x4_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char *v137;
  unint64_t v138;
  _QWORD *v139;
  unsigned int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v147;
  uint64_t OperandRange;
  _QWORD v150[2];
  uint64_t v151;
  uint64_t v152;
  void *v153[3];
  _QWORD v154[6];

  v154[5] = *MEMORY[0x1E0C80C00];
  v151 = a1;
  v152 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v151);
  v7 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v150[0] = v7;
  v150[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v150);
  v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v151);
  v9 = v151;
  if (mlir::DenseElementsAttr::classof(v151))
    v10 = (void *)v9;
  else
    v10 = 0;
  v153[0] = v10;
  if (v10)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v153);
    v4 = v11;
    if ((v8 & 1) == 0)
    {
LABEL_19:
      NumElements = mlir::ElementsAttr::getNumElements(v151, v152);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_21;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_29;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_39;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_45;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_60;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_75;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements >= 1)
        {
          v39 = 0;
          if ((unint64_t)NumElements < 4)
            goto LABEL_96;
          if ((unint64_t)((char *)a3 - (char *)RawStringData) < 0x20)
            goto LABEL_96;
          v39 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          v40 = (int64x2_t *)(RawStringData + 16);
          v41 = (int64x2_t *)(a3 + 2);
          v42 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q0 = v40[-1];
            v43 = *v40;
            v41[-1] = _Q0;
            *v41 = v43;
            v40 += 2;
            v41 += 2;
            v42 -= 4;
          }
          while (v42);
          if (NumElements != v39)
          {
LABEL_96:
            v44 = v39;
            v45 = &RawStringData[8 * v39];
            v46 = NumElements - v39;
            v47 = &a3[v44];
            do
            {
              v48 = *(_QWORD *)v45;
              v45 += 8;
              *v47++ = v48;
              --v46;
            }
            while (v46);
          }
        }
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements >= 1)
        {
          v54 = 0;
          if ((unint64_t)NumElements < 4)
            goto LABEL_115;
          if ((unint64_t)((char *)a3 - (char *)RawStringData) < 0x20)
            goto LABEL_115;
          v54 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          v55 = (int64x2_t *)(RawStringData + 16);
          v56 = (int64x2_t *)(a3 + 2);
          v57 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q0 = v55[-1];
            v58 = *v55;
            v56[-1] = _Q0;
            *v56 = v58;
            v55 += 2;
            v56 += 2;
            v57 -= 4;
          }
          while (v57);
          if (NumElements != v54)
          {
LABEL_115:
            v59 = v54;
            v60 = &RawStringData[8 * v54];
            v61 = NumElements - v54;
            v62 = &a3[v59];
            do
            {
              v63 = *(_QWORD *)v60;
              v60 += 8;
              *v62++ = v63;
              --v61;
            }
            while (v61);
          }
        }
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_122;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v65 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v83 = (float32x2_t *)(RawStringData + 16);
          v84 = (uint64x2_t *)(a3 + 4);
          v85 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v86 = *(float32x4_t *)v83[-2].f32;
            v87 = vcvtq_u64_f64(vcvtq_f64_f32(*v83));
            v88 = vcvt_hight_f64_f32(*(float32x4_t *)v83->f32);
            v84[-2] = vcvtq_u64_f64(vcvtq_f64_f32(*(float32x2_t *)v86.f32));
            v84[-1] = vcvtq_u64_f64(vcvt_hight_f64_f32(v86));
            _Q0 = (int64x2_t)vcvtq_u64_f64(v88);
            *v84 = v87;
            v84[1] = (uint64x2_t)_Q0;
            v84 += 4;
            v83 += 4;
            v85 -= 8;
          }
          while (v85);
          if (NumElements == v65)
            return *(float *)_Q0.i32;
        }
        else
        {
          v65 = 0;
        }
        v89 = (float *)&RawStringData[4 * v65];
        v90 = NumElements - v65;
        v91 = &a3[v65];
        do
        {
          v92 = *v89++;
          *(float *)_Q0.i32 = v92;
          *v91++ = (unint64_t)v92;
          --v90;
        }
        while (v90);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 4)
        {
          v78 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          v98 = (float64x2_t *)(RawStringData + 16);
          v99 = (uint64x2_t *)(a3 + 2);
          v100 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q0 = (int64x2_t)vcvtq_u64_f64(v98[-1]);
            v101 = vcvtq_u64_f64(*v98);
            v99[-1] = (uint64x2_t)_Q0;
            *v99 = v101;
            v98 += 2;
            v99 += 2;
            v100 -= 4;
          }
          while (v100);
          if (NumElements == v78)
            return *(float *)_Q0.i32;
        }
        else
        {
          v78 = 0;
        }
        v102 = v78;
        v103 = (double *)&RawStringData[8 * v78];
        v104 = NumElements - v78;
        v105 = &a3[v102];
        do
        {
          v106 = *v103++;
          _Q0.i32[0] = LODWORD(v106);
          *v105++ = (unint64_t)v106;
          --v104;
        }
        while (v104);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_149;
      }
LABEL_151:
      if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
      {
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        mlir::detail::unpackQuantizedData<unsigned long long>(RawStringData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
        return *(float *)_Q0.i32;
      }
      llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v153, NumElements);
      mlir::detail::unpackBooleanData(RawStringData, v4, (uint64_t)v153[0], (unint64_t)v153[1]);
      v80 = (char *)v153[0];
      if (NumElements < 1)
        goto LABEL_198;
      if ((v8 & 1) != 0)
      {
        v81 = *(unsigned __int8 *)v153[0];
        if ((unint64_t)NumElements < 4)
        {
          v82 = 0;
LABEL_183:
          v110 = NumElements - v82;
          v111 = &a3[v82];
          do
          {
            *v111++ = v81;
            --v110;
          }
          while (v110);
          goto LABEL_198;
        }
        v82 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
        _Q0 = vdupq_n_s64(v81);
        v108 = (int64x2_t *)(a3 + 2);
        v109 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v108[-1] = _Q0;
          *v108 = _Q0;
          v108 += 2;
          v109 -= 4;
        }
        while (v109);
        if (NumElements != v82)
          goto LABEL_183;
LABEL_198:
        if (v80 != (char *)v154)
          free(v80);
        return *(float *)_Q0.i32;
      }
      if ((unint64_t)NumElements < 8)
      {
        v107 = 0;
        goto LABEL_196;
      }
      if ((unint64_t)NumElements >= 0x10)
      {
        v107 = NumElements & 0x7FFFFFFFFFFFFFF0;
        v122 = NumElements & 0xFFFFFFFFFFFFFFF0;
        v123 = a3;
        v124 = (uint8x16_t *)v153[0];
        do
        {
          v125 = *v124++;
          v126 = vmovl_u8(*(uint8x8_t *)v125.i8);
          v127 = vmovl_u16(*(uint16x4_t *)v126.i8);
          *(_QWORD *)&v128 = v127.u32[0];
          *((_QWORD *)&v128 + 1) = v127.u32[1];
          v129 = v128;
          v130 = vmovl_high_u16(v126);
          *(_QWORD *)&v128 = v130.u32[0];
          *((_QWORD *)&v128 + 1) = v130.u32[1];
          v131 = v128;
          v132 = vmovl_high_u8(v125);
          v133 = vmovl_high_u16(v132);
          *(_QWORD *)&v128 = v133.u32[0];
          *((_QWORD *)&v128 + 1) = v133.u32[1];
          v134 = v128;
          *(_QWORD *)&v128 = v133.u32[2];
          *((_QWORD *)&v128 + 1) = v133.u32[3];
          v123[6] = v134;
          v123[7] = v128;
          _Q0 = (int64x2_t)vmovl_u16(*(uint16x4_t *)v132.i8);
          *(_QWORD *)&v128 = _Q0.u32[0];
          *((_QWORD *)&v128 + 1) = _Q0.u32[1];
          v135 = v128;
          *(_QWORD *)&v128 = v130.u32[2];
          *((_QWORD *)&v128 + 1) = v130.u32[3];
          v136 = v128;
          *(_QWORD *)&v128 = _Q0.u32[2];
          *((_QWORD *)&v128 + 1) = _Q0.u32[3];
          v123[4] = v135;
          v123[5] = v128;
          v123[2] = v131;
          v123[3] = v136;
          *(_QWORD *)&v128 = v127.u32[2];
          *((_QWORD *)&v128 + 1) = v127.u32[3];
          _Q0.i32[0] = v127.i32[2];
          *v123 = v129;
          v123[1] = v128;
          v123 += 8;
          v122 -= 16;
        }
        while (v122);
        if (NumElements == v107)
          goto LABEL_198;
        if ((NumElements & 8) == 0)
        {
LABEL_196:
          v137 = &v80[v107];
          v138 = NumElements - v107;
          v139 = &a3[v107];
          do
          {
            v140 = *v137++;
            *v139++ = v140;
            --v138;
          }
          while (v138);
          goto LABEL_198;
        }
      }
      else
      {
        v107 = 0;
      }
      v112 = v107;
      v107 = NumElements & 0xFFFFFFFFFFFFFFF8;
      v113 = (uint8x8_t *)&v80[v112];
      v114 = &a3[v112];
      v115 = v112 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v116 = *v113++;
        v117 = vmovl_u8(v116);
        v118 = vmovl_u16(*(uint16x4_t *)v117.i8);
        *(_QWORD *)&v119 = v118.u32[0];
        *((_QWORD *)&v119 + 1) = v118.u32[1];
        v120 = v119;
        _Q0 = (int64x2_t)vmovl_high_u16(v117);
        *(_QWORD *)&v119 = _Q0.u32[0];
        *((_QWORD *)&v119 + 1) = _Q0.u32[1];
        v121 = v119;
        *(_QWORD *)&v119 = _Q0.u32[2];
        *((_QWORD *)&v119 + 1) = _Q0.u32[3];
        v114[2] = v121;
        v114[3] = v119;
        *(_QWORD *)&v119 = v118.u32[2];
        *((_QWORD *)&v119 + 1) = v118.u32[3];
        _Q0.i32[0] = v118.i32[2];
        *v114 = v120;
        v114[1] = v119;
        v114 += 4;
        v115 += 8;
      }
      while (v115);
      if (NumElements == v107)
        goto LABEL_198;
      goto LABEL_196;
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v12 = (void *)v9;
    else
      v12 = 0;
    v153[0] = v12;
    if (v12)
    {
      RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v153);
      v4 = v13;
      if ((v8 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_21:
    for (i = 0; i != NumElements; ++i)
    {
      if (v8)
        v17 = 0;
      else
        v17 = i;
      a3[i] = RawStringData[v17];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_29:
    for (j = 0; j != NumElements; ++j)
    {
      if (v8)
        v19 = 0;
      else
        v19 = j;
      a3[j] = (char)RawStringData[v19];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    if ((unint64_t)NumElements >= 2)
    {
      v22 = 0;
      v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v23 = 0;
        else
          v23 = v22;
        if (v8)
          v24 = 0;
        else
          v24 = v22 + 1;
        v25 = *(unsigned __int16 *)&RawStringData[2 * v24];
        v26 = &a3[v22];
        *v26 = *(unsigned __int16 *)&RawStringData[2 * v23];
        v26[1] = v25;
        v22 += 2;
      }
      while (v22 != v20);
      goto LABEL_200;
    }
    v20 = 0;
    do
    {
      if (v8)
        v141 = 0;
      else
        v141 = v20;
      a3[v20++] = *(unsigned __int16 *)&RawStringData[2 * v141];
LABEL_200:
      ;
    }
    while (NumElements != v20);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_45:
    if ((unint64_t)NumElements >= 2)
    {
      v28 = 0;
      v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v29 = 0;
        else
          v29 = v28;
        if (v8)
          v30 = 0;
        else
          v30 = v28 + 1;
        v31 = *(__int16 *)&RawStringData[2 * v30];
        v32 = &a3[v28];
        *v32 = *(__int16 *)&RawStringData[2 * v29];
        v32[1] = v31;
        v28 += 2;
      }
      while (v28 != v21);
      goto LABEL_205;
    }
    v21 = 0;
    do
    {
      if (v8)
        v142 = 0;
      else
        v142 = v21;
      a3[v21++] = *(__int16 *)&RawStringData[2 * v142];
LABEL_205:
      ;
    }
    while (NumElements != v21);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_60:
    if ((unint64_t)NumElements >= 2)
    {
      v34 = 0;
      v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v35 = 0;
        else
          v35 = v34;
        if (v8)
          v36 = 0;
        else
          v36 = v34 + 1;
        v37 = *(unsigned int *)&RawStringData[4 * v36];
        v38 = &a3[v34];
        *v38 = *(unsigned int *)&RawStringData[4 * v35];
        v38[1] = v37;
        v34 += 2;
      }
      while (v34 != v27);
      goto LABEL_210;
    }
    v27 = 0;
    do
    {
      if (v8)
        v143 = 0;
      else
        v143 = v27;
      a3[v27++] = *(unsigned int *)&RawStringData[4 * v143];
LABEL_210:
      ;
    }
    while (NumElements != v27);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_75:
    if ((unint64_t)NumElements >= 2)
    {
      v49 = 0;
      v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v50 = 0;
        else
          v50 = v49;
        if (v8)
          v51 = 0;
        else
          v51 = v49 + 1;
        v52 = *(int *)&RawStringData[4 * v51];
        v53 = &a3[v49];
        *v53 = *(int *)&RawStringData[4 * v50];
        v53[1] = v52;
        v49 += 2;
      }
      while (v49 != v33);
      goto LABEL_215;
    }
    v33 = 0;
    do
    {
      if (v8)
        v144 = 0;
      else
        v144 = v33;
      a3[v33++] = *(int *)&RawStringData[4 * v144];
LABEL_215:
      ;
    }
    while (NumElements != v33);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
    || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    *a3 = *(_QWORD *)RawStringData;
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_122:
    if ((unint64_t)NumElements >= 2)
    {
      v66 = 0;
      v64 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v67 = 0;
        else
          v67 = v66;
        if (v8)
          v68 = 0;
        else
          v68 = v66 + 1;
        _H0 = *(_WORD *)&RawStringData[2 * v67];
        _H1 = *(_WORD *)&RawStringData[2 * v68];
        __asm { FCVT            S0, H0 }
        v76 = (unint64_t)_S0;
        __asm { FCVT            S0, H1 }
        v77 = &a3[v66];
        *v77 = v76;
        v77[1] = (unint64_t)*(float *)_Q0.i32;
        v66 += 2;
      }
      while (v66 != v64);
      goto LABEL_220;
    }
    v64 = 0;
    do
    {
      if (v8)
        v145 = 0;
      else
        v145 = v64;
      _H0 = *(_WORD *)&RawStringData[2 * v145];
      __asm { FCVT            S0, H0 }
      a3[v64++] = (unint64_t)*(float *)_Q0.i32;
LABEL_220:
      ;
    }
    while (NumElements != v64);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    _Q0.i32[0] = *(_DWORD *)RawStringData;
    *a3 = (unint64_t)*(float *)RawStringData;
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    _Q0.i64[0] = *(_QWORD *)RawStringData;
    *a3 = (unint64_t)*(double *)RawStringData;
    return *(float *)_Q0.i32;
  }
  NumElements = 1;
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_151;
LABEL_149:
  if ((unint64_t)NumElements >= 2)
  {
    v94 = 0;
    v79 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    v95 = (int64x2_t *)a3;
    do
    {
      if (v8)
        v96 = 0;
      else
        v96 = v94;
      if (v8)
        v97 = 0;
      else
        v97 = v94 + 1;
      _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v96];
      _Q0.i16[2] = *(_WORD *)&RawStringData[2 * v97];
      _Q0 = (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)_Q0.i8, 0x10uLL)));
      *v95++ = _Q0;
      v94 += 2;
    }
    while (v94 != v79);
    goto LABEL_225;
  }
  v79 = 0;
  do
  {
    if (v8)
      v147 = 0;
    else
      v147 = v79;
    _Q0.i32[0] = *(unsigned __int16 *)&RawStringData[2 * v147] << 16;
    a3[v79++] = (unint64_t)*(float *)_Q0.i32;
LABEL_225:
    ;
  }
  while (NumElements != v79);
  return *(float *)_Q0.i32;
}

float mlir::copyElementsAttrData<long long>(uint64_t a1, uint64_t a2, int64x2_t *a3)
{
  unsigned __int8 *RawStringData;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int64_t NumElements;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64x2_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64x2_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64x2_t *v38;
  uint64_t v39;
  int64x2_t *v40;
  int64x2_t *v41;
  unint64_t v42;
  int64x2_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int64x2_t *v53;
  uint64_t v54;
  int64x2_t *v55;
  int64x2_t *v56;
  unint64_t v57;
  int64x2_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v76;
  uint64_t *i64;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  float32x2_t *v83;
  int64x2_t *v84;
  unint64_t v85;
  float32x4_t v86;
  int64x2_t v87;
  float64x2_t v88;
  float *v89;
  int64_t v90;
  uint64_t *v91;
  float v92;
  unsigned int IntOrFloatBitWidth;
  uint64_t v94;
  int64x2_t *v95;
  uint64_t v96;
  uint64_t v97;
  float64x2_t *v98;
  int64x2_t *v99;
  unint64_t v100;
  int64x2_t v101;
  uint64_t v102;
  double *v103;
  int64_t v104;
  uint64_t *v105;
  double v106;
  unint64_t v107;
  int64x2_t *v108;
  unint64_t v109;
  int64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint8x8_t *v113;
  __int8 *v114;
  unint64_t v115;
  uint8x8_t v116;
  uint16x8_t v117;
  uint32x4_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  unint64_t v122;
  int64x2_t *v123;
  uint8x16_t *v124;
  uint8x16_t v125;
  uint16x8_t v126;
  uint32x4_t v127;
  int64x2_t v128;
  int64x2_t v129;
  uint32x4_t v130;
  int64x2_t v131;
  uint16x8_t v132;
  uint32x4_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  char *v137;
  unint64_t v138;
  uint64_t *v139;
  unsigned int v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v147;
  uint64_t OperandRange;
  _QWORD v150[2];
  uint64_t v151;
  uint64_t v152;
  void *v153[3];
  _QWORD v154[6];

  v154[5] = *MEMORY[0x1E0C80C00];
  v151 = a1;
  v152 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v151);
  v7 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v150[0] = v7;
  v150[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v150);
  v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v151);
  v9 = v151;
  if (mlir::DenseElementsAttr::classof(v151))
    v10 = (void *)v9;
  else
    v10 = 0;
  v153[0] = v10;
  if (v10)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v153);
    v4 = v11;
    if ((v8 & 1) == 0)
    {
LABEL_19:
      NumElements = mlir::ElementsAttr::getNumElements(v151, v152);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_21;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_29;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_39;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_45;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_60;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_75;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements >= 1)
        {
          v39 = 0;
          if ((unint64_t)NumElements < 4)
            goto LABEL_96;
          if ((unint64_t)((char *)a3 - (char *)RawStringData) < 0x20)
            goto LABEL_96;
          v39 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          v40 = (int64x2_t *)(RawStringData + 16);
          v41 = a3 + 1;
          v42 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q0 = v40[-1];
            v43 = *v40;
            v41[-1] = _Q0;
            *v41 = v43;
            v40 += 2;
            v41 += 2;
            v42 -= 4;
          }
          while (v42);
          if (NumElements != v39)
          {
LABEL_96:
            v44 = v39;
            v45 = &RawStringData[8 * v39];
            v46 = NumElements - v39;
            v47 = &a3->i64[v44];
            do
            {
              v48 = *(_QWORD *)v45;
              v45 += 8;
              *v47++ = v48;
              --v46;
            }
            while (v46);
          }
        }
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements >= 1)
        {
          v54 = 0;
          if ((unint64_t)NumElements < 4)
            goto LABEL_115;
          if ((unint64_t)((char *)a3 - (char *)RawStringData) < 0x20)
            goto LABEL_115;
          v54 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          v55 = (int64x2_t *)(RawStringData + 16);
          v56 = a3 + 1;
          v57 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q0 = v55[-1];
            v58 = *v55;
            v56[-1] = _Q0;
            *v56 = v58;
            v55 += 2;
            v56 += 2;
            v57 -= 4;
          }
          while (v57);
          if (NumElements != v54)
          {
LABEL_115:
            v59 = v54;
            v60 = &RawStringData[8 * v54];
            v61 = NumElements - v54;
            v62 = &a3->i64[v59];
            do
            {
              v63 = *(_QWORD *)v60;
              v60 += 8;
              *v62++ = v63;
              --v61;
            }
            while (v61);
          }
        }
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_122;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 8)
        {
          v65 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v83 = (float32x2_t *)(RawStringData + 16);
          v84 = a3 + 2;
          v85 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v86 = *(float32x4_t *)v83[-2].f32;
            v87 = vcvtq_s64_f64(vcvtq_f64_f32(*v83));
            v88 = vcvt_hight_f64_f32(*(float32x4_t *)v83->f32);
            v84[-2] = vcvtq_s64_f64(vcvtq_f64_f32(*(float32x2_t *)v86.f32));
            v84[-1] = vcvtq_s64_f64(vcvt_hight_f64_f32(v86));
            _Q0 = vcvtq_s64_f64(v88);
            *v84 = v87;
            v84[1] = _Q0;
            v84 += 4;
            v83 += 4;
            v85 -= 8;
          }
          while (v85);
          if (NumElements == v65)
            return *(float *)_Q0.i32;
        }
        else
        {
          v65 = 0;
        }
        v89 = (float *)&RawStringData[4 * v65];
        v90 = NumElements - v65;
        v91 = &a3->i64[v65];
        do
        {
          v92 = *v89++;
          *(float *)_Q0.i32 = v92;
          *v91++ = (uint64_t)v92;
          --v90;
        }
        while (v90);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        if ((unint64_t)NumElements >= 4)
        {
          v78 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          v98 = (float64x2_t *)(RawStringData + 16);
          v99 = a3 + 1;
          v100 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q0 = vcvtq_s64_f64(v98[-1]);
            v101 = vcvtq_s64_f64(*v98);
            v99[-1] = _Q0;
            *v99 = v101;
            v98 += 2;
            v99 += 2;
            v100 -= 4;
          }
          while (v100);
          if (NumElements == v78)
            return *(float *)_Q0.i32;
        }
        else
        {
          v78 = 0;
        }
        v102 = v78;
        v103 = (double *)&RawStringData[8 * v78];
        v104 = NumElements - v78;
        v105 = &a3->i64[v102];
        do
        {
          v106 = *v103++;
          _Q0.i32[0] = LODWORD(v106);
          *v105++ = (uint64_t)v106;
          --v104;
        }
        while (v104);
        return *(float *)_Q0.i32;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return *(float *)_Q0.i32;
        goto LABEL_149;
      }
LABEL_151:
      if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
      {
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        mlir::detail::unpackQuantizedData<long long>(RawStringData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
        return *(float *)_Q0.i32;
      }
      llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v153, NumElements);
      mlir::detail::unpackBooleanData(RawStringData, v4, (uint64_t)v153[0], (unint64_t)v153[1]);
      v80 = (char *)v153[0];
      if (NumElements < 1)
        goto LABEL_198;
      if ((v8 & 1) != 0)
      {
        v81 = *(unsigned __int8 *)v153[0];
        if ((unint64_t)NumElements < 4)
        {
          v82 = 0;
LABEL_183:
          v110 = NumElements - v82;
          v111 = (unint64_t *)a3 + v82;
          do
          {
            *v111++ = v81;
            --v110;
          }
          while (v110);
          goto LABEL_198;
        }
        v82 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
        _Q0 = vdupq_n_s64(v81);
        v108 = a3 + 1;
        v109 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v108[-1] = _Q0;
          *v108 = _Q0;
          v108 += 2;
          v109 -= 4;
        }
        while (v109);
        if (NumElements != v82)
          goto LABEL_183;
LABEL_198:
        if (v80 != (char *)v154)
          free(v80);
        return *(float *)_Q0.i32;
      }
      if ((unint64_t)NumElements < 8)
      {
        v107 = 0;
        goto LABEL_196;
      }
      if ((unint64_t)NumElements >= 0x10)
      {
        v107 = NumElements & 0x7FFFFFFFFFFFFFF0;
        v122 = NumElements & 0xFFFFFFFFFFFFFFF0;
        v123 = a3;
        v124 = (uint8x16_t *)v153[0];
        do
        {
          v125 = *v124++;
          v126 = vmovl_u8(*(uint8x8_t *)v125.i8);
          v127 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v128.i64[0] = v127.u32[0];
          v128.i64[1] = v127.u32[1];
          v129 = v128;
          v130 = vmovl_high_u16(v126);
          v128.i64[0] = v130.u32[0];
          v128.i64[1] = v130.u32[1];
          v131 = v128;
          v132 = vmovl_high_u8(v125);
          v133 = vmovl_high_u16(v132);
          v128.i64[0] = v133.u32[0];
          v128.i64[1] = v133.u32[1];
          v134 = v128;
          v128.i64[0] = v133.u32[2];
          v128.i64[1] = v133.u32[3];
          v123[6] = v134;
          v123[7] = v128;
          _Q0 = (int64x2_t)vmovl_u16(*(uint16x4_t *)v132.i8);
          v128.i64[0] = _Q0.u32[0];
          v128.i64[1] = _Q0.u32[1];
          v135 = v128;
          v128.i64[0] = v130.u32[2];
          v128.i64[1] = v130.u32[3];
          v136 = v128;
          v128.i64[0] = _Q0.u32[2];
          v128.i64[1] = _Q0.u32[3];
          v123[4] = v135;
          v123[5] = v128;
          v123[2] = v131;
          v123[3] = v136;
          v128.i64[0] = v127.u32[2];
          v128.i64[1] = v127.u32[3];
          _Q0.i32[0] = v127.i32[2];
          *v123 = v129;
          v123[1] = v128;
          v123 += 8;
          v122 -= 16;
        }
        while (v122);
        if (NumElements == v107)
          goto LABEL_198;
        if ((NumElements & 8) == 0)
        {
LABEL_196:
          v137 = &v80[v107];
          v138 = NumElements - v107;
          v139 = &a3->i64[v107];
          do
          {
            v140 = *v137++;
            *v139++ = v140;
            --v138;
          }
          while (v138);
          goto LABEL_198;
        }
      }
      else
      {
        v107 = 0;
      }
      v112 = v107;
      v107 = NumElements & 0xFFFFFFFFFFFFFFF8;
      v113 = (uint8x8_t *)&v80[v112];
      v114 = &a3->i8[8 * v112];
      v115 = v112 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v116 = *v113++;
        v117 = vmovl_u8(v116);
        v118 = vmovl_u16(*(uint16x4_t *)v117.i8);
        *(_QWORD *)&v119 = v118.u32[0];
        *((_QWORD *)&v119 + 1) = v118.u32[1];
        v120 = v119;
        _Q0 = (int64x2_t)vmovl_high_u16(v117);
        *(_QWORD *)&v119 = _Q0.u32[0];
        *((_QWORD *)&v119 + 1) = _Q0.u32[1];
        v121 = v119;
        *(_QWORD *)&v119 = _Q0.u32[2];
        *((_QWORD *)&v119 + 1) = _Q0.u32[3];
        *((_OWORD *)v114 + 2) = v121;
        *((_OWORD *)v114 + 3) = v119;
        *(_QWORD *)&v119 = v118.u32[2];
        *((_QWORD *)&v119 + 1) = v118.u32[3];
        _Q0.i32[0] = v118.i32[2];
        *(_OWORD *)v114 = v120;
        *((_OWORD *)v114 + 1) = v119;
        v114 += 64;
        v115 += 8;
      }
      while (v115);
      if (NumElements == v107)
        goto LABEL_198;
      goto LABEL_196;
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v12 = (void *)v9;
    else
      v12 = 0;
    v153[0] = v12;
    if (v12)
    {
      RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v153);
      v4 = v13;
      if ((v8 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_21:
    for (i = 0; i != NumElements; ++i)
    {
      if (v8)
        v17 = 0;
      else
        v17 = i;
      a3->i64[i] = RawStringData[v17];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_29:
    for (j = 0; j != NumElements; ++j)
    {
      if (v8)
        v19 = 0;
      else
        v19 = j;
      a3->i64[j] = (char)RawStringData[v19];
    }
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    if ((unint64_t)NumElements >= 2)
    {
      v22 = 0;
      v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v23 = 0;
        else
          v23 = v22;
        if (v8)
          v24 = 0;
        else
          v24 = v22 + 1;
        v25 = *(unsigned __int16 *)&RawStringData[2 * v24];
        v26 = &a3[v22 / 2];
        v26->i64[0] = *(unsigned __int16 *)&RawStringData[2 * v23];
        v26->i64[1] = v25;
        v22 += 2;
      }
      while (v22 != v20);
      goto LABEL_200;
    }
    v20 = 0;
    do
    {
      if (v8)
        v141 = 0;
      else
        v141 = v20;
      a3->i64[v20++] = *(unsigned __int16 *)&RawStringData[2 * v141];
LABEL_200:
      ;
    }
    while (NumElements != v20);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_45:
    if ((unint64_t)NumElements >= 2)
    {
      v28 = 0;
      v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v29 = 0;
        else
          v29 = v28;
        if (v8)
          v30 = 0;
        else
          v30 = v28 + 1;
        v31 = *(__int16 *)&RawStringData[2 * v30];
        v32 = &a3[v28 / 2];
        v32->i64[0] = *(__int16 *)&RawStringData[2 * v29];
        v32->i64[1] = v31;
        v28 += 2;
      }
      while (v28 != v21);
      goto LABEL_205;
    }
    v21 = 0;
    do
    {
      if (v8)
        v142 = 0;
      else
        v142 = v21;
      a3->i64[v21++] = *(__int16 *)&RawStringData[2 * v142];
LABEL_205:
      ;
    }
    while (NumElements != v21);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_60:
    if ((unint64_t)NumElements >= 2)
    {
      v34 = 0;
      v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v35 = 0;
        else
          v35 = v34;
        if (v8)
          v36 = 0;
        else
          v36 = v34 + 1;
        v37 = *(unsigned int *)&RawStringData[4 * v36];
        v38 = &a3[v34 / 2];
        v38->i64[0] = *(unsigned int *)&RawStringData[4 * v35];
        v38->i64[1] = v37;
        v34 += 2;
      }
      while (v34 != v27);
      goto LABEL_210;
    }
    v27 = 0;
    do
    {
      if (v8)
        v143 = 0;
      else
        v143 = v27;
      a3->i64[v27++] = *(unsigned int *)&RawStringData[4 * v143];
LABEL_210:
      ;
    }
    while (NumElements != v27);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_75:
    if ((unint64_t)NumElements >= 2)
    {
      v49 = 0;
      v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v50 = 0;
        else
          v50 = v49;
        if (v8)
          v51 = 0;
        else
          v51 = v49 + 1;
        v52 = *(int *)&RawStringData[4 * v51];
        v53 = &a3[v49 / 2];
        v53->i64[0] = *(int *)&RawStringData[4 * v50];
        v53->i64[1] = v52;
        v49 += 2;
      }
      while (v49 != v33);
      goto LABEL_215;
    }
    v33 = 0;
    do
    {
      if (v8)
        v144 = 0;
      else
        v144 = v33;
      a3->i64[v33++] = *(int *)&RawStringData[4 * v144];
LABEL_215:
      ;
    }
    while (NumElements != v33);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64)
    || mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    a3->i64[0] = *(_QWORD *)RawStringData;
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_122:
    if ((unint64_t)NumElements >= 2)
    {
      v66 = 0;
      v64 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v67 = 0;
        else
          v67 = v66;
        if (v8)
          v68 = 0;
        else
          v68 = v66 + 1;
        _H0 = *(_WORD *)&RawStringData[2 * v67];
        _H1 = *(_WORD *)&RawStringData[2 * v68];
        __asm { FCVT            S0, H0 }
        v76 = (uint64_t)_S0;
        __asm { FCVT            S0, H1 }
        i64 = a3[v66 / 2].i64;
        *i64 = v76;
        i64[1] = (uint64_t)*(float *)_Q0.i32;
        v66 += 2;
      }
      while (v66 != v64);
      goto LABEL_220;
    }
    v64 = 0;
    do
    {
      if (v8)
        v145 = 0;
      else
        v145 = v64;
      _H0 = *(_WORD *)&RawStringData[2 * v145];
      __asm { FCVT            S0, H0 }
      a3->i64[v64++] = (uint64_t)*(float *)_Q0.i32;
LABEL_220:
      ;
    }
    while (NumElements != v64);
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    _Q0.i32[0] = *(_DWORD *)RawStringData;
    a3->i64[0] = (uint64_t)*(float *)RawStringData;
    return *(float *)_Q0.i32;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    _Q0.i64[0] = *(_QWORD *)RawStringData;
    a3->i64[0] = (uint64_t)*(double *)RawStringData;
    return *(float *)_Q0.i32;
  }
  NumElements = 1;
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_151;
LABEL_149:
  if ((unint64_t)NumElements >= 2)
  {
    v94 = 0;
    v79 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    v95 = a3;
    do
    {
      if (v8)
        v96 = 0;
      else
        v96 = v94;
      if (v8)
        v97 = 0;
      else
        v97 = v94 + 1;
      _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v96];
      _Q0.i16[2] = *(_WORD *)&RawStringData[2 * v97];
      _Q0 = vcvtq_s64_f64(vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)_Q0.i8, 0x10uLL)));
      *v95++ = _Q0;
      v94 += 2;
    }
    while (v94 != v79);
    goto LABEL_225;
  }
  v79 = 0;
  do
  {
    if (v8)
      v147 = 0;
    else
      v147 = v79;
    _Q0.i32[0] = *(unsigned __int16 *)&RawStringData[2 * v147] << 16;
    a3->i64[v79++] = (uint64_t)*(float *)_Q0.i32;
LABEL_225:
    ;
  }
  while (NumElements != v79);
  return *(float *)_Q0.i32;
}

__int16 mlir::copyElementsAttrData<half>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float16x8_t *a3@<X2>)
{
  unsigned __int8 *RawStringData;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int64_t NumElements;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v23;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  __int16 *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int16 *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 *v56;
  uint64_t v57;
  float16x8_t *v58;
  float16x8_t *v59;
  unint64_t v60;
  float16x8_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int64_t v64;
  __int16 *v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  float32x4_t v75;
  char *v76;
  uint64_t v77;
  float32x4_t *v78;
  float16x8_t *v79;
  unint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float16x8_t v85;
  unsigned __int8 *v86;
  int64_t v87;
  __int16 *v88;
  __int32 v89;
  unsigned int IntOrFloatBitWidth;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int16 *v95;
  float16x8_t *v96;
  float16x8_t *v97;
  unint64_t v98;
  unsigned __int8 *v109;
  int64_t v110;
  __int16 *v111;
  uint64_t v112;
  unint64_t v113;
  int16x8_t v114;
  int16x8_t *v115;
  unint64_t v116;
  int64_t v117;
  __int16 *v118;
  int8x16_t *v119;
  float16x8_t *v120;
  unint64_t v121;
  int8x16_t v122;
  int8x16_t v123;
  uint16x8_t v124;
  float16x8_t v125;
  uint16x8_t v126;
  float16x8_t v127;
  uint16x8_t v128;
  float16x8_t v129;
  uint16x8_t v130;
  unint64_t v131;
  int8x8_t *v132;
  float16x8_t *v133;
  unint64_t v134;
  int8x8_t v135;
  uint16x8_t v136;
  int16x4_t v137;
  char *v138;
  unint64_t v139;
  __int16 *v140;
  float v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t OperandRange;
  _QWORD v152[2];
  uint64_t v153;
  uint64_t v154;
  void *v155[3];
  _QWORD v156[6];

  v156[5] = *MEMORY[0x1E0C80C00];
  v153 = a1;
  v154 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v153);
  v7 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v152[0] = v7;
  v152[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v152);
  v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v153);
  v9 = v153;
  if (mlir::DenseElementsAttr::classof(v153))
    v10 = (void *)v9;
  else
    v10 = 0;
  v155[0] = v10;
  if (v10)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v155);
    v4 = v11;
    if ((v8 & 1) == 0)
    {
LABEL_19:
      NumElements = mlir::ElementsAttr::getNumElements(v153, v154);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_21;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_29;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_39;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_45;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_60;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_75;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_90;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_105;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements >= 1)
        {
          v57 = 0;
          if ((unint64_t)NumElements < 0x10)
            goto LABEL_125;
          if ((unint64_t)((char *)a3 - (char *)RawStringData) < 0x20)
            goto LABEL_125;
          v57 = NumElements & 0x7FFFFFFFFFFFFFF0;
          v58 = (float16x8_t *)(RawStringData + 16);
          v59 = a3 + 1;
          v60 = NumElements & 0xFFFFFFFFFFFFFFF0;
          do
          {
            _Q0 = v58[-1];
            v61 = *v58;
            v59[-1] = _Q0;
            *v59 = v61;
            v58 += 2;
            v59 += 2;
            v60 -= 16;
          }
          while (v60);
          if (NumElements != v57)
          {
LABEL_125:
            v62 = v57;
            v63 = &RawStringData[2 * v57];
            v64 = NumElements - v57;
            v65 = &a3->i16[v62];
            do
            {
              v66 = *(_WORD *)v63;
              v63 += 2;
              _Q0.i16[0] = v66;
              *v65++ = v66;
              --v64;
            }
            while (v64);
          }
        }
        return _Q0.i16[0];
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        if ((unint64_t)NumElements >= 0x10)
        {
          v72 = NumElements & 0x7FFFFFFFFFFFFFF0;
          v78 = (float32x4_t *)(RawStringData + 32);
          v79 = a3 + 1;
          v80 = NumElements & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v82 = v78[-2];
            v81 = v78[-1];
            v84 = *v78;
            v83 = v78[1];
            v78 += 4;
            v85 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v82), v81);
            _Q0 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v84), v83);
            v79[-1] = v85;
            *v79 = _Q0;
            v79 += 2;
            v80 -= 16;
          }
          while (v80);
          if (NumElements == v72)
            return _Q0.i16[0];
        }
        else
        {
          v72 = 0;
        }
        v86 = &RawStringData[4 * v72];
        v87 = NumElements - v72;
        v88 = &a3->i16[v72];
        do
        {
          v89 = *(_DWORD *)v86;
          v86 += 4;
          _Q0.i32[0] = v89;
          __asm { FCVT            H0, S0 }
          *v88++ = _Q0.i16[0];
          --v87;
        }
        while (v87);
        return _Q0.i16[0];
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        if ((unint64_t)NumElements >= 0x10)
        {
          v73 = NumElements & 0x7FFFFFFFFFFFFFF0;
          v96 = (float16x8_t *)(RawStringData + 64);
          v97 = a3 + 1;
          v98 = NumElements & 0xFFFFFFFFFFFFFFF0;
          do
          {
            _Q3 = v96[-2];
            _Q2 = v96[-1];
            _Q1 = v96[-4];
            _Q4 = v96[-3];
            _Q5 = v96[2];
            _Q0 = v96[3];
            _Q7 = *v96;
            _Q6 = v96[1];
            v96 += 8;
            _D16 = _Q1.i64[1];
            __asm
            {
              FCVT            H1, D1
              FCVT            H17, D4
              FCVT            H16, D16
            }
            _Q4.i64[0] = _Q4.i64[1];
            __asm { FCVT            H4, D4 }
            _D18 = _Q7.i64[1];
            __asm { FCVT            H18, D18 }
            _Q1.i16[1] = _D16;
            __asm { FCVT            H7, D7 }
            _Q7.i16[1] = _D18;
            __asm { FCVT            H16, D6 }
            _Q1.i16[2] = _H17;
            _Q7.i16[2] = _D16;
            __asm { FCVT            H16, D3 }
            _Q3.i64[0] = _Q3.i64[1];
            _Q1.i16[3] = _Q4.i16[0];
            __asm
            {
              FCVT            H3, D3
              FCVT            H4, D2
            }
            _Q2.i64[0] = _Q2.i64[1];
            __asm { FCVT            H2, D2 }
            _Q1.i16[4] = _D16;
            _Q6.i64[0] = _Q6.i64[1];
            __asm { FCVT            H6, D6 }
            _Q7.i16[3] = _Q6.i16[0];
            _Q1.i16[5] = _Q3.i16[0];
            __asm { FCVT            H3, D5 }
            _Q7.i16[4] = _Q3.i16[0];
            _Q3.i64[0] = _Q5.i64[1];
            _Q1.i16[6] = _Q4.i16[0];
            __asm { FCVT            H3, D3 }
            _Q7.i16[5] = _Q3.i16[0];
            __asm { FCVT            H3, D0 }
            _Q1.i16[7] = _Q2.i16[0];
            _Q7.i16[6] = _Q3.i16[0];
            _Q0.i64[0] = _Q0.i64[1];
            __asm { FCVT            H0, D0 }
            _Q7.i16[7] = _Q0.i16[0];
            v97[-1] = _Q1;
            *v97 = _Q7;
            v97 += 2;
            v98 -= 16;
          }
          while (v98);
          if (NumElements == v73)
            return _Q0.i16[0];
        }
        else
        {
          v73 = 0;
        }
        v109 = &RawStringData[8 * v73];
        v110 = NumElements - v73;
        v111 = &a3->i16[v73];
        do
        {
          v112 = *(_QWORD *)v109;
          v109 += 8;
          _Q0.i64[0] = v112;
          __asm { FCVT            H0, D0 }
          *v111++ = _Q0.i16[0];
          --v110;
        }
        while (v110);
        return _Q0.i16[0];
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return _Q0.i16[0];
        goto LABEL_153;
      }
LABEL_155:
      if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
      {
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        mlir::detail::unpackQuantizedData<half>(RawStringData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
        return _Q0.i16[0];
      }
      llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v155, NumElements);
      mlir::detail::unpackBooleanData(RawStringData, v4, (uint64_t)v155[0], (unint64_t)v155[1]);
      v76 = (char *)v155[0];
      if (NumElements < 1)
        goto LABEL_206;
      if ((v8 & 1) != 0)
      {
        _Q0.i32[0] = 0;
        v75.i16[0] = 15360;
        if (*(_BYTE *)v155[0])
          *(float *)_Q0.i32 = v75.f32[0];
        if ((unint64_t)NumElements < 0x10)
        {
          v77 = 0;
LABEL_189:
          v117 = NumElements - v77;
          v118 = &a3->i16[v77];
          do
          {
            *v118++ = _Q0.i16[0];
            --v117;
          }
          while (v117);
          goto LABEL_206;
        }
        v77 = NumElements & 0x7FFFFFFFFFFFFFF0;
        v114 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
        v115 = (int16x8_t *)&a3[1];
        v116 = NumElements & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v115[-1] = v114;
          *v115 = v114;
          v115 += 2;
          v116 -= 16;
        }
        while (v116);
        if (NumElements != v77)
          goto LABEL_189;
LABEL_206:
        if (v76 != (char *)v156)
          free(v76);
        return _Q0.i16[0];
      }
      if ((unint64_t)NumElements >= 8)
      {
        if ((unint64_t)NumElements >= 0x20)
        {
          v113 = NumElements & 0x7FFFFFFFFFFFFFE0;
          v119 = (int8x16_t *)((char *)v155[0] + 16);
          v120 = a3 + 2;
          _Q0.i16[0] = 257;
          v121 = NumElements & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v122 = vtstq_s8(v119[-1], v119[-1]);
            v123 = vtstq_s8(*v119, *v119);
            v124 = vmovl_u8((uint8x8_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL), (int8x8_t)0x101010101010101));
            v125 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v124.i8))), vcvtq_f32_u32(vmovl_high_u16(v124)));
            v126 = vmovl_u8((uint8x8_t)vand_s8(*(int8x8_t *)v122.i8, (int8x8_t)0x101010101010101));
            v127 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v126.i8))), vcvtq_f32_u32(vmovl_high_u16(v126)));
            v128 = vmovl_u8((uint8x8_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL), (int8x8_t)0x101010101010101));
            v129 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v128.i8))), vcvtq_f32_u32(vmovl_high_u16(v128)));
            v130 = vmovl_u8((uint8x8_t)vand_s8(*(int8x8_t *)v123.i8, (int8x8_t)0x101010101010101));
            *(float16x4_t *)v123.i8 = vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v130.i8)));
            v75 = vcvtq_f32_u32(vmovl_high_u16(v130));
            v120[-2] = v127;
            v120[-1] = v125;
            *v120 = vcvt_hight_f16_f32(*(int16x4_t *)v123.i8, v75);
            v120[1] = v129;
            v120 += 4;
            v119 += 2;
            v121 -= 32;
          }
          while (v121);
          if (NumElements == v113)
            goto LABEL_206;
          if ((NumElements & 0x18) == 0)
            goto LABEL_201;
        }
        else
        {
          v113 = 0;
        }
        v131 = v113;
        v113 = NumElements & 0xFFFFFFFFFFFFFFF8;
        v132 = (int8x8_t *)&v76[v131];
        v133 = (float16x8_t *)((char *)a3 + 2 * v131);
        v134 = v131 - (NumElements & 0xFFFFFFFFFFFFFFF8);
        _Q0.i16[0] = 257;
        do
        {
          v135 = *v132++;
          v136 = vmovl_u8((uint8x8_t)vbic_s8((int8x8_t)0x101010101010101, vceqz_s8(v135)));
          v137 = (int16x4_t)vcvt_f16_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v136.i8)));
          v75 = vcvtq_f32_u32(vmovl_high_u16(v136));
          *v133++ = vcvt_hight_f16_f32(v137, v75);
          v134 += 8;
        }
        while (v134);
        if (NumElements == v113)
          goto LABEL_206;
      }
      else
      {
        v113 = 0;
      }
LABEL_201:
      v138 = &v76[v113];
      v139 = NumElements - v113;
      v140 = &a3->i16[v113];
      _Q0.i16[0] = 0;
      v75.i16[0] = 15360;
      do
      {
        if (*v138++)
          v142 = v75.f32[0];
        else
          v142 = 0.0;
        *v140++ = LOWORD(v142);
        --v139;
      }
      while (v139);
      goto LABEL_206;
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v12 = (void *)v9;
    else
      v12 = 0;
    v155[0] = v12;
    if (v12)
    {
      RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v155);
      v4 = v13;
      if ((v8 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_21:
    for (i = 0; i != NumElements; ++i)
    {
      if (v8)
        v17 = 0;
      else
        v17 = i;
      _Q0.i8[0] = RawStringData[v17];
      *(float *)_Q0.i32 = (float)_Q0.u32[0];
      __asm { FCVT            H0, S0 }
      a3->i16[i] = _Q0.i16[0];
    }
    return _Q0.i16[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_29:
    for (j = 0; j != NumElements; ++j)
    {
      if (v8)
        v23 = 0;
      else
        v23 = j;
      _Q0.i8[0] = RawStringData[v23];
      _Q0.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)_Q0.i8)).u64[0];
      *(float *)_Q0.i32 = (float)_Q0.i32[0];
      __asm { FCVT            H0, S0 }
      a3->i16[j] = _Q0.i16[0];
    }
    return _Q0.i16[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    if ((unint64_t)NumElements >= 2)
    {
      v28 = 0;
      v25 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v29 = 0;
        else
          v29 = v28;
        _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v29];
        if (v8)
          v30 = 0;
        else
          v30 = v28 + 1;
        *(float *)_Q0.i32 = (float)_Q0.u32[0];
        __asm { FCVT            H0, S0 }
        LOWORD(_S1) = *(_WORD *)&RawStringData[2 * v30];
        _S1 = (float)LODWORD(_S1);
        __asm { FCVT            H1, S1 }
        v31 = &a3->i16[v28];
        *v31 = _Q0.i16[0];
        v31[1] = LOWORD(_S1);
        v28 += 2;
      }
      while (v28 != v25);
      goto LABEL_208;
    }
    v25 = 0;
    do
    {
      if (v8)
        v143 = 0;
      else
        v143 = v25;
      _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v143];
      *(float *)_Q0.i32 = (float)_Q0.u32[0];
      __asm { FCVT            H0, S0 }
      a3->i16[v25++] = _Q0.i16[0];
LABEL_208:
      ;
    }
    while (NumElements != v25);
    return _Q0.i16[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_45:
    if ((unint64_t)NumElements >= 2)
    {
      v33 = 0;
      v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v34 = 0;
        else
          v34 = v33;
        if (v8)
          v35 = 0;
        else
          v35 = v33 + 1;
        _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v34];
        _Q0.i64[0] = vmovl_s16(*(int16x4_t *)_Q0.i8).u64[0];
        *(float *)_Q0.i32 = (float)_Q0.i32[0];
        __asm { FCVT            H0, S0 }
        _D1.i16[0] = *(_WORD *)&RawStringData[2 * v35];
        _D1 = (int16x4_t)vmovl_s16(_D1).u64[0];
        *(float *)_D1.i32 = (float)_D1.i32[0];
        __asm { FCVT            H1, S1 }
        v36 = &a3->i16[v33];
        *v36 = _Q0.i16[0];
        v36[1] = _D1.i16[0];
        v33 += 2;
      }
      while (v33 != v27);
      goto LABEL_213;
    }
    v27 = 0;
    do
    {
      if (v8)
        v144 = 0;
      else
        v144 = v27;
      _Q0.i16[0] = *(_WORD *)&RawStringData[2 * v144];
      _Q0.i64[0] = vmovl_s16(*(int16x4_t *)_Q0.i8).u64[0];
      *(float *)_Q0.i32 = (float)_Q0.i32[0];
      __asm { FCVT            H0, S0 }
      a3->i16[v27++] = _Q0.i16[0];
LABEL_213:
      ;
    }
    while (NumElements != v27);
    return _Q0.i16[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_60:
    if ((unint64_t)NumElements >= 2)
    {
      v38 = 0;
      v32 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v39 = 0;
        else
          v39 = v38;
        v40 = *(_DWORD *)&RawStringData[4 * v39];
        if (v8)
          v41 = 0;
        else
          v41 = v38 + 1;
        *(float *)_Q0.i32 = (float)v40;
        _S1 = (float)*(unsigned int *)&RawStringData[4 * v41];
        __asm
        {
          FCVT            H0, S0
          FCVT            H1, S1
        }
        v43 = &a3->i16[v38];
        *v43 = _Q0.i16[0];
        v43[1] = LOWORD(_S1);
        v38 += 2;
      }
      while (v38 != v32);
      goto LABEL_218;
    }
    v32 = 0;
    do
    {
      if (v8)
        v145 = 0;
      else
        v145 = v32;
      *(float *)_Q0.i32 = (float)*(unsigned int *)&RawStringData[4 * v145];
      __asm { FCVT            H0, S0 }
      a3->i16[v32++] = _Q0.i16[0];
LABEL_218:
      ;
    }
    while (NumElements != v32);
    return _Q0.i16[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_75:
    if ((unint64_t)NumElements >= 2)
    {
      v45 = 0;
      v37 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v46 = 0;
        else
          v46 = v45;
        v47 = *(_DWORD *)&RawStringData[4 * v46];
        if (v8)
          v48 = 0;
        else
          v48 = v45 + 1;
        *(float *)_Q0.i32 = (float)v47;
        _S1 = (float)*(int *)&RawStringData[4 * v48];
        __asm
        {
          FCVT            H0, S0
          FCVT            H1, S1
        }
        v50 = &a3->i16[v45];
        *v50 = _Q0.i16[0];
        v50[1] = LOWORD(_S1);
        v45 += 2;
      }
      while (v45 != v37);
      goto LABEL_223;
    }
    v37 = 0;
    do
    {
      if (v8)
        v146 = 0;
      else
        v146 = v37;
      *(float *)_Q0.i32 = (float)*(int *)&RawStringData[4 * v146];
      __asm { FCVT            H0, S0 }
      a3->i16[v37++] = _Q0.i16[0];
LABEL_223:
      ;
    }
    while (NumElements != v37);
    return _Q0.i16[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_90:
    if ((unint64_t)NumElements >= 2)
    {
      v52 = 0;
      v44 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v53 = 0;
        else
          v53 = v52;
        if (v8)
          v54 = 0;
        else
          v54 = v52 + 1;
        *(float *)_Q0.i32 = (float)*(unint64_t *)&RawStringData[8 * v53];
        _S1 = (float)*(unint64_t *)&RawStringData[8 * v54];
        __asm
        {
          FCVT            H0, S0
          FCVT            H1, S1
        }
        v56 = &a3->i16[v52];
        *v56 = _Q0.i16[0];
        v56[1] = LOWORD(_S1);
        v52 += 2;
      }
      while (v52 != v44);
      goto LABEL_228;
    }
    v44 = 0;
    do
    {
      if (v8)
        v147 = 0;
      else
        v147 = v44;
      *(float *)_Q0.i32 = (float)*(unint64_t *)&RawStringData[8 * v147];
      __asm { FCVT            H0, S0 }
      a3->i16[v44++] = _Q0.i16[0];
LABEL_228:
      ;
    }
    while (NumElements != v44);
    return _Q0.i16[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_105:
    if ((unint64_t)NumElements >= 2)
    {
      v67 = 0;
      v51 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v68 = 0;
        else
          v68 = v67;
        if (v8)
          v69 = 0;
        else
          v69 = v67 + 1;
        *(float *)_Q0.i32 = (float)*(uint64_t *)&RawStringData[8 * v68];
        _S1 = (float)*(uint64_t *)&RawStringData[8 * v69];
        __asm
        {
          FCVT            H0, S0
          FCVT            H1, S1
        }
        v71 = &a3->i16[v67];
        *v71 = _Q0.i16[0];
        v71[1] = LOWORD(_S1);
        v67 += 2;
      }
      while (v67 != v51);
      goto LABEL_233;
    }
    v51 = 0;
    do
    {
      if (v8)
        v148 = 0;
      else
        v148 = v51;
      *(float *)_Q0.i32 = (float)*(uint64_t *)&RawStringData[8 * v148];
      __asm { FCVT            H0, S0 }
      a3->i16[v51++] = _Q0.i16[0];
LABEL_233:
      ;
    }
    while (NumElements != v51);
    return _Q0.i16[0];
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    _Q0.i16[0] = *(_WORD *)RawStringData;
    a3->i16[0] = *(_WORD *)RawStringData;
    return _Q0.i16[0];
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    _Q0.i32[0] = *(_DWORD *)RawStringData;
    __asm { FCVT            H0, S0 }
    a3->i16[0] = _Q0.i16[0];
    return _Q0.i16[0];
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    _Q0.i64[0] = *(_QWORD *)RawStringData;
    __asm { FCVT            H0, D0 }
    a3->i16[0] = _Q0.i16[0];
    return _Q0.i16[0];
  }
  NumElements = 1;
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_155;
LABEL_153:
  if ((unint64_t)NumElements >= 2)
  {
    v91 = 0;
    v74 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v8)
        v92 = 0;
      else
        v92 = v91;
      if (v8)
        v93 = 0;
      else
        v93 = v91 + 1;
      _Q0.i32[0] = *(unsigned __int16 *)&RawStringData[2 * v92] << 16;
      _S1 = *(unsigned __int16 *)&RawStringData[2 * v93] << 16;
      __asm
      {
        FCVT            H0, S0
        FCVT            H1, S1
      }
      v95 = &a3->i16[v91];
      *v95 = _Q0.i16[0];
      v95[1] = _S1;
      v91 += 2;
    }
    while (v91 != v74);
    goto LABEL_238;
  }
  v74 = 0;
  do
  {
    if (v8)
      v149 = 0;
    else
      v149 = v74;
    _Q0.i32[0] = *(unsigned __int16 *)&RawStringData[2 * v149] << 16;
    __asm { FCVT            H0, S0 }
    a3->i16[v74++] = _Q0.i16[0];
LABEL_238:
    ;
  }
  while (NumElements != v74);
  return _Q0.i16[0];
}

void mlir::copyElementsAttrData<__emulated_bf16>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *Type;
  _QWORD *v6;
  int v7;
  unsigned __int8 *RawStringData;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  float v13;
  int64_t NumElements;
  int8x8_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  float v20;
  uint64_t k;
  uint64_t v22;
  int16x4_t v23;
  uint64_t m;
  uint64_t v25;
  unint64_t mm;
  unint64_t v27;
  uint64_t v28;
  float32x2_t v29;
  _WORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint32x2_t v33;
  float32x2_t v34;
  uint32x2_t v35;
  unint64_t v36;
  float v37;
  unint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  int32x2_t v44;
  float32x2_t v45;
  uint32x2_t v46;
  unint64_t v47;
  float v48;
  unint64_t v49;
  uint64_t v50;
  float32x2_t v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64x2_t v55;
  unint64_t v56;
  float v57;
  uint64_t n;
  uint64_t v59;
  float v66;
  uint64_t v67;
  float32x2_t v68;
  _WORD *v69;
  uint64_t v70;
  uint64_t v71;
  int64x2_t v72;
  unint64_t v73;
  float v74;
  uint64_t ii;
  uint64_t v76;
  float v77;
  uint64_t jj;
  uint64_t v79;
  float v80;
  float v81;
  uint64_t kk;
  uint64_t v83;
  float v84;
  float v85;
  int8x8_t v86;
  _BYTE *v87;
  unsigned int IntOrFloatBitWidth;
  uint64_t v89;
  unint64_t v90;
  float32x2_t v92;
  _WORD *v93;
  uint64_t v94;
  uint64_t v95;
  float32x2_t v96;
  unint64_t v97;
  float v98;
  float v99;
  uint64_t OperandRange;
  _QWORD v101[2];
  unsigned __int8 *v102;
  uint64_t v103;
  void *v104[3];
  _QWORD v105[6];

  v105[5] = *MEMORY[0x1E0C80C00];
  v102 = (unsigned __int8 *)a1;
  v103 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v102);
  v6 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v101[0] = v6;
  v101[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v101);
  v7 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v102);
  RawStringData = v102;
  if (mlir::DenseElementsAttr::classof((uint64_t)v102))
    v9 = RawStringData;
  else
    v9 = 0;
  v104[0] = v9;
  if (v9)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v104);
    v3 = v10;
    if ((v7 & 1) == 0)
    {
LABEL_19:
      NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v102, v103);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return;
        goto LABEL_21;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return;
        goto LABEL_29;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return;
        goto LABEL_39;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return;
        goto LABEL_49;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return;
        goto LABEL_59;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return;
LABEL_65:
        if ((unint64_t)NumElements >= 2)
        {
          v39 = 0;
          v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
          v40 = (float32x2_t)vdup_n_s32(0x3B800000u);
          v41 = (_WORD *)a3;
          do
          {
            if (v7)
              v42 = 0;
            else
              v42 = v39;
            if (v7)
              v43 = 0;
            else
              v43 = v39 + 1;
            v44.i32[0] = *(_DWORD *)&RawStringData[4 * v42];
            v44.i32[1] = *(_DWORD *)&RawStringData[4 * v43];
            v45 = vcvt_f32_s32(v44);
            v46 = vshr_n_u32((uint32x2_t)vmla_f32(v45, v40, (float32x2_t)vand_s8((int8x8_t)v45, (int8x8_t)0x7F0000007FLL)), 0x10uLL);
            v41[1] = v46.i16[2];
            *v41 = v46.i16[0];
            v41 += 2;
            v39 += 2;
          }
          while (v39 != v27);
          if (NumElements == v27)
            return;
        }
        else
        {
          v27 = 0;
        }
        do
        {
          if (v7)
            v47 = 0;
          else
            v47 = v27;
          v48 = (float)*(int *)&RawStringData[4 * v47]
              + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)*(int *)&RawStringData[4 * v47]) & 0xFF800000)
                      * 0.0039062);
          *(_WORD *)(a3 + 2 * v27++) = HIWORD(v48);
        }
        while (NumElements != v27);
        return;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return;
LABEL_85:
        if ((unint64_t)NumElements >= 2)
        {
          v50 = 0;
          v38 = NumElements & 0xFFFFFFFFFFFFFFFELL;
          v51 = (float32x2_t)vdup_n_s32(0x3B800000u);
          v52 = (_WORD *)a3;
          do
          {
            if (v7)
              v53 = 0;
            else
              v53 = v50;
            if (v7)
              v54 = 0;
            else
              v54 = v50 + 1;
            v55.i64[0] = *(_QWORD *)&RawStringData[8 * v53];
            v55.i64[1] = *(_QWORD *)&RawStringData[8 * v54];
            *(float32x2_t *)v55.i8 = vcvt_f32_f64(vcvtq_f64_u64(v55));
            *(uint32x2_t *)v55.i8 = vshr_n_u32((uint32x2_t)vmla_f32(*(float32x2_t *)v55.i8, v51, (float32x2_t)vand_s8(*(int8x8_t *)v55.i8, (int8x8_t)0x7F0000007FLL)), 0x10uLL);
            v52[1] = v55.i16[2];
            *v52 = v55.i16[0];
            v52 += 2;
            v50 += 2;
          }
          while (v50 != v38);
          if (NumElements == v38)
            return;
        }
        else
        {
          v38 = 0;
        }
        do
        {
          if (v7)
            v56 = 0;
          else
            v56 = v38;
          v57 = (float)*(unint64_t *)&RawStringData[8 * v56]
              + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)*(unint64_t *)&RawStringData[8 * v56]) & 0xFF800000)
                      * 0.0039062);
          *(_WORD *)(a3 + 2 * v38++) = HIWORD(v57);
        }
        while (NumElements != v38);
        return;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return;
LABEL_105:
        if ((unint64_t)NumElements >= 2)
        {
          v67 = 0;
          v49 = NumElements & 0xFFFFFFFFFFFFFFFELL;
          v68 = (float32x2_t)vdup_n_s32(0x3B800000u);
          v69 = (_WORD *)a3;
          do
          {
            if (v7)
              v70 = 0;
            else
              v70 = v67;
            if (v7)
              v71 = 0;
            else
              v71 = v67 + 1;
            v72.i64[0] = *(_QWORD *)&RawStringData[8 * v70];
            v72.i64[1] = *(_QWORD *)&RawStringData[8 * v71];
            *(float32x2_t *)v72.i8 = vcvt_f32_f64(vcvtq_f64_s64(v72));
            *(uint32x2_t *)v72.i8 = vshr_n_u32((uint32x2_t)vmla_f32(*(float32x2_t *)v72.i8, v68, (float32x2_t)vand_s8(*(int8x8_t *)v72.i8, (int8x8_t)0x7F0000007FLL)), 0x10uLL);
            v69[1] = v72.i16[2];
            *v69 = v72.i16[0];
            v69 += 2;
            v67 += 2;
          }
          while (v67 != v49);
          if (NumElements == v49)
            return;
        }
        else
        {
          v49 = 0;
        }
        do
        {
          if (v7)
            v73 = 0;
          else
            v73 = v49;
          v74 = (float)*(uint64_t *)&RawStringData[8 * v73]
              + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)*(uint64_t *)&RawStringData[8 * v73]) & 0xFF800000)
                      * 0.0039062);
          *(_WORD *)(a3 + 2 * v49++) = HIWORD(v74);
        }
        while (NumElements != v49);
        return;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return;
        goto LABEL_125;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return;
        goto LABEL_149;
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return;
        goto LABEL_159;
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return;
        goto LABEL_169;
      }
      goto LABEL_175;
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(_QWORD *)RawStringData + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v11 = RawStringData;
    else
      v11 = 0;
    v104[0] = v11;
    if (v11)
    {
      RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v104);
      v3 = v12;
      if ((v7 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v7 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_21:
    for (i = 0; i != NumElements; ++i)
    {
      if (v7)
        v17 = 0;
      else
        v17 = i;
      LOBYTE(v13) = RawStringData[v17];
      v13 = (float)LODWORD(v13)
          + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)LODWORD(v13)) & 0xFF800000) * 0.0039062);
      *(_WORD *)(a3 + 2 * i) = HIWORD(v13);
    }
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_29:
    for (j = 0; j != NumElements; ++j)
    {
      if (v7)
        v19 = 0;
      else
        v19 = j;
      v15.i8[0] = RawStringData[v19];
      v15 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v15)).u64[0];
      *(float *)v15.i32 = (float)v15.i32[0]
                        + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)v15.i32[0]) & 0xFF800000) * 0.0039062);
      *(_WORD *)(a3 + 2 * j) = v15.i16[1];
    }
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    for (k = 0; k != NumElements; ++k)
    {
      if (v7)
        v22 = 0;
      else
        v22 = k;
      LOWORD(v20) = *(_WORD *)&RawStringData[2 * v22];
      v20 = (float)LODWORD(v20)
          + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)LODWORD(v20)) & 0xFF800000) * 0.0039062);
      *(_WORD *)(a3 + 2 * k) = HIWORD(v20);
    }
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_49:
    for (m = 0; m != NumElements; ++m)
    {
      if (v7)
        v25 = 0;
      else
        v25 = m;
      v23.i16[0] = *(_WORD *)&RawStringData[2 * v25];
      v23 = (int16x4_t)vmovl_s16(v23).u64[0];
      *(float *)v23.i32 = (float)v23.i32[0]
                        + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)v23.i32[0]) & 0xFF800000) * 0.0039062);
      *(_WORD *)(a3 + 2 * m) = v23.i16[1];
    }
    return;
  }
  if (!mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      NumElements = 1;
      goto LABEL_65;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      NumElements = 1;
      goto LABEL_85;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      NumElements = 1;
      goto LABEL_105;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_125:
      for (n = 0; n != NumElements; ++n)
      {
        if (v7)
          v59 = 0;
        else
          v59 = n;
        _H0 = *(_WORD *)&RawStringData[2 * v59];
        __asm { FCVT            S0, H0 }
        v66 = _S0 + (float)(COERCE_FLOAT(LODWORD(_S0) & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * n) = HIWORD(v66);
      }
      return;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_149:
      for (ii = 0; ii != NumElements; ++ii)
      {
        if (v7)
          v76 = 0;
        else
          v76 = ii;
        v77 = *(float *)&RawStringData[4 * v76]
            + (float)(COERCE_FLOAT(*(_DWORD *)&RawStringData[4 * v76] & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * ii) = HIWORD(v77);
      }
      return;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_159:
      for (jj = 0; jj != NumElements; ++jj)
      {
        if (v7)
          v79 = 0;
        else
          v79 = jj;
        v80 = *(double *)&RawStringData[8 * v79];
        v81 = v80 + (float)(COERCE_FLOAT(LODWORD(v80) & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * jj) = HIWORD(v81);
      }
      return;
    }
    NumElements = 1;
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
LABEL_169:
      for (kk = 0; kk != NumElements; ++kk)
      {
        if (v7)
          v83 = 0;
        else
          v83 = kk;
        LODWORD(v84) = *(unsigned __int16 *)&RawStringData[2 * v83] << 16;
        v85 = v84 + (float)(COERCE_FLOAT(LODWORD(v84) & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * kk) = HIWORD(v85);
      }
      return;
    }
LABEL_175:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<__emulated_bf16>(RawStringData, v3, a3, NumElements, IntOrFloatBitWidth);
      return;
    }
    llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v104, NumElements);
    mlir::detail::unpackBooleanData(RawStringData, v3, (uint64_t)v104[0], (unint64_t)v104[1]);
    v87 = v104[0];
    if (NumElements < 1)
      goto LABEL_196;
    if (NumElements == 1)
    {
      v90 = 0;
    }
    else
    {
      v89 = 0;
      v90 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      __asm { FMOV            V1.2S, #1.0 }
      v92 = (float32x2_t)vdup_n_s32(0x3B800000u);
      v93 = (_WORD *)a3;
      do
      {
        if (v7)
          v94 = 0;
        else
          v94 = v89;
        if (v7)
          v95 = 0;
        else
          v95 = v89 + 1;
        v86.i8[0] = v87[v94];
        v86.i8[4] = v87[v95];
        v96 = (float32x2_t)vbic_s8(_D1, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v86, (int8x8_t)0xFF000000FFLL)));
        v86 = (int8x8_t)vshr_n_u32((uint32x2_t)vmla_f32(v96, v92, v96), 0x10uLL);
        v93[1] = v86.i16[2];
        *v93 = v86.i16[0];
        v93 += 2;
        v89 += 2;
      }
      while (v89 != v90);
      if (NumElements == v90)
      {
LABEL_196:
        if (v87 != (_BYTE *)v105)
          free(v87);
        return;
      }
    }
    do
    {
      if (v7)
        v97 = 0;
      else
        v97 = v90;
      if (v87[v97])
        v98 = 1.0;
      else
        v98 = 0.0;
      v99 = v98 + (float)(v98 * 0.0039062);
      *(_WORD *)(a3 + 2 * v90++) = HIWORD(v99);
    }
    while (NumElements != v90);
    goto LABEL_196;
  }
  NumElements = 1;
LABEL_59:
  if ((unint64_t)NumElements < 2)
  {
    for (mm = 0; mm != NumElements; ++mm)
    {
LABEL_76:
      if (v7)
        v36 = 0;
      else
        v36 = mm;
      v37 = (float)*(unsigned int *)&RawStringData[4 * v36]
          + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)*(unsigned int *)&RawStringData[4 * v36]) & 0xFF800000)
                  * 0.0039062);
      *(_WORD *)(a3 + 2 * mm) = HIWORD(v37);
    }
    return;
  }
  v28 = 0;
  mm = NumElements & 0xFFFFFFFFFFFFFFFELL;
  v29 = (float32x2_t)vdup_n_s32(0x3B800000u);
  v30 = (_WORD *)a3;
  do
  {
    if (v7)
      v31 = 0;
    else
      v31 = v28;
    if (v7)
      v32 = 0;
    else
      v32 = v28 + 1;
    v33.i32[0] = *(_DWORD *)&RawStringData[4 * v31];
    v33.i32[1] = *(_DWORD *)&RawStringData[4 * v32];
    v34 = vcvt_f32_u32(v33);
    v35 = vshr_n_u32((uint32x2_t)vmla_f32(v34, v29, (float32x2_t)vand_s8((int8x8_t)v34, (int8x8_t)0x7F0000007FLL)), 0x10uLL);
    v30[1] = v35.i16[2];
    *v30 = v35.i16[0];
    v30 += 2;
    v28 += 2;
  }
  while (v28 != mm);
  if (NumElements != mm)
    goto LABEL_76;
}

float32_t mlir::copyElementsAttrData<float>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int8 *MutableRawData;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int64_t NumElements;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  float v20;
  unint64_t v21;
  int16x4_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float *v56;
  uint64_t v57;
  float32x4_t *v58;
  float32x4_t *v59;
  unint64_t v60;
  float32x4_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int64_t v64;
  __int32 *v65;
  __int32 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unsigned int IntOrFloatBitWidth;
  float64x2_t *v83;
  float32x4_t *v84;
  unint64_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float32x4_t v90;
  double *v91;
  int64_t v92;
  _DWORD *v93;
  double v94;
  int16x4_t *v95;
  int32x4_t *v96;
  unint64_t v97;
  int32x4_t v100;
  int32x4_t v101;
  unsigned __int8 *v102;
  int64_t v103;
  _DWORD *v104;
  int v105;
  unint64_t v106;
  int32x4_t v107;
  int32x4_t *v108;
  unint64_t v109;
  int64_t v110;
  _DWORD *v111;
  int8x16_t *v112;
  float32x4_t *v113;
  unint64_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x8_t v117;
  int8x8_t v118;
  unint64_t v119;
  int8x8_t *v120;
  float32x4_t *v121;
  unint64_t v122;
  int8x8_t v123;
  int8x8_t v124;
  char *v125;
  unint64_t v126;
  float *v127;
  float v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t OperandRange;
  _QWORD v140[2];
  uint64_t v141;
  uint64_t v142;
  void *v143[3];
  _QWORD v144[6];

  v144[5] = *MEMORY[0x1E0C80C00];
  v141 = a1;
  v142 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v141);
  v7 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v140[0] = v7;
  v140[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v140);
  v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v141);
  v9 = v141;
  if (mlir::DenseElementsAttr::classof(v141))
    v10 = (void *)v9;
  else
    v10 = 0;
  v143[0] = v10;
  if (!v10)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v12 = (void *)v9;
    else
      v12 = 0;
    v143[0] = v12;
    if (v12)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v143);
      v4 = v13;
      if ((v8 & 1) != 0)
        goto LABEL_14;
    }
    else if ((v8 & 1) != 0)
    {
      goto LABEL_14;
    }
LABEL_19:
    NumElements = mlir::ElementsAttr::getNumElements(v141, v142);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_21;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_29;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_39;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_45;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_60;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_75;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_90;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_105;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      goto LABEL_120;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements >= 1)
      {
        v57 = 0;
        if ((unint64_t)NumElements < 8)
          goto LABEL_140;
        if ((unint64_t)((char *)a3 - (char *)MutableRawData) < 0x20)
          goto LABEL_140;
        v57 = NumElements & 0x7FFFFFFFFFFFFFF8;
        v58 = (float32x4_t *)(MutableRawData + 16);
        v59 = (float32x4_t *)(a3 + 4);
        v60 = NumElements & 0xFFFFFFFFFFFFFFF8;
        do
        {
          _Q0 = v58[-1];
          v61 = *v58;
          v59[-1] = _Q0;
          *v59 = v61;
          v58 += 2;
          v59 += 2;
          v60 -= 8;
        }
        while (v60);
        if (NumElements != v57)
        {
LABEL_140:
          v62 = v57;
          v63 = &MutableRawData[4 * v57];
          v64 = NumElements - v57;
          v65 = &a3[v62];
          do
          {
            v66 = *(_DWORD *)v63;
            v63 += 4;
            _Q0.i32[0] = v66;
            *v65++ = v66;
            --v64;
          }
          while (v64);
        }
      }
      return _Q0.f32[0];
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      if ((unint64_t)NumElements >= 8)
      {
        v78 = NumElements & 0x7FFFFFFFFFFFFFF8;
        v83 = (float64x2_t *)(MutableRawData + 32);
        v84 = (float32x4_t *)(a3 + 4);
        v85 = NumElements & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v87 = v83[-2];
          v86 = v83[-1];
          v89 = *v83;
          v88 = v83[1];
          v83 += 4;
          v90 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87), v86);
          _Q0 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v89), v88);
          v84[-1] = v90;
          *v84 = _Q0;
          v84 += 2;
          v85 -= 8;
        }
        while (v85);
        if (NumElements == v78)
          return _Q0.f32[0];
      }
      else
      {
        v78 = 0;
      }
      v91 = (double *)&MutableRawData[8 * v78];
      v92 = NumElements - v78;
      v93 = &a3[v78];
      do
      {
        v94 = *v91++;
        _Q0.f32[0] = v94;
        *v93++ = _Q0.i32[0];
        --v92;
      }
      while (v92);
      return _Q0.f32[0];
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return _Q0.f32[0];
      if ((unint64_t)NumElements >= 0x10)
      {
        v79 = NumElements & 0x7FFFFFFFFFFFFFF0;
        v95 = (int16x4_t *)(MutableRawData + 16);
        v96 = (int32x4_t *)(a3 + 8);
        v97 = NumElements & 0xFFFFFFFFFFFFFFF0;
        do
        {
          _Q0 = *(_OWORD *)v95[-2].i8;
          _Q1 = *(int32x4_t *)v95->i8;
          v100 = vshll_n_s16(*(int16x4_t *)&_Q0, 0x10uLL);
          __asm { SHLL2           V0.4S, V0.8H, #0x10 }
          v101 = vshll_n_s16(*v95, 0x10uLL);
          __asm { SHLL2           V1.4S, V1.8H, #0x10 }
          v96[-2] = v100;
          v96[-1] = (int32x4_t)_Q0;
          *v96 = v101;
          v96[1] = _Q1;
          v96 += 4;
          v95 += 4;
          v97 -= 16;
        }
        while (v97);
        if (NumElements == v79)
          return _Q0.f32[0];
      }
      else
      {
        v79 = 0;
      }
      v102 = &MutableRawData[2 * v79];
      v103 = NumElements - v79;
      v104 = &a3[v79];
      do
      {
        v105 = *(unsigned __int16 *)v102;
        v102 += 2;
        *v104++ = v105 << 16;
        --v103;
      }
      while (v103);
      return _Q0.f32[0];
    }
LABEL_165:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<float>(MutableRawData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
      return _Q0.f32[0];
    }
    llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v143, NumElements);
    mlir::detail::unpackBooleanData(MutableRawData, v4, (uint64_t)v143[0], (unint64_t)v143[1]);
    v80 = (char *)v143[0];
    if (NumElements < 1)
      goto LABEL_207;
    if ((v8 & 1) != 0)
    {
      _Q0.i32[0] = 0;
      if (*(_BYTE *)v143[0])
        _Q0.f32[0] = 1.0;
      if ((unint64_t)NumElements < 8)
      {
        v81 = 0;
LABEL_190:
        v110 = NumElements - v81;
        v111 = &a3[v81];
        do
        {
          *v111++ = _Q0.i32[0];
          --v110;
        }
        while (v110);
        goto LABEL_207;
      }
      v81 = NumElements & 0x7FFFFFFFFFFFFFF8;
      v107 = vdupq_lane_s32(*(int32x2_t *)_Q0.f32, 0);
      v108 = (int32x4_t *)(a3 + 4);
      v109 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v108[-1] = v107;
        *v108 = v107;
        v108 += 2;
        v109 -= 8;
      }
      while (v109);
      if (NumElements != v81)
        goto LABEL_190;
LABEL_207:
      if (v80 != (char *)v144)
        free(v80);
      return _Q0.f32[0];
    }
    if ((unint64_t)NumElements >= 8)
    {
      if ((unint64_t)NumElements >= 0x20)
      {
        v106 = NumElements & 0x7FFFFFFFFFFFFFE0;
        v112 = (int8x16_t *)((char *)v143[0] + 16);
        v113 = (float32x4_t *)(a3 + 16);
        _Q0.i32[0] = 65537;
        v114 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v115 = vtstq_s8(v112[-1], v112[-1]);
          v116 = vtstq_s8(*v112, *v112);
          v117 = (int8x8_t)vextq_s8(v115, v115, 8uLL).u64[0];
          v118 = (int8x8_t)vextq_s8(v116, v116, 8uLL).u64[0];
          v113[-4] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(*(int8x8_t *)v115.i8, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
          v113[-3] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip2_s8(*(int8x8_t *)v115.i8, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
          v113[-2] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(v117, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
          v113[-1] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip2_s8(v117, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
          *v113 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(*(int8x8_t *)v116.i8, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
          v113[1] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip2_s8(*(int8x8_t *)v116.i8, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
          v113[2] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(v118, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
          v113[3] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip2_s8(v118, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
          v112 += 2;
          v113 += 8;
          v114 -= 32;
        }
        while (v114);
        if (NumElements == v106)
          goto LABEL_207;
        if ((NumElements & 0x18) == 0)
          goto LABEL_202;
      }
      else
      {
        v106 = 0;
      }
      v119 = v106;
      v106 = NumElements & 0xFFFFFFFFFFFFFFF8;
      v120 = (int8x8_t *)&v80[v119];
      v121 = (float32x4_t *)&a3[v119];
      v122 = v119 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      _Q0.i32[0] = 65537;
      do
      {
        v123 = *v120++;
        v124 = vtst_s8(v123, v123);
        *v121 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(v124, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
        v121[1] = vcvtq_f32_u32(vmovl_u16((uint16x4_t)vand_s8(vzip2_s8(v124, (int8x8_t)0x1000100010001), (int8x8_t)0x1000100010001)));
        v121 += 2;
        v122 += 8;
      }
      while (v122);
      if (NumElements == v106)
        goto LABEL_207;
    }
    else
    {
      v106 = 0;
    }
LABEL_202:
    v125 = &v80[v106];
    v126 = NumElements - v106;
    v127 = (float *)&a3[v106];
    _Q0.i32[0] = 0;
    do
    {
      if (*v125++)
        v129 = 1.0;
      else
        v129 = 0.0;
      *v127++ = v129;
      --v126;
    }
    while (v126);
    goto LABEL_207;
  }
  MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v143);
  v4 = v11;
  if ((v8 & 1) == 0)
    goto LABEL_19;
LABEL_14:
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_21:
    for (i = 0; i != NumElements; ++i)
    {
      if (v8)
        v17 = 0;
      else
        v17 = i;
      _Q0.i8[0] = MutableRawData[v17];
      _Q0.f32[0] = (float)_Q0.u32[0];
      a3[i] = _Q0.i32[0];
    }
    return _Q0.f32[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_29:
    for (j = 0; j != NumElements; ++j)
    {
      if (v8)
        v19 = 0;
      else
        v19 = j;
      _Q0.i8[0] = MutableRawData[v19];
      _Q0.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)_Q0.f32)).u64[0];
      _Q0.f32[0] = (float)_Q0.i32[0];
      a3[j] = _Q0.i32[0];
    }
    return _Q0.f32[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    if ((unint64_t)NumElements >= 2)
    {
      v24 = 0;
      v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v25 = 0;
        else
          v25 = v24;
        if (v8)
          v26 = 0;
        else
          v26 = v24 + 1;
        _Q0.i16[0] = *(_WORD *)&MutableRawData[2 * v25];
        _Q0.f32[0] = (float)_Q0.u32[0];
        LOWORD(v20) = *(_WORD *)&MutableRawData[2 * v26];
        v20 = (float)LODWORD(v20);
        v27 = (float *)&a3[v24];
        *v27 = _Q0.f32[0];
        v27[1] = v20;
        v24 += 2;
      }
      while (v24 != v21);
      goto LABEL_209;
    }
    v21 = 0;
    do
    {
      if (v8)
        v130 = 0;
      else
        v130 = v21;
      _Q0.i16[0] = *(_WORD *)&MutableRawData[2 * v130];
      _Q0.f32[0] = (float)_Q0.u32[0];
      a3[v21++] = _Q0.i32[0];
LABEL_209:
      ;
    }
    while (NumElements != v21);
    return _Q0.f32[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_45:
    if ((unint64_t)NumElements >= 2)
    {
      v29 = 0;
      v23 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v30 = 0;
        else
          v30 = v29;
        _Q0.i16[0] = *(_WORD *)&MutableRawData[2 * v30];
        if (v8)
          v31 = 0;
        else
          v31 = v29 + 1;
        _Q0.i64[0] = vmovl_s16(*(int16x4_t *)_Q0.f32).u64[0];
        _Q0.f32[0] = (float)_Q0.i32[0];
        v22.i16[0] = *(_WORD *)&MutableRawData[2 * v31];
        v22 = (int16x4_t)vmovl_s16(v22).u64[0];
        *(float *)v22.i32 = (float)v22.i32[0];
        v32 = &a3[v29];
        *v32 = _Q0.i32[0];
        v32[1] = v22.i32[0];
        v29 += 2;
      }
      while (v29 != v23);
      goto LABEL_214;
    }
    v23 = 0;
    do
    {
      if (v8)
        v131 = 0;
      else
        v131 = v23;
      _Q0.i16[0] = *(_WORD *)&MutableRawData[2 * v131];
      _Q0.i64[0] = vmovl_s16(*(int16x4_t *)_Q0.f32).u64[0];
      _Q0.f32[0] = (float)_Q0.i32[0];
      a3[v23++] = _Q0.i32[0];
LABEL_214:
      ;
    }
    while (NumElements != v23);
    return _Q0.f32[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_60:
    if ((unint64_t)NumElements >= 2)
    {
      v34 = 0;
      v28 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v35 = 0;
        else
          v35 = v34;
        if (v8)
          v36 = 0;
        else
          v36 = v34 + 1;
        _Q0.f32[0] = (float)*(unsigned int *)&MutableRawData[4 * v35];
        v37 = (float)*(unsigned int *)&MutableRawData[4 * v36];
        v38 = (float *)&a3[v34];
        *v38 = _Q0.f32[0];
        v38[1] = v37;
        v34 += 2;
      }
      while (v34 != v28);
      goto LABEL_219;
    }
    v28 = 0;
    do
    {
      if (v8)
        v132 = 0;
      else
        v132 = v28;
      _Q0.f32[0] = (float)*(unsigned int *)&MutableRawData[4 * v132];
      a3[v28++] = _Q0.i32[0];
LABEL_219:
      ;
    }
    while (NumElements != v28);
    return _Q0.f32[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_75:
    if ((unint64_t)NumElements >= 2)
    {
      v40 = 0;
      v33 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v41 = 0;
        else
          v41 = v40;
        if (v8)
          v42 = 0;
        else
          v42 = v40 + 1;
        _Q0.f32[0] = (float)*(int *)&MutableRawData[4 * v41];
        v43 = (float)*(int *)&MutableRawData[4 * v42];
        v44 = (float *)&a3[v40];
        *v44 = _Q0.f32[0];
        v44[1] = v43;
        v40 += 2;
      }
      while (v40 != v33);
      goto LABEL_224;
    }
    v33 = 0;
    do
    {
      if (v8)
        v133 = 0;
      else
        v133 = v33;
      _Q0.f32[0] = (float)*(int *)&MutableRawData[4 * v133];
      a3[v33++] = _Q0.i32[0];
LABEL_224:
      ;
    }
    while (NumElements != v33);
    return _Q0.f32[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_90:
    if ((unint64_t)NumElements >= 2)
    {
      v46 = 0;
      v39 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v47 = 0;
        else
          v47 = v46;
        if (v8)
          v48 = 0;
        else
          v48 = v46 + 1;
        _Q0.f32[0] = (float)*(unint64_t *)&MutableRawData[8 * v47];
        v49 = (float)*(unint64_t *)&MutableRawData[8 * v48];
        v50 = (float *)&a3[v46];
        *v50 = _Q0.f32[0];
        v50[1] = v49;
        v46 += 2;
      }
      while (v46 != v39);
      goto LABEL_229;
    }
    v39 = 0;
    do
    {
      if (v8)
        v134 = 0;
      else
        v134 = v39;
      _Q0.f32[0] = (float)*(unint64_t *)&MutableRawData[8 * v134];
      *(float *)&a3[v39++] = _Q0.f32[0];
LABEL_229:
      ;
    }
    while (NumElements != v39);
    return _Q0.f32[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_105:
    if ((unint64_t)NumElements >= 2)
    {
      v52 = 0;
      v45 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v53 = 0;
        else
          v53 = v52;
        if (v8)
          v54 = 0;
        else
          v54 = v52 + 1;
        _Q0.f32[0] = (float)*(uint64_t *)&MutableRawData[8 * v53];
        v55 = (float)*(uint64_t *)&MutableRawData[8 * v54];
        v56 = (float *)&a3[v52];
        *v56 = _Q0.f32[0];
        v56[1] = v55;
        v52 += 2;
      }
      while (v52 != v45);
      goto LABEL_234;
    }
    v45 = 0;
    do
    {
      if (v8)
        v135 = 0;
      else
        v135 = v45;
      _Q0.f32[0] = (float)*(uint64_t *)&MutableRawData[8 * v135];
      *(float *)&a3[v45++] = _Q0.f32[0];
LABEL_234:
      ;
    }
    while (NumElements != v45);
    return _Q0.f32[0];
  }
  if (!mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      _Q0.i32[0] = *(_DWORD *)MutableRawData;
      *a3 = *(_DWORD *)MutableRawData;
      return _Q0.f32[0];
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      _Q0.f32[0] = *(double *)MutableRawData;
      *a3 = _Q0.i32[0];
      return _Q0.f32[0];
    }
    if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    {
      *a3 = *(unsigned __int16 *)MutableRawData << 16;
      return _Q0.f32[0];
    }
    NumElements = 1;
    goto LABEL_165;
  }
  NumElements = 1;
LABEL_120:
  if ((unint64_t)NumElements >= 2)
  {
    v67 = 0;
    v51 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v8)
        v68 = 0;
      else
        v68 = v67;
      if (v8)
        v69 = 0;
      else
        v69 = v67 + 1;
      _H0 = *(_WORD *)&MutableRawData[2 * v68];
      _H1 = *(_WORD *)&MutableRawData[2 * v69];
      __asm
      {
        FCVT            S0, H0
        FCVT            S1, H1
      }
      v77 = &a3[v67];
      *v77 = _Q0.i32[0];
      v77[1] = _S1;
      v67 += 2;
    }
    while (v67 != v51);
    goto LABEL_239;
  }
  v51 = 0;
  do
  {
    if (v8)
      v136 = 0;
    else
      v136 = v51;
    _H0 = *(_WORD *)&MutableRawData[2 * v136];
    __asm { FCVT            S0, H0 }
    a3[v51++] = _Q0.i32[0];
LABEL_239:
    ;
  }
  while (NumElements != v51);
  return _Q0.f32[0];
}

float64_t mlir::copyElementsAttrData<double>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 *RawStringData;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int64_t NumElements;
  uint64_t i;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  double v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float64_t *v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  double v44;
  float64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  float64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  float64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v69;
  uint64_t v70;
  float64x2_t *v71;
  float64x2_t *v72;
  unint64_t v73;
  float64x2_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int64_t v77;
  float64_t *v78;
  float64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  float32x2_t *v83;
  float64x2_t *v84;
  unint64_t v85;
  float32x4_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float *v90;
  int64_t v91;
  double *v92;
  float v93;
  unsigned int IntOrFloatBitWidth;
  uint64_t v95;
  float64x2_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int64x2_t v100;
  int64x2_t *v101;
  unint64_t v102;
  int64_t v103;
  _QWORD *v104;
  unint64_t v105;
  int8x8_t *v106;
  float64x2_t *v107;
  unint64_t v108;
  int8x8_t v109;
  int8x8_t v110;
  int8x8_t v111;
  int8x8_t v112;
  uint64x2_t v113;
  int8x8_t v114;
  float64x2_t v115;
  int8x8_t v116;
  uint64x2_t v117;
  int8x8_t v118;
  int8x8_t v119;
  float64x2_t v120;
  int8x8_t v121;
  int8x8_t v122;
  unint64_t v123;
  float64x2_t *v124;
  int8x16_t *v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x8_t v128;
  int8x8_t v129;
  uint64x2_t v130;
  float64x2_t v131;
  int8x8_t v132;
  int8x8_t v133;
  int8x8_t v134;
  float64x2_t v135;
  int8x8_t v136;
  int8x8_t v137;
  float64x2_t v138;
  int8x8_t v139;
  uint64x2_t v140;
  int8x8_t v141;
  int8x8_t v142;
  float64x2_t v143;
  int8x8_t v144;
  int8x8_t v145;
  int8x8_t v146;
  int8x8_t v147;
  float64x2_t v148;
  int8x8_t v149;
  char *v150;
  unint64_t v151;
  double *v152;
  double v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v163;
  uint64_t OperandRange;
  _QWORD v166[2];
  uint64_t v167;
  uint64_t v168;
  void *v169[3];
  _QWORD v170[6];

  v170[5] = *MEMORY[0x1E0C80C00];
  v167 = a1;
  v168 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v167);
  v7 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v166[0] = v7;
  v166[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v166);
  v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v167);
  v9 = v167;
  if (mlir::DenseElementsAttr::classof(v167))
    v10 = (void *)v9;
  else
    v10 = 0;
  v169[0] = v10;
  if (v10)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v169);
    v4 = v11;
    if ((v8 & 1) == 0)
    {
LABEL_19:
      NumElements = mlir::ElementsAttr::getNumElements(v167, v168);
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_21;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_29;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_39;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_45;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_60;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_75;
      }
      if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_90;
      }
      if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_105;
      }
      if (mlir::Type::isF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_120;
      }
      if (mlir::Type::isF32((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        if ((unint64_t)NumElements >= 8)
        {
          v58 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v83 = (float32x2_t *)(RawStringData + 16);
          v84 = (float64x2_t *)(a3 + 4);
          v85 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v86 = *(float32x4_t *)v83[-2].f32;
            v87 = vcvtq_f64_f32(*(float32x2_t *)v86.f32);
            _Q0 = vcvt_hight_f64_f32(v86);
            v88 = vcvtq_f64_f32(*v83);
            v89 = vcvt_hight_f64_f32(*(float32x4_t *)v83->f32);
            v84[-2] = v87;
            v84[-1] = _Q0;
            *v84 = v88;
            v84[1] = v89;
            v84 += 4;
            v83 += 4;
            v85 -= 8;
          }
          while (v85);
          if (NumElements == v58)
            return _Q0.f64[0];
        }
        else
        {
          v58 = 0;
        }
        v90 = (float *)&RawStringData[4 * v58];
        v91 = NumElements - v58;
        v92 = (double *)&a3[v58];
        do
        {
          v93 = *v90++;
          _Q0.f64[0] = v93;
          *v92++ = v93;
          --v91;
        }
        while (v91);
        return _Q0.f64[0];
      }
      if (mlir::Type::isF64((mlir::Type *)&OperandRange))
      {
        if (NumElements >= 1)
        {
          v70 = 0;
          if ((unint64_t)NumElements < 4)
            goto LABEL_155;
          if ((unint64_t)((char *)a3 - (char *)RawStringData) < 0x20)
            goto LABEL_155;
          v70 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          v71 = (float64x2_t *)(RawStringData + 16);
          v72 = (float64x2_t *)(a3 + 2);
          v73 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            _Q0 = v71[-1];
            v74 = *v71;
            v72[-1] = _Q0;
            *v72 = v74;
            v71 += 2;
            v72 += 2;
            v73 -= 4;
          }
          while (v73);
          if (NumElements != v70)
          {
LABEL_155:
            v75 = v70;
            v76 = &RawStringData[8 * v70];
            v77 = NumElements - v70;
            v78 = (float64_t *)&a3[v75];
            do
            {
              v79 = *(double *)v76;
              v76 += 8;
              _Q0.f64[0] = v79;
              *v78++ = v79;
              --v77;
            }
            while (v77);
          }
        }
        return _Q0.f64[0];
      }
      if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
      {
        if (NumElements < 1)
          return _Q0.f64[0];
        goto LABEL_162;
      }
LABEL_164:
      if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
      {
        mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
        mlir::detail::unpackQuantizedData<double>(RawStringData, v4, (uint64_t)a3, NumElements, IntOrFloatBitWidth);
        return _Q0.f64[0];
      }
      llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v169, NumElements);
      mlir::detail::unpackBooleanData(RawStringData, v4, (uint64_t)v169[0], (unint64_t)v169[1]);
      v81 = (char *)v169[0];
      if (NumElements < 1)
        goto LABEL_210;
      if ((v8 & 1) != 0)
      {
        _Q0.f64[0] = 0.0;
        if (*(_BYTE *)v169[0])
          _Q0.f64[0] = 1.0;
        if ((unint64_t)NumElements < 4)
        {
          v82 = 0;
LABEL_192:
          v103 = NumElements - v82;
          v104 = &a3[v82];
          do
          {
            *v104++ = *(_QWORD *)&_Q0.f64[0];
            --v103;
          }
          while (v103);
          goto LABEL_210;
        }
        v82 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
        v100 = vdupq_lane_s64(*(uint64_t *)&_Q0.f64[0], 0);
        v101 = (int64x2_t *)(a3 + 2);
        v102 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v101[-1] = v100;
          *v101 = v100;
          v101 += 2;
          v102 -= 4;
        }
        while (v102);
        if (NumElements != v82)
          goto LABEL_192;
LABEL_210:
        if (v81 != (char *)v170)
          free(v81);
        return _Q0.f64[0];
      }
      if ((unint64_t)NumElements >= 8)
      {
        if ((unint64_t)NumElements >= 0x10)
        {
          v99 = NumElements & 0x7FFFFFFFFFFFFFF0;
          *(_QWORD *)&_Q0.f64[0] = 0x100000001;
          v123 = NumElements & 0xFFFFFFFFFFFFFFF0;
          v124 = (float64x2_t *)a3;
          v125 = (int8x16_t *)v169[0];
          do
          {
            v126 = *v125++;
            v127 = vtstq_s8(v126, v126);
            v128.i32[0] = v127.u8[0];
            v128.i32[1] = v127.u8[1];
            v129 = vand_s8(v128, (int8x8_t)0x100000001);
            v130.i64[0] = v129.u32[0];
            v130.i64[1] = v129.u32[1];
            v131 = vcvtq_f64_u64(v130);
            v132.i32[0] = v127.u8[2];
            v132.i32[1] = v127.u8[3];
            v133 = vand_s8(v132, (int8x8_t)0x100000001);
            v130.i64[0] = v133.u32[0];
            v130.i64[1] = v133.u32[1];
            v134.i32[0] = v127.u8[4];
            v135 = vcvtq_f64_u64(v130);
            v134.i32[1] = v127.u8[5];
            v136 = vand_s8(v134, (int8x8_t)0x100000001);
            v130.i64[0] = v136.u32[0];
            v130.i64[1] = v136.u32[1];
            v137.i32[0] = v127.u8[6];
            v137.i32[1] = v127.u8[7];
            v138 = vcvtq_f64_u64(v130);
            v139 = vand_s8(v137, (int8x8_t)0x100000001);
            v130.i64[0] = v139.u32[0];
            v130.i64[1] = v139.u32[1];
            v140 = v130;
            v141.i32[0] = v127.u8[8];
            v141.i32[1] = v127.u8[9];
            v142 = vand_s8(v141, (int8x8_t)0x100000001);
            v130.i64[0] = v142.u32[0];
            v130.i64[1] = v142.u32[1];
            v143 = vcvtq_f64_u64(v130);
            v144.i32[0] = v127.u8[10];
            v144.i32[1] = v127.u8[11];
            v145 = vand_s8(v144, (int8x8_t)0x100000001);
            v146.i32[0] = v127.u8[12];
            v146.i32[1] = v127.u8[13];
            v147 = vand_s8(v146, (int8x8_t)0x100000001);
            v130.i64[0] = v147.u32[0];
            v130.i64[1] = v147.u32[1];
            v148 = vcvtq_f64_u64(v130);
            v149.i32[0] = v127.u8[14];
            v149.i32[1] = v127.u8[15];
            *(int8x8_t *)v127.i8 = vand_s8(v149, (int8x8_t)0x100000001);
            v130.i64[0] = v127.u32[0];
            v130.i64[1] = v127.u32[1];
            v124[6] = v148;
            v124[7] = vcvtq_f64_u64(v130);
            v130.i64[0] = v145.u32[0];
            v130.i64[1] = v145.u32[1];
            v124[4] = v143;
            v124[5] = vcvtq_f64_u64(v130);
            v124[2] = v138;
            v124[3] = vcvtq_f64_u64(v140);
            *v124 = v131;
            v124[1] = v135;
            v124 += 8;
            v123 -= 16;
          }
          while (v123);
          if (NumElements == v99)
            goto LABEL_210;
          if ((NumElements & 8) == 0)
            goto LABEL_205;
        }
        else
        {
          v99 = 0;
        }
        v105 = v99;
        v99 = NumElements & 0xFFFFFFFFFFFFFFF8;
        v106 = (int8x8_t *)&v81[v105];
        v107 = (float64x2_t *)&a3[v105];
        v108 = v105 - (NumElements & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)&_Q0.f64[0] = 0x100000001;
        do
        {
          v109 = *v106++;
          v110 = vtst_s8(v109, v109);
          v111.i32[0] = v110.u8[0];
          v111.i32[1] = v110.u8[1];
          v112 = vand_s8(v111, (int8x8_t)0x100000001);
          v113.i64[0] = v112.u32[0];
          v113.i64[1] = v112.u32[1];
          v114.i32[0] = v110.u8[2];
          v114.i32[1] = v110.u8[3];
          v115 = vcvtq_f64_u64(v113);
          v116 = vand_s8(v114, (int8x8_t)0x100000001);
          v113.i64[0] = v116.u32[0];
          v113.i64[1] = v116.u32[1];
          v117 = v113;
          v118.i32[0] = v110.u8[4];
          v118.i32[1] = v110.u8[5];
          v119 = vand_s8(v118, (int8x8_t)0x100000001);
          v113.i64[0] = v119.u32[0];
          v113.i64[1] = v119.u32[1];
          v120 = vcvtq_f64_u64(v113);
          v121.i32[0] = v110.u8[6];
          v121.i32[1] = v110.u8[7];
          v122 = vand_s8(v121, (int8x8_t)0x100000001);
          v113.i64[0] = v122.u32[0];
          v113.i64[1] = v122.u32[1];
          v107[2] = v120;
          v107[3] = vcvtq_f64_u64(v113);
          *v107 = v115;
          v107[1] = vcvtq_f64_u64(v117);
          v107 += 4;
          v108 += 8;
        }
        while (v108);
        if (NumElements == v99)
          goto LABEL_210;
      }
      else
      {
        v99 = 0;
      }
LABEL_205:
      v150 = &v81[v99];
      v151 = NumElements - v99;
      v152 = (double *)&a3[v99];
      _Q0.f64[0] = 0.0;
      do
      {
        if (*v150++)
          v154 = 1.0;
        else
          v154 = 0.0;
        *v152++ = v154;
        --v151;
      }
      while (v151);
      goto LABEL_210;
    }
  }
  else
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v12 = (void *)v9;
    else
      v12 = 0;
    v169[0] = v12;
    if (v12)
    {
      RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v169);
      v4 = v13;
      if ((v8 & 1) == 0)
        goto LABEL_19;
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_19;
    }
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_21:
    for (i = 0; i != NumElements; ++i)
    {
      if (v8)
        v17 = 0;
      else
        v17 = i;
      LOBYTE(_Q0.f64[0]) = RawStringData[v17];
      _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
      a3[i] = *(_QWORD *)&_Q0.f64[0];
    }
    return _Q0.f64[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_29:
    for (j = 0; j != NumElements; ++j)
    {
      if (v8)
        v19 = 0;
      else
        v19 = j;
      _Q0.f64[0] = (double)(char)RawStringData[v19];
      *(double *)&a3[j] = _Q0.f64[0];
    }
    return _Q0.f64[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    if ((unint64_t)NumElements >= 2)
    {
      v24 = 0;
      v21 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v25 = 0;
        else
          v25 = v24;
        if (v8)
          v26 = 0;
        else
          v26 = v24 + 1;
        LOWORD(_Q0.f64[0]) = *(_WORD *)&RawStringData[2 * v25];
        _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
        LOWORD(v20) = *(_WORD *)&RawStringData[2 * v26];
        v20 = (double)*(unint64_t *)&v20;
        v27 = (float64_t *)&a3[v24];
        *v27 = _Q0.f64[0];
        v27[1] = v20;
        v24 += 2;
      }
      while (v24 != v21);
      goto LABEL_212;
    }
    v21 = 0;
    do
    {
      if (v8)
        v155 = 0;
      else
        v155 = v21;
      LOWORD(_Q0.f64[0]) = *(_WORD *)&RawStringData[2 * v155];
      _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
      a3[v21++] = *(_QWORD *)&_Q0.f64[0];
LABEL_212:
      ;
    }
    while (NumElements != v21);
    return _Q0.f64[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_45:
    if ((unint64_t)NumElements >= 2)
    {
      v30 = 0;
      v23 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v31 = 0;
        else
          v31 = v30;
        if (v8)
          v32 = 0;
        else
          v32 = v30 + 1;
        LOWORD(_Q0.f64[0]) = *(_WORD *)&RawStringData[2 * v31];
        _Q0.f64[0] = (double)vmovl_s16(*(int16x4_t *)&_Q0.f64[0]).i32[0];
        LOWORD(v22) = *(_WORD *)&RawStringData[2 * v32];
        v22 = (double)vmovl_s16(*(int16x4_t *)&v22).i32[0];
        v33 = (float64_t *)&a3[v30];
        *v33 = _Q0.f64[0];
        v33[1] = v22;
        v30 += 2;
      }
      while (v30 != v23);
      goto LABEL_217;
    }
    v23 = 0;
    do
    {
      if (v8)
        v156 = 0;
      else
        v156 = v23;
      LOWORD(_Q0.f64[0]) = *(_WORD *)&RawStringData[2 * v156];
      _Q0.f64[0] = (double)vmovl_s16(*(int16x4_t *)&_Q0.f64[0]).i32[0];
      *(double *)&a3[v23++] = _Q0.f64[0];
LABEL_217:
      ;
    }
    while (NumElements != v23);
    return _Q0.f64[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_60:
    if ((unint64_t)NumElements >= 2)
    {
      v35 = 0;
      v29 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v36 = 0;
        else
          v36 = v35;
        if (v8)
          v37 = 0;
        else
          v37 = v35 + 1;
        LODWORD(_Q0.f64[0]) = *(_DWORD *)&RawStringData[4 * v36];
        _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
        LODWORD(v28) = *(_DWORD *)&RawStringData[4 * v37];
        v28 = (double)*(unint64_t *)&v28;
        v38 = (float64_t *)&a3[v35];
        *v38 = _Q0.f64[0];
        v38[1] = v28;
        v35 += 2;
      }
      while (v35 != v29);
      goto LABEL_222;
    }
    v29 = 0;
    do
    {
      if (v8)
        v157 = 0;
      else
        v157 = v29;
      LODWORD(_Q0.f64[0]) = *(_DWORD *)&RawStringData[4 * v157];
      _Q0.f64[0] = (double)*(unint64_t *)&_Q0.f64[0];
      a3[v29++] = *(_QWORD *)&_Q0.f64[0];
LABEL_222:
      ;
    }
    while (NumElements != v29);
    return _Q0.f64[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_75:
    if ((unint64_t)NumElements >= 2)
    {
      v40 = 0;
      v34 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v41 = 0;
        else
          v41 = v40;
        v42 = *(_DWORD *)&RawStringData[4 * v41];
        if (v8)
          v43 = 0;
        else
          v43 = v40 + 1;
        _Q0.f64[0] = (double)v42;
        v44 = (double)*(int *)&RawStringData[4 * v43];
        v45 = (float64_t *)&a3[v40];
        *v45 = _Q0.f64[0];
        v45[1] = v44;
        v40 += 2;
      }
      while (v40 != v34);
      goto LABEL_227;
    }
    v34 = 0;
    do
    {
      if (v8)
        v158 = 0;
      else
        v158 = v34;
      _Q0.f64[0] = (double)*(int *)&RawStringData[4 * v158];
      *(double *)&a3[v34++] = _Q0.f64[0];
LABEL_227:
      ;
    }
    while (NumElements != v34);
    return _Q0.f64[0];
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_90:
    if ((unint64_t)NumElements >= 2)
    {
      v47 = 0;
      v39 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v48 = 0;
        else
          v48 = v47;
        if (v8)
          v49 = 0;
        else
          v49 = v47 + 1;
        _Q0.f64[0] = (double)*(unint64_t *)&RawStringData[8 * v48];
        v50 = (double)*(unint64_t *)&RawStringData[8 * v49];
        v51 = (float64_t *)&a3[v47];
        *v51 = _Q0.f64[0];
        v51[1] = v50;
        v47 += 2;
      }
      while (v47 != v39);
      goto LABEL_232;
    }
    v39 = 0;
    do
    {
      if (v8)
        v159 = 0;
      else
        v159 = v39;
      _Q0.f64[0] = (double)*(unint64_t *)&RawStringData[8 * v159];
      a3[v39++] = *(_QWORD *)&_Q0.f64[0];
LABEL_232:
      ;
    }
    while (NumElements != v39);
    return _Q0.f64[0];
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_105:
    if ((unint64_t)NumElements >= 2)
    {
      v53 = 0;
      v46 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v54 = 0;
        else
          v54 = v53;
        if (v8)
          v55 = 0;
        else
          v55 = v53 + 1;
        _Q0.f64[0] = (double)*(uint64_t *)&RawStringData[8 * v54];
        v56 = (double)*(uint64_t *)&RawStringData[8 * v55];
        v57 = (float64_t *)&a3[v53];
        *v57 = _Q0.f64[0];
        v57[1] = v56;
        v53 += 2;
      }
      while (v53 != v46);
      goto LABEL_237;
    }
    v46 = 0;
    do
    {
      if (v8)
        v160 = 0;
      else
        v160 = v46;
      _Q0.f64[0] = (double)*(uint64_t *)&RawStringData[8 * v160];
      a3[v46++] = *(_QWORD *)&_Q0.f64[0];
LABEL_237:
      ;
    }
    while (NumElements != v46);
    return _Q0.f64[0];
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_120:
    if ((unint64_t)NumElements >= 2)
    {
      v59 = 0;
      v52 = NumElements & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        if (v8)
          v60 = 0;
        else
          v60 = v59;
        if (v8)
          v61 = 0;
        else
          v61 = v59 + 1;
        _H0 = *(_WORD *)&RawStringData[2 * v60];
        _H1 = *(_WORD *)&RawStringData[2 * v61];
        __asm
        {
          FCVT            D0, H0
          FCVT            D1, H1
        }
        v69 = &a3[v59];
        *v69 = *(_QWORD *)&_Q0.f64[0];
        v69[1] = _D1;
        v59 += 2;
      }
      while (v59 != v52);
      goto LABEL_242;
    }
    v52 = 0;
    do
    {
      if (v8)
        v161 = 0;
      else
        v161 = v52;
      _H0 = *(_WORD *)&RawStringData[2 * v161];
      __asm { FCVT            D0, H0 }
      a3[v52++] = *(_QWORD *)&_Q0.f64[0];
LABEL_242:
      ;
    }
    while (NumElements != v52);
    return _Q0.f64[0];
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    _Q0.f64[0] = *(float *)RawStringData;
    *a3 = *(_QWORD *)&_Q0.f64[0];
    return _Q0.f64[0];
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    _Q0.f64[0] = *(float64_t *)RawStringData;
    *a3 = *(_QWORD *)RawStringData;
    return _Q0.f64[0];
  }
  NumElements = 1;
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_164;
LABEL_162:
  if ((unint64_t)NumElements >= 2)
  {
    v95 = 0;
    v80 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    v96 = (float64x2_t *)a3;
    do
    {
      if (v8)
        v97 = 0;
      else
        v97 = v95;
      if (v8)
        v98 = 0;
      else
        v98 = v95 + 1;
      LOWORD(_Q0.f64[0]) = *(_WORD *)&RawStringData[2 * v97];
      WORD2(_Q0.f64[0]) = *(_WORD *)&RawStringData[2 * v98];
      _Q0 = vcvtq_f64_f32((float32x2_t)vshl_n_s32(*(int32x2_t *)&_Q0.f64[0], 0x10uLL));
      *v96++ = _Q0;
      v95 += 2;
    }
    while (v95 != v80);
    goto LABEL_247;
  }
  v80 = 0;
  do
  {
    if (v8)
      v163 = 0;
    else
      v163 = v80;
    _Q0.f64[0] = COERCE_FLOAT(*(unsigned __int16 *)&RawStringData[2 * v163] << 16);
    *(double *)&a3[v80++] = _Q0.f64[0];
LABEL_247:
    ;
  }
  while (NumElements != v80);
  return _Q0.f64[0];
}

void mlir::copyElementsAttrData<BOOL>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 *MutableRawData;
  uint64_t v4;
  _QWORD *Type;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int64_t NumElements;
  void *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  BOOL *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  BOOL *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  BOOL *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  BOOL *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  BOOL *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v73;
  BOOL *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  uint64_t v80;
  float v81;
  BOOL *v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  double v92;
  BOOL *v93;
  unsigned int IntOrFloatBitWidth;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  BOOL v99;
  BOOL *v100;
  unint64_t v101;
  __int128 *v102;
  _OWORD *v103;
  unint64_t v104;
  __int128 v105;
  unint64_t v106;
  char *v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  _BYTE *v113;
  char v114;
  int8x16_t v115;
  int8x16_t *v116;
  unint64_t v117;
  unint64_t v118;
  int8x8_t v119;
  int8x8_t *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t OperandRange;
  _QWORD v135[2];
  uint64_t v136;
  uint64_t v137;
  void *v138[3];
  _QWORD v139[6];

  v139[5] = *MEMORY[0x1E0C80C00];
  v136 = a1;
  v137 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v136);
  v7 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v135[0] = v7;
  v135[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v135);
  v8 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v136);
  v9 = v136;
  if (mlir::DenseElementsAttr::classof(v136))
    v10 = (void *)v9;
  else
    v10 = 0;
  v138[0] = v10;
  if (!v10)
  {
    if (*(_UNKNOWN **)(*(_QWORD *)v9 + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
      v13 = (void *)v9;
    else
      v13 = 0;
    v138[0] = v13;
    if (v13)
    {
      MutableRawData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v138);
      v4 = v14;
      if ((v8 & 1) == 0)
        goto LABEL_15;
    }
    else if ((v8 & 1) == 0)
    {
      goto LABEL_15;
    }
LABEL_8:
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      NumElements = 1;
LABEL_17:
      for (i = 0; i != NumElements; ++i)
      {
        if (v8)
          v16 = 0;
        else
          v16 = i;
        *(_BYTE *)(a3 + i) = MutableRawData[v16] != 0;
      }
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      NumElements = 1;
LABEL_27:
      for (j = 0; j != NumElements; ++j)
      {
        if (v8)
          v18 = 0;
        else
          v18 = j;
        *(_BYTE *)(a3 + j) = MutableRawData[v18] != 0;
      }
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      NumElements = 1;
LABEL_39:
      if ((unint64_t)NumElements >= 2)
      {
        v21 = 0;
        v19 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v22 = 0;
          else
            v22 = v21;
          v23 = *(unsigned __int16 *)&MutableRawData[2 * v22];
          if (v8)
            v24 = 0;
          else
            v24 = v21 + 1;
          v25 = *(unsigned __int16 *)&MutableRawData[2 * v24] != 0;
          v26 = (BOOL *)(a3 + v21);
          *v26 = v23 != 0;
          v26[1] = v25;
          v21 += 2;
        }
        while (v21 != v19);
        goto LABEL_225;
      }
      v19 = 0;
      do
      {
        if (v8)
          v122 = 0;
        else
          v122 = v19;
        *(_BYTE *)(a3 + v19++) = *(unsigned __int16 *)&MutableRawData[2 * v122] != 0;
LABEL_225:
        ;
      }
      while (NumElements != v19);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      NumElements = 1;
LABEL_45:
      if ((unint64_t)NumElements >= 2)
      {
        v28 = 0;
        v20 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v29 = 0;
          else
            v29 = v28;
          v30 = *(unsigned __int16 *)&MutableRawData[2 * v29];
          if (v8)
            v31 = 0;
          else
            v31 = v28 + 1;
          v32 = *(unsigned __int16 *)&MutableRawData[2 * v31] != 0;
          v33 = (BOOL *)(a3 + v28);
          *v33 = v30 != 0;
          v33[1] = v32;
          v28 += 2;
        }
        while (v28 != v20);
        goto LABEL_231;
      }
      v20 = 0;
      do
      {
        if (v8)
          v123 = 0;
        else
          v123 = v20;
        *(_BYTE *)(a3 + v20++) = *(unsigned __int16 *)&MutableRawData[2 * v123] != 0;
LABEL_231:
        ;
      }
      while (NumElements != v20);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      NumElements = 1;
LABEL_60:
      if ((unint64_t)NumElements >= 2)
      {
        v35 = 0;
        v27 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v36 = 0;
          else
            v36 = v35;
          v37 = *(_DWORD *)&MutableRawData[4 * v36];
          if (v8)
            v38 = 0;
          else
            v38 = v35 + 1;
          v39 = *(_DWORD *)&MutableRawData[4 * v38] != 0;
          v40 = (BOOL *)(a3 + v35);
          *v40 = v37 != 0;
          v40[1] = v39;
          v35 += 2;
        }
        while (v35 != v27);
        goto LABEL_237;
      }
      v27 = 0;
      do
      {
        if (v8)
          v124 = 0;
        else
          v124 = v27;
        *(_BYTE *)(a3 + v27++) = *(_DWORD *)&MutableRawData[4 * v124] != 0;
LABEL_237:
        ;
      }
      while (NumElements != v27);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      NumElements = 1;
LABEL_75:
      if ((unint64_t)NumElements >= 2)
      {
        v42 = 0;
        v34 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v43 = 0;
          else
            v43 = v42;
          v44 = *(_DWORD *)&MutableRawData[4 * v43];
          if (v8)
            v45 = 0;
          else
            v45 = v42 + 1;
          v46 = *(_DWORD *)&MutableRawData[4 * v45] != 0;
          v47 = (BOOL *)(a3 + v42);
          *v47 = v44 != 0;
          v47[1] = v46;
          v42 += 2;
        }
        while (v42 != v34);
        goto LABEL_243;
      }
      v34 = 0;
      do
      {
        if (v8)
          v125 = 0;
        else
          v125 = v34;
        *(_BYTE *)(a3 + v34++) = *(_DWORD *)&MutableRawData[4 * v125] != 0;
LABEL_243:
        ;
      }
      while (NumElements != v34);
      return;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      NumElements = 1;
LABEL_90:
      if ((unint64_t)NumElements >= 2)
      {
        v49 = 0;
        v41 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v50 = 0;
          else
            v50 = v49;
          v51 = *(_QWORD *)&MutableRawData[8 * v50];
          if (v8)
            v52 = 0;
          else
            v52 = v49 + 1;
          v53 = *(_QWORD *)&MutableRawData[8 * v52] != 0;
          v54 = (BOOL *)(a3 + v49);
          *v54 = v51 != 0;
          v54[1] = v53;
          v49 += 2;
        }
        while (v49 != v41);
        goto LABEL_249;
      }
      v41 = 0;
      do
      {
        if (v8)
          v126 = 0;
        else
          v126 = v41;
        *(_BYTE *)(a3 + v41++) = *(_QWORD *)&MutableRawData[8 * v126] != 0;
LABEL_249:
        ;
      }
      while (NumElements != v41);
      return;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      NumElements = 1;
LABEL_105:
      if ((unint64_t)NumElements >= 2)
      {
        v56 = 0;
        v48 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v57 = 0;
          else
            v57 = v56;
          v58 = *(_QWORD *)&MutableRawData[8 * v57];
          if (v8)
            v59 = 0;
          else
            v59 = v56 + 1;
          v60 = *(_QWORD *)&MutableRawData[8 * v59] != 0;
          v61 = (BOOL *)(a3 + v56);
          *v61 = v58 != 0;
          v61[1] = v60;
          v56 += 2;
        }
        while (v56 != v48);
        goto LABEL_255;
      }
      v48 = 0;
      do
      {
        if (v8)
          v127 = 0;
        else
          v127 = v48;
        *(_BYTE *)(a3 + v48++) = *(_QWORD *)&MutableRawData[8 * v127] != 0;
LABEL_255:
        ;
      }
      while (NumElements != v48);
      return;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_120:
      if ((unint64_t)NumElements >= 2)
      {
        v63 = 0;
        v55 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v64 = 0;
          else
            v64 = v63;
          if (v8)
            v65 = 0;
          else
            v65 = v63 + 1;
          _H0 = *(_WORD *)&MutableRawData[2 * v64];
          _H1 = *(_WORD *)&MutableRawData[2 * v65];
          __asm { FCVT            S0, H0 }
          v73 = _S0 != 0.0;
          __asm { FCVT            S0, H1 }
          v75 = (BOOL *)(a3 + v63);
          *v75 = v73;
          v75[1] = _S0 != 0.0;
          v63 += 2;
        }
        while (v63 != v55);
        goto LABEL_261;
      }
      v55 = 0;
      do
      {
        if (v8)
          v128 = 0;
        else
          v128 = v55;
        _H0 = *(_WORD *)&MutableRawData[2 * v128];
        __asm { FCVT            S0, H0 }
        *(_BYTE *)(a3 + v55++) = _S0 != 0.0;
LABEL_261:
        ;
      }
      while (NumElements != v55);
      return;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_135:
      if ((unint64_t)NumElements >= 2)
      {
        v77 = 0;
        v62 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v78 = 0;
          else
            v78 = v77;
          v79 = *(float *)&MutableRawData[4 * v78];
          if (v8)
            v80 = 0;
          else
            v80 = v77 + 1;
          v81 = *(float *)&MutableRawData[4 * v80];
          v82 = (BOOL *)(a3 + v77);
          *v82 = v79 != 0.0;
          v82[1] = v81 != 0.0;
          v77 += 2;
        }
        while (v77 != v62);
        goto LABEL_267;
      }
      v62 = 0;
      do
      {
        if (v8)
          v131 = 0;
        else
          v131 = v62;
        *(_BYTE *)(a3 + v62++) = *(float *)&MutableRawData[4 * v131] != 0.0;
LABEL_267:
        ;
      }
      while (NumElements != v62);
      return;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      NumElements = 1;
LABEL_150:
      if ((unint64_t)NumElements >= 2)
      {
        v88 = 0;
        v76 = NumElements & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v8)
            v89 = 0;
          else
            v89 = v88;
          v90 = *(double *)&MutableRawData[8 * v89];
          if (v8)
            v91 = 0;
          else
            v91 = v88 + 1;
          v92 = *(double *)&MutableRawData[8 * v91];
          v93 = (BOOL *)(a3 + v88);
          *v93 = v90 != 0.0;
          v93[1] = v92 != 0.0;
          v88 += 2;
        }
        while (v88 != v76);
        goto LABEL_273;
      }
      v76 = 0;
      do
      {
        if (v8)
          v132 = 0;
        else
          v132 = v76;
        *(_BYTE *)(a3 + v76++) = *(double *)&MutableRawData[8 * v132] != 0.0;
LABEL_273:
        ;
      }
      while (NumElements != v76);
      return;
    }
    NumElements = 1;
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
      goto LABEL_167;
    goto LABEL_165;
  }
  MutableRawData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v138);
  v4 = v11;
  if ((v8 & 1) != 0)
    goto LABEL_8;
LABEL_15:
  NumElements = mlir::ElementsAttr::getNumElements(v136, v137);
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1)
      return;
    goto LABEL_17;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    if (NumElements < 1)
      return;
    goto LABEL_27;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1)
      return;
    goto LABEL_39;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    if (NumElements < 1)
      return;
    goto LABEL_45;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1)
      return;
    goto LABEL_60;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    if (NumElements < 1)
      return;
    goto LABEL_75;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1)
      return;
    goto LABEL_90;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    if (NumElements < 1)
      return;
    goto LABEL_105;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1)
      return;
    goto LABEL_120;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1)
      return;
    goto LABEL_135;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    if (NumElements < 1)
      return;
    goto LABEL_150;
  }
  if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
  {
LABEL_167:
    if (!mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<BOOL>(MutableRawData, v4, a3, NumElements, IntOrFloatBitWidth);
      return;
    }
    llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v138, NumElements);
    mlir::detail::unpackBooleanData(MutableRawData, v4, (uint64_t)v138[0], (unint64_t)v138[1]);
    v84 = (char *)v138[0];
    if (NumElements < 1)
      goto LABEL_211;
    if ((v8 & 1) != 0)
    {
      if ((unint64_t)NumElements < 8 || (char *)v138[0] + 1 > (void *)a3 && v138[0] < (void *)(a3 + NumElements))
      {
        v85 = 0;
        goto LABEL_174;
      }
      if ((unint64_t)NumElements >= 0x20)
      {
        v85 = NumElements & 0x7FFFFFFFFFFFFFE0;
        v115 = vld1q_dup_s8((const char *)v138[0]);
        v116 = (int8x16_t *)(a3 + 16);
        v117 = NumElements & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v116[-1] = v115;
          *v116 = v115;
          v116 += 2;
          v117 -= 32;
        }
        while (v117);
        if (NumElements == v85)
          goto LABEL_211;
        if ((NumElements & 0x18) == 0)
        {
LABEL_174:
          v86 = NumElements - v85;
          v87 = (char *)(a3 + v85);
          do
          {
            *v87++ = *v84;
            --v86;
          }
          while (v86);
          goto LABEL_211;
        }
      }
      else
      {
        v85 = 0;
      }
      v118 = v85;
      v85 = NumElements & 0xFFFFFFFFFFFFFFF8;
      v119 = vld1_dup_s8(v84);
      v120 = (int8x8_t *)(a3 + v118);
      v121 = v118 - (NumElements & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v120++ = v119;
        v121 += 8;
      }
      while (v121);
      if (NumElements != v85)
        goto LABEL_174;
LABEL_211:
      if (v84 != (char *)v139)
        free(v84);
      return;
    }
    v101 = 0;
    if ((unint64_t)NumElements >= 8 && a3 - (unint64_t)v138[0] >= 0x20)
    {
      if ((unint64_t)NumElements < 0x20)
      {
        v101 = 0;
LABEL_206:
        v106 = v101;
        v101 = NumElements & 0xFFFFFFFFFFFFFFF8;
        v107 = &v84[v106];
        v108 = (_QWORD *)(a3 + v106);
        v109 = v106 - (NumElements & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v110 = *(_QWORD *)v107;
          v107 += 8;
          *v108++ = v110;
          v109 += 8;
        }
        while (v109);
        if (NumElements == v101)
          goto LABEL_211;
        goto LABEL_209;
      }
      v101 = NumElements & 0x7FFFFFFFFFFFFFE0;
      v102 = (__int128 *)((char *)v138[0] + 16);
      v103 = (_OWORD *)(a3 + 16);
      v104 = NumElements & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v105 = *v102;
        *(v103 - 1) = *(v102 - 1);
        *v103 = v105;
        v102 += 2;
        v103 += 2;
        v104 -= 32;
      }
      while (v104);
      if (NumElements == v101)
        goto LABEL_211;
      if ((NumElements & 0x18) != 0)
        goto LABEL_206;
    }
LABEL_209:
    v111 = &v84[v101];
    v112 = NumElements - v101;
    v113 = (_BYTE *)(a3 + v101);
    do
    {
      v114 = *v111++;
      *v113++ = v114;
      --v112;
    }
    while (v112);
    goto LABEL_211;
  }
  if (NumElements < 1)
    return;
LABEL_165:
  if ((unint64_t)NumElements >= 2)
  {
    v95 = 0;
    v83 = NumElements & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      if (v8)
        v96 = 0;
      else
        v96 = v95;
      v97 = *(_WORD *)&MutableRawData[2 * v96];
      if (v8)
        v98 = 0;
      else
        v98 = v95 + 1;
      v99 = (*(_WORD *)&MutableRawData[2 * v98] & 0x7FFF) != 0;
      v100 = (BOOL *)(a3 + v95);
      *v100 = (v97 & 0x7FFF) != 0;
      v100[1] = v99;
      v95 += 2;
    }
    while (v95 != v83);
    goto LABEL_279;
  }
  v83 = 0;
  do
  {
    if (v8)
      v133 = 0;
    else
      v133 = v83;
    *(_BYTE *)(a3 + v83++) = (*(_WORD *)&MutableRawData[2 * v133] & 0x7FFF) != 0;
LABEL_279:
    ;
  }
  while (NumElements != v83);
}

_BYTE *mlir::detail::packBooleanData(_BYTE *result, unint64_t a2, _BYTE *a3, uint64_t a4)
{
  _BYTE *v4;
  char v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  if (a2 == 1)
  {
    *a3 = -*result;
  }
  else if (a4)
  {
    v4 = result + 3;
    do
    {
      v6 = a2;
      v7 = a2 >= 8;
      a2 -= 8;
      if (v7)
        v8 = 8;
      else
        v8 = v6;
      if (v8)
      {
        v5 = *(v4 - 3);
        if (v8 != 1)
        {
          v5 |= 2 * *(v4 - 2);
          if (v8 != 2)
          {
            v5 |= 4 * *(v4 - 1);
            if (v8 != 3)
            {
              v5 |= 8 * *v4;
              if (v8 != 4)
              {
                v5 |= 16 * v4[1];
                if (v8 != 5)
                {
                  v5 |= 32 * v4[2];
                  if (v8 != 6)
                  {
                    v5 |= v4[3] << 6;
                    if (v8 != 7)
                      v5 |= v4[4] << 7;
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        v5 = 0;
      }
      *a3++ = v5;
      v4 += 8;
      --a4;
    }
    while (a4);
  }
  return result;
}

void mlir::copyElementsAttrData<complex_support::complex_fp<float,(void *)0>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *Type;
  _QWORD *v6;
  int v7;
  unsigned __int8 *RawStringData;
  unsigned __int8 *v9;
  uint64_t v10;
  float v11;
  int64_t NumElements;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  int16x4_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  float *v63;
  uint64_t v64;
  float v65;
  void *v66;
  void *v67;
  unsigned int IntOrFloatBitWidth;
  uint64_t v69;
  int64_t v70;
  _QWORD *v71;
  float16x4_t v72;
  uint64_t i;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  unint64_t v78;
  __int128 v79;
  uint64_t v80;
  unsigned __int8 *v81;
  int64_t v82;
  _QWORD *v83;
  uint64_t v84;
  float64x2_t v85;
  float64x2_t *v86;
  unint64_t v87;
  uint64_t Value;
  uint64_t OperandRange;
  _QWORD v90[2];
  unsigned __int8 *v91;
  uint64_t v92;
  void *v93[3];
  _QWORD v94[6];

  v94[5] = *MEMORY[0x1E0C80C00];
  v91 = (unsigned __int8 *)a1;
  v92 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v91);
  v6 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v90[0] = v6;
  v90[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v90);
  v7 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v91);
  RawStringData = v91;
  if (mlir::DenseElementsAttr::classof((uint64_t)v91))
    v9 = RawStringData;
  else
    v9 = 0;
  v93[0] = v9;
  if (v9)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v93);
    v3 = v10;
    if ((v7 & 1) != 0)
      goto LABEL_8;
LABEL_15:
    NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v91, v92);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return;
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return;
      goto LABEL_27;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return;
      goto LABEL_39;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return;
      goto LABEL_49;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return;
      goto LABEL_59;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return;
      goto LABEL_69;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return;
      goto LABEL_79;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return;
      goto LABEL_89;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_99;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_109;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_119;
    }
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
      goto LABEL_135;
    if (NumElements < 1)
      return;
LABEL_129:
    v58 = 0;
    v59 = a3 + 4;
    do
    {
      if (v7)
        v60 = 0;
      else
        v60 = v58;
      *(_QWORD *)(v59 - 4) = *(unsigned __int16 *)&RawStringData[2 * v60] << 16;
      ++v58;
      v59 += 8;
    }
    while (NumElements != v58);
    return;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)RawStringData + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    v13 = RawStringData;
  else
    v13 = 0;
  v93[0] = v13;
  if (v13)
  {
    RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v93);
    v3 = v14;
    if ((v7 & 1) == 0)
      goto LABEL_15;
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_15;
  }
LABEL_8:
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_17:
    v15 = 0;
    v16 = (float *)(a3 + 4);
    do
    {
      if (v7)
        v17 = 0;
      else
        v17 = v15;
      LOBYTE(v11) = RawStringData[v17];
      v11 = (float)LODWORD(v11);
      *(v16 - 1) = v11;
      *v16 = 0.0;
      v16 += 2;
      ++v15;
    }
    while (NumElements != v15);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_27:
    v19 = 0;
    v20 = (_DWORD *)(a3 + 4);
    do
    {
      if (v7)
        v21 = 0;
      else
        v21 = v19;
      v18.i8[0] = RawStringData[v21];
      v18 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).u64[0];
      *(float *)v18.i32 = (float)v18.i32[0];
      *(v20 - 1) = v18.i32[0];
      *v20 = 0;
      v20 += 2;
      ++v19;
    }
    while (NumElements != v19);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    v23 = 0;
    v24 = (float *)(a3 + 4);
    do
    {
      if (v7)
        v25 = 0;
      else
        v25 = v23;
      LOWORD(v22) = *(_WORD *)&RawStringData[2 * v25];
      v22 = (float)LODWORD(v22);
      *(v24 - 1) = v22;
      *v24 = 0.0;
      v24 += 2;
      ++v23;
    }
    while (NumElements != v23);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_49:
    v27 = 0;
    v28 = (_DWORD *)(a3 + 4);
    do
    {
      if (v7)
        v29 = 0;
      else
        v29 = v27;
      v26.i16[0] = *(_WORD *)&RawStringData[2 * v29];
      v26 = (int16x4_t)vmovl_s16(v26).u64[0];
      *(float *)v26.i32 = (float)v26.i32[0];
      *(v28 - 1) = v26.i32[0];
      *v28 = 0;
      v28 += 2;
      ++v27;
    }
    while (NumElements != v27);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_59:
    v30 = 0;
    v31 = (float *)(a3 + 4);
    do
    {
      if (v7)
        v32 = 0;
      else
        v32 = v30;
      *(v31 - 1) = (float)*(unsigned int *)&RawStringData[4 * v32];
      *v31 = 0.0;
      v31 += 2;
      ++v30;
    }
    while (NumElements != v30);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_69:
    v33 = 0;
    v34 = (float *)(a3 + 4);
    do
    {
      if (v7)
        v35 = 0;
      else
        v35 = v33;
      *(v34 - 1) = (float)*(int *)&RawStringData[4 * v35];
      *v34 = 0.0;
      v34 += 2;
      ++v33;
    }
    while (NumElements != v33);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_79:
    v36 = 0;
    v37 = (float *)(a3 + 4);
    do
    {
      if (v7)
        v38 = 0;
      else
        v38 = v36;
      *(v37 - 1) = (float)*(unint64_t *)&RawStringData[8 * v38];
      *v37 = 0.0;
      v37 += 2;
      ++v36;
    }
    while (NumElements != v36);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_89:
    v39 = 0;
    v40 = (float *)(a3 + 4);
    do
    {
      if (v7)
        v41 = 0;
      else
        v41 = v39;
      *(v40 - 1) = (float)*(uint64_t *)&RawStringData[8 * v41];
      *v40 = 0.0;
      v40 += 2;
      ++v39;
    }
    while (NumElements != v39);
    return;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_99:
    v42 = 0;
    v43 = (_DWORD *)(a3 + 4);
    do
    {
      if (v7)
        v44 = 0;
      else
        v44 = v42;
      _H0 = *(_WORD *)&RawStringData[2 * v44];
      __asm { FCVT            S0, H0 }
      *(v43 - 1) = _S0;
      *v43 = 0;
      v43 += 2;
      ++v42;
    }
    while (NumElements != v42);
    return;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_109:
    v51 = 0;
    v52 = a3 + 4;
    do
    {
      if (v7)
        v53 = 0;
      else
        v53 = v51;
      *(_QWORD *)(v52 - 4) = *(unsigned int *)&RawStringData[4 * v53];
      ++v51;
      v52 += 8;
    }
    while (NumElements != v51);
    return;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_119:
    v54 = 0;
    v55 = (float *)(a3 + 4);
    do
    {
      if (v7)
        v56 = 0;
      else
        v56 = v54;
      v57 = *(double *)&RawStringData[8 * v56];
      *(v55 - 1) = v57;
      *v55 = 0.0;
      v55 += 2;
      ++v54;
    }
    while (NumElements != v54);
    return;
  }
  NumElements = 1;
  if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_129;
LABEL_135:
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v93, NumElements);
    mlir::detail::unpackBooleanData(RawStringData, v3, (uint64_t)v93[0], (unint64_t)v93[1]);
    v61 = v93[0];
    if (NumElements >= 1)
    {
      v62 = 0;
      v63 = (float *)(a3 + 4);
      do
      {
        if (v7)
          v64 = 0;
        else
          v64 = v62;
        if (v61[v64])
          v65 = 1.0;
        else
          v65 = 0.0;
        *(v63 - 1) = v65;
        *v63 = 0.0;
        v63 += 2;
        ++v62;
      }
      while (NumElements != v62);
    }
    if (v61 != (_BYTE *)v94)
      free(v61);
  }
  else
  {
    v66 = (void *)OperandRange;
    v67 = *(void **)(*(_QWORD *)OperandRange + 136);
    if (v67 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v66 = 0;
    v93[0] = v66;
    if (v67 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<complex_support::complex_fp<float,(void *)0>>(RawStringData, v3, a3, NumElements, IntOrFloatBitWidth);
      return;
    }
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v93);
    if (mlir::Type::isF32((mlir::Type *)&Value))
    {
      if (NumElements < 1)
        return;
      if ((v7 & 1) != 0)
      {
        if ((unint64_t)NumElements >= 8
          && ((unint64_t)(RawStringData + 8) <= a3 || a3 + 8 * NumElements <= (unint64_t)RawStringData))
        {
          v69 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
          v85 = vld1q_dup_f64((const double *)RawStringData);
          v86 = (float64x2_t *)(a3 + 16);
          v87 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v86[-1] = v85;
            *v86 = v85;
            v86 += 2;
            v87 -= 4;
          }
          while (v87);
          if (NumElements == v69)
            return;
        }
        else
        {
          v69 = 0;
        }
        v70 = NumElements - v69;
        v71 = (_QWORD *)(a3 + 8 * v69);
        do
        {
          *v71++ = *(_QWORD *)RawStringData;
          --v70;
        }
        while (v70);
        return;
      }
      v75 = 0;
      if ((unint64_t)NumElements < 4)
        goto LABEL_174;
      if (a3 - (unint64_t)RawStringData < 0x20)
        goto LABEL_174;
      v75 = NumElements & 0x7FFFFFFFFFFFFFFCLL;
      v76 = (__int128 *)(RawStringData + 16);
      v77 = (_OWORD *)(a3 + 16);
      v78 = NumElements & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v79 = *v76;
        *(v77 - 1) = *(v76 - 1);
        *v77 = v79;
        v76 += 2;
        v77 += 2;
        v78 -= 4;
      }
      while (v78);
      if (NumElements != v75)
      {
LABEL_174:
        v80 = 8 * v75;
        v81 = &RawStringData[8 * v75];
        v82 = NumElements - v75;
        v83 = (_QWORD *)(a3 + v80);
        do
        {
          v84 = *(_QWORD *)v81;
          v81 += 8;
          *v83++ = v84;
          --v82;
        }
        while (v82);
      }
    }
    else
    {
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v93);
      mlir::Type::isF16((mlir::Type *)&Value);
      if (NumElements >= 1)
      {
        for (i = 0; i != NumElements; ++i)
        {
          if (v7)
            v74 = 0;
          else
            v74 = i;
          v72.i32[0] = *(_DWORD *)&RawStringData[4 * v74];
          v72 = (float16x4_t)vcvtq_f32_f16(v72).u64[0];
          *(float16x4_t *)(a3 + 8 * i) = v72;
        }
      }
    }
  }
}

void mlir::copyElementsAttrData<complex_support::complex_fp<half,(void *)0>>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _QWORD *Type;
  _QWORD *v6;
  int v7;
  unsigned __int8 *RawStringData;
  unsigned __int8 *v9;
  uint64_t v10;
  int64_t NumElements;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v38;
  _WORD *v39;
  uint64_t v40;
  uint64_t v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v61;
  _WORD *v62;
  uint64_t v63;
  float v65;
  _BYTE *v66;
  uint64_t v67;
  _WORD *v68;
  uint64_t v69;
  float v70;
  void *v71;
  void *v72;
  unsigned int IntOrFloatBitWidth;
  uint64_t v74;
  _WORD *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v80;
  int64_t v81;
  _DWORD *v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v88;
  unsigned __int8 *v89;
  int64_t v90;
  _DWORD *v91;
  int v92;
  float32x4_t v93;
  float32x4_t *v94;
  unint64_t v95;
  uint64_t Value;
  uint64_t OperandRange;
  _QWORD v98[2];
  unsigned __int8 *v99;
  uint64_t v100;
  void *v101[3];
  _QWORD v102[6];

  v102[5] = *MEMORY[0x1E0C80C00];
  v99 = (unsigned __int8 *)a1;
  v100 = a2;
  Type = (_QWORD *)mlir::ElementsAttr::getType((mlir::ElementsAttr *)&v99);
  v6 = Type;
  if (Type)
    Type = (_QWORD *)mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*Type + 8);
  v98[0] = v6;
  v98[1] = Type;
  OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v98);
  v7 = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v99);
  RawStringData = v99;
  if (mlir::DenseElementsAttr::classof((uint64_t)v99))
    v9 = RawStringData;
  else
    v9 = 0;
  v101[0] = v9;
  if (v9)
  {
    RawStringData = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)v101);
    v3 = v10;
    if ((v7 & 1) != 0)
      goto LABEL_8;
LABEL_15:
    NumElements = mlir::ElementsAttr::getNumElements((uint64_t)v99, v100);
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return;
      goto LABEL_17;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
    {
      if (NumElements < 1)
        return;
      goto LABEL_27;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return;
      goto LABEL_39;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
    {
      if (NumElements < 1)
        return;
      goto LABEL_49;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return;
      goto LABEL_59;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
    {
      if (NumElements < 1)
        return;
      goto LABEL_69;
    }
    if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return;
      goto LABEL_79;
    }
    if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
    {
      if (NumElements < 1)
        return;
      goto LABEL_89;
    }
    if (mlir::Type::isF16((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_99;
    }
    if (mlir::Type::isF32((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_109;
    }
    if (mlir::Type::isF64((mlir::Type *)&OperandRange))
    {
      if (NumElements < 1)
        return;
      goto LABEL_119;
    }
    if (!mlir::Type::isBF16((mlir::Type *)&OperandRange))
      goto LABEL_135;
    if (NumElements < 1)
      return;
LABEL_129:
    v61 = 0;
    v62 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v63 = 0;
      else
        v63 = v61;
      _S0 = *(unsigned __int16 *)&RawStringData[2 * v63] << 16;
      __asm { FCVT            H0, S0 }
      *(v62 - 1) = _S0;
      *v62 = 0;
      v62 += 2;
      ++v61;
    }
    while (NumElements != v61);
    return;
  }
  if (*(_UNKNOWN **)(*(_QWORD *)RawStringData + 136) == &mlir::detail::TypeIDResolver<mlir::mps::MPSBufferTensorAttr,void>::id)
    v13 = RawStringData;
  else
    v13 = 0;
  v101[0] = v13;
  if (v13)
  {
    RawStringData = (unsigned __int8 *)mlir::mps::MPSBufferTensorAttr::getMutableRawData((mlir::mps::MPSBufferTensorAttr *)v101);
    v3 = v14;
    if ((v7 & 1) == 0)
      goto LABEL_15;
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_15;
  }
LABEL_8:
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_17:
    v15 = 0;
    v16 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v17 = 0;
      else
        v17 = v15;
      LOBYTE(_S0) = RawStringData[v17];
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *(v16 - 1) = LOWORD(_S0);
      *v16 = 0;
      v16 += 2;
      ++v15;
    }
    while (NumElements != v15);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 8))
  {
    NumElements = 1;
LABEL_27:
    v23 = 0;
    v24 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v25 = 0;
      else
        v25 = v23;
      _D0.i8[0] = RawStringData[v25];
      _D0 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(_D0)).u64[0];
      *(float *)_D0.i32 = (float)_D0.i32[0];
      __asm { FCVT            H0, S0 }
      *(v24 - 1) = _D0.i16[0];
      *v24 = 0;
      v24 += 2;
      ++v23;
    }
    while (NumElements != v23);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_39:
    v27 = 0;
    v28 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v29 = 0;
      else
        v29 = v27;
      LOWORD(_S0) = *(_WORD *)&RawStringData[2 * v29];
      _S0 = (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *(v28 - 1) = LOWORD(_S0);
      *v28 = 0;
      v28 += 2;
      ++v27;
    }
    while (NumElements != v27);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 16))
  {
    NumElements = 1;
LABEL_49:
    v31 = 0;
    v32 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v33 = 0;
      else
        v33 = v31;
      _D0.i16[0] = *(_WORD *)&RawStringData[2 * v33];
      _D0 = (int16x4_t)vmovl_s16(_D0).u64[0];
      *(float *)_D0.i32 = (float)_D0.i32[0];
      __asm { FCVT            H0, S0 }
      *(v32 - 1) = _D0.i16[0];
      *v32 = 0;
      v32 += 2;
      ++v31;
    }
    while (NumElements != v31);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_59:
    v34 = 0;
    v35 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v36 = 0;
      else
        v36 = v34;
      _S0 = (float)*(unsigned int *)&RawStringData[4 * v36];
      __asm { FCVT            H0, S0 }
      *(v35 - 1) = LOWORD(_S0);
      *v35 = 0;
      v35 += 2;
      ++v34;
    }
    while (NumElements != v34);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 32))
  {
    NumElements = 1;
LABEL_69:
    v38 = 0;
    v39 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v40 = 0;
      else
        v40 = v38;
      _S0 = (float)*(int *)&RawStringData[4 * v40];
      __asm { FCVT            H0, S0 }
      *(v39 - 1) = LOWORD(_S0);
      *v39 = 0;
      v39 += 2;
      ++v38;
    }
    while (NumElements != v38);
    return;
  }
  if (mlir::Type::isUnsignedInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_79:
    v42 = 0;
    v43 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v44 = 0;
      else
        v44 = v42;
      _S0 = (float)*(unint64_t *)&RawStringData[8 * v44];
      __asm { FCVT            H0, S0 }
      *(v43 - 1) = LOWORD(_S0);
      *v43 = 0;
      v43 += 2;
      ++v42;
    }
    while (NumElements != v42);
    return;
  }
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 64))
  {
    NumElements = 1;
LABEL_89:
    v46 = 0;
    v47 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v48 = 0;
      else
        v48 = v46;
      _S0 = (float)*(uint64_t *)&RawStringData[8 * v48];
      __asm { FCVT            H0, S0 }
      *(v47 - 1) = LOWORD(_S0);
      *v47 = 0;
      v47 += 2;
      ++v46;
    }
    while (NumElements != v46);
    return;
  }
  if (mlir::Type::isF16((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_99:
    v50 = 0;
    v51 = a3 + 2;
    do
    {
      if (v7)
        v52 = 0;
      else
        v52 = v50;
      *(_DWORD *)(v51 - 2) = *(unsigned __int16 *)&RawStringData[2 * v52];
      v51 += 4;
      ++v50;
    }
    while (NumElements != v50);
    return;
  }
  if (mlir::Type::isF32((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_109:
    v53 = 0;
    v54 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v55 = 0;
      else
        v55 = v53;
      _S0 = *(_DWORD *)&RawStringData[4 * v55];
      __asm { FCVT            H0, S0 }
      *(v54 - 1) = _S0;
      *v54 = 0;
      v54 += 2;
      ++v53;
    }
    while (NumElements != v53);
    return;
  }
  if (mlir::Type::isF64((mlir::Type *)&OperandRange))
  {
    NumElements = 1;
LABEL_119:
    v57 = 0;
    v58 = (_WORD *)(a3 + 2);
    do
    {
      if (v7)
        v59 = 0;
      else
        v59 = v57;
      _S0 = *(double *)&RawStringData[8 * v59];
      __asm { FCVT            H0, S0 }
      *(v58 - 1) = LOWORD(_S0);
      *v58 = 0;
      v58 += 2;
      ++v57;
    }
    while (NumElements != v57);
    return;
  }
  NumElements = 1;
  if (mlir::Type::isBF16((mlir::Type *)&OperandRange))
    goto LABEL_129;
LABEL_135:
  if (mlir::Type::isInteger((mlir::Type *)&OperandRange, 1))
  {
    llvm::SmallVector<BOOL,40u>::SmallVector((uint64_t)v101, NumElements);
    mlir::detail::unpackBooleanData(RawStringData, v3, (uint64_t)v101[0], (unint64_t)v101[1]);
    v66 = v101[0];
    if (NumElements >= 1)
    {
      v67 = 0;
      v68 = (_WORD *)(a3 + 2);
      LOWORD(v65) = 15360;
      do
      {
        if (v7)
          v69 = 0;
        else
          v69 = v67;
        if (v66[v69])
          v70 = v65;
        else
          v70 = 0.0;
        *(v68 - 1) = LOWORD(v70);
        *v68 = 0;
        v68 += 2;
        ++v67;
      }
      while (NumElements != v67);
    }
    if (v66 != (_BYTE *)v102)
      free(v66);
  }
  else
  {
    v71 = (void *)OperandRange;
    v72 = *(void **)(*(_QWORD *)OperandRange + 136);
    if (v72 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      v71 = 0;
    v101[0] = v71;
    if (v72 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    {
      mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      IntOrFloatBitWidth = mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&OperandRange);
      mlir::detail::unpackQuantizedData<complex_support::complex_fp<half,(void *)0>>(RawStringData, v3, a3, NumElements, IntOrFloatBitWidth);
      return;
    }
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v101);
    if (mlir::Type::isF32((mlir::Type *)&Value))
    {
      if (NumElements >= 1)
      {
        v74 = 0;
        v75 = (_WORD *)(a3 + 2);
        do
        {
          if (v7)
            v76 = 0;
          else
            v76 = v74;
          v77 = &RawStringData[8 * v76];
          _S0 = *(_DWORD *)v77;
          _S1 = *((_DWORD *)v77 + 1);
          __asm
          {
            FCVT            H0, S0
            FCVT            H1, S1
          }
          *(v75 - 1) = _S0;
          *v75 = _S1;
          ++v74;
          v75 += 2;
        }
        while (NumElements != v74);
      }
    }
    else
    {
      Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)v101);
      mlir::Type::isF16((mlir::Type *)&Value);
      if (NumElements < 1)
        return;
      if ((v7 & 1) != 0)
      {
        if ((unint64_t)NumElements >= 8
          && ((unint64_t)(RawStringData + 4) <= a3 || a3 + 4 * NumElements <= (unint64_t)RawStringData))
        {
          v80 = NumElements & 0x7FFFFFFFFFFFFFF8;
          v93 = vld1q_dup_f32((const float *)RawStringData);
          v94 = (float32x4_t *)(a3 + 16);
          v95 = NumElements & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v94[-1] = v93;
            *v94 = v93;
            v94 += 2;
            v95 -= 8;
          }
          while (v95);
          if (NumElements == v80)
            return;
        }
        else
        {
          v80 = 0;
        }
        v81 = NumElements - v80;
        v82 = (_DWORD *)(a3 + 4 * v80);
        do
        {
          *v82++ = *(_DWORD *)RawStringData;
          --v81;
        }
        while (v81);
        return;
      }
      v83 = 0;
      if ((unint64_t)NumElements < 8)
        goto LABEL_174;
      if (a3 - (unint64_t)RawStringData < 0x20)
        goto LABEL_174;
      v83 = NumElements & 0x7FFFFFFFFFFFFFF8;
      v84 = (__int128 *)(RawStringData + 16);
      v85 = (_OWORD *)(a3 + 16);
      v86 = NumElements & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v87 = *v84;
        *(v85 - 1) = *(v84 - 1);
        *v85 = v87;
        v84 += 2;
        v85 += 2;
        v86 -= 8;
      }
      while (v86);
      if (NumElements != v83)
      {
LABEL_174:
        v88 = 4 * v83;
        v89 = &RawStringData[4 * v83];
        v90 = NumElements - v83;
        v91 = (_DWORD *)(a3 + v88);
        do
        {
          v92 = *(_DWORD *)v89;
          v89 += 4;
          *v91++ = v92;
          --v90;
        }
        while (v90);
      }
    }
  }
}

unsigned __int8 *mlir::detail::unpackQuantizedData<unsigned char>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_181233120));
      if ((v14.i8[0] & 1) != 0)
      {
        *(_BYTE *)(a3 + v9) = v11 & v6;
        if ((v14.i8[4] & 1) != 0)
        {
LABEL_15:
          *(_BYTE *)(v9 + a3 + 1) = (v11 >> a5) & v6;
          v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2)
            goto LABEL_3;
          goto LABEL_16;
        }
      }
      else if ((v14.i8[4] & 1) != 0)
      {
        goto LABEL_15;
      }
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
LABEL_16:
      v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233160));
      if ((v16.i8[0] & 1) != 0)
      {
        *(_BYTE *)(v9 + a3 + 2) = (v11 >> (2 * a5)) & v6;
        if ((v16.i8[4] & 1) != 0)
        {
LABEL_21:
          *(_BYTE *)(v9 + a3 + 3) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_22;
        }
      }
      else if ((v16.i8[4] & 1) != 0)
      {
        goto LABEL_21;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_22:
      v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233170));
      if ((v17.i8[0] & 1) != 0)
      {
        *(_BYTE *)(v9 + a3 + 4) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(_BYTE *)(v9 + a3 + 5) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_28:
        v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233180));
        if ((v18.i8[0] & 1) != 0)
          *(_BYTE *)(v9 + a3 + 6) = (v11 >> (6 * a5)) & v6;
        if ((v18.i8[4] & 1) != 0)
          *(_BYTE *)(v9 + a3 + 7) = (v11 >> (7 * a5)) & v6;
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<unsigned short>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  __int16 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_181233120));
      if ((v14.i8[0] & 1) != 0)
      {
        *(_WORD *)(a3 + 2 * v9) = v6 & v11;
        if ((v14.i8[4] & 1) != 0)
        {
LABEL_15:
          *(_WORD *)(a3 + 2 * v9 + 2) = (v11 >> a5) & v6;
          v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2)
            goto LABEL_3;
          goto LABEL_16;
        }
      }
      else if ((v14.i8[4] & 1) != 0)
      {
        goto LABEL_15;
      }
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
LABEL_16:
      v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233160));
      if ((v16.i8[0] & 1) != 0)
      {
        *(_WORD *)(a3 + 2 * v9 + 4) = (v11 >> (2 * a5)) & v6;
        if ((v16.i8[4] & 1) != 0)
        {
LABEL_21:
          *(_WORD *)(a3 + 2 * v9 + 6) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_22;
        }
      }
      else if ((v16.i8[4] & 1) != 0)
      {
        goto LABEL_21;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_22:
      v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233170));
      if ((v17.i8[0] & 1) != 0)
      {
        *(_WORD *)(a3 + 2 * v9 + 8) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(_WORD *)(a3 + 2 * v9 + 10) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_28:
        v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233180));
        if ((v18.i8[0] & 1) != 0)
          *(_WORD *)(a3 + 2 * v9 + 12) = (v11 >> (6 * a5)) & v6;
        if ((v18.i8[4] & 1) != 0)
          *(_WORD *)(a3 + 2 * v9 + 14) = (v11 >> (7 * a5)) & v6;
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<unsigned int>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_181233120));
      if ((v14.i8[0] & 1) != 0)
      {
        *(_DWORD *)(a3 + 4 * v9) = v6 & v11;
        if ((v14.i8[4] & 1) != 0)
        {
LABEL_15:
          *(_DWORD *)(a3 + 4 * v9 + 4) = (v11 >> a5) & v6;
          v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2)
            goto LABEL_3;
          goto LABEL_16;
        }
      }
      else if ((v14.i8[4] & 1) != 0)
      {
        goto LABEL_15;
      }
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
LABEL_16:
      v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233160));
      if ((v16.i8[0] & 1) != 0)
      {
        *(_DWORD *)(a3 + 4 * v9 + 8) = (v11 >> (2 * a5)) & v6;
        if ((v16.i8[4] & 1) != 0)
        {
LABEL_21:
          *(_DWORD *)(a3 + 4 * v9 + 12) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_22;
        }
      }
      else if ((v16.i8[4] & 1) != 0)
      {
        goto LABEL_21;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_22:
      v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233170));
      if ((v17.i8[0] & 1) != 0)
      {
        *(_DWORD *)(a3 + 4 * v9 + 16) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(_DWORD *)(a3 + 4 * v9 + 20) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_28:
        v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233180));
        if ((v18.i8[0] & 1) != 0)
          *(_DWORD *)(a3 + 4 * v9 + 24) = (v11 >> (6 * a5)) & v6;
        if ((v18.i8[4] & 1) != 0)
          *(_DWORD *)(a3 + 4 * v9 + 28) = (v11 >> (7 * a5)) & v6;
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<unsigned long long>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_181233120));
      if ((v14.i8[0] & 1) != 0)
      {
        *(_QWORD *)(a3 + 8 * v9) = v6 & v11;
        if ((v14.i8[4] & 1) != 0)
        {
LABEL_15:
          *(_QWORD *)(a3 + 8 * v9 + 8) = (v11 >> a5) & v6;
          v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2)
            goto LABEL_3;
          goto LABEL_16;
        }
      }
      else if ((v14.i8[4] & 1) != 0)
      {
        goto LABEL_15;
      }
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
LABEL_16:
      v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233160));
      if ((v16.i8[0] & 1) != 0)
      {
        *(_QWORD *)(a3 + 8 * v9 + 16) = (v11 >> (2 * a5)) & v6;
        if ((v16.i8[4] & 1) != 0)
        {
LABEL_21:
          *(_QWORD *)(a3 + 8 * v9 + 24) = (v11 >> (3 * a5)) & v6;
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_22;
        }
      }
      else if ((v16.i8[4] & 1) != 0)
      {
        goto LABEL_21;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_22:
      v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233170));
      if ((v17.i8[0] & 1) != 0)
      {
        *(_QWORD *)(a3 + 8 * v9 + 32) = (v11 >> (4 * a5)) & v6;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(_QWORD *)(a3 + 8 * v9 + 40) = (v11 >> (5 * a5)) & v6;
      if (v15 != 6)
      {
LABEL_28:
        v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233180));
        if ((v18.i8[0] & 1) != 0)
          *(_QWORD *)(a3 + 8 * v9 + 48) = (v11 >> (6 * a5)) & v6;
        if ((v18.i8[4] & 1) != 0)
          *(_QWORD *)(a3 + 8 * v9 + 56) = (v11 >> (7 * a5)) & v6;
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<half>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v22;
  int32x2_t v25;
  int32x2_t v28;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_181233120));
      if ((v14.i8[0] & 1) != 0)
      {
        _S6 = (float)(int)(v6 & v11);
        __asm { FCVT            H6, S6 }
        *(_WORD *)(a3 + 2 * v9) = LOWORD(_S6);
        if ((v14.i8[4] & 1) != 0)
        {
LABEL_15:
          _S5 = (float)(int)((v11 >> a5) & v6);
          __asm { FCVT            H5, S5 }
          *(_WORD *)(a3 + 2 * v9 + 2) = LOWORD(_S5);
          v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2)
            goto LABEL_3;
          goto LABEL_16;
        }
      }
      else if ((v14.i8[4] & 1) != 0)
      {
        goto LABEL_15;
      }
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
LABEL_16:
      v22 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233160));
      if ((v22.i8[0] & 1) != 0)
      {
        _S6 = (float)(int)((v11 >> (2 * a5)) & v6);
        __asm { FCVT            H6, S6 }
        *(_WORD *)(a3 + 2 * v9 + 4) = LOWORD(_S6);
        if ((v22.i8[4] & 1) != 0)
        {
LABEL_21:
          _S5 = (float)(int)((v11 >> (3 * a5)) & v6);
          __asm { FCVT            H5, S5 }
          *(_WORD *)(a3 + 2 * v9 + 6) = LOWORD(_S5);
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_22;
        }
      }
      else if ((v22.i8[4] & 1) != 0)
      {
        goto LABEL_21;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_22:
      v25 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233170));
      if ((v25.i8[0] & 1) != 0)
      {
        _S6 = (float)(int)((v11 >> (4 * a5)) & v6);
        __asm { FCVT            H6, S6 }
        *(_WORD *)(a3 + 2 * v9 + 8) = LOWORD(_S6);
        if ((v25.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      else if ((v25.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      _S5 = (float)(int)((v11 >> (5 * a5)) & v6);
      __asm { FCVT            H5, S5 }
      *(_WORD *)(a3 + 2 * v9 + 10) = LOWORD(_S5);
      if (v15 != 6)
      {
LABEL_28:
        v28 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233180));
        if ((v28.i8[0] & 1) != 0)
        {
          _S5 = (float)(int)((v11 >> (6 * a5)) & v6);
          __asm { FCVT            H5, S5 }
          *(_WORD *)(a3 + 2 * v9 + 12) = LOWORD(_S5);
        }
        if ((v28.i8[4] & 1) != 0)
        {
          _S4 = (float)(int)((v11 >> (7 * a5)) & v6);
          __asm { FCVT            H4, S4 }
          *(_WORD *)(a3 + 2 * v9 + 14) = LOWORD(_S4);
        }
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<__emulated_bf16>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (v10)
      {
        v11 = *result;
        if (v7 >= v8)
          v12 = 8 / a5;
        else
          v12 = v7;
        v13 = (float)(int)(v6 & v11)
            + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)(v6 & v11)) & 0xFF800000) * 0.0039062);
        *(_WORD *)(a3 + 2 * v9) = HIWORD(v13);
        if (v12 != 1)
        {
          v14 = (float)(int)((v11 >> a5) & v6)
              + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> a5) & v6)) & 0xFF800000) * 0.0039062);
          v15 = a3 + 2 * v9;
          *(_WORD *)(v15 + 2) = HIWORD(v14);
          if (v12 != 2)
          {
            v16 = (float)(int)((v11 >> (2 * a5)) & v6)
                + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (2 * a5)) & v6)) & 0xFF800000)
                        * 0.0039062);
            *(_WORD *)(v15 + 4) = HIWORD(v16);
            if (v12 != 3)
            {
              v17 = (float)(int)((v11 >> (3 * a5)) & v6)
                  + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (3 * a5)) & v6)) & 0xFF800000)
                          * 0.0039062);
              v18 = a3 + 2 * v9;
              *(_WORD *)(v18 + 6) = HIWORD(v17);
              if (v12 != 4)
              {
                v19 = (float)(int)((v11 >> (4 * a5)) & v6)
                    + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (4 * a5)) & v6)) & 0xFF800000)
                            * 0.0039062);
                *(_WORD *)(v18 + 8) = HIWORD(v19);
                if (v12 != 5)
                {
                  v20 = (float)(int)((v11 >> (5 * a5)) & v6)
                      + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (5 * a5)) & v6)) & 0xFF800000)
                              * 0.0039062);
                  v21 = a3 + 2 * v9;
                  *(_WORD *)(v21 + 10) = HIWORD(v20);
                  if (v12 != 6)
                  {
                    v22 = (float)(int)((v11 >> (6 * a5)) & v6)
                        + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (6 * a5)) & v6)) & 0xFF800000)
                                * 0.0039062);
                    *(_WORD *)(v21 + 12) = HIWORD(v22);
                    if (v12 != 7)
                    {
                      v23 = (float)(int)((v11 >> (7 * a5)) & v6)
                          + (float)(COERCE_FLOAT(COERCE_UNSIGNED_INT((float)(int)((v11 >> (7 * a5)) & v6)) & 0xFF800000)
                                  * 0.0039062);
                      *(_WORD *)(a3 + 2 * v9 + 14) = HIWORD(v23);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<double>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_181233120));
      if ((v14.i8[0] & 1) != 0)
      {
        *(double *)(a3 + 8 * v9) = (double)(int)(v6 & v11);
        if ((v14.i8[4] & 1) != 0)
        {
LABEL_15:
          *(double *)(a3 + 8 * v9 + 8) = (double)(int)((v11 >> a5) & v6);
          v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2)
            goto LABEL_3;
          goto LABEL_16;
        }
      }
      else if ((v14.i8[4] & 1) != 0)
      {
        goto LABEL_15;
      }
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
LABEL_16:
      v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233160));
      if ((v16.i8[0] & 1) != 0)
      {
        *(double *)(a3 + 8 * v9 + 16) = (double)(int)((v11 >> (2 * a5)) & v6);
        if ((v16.i8[4] & 1) != 0)
        {
LABEL_21:
          *(double *)(a3 + 8 * v9 + 24) = (double)(int)((v11 >> (3 * a5)) & v6);
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_22;
        }
      }
      else if ((v16.i8[4] & 1) != 0)
      {
        goto LABEL_21;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_22:
      v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233170));
      if ((v17.i8[0] & 1) != 0)
      {
        *(double *)(a3 + 8 * v9 + 32) = (double)(int)((v11 >> (4 * a5)) & v6);
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(double *)(a3 + 8 * v9 + 40) = (double)(int)((v11 >> (5 * a5)) & v6);
      if (v15 != 6)
      {
LABEL_28:
        v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233180));
        if ((v18.i8[0] & 1) != 0)
          *(double *)(a3 + 8 * v9 + 48) = (double)(int)((v11 >> (6 * a5)) & v6);
        if ((v18.i8[4] & 1) != 0)
          *(double *)(a3 + 8 * v9 + 56) = (double)(int)((v11 >> (7 * a5)) & v6);
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<BOOL>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64x2_t v13;
  int32x2_t v14;
  uint64_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (!v10)
        goto LABEL_3;
      v11 = *result;
      if (v7 >= v8)
        v12 = 8 / a5;
      else
        v12 = v7;
      v13 = (uint64x2_t)vdupq_n_s64(v12 - 1);
      v14 = vmovn_s64((int64x2_t)vcgeq_u64(v13, (uint64x2_t)xmmword_181233120));
      if ((v14.i8[0] & 1) != 0)
      {
        *(_BYTE *)(a3 + v9) = (v6 & v11) != 0;
        if ((v14.i8[4] & 1) != 0)
        {
LABEL_15:
          *(_BYTE *)(v9 + a3 + 1) = ((v11 >> a5) & v6) != 0;
          v15 = ((_BYTE)v12 + 1) & 0x1E;
          if (v15 == 2)
            goto LABEL_3;
          goto LABEL_16;
        }
      }
      else if ((v14.i8[4] & 1) != 0)
      {
        goto LABEL_15;
      }
      v15 = ((_BYTE)v12 + 1) & 0x1E;
      if (v15 == 2)
        goto LABEL_3;
LABEL_16:
      v16 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233160));
      if ((v16.i8[0] & 1) != 0)
      {
        *(_BYTE *)(v9 + a3 + 2) = ((v11 >> (2 * a5)) & v6) != 0;
        if ((v16.i8[4] & 1) != 0)
        {
LABEL_21:
          *(_BYTE *)(v9 + a3 + 3) = ((v11 >> (3 * a5)) & v6) != 0;
          if (v15 == 4)
            goto LABEL_3;
          goto LABEL_22;
        }
      }
      else if ((v16.i8[4] & 1) != 0)
      {
        goto LABEL_21;
      }
      if (v15 == 4)
        goto LABEL_3;
LABEL_22:
      v17 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233170));
      if ((v17.i8[0] & 1) != 0)
      {
        *(_BYTE *)(v9 + a3 + 4) = ((v11 >> (4 * a5)) & v6) != 0;
        if ((v17.i8[4] & 1) == 0)
        {
LABEL_24:
          if (v15 != 6)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      else if ((v17.i8[4] & 1) == 0)
      {
        goto LABEL_24;
      }
      *(_BYTE *)(v9 + a3 + 5) = ((v11 >> (5 * a5)) & v6) != 0;
      if (v15 != 6)
      {
LABEL_28:
        v18 = vmovn_s64((int64x2_t)vcgtq_u64(v13, (uint64x2_t)xmmword_181233180));
        if ((v18.i8[0] & 1) != 0)
          *(_BYTE *)(v9 + a3 + 6) = ((v11 >> (6 * a5)) & v6) != 0;
        if ((v18.i8[4] & 1) != 0)
          *(_BYTE *)(v9 + a3 + 7) = ((v11 >> (7 * a5)) & v6) != 0;
      }
LABEL_3:
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<complex_support::complex_fp<float,(void *)0>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (v10)
      {
        v11 = *result;
        if (v7 >= v8)
          v12 = 8 / a5;
        else
          v12 = v7;
        v13 = a3 + 8 * v9;
        *(float *)v13 = (float)(int)(v6 & v11);
        *(_DWORD *)(v13 + 4) = 0;
        if (v12 != 1)
        {
          *(float *)(v13 + 8) = (float)(int)((v11 >> a5) & v6);
          *(_DWORD *)(v13 + 12) = 0;
          if (v12 != 2)
          {
            v14 = a3 + 8 * v9;
            *(float *)(v14 + 16) = (float)(int)((v11 >> (2 * a5)) & v6);
            *(_DWORD *)(v14 + 20) = 0;
            if (v12 != 3)
            {
              *(float *)(v14 + 24) = (float)(int)((v11 >> (3 * a5)) & v6);
              *(_DWORD *)(v14 + 28) = 0;
              if (v12 != 4)
              {
                v15 = a3 + 8 * v9;
                *(float *)(v15 + 32) = (float)(int)((v11 >> (4 * a5)) & v6);
                *(_DWORD *)(v15 + 36) = 0;
                if (v12 != 5)
                {
                  *(float *)(v15 + 40) = (float)(int)((v11 >> (5 * a5)) & v6);
                  *(_DWORD *)(v15 + 44) = 0;
                  if (v12 != 6)
                  {
                    v16 = a3 + 8 * v9;
                    *(float *)(v16 + 48) = (float)(int)((v11 >> (6 * a5)) & v6);
                    *(_DWORD *)(v16 + 52) = 0;
                    if (v12 != 7)
                    {
                      *(float *)(v16 + 56) = (float)(int)((v11 >> (7 * a5)) & v6);
                      *(_DWORD *)(v16 + 60) = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

unsigned __int8 *mlir::detail::unpackQuantizedData<complex_support::complex_fp<half,(void *)0>>(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v13;
  _WORD *v19;
  _WORD *v22;
  _WORD *v25;
  _WORD *v28;

  if (a2)
  {
    v5 = 0;
    v6 = ~(-1 << a5);
    v7 = a4;
    v8 = 8 / a5;
    do
    {
      v9 = v5 * v8;
      v10 = a4 - v5 * v8;
      if (v10 >= v8)
        v10 = 8 / a5;
      if (v10)
      {
        v11 = *result;
        _S0 = (float)(int)(v6 & v11);
        if (v7 >= v8)
          v13 = 8 / a5;
        else
          v13 = v7;
        __asm { FCVT            H0, S0 }
        v19 = (_WORD *)(a3 + 4 * v9);
        *v19 = _H0;
        v19[1] = 0;
        if (v13 != 1)
        {
          _S0 = (float)(int)((v11 >> a5) & v6);
          __asm { FCVT            H0, S0 }
          v19[2] = LOWORD(_S0);
          v19[3] = 0;
          if (v13 != 2)
          {
            _S0 = (float)(int)((v11 >> (2 * a5)) & v6);
            __asm { FCVT            H0, S0 }
            v22 = (_WORD *)(a3 + 4 * v9);
            v22[4] = LOWORD(_S0);
            v22[5] = 0;
            if (v13 != 3)
            {
              _S0 = (float)(int)((v11 >> (3 * a5)) & v6);
              __asm { FCVT            H0, S0 }
              v22[6] = LOWORD(_S0);
              v22[7] = 0;
              if (v13 != 4)
              {
                _S0 = (float)(int)((v11 >> (4 * a5)) & v6);
                __asm { FCVT            H0, S0 }
                v25 = (_WORD *)(a3 + 4 * v9);
                v25[8] = LOWORD(_S0);
                v25[9] = 0;
                if (v13 != 5)
                {
                  _S0 = (float)(int)((v11 >> (5 * a5)) & v6);
                  __asm { FCVT            H0, S0 }
                  v25[10] = LOWORD(_S0);
                  v25[11] = 0;
                  if (v13 != 6)
                  {
                    _S0 = (float)(int)((v11 >> (6 * a5)) & v6);
                    __asm { FCVT            H0, S0 }
                    v28 = (_WORD *)(a3 + 4 * v9);
                    v28[12] = LOWORD(_S0);
                    v28[13] = 0;
                    if (v13 != 7)
                    {
                      _S0 = (float)(int)((v11 >> (7 * a5)) & v6);
                      __asm { FCVT            H0, S0 }
                      v28[14] = LOWORD(_S0);
                      v28[15] = 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v5;
      v7 -= v8;
      ++result;
      --a2;
    }
    while (a2);
  }
  return result;
}

BOOL mlir::detail::upgradeFromVersion(mlir::ForwardIterator *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::detail::upgradeFromVersion(mlir::Operation *,mlir::DialectVersion const&)::$_0>, (uint64_t)&v3, 1) != 0;
}

BOOL mlir::detail::downgradeToVersion(mlir::ForwardIterator *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return mlir::detail::walk<mlir::ForwardIterator>(a1, (mlir::Operation *)llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::detail::downgradeToVersion(mlir::Operation *,mlir::DialectVersion const&)::$_0>, (uint64_t)&v3, 1) != 0;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::detail::upgradeFromVersion(mlir::Operation *,mlir::DialectVersion const&)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t Values;
  unsigned __int16 *v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **NextResultAtOffset;
  uint64_t *i;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *InterfaceFor;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t Context;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 + 48);
  if (*(_UNKNOWN **)(v4 + 16) == &mlir::detail::TypeIDResolver<void,void>::id
    && (Context = *(_QWORD *)(v4 + 8),
        Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&Context),
        *(_QWORD *)(Values + 16) == 3)
    && ((v6 = *(unsigned __int16 **)(Values + 8), v7 = *v6, v8 = *((unsigned __int8 *)v6 + 2), v7 == 28781)
      ? (v9 = v8 == 115)
      : (v9 = 0),
        v9))
  {
    Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v33 = 0;
    v24 = *(_QWORD *)(a2 + 16);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
    v34 = v24;
    v35 = v25;
    v26 = *(_QWORD *)(a2 + 48);
    if (*(_UNKNOWN **)(v26 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      v29 = *(_QWORD *)(v26 + 8);
      mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v29);
    }
    mlir::mps::MPSDialect::convertUnregisteredOperation((mlir::OpBuilder *)&Context, *a1, a2, (uint64_t)&v29);
    v12 = v29;
    v13 = v30;
    if (v31)
      goto LABEL_12;
  }
  else
  {
    if (!mlir::OpInterface<mlir::UpgraderInterface,mlir::detail::UpgraderInterfaceInterfaceTraits>::getInterfaceFor(a2))
    {
      v27 = 0;
      InterfaceFor = 0;
      return 1;
    }
    v27 = a2;
    InterfaceFor = mlir::OpInterface<mlir::UpgraderInterface,mlir::detail::UpgraderInterfaceInterfaceTraits>::getInterfaceFor(a2);
    if (!a2)
      return 1;
    Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    v33 = 0;
    v10 = *(_QWORD *)(a2 + 16);
    mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
    v34 = v10;
    v35 = v11;
    mlir::DowngraderInterface::downgradeToVersion((uint64_t)&v27, (uint64_t)&Context, *a1);
    v12 = v29;
    v13 = v30;
    if (v31)
    {
LABEL_12:
      if (v13)
      {
        Context = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, 0);
        if (mlir::Value::getDefiningOp((mlir::Value *)&Context) == a2)
        {
          v14 = 1;
          while (v13 != v14)
          {
            Context = mlir::detail::OpResultImpl::getNextResultAtOffset(v12, v14++);
            if (mlir::Value::getDefiningOp((mlir::Value *)&Context) != a2)
              goto LABEL_17;
          }
        }
        else
        {
LABEL_17:
          v15 = *(unsigned int *)(a2 + 36);
          if ((_DWORD)v15)
            v16 = a2 - 16;
          else
            v16 = 0;
          if ((_DWORD)v15)
          {
            v17 = 0;
            do
            {
              NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
              for (i = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v12, v17); ; *i = (uint64_t)v20)
              {
                v20 = *NextResultAtOffset;
                if (!*NextResultAtOffset)
                  break;
                v21 = (uint64_t *)v20[1];
                if (v21)
                {
                  *v21 = *v20;
                  if (*v20)
                    *(_QWORD *)(*v20 + 8) = v20[1];
                }
                v20[3] = (uint64_t)i;
                v20[1] = (uint64_t)i;
                v22 = *i;
                *v20 = *i;
                if (v22)
                  *(_QWORD *)(v22 + 8) = v20;
              }
              ++v17;
            }
            while (v17 != v15 && v17 != v13);
          }
          mlir::Operation::erase((mlir::Operation *)a2);
        }
      }
      return 1;
    }
  }
  return 0;
}

void *mlir::OpInterface<mlir::UpgraderInterface,mlir::detail::UpgraderInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  void *result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = (void *)mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::UpgraderInterface]";
          v31 = 73;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::UpgraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::UpgraderInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::UpgraderInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::UpgraderInterface]";
          v31 = 73;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::UpgraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::UpgraderInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

void *mlir::detail::InterfaceMap::lookup<mlir::UpgraderInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  void **p_vtable;
  unint64_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  void **v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  p_vtable = &OBJC_METACLASS___MPSGraphRankOp.vtable;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::UpgraderInterface]";
      v23 = 73;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::UpgraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      p_vtable = (void **)(&OBJC_METACLASS___MPSGraphRankOp + 24);
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = p_vtable[480];
  v5 = *(void ***)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = (unint64_t *)&v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = (void **)(v8 + 2);
    v3 += ~(v3 >> 1);
    if (v10 < (unint64_t)v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (void **)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Operation *)>::callback_fn<mlir::detail::downgradeToVersion(mlir::Operation *,mlir::DialectVersion const&)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  mlir::detail::OpResultImpl *v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t InterfaceFor;
  uint64_t NextResultAtOffset;

  if (!a2)
  {
    v20 = 0;
    InterfaceFor = 0;
    return 1;
  }
  if (!mlir::OpInterface<mlir::DowngraderInterface,mlir::detail::DowngraderInterfaceInterfaceTraits>::getInterfaceFor(a2))
  {
    v20 = 0;
    InterfaceFor = 0;
    return 1;
  }
  v20 = a2;
  InterfaceFor = mlir::OpInterface<mlir::DowngraderInterface,mlir::detail::DowngraderInterfaceInterfaceTraits>::getInterfaceFor(a2);
  if (!a2)
    return 1;
  v19[0] = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  v19[1] = 0;
  v4 = *(_QWORD *)(a2 + 16);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
  v19[2] = v4;
  v19[3] = v5;
  mlir::DowngraderInterface::downgradeToVersion((uint64_t)&v20, (uint64_t)v19, *a1);
  if (v18)
  {
    if (v17)
    {
      NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v16, 0);
      if (mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset) == a2)
      {
        v6 = 1;
        while (v17 != v6)
        {
          NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v16, v6++);
          if (mlir::Value::getDefiningOp((mlir::Value *)&NextResultAtOffset) != a2)
            goto LABEL_13;
        }
      }
      else
      {
LABEL_13:
        v7 = *(unsigned int *)(a2 + 36);
        if ((_DWORD)v7)
          v8 = a2 - 16;
        else
          v8 = 0;
        if ((_DWORD)v7)
        {
          v9 = 0;
          do
          {
            v10 = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset(v8, v9);
            for (i = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v16, v9); ; *i = (uint64_t)v12)
            {
              v12 = *v10;
              if (!*v10)
                break;
              v13 = (uint64_t *)v12[1];
              if (v13)
              {
                *v13 = *v12;
                if (*v12)
                  *(_QWORD *)(*v12 + 8) = v12[1];
              }
              v12[3] = (uint64_t)i;
              v12[1] = (uint64_t)i;
              v14 = *i;
              *v12 = *i;
              if (v14)
                *(_QWORD *)(v14 + 8) = v12;
            }
            ++v9;
          }
          while (v9 != v7 && v9 != v17);
        }
        mlir::Operation::erase((mlir::Operation *)a2);
      }
    }
    return 1;
  }
  return 0;
}

uint64_t mlir::OpInterface<mlir::DowngraderInterface,mlir::detail::DowngraderInterfaceInterfaceTraits>::getInterfaceFor(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(void **)(v1 + 16);
  v3 = v2 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<void,void>::id)
    v4 = 0;
  else
    v4 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v30 = *(const char **)(v1 + 8);
    result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v30);
    if (result)
    {
      if ((v8 & 1) == 0)
      {
        v12 = result;
        result = v12;
        if (v13)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DowngraderInterface]";
          v31 = 75;
          v14 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v14)
            v15 = v14;
          else
            v15 = v31;
          v16 = &v30[v15];
          v17 = v31 - v15;
          if (v31 - v15 >= 0x12)
            v18 = 18;
          else
            v18 = v31 - v15;
          v19 = v17 - v18;
          if (v19 >= v19 - 1)
            v20 = v19 - 1;
          else
            v20 = v19;
          mlir::detail::TypeIDResolver<mlir::DowngraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
          result = v12;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, mlir::detail::TypeIDResolver<mlir::DowngraderInterface,void>::resolveTypeID(void)::id, v1);
    }
  }
  else
  {
    v6 = v4 | v1 & 0xFFFFFFFFFFFFFF00;
    result = mlir::detail::InterfaceMap::lookup<mlir::DowngraderInterface>(v6 + 32);
    if (!result)
    {
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(a1 + 48);
      if ((v11 & 1) == 0)
      {
        v29 = *(_QWORD *)(a1 + 48);
        v10 = v29;
        if (v21)
        {
          v30 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DowngraderInterface]";
          v31 = 75;
          v22 = llvm::StringRef::find((uint64_t *)&v30, "DesiredTypeName = ", 0x12uLL, 0);
          if (v31 >= v22)
            v23 = v22;
          else
            v23 = v31;
          v24 = &v30[v23];
          v25 = v31 - v23;
          if (v31 - v23 >= 0x12)
            v26 = 18;
          else
            v26 = v31 - v23;
          v27 = v25 - v26;
          if (v27 >= v27 - 1)
            v28 = v27 - 1;
          else
            v28 = v27;
          mlir::detail::TypeIDResolver<mlir::DowngraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v24[v26], v28);
          v10 = v29;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, mlir::detail::TypeIDResolver<mlir::DowngraderInterface,void>::resolveTypeID(void)::id, v10);
    }
  }
  return result;
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::DowngraderInterface>(uint64_t a1)
{
  unsigned __int8 v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;

  v2 = &unk_1EDC07000;
  if ((v1 & 1) == 0)
  {
    v21 = a1;
    v2 = (_QWORD *)&unk_1EDC07000;
    v13 = v12;
    a1 = v21;
    if (v13)
    {
      v22 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DowngraderInterface]";
      v23 = 75;
      v14 = llvm::StringRef::find((uint64_t *)&v22, "DesiredTypeName = ", 0x12uLL, 0);
      if (v23 >= v14)
        v15 = v14;
      else
        v15 = v23;
      v16 = &v22[v15];
      v17 = v23 - v15;
      if (v23 - v15 >= 0x12)
        v18 = 18;
      else
        v18 = v23 - v15;
      v19 = v17 - v18;
      if (v19 >= v19 - 1)
        v20 = v19 - 1;
      else
        v20 = v19;
      mlir::detail::TypeIDResolver<mlir::DowngraderInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      v2 = (_QWORD *)&unk_1EDC07000;
      a1 = v21;
    }
  }
  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = v2[197];
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)a1 + 16 * v3;
  do
  {
    v7 = v3 >> 1;
    v8 = &v5[2 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 2;
    v3 += ~(v3 >> 1);
    if (v10 < v4)
      v5 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v5 != (_QWORD *)v6 && *v5 == v4)
    return v5[1];
  else
    return 0;
}

void mlir::mps::buildConv2DDescriptor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, _QWORD *a15, uint64_t a16, uint64_t a17, char a18)
{
  _QWORD *v24;
  uint64_t v25;
  uint64_t *ArgAttrsAttr;
  _QWORD *v27;
  uint64_t v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  _OWORD v39[2];

  memset(v39, 0, sizeof(v39));
  v24 = (_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8))
  {
    v25 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v24 + 8);
    v37 = v24;
    v38 = v25;
    if (v24 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
    {
      ArgAttrsAttr = (uint64_t *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
      goto LABEL_8;
    }
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  ArgAttrsAttr = (uint64_t *)v39;
LABEL_8:
  v27 = (_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8))
  {
    v28 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v27 + 8);
    v37 = v27;
    v38 = v28;
    if (v27 && mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v37))
    {
      v29 = (_OWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v37);
      goto LABEL_15;
    }
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v29 = v39;
LABEL_15:
  *(_QWORD *)(a8 + 72) = a6;
  *(_QWORD *)(a8 + 80) = a7;
  *(_QWORD *)(a8 + 56) = a4;
  *(_QWORD *)(a8 + 64) = a5;
  *(_QWORD *)(a8 + 48) = a3;
  *(_DWORD *)(a8 + 120) = a12;
  *(_DWORD *)(a8 + 124) = a13;
  *(_DWORD *)(a8 + 128) = a14;
  if (a14 == 2)
  {
    v33 = ArgAttrsAttr[2];
    *(_QWORD *)(a8 + 24) = ArgAttrsAttr[3];
    *(_QWORD *)(a8 + 32) = v33;
    v31 = *ArgAttrsAttr;
    if (a18)
    {
      v32 = ArgAttrsAttr[1];
LABEL_21:
      *(_QWORD *)(a8 + 40) = v32 * v31;
      if (a13 == 1)
        goto LABEL_22;
LABEL_27:
      if (!a13)
      {
        *(_OWORD *)a8 = v29[1];
        *(_QWORD *)(a8 + 16) = *((_QWORD *)v29 + 1);
        if (a15)
        {
          a15[2] = a5;
          a15[3] = a4;
        }
        if (a16)
        {
          v34 = 3;
          v35 = 2;
          goto LABEL_32;
        }
      }
LABEL_33:
      __asm { BR              X15 }
    }
  }
  else
  {
    if (a14 != 3)
    {
      if (a13 != 1)
        goto LABEL_27;
      goto LABEL_22;
    }
    v30 = *ArgAttrsAttr;
    *(_QWORD *)(a8 + 24) = ArgAttrsAttr[1];
    *(_QWORD *)(a8 + 32) = v30;
    v31 = ArgAttrsAttr[3];
    if (a18)
    {
      v32 = ArgAttrsAttr[2];
      goto LABEL_21;
    }
  }
  *(_QWORD *)(a8 + 40) = v31;
  if (a13 != 1)
    goto LABEL_27;
LABEL_22:
  *(_OWORD *)a8 = *(_OWORD *)((char *)v29 + 8);
  *(_QWORD *)(a8 + 16) = *((_QWORD *)v29 + 3);
  if (a15)
  {
    a15[1] = a5;
    a15[2] = a4;
  }
  if (a16)
  {
    v34 = 2;
    v35 = 1;
LABEL_32:
    *(_QWORD *)(a16 + 8 * v35) = a7;
    *(_QWORD *)(a16 + 8 * v34) = a6;
    goto LABEL_33;
  }
  goto LABEL_33;
}

void sub_180B5ECF0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v5[11] = a2;
  v5[12] = v4;
  v5[13] = v2;
  v5[14] = v3;
  if (!a1)
    JUMPOUT(0x180B5EDD4);
  JUMPOUT(0x180B5ED94);
}

void sub_180B5ED04(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  if (!a1)
    JUMPOUT(0x180B5EDD4);
  JUMPOUT(0x180B5ED94);
}

uint64_t mlir::mps::getBroadcastGradientArgs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  const void *ArgAttrsAttr;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  uint64_t *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD v118[2];
  _QWORD v119[2];

  v119[0] = a1;
  v119[1] = a2;
  v118[0] = a3;
  v118[1] = a4;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  ArgAttrsAttr = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v118);
  v8 = v7;
  if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v119))
  {
    v9 = (_QWORD *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
    if (v10)
    {
      v11 = 8 * v10;
      while (*v9 != 0x8000000000000000)
      {
        ++v9;
        v11 -= 8;
        if (!v11)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      v12 = (const void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
      if (v13 == v8)
      {
        result = memcmp(v12, ArgAttrsAttr, 8 * v13);
        if (!(_DWORD)result)
          return result;
      }
    }
  }
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
  v16 = v15;
  mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v118);
  v18 = v17;
  v19 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v119);
  result = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v118);
  v20 = v16 - v18;
  v116 = result;
  v117 = v19;
  v115 = v16;
  if (v16 != v18)
  {
    v114 = v18;
    if (v16 < v18)
    {
      if (v16 < 1)
        return result;
      v55 = 0;
      v56 = 0;
      v57 = v18 - v16;
      while (1)
      {
        if (*(_QWORD *)(v19 + 8 * (v20 + v57)) == 1 || *(_QWORD *)(result + 8 * v57) != 1)
          goto LABEL_72;
        v59 = (unint64_t)a5[2];
        if ((unint64_t)v55 >= v59)
          break;
        *(_QWORD *)v55 = v57;
        v58 = (uint64_t)(v55 + 8);
LABEL_71:
        a5[1] = (char *)v58;
        v55 = (char *)v58;
LABEL_72:
        if (++v57 >= v18)
          return result;
      }
      v60 = (v55 - v56) >> 3;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
        goto LABEL_168;
      v62 = v59 - (_QWORD)v56;
      if (v62 >> 2 > v61)
        v61 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        if (v63 >> 61)
          goto LABEL_169;
        v64 = operator new(8 * v63);
        v65 = &v64[8 * v60];
        *(_QWORD *)v65 = v57;
        v58 = (uint64_t)(v65 + 8);
        if (v55 != v56)
        {
LABEL_85:
          v66 = v55 - 8 - v56;
          if (v66 < 0x168
            || &v64[v55 - v56 - 8 - (v66 & 0xFFFFFFFFFFFFFFF8)] > &v64[v55 - v56 - 8]
            || &v55[-(v66 & 0xFFFFFFFFFFFFFFF8) - 8] > v55 - 8
            || (unint64_t)(v56 - v64) < 0x20)
          {
            v67 = v55;
            v19 = v117;
            v18 = v114;
          }
          else
          {
            v69 = (v66 >> 3) + 1;
            v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            v67 = &v55[-v70];
            v65 -= v70;
            v71 = &v64[8 * v60 - 16];
            v72 = v55 - 16;
            v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            v19 = v117;
            do
            {
              v74 = *(_OWORD *)v72;
              *(v71 - 1) = *((_OWORD *)v72 - 1);
              *v71 = v74;
              v71 -= 2;
              v72 -= 32;
              v73 -= 4;
            }
            while (v73);
            v18 = v114;
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_88:
              *a5 = v65;
              a5[1] = (char *)v58;
              a5[2] = &v64[8 * v63];
              if (!v56)
              {
LABEL_90:
                v56 = v65;
                result = v116;
                goto LABEL_71;
              }
LABEL_89:
              operator delete(v56);
              goto LABEL_90;
            }
          }
          do
          {
            v68 = *((_QWORD *)v67 - 1);
            v67 -= 8;
            *((_QWORD *)v65 - 1) = v68;
            v65 -= 8;
          }
          while (v67 != v56);
          goto LABEL_88;
        }
      }
      else
      {
        v64 = 0;
        v65 = (char *)(8 * v60);
        *(_QWORD *)(8 * v60) = v57;
        v58 = 8 * v60 + 8;
        if (v55 != v56)
          goto LABEL_85;
      }
      v19 = v117;
      v18 = v114;
      *a5 = v65;
      a5[1] = (char *)v58;
      a5[2] = &v64[8 * v63];
      if (!v56)
        goto LABEL_90;
      goto LABEL_89;
    }
    if (v20 >= 1)
    {
      v75 = 0;
      v76 = 0;
      v77 = 0;
      while (1)
      {
        if (*(_QWORD *)(v19 + 8 * v76) == 1)
          goto LABEL_105;
        v79 = (unint64_t)a5[2];
        if ((unint64_t)v75 >= v79)
          break;
        *(_QWORD *)v75 = v76;
        v78 = (uint64_t)(v75 + 8);
LABEL_104:
        a5[1] = (char *)v78;
        v75 = (char *)v78;
LABEL_105:
        if (++v76 == v20)
          goto LABEL_134;
      }
      v80 = (v75 - v77) >> 3;
      v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 61)
LABEL_168:
        abort();
      v82 = v79 - (_QWORD)v77;
      if (v82 >> 2 > v81)
        v81 = v82 >> 2;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      if (v83)
      {
        if (v83 >> 61)
LABEL_169:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v84 = operator new(8 * v83);
        v85 = &v84[8 * v80];
        *(_QWORD *)v85 = v76;
        v78 = (uint64_t)(v85 + 8);
        if (v75 != v77)
        {
LABEL_117:
          v86 = v75 - 8 - v77;
          if (v86 >= 0x168
            && &v84[v75 - v77 - 8 - (v86 & 0xFFFFFFFFFFFFFFF8)] <= &v84[v75 - v77 - 8]
            && &v75[-(v86 & 0xFFFFFFFFFFFFFFF8) - 8] <= v75 - 8
            && (unint64_t)(v77 - v84) >= 0x20)
          {
            v89 = (v86 >> 3) + 1;
            v90 = 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
            v87 = &v75[-v90];
            v85 -= v90;
            v91 = &v84[8 * v80 - 16];
            v92 = v75 - 16;
            v93 = v89 & 0x3FFFFFFFFFFFFFFCLL;
            v19 = v117;
            do
            {
              v94 = *(_OWORD *)v92;
              *(v91 - 1) = *((_OWORD *)v92 - 1);
              *v91 = v94;
              v91 -= 2;
              v92 -= 32;
              v93 -= 4;
            }
            while (v93);
            v16 = v115;
            if (v89 == (v89 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_123:
              *a5 = v85;
              a5[1] = (char *)v78;
              a5[2] = &v84[8 * v83];
              if (!v77)
              {
LABEL_125:
                v77 = v85;
                result = v116;
                goto LABEL_104;
              }
LABEL_124:
              operator delete(v77);
              goto LABEL_125;
            }
          }
          else
          {
            v87 = v75;
            v19 = v117;
            v16 = v115;
          }
          do
          {
            v88 = *((_QWORD *)v87 - 1);
            v87 -= 8;
            *((_QWORD *)v85 - 1) = v88;
            v85 -= 8;
          }
          while (v87 != v77);
          goto LABEL_123;
        }
      }
      else
      {
        v84 = 0;
        v85 = (char *)(8 * v80);
        *(_QWORD *)(8 * v80) = v76;
        v78 = 8 * v80 + 8;
        if (v75 != v77)
          goto LABEL_117;
      }
      v19 = v117;
      v16 = v115;
      *a5 = v85;
      a5[1] = (char *)v78;
      a5[2] = &v84[8 * v83];
      if (!v77)
        goto LABEL_125;
      goto LABEL_124;
    }
    v75 = 0;
LABEL_134:
    if (v114 < 1)
      return result;
    v95 = *a5;
    v96 = v114 - v16;
    while (1)
    {
      if (*(_QWORD *)(v19 + 8 * v20) == 1 || *(_QWORD *)(result + 8 * (v96 + v20)) != 1)
        goto LABEL_138;
      v98 = (unint64_t)a5[2];
      if ((unint64_t)v75 >= v98)
        break;
      *(_QWORD *)v75 = v20;
      v97 = (uint64_t)(v75 + 8);
LABEL_137:
      a5[1] = (char *)v97;
      v75 = (char *)v97;
LABEL_138:
      if (++v20 >= v16)
        return result;
    }
    v99 = (v75 - v95) >> 3;
    v100 = v99 + 1;
    if ((unint64_t)(v99 + 1) >> 61)
      goto LABEL_168;
    v101 = v98 - (_QWORD)v95;
    if (v101 >> 2 > v100)
      v100 = v101 >> 2;
    if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
      v102 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v102 = v100;
    if (v102)
    {
      if (v102 >> 61)
        goto LABEL_169;
      v103 = operator new(8 * v102);
      v104 = (uint64_t *)&v103[8 * v99];
      *v104 = v20;
      v97 = (uint64_t)(v104 + 1);
      if (v75 != v95)
      {
LABEL_151:
        v105 = v75 - 8 - v95;
        if (v105 < 0x168
          || &v103[v75 - v95 - 8 - (v105 & 0xFFFFFFFFFFFFFFF8)] > &v103[v75 - v95 - 8]
          || &v75[-(v105 & 0xFFFFFFFFFFFFFFF8) - 8] > v75 - 8
          || (unint64_t)(v95 - v103) < 0x20)
        {
          v106 = v75;
          v19 = v117;
          v16 = v115;
        }
        else
        {
          v108 = (v105 >> 3) + 1;
          v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
          v106 = &v75[-v109];
          v104 = (uint64_t *)((char *)v104 - v109);
          v110 = &v103[8 * v99 - 16];
          v111 = v75 - 16;
          v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
          v19 = v117;
          do
          {
            v113 = *(_OWORD *)v111;
            *(v110 - 1) = *((_OWORD *)v111 - 1);
            *v110 = v113;
            v110 -= 2;
            v111 -= 32;
            v112 -= 4;
          }
          while (v112);
          v16 = v115;
          if (v108 == (v108 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_154:
            *a5 = (char *)v104;
            a5[1] = (char *)v97;
            a5[2] = &v103[8 * v102];
            if (!v95)
            {
LABEL_156:
              v95 = (char *)v104;
              result = v116;
              goto LABEL_137;
            }
LABEL_155:
            operator delete(v95);
            goto LABEL_156;
          }
        }
        do
        {
          v107 = *((_QWORD *)v106 - 1);
          v106 -= 8;
          *--v104 = v107;
        }
        while (v106 != v95);
        goto LABEL_154;
      }
    }
    else
    {
      v103 = 0;
      v104 = (uint64_t *)(8 * v99);
      *(_QWORD *)(8 * v99) = v20;
      v97 = 8 * v99 + 8;
      if (v75 != v95)
        goto LABEL_151;
    }
    v19 = v117;
    v16 = v115;
    *a5 = (char *)v104;
    a5[1] = (char *)v97;
    a5[2] = &v103[8 * v102];
    if (!v95)
      goto LABEL_156;
    goto LABEL_155;
  }
  if (v16 >= 1)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      if (*(_QWORD *)(v19 + 8 * v22) == 1)
        goto LABEL_13;
      v25 = *(_QWORD *)(result + 8 * v22);
      if (v25 == -1)
      {
        v33 = (unint64_t)a5[2];
        if ((unint64_t)v21 >= v33)
        {
          v34 = (v21 - v23) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_168;
          v36 = v33 - (_QWORD)v23;
          if (v36 >> 2 > v35)
            v35 = v36 >> 2;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v35;
          if (v30)
          {
            if (v30 >> 61)
              goto LABEL_169;
            v31 = operator new(8 * v30);
            v32 = &v31[8 * v34];
            *(_QWORD *)v32 = v22;
            v24 = (uint64_t)(v32 + 8);
            if (v21 == v23)
            {
LABEL_49:
              v19 = v117;
              v16 = v115;
              goto LABEL_50;
            }
          }
          else
          {
            v31 = 0;
            v32 = (char *)(8 * v34);
            *(_QWORD *)(8 * v34) = v22;
            v24 = 8 * v34 + 8;
            if (v21 == v23)
              goto LABEL_49;
          }
          v40 = v21 - 8 - v23;
          if (v40 < 0x168
            || &v31[v21 - v23 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v31[v21 - v23 - 8]
            || &v21[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v21 - 8
            || (unint64_t)(v23 - v31) < 0x20)
          {
            v41 = v21;
            v19 = v117;
            v16 = v115;
          }
          else
          {
            v49 = (v40 >> 3) + 1;
            v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
            v41 = &v21[-v50];
            v32 -= v50;
            v51 = &v31[8 * v34 - 16];
            v52 = v21 - 16;
            v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
            v19 = v117;
            do
            {
              v54 = *(_OWORD *)v52;
              *(v51 - 1) = *((_OWORD *)v52 - 1);
              *v51 = v54;
              v51 -= 2;
              v52 -= 32;
              v53 -= 4;
            }
            while (v53);
            v16 = v115;
            if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_50:
              *a5 = v32;
              a5[1] = (char *)v24;
              a5[2] = &v31[8 * v30];
              if (v23)
                operator delete(v23);
              v23 = v32;
              result = v116;
              goto LABEL_12;
            }
          }
          do
          {
            v42 = *((_QWORD *)v41 - 1);
            v41 -= 8;
            *((_QWORD *)v32 - 1) = v42;
            v32 -= 8;
          }
          while (v41 != v23);
          goto LABEL_50;
        }
      }
      else
      {
        if (v25 != 1)
          goto LABEL_13;
        v26 = (unint64_t)a5[2];
        if ((unint64_t)v21 >= v26)
        {
          v27 = (v21 - v23) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            goto LABEL_168;
          v29 = v26 - (_QWORD)v23;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            if (v30 >> 61)
              goto LABEL_169;
            v31 = operator new(8 * v30);
            v32 = &v31[8 * v27];
            *(_QWORD *)v32 = v22;
            v24 = (uint64_t)(v32 + 8);
            if (v21 == v23)
              goto LABEL_49;
          }
          else
          {
            v31 = 0;
            v32 = (char *)(8 * v27);
            *(_QWORD *)(8 * v27) = v22;
            v24 = 8 * v27 + 8;
            if (v21 == v23)
              goto LABEL_49;
          }
          v37 = v21 - 8 - v23;
          if (v37 < 0x168
            || &v31[v21 - v23 - 8 - (v37 & 0xFFFFFFFFFFFFFFF8)] > &v31[v21 - v23 - 8]
            || &v21[-(v37 & 0xFFFFFFFFFFFFFFF8) - 8] > v21 - 8
            || (unint64_t)(v23 - v31) < 0x20)
          {
            v38 = v21;
            v19 = v117;
            v16 = v115;
          }
          else
          {
            v43 = (v37 >> 3) + 1;
            v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
            v38 = &v21[-v44];
            v32 -= v44;
            v45 = &v31[8 * v27 - 16];
            v46 = v21 - 16;
            v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
            v19 = v117;
            do
            {
              v48 = *(_OWORD *)v46;
              *(v45 - 1) = *((_OWORD *)v46 - 1);
              *v45 = v48;
              v45 -= 2;
              v46 -= 32;
              v47 -= 4;
            }
            while (v47);
            v16 = v115;
            if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_50;
          }
          do
          {
            v39 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v32 - 1) = v39;
            v32 -= 8;
          }
          while (v38 != v23);
          goto LABEL_50;
        }
      }
      *(_QWORD *)v21 = v22;
      v24 = (uint64_t)(v21 + 8);
LABEL_12:
      a5[1] = (char *)v24;
      v21 = (char *)v24;
LABEL_13:
      ++v22;
    }
    while (v22 != v16);
  }
  return result;
}

unint64_t mlir::mps::mergeDynamicDims(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (!a2)
    return 0x8000000000000000;
  v2 = 8 * a2;
  v3 = 0x8000000000000000;
  do
  {
    v5 = *a1++;
    v4 = v5;
    if (v3 == 0x8000000000000000)
      v3 = v4;
    v2 -= 8;
  }
  while (v2);
  return v3;
}

uint64_t mlir::mps::getDataSize(_QWORD *a1)
{
  uint64_t ElementTypeOrSelf;
  uint64_t v2;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;

  ElementTypeOrSelf = mlir::getElementTypeOrSelf(a1);
  v6 = ElementTypeOrSelf;
  if (*(_UNKNOWN **)(*(_QWORD *)ElementTypeOrSelf + 136) == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
    v2 = ElementTypeOrSelf;
  else
    v2 = 0;
  v5 = v2;
  if (v2)
  {
    Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v5);
    return 2 * (mlir::mps::getDataSize(Value) & 0xFFFFFFFFFFFFFFFLL);
  }
  else if (mlir::Type::isIndex((mlir::Type *)&v6))
  {
    return 8;
  }
  else
  {
    return mlir::Type::getIntOrFloatBitWidth((mlir::Type *)&v6) >> 3;
  }
}

void mlir::mps::mixed_precision::defaultMixedPrecisionCheck(mlir::mps::mixed_precision *this, mlir::Operation *a2, char a3)
{
  char v4;
  unint64_t v6;
  char *v7;
  uint64_t NextResultAtOffset;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19[2];
  unint64_t v20[2];
  char *v21;
  unint64_t v22;
  uint64_t v23;

  v4 = (char)a2;
  v23 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 9);
  v7 = (char *)this - 16;
  if (!(_DWORD)v6)
    v7 = 0;
  v21 = v7;
  v22 = v6;
  mlir::OperandRange::getTypes((uint64_t *)&v21, &v16);
  NextResultAtOffset = v16;
  v9 = v17;
  v10 = v18;
  if (v17)
    NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v17);
  mlir::ValueRange::ValueRange((unint64_t *)&v21, NextResultAtOffset, v10 - v9);
  mlir::TypeRange::TypeRange(v20, (uint64_t)v21, v22);
  if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v11 = *((_QWORD *)this + 9);
    v12 = *((unsigned int *)this + 17);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v21 = (char *)v11;
  v22 = v12;
  mlir::OperandRange::getTypes((uint64_t *)&v21, &v13);
  mlir::ValueRange::ValueRange((unint64_t *)&v21, v13 + 32 * v14, v15 - v14);
  mlir::TypeRange::TypeRange(v19, (uint64_t)v21, v22);
  mlir::mps::mixed_precision::defaultMixedPrecisionCheck((uint64_t *)this, v20[0], v20[1], v19[0], v19[1], v4, a3);
}

void mlir::mps::mixed_precision::defaultMixedPrecisionCheck(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _BOOL4 isF16;
  _BOOL4 isBF16;
  _BOOL4 isF32;
  _BOOL4 v20;
  int *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD **v25;
  _QWORD **v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  void *v32;
  _BOOL4 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int *v37;
  char *v38;
  char *v39;
  __int128 v40;
  _QWORD **v41;
  _QWORD **v42;
  void *v43;
  _QWORD *v44;
  int *v45;
  char *v46;
  char *v47;
  __int128 v48;
  _QWORD **v49;
  _QWORD **v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  int *v57;
  char *v58;
  char *v59;
  __int128 v60;
  _QWORD **v61;
  _QWORD **v62;
  void *v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  int *v67;
  char *v68;
  char *v69;
  __int128 v70;
  _QWORD **v71;
  _QWORD **v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  int *v77;
  char *v78;
  char *v79;
  __int128 v80;
  _QWORD **v81;
  _QWORD **v82;
  void *v83;
  _QWORD *v84;
  void *v85;
  void *v86;
  int *v87;
  char *v88;
  char *v89;
  __int128 v90;
  _QWORD **v91;
  _QWORD **v92;
  void *v93;
  _QWORD *v94;
  void *v95;
  void *v96;
  int *v97;
  char *v98;
  char *v99;
  __int128 v100;
  _QWORD **v101;
  _QWORD **v102;
  void *v103;
  _QWORD *v104;
  void *v105;
  void *v106;
  int *v107;
  char *v108;
  char *v109;
  __int128 v110;
  _QWORD **v111;
  _QWORD **v112;
  void *v113;
  _QWORD *v114;
  void *v115;
  void *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int64_t v126;
  int64_t v127;
  int64_t v128;
  int64_t v129;
  int64_t v130;
  int64_t v131;
  int64_t v132;
  int64_t v133;
  int64_t v134;
  uint64_t ElementTypeOrSelf;
  const void **v142[4];
  __int16 v143;
  int64x2_t v144;
  unsigned int v145;
  int v146;
  const char *v147;
  uint64_t v148;
  _QWORD v149[3];
  void *v150;
  unsigned int v151;
  unsigned int v152;
  _BYTE v153[96];
  void *v154;
  _QWORD *v155;
  void *__p;
  _QWORD **v157;
  char v158;
  uint64_t v159;

  v7 = a5;
  v8 = a3;
  v9 = a2;
  v10 = a1;
  v159 = *MEMORY[0x1E0C80C00];
  v144 = 0uLL;
  v145 = 0;
  if (a5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (_QWORD *)mlir::TypeRange::dereference_iterator(a4, v15);
      v142[0] = (const void **)mlir::getElementTypeOrSelf(v16);
      isF16 = mlir::Type::isF16((mlir::Type *)v142);
      isBF16 = mlir::Type::isBF16((mlir::Type *)v142);
      isF32 = mlir::Type::isF32((mlir::Type *)v142);
      v20 = *((_QWORD *)*v142[0] + 17) == (_QWORD)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
      if (mlir::Type::isIntOrIndex((mlir::Type *)v142))
        llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>,mlir::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseSetPair<mlir::Block *>>::try_emplace<llvm::detail::DenseSetEmpty&>(&v144, (uint64_t *)v142, (uint64_t)v149);
      v11 |= isF16;
      v12 |= isBF16;
      v13 |= isF32;
      v14 |= v20;
      ++v15;
    }
    while (v7 != v15);
    if (v144.i32[2] >= 2u && (a7 & 1) == 0)
    {
      v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        v146 = 3;
        v147 = "detected operation with operands of different integer types which is not supported";
        v148 = 82;
        v21 = &v146;
        v22 = (char *)v150;
        if (v151 >= v152)
        {
          v117 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            v126 = (char *)&v146 - (_BYTE *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v117, 24);
            v22 = (char *)v150;
            v21 = (int *)((char *)v150 + v126);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v117, 24);
            v21 = &v146;
            v22 = (char *)v150;
          }
        }
        v23 = &v22[24 * v151];
        v24 = *(_OWORD *)v21;
        *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
        *(_OWORD *)v23 = v24;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      if (v158)
      {
        v25 = (_QWORD **)__p;
        if (__p)
        {
          v26 = v157;
          v27 = __p;
          if (v157 != __p)
          {
            do
              v26 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v26 - 1);
            while (v26 != v25);
            v27 = __p;
          }
          v157 = v25;
          operator delete(v27);
        }
        v28 = v154;
        if (v154)
        {
          v29 = v155;
          v30 = v154;
          if (v155 == v154)
            goto LABEL_196;
          do
          {
            v32 = (void *)*--v29;
            v31 = v32;
            *v29 = 0;
            if (v32)
              operator delete[](v31);
          }
          while (v29 != v28);
          goto LABEL_195;
        }
        goto LABEL_197;
      }
      goto LABEL_199;
    }
    v33 = v144.i32[2] == 0;
    LODWORD(v7) = v11 | v13 | v12;
    if ((v7 & 1) != 0 && (a6 & 1) == 0 && v144.i32[2])
    {
      v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        v146 = 3;
        v147 = "detected operation with both float and integer operands which is not supported";
        v148 = 78;
        v45 = &v146;
        v46 = (char *)v150;
        if (v151 >= v152)
        {
          v118 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            v127 = (char *)&v146 - (_BYTE *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v118, 24);
            v46 = (char *)v150;
            v45 = (int *)((char *)v150 + v127);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v118, 24);
            v45 = &v146;
            v46 = (char *)v150;
          }
        }
        v47 = &v46[24 * v151];
        v48 = *(_OWORD *)v45;
        *((_QWORD *)v47 + 2) = *((_QWORD *)v45 + 2);
        *(_OWORD *)v47 = v48;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      if (!v158)
        goto LABEL_199;
      v49 = (_QWORD **)__p;
      if (__p)
      {
        v50 = v157;
        v51 = __p;
        if (v157 != __p)
        {
          do
            v50 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v50 - 1);
          while (v50 != v49);
          v51 = __p;
        }
        v157 = v49;
        operator delete(v51);
      }
      v28 = v154;
      if (!v154)
        goto LABEL_197;
      v52 = v155;
      v30 = v154;
      if (v155 != v154)
      {
        do
        {
          v54 = (void *)*--v52;
          v53 = v54;
          *v52 = 0;
          if (v54)
            operator delete[](v53);
        }
        while (v52 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    v10 = a1;
    if (v144.i32[2] && ((v14 ^ 1) & 1) == 0)
    {
      v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        v146 = 3;
        v147 = "detected operation with both complex and integer type operands which is not supported";
        v148 = 85;
        v57 = &v146;
        v58 = (char *)v150;
        if (v151 >= v152)
        {
          v119 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            v128 = (char *)&v146 - (_BYTE *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v119, 24);
            v58 = (char *)v150;
            v57 = (int *)((char *)v150 + v128);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v119, 24);
            v57 = &v146;
            v58 = (char *)v150;
          }
        }
        v59 = &v58[24 * v151];
        v60 = *(_OWORD *)v57;
        *((_QWORD *)v59 + 2) = *((_QWORD *)v57 + 2);
        *(_OWORD *)v59 = v60;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      if (!v158)
        goto LABEL_199;
      v61 = (_QWORD **)__p;
      if (__p)
      {
        v62 = v157;
        v63 = __p;
        if (v157 != __p)
        {
          do
            v62 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v62 - 1);
          while (v62 != v61);
          v63 = __p;
        }
        v157 = v61;
        operator delete(v63);
      }
      v28 = v154;
      if (!v154)
        goto LABEL_197;
      v64 = v155;
      v30 = v154;
      if (v155 != v154)
      {
        do
        {
          v66 = (void *)*--v64;
          v65 = v66;
          *v64 = 0;
          if (v66)
            operator delete[](v65);
        }
        while (v64 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    if ((v14 & v12 & 1) != 0)
    {
      v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        v146 = 3;
        v147 = "detected operation with both complex and BF16 type operands which is not supported";
        v148 = 82;
        v67 = &v146;
        v68 = (char *)v150;
        if (v151 >= v152)
        {
          v121 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            v130 = (char *)&v146 - (_BYTE *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v121, 24);
            v68 = (char *)v150;
            v67 = (int *)((char *)v150 + v130);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v121, 24);
            v67 = &v146;
            v68 = (char *)v150;
          }
        }
        v69 = &v68[24 * v151];
        v70 = *(_OWORD *)v67;
        *((_QWORD *)v69 + 2) = *((_QWORD *)v67 + 2);
        *(_OWORD *)v69 = v70;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      if (!v158)
        goto LABEL_199;
      v71 = (_QWORD **)__p;
      if (__p)
      {
        v72 = v157;
        v73 = __p;
        if (v157 != __p)
        {
          do
            v72 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v72 - 1);
          while (v72 != v71);
          v73 = __p;
        }
        v157 = v71;
        operator delete(v73);
      }
      v28 = v154;
      if (!v154)
        goto LABEL_197;
      v74 = v155;
      v30 = v154;
      if (v155 != v154)
      {
        do
        {
          v76 = (void *)*--v74;
          v75 = v76;
          *v74 = 0;
          if (v76)
            operator delete[](v75);
        }
        while (v74 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    v9 = a2;
    v8 = a3;
    if ((v11 & v12 & 1) != 0)
    {
      v143 = 257;
      mlir::Operation::emitOpError(a1, v142, (uint64_t)v149);
      if (v149[0])
      {
        v146 = 3;
        v147 = "detected operation with both F16 and BF16 operands which is not supported";
        v148 = 73;
        v87 = &v146;
        v88 = (char *)v150;
        if (v151 >= v152)
        {
          v125 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            v134 = (char *)&v146 - (_BYTE *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v125, 24);
            v88 = (char *)v150;
            v87 = (int *)((char *)v150 + v134);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v125, 24);
            v87 = &v146;
            v88 = (char *)v150;
          }
        }
        v89 = &v88[24 * v151];
        v90 = *(_OWORD *)v87;
        *((_QWORD *)v89 + 2) = *((_QWORD *)v87 + 2);
        *(_OWORD *)v89 = v90;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      if (!v158)
        goto LABEL_199;
      v91 = (_QWORD **)__p;
      if (__p)
      {
        v92 = v157;
        v93 = __p;
        if (v157 != __p)
        {
          do
            v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
          while (v92 != v91);
          v93 = __p;
        }
        v157 = v91;
        operator delete(v93);
      }
      v28 = v154;
      if (!v154)
        goto LABEL_197;
      v94 = v155;
      v30 = v154;
      if (v155 != v154)
      {
        do
        {
          v96 = (void *)*--v94;
          v95 = v96;
          *v94 = 0;
          if (v96)
            operator delete[](v95);
        }
        while (v94 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
  }
  else
  {
    LOBYTE(v11) = 0;
    LOBYTE(v12) = 0;
    v33 = 1;
  }
  if (!v8)
    goto LABEL_199;
  v34 = 0;
  if ((v33 & v7 & 1) == 0)
  {
    while (1)
    {
      v35 = (_QWORD *)mlir::TypeRange::dereference_iterator(v9, v34);
      ElementTypeOrSelf = mlir::getElementTypeOrSelf(v35);
      mlir::Type::isIntOrIndex((mlir::Type *)&ElementTypeOrSelf);
      if (mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf) || mlir::Type::isF32((mlir::Type *)&ElementTypeOrSelf))
      {
        if (((v33 | v7) & 1) == 0)
          goto LABEL_126;
      }
      else if (!(v33 | !mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf) | v7 & 1))
      {
        goto LABEL_126;
      }
      if ((v11 & 1) != 0 && mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf))
        break;
      if ((v12 & 1) != 0 && mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
        goto LABEL_51;
      if (v8 == ++v34)
        goto LABEL_199;
    }
LABEL_161:
    v143 = 257;
    mlir::Operation::emitOpError(v10, v142, (uint64_t)v149);
    if (v149[0])
    {
      v146 = 3;
      v147 = "detected operation with F16 inputs and BF16 result type which is not supported";
      v148 = 78;
      v97 = &v146;
      v98 = (char *)v150;
      if (v151 >= v152)
      {
        v122 = v151 + 1;
        if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
        {
          v131 = (char *)&v146 - (_BYTE *)v150;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v122, 24);
          v98 = (char *)v150;
          v97 = (int *)((char *)v150 + v131);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v122, 24);
          v97 = &v146;
          v98 = (char *)v150;
        }
      }
      v99 = &v98[24 * v151];
      v100 = *(_OWORD *)v97;
      *((_QWORD *)v99 + 2) = *((_QWORD *)v97 + 2);
      *(_OWORD *)v99 = v100;
      ++v151;
    }
    mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
    if (v149[0])
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
    if (!v158)
      goto LABEL_199;
    v101 = (_QWORD **)__p;
    if (__p)
    {
      v102 = v157;
      v103 = __p;
      if (v157 != __p)
      {
        do
          v102 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v102 - 1);
        while (v102 != v101);
        v103 = __p;
      }
      v157 = v101;
      operator delete(v103);
    }
    v28 = v154;
    if (!v154)
      goto LABEL_197;
    v104 = v155;
    v30 = v154;
    if (v155 != v154)
    {
      do
      {
        v106 = (void *)*--v104;
        v105 = v106;
        *v104 = 0;
        if (v106)
          operator delete[](v105);
      }
      while (v104 != v28);
      goto LABEL_195;
    }
LABEL_196:
    v155 = v28;
    operator delete(v30);
    goto LABEL_197;
  }
  while (1)
  {
    v36 = (_QWORD *)mlir::TypeRange::dereference_iterator(v9, v34);
    ElementTypeOrSelf = mlir::getElementTypeOrSelf(v36);
    if (mlir::Type::isIntOrIndex((mlir::Type *)&ElementTypeOrSelf))
    {
      v143 = 257;
      mlir::Operation::emitOpError(v10, v142, (uint64_t)v149);
      if (v149[0])
      {
        v146 = 3;
        v147 = "detected operation with float inputs and integer result type which is not supported";
        v148 = 83;
        v107 = &v146;
        v108 = (char *)v150;
        if (v151 >= v152)
        {
          v124 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            v133 = (char *)&v146 - (_BYTE *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v124, 24);
            v108 = (char *)v150;
            v107 = (int *)((char *)v150 + v133);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v124, 24);
            v107 = &v146;
            v108 = (char *)v150;
          }
        }
        v109 = &v108[24 * v151];
        v110 = *(_OWORD *)v107;
        *((_QWORD *)v109 + 2) = *((_QWORD *)v107 + 2);
        *(_OWORD *)v109 = v110;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      if (!v158)
        goto LABEL_199;
      v111 = (_QWORD **)__p;
      if (__p)
      {
        v112 = v157;
        v113 = __p;
        if (v157 != __p)
        {
          do
            v112 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v112 - 1);
          while (v112 != v111);
          v113 = __p;
        }
        v157 = v111;
        operator delete(v113);
      }
      v28 = v154;
      if (!v154)
        goto LABEL_197;
      v114 = v155;
      v30 = v154;
      if (v155 != v154)
      {
        do
        {
          v116 = (void *)*--v114;
          v115 = v116;
          *v114 = 0;
          if (v116)
            operator delete[](v115);
        }
        while (v114 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    if (!mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf) && !mlir::Type::isF32((mlir::Type *)&ElementTypeOrSelf))
      break;
    if (((v33 | v7) & 1) == 0)
    {
LABEL_126:
      v143 = 257;
      mlir::Operation::emitOpError(v10, v142, (uint64_t)v149);
      if (v149[0])
      {
        v146 = 3;
        v147 = "detected operation with integer inputs and float result type which is not supported";
        v148 = 83;
        v77 = &v146;
        v78 = (char *)v150;
        if (v151 >= v152)
        {
          v120 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            v129 = (char *)&v146 - (_BYTE *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v120, 24);
            v78 = (char *)v150;
            v77 = (int *)((char *)v150 + v129);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v120, 24);
            v77 = &v146;
            v78 = (char *)v150;
          }
        }
        v79 = &v78[24 * v151];
        v80 = *(_OWORD *)v77;
        *((_QWORD *)v79 + 2) = *((_QWORD *)v77 + 2);
        *(_OWORD *)v79 = v80;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      if (!v158)
        goto LABEL_199;
      v81 = (_QWORD **)__p;
      if (__p)
      {
        v82 = v157;
        v83 = __p;
        if (v157 != __p)
        {
          do
            v82 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v82 - 1);
          while (v82 != v81);
          v83 = __p;
        }
        v157 = v81;
        operator delete(v83);
      }
      v28 = v154;
      if (!v154)
        goto LABEL_197;
      v84 = v155;
      v30 = v154;
      if (v155 != v154)
      {
        do
        {
          v86 = (void *)*--v84;
          v85 = v86;
          *v84 = 0;
          if (v86)
            operator delete[](v85);
        }
        while (v84 != v28);
        goto LABEL_195;
      }
      goto LABEL_196;
    }
    if ((v11 & 1) != 0)
      goto LABEL_48;
LABEL_49:
    if ((v12 & 1) != 0 && mlir::Type::isF16((mlir::Type *)&ElementTypeOrSelf))
    {
LABEL_51:
      v143 = 257;
      mlir::Operation::emitOpError(v10, v142, (uint64_t)v149);
      if (v149[0])
      {
        v146 = 3;
        v147 = "detected operation with BF16 inputs and F16 result type which is not supported";
        v148 = 78;
        v37 = &v146;
        v38 = (char *)v150;
        if (v151 >= v152)
        {
          v123 = v151 + 1;
          if (v150 <= &v146 && (char *)v150 + 24 * v151 > (char *)&v146)
          {
            v132 = (char *)&v146 - (_BYTE *)v150;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v123, 24);
            v38 = (char *)v150;
            v37 = (int *)((char *)v150 + v132);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v153, v123, 24);
            v37 = &v146;
            v38 = (char *)v150;
          }
        }
        v39 = &v38[24 * v151];
        v40 = *(_OWORD *)v37;
        *((_QWORD *)v39 + 2) = *((_QWORD *)v37 + 2);
        *(_OWORD *)v39 = v40;
        ++v151;
      }
      mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v149);
      if (v149[0])
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v149);
      if (v158)
      {
        v41 = (_QWORD **)__p;
        if (__p)
        {
          v42 = v157;
          v43 = __p;
          if (v157 != __p)
          {
            do
              v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
            while (v42 != v41);
            v43 = __p;
          }
          v157 = v41;
          operator delete(v43);
        }
        v28 = v154;
        if (v154)
        {
          v44 = v155;
          v30 = v154;
          if (v155 == v154)
            goto LABEL_196;
          do
          {
            v56 = (void *)*--v44;
            v55 = v56;
            *v44 = 0;
            if (v56)
              operator delete[](v55);
          }
          while (v44 != v28);
LABEL_195:
          v30 = v154;
          goto LABEL_196;
        }
LABEL_197:
        if (v150 != v153)
          free(v150);
      }
LABEL_199:
      llvm::deallocate_buffer((llvm *)v144.i64[0], (void *)(8 * v145));
    }
    if (v8 == ++v34)
      goto LABEL_199;
  }
  mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf);
  if ((v11 & 1) == 0)
    goto LABEL_49;
LABEL_48:
  if (mlir::Type::isBF16((mlir::Type *)&ElementTypeOrSelf))
    goto LABEL_161;
  goto LABEL_49;
}

uint64_t mlir::DowngraderInterface::downgradeToVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (**(uint64_t (***)(_QWORD, _QWORD, uint64_t, uint64_t))(a1 + 8))(*(_QWORD *)(a1 + 8), *(_QWORD *)a1, a2, a3);
}

uint64_t mlir::detail::verifyLoopLikeOpInterface(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t InterfaceFor;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  const char *v26;
  std::string **v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  std::string **v32;
  char *v33;
  char *v34;
  __int128 v35;
  const char *v36;
  std::string **v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  _QWORD **v42;
  _QWORD **v43;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  const char *v51;
  std::string **v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  std::string **v57;
  char *v58;
  char *v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int OperandNumber;
  uint64_t v66;
  std::string **v67;
  char *v68;
  char *v69;
  __int128 v70;
  _QWORD **v71;
  _QWORD **v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  std::string **v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  std::string **v82;
  char *v83;
  char *v84;
  __int128 v85;
  const char *v86;
  std::string **v87;
  char *v88;
  char *v89;
  __int128 v90;
  _QWORD **v91;
  _QWORD **v92;
  void *v93;
  _QWORD *v94;
  void *v95;
  void *v96;
  const void **v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::string::size_type v108;
  std::string *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  mlir::detail::OpResultImpl *v118;
  uint64_t v119;
  uint64_t NextResultAtOffset;
  std::string *v121;
  char *v122;
  char *v123;
  __int128 v124;
  uint64_t v125;
  std::string *v126;
  char *v127;
  char *v128;
  __int128 v129;
  uint64_t v130;
  std::string *v131;
  char *v132;
  char *v133;
  __int128 v134;
  std::string *v135;
  char *v136;
  char *v137;
  __int128 v138;
  uint64_t v139;
  std::string *v140;
  char *v141;
  char *v142;
  __int128 v143;
  std::string *v144;
  char *v145;
  char *v146;
  __int128 v147;
  _QWORD **v148;
  _QWORD **v149;
  void *v150;
  _QWORD *v151;
  _QWORD *v152;
  void *v153;
  void *v154;
  void *v155;
  std::string *v156;
  char *v157;
  char *v158;
  __int128 v159;
  uint64_t v160;
  std::string *v161;
  char *v162;
  char *v163;
  __int128 v164;
  uint64_t v165;
  std::string *v166;
  char *v167;
  char *v168;
  __int128 v169;
  std::string *v170;
  char *v171;
  char *v172;
  __int128 v173;
  uint64_t v174;
  std::string *v175;
  char *v176;
  char *v177;
  __int128 v178;
  std::string *v179;
  char *v180;
  char *v181;
  __int128 v182;
  _QWORD **v183;
  _QWORD **v184;
  void *v185;
  _QWORD *v186;
  void *v187;
  void *v188;
  uint64_t v189;
  std::string **v190;
  char *v191;
  char *v192;
  __int128 v193;
  uint64_t v194;
  std::string **v195;
  char *v196;
  char *v197;
  __int128 v198;
  uint64_t v199;
  std::string **v200;
  char *v201;
  char *v202;
  __int128 v203;
  std::string **v204;
  char *v205;
  char *v206;
  __int128 v207;
  uint64_t v208;
  std::string **v209;
  char *v210;
  char *v211;
  __int128 v212;
  std::string **v213;
  char *v214;
  char *v215;
  __int128 v216;
  _QWORD **v217;
  _QWORD **v218;
  void *v219;
  _QWORD *v220;
  _QWORD *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  BOOL v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  BOOL v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  BOOL v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  BOOL v241;
  unint64_t v242;
  BOOL v243;
  unint64_t v244;
  unint64_t v245;
  BOOL v246;
  unint64_t v247;
  BOOL v248;
  unint64_t v249;
  BOOL v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  BOOL v254;
  unint64_t v255;
  BOOL v256;
  unint64_t v257;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  BOOL v263;
  unint64_t v264;
  int64_t v265;
  int64_t v266;
  int64_t v267;
  int64_t v268;
  int64_t v269;
  int64_t v270;
  int64_t v271;
  int64_t v272;
  int64_t v273;
  int64_t v274;
  int64_t v275;
  int64_t v276;
  int64_t v277;
  int64_t v278;
  int64_t v279;
  int64_t v280;
  int64_t v281;
  int64_t v282;
  int64_t v283;
  int64_t v284;
  int64_t v285;
  int64_t v286;
  int64_t v287;
  int64_t v288;
  int64_t v289;
  int64_t v290;
  int64_t v291;
  std::string v292;
  std::string v293;
  std::string *v294;
  const char *size;
  uint64_t v296;
  __int16 v297;
  std::string *v298;
  uint64_t v299;
  uint64_t v300;
  mlir::detail::OpResultImpl *v301;
  uint64_t v302;
  mlir::detail::OpResultImpl *v303;
  uint64_t v304;
  char v305;
  void *v306;
  unsigned int v307;
  unsigned int v308;
  _BYTE v309[96];
  void *v310;
  _QWORD *v311;
  void *__p;
  _QWORD **v313;
  char v314;
  uint64_t v315;

  v315 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    InterfaceFor = mlir::OpInterface<mlir::LoopLikeOpInterface,mlir::detail::LoopLikeOpInterfaceInterfaceTraits>::getInterfaceFor((uint64_t)this);
    v4 = (*(uint64_t (**)(uint64_t, mlir::detail *))(InterfaceFor + 64))(InterfaceFor, this);
    v6 = v5;
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  InterfaceFor = 0;
  v4 = MEMORY[0x40](0, 0);
  v6 = v50;
  if (v50)
LABEL_3:
    mlir::OpOperand::getOperandNumber(v4);
LABEL_4:
  (*(void (**)(uint64_t, mlir::detail *))(InterfaceFor + 72))(InterfaceFor, this);
  if (v6 != v7)
  {
    v298 = (std::string *)"different number of inits and region iter_args: ";
    LOWORD(v302) = 259;
    mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v298, (uint64_t)&v303);
    v24 = (*(uint64_t (**)(uint64_t, mlir::detail *))(InterfaceFor + 64))(InterfaceFor, this);
    v26 = v25;
    if (v25)
      mlir::OpOperand::getOperandNumber(v24);
    if (v303)
    {
      LODWORD(v294) = 5;
      size = v26;
      v27 = &v294;
      v28 = (char *)v306;
      if (v307 >= v308)
      {
        v226 = v307 + 1;
        if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
        {
          v265 = (char *)&v294 - (_BYTE *)v306;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v226, 24);
          v28 = (char *)v306;
          v27 = (std::string **)((char *)v306 + v265);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v226, 24);
          v27 = &v294;
          v28 = (char *)v306;
        }
      }
      v29 = &v28[24 * v307];
      v30 = *(_OWORD *)v27;
      *((_QWORD *)v29 + 2) = v27[2];
      *(_OWORD *)v29 = v30;
      v31 = ++v307;
      if (v303)
      {
        LODWORD(v294) = 3;
        size = " != ";
        v296 = 4;
        v32 = &v294;
        v33 = (char *)v306;
        if (v31 >= v308)
        {
          v228 = v31 + 1;
          v229 = (char *)v306 + 24 * v31 > (char *)&v294;
          if (v306 <= &v294 && v229)
          {
            v267 = (char *)&v294 - (_BYTE *)v306;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v228, 24);
            v33 = (char *)v306;
            v32 = (std::string **)((char *)v306 + v267);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v228, 24);
            v32 = &v294;
            v33 = (char *)v306;
          }
        }
        v34 = &v33[24 * v307];
        v35 = *(_OWORD *)v32;
        *((_QWORD *)v34 + 2) = v32[2];
        *(_OWORD *)v34 = v35;
        ++v307;
      }
    }
    (*(void (**)(uint64_t, mlir::detail *))(InterfaceFor + 72))(InterfaceFor, this);
    if (v303)
    {
      LODWORD(v294) = 5;
      size = v36;
      v37 = &v294;
      v38 = (char *)v306;
      if (v307 >= v308)
      {
        v227 = v307 + 1;
        if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
        {
          v266 = (char *)&v294 - (_BYTE *)v306;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v227, 24);
          v38 = (char *)v306;
          v37 = (std::string **)((char *)v306 + v266);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v227, 24);
          v37 = &v294;
          v38 = (char *)v306;
        }
      }
      v39 = &v38[24 * v307];
      v40 = *(_OWORD *)v37;
      *((_QWORD *)v39 + 2) = v37[2];
      *(_OWORD *)v39 = v40;
      ++v307;
    }
    v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v303);
    if (v303)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v303);
    if (!v314)
      return v41;
    v42 = (_QWORD **)__p;
    if (__p)
    {
      v43 = v313;
      v44 = __p;
      if (v313 != __p)
      {
        do
          v43 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v43 - 1);
        while (v43 != v42);
        v44 = __p;
      }
      v313 = v42;
      operator delete(v44);
    }
    v45 = v310;
    if (v310)
    {
      v46 = v311;
      v47 = v310;
      if (v311 == v310)
        goto LABEL_92;
      do
      {
        v49 = (void *)*--v46;
        v48 = v49;
        *v46 = 0;
        if (v49)
          operator delete[](v48);
      }
      while (v46 != v45);
LABEL_91:
      v47 = v310;
LABEL_92:
      v311 = v45;
      operator delete(v47);
    }
LABEL_93:
    if (v306 != v309)
      free(v306);
    return v41;
  }
  (*(void (**)(uint64_t, mlir::detail *))(InterfaceFor + 72))(InterfaceFor, this);
  v9 = v8;
  v10 = (*(uint64_t (**)(uint64_t, mlir::detail *))(InterfaceFor + 80))(InterfaceFor, this);
  if (!v11)
  {
    mlir::ValueRange::ValueRange((unint64_t *)&v303, 0, 0);
    if (v9 == v304)
      goto LABEL_9;
LABEL_42:
    v298 = (std::string *)"different number of region iter_args and yielded values: ";
    LOWORD(v302) = 259;
    mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v298, (uint64_t)&v303);
    (*(void (**)(uint64_t, mlir::detail *))(InterfaceFor + 72))(InterfaceFor, this);
    if (v303)
    {
      LODWORD(v294) = 5;
      size = v51;
      v52 = &v294;
      v53 = (char *)v306;
      if (v307 >= v308)
      {
        v230 = v307 + 1;
        if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
        {
          v268 = (char *)&v294 - (_BYTE *)v306;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v230, 24);
          v53 = (char *)v306;
          v52 = (std::string **)((char *)v306 + v268);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v230, 24);
          v52 = &v294;
          v53 = (char *)v306;
        }
      }
      v54 = &v53[24 * v307];
      v55 = *(_OWORD *)v52;
      *((_QWORD *)v54 + 2) = v52[2];
      *(_OWORD *)v54 = v55;
      v56 = ++v307;
      if (v303)
      {
        LODWORD(v294) = 3;
        size = " != ";
        v296 = 4;
        v57 = &v294;
        v58 = (char *)v306;
        if (v56 >= v308)
        {
          v232 = v56 + 1;
          v233 = (char *)v306 + 24 * v56 > (char *)&v294;
          if (v306 <= &v294 && v233)
          {
            v270 = (char *)&v294 - (_BYTE *)v306;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v232, 24);
            v58 = (char *)v306;
            v57 = (std::string **)((char *)v306 + v270);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v232, 24);
            v57 = &v294;
            v58 = (char *)v306;
          }
        }
        v59 = &v58[24 * v307];
        v60 = *(_OWORD *)v57;
        *((_QWORD *)v59 + 2) = v57[2];
        *(_OWORD *)v59 = v60;
        ++v307;
      }
    }
    v61 = (*(uint64_t (**)(uint64_t, mlir::detail *))(InterfaceFor + 80))(InterfaceFor, this);
    if (v62)
    {
      v63 = v62;
      v64 = *(_QWORD *)(v61 + 16);
      OperandNumber = mlir::OpOperand::getOperandNumber(v61);
      if ((*(_BYTE *)(v64 + 46) & 0x80) != 0)
        v66 = *(_QWORD *)(v64 + 72);
      else
        v66 = 0;
      mlir::ValueRange::ValueRange((unint64_t *)&v294, v66 + 32 * OperandNumber, v63);
      if (!v303)
        goto LABEL_55;
    }
    else
    {
      mlir::ValueRange::ValueRange((unint64_t *)&v294, 0, 0);
      if (!v303)
        goto LABEL_55;
    }
    LODWORD(v294) = 5;
    v67 = &v294;
    v68 = (char *)v306;
    if (v307 >= v308)
    {
      v231 = v307 + 1;
      if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
      {
        v269 = (char *)&v294 - (_BYTE *)v306;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v231, 24);
        v68 = (char *)v306;
        v67 = (std::string **)((char *)v306 + v269);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v231, 24);
        v67 = &v294;
        v68 = (char *)v306;
      }
    }
    v69 = &v68[24 * v307];
    v70 = *(_OWORD *)v67;
    *((_QWORD *)v69 + 2) = v67[2];
    *(_OWORD *)v69 = v70;
    ++v307;
LABEL_55:
    v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v303);
    if (v303)
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v303);
    if (!v314)
      return v41;
    v71 = (_QWORD **)__p;
    if (__p)
    {
      v72 = v313;
      v73 = __p;
      if (v313 != __p)
      {
        do
          v72 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v72 - 1);
        while (v72 != v71);
        v73 = __p;
      }
      v313 = v71;
      operator delete(v73);
    }
    v45 = v310;
    if (v310)
    {
      v74 = v311;
      v47 = v310;
      if (v311 == v310)
        goto LABEL_92;
      do
      {
        v76 = (void *)*--v74;
        v75 = v76;
        *v74 = 0;
        if (v76)
          operator delete[](v75);
      }
      while (v74 != v45);
      goto LABEL_91;
    }
    goto LABEL_93;
  }
  v12 = v11;
  v13 = *(_QWORD *)(v10 + 16);
  v14 = mlir::OpOperand::getOperandNumber(v10);
  if ((*(_BYTE *)(v13 + 46) & 0x80) != 0)
    v15 = *(_QWORD *)(v13 + 72);
  else
    v15 = 0;
  mlir::ValueRange::ValueRange((unint64_t *)&v303, v15 + 32 * v14, v12);
  if (v9 != v304)
    goto LABEL_42;
LABEL_9:
  (*(void (**)(mlir::detail::OpResultImpl **__return_ptr, uint64_t, mlir::detail *))(InterfaceFor + 88))(&v303, InterfaceFor, this);
  if (v305)
  {
    (*(void (**)(std::string **__return_ptr, uint64_t, mlir::detail *))(InterfaceFor + 88))(&v298, InterfaceFor, this);
    v16 = v299;
    (*(void (**)(uint64_t, mlir::detail *))(InterfaceFor + 72))(InterfaceFor, this);
    if (v16 != v17)
    {
      v298 = (std::string *)"different number of loop results and region iter_args: ";
      LOWORD(v302) = 259;
      mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v298, (uint64_t)&v303);
      (*(void (**)(std::string *__return_ptr, uint64_t, mlir::detail *))(InterfaceFor + 88))(&v293, InterfaceFor, this);
      if (v303)
      {
        LODWORD(v294) = 5;
        size = (const char *)v293.__r_.__value_.__l.__size_;
        v77 = &v294;
        v78 = (char *)v306;
        if (v307 >= v308)
        {
          v234 = v307 + 1;
          if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
          {
            v271 = (char *)&v294 - (_BYTE *)v306;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v234, 24);
            v78 = (char *)v306;
            v77 = (std::string **)((char *)v306 + v271);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v234, 24);
            v77 = &v294;
            v78 = (char *)v306;
          }
        }
        v79 = &v78[24 * v307];
        v80 = *(_OWORD *)v77;
        *((_QWORD *)v79 + 2) = v77[2];
        *(_OWORD *)v79 = v80;
        v81 = ++v307;
        if (v303)
        {
          LODWORD(v294) = 3;
          size = " != ";
          v296 = 4;
          v82 = &v294;
          v83 = (char *)v306;
          if (v81 >= v308)
          {
            v236 = v81 + 1;
            v237 = (char *)v306 + 24 * v81 > (char *)&v294;
            if (v306 <= &v294 && v237)
            {
              v273 = (char *)&v294 - (_BYTE *)v306;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v236, 24);
              v83 = (char *)v306;
              v82 = (std::string **)((char *)v306 + v273);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v236, 24);
              v82 = &v294;
              v83 = (char *)v306;
            }
          }
          v84 = &v83[24 * v307];
          v85 = *(_OWORD *)v82;
          *((_QWORD *)v84 + 2) = v82[2];
          *(_OWORD *)v84 = v85;
          ++v307;
        }
      }
      (*(void (**)(uint64_t, mlir::detail *))(InterfaceFor + 72))(InterfaceFor, this);
      if (v303)
      {
        LODWORD(v294) = 5;
        size = v86;
        v87 = &v294;
        v88 = (char *)v306;
        if (v307 >= v308)
        {
          v235 = v307 + 1;
          if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
          {
            v272 = (char *)&v294 - (_BYTE *)v306;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v235, 24);
            v88 = (char *)v306;
            v87 = (std::string **)((char *)v306 + v272);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v235, 24);
            v87 = &v294;
            v88 = (char *)v306;
          }
        }
        v89 = &v88[24 * v307];
        v90 = *(_OWORD *)v87;
        *((_QWORD *)v89 + 2) = v87[2];
        *(_OWORD *)v89 = v90;
        ++v307;
      }
      v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v303);
      if (v303)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v303);
      if (!v314)
        return v41;
      v91 = (_QWORD **)__p;
      if (__p)
      {
        v92 = v313;
        v93 = __p;
        if (v313 != __p)
        {
          do
            v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
          while (v92 != v91);
          v93 = __p;
        }
        v313 = v91;
        operator delete(v93);
      }
      v45 = v310;
      if (v310)
      {
        v94 = v311;
        v47 = v310;
        if (v311 == v310)
          goto LABEL_92;
        do
        {
          v96 = (void *)*--v94;
          v95 = v96;
          *v94 = 0;
          if (v96)
            operator delete[](v95);
        }
        while (v94 != v45);
        goto LABEL_91;
      }
      goto LABEL_93;
    }
  }
  v18 = (*(uint64_t (**)(uint64_t, mlir::detail *))(InterfaceFor + 64))(InterfaceFor, this);
  v20 = v19;
  if (v19)
  {
    v21 = mlir::OpOperand::getOperandNumber(v18);
    if ((*((_BYTE *)this + 46) & 0x80) != 0)
      v22 = *((_QWORD *)this + 9);
    else
      v22 = 0;
    v23 = v21;
  }
  else if ((*((_BYTE *)this + 46) & 0x80) != 0)
  {
    v22 = *((_QWORD *)this + 9);
    v23 = *((unsigned int *)this + 17);
  }
  else
  {
    v23 = 0;
    v22 = 0;
  }
  v98 = (const void **)(v22 + 32 * v23);
  v99 = (*(uint64_t (**)(uint64_t, mlir::detail *))(InterfaceFor + 72))(InterfaceFor, this);
  v100 = (*(uint64_t (**)(uint64_t, mlir::detail *))(InterfaceFor + 80))(InterfaceFor, this);
  if (v101)
  {
    v102 = v101;
    v103 = *(_QWORD *)(v100 + 16);
    v104 = mlir::OpOperand::getOperandNumber(v100);
    if ((*(_BYTE *)(v103 + 46) & 0x80) != 0)
      v105 = *(_QWORD *)(v103 + 72);
    else
      v105 = 0;
    mlir::ValueRange::ValueRange((unint64_t *)&v303, v105 + 32 * v104, v102);
    v298 = (std::string *)v98;
    v299 = 0;
    v300 = v99;
    v301 = v303;
    v302 = 0;
    if (!v20)
    {
LABEL_109:
      (*(void (**)(mlir::detail::OpResultImpl **__return_ptr, uint64_t, mlir::detail *))(InterfaceFor + 88))(&v303, InterfaceFor, this);
      if (!v305)
        return 1;
      v114 = (*(uint64_t (**)(uint64_t, mlir::detail *))(InterfaceFor + 72))(InterfaceFor, this);
      v116 = v115;
      (*(void (**)(mlir::detail::OpResultImpl **__return_ptr, uint64_t, mlir::detail *))(InterfaceFor + 88))(&v303, InterfaceFor, this);
      if (!v116)
        return 1;
      v117 = 0;
      v118 = v303;
      v119 = 8 * v116;
      while (1)
      {
        NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v118, v117);
        if ((*(_QWORD *)(*(_QWORD *)(v114 + 8 * v117) + 8) & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8))
          break;
        ++v117;
        v41 = 1;
        v119 -= 8;
        if (!v119)
          return v41;
      }
      v189 = NextResultAtOffset;
      std::to_string(&v293, 0);
      LOWORD(v302) = 260;
      v298 = &v293;
      mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v298, (uint64_t)&v303);
      if (v303)
      {
        LODWORD(v294) = 3;
        size = "-th region iter_arg and ";
        v296 = 24;
        v190 = &v294;
        v191 = (char *)v306;
        if (v307 >= v308)
        {
          v244 = v307 + 1;
          if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
          {
            v278 = (char *)&v294 - (_BYTE *)v306;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v244, 24);
            v191 = (char *)v306;
            v190 = (std::string **)((char *)v306 + v278);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v244, 24);
            v190 = &v294;
            v191 = (char *)v306;
          }
        }
        v192 = &v191[24 * v307];
        v193 = *(_OWORD *)v190;
        *((_QWORD *)v192 + 2) = v190[2];
        *(_OWORD *)v192 = v193;
        v194 = ++v307;
        if (v303)
        {
          LODWORD(v294) = 2;
          size = 0;
          v195 = &v294;
          v196 = (char *)v306;
          if (v194 >= v308)
          {
            v249 = v194 + 1;
            v250 = (char *)v306 + 24 * v194 > (char *)&v294;
            if (v306 <= &v294 && v250)
            {
              v281 = (char *)&v294 - (_BYTE *)v306;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v249, 24);
              v196 = (char *)v306;
              v195 = (std::string **)((char *)v306 + v281);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v249, 24);
              v195 = &v294;
              v196 = (char *)v306;
            }
          }
          v197 = &v196[24 * v307];
          v198 = *(_OWORD *)v195;
          *((_QWORD *)v197 + 2) = v195[2];
          *(_OWORD *)v197 = v198;
          v199 = ++v307;
          if (v303)
          {
            LODWORD(v294) = 3;
            size = "-th loop result have different type: ";
            v296 = 37;
            v200 = &v294;
            v201 = (char *)v306;
            if (v199 >= v308)
            {
              v253 = v199 + 1;
              v254 = (char *)v306 + 24 * v199 > (char *)&v294;
              if (v306 <= &v294 && v254)
              {
                v284 = (char *)&v294 - (_BYTE *)v306;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v253, 24);
                v201 = (char *)v306;
                v200 = (std::string **)((char *)v306 + v284);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v253, 24);
                v200 = &v294;
                v201 = (char *)v306;
              }
            }
            v202 = &v201[24 * v307];
            v203 = *(_OWORD *)v200;
            *((_QWORD *)v202 + 2) = v200[2];
            *(_OWORD *)v202 = v203;
            ++v307;
            if (v303)
            {
              v204 = &v294;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v294, *(_QWORD *)(*(_QWORD *)(v114 + 8 * v117) + 8) & 0xFFFFFFFFFFFFFFF8);
              v205 = (char *)v306;
              if (v307 >= v308)
              {
                v259 = v307 + 1;
                if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
                {
                  v287 = (char *)&v294 - (_BYTE *)v306;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v259, 24);
                  v205 = (char *)v306;
                  v204 = (std::string **)((char *)v306 + v287);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v259, 24);
                  v204 = &v294;
                  v205 = (char *)v306;
                }
              }
              v206 = &v205[24 * v307];
              v207 = *(_OWORD *)v204;
              *((_QWORD *)v206 + 2) = v204[2];
              *(_OWORD *)v206 = v207;
              v208 = ++v307;
              if (v303)
              {
                LODWORD(v294) = 3;
                size = " != ";
                v296 = 4;
                v209 = &v294;
                v210 = (char *)v306;
                if (v208 >= v308)
                {
                  v262 = v208 + 1;
                  v263 = (char *)v306 + 24 * v208 > (char *)&v294;
                  if (v306 <= &v294 && v263)
                  {
                    v290 = (char *)&v294 - (_BYTE *)v306;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v262, 24);
                    v210 = (char *)v306;
                    v209 = (std::string **)((char *)v306 + v290);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v262, 24);
                    v209 = &v294;
                    v210 = (char *)v306;
                  }
                }
                v211 = &v210[24 * v307];
                v212 = *(_OWORD *)v209;
                *((_QWORD *)v211 + 2) = v209[2];
                *(_OWORD *)v211 = v212;
                ++v307;
                if (v303)
                {
                  v213 = &v294;
                  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v294, *(_QWORD *)(v189 + 8) & 0xFFFFFFFFFFFFFFF8);
                  v214 = (char *)v306;
                  if (v307 >= v308)
                  {
                    v264 = v307 + 1;
                    if (v306 <= &v294 && (char *)v306 + 24 * v307 > (char *)&v294)
                    {
                      v291 = (char *)&v294 - (_BYTE *)v306;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v264, 24);
                      v214 = (char *)v306;
                      v213 = (std::string **)((char *)v306 + v291);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v264, 24);
                      v213 = &v294;
                      v214 = (char *)v306;
                    }
                  }
                  v215 = &v214[24 * v307];
                  v216 = *(_OWORD *)v213;
                  *((_QWORD *)v215 + 2) = v213[2];
                  *(_OWORD *)v215 = v216;
                  ++v307;
                }
              }
            }
          }
        }
      }
      v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v303);
      if (v303)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v303);
      if (v314)
      {
        v217 = (_QWORD **)__p;
        if (__p)
        {
          v218 = v313;
          v219 = __p;
          if (v313 != __p)
          {
            do
              v218 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v218 - 1);
            while (v218 != v217);
            v219 = __p;
          }
          v313 = v217;
          operator delete(v219);
        }
        v220 = v310;
        if (v310)
        {
          v221 = v311;
          v222 = v310;
          if (v311 != v310)
          {
            do
            {
              v224 = (void *)*--v221;
              v223 = v224;
              *v221 = 0;
              if (v224)
                operator delete[](v223);
            }
            while (v221 != v220);
            v222 = v310;
          }
          v311 = v220;
          operator delete(v222);
        }
        if (v306 != v309)
          free(v306);
      }
      if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      {
        v225 = (void *)v293.__r_.__value_.__r.__words[0];
        goto LABEL_209;
      }
      return v41;
    }
  }
  else
  {
    mlir::ValueRange::ValueRange((unint64_t *)&v303, 0, 0);
    v298 = (std::string *)v98;
    v299 = 0;
    v300 = v99;
    v301 = v303;
    v302 = 0;
    if (!v20)
      goto LABEL_109;
  }
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = (std::string *)v98;
  while (1)
  {
    v110 = *((_QWORD *)&v109[1].__r_.__value_.__l.__data_ + 4 * v107);
    v111 = mlir::ValueRange::dereference_iterator(&v301, v106);
    v112 = *(_QWORD *)(v110 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v112 != (*(_QWORD *)(*(_QWORD *)v99 + 8) & 0xFFFFFFFFFFFFFFF8))
      break;
    v113 = v111;
    if (v112 != (*(_QWORD *)(v111 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      std::to_string(&v292, v108);
      v297 = 260;
      v294 = &v292;
      mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v294, (uint64_t)&v303);
      if (v303)
      {
        LODWORD(v293.__r_.__value_.__l.__data_) = 3;
        v293.__r_.__value_.__l.__size_ = (std::string::size_type)"-th region iter_arg and ";
        v293.__r_.__value_.__r.__words[2] = 24;
        v156 = &v293;
        v157 = (char *)v306;
        if (v307 >= v308)
        {
          v239 = v307 + 1;
          if (v306 <= &v293 && (char *)v306 + 24 * v307 > (char *)&v293)
          {
            v275 = (char *)&v293 - (_BYTE *)v306;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v239, 24);
            v157 = (char *)v306;
            v156 = (std::string *)((char *)v306 + v275);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v239, 24);
            v156 = &v293;
            v157 = (char *)v306;
          }
        }
        v158 = &v157[24 * v307];
        v159 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
        *((_QWORD *)v158 + 2) = *((_QWORD *)&v156->__r_.__value_.__l + 2);
        *(_OWORD *)v158 = v159;
        v160 = ++v307;
        if (v303)
        {
          LODWORD(v293.__r_.__value_.__l.__data_) = 2;
          v293.__r_.__value_.__l.__size_ = v108;
          v161 = &v293;
          v162 = (char *)v306;
          if (v160 >= v308)
          {
            v242 = v160 + 1;
            v243 = (char *)v306 + 24 * v160 > (char *)&v293;
            if (v306 <= &v293 && v243)
            {
              v277 = (char *)&v293 - (_BYTE *)v306;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v242, 24);
              v162 = (char *)v306;
              v161 = (std::string *)((char *)v306 + v277);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v242, 24);
              v161 = &v293;
              v162 = (char *)v306;
            }
          }
          v163 = &v162[24 * v307];
          v164 = *(_OWORD *)&v161->__r_.__value_.__l.__data_;
          *((_QWORD *)v163 + 2) = *((_QWORD *)&v161->__r_.__value_.__l + 2);
          *(_OWORD *)v163 = v164;
          v165 = ++v307;
          if (v303)
          {
            LODWORD(v293.__r_.__value_.__l.__data_) = 3;
            v293.__r_.__value_.__l.__size_ = (std::string::size_type)"-th yielded value have different type: ";
            v293.__r_.__value_.__r.__words[2] = 39;
            v166 = &v293;
            v167 = (char *)v306;
            if (v165 >= v308)
            {
              v247 = v165 + 1;
              v248 = (char *)v306 + 24 * v165 > (char *)&v293;
              if (v306 <= &v293 && v248)
              {
                v280 = (char *)&v293 - (_BYTE *)v306;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v247, 24);
                v167 = (char *)v306;
                v166 = (std::string *)((char *)v306 + v280);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v247, 24);
                v166 = &v293;
                v167 = (char *)v306;
              }
            }
            v168 = &v167[24 * v307];
            v169 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
            *((_QWORD *)v168 + 2) = *((_QWORD *)&v166->__r_.__value_.__l + 2);
            *(_OWORD *)v168 = v169;
            ++v307;
            if (v303)
            {
              v170 = &v293;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v293, *(_QWORD *)(*(_QWORD *)v99 + 8) & 0xFFFFFFFFFFFFFFF8);
              v171 = (char *)v306;
              if (v307 >= v308)
              {
                v252 = v307 + 1;
                if (v306 <= &v293 && (char *)v306 + 24 * v307 > (char *)&v293)
                {
                  v283 = (char *)&v293 - (_BYTE *)v306;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v252, 24);
                  v171 = (char *)v306;
                  v170 = (std::string *)((char *)v306 + v283);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v252, 24);
                  v170 = &v293;
                  v171 = (char *)v306;
                }
              }
              v172 = &v171[24 * v307];
              v173 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
              *((_QWORD *)v172 + 2) = *((_QWORD *)&v170->__r_.__value_.__l + 2);
              *(_OWORD *)v172 = v173;
              v174 = ++v307;
              if (v303)
              {
                LODWORD(v293.__r_.__value_.__l.__data_) = 3;
                v293.__r_.__value_.__l.__size_ = (std::string::size_type)" != ";
                v293.__r_.__value_.__r.__words[2] = 4;
                v175 = &v293;
                v176 = (char *)v306;
                if (v174 >= v308)
                {
                  v257 = v174 + 1;
                  v258 = (char *)v306 + 24 * v174 > (char *)&v293;
                  if (v306 <= &v293 && v258)
                  {
                    v286 = (char *)&v293 - (_BYTE *)v306;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v257, 24);
                    v176 = (char *)v306;
                    v175 = (std::string *)((char *)v306 + v286);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v257, 24);
                    v175 = &v293;
                    v176 = (char *)v306;
                  }
                }
                v177 = &v176[24 * v307];
                v178 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
                *((_QWORD *)v177 + 2) = *((_QWORD *)&v175->__r_.__value_.__l + 2);
                *(_OWORD *)v177 = v178;
                ++v307;
                if (v303)
                {
                  v179 = &v293;
                  mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v293, *(_QWORD *)(v113 + 8) & 0xFFFFFFFFFFFFFFF8);
                  v180 = (char *)v306;
                  if (v307 >= v308)
                  {
                    v261 = v307 + 1;
                    if (v306 <= &v293 && (char *)v306 + 24 * v307 > (char *)&v293)
                    {
                      v289 = (char *)&v293 - (_BYTE *)v306;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v261, 24);
                      v180 = (char *)v306;
                      v179 = (std::string *)((char *)v306 + v289);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v261, 24);
                      v179 = &v293;
                      v180 = (char *)v306;
                    }
                  }
                  v181 = &v180[24 * v307];
                  v182 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
                  *((_QWORD *)v181 + 2) = *((_QWORD *)&v179->__r_.__value_.__l + 2);
                  *(_OWORD *)v181 = v182;
                  ++v307;
                }
              }
            }
          }
        }
      }
      v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v303);
      if (v303)
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v303);
      if (v314)
      {
        v183 = (_QWORD **)__p;
        if (__p)
        {
          v184 = v313;
          v185 = __p;
          if (v313 != __p)
          {
            do
              v184 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v184 - 1);
            while (v184 != v183);
            v185 = __p;
          }
          v313 = v183;
          operator delete(v185);
        }
        v151 = v310;
        if (!v310)
          goto LABEL_199;
        v186 = v311;
        v153 = v310;
        if (v311 == v310)
        {
LABEL_198:
          v311 = v151;
          operator delete(v153);
LABEL_199:
          if (v306 != v309)
            free(v306);
          goto LABEL_201;
        }
        do
        {
          v188 = (void *)*--v186;
          v187 = v188;
          *v186 = 0;
          if (v188)
            operator delete[](v187);
        }
        while (v186 != v151);
LABEL_197:
        v153 = v310;
        goto LABEL_198;
      }
      goto LABEL_201;
    }
    ++v108;
    v109 = v298;
    v107 = v299 + 1;
    v99 = v300 + 8;
    ++v299;
    v300 += 8;
    v106 = ++v302;
    if (v298 == (std::string *)v98 && v107 == v20)
      goto LABEL_109;
  }
  std::to_string(&v292, v108);
  v297 = 260;
  v294 = &v292;
  mlir::Operation::emitOpError((uint64_t *)this, (const void ***)&v294, (uint64_t)&v303);
  if (v303)
  {
    LODWORD(v293.__r_.__value_.__l.__data_) = 3;
    v293.__r_.__value_.__l.__size_ = (std::string::size_type)"-th init and ";
    v293.__r_.__value_.__r.__words[2] = 13;
    v121 = &v293;
    v122 = (char *)v306;
    if (v307 >= v308)
    {
      v238 = v307 + 1;
      if (v306 <= &v293 && (char *)v306 + 24 * v307 > (char *)&v293)
      {
        v274 = (char *)&v293 - (_BYTE *)v306;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v238, 24);
        v122 = (char *)v306;
        v121 = (std::string *)((char *)v306 + v274);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v238, 24);
        v121 = &v293;
        v122 = (char *)v306;
      }
    }
    v123 = &v122[24 * v307];
    v124 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
    *((_QWORD *)v123 + 2) = *((_QWORD *)&v121->__r_.__value_.__l + 2);
    *(_OWORD *)v123 = v124;
    v125 = ++v307;
    if (v303)
    {
      LODWORD(v293.__r_.__value_.__l.__data_) = 2;
      v293.__r_.__value_.__l.__size_ = v108;
      v126 = &v293;
      v127 = (char *)v306;
      if (v125 >= v308)
      {
        v240 = v125 + 1;
        v241 = (char *)v306 + 24 * v125 > (char *)&v293;
        if (v306 <= &v293 && v241)
        {
          v276 = (char *)&v293 - (_BYTE *)v306;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v240, 24);
          v127 = (char *)v306;
          v126 = (std::string *)((char *)v306 + v276);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v240, 24);
          v126 = &v293;
          v127 = (char *)v306;
        }
      }
      v128 = &v127[24 * v307];
      v129 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      *((_QWORD *)v128 + 2) = *((_QWORD *)&v126->__r_.__value_.__l + 2);
      *(_OWORD *)v128 = v129;
      v130 = ++v307;
      if (v303)
      {
        LODWORD(v293.__r_.__value_.__l.__data_) = 3;
        v293.__r_.__value_.__l.__size_ = (std::string::size_type)"-th region iter_arg have different type: ";
        v293.__r_.__value_.__r.__words[2] = 41;
        v131 = &v293;
        v132 = (char *)v306;
        if (v130 >= v308)
        {
          v245 = v130 + 1;
          v246 = (char *)v306 + 24 * v130 > (char *)&v293;
          if (v306 <= &v293 && v246)
          {
            v279 = (char *)&v293 - (_BYTE *)v306;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v245, 24);
            v132 = (char *)v306;
            v131 = (std::string *)((char *)v306 + v279);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v245, 24);
            v131 = &v293;
            v132 = (char *)v306;
          }
        }
        v133 = &v132[24 * v307];
        v134 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        *((_QWORD *)v133 + 2) = *((_QWORD *)&v131->__r_.__value_.__l + 2);
        *(_OWORD *)v133 = v134;
        ++v307;
        if (v303)
        {
          v135 = &v293;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v293, *(_QWORD *)(v110 + 8) & 0xFFFFFFFFFFFFFFF8);
          v136 = (char *)v306;
          if (v307 >= v308)
          {
            v251 = v307 + 1;
            if (v306 <= &v293 && (char *)v306 + 24 * v307 > (char *)&v293)
            {
              v282 = (char *)&v293 - (_BYTE *)v306;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v251, 24);
              v136 = (char *)v306;
              v135 = (std::string *)((char *)v306 + v282);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v251, 24);
              v135 = &v293;
              v136 = (char *)v306;
            }
          }
          v137 = &v136[24 * v307];
          v138 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
          *((_QWORD *)v137 + 2) = *((_QWORD *)&v135->__r_.__value_.__l + 2);
          *(_OWORD *)v137 = v138;
          v139 = ++v307;
          if (v303)
          {
            LODWORD(v293.__r_.__value_.__l.__data_) = 3;
            v293.__r_.__value_.__l.__size_ = (std::string::size_type)" != ";
            v293.__r_.__value_.__r.__words[2] = 4;
            v140 = &v293;
            v141 = (char *)v306;
            if (v139 >= v308)
            {
              v255 = v139 + 1;
              v256 = (char *)v306 + 24 * v139 > (char *)&v293;
              if (v306 <= &v293 && v256)
              {
                v285 = (char *)&v293 - (_BYTE *)v306;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v255, 24);
                v141 = (char *)v306;
                v140 = (std::string *)((char *)v306 + v285);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v255, 24);
                v140 = &v293;
                v141 = (char *)v306;
              }
            }
            v142 = &v141[24 * v307];
            v143 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
            *((_QWORD *)v142 + 2) = *((_QWORD *)&v140->__r_.__value_.__l + 2);
            *(_OWORD *)v142 = v143;
            ++v307;
            if (v303)
            {
              v144 = &v293;
              mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v293, *(_QWORD *)(*(_QWORD *)v99 + 8) & 0xFFFFFFFFFFFFFFF8);
              v145 = (char *)v306;
              if (v307 >= v308)
              {
                v260 = v307 + 1;
                if (v306 <= &v293 && (char *)v306 + 24 * v307 > (char *)&v293)
                {
                  v288 = (char *)&v293 - (_BYTE *)v306;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v260, 24);
                  v145 = (char *)v306;
                  v144 = (std::string *)((char *)v306 + v288);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, v309, v260, 24);
                  v144 = &v293;
                  v145 = (char *)v306;
                }
              }
              v146 = &v145[24 * v307];
              v147 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
              *((_QWORD *)v146 + 2) = *((_QWORD *)&v144->__r_.__value_.__l + 2);
              *(_OWORD *)v146 = v147;
              ++v307;
            }
          }
        }
      }
    }
  }
  v41 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v303);
  if (v303)
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v303);
  if (v314)
  {
    v148 = (_QWORD **)__p;
    if (__p)
    {
      v149 = v313;
      v150 = __p;
      if (v313 != __p)
      {
        do
          v149 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v149 - 1);
        while (v149 != v148);
        v150 = __p;
      }
      v313 = v148;
      operator delete(v150);
    }
    v151 = v310;
    if (!v310)
      goto LABEL_199;
    v152 = v311;
    v153 = v310;
    if (v311 == v310)
      goto LABEL_198;
    do
    {
      v155 = (void *)*--v152;
      v154 = v155;
      *v152 = 0;
      if (v155)
        operator delete[](v154);
    }
    while (v152 != v151);
    goto LABEL_197;
  }
LABEL_201:
  if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
  {
    v225 = (void *)v292.__r_.__value_.__r.__words[0];
LABEL_209:
    operator delete(v225);
  }
  return v41;
}

void *llvm::APFloatBase::IEEEhalf(llvm::APFloatBase *this)
{
  return &llvm::semIEEEhalf;
}

void *llvm::APFloatBase::BFloat(llvm::APFloatBase *this)
{
  return &llvm::semBFloat;
}

void *llvm::APFloatBase::IEEEsingle(llvm::APFloatBase *this)
{
  return &llvm::semIEEEsingle;
}

void *llvm::APFloatBase::IEEEdouble(llvm::APFloatBase *this)
{
  return &llvm::semIEEEdouble;
}

void *llvm::APFloatBase::IEEEquad(llvm::APFloatBase *this)
{
  return &llvm::semIEEEquad;
}

void *llvm::APFloatBase::PPCDoubleDouble(llvm::APFloatBase *this)
{
  return &llvm::semPPCDoubleDouble;
}

void *llvm::APFloatBase::Float8E5M2(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E5M2;
}

void *llvm::APFloatBase::Float8E5M2FNUZ(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E5M2FNUZ;
}

void *llvm::APFloatBase::Float8E4M3FN(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E4M3FN;
}

void *llvm::APFloatBase::Float8E4M3FNUZ(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E4M3FNUZ;
}

void *llvm::APFloatBase::Float8E4M3B11FNUZ(llvm::APFloatBase *this)
{
  return &llvm::semFloat8E4M3B11FNUZ;
}

void *llvm::APFloatBase::FloatTF32(llvm::APFloatBase *this)
{
  return &llvm::semFloatTF32;
}

void *llvm::APFloatBase::x87DoubleExtended(llvm::APFloatBase *this)
{
  return &llvm::semX87DoubleExtended;
}

void *llvm::APFloatBase::Bogus(llvm::APFloatBase *this)
{
  return &llvm::semBogus;
}

uint64_t llvm::APFloatBase::semanticsPrecision(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::APFloatBase::getSizeInBits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void llvm::detail::IEEEFloat::makeNaN(llvm::detail::IEEEFloat *this, int a2, int a3, const llvm::APInt *a4)
{
  void **p_p;
  char v7;
  char v8;
  _DWORD *v9;
  int v10;
  int v11;
  llvm::APInt *v12;
  const unint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _OWORD *v28;
  void *v29;
  unsigned int v30;
  void *__p;
  unsigned int v32;

  p_p = (void **)a4;
  v7 = *((_BYTE *)this + 20) & 0xF0;
  if (a3)
    v8 = 9;
  else
    v8 = 1;
  *((_BYTE *)this + 20) = v8 | v7;
  v9 = *(_DWORD **)this;
  v10 = *(_DWORD *)(*(_QWORD *)this + 16);
  if (v10 != 1)
  {
    *((_DWORD *)this + 4) = *v9 + 1;
    v11 = v9[2];
    v12 = (llvm::detail::IEEEFloat *)((char *)this + 8);
    if ((v11 - 64) > 0xFFFFFF7F)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (v9[5] == 2)
  {
    *((_DWORD *)this + 4) = v9[1] - 1;
    v11 = v9[2];
    v12 = (llvm::detail::IEEEFloat *)((char *)this + 8);
    if ((v11 - 64) > 0xFFFFFF7F)
      goto LABEL_10;
LABEL_9:
    v12 = *(llvm::APInt **)v12;
    goto LABEL_10;
  }
  *((_DWORD *)this + 4) = *v9;
  v11 = v9[2];
  v12 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if ((v11 - 64) <= 0xFFFFFF7F)
    goto LABEL_9;
LABEL_10:
  v13 = (const unint64_t *)((v11 + 64) >> 6);
  v32 = 1;
  __p = 0;
  if (v10 == 1)
  {
    if (v9[5] == 2)
    {
      *((_BYTE *)this + 20) = v7 | 9;
      v30 = v9[2] - 1;
      if (v30 <= 0x40)
      {
        v29 = 0;
        goto LABEL_30;
      }
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v30 = v11 - 1;
      if ((v11 - 1) <= 0x40)
      {
        if (v11 == 1)
          v15 = 0;
        else
          v15 = 0xFFFFFFFFFFFFFFFFLL >> ~(v11 + 62);
        v29 = (void *)v15;
LABEL_30:
        a2 = 0;
        __p = v29;
        v14 = v30;
        v32 = v30;
        p_p = &__p;
        if (v13 <= (((unint64_t)v30 + 63) >> 6))
          goto LABEL_32;
        goto LABEL_31;
      }
      v19 = -1;
      v20 = 1;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&v29, v19, v20);
    goto LABEL_30;
  }
  if (a4)
  {
    v14 = *((_DWORD *)a4 + 2);
    if (v13 <= (((unint64_t)v14 + 63) >> 6))
    {
LABEL_32:
      if (v14 >= 0x41)
        p_p = (void **)*p_p;
      v21 = ((unint64_t)v14 + 63) >> 6;
      if (v13 >= v21)
        v22 = v21;
      else
        v22 = v13;
      llvm::APInt::tcAssign((uint64_t)v12, (unint64_t *)p_p, (const unint64_t *)v22);
      v16 = *(_QWORD *)this;
      v17 = *(_DWORD *)(*(_QWORD *)this + 8);
      v23 = (v17 - 1) >> 6;
      *((_QWORD *)v12 + v23) &= ~(-1 << (v17 - 1));
      v24 = v23 + 1;
      if (v23 + 1 != (_DWORD)v13)
      {
        v25 = (_DWORD)v13 + ~v23;
        if (v25 < 0xA)
        {
          v26 = v23 + 1;
        }
        else if ((int)v13 - 1 <= v23)
        {
          v26 = v23 + 1;
        }
        else
        {
          v26 = v24 + (v25 & 0xFFFFFFFC);
          v27 = v25 & 0xFFFFFFFC;
          do
          {
            v28 = (_OWORD *)((char *)v12 + 8 * v24);
            *v28 = 0uLL;
            v28[1] = 0uLL;
            v24 += 4;
            v27 -= 4;
          }
          while (v27);
          if (v25 == (v25 & 0xFFFFFFFC))
            goto LABEL_47;
        }
        do
          *((_QWORD *)v12 + v26++) = 0;
        while ((_DWORD)v13 != v26);
      }
LABEL_47:
      v18 = (v17 - 2);
      if (a2)
        goto LABEL_48;
      goto LABEL_25;
    }
LABEL_31:
    llvm::APInt::tcSet(v12, 0, v13);
    v14 = *((_DWORD *)p_p + 2);
    goto LABEL_32;
  }
  llvm::APInt::tcSet(v12, 0, (v11 + 64) >> 6);
  v16 = *(_QWORD *)this;
  v17 = *(_DWORD *)(*(_QWORD *)this + 8);
  v18 = (v17 - 2);
  if ((a2 & 1) != 0)
  {
LABEL_48:
    llvm::APInt::tcClearBit((uint64_t)v12, (unint64_t *)v18);
    if (!llvm::APInt::tcIsZero(v12, v13))
      goto LABEL_51;
    v18 = (v17 - 3);
    goto LABEL_50;
  }
LABEL_25:
  if (*(_DWORD *)(v16 + 20) != 2)
LABEL_50:
    llvm::APInt::tcSetBit((uint64_t)v12, (unint64_t *)v18);
LABEL_51:
  if (*(_UNKNOWN **)this == &llvm::semX87DoubleExtended)
  {
    llvm::APInt::tcSetBit((uint64_t)v12, (unint64_t *)(v17 - 1));
    if (v32 < 0x41)
      return;
  }
  else if (v32 < 0x41)
  {
    return;
  }
  if (__p)
    operator delete[](__p);
}

uint64_t *llvm::detail::IEEEFloat::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  unsigned int v6;
  char v7;
  char v8;
  int v9;
  _BOOL4 v11;
  int v13;
  _QWORD *v14;
  unsigned int v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;

  if (a1 != a2)
  {
    v4 = *a2;
    if (*a1 == *a2)
    {
      v4 = *a1;
    }
    else
    {
      if ((*(_DWORD *)(*a1 + 8) - 64) <= 0xFFFFFF7F)
      {
        v5 = (void *)a1[1];
        if (v5)
        {
          operator delete[](v5);
          v4 = *a2;
        }
      }
      *a1 = v4;
      v6 = *(_DWORD *)(v4 + 8) + 64;
      if (v6 >= 0x80)
        a1[1] = (uint64_t)operator new[]((v6 >> 3) & 0x1FFFFFF8);
    }
    v7 = *((_BYTE *)a1 + 20) & 0xF7 | *((_BYTE *)a2 + 20) & 8;
    *((_BYTE *)a1 + 20) = v7;
    v8 = *((_BYTE *)a2 + 20);
    v9 = v8 & 7;
    *((_BYTE *)a1 + 20) = v7 & 0xF8 | v8 & 7;
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    v11 = (v8 & 6) != 0 && v9 != 3;
    if (v9 == 1 || v11)
    {
      v13 = *(_DWORD *)(v4 + 8);
      v14 = a1 + 1;
      if ((v13 - 64) <= 0xFFFFFF7F)
        v14 = (_QWORD *)*v14;
      v15 = *(_DWORD *)(*a2 + 8) - 64;
      v18 = (unint64_t *)a2[1];
      v17 = (unint64_t *)(a2 + 1);
      v16 = v18;
      if (v15 >= 0xFFFFFF80)
        v19 = v17;
      else
        v19 = v16;
      llvm::APInt::tcAssign((uint64_t)v14, v19, (const unint64_t *)((v13 + 64) >> 6));
    }
  }
  return a1;
}

uint64_t llvm::detail::IEEEFloat::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;

  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) - 64) <= 0xFFFFFF7F)
  {
    v4 = *(void **)(a1 + 8);
    if (v4)
      operator delete[](v4);
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a1 + 20) & 0xF8 | *(_BYTE *)(a2 + 20) & 7;
  *(_BYTE *)(a1 + 20) = v5;
  *(_BYTE *)(a1 + 20) = v5 & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
  *(_QWORD *)a2 = &llvm::semBogus;
  return a1;
}

BOOL llvm::detail::IEEEFloat::isSignificandAllOnes(llvm::detail::IEEEFloat *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = *(_QWORD *)this;
  v1 = (uint64_t *)((char *)this + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 - 64) <= 0xFFFFFF7F)
    v1 = (uint64_t *)*v1;
  v4 = v3 + 63;
  v5 = (v4 >> 6) - 1;
  if (v4 >> 6 == 1)
  {
    v5 = 0;
    return (v1[v5] | (-1 << v4)) == -1;
  }
  else
  {
    v6 = (v4 >> 6) - 1;
    v7 = v1;
    while (1)
    {
      v8 = *v7++;
      if (v8 != -1)
        break;
      if (!--v6)
        return (v1[v5] | (-1 << v4)) == -1;
    }
    return 0;
  }
}

void llvm::detail::IEEEFloat::compare(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

uint64_t sub_180B62D48()
{
  unsigned int v0;

  return ~(v0 >> 2) & 2;
}

uint64_t sub_180B62D5C@<X0>(unsigned int a1@<W8>)
{
  return (a1 >> 2) & 2;
}

uint64_t sub_180B62D70@<X0>(unsigned int a1@<W8>)
{
  unsigned int v1;
  int v2;

  v2 = (v1 >> 3) & 1;
  if (v2 == ((a1 >> 3) & 1))
    return 1;
  else
    return (2 * v2) ^ 2u;
}

void sub_180B62D98(uint64_t a1@<X1>, unsigned int a2@<W8>)
{
  unsigned int v2;
  uint64_t v3;
  llvm::APInt *v4;
  int v5;
  unsigned int v6;
  const unint64_t *v7;
  const unint64_t *v8;
  const unint64_t *v9;

  if (((v2 >> 3) & 1) == ((a2 >> 3) & 1))
  {
    if (*(_DWORD *)(v3 + 16) == *(_DWORD *)(a1 + 16))
    {
      v4 = (llvm::APInt *)(v3 + 8);
      v5 = *(_DWORD *)(*(_QWORD *)v3 + 8);
      if ((v5 - 64) <= 0xFFFFFF7F)
        v4 = *(llvm::APInt **)v4;
      v6 = *(_DWORD *)(*(_QWORD *)a1 + 8) - 64;
      v9 = *(const unint64_t **)(a1 + 8);
      v7 = (const unint64_t *)(a1 + 8);
      v8 = v9;
      if (v6 < 0xFFFFFF80)
        v7 = v8;
      llvm::APInt::tcCompare(v4, v7, (const unint64_t *)((v5 + 64) >> 6));
      LOBYTE(v2) = *(_BYTE *)(v3 + 20);
    }
    if ((v2 & 8) == 0)
      sub_180B62D3C();
  }
}

void llvm::detail::IEEEFloat::~IEEEFloat(llvm::detail::IEEEFloat *this)
{
  void *v1;

  if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
  {
    v1 = (void *)*((_QWORD *)this + 1);
    if (v1)
      operator delete[](v1);
  }
}

BOOL llvm::detail::IEEEFloat::bitwiseIsEqual(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  char *v10;
  char *v11;
  char *v12;

  if (this == a2)
    return 1;
  if (*(_QWORD *)this != *(_QWORD *)a2)
    return 0;
  v4 = *((unsigned __int8 *)this + 20);
  v5 = *((unsigned __int8 *)a2 + 20);
  if ((v4 & 7) != (v5 & 7) || ((v5 ^ v4) & 8) != 0)
    return 0;
  v2 = 1;
  if ((v4 & 7) == 0 || (v4 & 7) == 3)
    return v2;
  if ((v4 & 6) != 0 && *((_DWORD *)this + 4) != *((_DWORD *)a2 + 4))
    return 0;
  v6 = *(_DWORD *)(*(_QWORD *)this + 8);
  v7 = v6 - 64;
  v8 = (_QWORD *)((char *)this + 8);
  if ((v6 - 64) <= 0xFFFFFF7F)
    v8 = (_QWORD *)*v8;
  v9 = v6 + 64;
  v12 = (char *)*((_QWORD *)a2 + 1);
  v10 = (char *)a2 + 8;
  v11 = v12;
  if (v7 < 0xFFFFFF80)
    v10 = v11;
  return memcmp(v8, v10, (v9 >> 3) & 0x1FFFFFF8) == 0;
}

uint64_t llvm::detail::IEEEFloat::normalize(uint64_t a1, int a2, _BOOL4 a3)
{
  uint64_t result;
  llvm::APInt *v8;
  int v9;
  llvm::APInt *v10;
  int v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  llvm::APInt *v15;
  unsigned int v16;
  uint64_t v17;
  llvm::APInt *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  llvm::APInt *v26;
  unsigned int v27;
  unint64_t *v28;
  unsigned int v29;
  int v30;
  int v31;
  char v32;

  if ((*(_BYTE *)(a1 + 20) & 6) == 0 || (*(_BYTE *)(a1 + 20) & 7) == 3)
    return 0;
  v8 = (llvm::APInt *)(a1 + 8);
  v9 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v10 = (llvm::APInt *)(a1 + 8);
  if ((v9 - 64) <= 0xFFFFFF7F)
    v10 = *(llvm::APInt **)v8;
  v11 = llvm::APInt::tcMSB(v10, (const unint64_t *)((v9 + 64) >> 6));
  v12 = *(_DWORD **)a1;
  v13 = v11 + 1;
  if (v11 == -1)
  {
    v13 = 0;
LABEL_11:
    if (v12[4] != 1 || v12[5] != 1 || *(_DWORD *)(a1 + 16) != *v12)
      goto LABEL_39;
    v14 = v12[2];
    v15 = v8;
    if ((v14 - 64) <= 0xFFFFFF7F)
      v15 = *(llvm::APInt **)v8;
    v16 = v14 + 63;
    v17 = (v16 >> 6) - 1;
    if (v16 >> 6 != 1)
    {
      v18 = v15;
      v19 = (v16 >> 6) - 1;
      while (1)
      {
        v20 = *(_QWORD *)v18;
        v18 = (llvm::APInt *)((char *)v18 + 8);
        if (v20 != -1)
          goto LABEL_39;
        if (!--v19)
          goto LABEL_38;
      }
    }
    v17 = 0;
LABEL_38:
    if ((*((_QWORD *)v15 + v17) | (-1 << v16)) != 0xFFFFFFFFFFFFFFFFLL)
    {
LABEL_39:
      if (a3)
        __asm { BR              X10 }
      if (!v13)
      {
        v32 = *(_BYTE *)(a1 + 20) & 0xF8 | 3;
        *(_BYTE *)(a1 + 20) = v32;
        if (v12[5] == 2)
        {
          result = 0;
          *(_BYTE *)(a1 + 20) = v32 & 0xF3;
          return result;
        }
      }
      return 0;
    }
    return llvm::detail::IEEEFloat::handleOverflow((_DWORD **)a1, a2);
  }
  v21 = v12[2];
  v22 = *(_DWORD *)(a1 + 16);
  v23 = v22 + v13 - v21;
  if (v23 > *v12)
    return llvm::detail::IEEEFloat::handleOverflow((_DWORD **)a1, a2);
  v24 = v12[1];
  if (v23 >= v24)
    v25 = v13 - v21;
  else
    v25 = v24 - v22;
  if ((v25 & 0x80000000) == 0)
  {
    if (v25)
    {
      *(_DWORD *)(a1 + 16) = v25 + v22;
      v26 = v8;
      if ((v21 - 64) <= 0xFFFFFF7F)
        v26 = *(llvm::APInt **)v8;
      v27 = v21 + 64;
      v28 = (unint64_t *)((v21 + 64) >> 6);
      v29 = llvm::APInt::tcLSB(v26, v28);
      if (v29 >= v25)
      {
        llvm::APInt::tcShiftRight(v26, (unint64_t *)(v27 >> 6), v25);
        a3 = a3;
      }
      else
      {
        if (v29 + 1 == v25)
        {
          v30 = 2;
          v31 = 3;
        }
        else if ((v27 & 0xFFFFFFC0) >= v25
               && llvm::APInt::tcExtractBit(v26, (const unint64_t *)(v25 - 1)))
        {
          v31 = 3;
          v30 = 3;
        }
        else
        {
          v31 = 1;
          v30 = 1;
        }
        llvm::APInt::tcShiftRight(v26, v28, v25);
        if (a3)
          a3 = v31;
        else
          a3 = v30;
      }
      if (v13 >= v25)
        v13 -= v25;
      else
        v13 = 0;
      v12 = *(_DWORD **)a1;
    }
    goto LABEL_11;
  }
  if ((v21 - 64) <= 0xFFFFFF7F)
    v8 = *(llvm::APInt **)v8;
  llvm::APInt::tcShiftLeft(v8, (unint64_t *)((v21 + 64) >> 6), -v25);
  result = 0;
  *(_DWORD *)(a1 + 16) += v25;
  return result;
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t a1, uint64_t a2, llvm::APInt *a3)
{
  unsigned int v6;
  int v7;
  llvm::APInt **v8;
  llvm::APInt *v9;

  *(_QWORD *)a1 = a2;
  v6 = *(_DWORD *)(a2 + 8) + 64;
  if (v6 >= 0x80)
    *(_QWORD *)(a1 + 8) = operator new[]((v6 >> 3) & 0x1FFFFFF8);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF0 | 2;
  v7 = *(_DWORD *)(a2 + 8);
  v8 = (llvm::APInt **)(a1 + 8);
  v9 = (llvm::APInt *)(a1 + 8);
  if ((v7 - 64) <= 0xFFFFFF7F)
    v9 = *v8;
  llvm::APInt::tcSet(v9, 0, (v7 + 64) >> 6);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8) - 1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) - 64) <= 0xFFFFFF7F)
    v8 = (llvm::APInt **)*v8;
  *v8 = a3;
  llvm::detail::IEEEFloat::normalize(a1, 1, 0);
  return a1;
}

void llvm::detail::IEEEFloat::makeZero(llvm::detail::IEEEFloat *this, int a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  llvm::APInt *v6;

  v2 = *((_BYTE *)this + 20) & 0xF0;
  if (a2)
    v3 = 8;
  else
    v3 = 0;
  *((_BYTE *)this + 20) = v2 | v3 | 3;
  v4 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 20) == 2)
    *((_BYTE *)this + 20) = v2 | 3;
  v5 = *(_DWORD *)(v4 + 8);
  *((_DWORD *)this + 4) = *(_DWORD *)(v4 + 4) - 1;
  v6 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if ((v5 - 64) <= 0xFFFFFF7F)
    v6 = *(llvm::APInt **)v6;
  llvm::APInt::tcSet(v6, 0, (v5 + 64) >> 6);
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  llvm::APInt *v6;

  *(_QWORD *)a1 = a2;
  v4 = *(_DWORD *)(a2 + 8) + 64;
  if (v4 >= 0x80)
    *(_QWORD *)(a1 + 8) = operator new[]((v4 >> 3) & 0x1FFFFFF8);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF0 | 3;
  v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 4) - 1;
  v6 = (llvm::APInt *)(a1 + 8);
  if ((v5 - 64) <= 0xFFFFFF7F)
    v6 = *(llvm::APInt **)v6;
  llvm::APInt::tcSet(v6, 0, (v5 + 64) >> 6);
  return a1;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  char v7;
  int v8;
  _BOOL4 v10;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  v5 = *(_DWORD *)(v4 + 8) + 64;
  if (v5 >= 0x80)
    *((_QWORD *)this + 1) = operator new[]((v5 >> 3) & 0x1FFFFFF8);
  v6 = *((_BYTE *)this + 20) & 0xF7 | *((_BYTE *)a2 + 20) & 8;
  *((_BYTE *)this + 20) = v6;
  v7 = *((_BYTE *)a2 + 20);
  v8 = v7 & 7;
  *((_BYTE *)this + 20) = v6 & 0xF8 | v7 & 7;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v10 = (v7 & 6) != 0 && v8 != 3;
  if (v8 == 1 || v10)
  {
    v12 = *(_DWORD *)(v4 + 8);
    v13 = (_QWORD *)((char *)this + 8);
    if ((v12 - 64) <= 0xFFFFFF7F)
      v13 = (_QWORD *)*v13;
    v14 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
    v17 = (unint64_t *)*((_QWORD *)a2 + 1);
    v16 = (unint64_t *)((char *)a2 + 8);
    v15 = v17;
    if (v14 >= 0xFFFFFF80)
      v18 = v16;
    else
      v18 = v15;
    llvm::APInt::tcAssign((uint64_t)v13, v18, (const unint64_t *)((v12 + 64) >> 6));
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::IEEEFloat(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &llvm::semBogus;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  v2 = *(_BYTE *)(result + 20) & 0xF8 | *(_BYTE *)(a2 + 20) & 7;
  *(_BYTE *)(result + 20) = v2;
  *(_BYTE *)(result + 20) = v2 & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
  *(_QWORD *)a2 = &llvm::semBogus;
  return result;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  unint64_t *v9;
  llvm::APInt *v10;
  unint64_t **v11;
  unint64_t *v12;
  unint64_t *v13;
  void *p_p;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  __int128 *v20;
  uint64_t v21;
  llvm::APInt *v22;
  int v23;
  unsigned int v24;
  char v25;
  int v26;
  _BOOL4 v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t *v32;
  int v33;
  llvm::APInt *v34;
  unint64_t *v35;
  unsigned int v36;
  unint64_t *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  __int128 *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t **v46;
  _DWORD v47[3];
  void *__p;
  int v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)*a1 + 2);
  v7 = 2 * v6;
  v8 = 2 * v6 + 64;
  v9 = (unint64_t *)(v8 >> 6);
  if (v8 < 0x140)
  {
    v10 = (llvm::APInt *)&v54;
    v11 = a1 + 1;
    v12 = (unint64_t *)(a1 + 1);
    if (v6 - 64 > 0xFFFFFF7F)
      goto LABEL_6;
    goto LABEL_5;
  }
  v10 = (llvm::APInt *)operator new[]((8 * (_DWORD)v9));
  v11 = a1 + 1;
  v12 = (unint64_t *)(a1 + 1);
  if (v6 - 64 <= 0xFFFFFF7F)
LABEL_5:
    v12 = *v11;
LABEL_6:
  v46 = v11;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) - 64) >= 0xFFFFFF80)
    v13 = (unint64_t *)(a2 + 8);
  else
    v13 = *(unint64_t **)(a2 + 8);
  llvm::APInt::tcFullMultiply(v10, v12, v13, (const unint64_t *)((v6 + 64) >> 6), (const unint64_t *)((v6 + 64) >> 6));
  p_p = (void *)llvm::APInt::tcMSB(v10, (const unint64_t *)(v8 >> 6));
  v15 = (_DWORD)p_p + 1;
  v16 = *(_DWORD *)(a2 + 16) + *((_DWORD *)a1 + 4) + 2;
  *((_DWORD *)a1 + 4) = v16;
  if ((*(_BYTE *)(a3 + 20) & 7) == 3)
  {
    v17 = 0;
    *((_DWORD *)a1 + 4) = v16 + ~v6;
    v18 = v15 - v6;
    if (v15 <= v6)
      goto LABEL_54;
    goto LABEL_41;
  }
  v45 = v12;
  v19 = v7 + 64;
  v20 = (__int128 *)*a1;
  v43 = (__int128 *)*a1;
  v44 = a1[1];
  if (v7 != v15)
  {
    llvm::APInt::tcShiftLeft(v10, v9, v7 - v15);
    *((_DWORD *)a1 + 4) -= v7 - v15;
    v20 = (__int128 *)*a1;
  }
  v21 = *((_QWORD *)v20 + 2);
  v51 = *v20;
  v52 = v21;
  DWORD2(v51) = (2 * v6) | 1;
  v22 = v10;
  if ((_DWORD)v9 == 1)
    v22 = *(llvm::APInt **)v10;
  *a1 = (unint64_t *)&v51;
  a1[1] = (unint64_t *)v22;
  *(_QWORD *)&v47[1] = *(_QWORD *)a3;
  v23 = *(_DWORD *)(*(_QWORD *)&v47[1] + 8);
  v24 = v23 + 64;
  v8 = v19;
  if ((v23 + 64) >= 0x80)
  {
    p_p = operator new[]((v24 >> 3) & 0x1FFFFFF8);
    __p = p_p;
  }
  v25 = *(_BYTE *)(a3 + 20);
  v26 = v25 & 7;
  v50 = v25 & 0xF;
  v49 = *(_DWORD *)(a3 + 16);
  v28 = (v25 & 6) != 0 && v26 != 3;
  v12 = v45;
  if (v26 == 1 || v28)
  {
    if ((v23 - 64) >= 0xFFFFFF80)
      p_p = &__p;
    v31 = *(unint64_t **)(a3 + 8);
    v30 = (unint64_t *)(a3 + 8);
    v29 = v31;
    if ((v23 - 64) >= 0xFFFFFF80)
      v32 = v30;
    else
      v32 = v29;
    llvm::APInt::tcAssign((uint64_t)p_p, v32, (const unint64_t *)(v24 >> 6));
  }
  llvm::detail::IEEEFloat::convert((uint64_t)&v47[1], (uint64_t)&v51, 0, &v53);
  ++v49;
  v33 = *(_DWORD *)(*(_QWORD *)&v47[1] + 8);
  if ((v33 - 64) >= 0xFFFFFF80)
    v34 = (llvm::APInt *)&__p;
  else
    v34 = (llvm::APInt *)__p;
  v35 = (unint64_t *)((v33 + 64) >> 6);
  llvm::APInt::tcLSB(v34, v35);
  llvm::APInt::tcShiftRight(v34, v35, 1u);
  v17 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)&v47[1], 0);
  if ((_DWORD)v9 == 1)
    *(_QWORD *)v10 = *v46;
  *a1 = (unint64_t *)v43;
  a1[1] = v44;
  v15 = llvm::APInt::tcMSB(v10, v9) + 1;
  if ((*(_DWORD *)(*(_QWORD *)&v47[1] + 8) - 64) <= 0xFFFFFF7F && __p)
    operator delete[](__p);
  *((_DWORD *)a1 + 4) += ~v6;
  v18 = v15 - v6;
  if (v15 > v6)
  {
LABEL_41:
    v36 = v15 + 63;
    v37 = (unint64_t *)((v15 + 63) >> 6);
    v38 = llvm::APInt::tcLSB(v10, v37);
    if (v38 >= v18)
    {
      llvm::APInt::tcShiftRight(v10, (unint64_t *)(v36 >> 6), v18);
      v17 = (_DWORD)v17 != 0;
    }
    else
    {
      v39 = v8;
      if (v38 + 1 == v18)
      {
        v40 = 2;
        v41 = 3;
      }
      else if ((v36 & 0xFFFFFFC0) >= v18
             && llvm::APInt::tcExtractBit(v10, (const unint64_t *)(v18 - 1)))
      {
        v41 = 3;
        v40 = 3;
      }
      else
      {
        v41 = 1;
        v40 = 1;
      }
      llvm::APInt::tcShiftRight(v10, v37, v18);
      if ((_DWORD)v17)
        v17 = v41;
      else
        v17 = v40;
      v8 = v39;
    }
    *((_DWORD *)a1 + 4) += v18;
  }
LABEL_54:
  llvm::APInt::tcAssign((uint64_t)v12, (unint64_t *)v10, (const unint64_t *)((v6 + 64) >> 6));
  if (v8 >= 0x140)
    operator delete[](v10);
  return v17;
}

uint64_t llvm::detail::IEEEFloat::convert(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  llvm::APInt *v11;
  char v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  const unint64_t *v17;
  signed int v18;
  uint64_t v19;
  unint64_t *v20;
  llvm::APInt *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  llvm::APInt *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  _BYTE *v33;
  int v34;
  int v35;
  llvm::APInt *v36;
  int v37;
  _BOOL4 v39;
  unint64_t *v40;
  void *v41;
  int v43;
  _BOOL4 v45;
  unsigned int v46;
  _BYTE *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  unsigned int v51;
  int v52;
  BOOL v53;
  _BOOL4 v54;
  llvm::APInt *v55;
  int v56;
  uint64_t result;
  int v58;
  char v59;
  int v60;
  _QWORD *v61;
  int v62;
  _BYTE *v63;
  char v64;
  _BOOL4 v65;

  v8 = *(_QWORD *)a1;
  if ((*(_BYTE *)(a1 + 20) & 7) == 1 && *(_DWORD *)(v8 + 16) != 1)
  {
    v10 = *(_DWORD *)(v8 + 8);
    v11 = (llvm::APInt *)(a1 + 8);
    if ((v10 - 64) <= 0xFFFFFF7F)
      v11 = *(llvm::APInt **)v11;
    v65 = llvm::APInt::tcExtractBit(v11, (const unint64_t *)(v10 - 2)) == 0;
    v9 = *(_QWORD *)a1;
  }
  else
  {
    v65 = 0;
    v9 = *(_QWORD *)a1;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a2 + 8);
  v14 = v13 + 64;
  v15 = *(_DWORD *)(v9 + 8);
  v16 = v15 + 64;
  v17 = (const unint64_t *)((v15 + 64) >> 6);
  v18 = v13 - *(_DWORD *)(v8 + 8);
  if ((_UNKNOWN *)a2 == &llvm::semX87DoubleExtended || (_UNKNOWN *)v8 != &llvm::semX87DoubleExtended)
  {
LABEL_16:
    v64 = v12;
    v20 = (unint64_t *)(v14 >> 6);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_19;
  }
  if ((*(_BYTE *)(a1 + 20) & 7) != 1)
    goto LABEL_18;
  if ((v15 - 64) > 0xFFFFFF7F)
  {
    v19 = *(_QWORD *)(a1 + 8);
    if (v19 < 0)
      goto LABEL_14;
LABEL_15:
    v12 = 1;
    goto LABEL_16;
  }
  v19 = **(_QWORD **)(a1 + 8);
  if ((v19 & 0x8000000000000000) == 0)
    goto LABEL_15;
LABEL_14:
  if ((v19 & 0x4000000000000000) == 0)
    goto LABEL_15;
LABEL_18:
  v64 = 0;
  v20 = (unint64_t *)(v14 >> 6);
  if ((v18 & 0x80000000) == 0)
    goto LABEL_42;
LABEL_19:
  if ((*(_BYTE *)(a1 + 20) & 6) != 0 && (*(_BYTE *)(a1 + 20) & 7) != 3)
  {
    v21 = (llvm::APInt *)(a1 + 8);
    if ((v15 - 64) <= 0xFFFFFF7F)
      v21 = *(llvm::APInt **)v21;
    v22 = llvm::APInt::tcMSB(v21, (const unint64_t *)(v16 >> 6));
    v23 = v22 + 1 - *(_DWORD *)(v8 + 8);
    v24 = *(_DWORD *)(a1 + 16);
    v25 = *(_DWORD *)(a2 + 4);
    if (v24 + v23 < v25)
      v23 = v25 - v24;
    if (v23 <= v18)
      v23 = v18;
    if (v23 < 0)
    {
      v18 -= v23;
      *(_DWORD *)(a1 + 16) = v23 + v24;
      if ((v18 & 0x80000000) == 0)
        goto LABEL_42;
    }
    else if (v22 + 1 <= -v18)
    {
      v26 = v22 + v18;
      v18 = -v22;
      *(_DWORD *)(a1 + 16) = v26 + v24;
      if ((-v22 & 0x80000000) == 0)
        goto LABEL_42;
    }
  }
  v27 = *(_BYTE *)(a1 + 20) & 7;
  if ((*(_BYTE *)(a1 + 20) & 6) != 0 && v27 != 3)
  {
    v28 = *(_QWORD *)a1;
    goto LABEL_35;
  }
  if (v27 != 1 || (v28 = *(_QWORD *)a1, *(_DWORD *)(*(_QWORD *)a1 + 16) == 1))
  {
LABEL_42:
    v32 = 0;
    if (v20 <= v17)
      goto LABEL_63;
LABEL_43:
    v33 = a4;
    v34 = v32;
    v35 = a3;
    v36 = (llvm::APInt *)operator new[]((8 * (_DWORD)v20));
    llvm::APInt::tcSet(v36, 0, v20);
    v37 = *(_BYTE *)(a1 + 20) & 7;
    v39 = (*(_BYTE *)(a1 + 20) & 6) != 0 && v37 != 3;
    if (v37 == 1 || v39)
    {
      v40 = (unint64_t *)(a1 + 8);
      if ((*(_DWORD *)(*(_QWORD *)a1 + 8) - 64) <= 0xFFFFFF7F)
        v40 = (unint64_t *)*v40;
      llvm::APInt::tcAssign((uint64_t)v36, v40, v17);
    }
    if ((*(_DWORD *)(*(_QWORD *)a1 + 8) - 64) <= 0xFFFFFF7F)
    {
      v41 = *(void **)(a1 + 8);
      if (v41)
        operator delete[](v41);
    }
    *(_QWORD *)(a1 + 8) = v36;
    a3 = v35;
    v32 = v34;
    a4 = v33;
    goto LABEL_83;
  }
LABEL_35:
  v62 = a3;
  v29 = (llvm::APInt *)(a1 + 8);
  v63 = a4;
  if ((*(_DWORD *)(v28 + 8) - 64) <= 0xFFFFFF7F)
    v29 = *(llvm::APInt **)v29;
  v30 = -v18;
  v31 = llvm::APInt::tcLSB(v29, (const unint64_t *)(v16 >> 6));
  v32 = 0;
  if (v31 < -v18)
  {
    if (v31 + 1 == v30)
    {
      v32 = 2;
    }
    else if ((v16 & 0xFFFFFFC0) >= v30
           && llvm::APInt::tcExtractBit(v29, (const unint64_t *)~v18))
    {
      v32 = 3;
    }
    else
    {
      v32 = 1;
    }
  }
  llvm::APInt::tcShiftRight(v29, (unint64_t *)(v16 >> 6), -v18);
  a4 = v63;
  a3 = v62;
  if (v20 > v17)
    goto LABEL_43;
LABEL_63:
  if ((_DWORD)v20 == 1 && (_DWORD)v17 != 1)
  {
    v43 = *(_BYTE *)(a1 + 20) & 7;
    v45 = (*(_BYTE *)(a1 + 20) & 6) != 0 && v43 != 3;
    v46 = *(_DWORD *)(*(_QWORD *)a1 + 8) - 64;
    if (v43 == 1 || v45)
    {
      v49 = (_QWORD *)(a1 + 8);
      v47 = a4;
      if (v46 <= 0xFFFFFF7F)
        v49 = (_QWORD *)*v49;
      v48 = (_QWORD *)*v49;
      if (v46 > 0xFFFFFF7F)
        goto LABEL_82;
    }
    else
    {
      v47 = a4;
      v48 = 0;
      if (v46 > 0xFFFFFF7F)
      {
LABEL_82:
        *(_QWORD *)(a1 + 8) = v48;
        a4 = v47;
        goto LABEL_83;
      }
    }
    v50 = *(void **)(a1 + 8);
    if (v50)
      operator delete[](v50);
    goto LABEL_82;
  }
LABEL_83:
  *(_QWORD *)a1 = a2;
  v51 = *(unsigned __int8 *)(a1 + 20);
  if (v18 >= 1)
  {
    v52 = v51 & 7;
    v53 = (v51 & 6) == 0 || v52 == 3;
    v54 = !v53;
    if (v52 == 1 || v54)
    {
      v55 = (llvm::APInt *)(a1 + 8);
      if ((*(_DWORD *)(a2 + 8) - 64) <= 0xFFFFFF7F)
        v55 = *(llvm::APInt **)v55;
      llvm::APInt::tcShiftLeft(v55, v20, v18);
      v51 = *(unsigned __int8 *)(a1 + 20);
    }
  }
  v56 = v51 & 7;
  if ((v51 & 6) != 0 && v56 != 3)
  {
    result = llvm::detail::IEEEFloat::normalize(a1, a3, v32);
    *a4 = (_DWORD)result != 0;
    return result;
  }
  if ((v51 & 7) == 0)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 16) == 1)
    {
      llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (v51 >> 3) & 1, 0);
      *a4 = 1;
      return 16;
    }
    goto LABEL_110;
  }
  if (v56 == 3)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) == 2)
    {
      v58 = (*(_DWORD *)(v8 + 20) != 2) & (v51 >> 3);
      *a4 = v58;
      if (v58)
        result = 16;
      else
        result = 0;
      *(_BYTE *)(a1 + 20) &= ~8u;
      return result;
    }
LABEL_110:
    result = 0;
    *a4 = 0;
    return result;
  }
  if (v56 != 1)
    goto LABEL_110;
  if (*(_DWORD *)(*(_QWORD *)a1 + 16) == 1)
  {
    *a4 = *(_DWORD *)(v8 + 16) != 1;
    llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (*(unsigned __int8 *)(a1 + 20) >> 3) & 1, 0);
    return v65;
  }
  else
  {
    if (*(_DWORD *)(v8 + 20) == 2 && *(_DWORD *)(*(_QWORD *)a1 + 20) != 2)
      llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, 0, 0);
    if (v32)
      v59 = 1;
    else
      v59 = v64;
    *a4 = v59;
    if ((v64 & 1) == 0 && *(_UNKNOWN **)a1 == &llvm::semX87DoubleExtended)
      llvm::APInt::tcSetBit(*(_QWORD *)(a1 + 8), (unint64_t *)0x3F);
    if (v65)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 16) == 1)
      {
        return 1;
      }
      else
      {
        v60 = *(_DWORD *)(*(_QWORD *)a1 + 8);
        v61 = (_QWORD *)(a1 + 8);
        if ((v60 - 64) <= 0xFFFFFF7F)
          v61 = (_QWORD *)*v61;
        llvm::APInt::tcSetBit((uint64_t)v61, (unint64_t *)(v60 - 2));
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2, int a3)
{
  llvm::detail::IEEEFloat *v4;
  int v5;
  int *v6;
  unsigned __int8 v7;
  int v8;
  signed int v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  llvm::APInt *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  _BOOL4 v26;
  int v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t *v32;
  int v33;
  int v34;
  unint64_t v35;
  llvm::APInt *v36;
  uint64_t v37;
  int v38;
  unint64_t *v39;
  unsigned int v40;
  int v41;
  llvm::APInt *v42;
  int v43;
  unint64_t *v44;
  unsigned int v45;
  const unint64_t *v46;
  unsigned int v47;
  int v48;
  llvm::APInt *v49;
  llvm::APInt *v50;
  int v51;
  unint64_t *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  llvm::APInt *v56;
  int *v57;
  int v58;
  unint64_t *v59;
  unsigned int v60;
  llvm::APInt *v61;
  uint64_t v62;
  int v63;
  unint64_t *v64;
  int v65;
  unsigned int v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t *v70;
  llvm::APInt *v71;
  int v72;
  int v73;
  llvm::APInt *p_p;
  llvm::APInt *v75;
  int v76;
  const unint64_t *v77;
  int v78;
  int v79;
  llvm::APInt *v80;
  _QWORD *v81;
  unint64_t *v82;
  int v83;
  unint64_t *v84;
  unsigned int v85;
  uint64_t v87;
  uint64_t v88;
  void *__p;
  int v90;
  char v91;

  v4 = this;
  v6 = (int *)((char *)this + 16);
  v5 = *((_DWORD *)this + 4);
  v7 = *((_BYTE *)a2 + 20);
  v8 = *((_DWORD *)a2 + 4);
  v9 = v5 - v8;
  if ((((((v7 ^ *((_BYTE *)this + 20)) & 8) == 0) ^ a3) & 1) == 0)
  {
    v22 = *(_QWORD *)a2;
    v88 = *(_QWORD *)a2;
    v23 = *(_DWORD *)(*(_QWORD *)a2 + 8) + 64;
    if (v23 >= 0x80)
    {
      this = (llvm::detail::IEEEFloat *)operator new[]((v23 >> 3) & 0x1FFFFFF8);
      __p = this;
    }
    v24 = v7 & 7;
    v91 = v7 & 0xF;
    v90 = v8;
    v26 = (v7 & 6) != 0 && v24 != 3;
    if (v24 == 1 || v26)
    {
      v28 = *(_DWORD *)(v22 + 8);
      if ((v28 - 64) >= 0xFFFFFF80)
        this = (llvm::detail::IEEEFloat *)&__p;
      v31 = (unint64_t *)*((_QWORD *)a2 + 1);
      v30 = (unint64_t *)((char *)a2 + 8);
      v29 = v31;
      if ((v28 - 64) >= 0xFFFFFF80)
        v32 = v30;
      else
        v32 = v29;
      llvm::APInt::tcAssign((uint64_t)this, v32, (const unint64_t *)((v28 + 64) >> 6));
    }
    if (v5 == v8)
    {
      v33 = 0;
      v34 = *v6 - v90;
      if (*v6 != v90)
        goto LABEL_45;
    }
    else
    {
      v40 = v9 - 1;
      if (v9 < 1)
      {
        v54 = ~v9;
        *((_DWORD *)v4 + 4) += ~v9;
        v55 = *(_DWORD *)(*(_QWORD *)v4 + 8);
        v56 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
        if ((v55 - 64) <= 0xFFFFFF7F)
          v56 = *(llvm::APInt **)v56;
        v57 = &v90;
        v58 = v55 + 64;
        v59 = (unint64_t *)((v55 + 64) >> 6);
        v60 = llvm::APInt::tcLSB(v56, v59);
        if (v60 >= v54)
        {
          v33 = 0;
        }
        else if (v60 + 1 == v54)
        {
          v33 = 2;
        }
        else if ((v58 & 0xFFFFFFC0) >= v54
               && llvm::APInt::tcExtractBit(v56, (const unint64_t *)(-2 - v9)))
        {
          v33 = 3;
        }
        else
        {
          v33 = 1;
        }
        llvm::APInt::tcShiftRight(v56, v59, ~v9);
        v73 = *(_DWORD *)(v88 + 8);
        if ((v73 - 64) >= 0xFFFFFF80)
          p_p = (llvm::APInt *)&__p;
        else
          p_p = (llvm::APInt *)__p;
        llvm::APInt::tcShiftLeft(p_p, (unint64_t *)((v73 + 64) >> 6), 1u);
      }
      else
      {
        v90 += v40;
        v41 = *(_DWORD *)(v88 + 8);
        if ((v41 - 64) >= 0xFFFFFF80)
          v42 = (llvm::APInt *)&__p;
        else
          v42 = (llvm::APInt *)__p;
        v43 = v41 + 64;
        v44 = (unint64_t *)((v41 + 64) >> 6);
        v45 = llvm::APInt::tcLSB(v42, v44);
        if (v45 >= v40)
        {
          v33 = 0;
        }
        else
        {
          v46 = (const unint64_t *)(v9 - 2);
          if (v45 == (_DWORD)v46)
          {
            v33 = 2;
          }
          else if ((v43 & 0xFFFFFFC0) >= v40 && llvm::APInt::tcExtractBit(v42, v46))
          {
            v33 = 3;
          }
          else
          {
            v33 = 1;
          }
        }
        llvm::APInt::tcShiftRight(v42, v44, v9 - 1);
        v71 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
        v72 = *(_DWORD *)(*(_QWORD *)v4 + 8);
        if ((v72 - 64) <= 0xFFFFFF7F)
          v71 = *(llvm::APInt **)v71;
        llvm::APInt::tcShiftLeft(v71, (unint64_t *)((v72 + 64) >> 6), 1u);
        v57 = v6;
      }
      --*v57;
      v34 = *v6 - v90;
      if (*v6 != v90)
      {
LABEL_45:
        v35 = v33 != 0;
        if ((v34 & 0x80000000) == 0)
        {
LABEL_46:
          v37 = *(_QWORD *)v4;
          v36 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
          v38 = *(_DWORD *)(v37 + 8);
          if ((v38 - 64) <= 0xFFFFFF7F)
            v36 = *(llvm::APInt **)v36;
          if ((*(_DWORD *)(v88 + 8) - 64) >= 0xFFFFFF80)
            v39 = (unint64_t *)&__p;
          else
            v39 = (unint64_t *)__p;
          llvm::APInt::tcSubtract(v36, v39, v35, (v38 + 64) >> 6);
          goto LABEL_128;
        }
LABEL_116:
        v79 = *(_DWORD *)(v88 + 8);
        if ((v79 - 64) >= 0xFFFFFF80)
          v80 = (llvm::APInt *)&__p;
        else
          v80 = (llvm::APInt *)__p;
        v81 = (_QWORD *)((char *)v4 + 8);
        if ((*(_DWORD *)(*(_QWORD *)v4 + 8) - 64) >= 0xFFFFFF80)
          v82 = (unint64_t *)((char *)v4 + 8);
        else
          v82 = (unint64_t *)*((_QWORD *)v4 + 1);
        llvm::APInt::tcSubtract(v80, v82, v35, (v79 + 64) >> 6);
        v83 = *(_DWORD *)(*(_QWORD *)v4 + 8);
        if ((v83 - 64) <= 0xFFFFFF7F)
          v81 = (_QWORD *)*v81;
        if ((*(_DWORD *)(v88 + 8) - 64) >= 0xFFFFFF80)
          v84 = (unint64_t *)&__p;
        else
          v84 = (unint64_t *)__p;
        llvm::APInt::tcAssign((uint64_t)v81, v84, (const unint64_t *)((v83 + 64) >> 6));
        *((_BYTE *)v4 + 20) ^= 8u;
LABEL_128:
        if (v33 == 3)
          v85 = 1;
        else
          v85 = v33;
        if (v33 == 1)
          v21 = 3;
        else
          v21 = v85;
        if ((*(_DWORD *)(v88 + 8) - 64) > 0xFFFFFF7F)
          return v21;
        goto LABEL_135;
      }
    }
    v75 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
    v76 = *(_DWORD *)(*(_QWORD *)v4 + 8);
    if ((v76 - 64) <= 0xFFFFFF7F)
      v75 = *(llvm::APInt **)v75;
    if ((*(_DWORD *)(v88 + 8) - 64) >= 0xFFFFFF80)
      v77 = (const unint64_t *)&__p;
    else
      v77 = (const unint64_t *)__p;
    v78 = llvm::APInt::tcCompare(v75, v77, (const unint64_t *)((v76 + 64) >> 6));
    v35 = v33 != 0;
    if ((v78 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_116;
  }
  if (v9 >= 1)
  {
    v87 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    v11 = v10 + 64;
    if ((v10 + 64) >= 0x80)
    {
      this = (llvm::detail::IEEEFloat *)operator new[]((v11 >> 3) & 0x1FFFFFF8);
      __p = this;
    }
    v12 = v7 & 7;
    v91 = v7 & 0xF;
    v90 = v8;
    v14 = (v7 & 6) != 0 && v12 != 3;
    if (v12 == 1 || v14)
    {
      if ((v10 - 64) >= 0xFFFFFF80)
        this = (llvm::detail::IEEEFloat *)&__p;
      v17 = (unint64_t *)*((_QWORD *)a2 + 1);
      v16 = (unint64_t *)((char *)a2 + 8);
      v15 = v17;
      if ((v10 - 64) >= 0xFFFFFF80)
        v18 = v16;
      else
        v18 = v15;
      llvm::APInt::tcAssign((uint64_t)this, v18, (const unint64_t *)(v11 >> 6));
      v8 = v90;
      this = (llvm::detail::IEEEFloat *)__p;
      v10 = *(_DWORD *)(v87 + 8);
      v11 = v10 + 64;
    }
    v90 = v8 + v9;
    if ((v10 - 64) >= 0xFFFFFF80)
      v19 = (llvm::APInt *)&__p;
    else
      v19 = this;
    v20 = llvm::APInt::tcLSB(v19, (const unint64_t *)(v11 >> 6));
    if (v20 >= v9)
    {
      v21 = 0;
    }
    else if (v20 + 1 == v9)
    {
      v21 = 2;
    }
    else if ((v11 & 0xFFFFFFC0) >= v9
           && llvm::APInt::tcExtractBit(v19, (const unint64_t *)(v9 - 1)))
    {
      v21 = 3;
    }
    else
    {
      v21 = 1;
    }
    llvm::APInt::tcShiftRight(v19, (unint64_t *)(v11 >> 6), v9);
    v62 = *(_QWORD *)v4;
    v61 = (llvm::detail::IEEEFloat *)((char *)v4 + 8);
    v63 = *(_DWORD *)(v62 + 8);
    if ((v63 - 64) <= 0xFFFFFF7F)
      v61 = *(llvm::APInt **)v61;
    if ((*(_DWORD *)(v87 + 8) - 64) >= 0xFFFFFF80)
      v64 = (unint64_t *)&__p;
    else
      v64 = (unint64_t *)__p;
    llvm::APInt::tcAdd(v61, v64, 0, (v63 + 64) >> 6);
    if ((*(_DWORD *)(v87 + 8) - 64) > 0xFFFFFF7F)
      return v21;
LABEL_135:
    if (__p)
      operator delete[](__p);
    return v21;
  }
  v47 = v8 - v5;
  *((_DWORD *)this + 4) = v8;
  v48 = *(_DWORD *)(*(_QWORD *)this + 8);
  v49 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  v50 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if ((v48 - 64) <= 0xFFFFFF7F)
    v50 = *(llvm::APInt **)v49;
  v51 = v48 + 64;
  v52 = (unint64_t *)((v48 + 64) >> 6);
  v53 = llvm::APInt::tcLSB(v50, v52);
  if (v53 >= v47)
  {
    v21 = 0;
  }
  else if (v53 + 1 == v47)
  {
    v21 = 2;
  }
  else if ((v51 & 0xFFFFFFC0) >= v47
         && llvm::APInt::tcExtractBit(v50, (const unint64_t *)~v9))
  {
    v21 = 3;
  }
  else
  {
    v21 = 1;
  }
  llvm::APInt::tcShiftRight(v50, v52, -v9);
  v65 = *(_DWORD *)(*(_QWORD *)v4 + 8);
  if ((v65 - 64) <= 0xFFFFFF7F)
    v49 = *(llvm::APInt **)v49;
  v66 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
  v69 = (unint64_t *)*((_QWORD *)a2 + 1);
  v68 = (unint64_t *)((char *)a2 + 8);
  v67 = v69;
  if (v66 >= 0xFFFFFF80)
    v70 = v68;
  else
    v70 = v67;
  llvm::APInt::tcAdd(v49, v70, 0, (v65 + 64) >> 6);
  return v21;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(unint64_t **this, const llvm::detail::IEEEFloat *a2)
{
  unint64_t **v3;
  unint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v9;
  void *__p;
  int v11;
  char v12;

  v3 = this;
  v4 = *this;
  v9 = v4;
  v5 = *((_DWORD *)v4 + 2);
  v6 = v5 + 64;
  if ((v5 + 64) >= 0x80)
  {
    this = (unint64_t **)operator new[]((v6 >> 3) & 0x1FFFFFF8);
    __p = this;
  }
  v12 = 3;
  v11 = *((_DWORD *)v4 + 1) - 1;
  if ((v5 - 64) >= 0xFFFFFF80)
    this = (unint64_t **)&__p;
  llvm::APInt::tcSet((llvm::APInt *)this, 0, v6 >> 6);
  v7 = llvm::detail::IEEEFloat::multiplySignificand(v3, (uint64_t)a2, (uint64_t)&v9);
  if ((*((_DWORD *)v9 + 2) - 64) <= 0xFFFFFF7F && __p)
    operator delete[](__p);
  return v7;
}

uint64_t llvm::detail::IEEEFloat::divideSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  char *v4;
  unint64_t *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  llvm::APInt *v9;
  llvm::APInt *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  llvm::APInt *v18;
  llvm::APInt *v19;
  llvm::APInt *v20;
  char *v21;
  BOOL v23;
  BOOL v25;
  BOOL v27;
  BOOL v29;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  _OWORD *v37;
  __int128 v38;
  _OWORD *v39;
  _QWORD v41[5];

  v41[4] = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 8;
  LODWORD(v5) = *(_DWORD *)(*(_QWORD *)this + 8);
  if (((_DWORD)v5 - 64) <= 0xFFFFFF7F)
    v4 = *(char **)v4;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) - 64) >= 0xFFFFFF80)
    v6 = (char *)a2 + 8;
  else
    v6 = (char *)*((_QWORD *)a2 + 1);
  v7 = (_DWORD)v5 + 64;
  v8 = ((_DWORD)v5 + 64) >> 6;
  if (((_DWORD)v5 + 64) < 0xC0)
  {
    v9 = (llvm::APInt *)v41;
    v10 = (llvm::APInt *)&v41[v8];
    if (v5 > 0xFFFFFFBF)
      goto LABEL_15;
  }
  else
  {
    v9 = (llvm::APInt *)operator new[](16 * v8);
    v10 = (llvm::APInt *)((char *)v9 + 8 * v8);
  }
  if (v8 <= 1)
    v11 = 1;
  else
    v11 = v8;
  if (v11 < 0x14)
  {
    for (i = 0; i != v11; ++i)
    {
LABEL_14:
      v13 = 8 * i;
      *(_QWORD *)((char *)v9 + v13) = *(_QWORD *)&v4[8 * i];
      *(_QWORD *)((char *)v10 + v13) = *(_QWORD *)&v6[8 * i];
      *(_QWORD *)&v4[v13] = 0;
    }
    goto LABEL_15;
  }
  i = 0;
  v18 = (llvm::APInt *)((char *)v9 + 8 * v11);
  v19 = (llvm::APInt *)((char *)v10 + 8 * v11);
  v20 = (llvm::APInt *)&v4[8 * v11];
  v21 = &v6[8 * v11];
  v23 = v9 < v20 && v4 < (char *)v18;
  v25 = v9 < (llvm::APInt *)v21 && v6 < (char *)v18;
  v27 = v10 < v20 && v4 < (char *)v19;
  v29 = v10 < (llvm::APInt *)v21 && v6 < (char *)v19;
  v31 = v4 < v21 && v6 < (char *)v20;
  if (v10 < v18 && v9 < v19)
    goto LABEL_14;
  if (v23)
    goto LABEL_14;
  if (v25)
    goto LABEL_14;
  if (v27)
    goto LABEL_14;
  if (v29)
    goto LABEL_14;
  if (v31)
    goto LABEL_14;
  i = v11 & 0x3FFFFFC;
  v33 = 16;
  v34 = i;
  do
  {
    v35 = &v4[v33];
    v36 = *(_OWORD *)&v4[v33];
    v37 = (_OWORD *)((char *)v9 + v33);
    *(v37 - 1) = *(_OWORD *)&v4[v33 - 16];
    *v37 = v36;
    v38 = *(_OWORD *)&v6[v33];
    v39 = (_OWORD *)((char *)v10 + v33);
    *(v39 - 1) = *(_OWORD *)&v6[v33 - 16];
    *v39 = v38;
    *((_OWORD *)v35 - 1) = 0uLL;
    *(_OWORD *)v35 = 0uLL;
    v33 += 32;
    v34 -= 4;
  }
  while (v34);
  if (i != v11)
    goto LABEL_14;
LABEL_15:
  *((_DWORD *)this + 4) -= *((_DWORD *)a2 + 4);
  v14 = (_DWORD)v5 + ~llvm::APInt::tcMSB(v10, (const unint64_t *)(v7 >> 6));
  if (v14)
  {
    *((_DWORD *)this + 4) += v14;
    llvm::APInt::tcShiftLeft(v10, (unint64_t *)(v7 >> 6), v14);
  }
  v15 = (_DWORD)v5 + ~llvm::APInt::tcMSB(v9, (const unint64_t *)(v7 >> 6));
  if (v15)
  {
    *((_DWORD *)this + 4) -= v15;
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), v15);
  }
  if ((llvm::APInt::tcCompare(v9, (const unint64_t *)v10, (const unint64_t *)(v7 >> 6)) & 0x80000000) != 0)
  {
    --*((_DWORD *)this + 4);
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
  }
  while ((_DWORD)v5)
  {
    while ((llvm::APInt::tcCompare(v9, (const unint64_t *)v10, (const unint64_t *)(v7 >> 6)) & 0x80000000) == 0)
    {
      llvm::APInt::tcSubtract(v9, (unint64_t *)v10, 0, v7 >> 6);
      v5 = (unint64_t *)((_DWORD)v5 - 1);
      llvm::APInt::tcSetBit((uint64_t)v4, v5);
      llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
      if (!(_DWORD)v5)
        goto LABEL_26;
    }
    LODWORD(v5) = (_DWORD)v5 - 1;
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
  }
LABEL_26:
  v16 = llvm::APInt::tcCompare(v9, (const unint64_t *)v10, (const unint64_t *)(v7 >> 6));
  if (v16 > 0)
  {
    v17 = 3;
    if (v7 < 0xC0)
      return v17;
    goto LABEL_75;
  }
  if (!v16)
  {
    v17 = 2;
    if (v7 < 0xC0)
      return v17;
    goto LABEL_75;
  }
  v17 = !llvm::APInt::tcIsZero(v9, (const unint64_t *)(v7 >> 6));
  if (v7 >= 0xC0)
LABEL_75:
    operator delete[](v9);
  return v17;
}

uint64_t llvm::detail::IEEEFloat::handleOverflow(_DWORD **a1, int a2)
{
  char v2;
  unsigned int v3;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  switch(a2)
  {
    case 1:
    case 4:
      goto LABEL_5;
    case 2:
      v2 = *((_BYTE *)a1 + 20);
      if ((v2 & 8) != 0)
        goto LABEL_10;
      goto LABEL_5;
    case 3:
      v2 = *((_BYTE *)a1 + 20);
      if ((v2 & 8) == 0)
        goto LABEL_10;
LABEL_5:
      v3 = *((unsigned __int8 *)a1 + 20);
      if ((*a1)[4] == 1)
        llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (v3 >> 3) & 1, 0);
      else
        *((_BYTE *)a1 + 20) = v3 & 0xF8;
      return 20;
    default:
      v2 = *((_BYTE *)a1 + 20);
LABEL_10:
      *((_BYTE *)a1 + 20) = v2 & 0xF8 | 2;
      v5 = *a1;
      *((_DWORD *)a1 + 4) = **a1;
      v6 = v5[2];
      v7 = v6 - 64;
      v8 = a1 + 1;
      v9 = a1 + 1;
      if (v6 - 64 <= 0xFFFFFF7F)
        v9 = (_QWORD *)*v8;
      v10 = v6 + 64;
      v11 = v6 - 65;
      if (v6 < 0x41)
      {
        v12 = 0;
        v13 = v10 >> 6;
        if (!v6)
          goto LABEL_17;
      }
      else
      {
        memset(v9, 255, 8 * (v11 >> 6) + 8);
        v12 = (v11 >> 6) + 1;
        v6 = v7 - (v11 & 0xFFFFFFC0);
        v13 = v10 >> 6;
        if (!v6)
          goto LABEL_17;
      }
      v9[v12++] = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
LABEL_17:
      if (v12 < v13)
        bzero(&v9[v12], 8 * (v13 + ~v12) + 8);
      if (v5[4] == 1 && v5[5] == 1)
      {
        if (v7 <= 0xFFFFFF7F)
          v8 = (_QWORD *)*v8;
        llvm::APInt::tcClearBit((uint64_t)v8, 0);
      }
      return 16;
  }
}

void llvm::detail::IEEEFloat::addOrSubtractSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

BOOL sub_180B64D50@<W0>(char a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  char v7;
  _BOOL4 v9;
  _QWORD *v11;
  int v12;
  unint64_t *v13;
  int v14;
  llvm::APInt *v15;
  llvm::APInt *v16;
  int v17;
  llvm::APInt *v18;
  llvm::APInt *v19;
  llvm::APInt *v20;
  llvm::APInt *v21;
  int v23;

  v4 = v1 & 8 | a1 & 0xF7;
  *(_BYTE *)(v2 + 20) = v4;
  v5 = *(_BYTE *)(v3 + 20);
  v6 = v5 & 7;
  v7 = v4 & 0xF8 | v5 & 7;
  *(_BYTE *)(v2 + 20) = v7;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(v3 + 16);
  v9 = (v5 & 6) != 0 && v6 != 3;
  if (v6 == 1 || v9)
  {
    v11 = (_QWORD *)(v2 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)v2 + 8);
    if ((v12 - 64) <= 0xFFFFFF7F)
      v11 = (_QWORD *)*v11;
    if ((*(_DWORD *)(*(_QWORD *)v3 + 8) - 64) >= 0xFFFFFF80)
      v13 = (unint64_t *)(v3 + 8);
    else
      v13 = *(unint64_t **)(v3 + 8);
    llvm::APInt::tcAssign((uint64_t)v11, v13, (const unint64_t *)((v12 + 64) >> 6));
    v7 = *(_BYTE *)(v2 + 20);
  }
  if ((v7 & 7) != 1 || *(_DWORD *)(*(_QWORD *)v2 + 16) == 1)
    goto LABEL_23;
  v14 = *(_DWORD *)(*(_QWORD *)v2 + 8);
  v15 = (llvm::APInt *)(v2 + 8);
  v16 = (llvm::APInt *)(v2 + 8);
  if ((v14 - 64) <= 0xFFFFFF7F)
    v16 = *(llvm::APInt **)v15;
  if (llvm::APInt::tcExtractBit(v16, (const unint64_t *)(v14 - 2)))
  {
LABEL_23:
    if ((*(_BYTE *)(v3 + 20) & 7) != 1 || *(_DWORD *)(*(_QWORD *)v3 + 16) == 1)
    {
      return 0;
    }
    else
    {
      v17 = *(_DWORD *)(*(_QWORD *)v3 + 8);
      v20 = *(llvm::APInt **)(v3 + 8);
      v19 = (llvm::APInt *)(v3 + 8);
      v18 = v20;
      if ((v17 - 64) >= 0xFFFFFF80)
        v21 = v19;
      else
        v21 = v18;
      return llvm::APInt::tcExtractBit(v21, (const unint64_t *)(v17 - 2)) == 0;
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)v2 + 16) == 1)
  {
    return 1;
  }
  else
  {
    v23 = *(_DWORD *)(*(_QWORD *)v2 + 8);
    if ((v23 - 64) <= 0xFFFFFF7F)
      v15 = *(llvm::APInt **)v15;
    llvm::APInt::tcSetBit((uint64_t)v15, (unint64_t *)(v23 - 2));
    return 1;
  }
}

BOOL llvm::detail::IEEEFloat::isSignaling(llvm::detail::IEEEFloat *this)
{
  int v2;
  llvm::APInt *v3;

  if ((*((_BYTE *)this + 20) & 7) != 1 || *(_DWORD *)(*(_QWORD *)this + 16) == 1)
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)this + 8);
  v3 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if ((v2 - 64) <= 0xFFFFFF7F)
    v3 = *(llvm::APInt **)v3;
  return llvm::APInt::tcExtractBit(v3, (const unint64_t *)(v2 - 2)) == 0;
}

void llvm::detail::IEEEFloat::multiplySpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

BOOL sub_180B650E0@<W0>(char a1@<W8>)
{
  char v1;
  llvm::APInt **v2;
  _BYTE *v3;
  int v4;
  llvm::APInt *v5;
  llvm::APInt *v6;
  int v8;
  llvm::APInt *v9;
  llvm::APInt *v10;
  llvm::APInt *v11;
  llvm::APInt *v12;
  int v13;

  v3[20] = v1 & 8 ^ a1;
  if ((a1 & 7) != 1 || *(_DWORD *)(*(_QWORD *)v3 + 16) == 1)
    goto LABEL_7;
  v4 = *(_DWORD *)(*(_QWORD *)v3 + 8);
  v5 = (llvm::APInt *)(v3 + 8);
  v6 = (llvm::APInt *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F)
    v6 = *(llvm::APInt **)v5;
  if (llvm::APInt::tcExtractBit(v6, (const unint64_t *)(v4 - 2)))
  {
LABEL_7:
    if ((*((_BYTE *)v2 + 20) & 7) == 1 && *((_DWORD *)*v2 + 4) != 1)
    {
      v8 = *((_DWORD *)*v2 + 2);
      v11 = v2[1];
      v10 = (llvm::APInt *)(v2 + 1);
      v9 = v11;
      if ((v8 - 64) >= 0xFFFFFF80)
        v12 = v10;
      else
        v12 = v9;
      return llvm::APInt::tcExtractBit(v12, (const unint64_t *)(v8 - 2)) == 0;
    }
    else
    {
      return 0;
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)v3 + 16) == 1)
  {
    return 1;
  }
  else
  {
    v13 = *(_DWORD *)(*(_QWORD *)v3 + 8);
    if ((v13 - 64) <= 0xFFFFFF7F)
      v5 = *(llvm::APInt **)v5;
    llvm::APInt::tcSetBit((uint64_t)v5, (unint64_t *)(v13 - 2));
    return 1;
  }
}

void llvm::detail::IEEEFloat::divideSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

BOOL sub_180B6534C@<W0>(char a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  char v7;
  _BOOL4 v9;
  _QWORD *v11;
  int v12;
  unint64_t *v13;
  char v14;
  int v15;
  llvm::APInt *v16;
  llvm::APInt *v17;
  int v19;
  llvm::APInt *v20;
  llvm::APInt *v21;
  llvm::APInt *v22;
  llvm::APInt *v23;
  int v24;

  v4 = v1 & 8 | a1 & 0xF7;
  *(_BYTE *)(v2 + 20) = v4;
  v5 = *(_BYTE *)(v3 + 20);
  v6 = v5 & 7;
  v7 = v4 & 0xF8 | v5 & 7;
  *(_BYTE *)(v2 + 20) = v7;
  *(_DWORD *)(v2 + 16) = *(_DWORD *)(v3 + 16);
  v9 = (v5 & 6) != 0 && v6 != 3;
  if (v6 == 1 || v9)
  {
    v11 = (_QWORD *)(v2 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)v2 + 8);
    if ((v12 - 64) <= 0xFFFFFF7F)
      v11 = (_QWORD *)*v11;
    if ((*(_DWORD *)(*(_QWORD *)v3 + 8) - 64) >= 0xFFFFFF80)
      v13 = (unint64_t *)(v3 + 8);
    else
      v13 = *(unint64_t **)(v3 + 8);
    llvm::APInt::tcAssign((uint64_t)v11, v13, (const unint64_t *)((v12 + 64) >> 6));
    v7 = *(_BYTE *)(v2 + 20);
  }
  v14 = v7 & 0xF7;
  *(_BYTE *)(v2 + 20) = v14;
  *(_BYTE *)(v2 + 20) = *(_BYTE *)(v3 + 20) & 8 ^ v14;
  if ((v14 & 7) != 1 || *(_DWORD *)(*(_QWORD *)v2 + 16) == 1)
    goto LABEL_23;
  v15 = *(_DWORD *)(*(_QWORD *)v2 + 8);
  v16 = (llvm::APInt *)(v2 + 8);
  v17 = (llvm::APInt *)(v2 + 8);
  if ((v15 - 64) <= 0xFFFFFF7F)
    v17 = *(llvm::APInt **)v16;
  if (llvm::APInt::tcExtractBit(v17, (const unint64_t *)(v15 - 2)))
  {
LABEL_23:
    if ((*(_BYTE *)(v3 + 20) & 7) == 1 && *(_DWORD *)(*(_QWORD *)v3 + 16) != 1)
    {
      v19 = *(_DWORD *)(*(_QWORD *)v3 + 8);
      v22 = *(llvm::APInt **)(v3 + 8);
      v21 = (llvm::APInt *)(v3 + 8);
      v20 = v22;
      if ((v19 - 64) >= 0xFFFFFF80)
        v23 = v21;
      else
        v23 = v20;
      return llvm::APInt::tcExtractBit(v23, (const unint64_t *)(v19 - 2)) == 0;
    }
    else
    {
      return 0;
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)v2 + 16) == 1)
  {
    return 1;
  }
  else
  {
    v24 = *(_DWORD *)(*(_QWORD *)v2 + 8);
    if ((v24 - 64) <= 0xFFFFFF7F)
      v16 = *(llvm::APInt **)v16;
    llvm::APInt::tcSetBit((uint64_t)v16, (unint64_t *)(v24 - 2));
    return 1;
  }
}

void llvm::detail::IEEEFloat::modSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

uint64_t sub_180B655C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  llvm::detail::IEEEFloat *v14;

  llvm::detail::IEEEFloat::makeNaN(v14, 0, 0, 0);
  return 1;
}

BOOL sub_180B655EC@<W0>(char a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  char v7;
  _BOOL4 v9;
  _QWORD *v11;
  int v12;
  unint64_t *v13;
  int v14;
  llvm::APInt *v15;
  llvm::APInt *v16;
  int v18;
  llvm::APInt *v19;
  llvm::APInt *v20;
  llvm::APInt *v21;
  llvm::APInt *v22;
  int v23;

  v4 = v1 & 8 | a1 & 0xF7;
  *(_BYTE *)(v3 + 20) = v4;
  v5 = *(_BYTE *)(v2 + 20);
  v6 = v5 & 7;
  v7 = v4 & 0xF8 | v5 & 7;
  *(_BYTE *)(v3 + 20) = v7;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v2 + 16);
  v9 = (v5 & 6) != 0 && v6 != 3;
  if (v6 == 1 || v9)
  {
    v11 = (_QWORD *)(v3 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)v3 + 8);
    if ((v12 - 64) <= 0xFFFFFF7F)
      v11 = (_QWORD *)*v11;
    if ((*(_DWORD *)(*(_QWORD *)v2 + 8) - 64) >= 0xFFFFFF80)
      v13 = (unint64_t *)(v2 + 8);
    else
      v13 = *(unint64_t **)(v2 + 8);
    llvm::APInt::tcAssign((uint64_t)v11, v13, (const unint64_t *)((v12 + 64) >> 6));
    v7 = *(_BYTE *)(v3 + 20);
  }
  if ((v7 & 7) == 1 && *(_DWORD *)(*(_QWORD *)v3 + 16) != 1)
  {
    v14 = *(_DWORD *)(*(_QWORD *)v3 + 8);
    v15 = (llvm::APInt *)(v3 + 8);
    v16 = (llvm::APInt *)(v3 + 8);
    if ((v14 - 64) <= 0xFFFFFF7F)
      v16 = *(llvm::APInt **)v15;
    if (!llvm::APInt::tcExtractBit(v16, (const unint64_t *)(v14 - 2)))
    {
      if (*(_DWORD *)(*(_QWORD *)v3 + 16) != 1)
      {
        v23 = *(_DWORD *)(*(_QWORD *)v3 + 8);
        if ((v23 - 64) <= 0xFFFFFF7F)
          v15 = *(llvm::APInt **)v15;
        llvm::APInt::tcSetBit((uint64_t)v15, (unint64_t *)(v23 - 2));
      }
      JUMPOUT(0x180B655D8);
    }
  }
  if ((*(_BYTE *)(v2 + 20) & 7) != 1 || *(_DWORD *)(*(_QWORD *)v2 + 16) == 1)
    return 0;
  v18 = *(_DWORD *)(*(_QWORD *)v2 + 8);
  v21 = *(llvm::APInt **)(v2 + 8);
  v20 = (llvm::APInt *)(v2 + 8);
  v19 = v21;
  if ((v18 - 64) >= 0xFFFFFF80)
    v22 = v20;
  else
    v22 = v19;
  return llvm::APInt::tcExtractBit(v22, (const unint64_t *)(v18 - 2)) == 0;
}

void llvm::detail::IEEEFloat::remainderSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

uint64_t sub_180B657A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  llvm::detail::IEEEFloat *v14;

  llvm::detail::IEEEFloat::makeNaN(v14, 0, 0, 0);
  return 1;
}

BOOL sub_180B657C8@<W0>(char a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  int v6;
  char v7;
  _BOOL4 v9;
  _QWORD *v11;
  int v12;
  unint64_t *v13;
  int v14;
  llvm::APInt *v15;
  llvm::APInt *v16;
  int v18;
  llvm::APInt *v19;
  llvm::APInt *v20;
  llvm::APInt *v21;
  llvm::APInt *v22;
  int v23;

  v4 = v1 & 8 | a1 & 0xF7;
  *(_BYTE *)(v3 + 20) = v4;
  v5 = *(_BYTE *)(v2 + 20);
  v6 = v5 & 7;
  v7 = v4 & 0xF8 | v5 & 7;
  *(_BYTE *)(v3 + 20) = v7;
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v2 + 16);
  v9 = (v5 & 6) != 0 && v6 != 3;
  if (v6 == 1 || v9)
  {
    v11 = (_QWORD *)(v3 + 8);
    v12 = *(_DWORD *)(*(_QWORD *)v3 + 8);
    if ((v12 - 64) <= 0xFFFFFF7F)
      v11 = (_QWORD *)*v11;
    if ((*(_DWORD *)(*(_QWORD *)v2 + 8) - 64) >= 0xFFFFFF80)
      v13 = (unint64_t *)(v2 + 8);
    else
      v13 = *(unint64_t **)(v2 + 8);
    llvm::APInt::tcAssign((uint64_t)v11, v13, (const unint64_t *)((v12 + 64) >> 6));
    v7 = *(_BYTE *)(v3 + 20);
  }
  if ((v7 & 7) != 1 || *(_DWORD *)(*(_QWORD *)v3 + 16) == 1)
    goto LABEL_23;
  v14 = *(_DWORD *)(*(_QWORD *)v3 + 8);
  v15 = (llvm::APInt *)(v3 + 8);
  v16 = (llvm::APInt *)(v3 + 8);
  if ((v14 - 64) <= 0xFFFFFF7F)
    v16 = *(llvm::APInt **)v15;
  if (llvm::APInt::tcExtractBit(v16, (const unint64_t *)(v14 - 2)))
  {
LABEL_23:
    if ((*(_BYTE *)(v2 + 20) & 7) == 1 && *(_DWORD *)(*(_QWORD *)v2 + 16) != 1)
    {
      v18 = *(_DWORD *)(*(_QWORD *)v2 + 8);
      v21 = *(llvm::APInt **)(v2 + 8);
      v20 = (llvm::APInt *)(v2 + 8);
      v19 = v21;
      if ((v18 - 64) >= 0xFFFFFF80)
        v22 = v20;
      else
        v22 = v19;
      return llvm::APInt::tcExtractBit(v22, (const unint64_t *)(v18 - 2)) == 0;
    }
    else
    {
      return 0;
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)v3 + 16) == 1)
  {
    return 1;
  }
  else
  {
    v23 = *(_DWORD *)(*(_QWORD *)v3 + 8);
    if ((v23 - 64) <= 0xFFFFFF7F)
      v15 = *(llvm::APInt **)v15;
    llvm::APInt::tcSetBit((uint64_t)v15, (unint64_t *)(v23 - 2));
    return 1;
  }
}

_BYTE *llvm::detail::IEEEFloat::changeSign(_BYTE *this)
{
  char v1;

  v1 = this[20];
  if (*(_DWORD *)(*(_QWORD *)this + 20) != 2 || (v1 & 5 | 2) != 3)
    this[20] = v1 ^ 8;
  return this;
}

void llvm::detail::IEEEFloat::add(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;

  llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)a2);
  if (v6 == 2)
  {
    v7 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)a2, 0);
    llvm::detail::IEEEFloat::normalize((uint64_t)a1, a3, v7);
  }
  v8 = a1[20];
  if ((v8 & 7) == 3)
  {
    v9 = a2[20];
    if ((v9 & 7) != 3 || ((v9 ^ v8) & 8) != 0)
    {
      LOBYTE(v8) = v8 & 0xF7 | (8 * (a3 == 3));
      a1[20] = v8;
    }
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) == 2)
      a1[20] = v8 & 0xF7;
  }
}

void llvm::detail::IEEEFloat::subtract(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;

  llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)a2);
  if (v6 == 2)
  {
    v7 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)a2, 1);
    llvm::detail::IEEEFloat::normalize((uint64_t)a1, a3, v7);
  }
  v8 = a1[20];
  if ((v8 & 7) == 3)
  {
    v9 = a2[20];
    if ((v9 & 7) != 3 || ((v9 ^ v8) & 8) == 0)
    {
      LOBYTE(v8) = v8 & 0xF7 | (8 * (a3 == 3));
      a1[20] = v8;
    }
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) == 2)
      a1[20] = v8 & 0xF7;
  }
}

void llvm::detail::IEEEFloat::multiply(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  char v6;
  int v7;
  int v9;

  *((_BYTE *)a1 + 20) ^= *((_BYTE *)a2 + 20) & 8;
  llvm::detail::IEEEFloat::multiplySpecials(a1, a2);
  v6 = *((_BYTE *)a1 + 20);
  v7 = v6 & 7;
  if (v7 == 3)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) != 2)
      return;
    v6 &= ~8u;
    *((_BYTE *)a1 + 20) = v6;
  }
  if ((v6 & 6) != 0 && v7 != 3)
  {
    v9 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t **)a1, a2);
    llvm::detail::IEEEFloat::normalize((uint64_t)a1, a3, v9);
  }
}

void llvm::detail::IEEEFloat::divide(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  char v6;
  int v7;
  int v9;

  *((_BYTE *)a1 + 20) ^= *((_BYTE *)a2 + 20) & 8;
  llvm::detail::IEEEFloat::divideSpecials(a1, a2);
  v6 = *((_BYTE *)a1 + 20);
  v7 = v6 & 7;
  if (v7 == 3)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) != 2)
      return;
    v6 &= ~8u;
    *((_BYTE *)a1 + 20) = v6;
  }
  if ((v6 & 6) != 0 && v7 != 3)
  {
    v9 = llvm::detail::IEEEFloat::divideSignificand(a1, a2);
    llvm::detail::IEEEFloat::normalize((uint64_t)a1, a3, v9);
  }
}

uint64_t llvm::detail::IEEEFloat::remainder(__int128 **this, unint64_t **a2)
{
  char v4;
  void **v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  int v9;
  _BOOL4 v11;
  int v13;
  int v14;
  int v15;
  unint64_t *v16;
  int v17;
  int v18;
  unint64_t *v19;
  unsigned int v20;
  char v21;
  int v22;
  unsigned __int8 v23;
  _BOOL4 v25;
  int v26;
  void *v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  char v32;
  __int128 *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  _BOOL4 v38;
  int v39;
  void *v40;
  unint64_t *v41;
  unint64_t *v42;
  unsigned int v43;
  int v44;
  _BOOL4 v46;
  int v47;
  void *p_p;
  unint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  char v58;
  uint64_t v59;
  int v60;
  char v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  char v66;
  char v67;
  char v68;
  char v69;
  unint64_t *v71;
  void *__p;
  int v73;
  unsigned __int8 v74;
  __int128 *v75;
  void *v76;
  int v77;
  unsigned __int8 v78;
  __int128 v79;
  uint64_t v80;
  char v81;
  unint64_t *v82;
  void *v83;
  int v84;
  unsigned __int8 v85;
  unint64_t *v86;
  void **v87;
  int v88;
  unsigned __int8 v89;

  v4 = *((_BYTE *)this + 20);
  llvm::detail::IEEEFloat::remainderSpecials((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)a2);
  v6 = (uint64_t)v5;
  if ((_DWORD)v5 != 2)
    return v6;
  v86 = *a2;
  v7 = *((_DWORD *)v86 + 2) + 64;
  if (v7 >= 0x80)
  {
    v5 = (void **)operator new[]((v7 >> 3) & 0x1FFFFFF8);
    v87 = v5;
  }
  v8 = *((_BYTE *)a2 + 20);
  v9 = v8 & 7;
  v89 = v8 & 0xF;
  v88 = *((_DWORD *)a2 + 4);
  v11 = (v8 & 6) != 0 && v9 != 3;
  if (v9 != 1 && !v11)
  {
    llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v86, (const llvm::detail::IEEEFloat *)a2);
    if (v13 == 2)
      goto LABEL_22;
LABEL_16:
    v14 = v89;
    if ((v89 & 7) != 3)
      goto LABEL_28;
    goto LABEL_23;
  }
  v15 = *((_DWORD *)v86 + 2);
  if ((v15 - 64) < 0xFFFFFF80)
  {
    v16 = a2[1];
  }
  else
  {
    v5 = (void **)&v87;
    v16 = (unint64_t *)(a2 + 1);
  }
  llvm::APInt::tcAssign((uint64_t)v5, v16, (const unint64_t *)((v15 + 64) >> 6));
  llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v86, (const llvm::detail::IEEEFloat *)a2);
  if (v13 != 2)
    goto LABEL_16;
LABEL_22:
  v17 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v86, (const llvm::detail::IEEEFloat *)a2, 0);
  v13 = llvm::detail::IEEEFloat::normalize((uint64_t)&v86, 1, v17);
  v14 = v89;
  if ((v89 & 7) != 3)
    goto LABEL_28;
LABEL_23:
  v18 = *((unsigned __int8 *)a2 + 20);
  if ((v18 & 7) != 3 || ((v18 ^ v14) & 8) != 0)
  {
    LOBYTE(v14) = v14 & 0xF7;
    v89 = v14;
  }
  if (*((_DWORD *)v86 + 5) == 2)
    v89 = v14 & 0xF7;
LABEL_28:
  if (v13)
  {
    v19 = *a2;
    v82 = v19;
    v20 = *((_DWORD *)v19 + 2) + 64;
    if (v20 < 0x80)
      goto LABEL_31;
    goto LABEL_30;
  }
  llvm::detail::IEEEFloat::mod((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v86);
  v19 = *a2;
  v82 = v19;
  v20 = *((_DWORD *)v19 + 2) + 64;
  if (v20 >= 0x80)
LABEL_30:
    v83 = operator new[]((v20 >> 3) & 0x1FFFFFF8);
LABEL_31:
  v21 = *((_BYTE *)a2 + 20);
  v22 = v21 & 7;
  v23 = v85 & 0xF0 | v21 & 0xF;
  v85 = v23;
  v84 = *((_DWORD *)a2 + 4);
  v25 = (v21 & 6) != 0 && v22 != 3;
  if (v22 == 1 || v25)
  {
    v26 = *((_DWORD *)v19 + 2);
    if ((v26 - 64) >= 0xFFFFFF80)
      v27 = &v83;
    else
      v27 = v83;
    v30 = a2[1];
    v29 = (unint64_t *)(a2 + 1);
    v28 = v30;
    if ((v26 - 64) >= 0xFFFFFF80)
      v31 = v29;
    else
      v31 = v28;
    llvm::APInt::tcAssign((uint64_t)v27, v31, (const unint64_t *)((v26 + 64) >> 6));
    v23 = v85;
  }
  v85 = v23 & 0xF7;
  v32 = *((_BYTE *)this + 20);
  *((_BYTE *)this + 20) = v32 & 0xF7;
  v81 = 0;
  v33 = *this;
  v34 = *((_QWORD *)*this + 2);
  v79 = **this;
  v80 = v34;
  *(int32x2_t *)&v79 = vadd_s32(*(int32x2_t *)&v79, (int32x2_t)0xFFFFFFFF00000001);
  DWORD2(v79) += 2;
  v75 = v33;
  v35 = *((_DWORD *)v33 + 2) + 64;
  if (v35 >= 0x80)
    v76 = operator new[]((v35 >> 3) & 0x1FFFFFF8);
  v36 = v32 & 7;
  v78 = v78 & 0xF0 | v32 & 7;
  v77 = *((_DWORD *)this + 4);
  v38 = (v32 & 6) != 0 && v36 != 3;
  if (v36 == 1 || v38)
  {
    v39 = *((_DWORD *)v33 + 2);
    if ((v39 - 64) >= 0xFFFFFF80)
      v40 = &v76;
    else
      v40 = v76;
    if ((v39 - 64) >= 0xFFFFFF80)
      v41 = (unint64_t *)(this + 1);
    else
      v41 = (unint64_t *)this[1];
    llvm::APInt::tcAssign((uint64_t)v40, v41, (const unint64_t *)((v39 + 64) >> 6));
  }
  llvm::detail::IEEEFloat::convert((uint64_t)&v75, (uint64_t)&v79, 1, &v81);
  v42 = v82;
  v71 = v82;
  v43 = *((_DWORD *)v82 + 2) + 64;
  if (v43 >= 0x80)
    __p = operator new[]((v43 >> 3) & 0x1FFFFFF8);
  v44 = v85 & 7;
  v74 = v74 & 0xF0 | v85 & 0xF;
  v73 = v84;
  v46 = (v85 & 6) != 0 && v44 != 3;
  if (v44 == 1 || v46)
  {
    v47 = *((_DWORD *)v42 + 2);
    if ((v47 - 64) >= 0xFFFFFF80)
      p_p = &__p;
    else
      p_p = __p;
    if ((v47 - 64) >= 0xFFFFFF80)
      v49 = (unint64_t *)&v83;
    else
      v49 = (unint64_t *)v83;
    llvm::APInt::tcAssign((uint64_t)p_p, v49, (const unint64_t *)((v47 + 64) >> 6));
  }
  llvm::detail::IEEEFloat::convert((uint64_t)&v71, (uint64_t)&v79, 1, &v81);
  llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v75);
  v6 = v50;
  if ((_DWORD)v50 == 2)
  {
    v51 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v75, 0);
    v6 = llvm::detail::IEEEFloat::normalize((uint64_t)&v75, 1, v51);
  }
  if ((v78 & 7) == 3 && *((_DWORD *)v75 + 5) == 2)
    v78 &= ~8u;
  llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v71);
  if (v52 == 2)
  {
    llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v82);
    if (v53 == 2)
    {
      v54 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v82, 1);
      llvm::detail::IEEEFloat::normalize((uint64_t)this, 1, v54);
    }
    v55 = *((unsigned __int8 *)this + 20);
    if ((v55 & 7) == 3)
    {
      if ((v85 & 7) != 3 || ((v85 ^ v55) & 8) == 0)
      {
        LOBYTE(v55) = v55 & 0xF7;
        *((_BYTE *)this + 20) = v55;
      }
      if (*((_DWORD *)*this + 5) == 2)
        *((_BYTE *)this + 20) = v55 & 0xF7;
    }
    llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v71);
    if (v56 == 2)
    {
      v57 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v71, 1);
      llvm::detail::IEEEFloat::normalize((uint64_t)&v75, 1, v57);
    }
    v58 = v78;
    if ((v78 & 7) == 3)
    {
      if ((v74 & 7) != 3 || ((v74 ^ v78) & 8) == 0)
      {
        v58 = v78 & 0xF7;
        v78 &= ~8u;
      }
      if (*((_DWORD *)v75 + 5) == 2)
        v78 = v58 & 0xF7;
    }
    llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v71);
    v6 = v59;
    if ((_DWORD)v59 == 2)
    {
      v60 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v71, 1);
      v6 = llvm::detail::IEEEFloat::normalize((uint64_t)&v75, 1, v60);
    }
    v61 = v78;
    if ((v78 & 7) == 3)
    {
      if ((v74 & 7) != 3 || ((v74 ^ v78) & 8) == 0)
      {
        v61 = v78 & 0xF7;
        v78 &= ~8u;
      }
      if (*((_DWORD *)v75 + 5) == 2)
        v78 = v61 & 0xF7;
    }
    llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v75, (const llvm::detail::IEEEFloat *)&v71);
    if ((v62 - 1) <= 1)
    {
      llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v82);
      v6 = v63;
      if ((_DWORD)v63 == 2)
      {
        v64 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)this, (const llvm::detail::IEEEFloat *)&v82, 1);
        v6 = llvm::detail::IEEEFloat::normalize((uint64_t)this, 1, v64);
      }
      v65 = *((unsigned __int8 *)this + 20);
      if ((v65 & 7) == 3)
      {
        if ((v85 & 7) != 3 || ((v85 ^ v65) & 8) == 0)
        {
          LOBYTE(v65) = v65 & 0xF7;
          *((_BYTE *)this + 20) = v65;
        }
        if (*((_DWORD *)*this + 5) == 2)
          *((_BYTE *)this + 20) = v65 & 0xF7;
      }
    }
  }
  v66 = v4 & 8;
  v67 = *((_BYTE *)this + 20);
  if ((v67 & 7) == 3)
  {
    v68 = v67 & 0xF7;
    v69 = v68 | v66;
    *((_BYTE *)this + 20) = v69;
    if (*((_DWORD *)*this + 5) == 2)
      v69 = v68;
    *((_BYTE *)this + 20) = v69;
    if ((*((_DWORD *)v71 + 2) - 64) > 0xFFFFFF7F)
      goto LABEL_127;
    goto LABEL_125;
  }
  *((_BYTE *)this + 20) = v67 ^ v66;
  if ((*((_DWORD *)v71 + 2) - 64) <= 0xFFFFFF7F)
  {
LABEL_125:
    if (__p)
      operator delete[](__p);
  }
LABEL_127:
  if ((*((_DWORD *)v75 + 2) - 64) <= 0xFFFFFF7F && v76)
    operator delete[](v76);
  if ((*((_DWORD *)v82 + 2) - 64) <= 0xFFFFFF7F && v83)
    operator delete[](v83);
  if ((*((_DWORD *)v86 + 2) - 64) <= 0xFFFFFF7F && v87)
    operator delete[](v87);
  return v6;
}

uint64_t llvm::detail::IEEEFloat::mod(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  const llvm::detail::IEEEFloat *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  BOOL v8;
  int v9;
  char v10;
  llvm::APInt **v12;
  unint64_t **v13;
  int v14;
  int v15;
  int v16;
  int v17;
  llvm::APInt *v18;
  const unint64_t *v19;
  int v20;
  const llvm::detail::IEEEFloat *v21;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  _BOOL4 v29;
  int v31;
  void **v32;
  unint64_t *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  int v39;
  _DWORD *v40;
  int v41;
  void **v42;
  int v43;
  int v44;
  llvm::APInt *v45;
  void **p_p;
  _DWORD *v47;
  unsigned int v48;
  char v49;
  int v50;
  int v51;
  _BOOL4 v53;
  int v54;
  void *v55;
  unint64_t *v56;
  int v57;
  int v58;
  char v59;
  _DWORD *v60;
  int v61;
  void *v62;
  void *v63;
  int v64;
  _DWORD *v65;
  uint64_t v66;
  int v67;
  _DWORD *v68;
  void *v69;
  int v70;
  char v71;
  _DWORD *v72;
  void **v73;
  int v74;
  char v75;
  _DWORD *v76;
  void *__p;
  int v78;
  unsigned __int8 v79;

  llvm::detail::IEEEFloat::modSpecials(this, a2);
  v6 = v5;
  v7 = *((_BYTE *)this + 20);
  v8 = (v7 & 6) == 0 || (v7 & 7) == 3;
  if (v8 || (*((_BYTE *)a2 + 20) & 6) == 0 || (*((_BYTE *)a2 + 20) & 7) == 3)
  {
    LOBYTE(v9) = *((_BYTE *)this + 20);
    goto LABEL_7;
  }
  v12 = (llvm::APInt **)((char *)this + 8);
  v13 = (unint64_t **)((char *)a2 + 8);
  while (1)
  {
    v14 = *((_DWORD *)this + 4);
    v15 = *((_DWORD *)a2 + 4);
    v16 = v14 - v15;
    if (v14 == v15)
    {
      v17 = *(_DWORD *)(*(_QWORD *)this + 8);
      v18 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v17 - 64) <= 0xFFFFFF7F)
        v18 = *v12;
      if ((*(_DWORD *)(*(_QWORD *)a2 + 8) - 64) >= 0xFFFFFF80)
        v19 = (const unint64_t *)((char *)a2 + 8);
      else
        v19 = (const unint64_t *)*((_QWORD *)a2 + 1);
      v16 = llvm::APInt::tcCompare(v18, v19, (const unint64_t *)((v17 + 64) >> 6));
    }
    if (v16 < 0)
      break;
    v20 = llvm::detail::ilogb(this, v4);
    v22 = llvm::detail::ilogb(a2, v21);
    v23 = *(_DWORD **)a2;
    v72 = v23;
    v24 = v23[2] + 64;
    if (v24 >= 0x80)
      v73 = (void **)operator new[]((v24 >> 3) & 0x1FFFFFF8);
    v25 = *((_BYTE *)a2 + 20);
    v26 = v25 & 7;
    v75 = v75 & 0xF0 | v25 & 0xF;
    v27 = *((_DWORD *)a2 + 4);
    v74 = v27;
    v29 = (v25 & 6) != 0 && v26 != 3;
    if (v26 == 1 || v29)
    {
      v31 = v23[2];
      if ((v31 - 64) >= 0xFFFFFF80)
        v32 = (void **)&v73;
      else
        v32 = v73;
      if ((v31 - 64) >= 0xFFFFFF80)
        v33 = (unint64_t *)((char *)a2 + 8);
      else
        v33 = *v13;
      llvm::APInt::tcAssign((uint64_t)v32, v33, (const unint64_t *)((v31 + 64) >> 6));
      v23 = v72;
      v27 = v74;
    }
    v34 = v20 - v22;
    v35 = *v23 + v23[2] + ~v23[1];
    v36 = -2 - v35;
    if (v35 + 1 < v34)
      v37 = v35 + 1;
    else
      v37 = v34;
    if (v36 > v34)
      v37 = v36;
    v74 = v37 + v27;
    llvm::detail::IEEEFloat::normalize((uint64_t)&v72, 1, 0);
    v38 = v75;
    v39 = v75 & 7;
    v40 = v72;
    if (v39 == 1)
    {
      if (v72[4] == 1)
      {
        v39 = 1;
      }
      else
      {
        v41 = v72[2];
        if ((v41 - 64) >= 0xFFFFFF80)
          v42 = (void **)&v73;
        else
          v42 = v73;
        llvm::APInt::tcSetBit((uint64_t)v42, (unint64_t *)(v41 - 2));
        v40 = v72;
        v38 = v75;
        v39 = v75 & 7;
      }
    }
    v76 = v40;
    __p = v73;
    v78 = v74;
    v79 = v79 & 0xF0 | v38 & 0xF;
    v72 = &llvm::semBogus;
    if (v39 == 1)
      goto LABEL_64;
    v43 = *((_DWORD *)this + 4);
    if (v43 == v74)
    {
      v44 = *(_DWORD *)(*(_QWORD *)this + 8);
      v45 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if ((v44 - 64) <= 0xFFFFFF7F)
        v45 = *v12;
      if ((v40[2] - 64) >= 0xFFFFFF80)
        p_p = &__p;
      else
        p_p = v73;
      if ((llvm::APInt::tcCompare(v45, (const unint64_t *)p_p, (const unint64_t *)((v44 + 64) >> 6)) & 0x80000000) == 0)goto LABEL_98;
LABEL_64:
      v47 = *(_DWORD **)a2;
      v68 = v47;
      v48 = v47[2] + 64;
      if (v48 >= 0x80)
        v69 = operator new[]((v48 >> 3) & 0x1FFFFFF8);
      v49 = *((_BYTE *)a2 + 20);
      v50 = v49 & 7;
      v71 = v71 & 0xF0 | v49 & 0xF;
      v51 = *((_DWORD *)a2 + 4);
      v70 = v51;
      v53 = (v49 & 6) != 0 && v50 != 3;
      if (v50 == 1 || v53)
      {
        v54 = v47[2];
        if ((v54 - 64) >= 0xFFFFFF80)
          v55 = &v69;
        else
          v55 = v69;
        if ((v54 - 64) >= 0xFFFFFF80)
          v56 = (unint64_t *)((char *)a2 + 8);
        else
          v56 = *v13;
        llvm::APInt::tcAssign((uint64_t)v55, v56, (const unint64_t *)((v54 + 64) >> 6));
        v47 = v68;
        v51 = v70;
      }
      v57 = v34 - 1;
      v58 = *v47 + v47[2] + ~v47[1];
      if (v58 + 1 < v34 - 1)
        v57 = v58 + 1;
      if (-2 - v58 >= v34)
        v57 = -2 - v58;
      v70 = v57 + v51;
      llvm::detail::IEEEFloat::normalize((uint64_t)&v68, 1, 0);
      v59 = v71;
      v60 = v68;
      if ((v71 & 7) == 1 && v68[4] != 1)
      {
        v61 = v68[2];
        if ((v61 - 64) >= 0xFFFFFF80)
          v62 = &v69;
        else
          v62 = v69;
        llvm::APInt::tcSetBit((uint64_t)v62, (unint64_t *)(v61 - 2));
        v60 = v68;
        v59 = v71;
      }
      v63 = v69;
      v64 = v70;
      v68 = &llvm::semBogus;
      v65 = &llvm::semBogus;
      if ((v76[2] - 64) <= 0xFFFFFF7F)
      {
        if (__p)
        {
          operator delete[](__p);
          v65 = v68;
        }
        else
        {
          v65 = &llvm::semBogus;
        }
      }
      v76 = v60;
      __p = v63;
      v78 = v64;
      v79 = v79 & 0xF0 | v59 & 0xF;
      if ((v65[2] - 64) <= 0xFFFFFF7F && v69)
        operator delete[](v69);
      goto LABEL_98;
    }
    if (v43 - v74 < 0)
      goto LABEL_64;
LABEL_98:
    v79 = v79 & 0xF7 | *((_BYTE *)this + 20) & 8;
    llvm::detail::IEEEFloat::addOrSubtractSpecials(this, (const llvm::detail::IEEEFloat *)&v76);
    v6 = v66;
    if ((_DWORD)v66 == 2)
    {
      v67 = llvm::detail::IEEEFloat::addOrSubtractSignificand(this, (const llvm::detail::IEEEFloat *)&v76, 1);
      v6 = llvm::detail::IEEEFloat::normalize((uint64_t)this, 1, v67);
    }
    v9 = *((unsigned __int8 *)this + 20);
    if ((v9 & 7) == 3)
    {
      if ((v79 & 7) != 3 || ((v79 ^ v9) & 8) == 0)
      {
        LOBYTE(v9) = v9 & 0xF7;
        *((_BYTE *)this + 20) = v9;
      }
      if (*(_DWORD *)(*(_QWORD *)this + 20) == 2)
      {
        LOBYTE(v9) = v9 & 0xF7;
        *((_BYTE *)this + 20) = v9;
      }
    }
    if ((v76[2] - 64) <= 0xFFFFFF7F && __p)
    {
      operator delete[](__p);
      LOBYTE(v9) = *((_BYTE *)this + 20);
    }
    if ((v9 & 6) == 0 || (v9 & 7) == 3 || (*((_BYTE *)a2 + 20) & 6) == 0 || (*((_BYTE *)a2 + 20) & 7) == 3)
      goto LABEL_7;
  }
  LOBYTE(v9) = *((_BYTE *)this + 20);
LABEL_7:
  if ((v9 & 7) == 3)
  {
    v10 = v9 & 0xF7;
    *((_BYTE *)this + 20) = v10 | v7 & 8;
    if (*(_DWORD *)(*(_QWORD *)this + 20) != 2)
      v10 |= v7 & 8;
    *((_BYTE *)this + 20) = v10;
  }
  return v6;
}

uint64_t llvm::detail::ilogb(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  int v2;
  uint64_t v3;
  BOOL v6;
  int v7;
  llvm::APInt *v8;
  void *Bit;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  _BOOL4 v16;
  unint64_t *v17;
  uint64_t v18;
  void *__p;
  int v20;
  char v21;

  v2 = *((_BYTE *)this + 20) & 7;
  if ((*((_BYTE *)this + 20) & 7) == 0)
    return 0x7FFFFFFFLL;
  if (v2 == 1)
    return 0x80000000;
  if (v2 == 3)
    return 2147483649;
  v6 = (*((_BYTE *)this + 20) & 6) == 0 || v2 == 3;
  if (v6 || *((_DWORD *)this + 4) != *(_DWORD *)(*(_QWORD *)this + 4))
    return *((unsigned int *)this + 4);
  v7 = *(_DWORD *)(*(_QWORD *)this + 8);
  v8 = (v7 - 64) >= 0xFFFFFF80 ? (llvm::detail *)((char *)this + 8) : (llvm::APInt *)*((_QWORD *)this + 1);
  Bit = (void *)llvm::APInt::tcExtractBit(v8, (const unint64_t *)(v7 - 1));
  if ((_DWORD)Bit)
    return *((unsigned int *)this + 4);
  v18 = *(_QWORD *)this;
  v10 = *(_DWORD *)(v18 + 8);
  v11 = v10 + 64;
  if ((v10 + 64) >= 0x80)
  {
    Bit = operator new[]((v11 >> 3) & 0x1FFFFFF8);
    __p = Bit;
  }
  v12 = *((_BYTE *)this + 20);
  v13 = v12 & 7;
  v21 = v12 & 0xF;
  v14 = *((_DWORD *)this + 4);
  v20 = v14;
  v16 = (v12 & 6) != 0 && v13 != 3;
  if (v13 == 1 || v16)
  {
    if ((v10 - 64) < 0xFFFFFF80)
    {
      v17 = (unint64_t *)*((_QWORD *)this + 1);
    }
    else
    {
      Bit = &__p;
      v17 = (unint64_t *)((char *)this + 8);
    }
    llvm::APInt::tcAssign((uint64_t)Bit, v17, (const unint64_t *)(v11 >> 6));
    v10 = *(_DWORD *)(*(_QWORD *)this + 8);
    v14 = v20;
  }
  v20 = v14 + v10 - 1;
  llvm::detail::IEEEFloat::normalize((uint64_t)&v18, 1, 0);
  v3 = (v20 - (v10 - 1));
  if ((*(_DWORD *)(v18 + 8) - 64) > 0xFFFFFF7F || !__p)
    return v3;
  operator delete[](__p);
  return v3;
}

void llvm::detail::IEEEFloat::fusedMultiplyAdd(llvm::detail::IEEEFloat *this, llvm::detail::IEEEFloat *a2, unint64_t *a3, int a4)
{
  unsigned __int8 *v7;
  char v8;
  int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  char v13;
  int v14;
  unsigned int v15;
  unint64_t *v16;
  int v17;
  char v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  void *__p;
  int v28;
  char v29;

  v7 = (unsigned __int8 *)this;
  v8 = *((_BYTE *)this + 20);
  *((_BYTE *)this + 20) = *((_BYTE *)a2 + 20) & 8 ^ v8;
  v9 = v8 & 6;
  v10 = v8 & 7;
  if (v9)
    v11 = v10 == 3;
  else
    v11 = 1;
  if (v11
    || ((*((_BYTE *)a2 + 20) & 6) != 0 ? (v12 = (*((_BYTE *)a2 + 20) & 7) == 3) : (v12 = 1),
        v12 || (v13 = *((_BYTE *)a3 + 20), (v13 & 6) == 0)))
  {
    llvm::detail::IEEEFloat::multiplySpecials(this, a2);
    if (!v21)
    {
      llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)v7, (const llvm::detail::IEEEFloat *)a3);
      if (v22 == 2)
      {
        v23 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)v7, (const llvm::detail::IEEEFloat *)a3, 0);
        llvm::detail::IEEEFloat::normalize((uint64_t)v7, a4, v23);
      }
      v24 = v7[20];
      if ((v24 & 7) == 3)
      {
        v25 = *((unsigned __int8 *)a3 + 20);
        if ((v25 & 7) != 3 || ((v25 ^ v24) & 8) != 0)
        {
          LOBYTE(v24) = v24 & 0xF7 | (8 * (a4 == 3));
          v7[20] = v24;
        }
        if (*(_DWORD *)(*(_QWORD *)v7 + 20) == 2)
        {
          v20 = v24 & 0xF7;
LABEL_36:
          v7[20] = v20;
        }
      }
    }
  }
  else
  {
    v26 = *a3;
    v14 = *(_DWORD *)(v26 + 8);
    v15 = v14 + 64;
    if ((v14 + 64) >= 0x80)
    {
      this = (llvm::detail::IEEEFloat *)operator new[]((v15 >> 3) & 0x1FFFFFF8);
      __p = this;
    }
    v29 = v13 & 0xF;
    v28 = *((_DWORD *)a3 + 4);
    if ((v13 & 7) != 3)
    {
      if ((v14 - 64) < 0xFFFFFF80)
      {
        v16 = (unint64_t *)a3[1];
      }
      else
      {
        this = (llvm::detail::IEEEFloat *)&__p;
        v16 = a3 + 1;
      }
      llvm::APInt::tcAssign((uint64_t)this, v16, (const unint64_t *)(v15 >> 6));
    }
    v17 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t **)v7, (uint64_t)a2, (uint64_t)&v26);
    if ((*(_DWORD *)(v26 + 8) - 64) <= 0xFFFFFF7F && __p)
      operator delete[](__p);
    v18 = llvm::detail::IEEEFloat::normalize((uint64_t)v7, a4, v17);
    if (v17)
      v18 |= 0x10u;
    v19 = v7[20];
    if ((v19 & 7) == 3 && (v18 & 8) == 0 && ((*((unsigned __int8 *)a3 + 20) ^ v19) & 8) != 0)
    {
      v20 = v19 & 0xF7;
      v7[20] = v20 | (8 * (a4 == 3));
      if (*(_DWORD *)(*(_QWORD *)v7 + 20) != 2)
        v20 |= 8 * (a4 == 3);
      goto LABEL_36;
    }
  }
}

uint64_t llvm::detail::IEEEFloat::convertFromAPInt(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  void **p_p;
  unint64_t v12;
  void **v13;
  uint64_t v14;
  void *v16;
  unsigned int v17;
  void *__p;
  unsigned int v19;

  v7 = *(unsigned int *)(a2 + 8);
  v8 = (unint64_t *)((unint64_t)(v7 + 63) >> 6);
  v19 = *(_DWORD *)(a2 + 8);
  if (v7 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, (const void **)a2);
    LODWORD(v7) = v19;
    v9 = (unint64_t)__p;
    v10 = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = v10 & 0xF7;
    if (!a3)
      goto LABEL_21;
  }
  else
  {
    v9 = *(_QWORD *)a2;
    __p = *(void **)a2;
    v10 = *(_BYTE *)(a1 + 20);
    *(_BYTE *)(a1 + 20) = v10 & 0xF7;
    if (!a3)
      goto LABEL_21;
  }
  p_p = (void **)(v9 + 8 * ((v7 - 1) >> 6));
  if (v7 < 0x41)
    p_p = &__p;
  if ((((unint64_t)*p_p >> (v7 - 1)) & 1) != 0)
  {
    *(_BYTE *)(a1 + 20) = v10 | 8;
    v17 = v7;
    if (v7 >= 0x41)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v16, (const void **)&__p);
      LODWORD(v7) = v17;
      if (v17 > 0x40)
      {
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v16);
LABEL_15:
        llvm::APInt::operator++((uint64_t **)&v16);
        LODWORD(v7) = v17;
        v9 = (unint64_t)v16;
        v17 = 0;
        if (v19 > 0x40 && __p)
        {
          operator delete[](__p);
          __p = (void *)v9;
          v19 = v7;
          if (v17 >= 0x41 && v16)
          {
            operator delete[](v16);
            LODWORD(v7) = v19;
            v9 = (unint64_t)__p;
          }
        }
        else
        {
          __p = v16;
          v19 = v7;
        }
        goto LABEL_21;
      }
      v9 = (unint64_t)v16;
    }
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!(_DWORD)v7)
      v12 = 0;
    v16 = (void *)(v12 & ~v9);
    goto LABEL_15;
  }
LABEL_21:
  if (v7 >= 0x41)
    v13 = (void **)v9;
  else
    v13 = &__p;
  v14 = llvm::detail::IEEEFloat::convertFromUnsignedParts(a1, (llvm::APInt *)v13, v8, a4);
  if (v19 >= 0x41 && __p)
    operator delete[](__p);
  return v14;
}

uint64_t llvm::detail::IEEEFloat::convertToSignExtendedInteger(uint64_t a1, llvm::APInt *this, uint64_t a3, unsigned int a4, int a5, int a6, _BYTE *a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v13;
  _BOOL4 v14;
  const unint64_t *v18;
  llvm::APInt *v19;
  unsigned int v20;
  const unint64_t *v21;
  unint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;

  *a7 = 0;
  v7 = *(_BYTE *)(a1 + 20) & 7;
  if (v7 < 2)
    return 1;
  v13 = (a4 + 63) >> 6;
  if (v7 == 3)
  {
    llvm::APInt::tcSet(this, 0, (a4 + 63) >> 6);
    LOBYTE(v14) = ((*(unsigned __int8 *)(a1 + 20) >> 3) & 1) == 0;
LABEL_5:
    v8 = 0;
    *a7 = v14;
    return v8;
  }
  v18 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)a1 + 8);
  v19 = (llvm::APInt *)(a1 + 8);
  if (((_DWORD)v18 - 64) <= 0xFFFFFF7F)
    v19 = *(llvm::APInt **)(a1 + 8);
  v20 = *(_DWORD *)(a1 + 16);
  if ((v20 & 0x80000000) != 0)
  {
    v31 = v13;
    llvm::APInt::tcSet(this, 0, v13);
    v24 = *(_DWORD *)(*(_QWORD *)a1 + 8) + ~*(_DWORD *)(a1 + 16);
    if (!v24)
    {
LABEL_18:
      v13 = v31;
      goto LABEL_23;
    }
LABEL_15:
    v25 = *(_DWORD *)(*(_QWORD *)a1 + 8) + 64;
    v26 = llvm::APInt::tcLSB(v19, (const unint64_t *)(v25 >> 6));
    if (v26 < v24)
    {
      if (v26 + 1 != v24 && (v25 & 0xFFFFFFC0) >= v24)
        llvm::APInt::tcExtractBit(v19, (const unint64_t *)(v24 - 1));
      __asm { BR              X12 }
    }
    goto LABEL_18;
  }
  if (v20 >= a4)
    return 1;
  v21 = (const unint64_t *)(v20 + 1);
  if (v18 > v21)
  {
    v31 = v13;
    v23 = (unint64_t *)v13;
    v24 = (_DWORD)v18 - (_DWORD)v21;
    llvm::APInt::tcExtract(this, v23, (uint64_t)v19, v21, (_DWORD)v18 - (_DWORD)v21);
    if (!v24)
      goto LABEL_18;
    goto LABEL_15;
  }
  llvm::APInt::tcExtract(this, (unint64_t *)v13, (uint64_t)v19, v18, 0);
  llvm::APInt::tcShiftLeft(this, (unint64_t *)v13, (_DWORD)v21 - *(_DWORD *)(*(_QWORD *)a1 + 8));
LABEL_23:
  v27 = llvm::APInt::tcMSB(this, (const unint64_t *)v13);
  v28 = v27 + 1;
  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
  {
    if ((a5 & 1) != 0)
    {
      if (v28 == a4)
      {
        if (llvm::APInt::tcLSB(this, (const unint64_t *)v13) == v27)
          goto LABEL_36;
      }
      else if (v28 <= a4)
      {
LABEL_36:
        llvm::APInt::tcNegate((int8x16_t *)this, (unint64_t *)v13);
        LOBYTE(v14) = 1;
        goto LABEL_5;
      }
    }
    else if (v27 == -1)
    {
      goto LABEL_36;
    }
    return 1;
  }
  v29 = (a5 ^ 1) + a4;
  v30 = v28 >= v29;
  v14 = v28 < v29;
  if (v30)
    v8 = 1;
  else
    v8 = 16;
  if (v14)
    goto LABEL_5;
  return v8;
}

uint64_t llvm::detail::IEEEFloat::convertToInteger(uint64_t a1, llvm::APInt *a2, uint64_t a3, unsigned int a4, int a5, int a6, _BYTE *a7)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v11 = llvm::detail::IEEEFloat::convertToSignExtendedInteger(a1, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)v11 != 1)
    return v11;
  v12 = (a4 + 63) >> 6;
  if ((*(_BYTE *)(a1 + 20) & 7) != 1)
  {
    if ((*(_BYTE *)(a1 + 20) & 8) != 0)
    {
      v13 = 0;
      LOBYTE(v14) = a5;
      if (!a5)
        goto LABEL_10;
    }
    else
    {
      v14 = a4 - a5;
      v15 = a4 - a5 - 65;
      if (a4 - a5 < 0x41)
      {
        v13 = 0;
        if (!v14)
          goto LABEL_10;
      }
      else
      {
        memset(a2, 255, 8 * (v15 >> 6) + 8);
        v13 = (v15 >> 6) + 1;
        v16 = v14 - (v15 & 0xFFFFFFC0);
        LOBYTE(v14) = v16 - 64;
        if (v16 == 64)
          goto LABEL_10;
      }
    }
    *((_QWORD *)a2 + v13++) = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
    goto LABEL_10;
  }
  v13 = 0;
LABEL_10:
  if (v13 < v12)
    bzero((char *)a2 + 8 * v13, 8 * (v12 + ~v13) + 8);
  if ((*(_BYTE *)(a1 + 20) & 8) != 0 && a5)
    llvm::APInt::tcShiftLeft(a2, (unint64_t *)((a4 + 63) >> 6), a4 - 1);
  return v11;
}

uint64_t llvm::detail::IEEEFloat::convertFromUnsignedParts(uint64_t a1, llvm::APInt *this, unint64_t *a3, int a4)
{
  int v8;
  const unint64_t *v9;
  const unint64_t *v10;
  llvm::APInt *v11;
  unint64_t *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF8 | 2;
  v8 = llvm::APInt::tcMSB(this, a3);
  v9 = (const unint64_t *)(v8 + 1);
  v10 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)a1 + 8);
  v11 = (llvm::APInt *)(a1 + 8);
  if (((_DWORD)v10 - 64) <= 0xFFFFFF7F)
    v11 = *(llvm::APInt **)v11;
  v12 = (unint64_t *)(((_DWORD)v10 + 64) >> 6);
  v13 = (_DWORD)v9 - (_DWORD)v10;
  if (v9 >= v10)
  {
    *(_DWORD *)(a1 + 16) = v8;
    v15 = llvm::APInt::tcLSB(this, a3);
    if (v15 >= v13)
    {
      v14 = 0;
    }
    else if (v15 + 1 == v13)
    {
      v14 = 2;
    }
    else if (v13 <= (_DWORD)a3 << 6
           && llvm::APInt::tcExtractBit(this, (const unint64_t *)(v13 - 1)))
    {
      v14 = 3;
    }
    else
    {
      v14 = 1;
    }
    llvm::APInt::tcExtract(v11, v12, (uint64_t)this, v10, v13);
  }
  else
  {
    *(_DWORD *)(a1 + 16) = (_DWORD)v10 - 1;
    llvm::APInt::tcExtract(v11, v12, (uint64_t)this, v9, 0);
    v14 = 0;
  }
  return llvm::detail::IEEEFloat::normalize(a1, a4, v14);
}

uint64_t llvm::detail::IEEEFloat::convertFromHexadecimalString@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  llvm::APInt **v11;
  llvm::APInt *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  const char *v20;
  char v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t result;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  const char *v46;
  __int16 v47;

  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF8 | 2;
  v10 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v11 = (llvm::APInt **)(a1 + 8);
  v12 = (llvm::APInt *)(a1 + 8);
  if ((v10 - 64) <= 0xFFFFFF7F)
    v12 = *v11;
  llvm::APInt::tcSet(v12, 0, (v10 + 64) >> 6);
  *(_DWORD *)(a1 + 16) = 0;
  v14 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if ((v14 - 64) <= 0xFFFFFF7F)
    v11 = (llvm::APInt **)*v11;
  v15 = &a2[a3];
  if (a3)
  {
    v16 = a3 - 1;
    v17 = a2;
    while (1)
    {
      v18 = *v17;
      if (v18 != 48)
        break;
      ++v17;
      if (--v16 == -1)
      {
        v19 = &a2[a3];
        goto LABEL_15;
      }
    }
    if (v18 == 46)
    {
      if (a3 == 1)
        goto LABEL_12;
      v19 = v17;
      while (v16)
      {
        v42 = *++v19;
        --v16;
        if (v42 != 48)
          goto LABEL_16;
      }
      v19 = &a2[a3];
      goto LABEL_16;
    }
    v19 = v17;
  }
  else
  {
    v19 = a2;
  }
LABEL_15:
  v17 = &a2[a3];
LABEL_16:
  if (v19 == v15)
  {
LABEL_62:
    v20 = "Hex strings require an exponent";
    goto LABEL_63;
  }
  v21 = 0;
  v22 = 0;
  v23 = v14 & 0xFFFFFFC0;
  v24 = v23 + 64;
  v25 = v19;
  while (1)
  {
    v27 = *v25;
    if ((_DWORD)v27 == 46)
    {
      if (v17 != v15)
      {
        v20 = "String contains multiple dots";
        goto LABEL_63;
      }
      v17 = v25++;
      goto LABEL_19;
    }
    v13 = llvm::hexDigitValue(char)::LUT[v27];
    if ((_DWORD)v13 == -1)
      break;
    ++v25;
    if (v24)
    {
      v24 -= 4;
      v26 = v13 << v24;
      v13 = 8 * (v24 >> 6);
      *(llvm::APInt **)((char *)v11 + v13) = (llvm::APInt *)(*(unint64_t *)((char *)v11 + v13) | v26);
    }
    else
    {
      if ((v21 & 1) == 0)
      {
        if ((unint64_t)(v27 - 57) > 0xFFFFFFFFFFFFFFF6)
        {
          if ((v13 & 0xFFFFFFF7) != 0)
          {
            v22 = v22 & 0xFFFFFFFF00000000 | 1;
          }
          else
          {
            v28 = v25;
            if (v25 == v15)
            {
LABEL_68:
              v20 = "Invalid trailing hexadecimal fraction!";
              goto LABEL_63;
            }
            while (1)
            {
              v29 = *v28;
              if ((_DWORD)v29 != 48 && (_DWORD)v29 != 46)
                break;
              if (++v28 == v15)
                goto LABEL_68;
            }
            v30 = v22 & 0xFFFFFFFF00000000;
            if (llvm::hexDigitValue(char)::LUT[v29] == -1)
            {
              v22 = v30 | (2 * ((_DWORD)v27 != 48));
            }
            else
            {
              if ((_DWORD)v27 == 48)
                v31 = 1;
              else
                v31 = 3;
              v22 = v31 | v30;
            }
          }
        }
        else
        {
          v22 = v22 & 0xFFFFFFFF00000000 | 3;
        }
      }
      v24 = 0;
      v21 = 1;
    }
LABEL_19:
    if (v25 == v15)
      goto LABEL_62;
  }
  if (v25 == v15)
    goto LABEL_62;
  if ((v27 | 0x20) != 0x70)
  {
    v20 = "Invalid character in significand";
    goto LABEL_63;
  }
  if (v25 == a2 || v17 != v15 && v25 - a2 == 1)
  {
LABEL_12:
    v20 = "Significand has no digits";
    goto LABEL_63;
  }
  if (v25 == v19)
  {
LABEL_82:
    result = llvm::detail::IEEEFloat::normalize(a1, a4, v22);
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = result;
    return result;
  }
  if (v17 == v15)
    v32 = (int)v25;
  else
    v32 = (int)v17;
  v33 = (char *)(v25 + 1);
  if (v25 + 1 == v15
    || ((v34 = *v33, v34 == 45) || v34 == 43) && (v33 = (char *)(v25 + 2), v25 + 2 == v15))
  {
    v20 = "Exponent has no digits";
    goto LABEL_63;
  }
  if (v33 == (char *)v15)
  {
    v35 = 0;
LABEL_73:
    v43 = *(_DWORD *)(*(_QWORD *)a1 + 8)
        - v23
        + 4 * (v32 - (_DWORD)v19 + ((v32 - (_DWORD)v19) >> 31))
        - 65;
    if (v43 != (__int16)v43 || (v34 != 45 ? (v44 = v35) : (v44 = -v35), v45 = v44 + v43, v45 != (__int16)v45))
    {
LABEL_78:
      if (v34 == 45)
        v45 = -32768;
      else
        v45 = 0x7FFF;
    }
    *(_DWORD *)(a1 + 16) = v45;
    goto LABEL_82;
  }
  v35 = 0;
  while (1)
  {
    v36 = *v33 - 48;
    if (v36 >= 0xA)
      break;
    v35 = v36 + 10 * v35;
    if (v35 >= 0x8000)
      goto LABEL_78;
    if (++v33 == (char *)v15)
      goto LABEL_73;
  }
  v20 = "Invalid character in exponent";
LABEL_63:
  v46 = v20;
  v47 = 259;
  v37 = llvm::inconvertibleErrorCode((llvm *)v13);
  v39 = v38;
  v40 = operator new(0x38uLL);
  result = llvm::StringError::StringError((uint64_t)v40, (llvm::Twine *)&v46, v37, v39);
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = result;
  return result;
}

uint64_t llvm::createError(llvm *a1, llvm::Twine *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t result;

  v4 = llvm::inconvertibleErrorCode(a1);
  v6 = v5;
  v7 = operator new(0x38uLL);
  result = llvm::StringError::StringError((uint64_t)v7, a2, v4, v6);
  *(_QWORD *)a1 = result;
  return result;
}

unint64_t *llvm::detail::IEEEFloat::roundSignificandWithExponent()
{
  unint64_t *v0;
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  llvm::APInt *v5;
  _BYTE *v6;
  _BOOL4 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  llvm::APInt *v12;
  llvm::APInt *v13;
  unsigned int v14;
  int *v15;
  int v16;
  unint64_t *v17;
  BOOL v18;
  unint64_t v19;
  const unint64_t *v20;
  unsigned int v21;
  int v22;
  void *v23;
  char v24;
  int v25;
  llvm::APInt *v26;
  int v27;
  unsigned int v28;
  void *p_p;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  _BOOL4 v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v50;
  uint64_t v51;
  int v52;
  llvm::APInt *v53;
  int v54;
  llvm::APInt *v55;
  int v56;
  unsigned int v57;
  int v58;
  int v60;
  _BOOL4 v61;
  llvm::APInt *v62;
  unsigned int v63;
  int v64;
  _DWORD v65[3];
  uint64_t v66;
  uint64_t v67;
  unint64_t v68[600];
  _DWORD *v69;
  void *__p;
  int v71;
  char v72;
  int v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[28];
  uint64_t v77;
  void *v78;
  int v79;
  char v80;
  uint64_t v81;

  v1 = MEMORY[0x1E0C80A78]();
  v63 = v4;
  v62 = v5;
  v6 = (_BYTE *)v1;
  v81 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v65[1] = 0xFFFF800100007FFFLL;
  v66 = 0;
  v67 = 0;
  v60 = v3;
  v8 = v3 == 1 || v3 == 4;
  v61 = v8;
  v9 = (*(_DWORD *)(*(_QWORD *)v1 + 8) + 74) >> 6;
  if (v2 >= 0)
    v10 = v2;
  else
    v10 = -v2;
  v77 = 390625;
  memset(v76, 0, sizeof(v76));
  v75 = 0u;
  v74 = 0u;
  v64 = v2;
  v65[0] = 1;
  v73 = 1;
  v68[0] = llvm::powerOf5(unsigned long long *,unsigned int)::firstEightPowers[v10 & 7];
  if (v10 < 8)
    goto LABEL_29;
  v11 = v10 >> 3;
  v0 = v68;
  v12 = (llvm::APInt *)&v69;
  v13 = (llvm::APInt *)&v77;
  v65[0] = 1;
  v14 = -1;
  v15 = &v73;
  do
  {
    v19 = *v15;
    if ((_DWORD)v19)
    {
      if ((v11 & 1) == 0)
        goto LABEL_24;
    }
    else
    {
      v20 = (const unint64_t *)*(&v73 + v14);
      llvm::APInt::tcFullMultiply(v13, (unint64_t *)v13 - (_QWORD)v20, (unint64_t *)v13 - (_QWORD)v20, v20, v20);
      v21 = 2 * (_DWORD)v20 - 1;
      if (*((_QWORD *)v13 + v21))
        v19 = (2 * (_DWORD)v20);
      else
        v19 = v21;
      *v15 = v19;
      if ((v11 & 1) == 0)
      {
LABEL_24:
        v17 = v0;
        goto LABEL_15;
      }
    }
    llvm::APInt::tcFullMultiply(v12, v0, (unint64_t *)v13, (const unint64_t *)v65[0], (const unint64_t *)v19);
    v16 = v19 + v65[0];
    if (!*((_QWORD *)v12 + (v19 + v65[0] - 1)))
      v16 = v19 + v65[0] - 1;
    v65[0] = v16;
    v17 = (unint64_t *)v12;
    v12 = (llvm::APInt *)v0;
    v0 = v17;
LABEL_15:
    v13 = (llvm::APInt *)((char *)v13 + 8 * v19);
    ++v14;
    ++v15;
    v18 = v11 >= 2;
    v11 >>= 1;
  }
  while (v18);
  if (v17 != v68)
    llvm::APInt::tcAssign((uint64_t)v68, v17, (const unint64_t *)v65[0]);
LABEL_29:
  while (2)
  {
    LODWORD(v66) = (v9 << 6) - 1;
    v22 = *(_DWORD *)(*(_QWORD *)v6 + 8);
    v77 = (uint64_t)&v65[1];
    if (v9 << 6 <= 0x7F)
    {
      v23 = v78;
    }
    else
    {
      v23 = operator new[]((8 * v9) & 0x1FFFFFFF);
      v78 = v23;
    }
    v80 = v80 & 0xF0 | 3;
    v79 = v65[2] - 1;
    if ((v9 << 6) - 65 >= 0xFFFFFF80)
      v23 = &v78;
    llvm::APInt::tcSet((llvm::APInt *)v23, 0, v9 & 0x3FFFFFF);
    v24 = v80 & 0xF0;
    v80 = v80 & 0xF0 | v6[20] & 8 | 3;
    if (*(_DWORD *)(v77 + 20) == 2)
      v80 = v24 | 3;
    v79 = *(_DWORD *)(v77 + 4) - 1;
    v25 = *(_DWORD *)(v77 + 8);
    if ((v25 - 64) >= 0xFFFFFF80)
      v26 = (llvm::APInt *)&v78;
    else
      v26 = (llvm::APInt *)v78;
    llvm::APInt::tcSet(v26, 0, (v25 + 64) >> 6);
    v69 = &v65[1];
    v27 = v66;
    v28 = v66 + 64;
    if ((v66 + 64) <= 0x7F)
    {
      p_p = __p;
    }
    else
    {
      p_p = operator new[]((v28 >> 3) & 0x1FFFFFF8);
      __p = p_p;
    }
    v30 = (v9 << 6) - 1 - v22;
    v72 = v72 & 0xF0 | 3;
    v71 = v65[2] - 1;
    if ((v27 - 64) >= 0xFFFFFF80)
      p_p = &__p;
    llvm::APInt::tcSet((llvm::APInt *)p_p, 0, v28 >> 6);
    v31 = llvm::detail::IEEEFloat::convertFromUnsignedParts((uint64_t)&v77, v62, (unint64_t *)v63, 1);
    v32 = llvm::detail::IEEEFloat::convertFromUnsignedParts((uint64_t)&v69, (llvm::APInt *)v68, (unint64_t *)v65[0], 1);
    v79 += v64;
    if (v64 < 0)
    {
      v33 = llvm::detail::IEEEFloat::divideSignificand((llvm::detail::IEEEFloat *)&v77, (const llvm::detail::IEEEFloat *)&v69);
      v36 = *(_DWORD *)(*(_QWORD *)v6 + 4);
      v35 = v30;
      v37 = v36 - v79;
      if (v36 > v79)
      {
        v35 = v37 + v30;
        if (v37 + v30 >= v66)
          v30 = v66;
        else
          v30 += v37;
      }
      v34 = 2 * ((v32 | v33) != 0);
    }
    else
    {
      v33 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t **)&v77, (const llvm::detail::IEEEFloat *)&v69);
      v34 = v32 != 0;
      v35 = v30;
    }
    v38 = v33 != 0;
    if (v31)
      ++v34;
    v39 = 2 * v38;
    v40 = v38 | (2 * v34);
    if (v34)
      v41 = v40;
    else
      v41 = v39;
    if ((*(_DWORD *)(v77 + 8) - 64) >= 0xFFFFFF80)
      v42 = &v78;
    else
      v42 = v78;
    v43 = (v30 - 1) >> 6;
    v44 = v42[v43] & (0xFFFFFFFFFFFFFFFFLL >> ((v30 - 1) & 0x3F ^ 0x3F));
    v45 = 1 << (v30 - 1);
    if (!v61)
      v45 = 0;
    if (v30 - 1 <= 0x3F)
    {
      v46 = v44 - v45;
      if ((uint64_t)(v44 - v45) < 0)
        v46 = v45 - v44;
      v47 = 2 * v46;
      if (2 * v46 < v41)
        goto LABEL_93;
LABEL_79:
      v52 = *(_DWORD *)(*(_QWORD *)v6 + 8);
      v53 = (llvm::APInt *)(v6 + 8);
      if ((v52 - 64) <= 0xFFFFFF7F)
        v53 = (llvm::APInt *)*((_QWORD *)v6 + 1);
      llvm::APInt::tcExtract(v53, (unint64_t *)((v52 + 64) >> 6), (uint64_t)v42, (const unint64_t *)(v66 - v30), v30);
      *((_DWORD *)v6 + 4) = v79 + v30 + *(_DWORD *)(*(_QWORD *)v6 + 8) - v66;
      v54 = *(_DWORD *)(v77 + 8);
      if ((v54 - 64) >= 0xFFFFFF80)
        v55 = (llvm::APInt *)&v78;
      else
        v55 = (llvm::APInt *)v78;
      v56 = v54 + 64;
      v57 = llvm::APInt::tcLSB(v55, (const unint64_t *)((v54 + 64) >> 6));
      if (v57 >= v35)
      {
        v58 = 0;
      }
      else if (v57 + 1 == v35)
      {
        v58 = 2;
      }
      else if ((v56 & 0xFFFFFFC0) >= v35
             && llvm::APInt::tcExtractBit(v55, (const unint64_t *)(v35 - 1)))
      {
        v58 = 3;
      }
      else
      {
        v58 = 1;
      }
      v0 = (unint64_t *)llvm::detail::IEEEFloat::normalize((uint64_t)v6, v60, v58);
      goto LABEL_93;
    }
    if (v44 == v45)
    {
      v48 = v43 - 1;
      while (v48)
      {
        if (v42[v48--])
          goto LABEL_75;
      }
      v47 = 2 * *v42;
      if (v47 >= v41)
        goto LABEL_79;
    }
    else
    {
      if (v44 != v45 - 1)
      {
LABEL_75:
        v47 = -2;
        goto LABEL_79;
      }
      v50 = v43 - 1;
      while (v50)
      {
        v51 = v42[v50--];
        if (v51 != -1)
          goto LABEL_75;
      }
      v47 = -2 * *v42;
      if (v47 >= v41)
        goto LABEL_79;
    }
LABEL_93:
    if ((v69[2] - 64) <= 0xFFFFFF7F && __p)
      operator delete[](__p);
    if ((*(_DWORD *)(v77 + 8) - 64) <= 0xFFFFFF7F && v78)
      operator delete[](v78);
    v9 *= 2;
    if (v47 < v41)
      continue;
    return v0;
  }
}

void llvm::detail::IEEEFloat::convertFromDecimalString(_BYTE *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v6;
  char *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  const char *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  int v25;
  _BOOL4 v26;
  BOOL v27;
  _BOOL4 v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  llvm::APInt *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  llvm::APInt *v40;
  char *v41;
  int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char *v50;
  unsigned int v51;
  const char *v52;
  __int16 v53;

  v6 = a2;
  v9 = (char *)&a2[a3];
  if (a3)
  {
    v10 = a3 - 1;
    v11 = a2;
    while (1)
    {
      v12 = *v11;
      if (v12 != 48)
        break;
      ++v11;
      if (--v10 == -1)
      {
        v13 = &a2[a3];
        goto LABEL_15;
      }
    }
    if (v12 == 46)
    {
      if (a3 == 1)
      {
LABEL_30:
        v17 = "Significand has no digits";
        goto LABEL_88;
      }
      v13 = v11;
      while (v10)
      {
        v14 = *++v13;
        --v10;
        if (v14 != 48)
          goto LABEL_16;
      }
      v13 = &a2[a3];
      goto LABEL_36;
    }
    v13 = v11;
LABEL_15:
    v11 = &a2[a3];
LABEL_16:
    if (v13 == (unsigned __int8 *)v9)
      goto LABEL_36;
  }
  else
  {
    v13 = a2;
    v11 = a2;
    if (a2 == (unsigned __int8 *)v9)
    {
LABEL_36:
      v18 = 0;
      v19 = &a2[a3];
      if (v9 == (char *)v13)
        goto LABEL_33;
      goto LABEL_37;
    }
  }
  v15 = v13;
  while (1)
  {
    v16 = *v15;
    if (v16 == 46)
    {
      if (v11 != (unsigned __int8 *)v9)
      {
        v17 = "String contains multiple dots";
        goto LABEL_88;
      }
      if (v15 + 1 == (unsigned __int8 *)v9)
      {
        v18 = 0;
        v19 = &a2[a3];
        v11 = v15;
        if (v9 != (char *)v13)
          goto LABEL_37;
        goto LABEL_33;
      }
      v16 = v15[1];
      v11 = v15++;
    }
    if (((char)v16 - 58) < 0xFFFFFFF6)
      break;
    if (++v15 == (unsigned __int8 *)v9)
      goto LABEL_36;
  }
  if (v15 == (unsigned __int8 *)v9)
    goto LABEL_36;
  if ((v16 | 0x20) != 0x65)
    goto LABEL_87;
  if (v15 == a2 || v11 != (unsigned __int8 *)v9 && v15 - a2 == 1)
    goto LABEL_30;
  v41 = (char *)(v15 + 1);
  if (v15 + 1 == (unsigned __int8 *)v9
    || ((v42 = *v41, v42 == 45) || v42 == 43) && v15 + 2 == (unsigned __int8 *)v9)
  {
    v18 = 0;
    if (v11 == (unsigned __int8 *)v9)
      v11 = v15;
    v19 = v15;
    if (v15 != v13)
      goto LABEL_37;
LABEL_33:
    v20 = 0;
    v21 = v13;
    if (v13 == (unsigned __int8 *)v9)
    {
LABEL_49:
      v29 = a1[20] & 0xF8 | 3;
      a1[20] = v29;
      v30 = 0;
      if (*(_DWORD *)(*(_QWORD *)a1 + 20) == 2)
        a1[20] = v29 & 0xF3;
      goto LABEL_75;
    }
    goto LABEL_48;
  }
  if (v42 == 45 || (v43 = *v41, v42 == 43))
  {
    v41 = (char *)(v15 + 2);
    if (v15 + 2 == (unsigned __int8 *)v9)
    {
      v17 = "Exponent has no digits";
      goto LABEL_88;
    }
    v43 = *v41;
  }
  v44 = v43 - 48;
  if (v44 > 9)
  {
LABEL_85:
    v17 = "Invalid character in exponent";
    goto LABEL_88;
  }
  v50 = v41 + 1;
  while (v50 != v9)
  {
    v51 = *v50 - 48;
    if (v51 >= 0xA)
      goto LABEL_85;
    v44 = v51 + 10 * v44;
    ++v50;
    if (v44 >> 6 >= 0x177)
    {
      v44 = 24000;
      break;
    }
  }
  if (v42 == 45)
    v18 = -v44;
  else
    v18 = v44;
  if (v11 == (unsigned __int8 *)v9)
    v11 = v15;
  v19 = v15;
  if (v15 == v13)
    goto LABEL_33;
LABEL_37:
  if (v19 != a2)
  {
LABEL_38:
    v22 = v19 - 1;
    while (v22 != a2)
    {
      v24 = *v22--;
      v23 = v24;
      if (v24 != 48)
      {
        if (v23 == 46)
        {
          v19 = v22 + 1;
          goto LABEL_38;
        }
        v21 = v22 + 1;
        goto LABEL_45;
      }
    }
  }
  v21 = a2;
LABEL_45:
  v25 = (_DWORD)v11 - (_DWORD)v21;
  v26 = v11 > v13;
  v27 = v11 >= v21;
  v28 = v11 > v21;
  if (v27)
    v26 = 0;
  v20 = v18 + v25 - v28 + (_DWORD)v21 - (_DWORD)v13 - v26;
  if (v13 == (unsigned __int8 *)v9)
    goto LABEL_49;
LABEL_48:
  if (((char)*v13 - 58) <= 0xFFFFFFF5)
    goto LABEL_49;
  if (v20 >= 51085)
    goto LABEL_53;
  v32 = *(_DWORD **)a1;
  if (v20 < -51082 || 28738 * v20 + 28738 <= 8651 * (v32[1] - v32[2]))
  {
    a1[20] = a1[20] & 0xF8 | 2;
    v39 = v32[2];
    v40 = (llvm::APInt *)(a1 + 8);
    if ((v39 - 64) <= 0xFFFFFF7F)
      v40 = *(llvm::APInt **)v40;
    llvm::APInt::tcSet(v40, 0, (v39 + 64) >> 6);
    v31 = llvm::detail::IEEEFloat::normalize((uint64_t)a1, a4, 1);
    goto LABEL_74;
  }
  if (42039 * v20 - 42039 >= 12655 * *v32)
  {
LABEL_53:
    v31 = llvm::detail::IEEEFloat::handleOverflow((_DWORD **)a1, a4);
LABEL_74:
    v30 = v31;
LABEL_75:
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = v30;
    return;
  }
  v33 = (llvm::APInt *)operator new[](((((196 * ((int)v21 - (int)v13) + 196) / 0x3Bu + 64) >> 3) & 0x1FFFFF8) + 8);
  v34 = 0;
LABEL_58:
  v35 = 0;
  v36 = 1;
  while (1)
  {
    v37 = *v6;
    if (v37 == 46)
    {
      if (++v6 == (unsigned __int8 *)v9)
      {
        v6 = (unsigned __int8 *)v9;
LABEL_67:
        llvm::APInt::tcMultiplyPart(v33, (unint64_t *)v33, v36, v35, v34, v34 + 1, 0);
        if (*((_QWORD *)v33 + v34))
          ++v34;
        if (v6 > v21)
        {
          a1[20] = a1[20] & 0xF8 | 2;
          v30 = llvm::detail::IEEEFloat::roundSignificandWithExponent();
          operator delete[](v33);
          goto LABEL_75;
        }
        goto LABEL_58;
      }
      LOBYTE(v37) = *v6;
    }
    v38 = (char)v37 - 48;
    if (v38 > 9)
      break;
    ++v6;
    v36 *= 10;
    v35 = 10 * v35 + v38;
    if (v6 > v21 || v36 >= 0x1999999999999999)
      goto LABEL_67;
  }
  operator delete[](v33);
LABEL_87:
  v17 = "Invalid character in significand";
LABEL_88:
  v52 = v17;
  v53 = 259;
  v45 = llvm::inconvertibleErrorCode((llvm *)a1);
  v47 = v46;
  v48 = operator new(0x38uLL);
  v49 = llvm::StringError::StringError((uint64_t)v48, (llvm::Twine *)&v52, v45, v47);
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v49;
}

uint64_t llvm::detail::IEEEFloat::convertFromStringSpecials(llvm::detail::IEEEFloat *a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  int v7;
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  llvm::APInt *v16;
  uint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  void *__p;
  unsigned int v26;
  unsigned __int8 *v27;
  unint64_t v28;

  if (a3 < 3)
    return 0;
  if (a3 == 8)
  {
    if (*(_QWORD *)a2 == 0x5954494E49464E49)
    {
LABEL_32:
      v12 = *(_DWORD **)a1;
      if (*(_DWORD *)(*(_QWORD *)a1 + 16) != 1)
      {
        *((_BYTE *)a1 + 20) &= 0xF0u;
        *((_DWORD *)a1 + 4) = *v12 + 1;
        v15 = v12[2];
        v16 = (llvm::detail::IEEEFloat *)((char *)a1 + 8);
        if ((v15 - 64) <= 0xFFFFFF7F)
          v16 = *(llvm::APInt **)v16;
        llvm::APInt::tcSet(v16, 0, (v15 + 64) >> 6);
        return 1;
      }
      v13 = 0;
      v14 = 0;
LABEL_63:
      llvm::detail::IEEEFloat::makeNaN(a1, v13, v14, 0);
      return 1;
    }
LABEL_15:
    v8 = *a2;
    if (v8 != 45)
    {
      LODWORD(v3) = 0;
      if ((v8 | 0x20) == 0x73)
        goto LABEL_29;
LABEL_39:
      v11 = 0;
      goto LABEL_40;
    }
    ++a2;
    if (a3 == 9)
    {
      if (*(_QWORD *)a2 != 0x5954494E49464E49)
        goto LABEL_38;
    }
    else if (a3 != 4
           || (*(_WORD *)a2 == 28265 ? (v9 = a2[2] == 102) : (v9 = 0),
               !v9 && (*(_WORD *)a2 == 28233 ? (v10 = a2[2] == 102) : (v10 = 0), !v10)))
    {
LABEL_38:
      --a3;
      LODWORD(v3) = 1;
      if ((*a2 | 0x20) == 0x73)
        goto LABEL_29;
      goto LABEL_39;
    }
    v3 = 1;
    llvm::detail::IEEEFloat::makeInf(a1, 1);
    return v3;
  }
  if (a3 == 4)
  {
    if (*(_DWORD *)a2 == 1718503723)
      goto LABEL_32;
    goto LABEL_15;
  }
  if (a3 != 3)
    goto LABEL_15;
  if (*(_WORD *)a2 == 28265 && a2[2] == 102)
    goto LABEL_32;
  v3 = 0;
  v7 = *a2;
  if (v7 == 45)
    return v3;
  a3 = 3;
  if ((v7 | 0x20) != 0x73)
    goto LABEL_39;
LABEL_29:
  if (a3 < 4)
    return 0;
  ++a2;
  --a3;
  v11 = 1;
LABEL_40:
  if ((*(_WORD *)a2 != 24942 || a2[2] != 110) && (*(_WORD *)a2 != 24910 || a2[2] != 78))
    return 0;
  v19 = 3;
  if (a3 < 3)
    v19 = a3;
  v20 = &a2[v19];
  v21 = a3 - v19;
  v27 = &a2[v19];
  v28 = a3 - v19;
  if (a3 == v19)
  {
    v13 = v11;
    v14 = v3;
    goto LABEL_63;
  }
  v22 = *v20;
  if (v22 == 40)
  {
    if (v21 >= 3)
    {
      v23 = v21 - 1;
      if (v20[v21 - 1] == 41)
      {
        if (v23 >= v21)
          v23 = v21;
        v21 = v23 - 1;
        v27 = v20 + 1;
        v28 = v23 - 1;
        v22 = *++v20;
        goto LABEL_58;
      }
    }
    return 0;
  }
LABEL_58:
  if (v22 == 48)
  {
    if (v21 >= 2 && __tolower((char)v20[1]) == 120)
    {
      v27 = v20 + 2;
      v28 = v21 - 2;
      v24 = 16;
    }
    else
    {
      v24 = 8;
    }
  }
  else
  {
    v24 = 10;
  }
  v26 = 1;
  __p = 0;
  if ((llvm::StringRef::getAsInteger((llvm::StringRef *)&v27, v24, (llvm::APInt *)&__p) & 1) != 0)
  {
    if (v26 >= 0x41 && __p)
      operator delete[](__p);
    return 0;
  }
  llvm::detail::IEEEFloat::makeNaN(a1, v11, v3, (const llvm::APInt *)&__p);
  if (v26 >= 0x41 && __p)
    operator delete[](__p);
  return 1;
}

void llvm::detail::IEEEFloat::makeInf(llvm::detail::IEEEFloat *this, int a2)
{
  _DWORD *v2;
  char v3;
  int v4;
  llvm::APInt *v5;

  v2 = *(_DWORD **)this;
  if (*(_DWORD *)(*(_QWORD *)this + 16) == 1)
  {
    llvm::detail::IEEEFloat::makeNaN(this, 0, a2, 0);
  }
  else
  {
    if (a2)
      v3 = 8;
    else
      v3 = 0;
    *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | v3;
    *((_DWORD *)this + 4) = *v2 + 1;
    v4 = v2[2];
    v5 = (llvm::detail::IEEEFloat *)((char *)this + 8);
    if ((v4 - 64) <= 0xFFFFFF7F)
      v5 = *(llvm::APInt **)v5;
    llvm::APInt::tcSet(v5, 0, (v4 + 64) >> 6);
  }
}

void llvm::detail::IEEEFloat::convertFromString(llvm *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  unsigned __int8 *v8;
  llvm *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;

  if (!a3)
  {
    v10 = "Invalid string length";
LABEL_5:
    v18[0] = v10;
    v19 = 259;
    v11 = llvm::inconvertibleErrorCode(a1);
    v13 = v12;
    v14 = operator new(0x38uLL);
    v15 = llvm::StringError::StringError((uint64_t)v14, (llvm::Twine *)v18, v11, v13);
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v15;
    return;
  }
  v7 = a3;
  v8 = a2;
  v9 = a1;
  a1 = (llvm *)llvm::detail::IEEEFloat::convertFromStringSpecials(a1, a2, a3);
  if ((_DWORD)a1)
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = 0;
    return;
  }
  *((_BYTE *)v9 + 20) = *((_BYTE *)v9 + 20) & 0xF7 | (8 * (*v8 == 45));
  v16 = *v8;
  if (v16 != 45 && v16 != 43)
    goto LABEL_10;
  if (!--v7)
  {
    v10 = "String has no digits";
    goto LABEL_5;
  }
  ++v8;
LABEL_10:
  if (v7 >= 2 && *v8 == 48 && (v8[1] | 0x20) == 0x78)
  {
    if (v7 == 2)
    {
      v18[0] = "Invalid string";
      v19 = 259;
      llvm::createError((llvm *)&v17, (llvm::Twine *)v18);
      *(_BYTE *)(a5 + 8) |= 1u;
      *(_QWORD *)a5 = v17;
    }
    else
    {
      llvm::detail::IEEEFloat::convertFromHexadecimalString((uint64_t)v9, v8 + 2, v7 - 2, a4, a5);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::convertFromDecimalString(v9, v8, v7, a4, a5);
  }
}

unint64_t llvm::detail::hash_value(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  unsigned int v2;
  int v3;
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  int v12;
  int *v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  char v17;
  char v18;

  v2 = *((unsigned __int8 *)this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    v18 = v2 & 7;
    v5 = (v2 >> 3) & 1;
    if (v3 == 1)
      LOBYTE(v5) = 0;
    v17 = v5;
    return llvm::hash_combine<unsigned char,unsigned char,unsigned int>(&v18, &v17, (int *)(*(_QWORD *)this + 8));
  }
  else
  {
    v16 = v2 & 7;
    v15 = (v2 & 8) != 0;
    v7 = *(_QWORD *)this;
    v10 = (_QWORD *)*((_QWORD *)this + 1);
    v8 = (_QWORD *)((char *)this + 8);
    v9 = v10;
    v11 = (int *)(v8 + 1);
    LODWORD(v10) = *(_DWORD *)(v7 + 8);
    v13 = (int *)(v7 + 8);
    v12 = (int)v10;
    if (((_DWORD)v10 - 64) < 0xFFFFFF80)
      v8 = v9;
    v14 = llvm::hashing::detail::hash_combine_range_impl<char const>(v8, (uint64_t)&v8[(v12 + 64) >> 6]);
    return llvm::hash_combine<unsigned char,unsigned char,unsigned int,int,llvm::hash_code>(&v16, (char *)&v15, v13, v11, (uint64_t *)&v14);
  }
}

unint64_t llvm::hash_combine<unsigned char,unsigned char,unsigned int>(_BYTE *a1, char *a2, int *a3)
{
  unsigned __int8 v4;
  char *v5;
  char *v6;
  int v8;
  unint64_t v9;
  char *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  if ((v4 & 1) == 0)
  {
    v10 = a2;
    v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v9 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LOBYTE(v14[0]) = *a1;
  v12 = 0;
  v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v14, (uint64_t *)&v12, (_BYTE *)v14 + 1, (unint64_t)v15, *a2);
  v13 = v12;
  v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v6, (char *)v15);
}

unint64_t llvm::hash_combine<unsigned char,unsigned char,unsigned int,int,llvm::hash_code>(_BYTE *a1, char *a2, int *a3, int *a4, uint64_t *a5)
{
  unsigned __int8 v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v22[4];
  _OWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  if ((v8 & 1) == 0)
  {
    v16 = a2;
    v17 = a1;
    a2 = v16;
    a1 = v17;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      a2 = v16;
      a1 = v17;
    }
  }
  v25 = llvm::hashing::detail::get_execution_seed(void)::seed;
  LOBYTE(v22[0]) = *a1;
  v18 = 0;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<BOOL>(v22, (uint64_t *)&v18, (_BYTE *)v22 + 1, (unint64_t)v23, *a2);
  v19 = v18;
  v10 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v22, (uint64_t *)&v19, v9, (unint64_t)v23, *a3);
  v20 = v19;
  v11 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v22, (uint64_t *)&v20, v10, (unint64_t)v23, *a4);
  v21 = v20;
  v12 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v22, (uint64_t *)&v21, v11, (unint64_t)v23, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v22, v21, v12, (char *)v23);
}

uint64_t llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      v11 = 0;
      v7 = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v13 = *(_QWORD *)this;
        v12 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F)
          v12 = (unint64_t *)*v12;
        v7 = *v12;
      }
      else
      {
        v7 = 0x8000000000000000;
      }
      v11 = 0x7FFFLL;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 0x3FFF;
    v10 = *(_QWORD *)this;
    v9 = (unint64_t *)((char *)this + 8);
    if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
      v9 = (unint64_t *)*v9;
    v7 = *v9;
    if ((_DWORD)v8 == 1)
      v8 = v7 >> 63;
    v11 = v8 & 0x7FFF;
  }
  v15[0] = v7;
  v15[1] = v11 & 0xFFFFFFFFFFFF7FFFLL | (((v4 >> 3) & 1) << 15);
  return llvm::APInt::APInt(a2, 0x50u, v15, 2u);
}

void llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  llvm::detail::IEEEFloat *v2;
  __int128 *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  char v8;
  int v9;
  _BOOL4 v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  __int128 *v16;
  unsigned int v17;
  int v18;
  _BOOL4 v20;
  int v21;
  void *v22;
  unint64_t *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  void **v27;
  void *p_p;
  int v29;
  unsigned int v30;
  int v31;
  _BOOL4 v33;
  int v34;
  int v35;
  unint64_t *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  __int128 *v43;
  void *__p;
  int v45;
  unsigned __int8 v46;
  __int128 *v47;
  void *v48;
  int v49;
  unsigned __int8 v50;
  __int128 *v51;
  void *v52;
  int v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v2 = this;
  v60 = *MEMORY[0x1E0C80C00];
  v4 = *(__int128 **)this;
  v5 = *(_QWORD *)(*(_QWORD *)this + 16);
  v55 = *(_OWORD *)*(_QWORD *)this;
  v56 = v5;
  DWORD1(v55) = -1022;
  v51 = v4;
  v6 = *((_DWORD *)v4 + 2);
  v7 = v6 + 64;
  if ((v6 + 64) >= 0x80)
  {
    this = (llvm::detail::IEEEFloat *)operator new[]((v7 >> 3) & 0x1FFFFFF8);
    v52 = this;
  }
  v8 = *((_BYTE *)v2 + 20);
  v9 = v8 & 7;
  v54 = v8 & 0xF;
  v53 = *((_DWORD *)v2 + 4);
  v11 = (v8 & 6) != 0 && v9 != 3;
  if (v9 == 1 || v11)
  {
    if ((v6 - 64) >= 0xFFFFFF80)
      this = (llvm::detail::IEEEFloat *)&v52;
    v14 = (unint64_t *)*((_QWORD *)v2 + 1);
    v13 = (unint64_t *)((char *)v2 + 8);
    v12 = v14;
    if ((v6 - 64) >= 0xFFFFFF80)
      v15 = v13;
    else
      v15 = v12;
    llvm::APInt::tcAssign((uint64_t)this, v15, (const unint64_t *)(v7 >> 6));
  }
  v57 = 0;
  llvm::detail::IEEEFloat::convert((uint64_t)&v51, (uint64_t)&v55, 1, &v57);
  v16 = v51;
  v47 = v51;
  v17 = *((_DWORD *)v51 + 2) + 64;
  if (v17 >= 0x80)
    v48 = operator new[]((v17 >> 3) & 0x1FFFFFF8);
  v18 = v54 & 7;
  v50 = v50 & 0xF0 | v54 & 0xF;
  v49 = v53;
  v20 = (v54 & 6) != 0 && v18 != 3;
  if (v18 == 1 || v20)
  {
    v21 = *((_DWORD *)v16 + 2);
    if ((v21 - 64) >= 0xFFFFFF80)
      v22 = &v48;
    else
      v22 = v48;
    if ((v21 - 64) >= 0xFFFFFF80)
      v23 = (unint64_t *)&v52;
    else
      v23 = (unint64_t *)v52;
    llvm::APInt::tcAssign((uint64_t)v22, v23, (const unint64_t *)((v21 + 64) >> 6));
  }
  llvm::detail::IEEEFloat::convert((uint64_t)&v47, (uint64_t)&llvm::semIEEEdouble, 1, &v57);
  v24 = v50 & 7;
  if ((v50 & 6) == 0 || v24 == 3)
  {
    if (v24 == 3)
    {
      v26 = 0;
      LOWORD(v25) = 0;
    }
    else
    {
      if ((v50 & 7) != 0)
      {
        if ((*((_DWORD *)v47 + 2) - 64) >= 0xFFFFFF80)
          v27 = &v48;
        else
          v27 = (void **)v48;
        v26 = (unint64_t)*v27;
      }
      else
      {
        v26 = 0;
      }
      LOWORD(v25) = 2047;
    }
  }
  else
  {
    LOWORD(v25) = v49 + 1023;
    if ((*((_DWORD *)v47 + 2) - 64) <= 0xFFFFFF7F)
    {
      v26 = *(_QWORD *)v48;
      if (v49 != -1022)
        goto LABEL_50;
      goto LABEL_43;
    }
    v26 = (unint64_t)v48;
    if (v49 == -1022)
LABEL_43:
      v25 = (v26 >> 52) & 1;
  }
LABEL_50:
  v58 = ((unint64_t)v50 << 60) & 0x8000000000000000 | v26 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(v25 & 0x7FF) << 52);
  if ((v50 & 6) == 0 || v24 == 3 || !v57)
  {
    v59 = 0;
    goto LABEL_96;
  }
  p_p = (void *)llvm::detail::IEEEFloat::convert((uint64_t)&v47, (uint64_t)&v55, 1, &v57);
  v43 = v51;
  v29 = *((_DWORD *)v51 + 2);
  v30 = v29 + 64;
  if ((v29 + 64) >= 0x80)
  {
    p_p = operator new[]((v30 >> 3) & 0x1FFFFFF8);
    __p = p_p;
  }
  v31 = v54 & 7;
  v46 = v54 & 0xF;
  v45 = v53;
  v33 = (v54 & 6) != 0 && v31 != 3;
  if (v31 != 1 && !v33)
  {
    llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v43, (const llvm::detail::IEEEFloat *)&v47);
    if (v34 != 2)
      goto LABEL_64;
LABEL_71:
    v38 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v43, (const llvm::detail::IEEEFloat *)&v47, 1);
    llvm::detail::IEEEFloat::normalize((uint64_t)&v43, 1, v38);
    v35 = v46;
    if ((v46 & 7) != 3)
      goto LABEL_77;
    goto LABEL_72;
  }
  if ((v29 - 64) < 0xFFFFFF80)
  {
    v36 = (unint64_t *)v52;
  }
  else
  {
    p_p = &__p;
    v36 = (unint64_t *)&v52;
  }
  llvm::APInt::tcAssign((uint64_t)p_p, v36, (const unint64_t *)(v30 >> 6));
  llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v43, (const llvm::detail::IEEEFloat *)&v47);
  if (v37 == 2)
    goto LABEL_71;
LABEL_64:
  v35 = v46;
  if ((v46 & 7) != 3)
    goto LABEL_77;
LABEL_72:
  if ((v50 & 7) != 3 || ((v50 ^ v35) & 8) == 0)
  {
    LOBYTE(v35) = v35 & 0xF7;
    v46 = v35;
  }
  if (*((_DWORD *)v43 + 5) == 2)
    v46 = v35 & 0xF7;
LABEL_77:
  llvm::detail::IEEEFloat::convert((uint64_t)&v43, (uint64_t)&llvm::semIEEEdouble, 1, &v57);
  v39 = v46 & 7;
  if ((v46 & 6) == 0 || v39 == 3)
  {
    if (v39 == 3)
    {
      v41 = 0;
      LOWORD(v40) = 0;
    }
    else
    {
      if ((v46 & 7) != 0)
      {
        if ((*((_DWORD *)v43 + 2) - 64) >= 0xFFFFFF80)
          v42 = &__p;
        else
          v42 = (void **)__p;
        v41 = (unint64_t)*v42;
      }
      else
      {
        v41 = 0;
      }
      LOWORD(v40) = 2047;
    }
  }
  else
  {
    LOWORD(v40) = v45 + 1023;
    if ((*((_DWORD *)v43 + 2) - 64) <= 0xFFFFFF7F)
    {
      v41 = *(_QWORD *)__p;
      if (v45 != -1022)
        goto LABEL_93;
      goto LABEL_86;
    }
    v41 = (unint64_t)__p;
    if (v45 == -1022)
LABEL_86:
      v40 = (v41 >> 52) & 1;
  }
LABEL_93:
  v59 = ((unint64_t)v46 << 60) & 0x8000000000000000 | v41 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(v40 & 0x7FF) << 52);
  if ((*((_DWORD *)v43 + 2) - 64) <= 0xFFFFFF7F && __p)
    operator delete[](__p);
LABEL_96:
  llvm::APInt::APInt(a2, 0x80u, &v58, 2u);
  if ((*((_DWORD *)v47 + 2) - 64) <= 0xFFFFFF7F && v48)
    operator delete[](v48);
  if ((*((_DWORD *)v51 + 2) - 64) <= 0xFFFFFF7F)
  {
    if (v52)
      operator delete[](v52);
  }
}

uint64_t llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      v7 = 0;
      v8 = 0;
      LOWORD(v9) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v12 = *(_QWORD *)this;
        v11 = (_QWORD *)((char *)this + 8);
        if ((*(_DWORD *)(v12 + 8) - 64) <= 0xFFFFFF7F)
          v11 = (_QWORD *)*v11;
        v7 = (_QWORD *)*v11;
        v8 = v11[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      LOWORD(v9) = 0x7FFF;
    }
  }
  else
  {
    LODWORD(v9) = *((_DWORD *)this + 4) + 0x3FFF;
    v10 = (_QWORD *)((char *)this + 8);
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      v10 = (_QWORD *)*v10;
      v7 = (_QWORD *)*v10;
      v8 = v10[1];
      if ((_DWORD)v9 != 1)
        goto LABEL_19;
      goto LABEL_13;
    }
    v7 = (_QWORD *)*((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
    if ((_DWORD)v9 == 1)
LABEL_13:
      v9 = HIWORD(v10[1]) & 1;
  }
LABEL_19:
  v14[0] = v7;
  v14[1] = (v4 << 60) & 0x8000000000000000 | v8 & 0xFFFFFFFFFFFFLL | ((unint64_t)(v9 & 0x7FFF) << 48);
  return llvm::APInt::APInt(a2, 0x80u, v14, 2u);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E5M2FNUZAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      v7 = *(_QWORD *)this;
      this += 8;
      if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
        this = *(_QWORD *)this;
      LOBYTE(v6) = 0;
      v5 = *(_QWORD *)this;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 16;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      v5 = **(_QWORD **)(this + 8);
      if (*(_DWORD *)(this + 16) != -15)
        goto LABEL_16;
      goto LABEL_15;
    }
    v5 = *(_QWORD *)(this + 8);
    if (*(_DWORD *)(this + 16) == -15)
LABEL_15:
      v6 = (v5 >> 2) & 1;
  }
LABEL_16:
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v2) & 0x80 | v5 & 3 | (4 * (v6 & 0x1F));
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      v7 = *(_QWORD *)this;
      this += 8;
      if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
        this = *(_QWORD *)this;
      v5 = *(_QWORD *)this;
      LOBYTE(v6) = 15;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 7;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      v5 = **(_QWORD **)(this + 8);
      if (*(_DWORD *)(this + 16) != -6)
        goto LABEL_16;
      goto LABEL_15;
    }
    v5 = *(_QWORD *)(this + 8);
    if (*(_DWORD *)(this + 16) == -6)
LABEL_15:
      v6 = (v5 >> 3) & 1;
  }
LABEL_16:
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v2) & 0x80 | v5 & 7 | (8 * (v6 & 0xF));
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3APFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  uint64_t v5;
  int v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v6) = 0;
      LOBYTE(v3) = 0;
    }
    else
    {
      if ((v2 & 7) != 0)
      {
        v5 = *(_QWORD *)this;
        this += 8;
        if ((*(_DWORD *)(v5 + 8) - 64) <= 0xFFFFFF7F)
          this = *(_QWORD *)this;
        v3 = *(_DWORD *)this;
      }
      LOBYTE(v6) = 15;
    }
  }
  else
  {
    v6 = *(_DWORD *)(this + 16) + 7;
    v7 = (_QWORD *)(this + 8);
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
      v7 = (_QWORD *)*v7;
    v3 = *(_DWORD *)v7;
    if (*(_DWORD *)(this + 16) == -6)
      LOBYTE(v6) = (v3 & 8) != 0;
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v2) & 0x80 | (8 * (v6 & 0xF)) | v3 & 7u;
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3FNUZAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      v7 = *(_QWORD *)this;
      this += 8;
      if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
        this = *(_QWORD *)this;
      LOBYTE(v6) = 0;
      v5 = *(_QWORD *)this;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 8;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      v5 = **(_QWORD **)(this + 8);
      if (*(_DWORD *)(this + 16) != -7)
        goto LABEL_16;
      goto LABEL_15;
    }
    v5 = *(_QWORD *)(this + 8);
    if (*(_DWORD *)(this + 16) == -7)
LABEL_15:
      v6 = (v5 >> 3) & 1;
  }
LABEL_16:
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v2) & 0x80 | v5 & 7 | (8 * (v6 & 0xF));
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3B11FNUZAPFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOBYTE(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      v7 = *(_QWORD *)this;
      this += 8;
      if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
        this = *(_QWORD *)this;
      LOBYTE(v6) = 0;
      v5 = *(_QWORD *)this;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 11;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      v5 = **(_QWORD **)(this + 8);
      if (*(_DWORD *)(this + 16) != -10)
        goto LABEL_16;
      goto LABEL_15;
    }
    v5 = *(_QWORD *)(this + 8);
    if (*(_DWORD *)(this + 16) == -10)
LABEL_15:
      v6 = (v5 >> 3) & 1;
  }
LABEL_16:
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v2) & 0x80 | v5 & 7 | (8 * (v6 & 0xF));
  return this;
}

uint64_t llvm::detail::IEEEFloat::convertFloatTF32APFloatToAPInt@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(this + 20);
  v3 = v2 & 7;
  if ((v2 & 6) == 0 || v3 == 3)
  {
    if (v3 == 3)
    {
      LOWORD(v5) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      if ((v2 & 7) != 0)
      {
        v7 = *(_QWORD *)this;
        this += 8;
        if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F)
          this = *(_QWORD *)this;
        v5 = *(_QWORD *)this;
      }
      else
      {
        LOWORD(v5) = 0;
      }
      LOBYTE(v6) = -1;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(this + 16) + 127;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
    {
      v5 = **(_QWORD **)(this + 8);
      if (*(_DWORD *)(this + 16) != -126)
        goto LABEL_19;
      goto LABEL_13;
    }
    v5 = *(_QWORD *)(this + 8);
    if (*(_DWORD *)(this + 16) == -126)
LABEL_13:
      v6 = (v5 >> 10) & 1;
  }
LABEL_19:
  *(_DWORD *)(a2 + 8) = 19;
  *(_QWORD *)a2 = (v2 << 15) & 0x40000 | v5 & 0x3FF | ((unint64_t)v6 << 10);
  return this;
}

void llvm::detail::IEEEFloat::bitcastToAPInt(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  int v3;
  int v4;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;

  v2 = *(void **)this;
  if (*(_UNKNOWN **)this == &llvm::semIEEEhalf)
  {
    v3 = *((unsigned __int8 *)this + 20);
    v4 = v3 & 7;
    if ((v3 & 6) == 0 || v4 == 3)
    {
      if (v4 == 3)
      {
        LOWORD(v6) = 0;
        LOBYTE(v11) = 0;
      }
      else
      {
        if ((v3 & 7) != 0)
          v6 = *((_QWORD *)this + 1);
        else
          LOWORD(v6) = 0;
        LOBYTE(v11) = 31;
      }
    }
    else
    {
      LODWORD(v11) = *((_DWORD *)this + 4) + 15;
      v6 = *((_QWORD *)this + 1);
      if (*((_DWORD *)this + 4) == -14)
        v11 = (v6 >> 10) & 1;
    }
    *(_DWORD *)(a2 + 8) = 16;
    *(_QWORD *)a2 = (v3 << 12) & 0x8000 | v6 & 0x3FF | ((unint64_t)(v11 & 0x1F) << 10);
  }
  else if (v2 == &llvm::semBFloat)
  {
    v7 = *((unsigned __int8 *)this + 20);
    v8 = v7 & 7;
    if ((v7 & 6) == 0 || v8 == 3)
    {
      if (v8 == 3)
      {
        LOBYTE(v10) = 0;
        LOBYTE(v16) = 0;
      }
      else
      {
        if ((v7 & 7) != 0)
          v10 = *((_QWORD *)this + 1);
        else
          LOBYTE(v10) = 0;
        LOBYTE(v16) = -1;
      }
    }
    else
    {
      LODWORD(v16) = *((_DWORD *)this + 4) + 127;
      v10 = *((_QWORD *)this + 1);
      if (*((_DWORD *)this + 4) == -126)
        v16 = (v10 >> 7) & 1;
    }
    *(_DWORD *)(a2 + 8) = 16;
    *(_QWORD *)a2 = (v7 << 12) & 0x8000 | v10 & 0x7F | ((unint64_t)v16 << 7);
  }
  else if (v2 == &llvm::semIEEEsingle)
  {
    v12 = *((unsigned __int8 *)this + 20);
    v13 = v12 & 7;
    if ((v12 & 6) == 0 || v13 == 3)
    {
      if (v13 == 3)
      {
        LODWORD(v15) = 0;
        LOBYTE(v14) = 0;
      }
      else
      {
        if ((v12 & 7) != 0)
          v15 = *((_QWORD *)this + 1);
        else
          LODWORD(v15) = 0;
        LOBYTE(v14) = -1;
      }
    }
    else
    {
      LODWORD(v14) = *((_DWORD *)this + 4) + 127;
      v15 = *((_QWORD *)this + 1);
      if (*((_DWORD *)this + 4) == -126)
        v14 = (v15 >> 23) & 1;
    }
    *(_DWORD *)(a2 + 8) = 32;
    *(_QWORD *)a2 = (v12 << 28) & 0x80000000 | v15 & 0x7FFFFF | ((unint64_t)v14 << 23);
  }
  else if (v2 == &llvm::semIEEEdouble)
  {
    v17 = *((unsigned __int8 *)this + 20);
    v18 = v17 & 7;
    if ((v17 & 6) == 0 || v18 == 3)
    {
      if (v18 == 3)
      {
        v20 = 0;
        LOWORD(v19) = 0;
      }
      else
      {
        if ((v17 & 7) != 0)
          v20 = *((_QWORD *)this + 1);
        else
          v20 = 0;
        LOWORD(v19) = 2047;
      }
    }
    else
    {
      LODWORD(v19) = *((_DWORD *)this + 4) + 1023;
      v20 = *((_QWORD *)this + 1);
      if (*((_DWORD *)this + 4) == -1022)
        v19 = (v20 >> 52) & 1;
    }
    *(_DWORD *)(a2 + 8) = 64;
    *(_QWORD *)a2 = (v17 << 60) & 0x8000000000000000 | v20 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(v19 & 0x7FF) << 52);
  }
  else if (v2 == &llvm::semIEEEquad)
  {
    llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt(this, a2);
  }
  else if (v2 == &llvm::semPPCDoubleDoubleLegacy)
  {
    llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt(this, a2);
  }
  else if (v2 == &llvm::semFloat8E5M2)
  {
    v21 = *((unsigned __int8 *)this + 20);
    v22 = v21 & 7;
    if ((v21 & 6) == 0 || v22 == 3)
    {
      if (v22 == 3)
      {
        LOBYTE(v24) = 0;
        LOBYTE(v23) = 0;
      }
      else
      {
        if ((v21 & 7) != 0)
          v24 = *((_QWORD *)this + 1);
        else
          LOBYTE(v24) = 0;
        LOBYTE(v23) = 31;
      }
    }
    else
    {
      LODWORD(v23) = *((_DWORD *)this + 4) + 15;
      v24 = *((_QWORD *)this + 1);
      if (*((_DWORD *)this + 4) == -14)
        v23 = (v24 >> 2) & 1;
    }
    *(_DWORD *)(a2 + 8) = 8;
    *(_QWORD *)a2 = (16 * v21) & 0x80 | v24 & 3 | (4 * (v23 & 0x1F));
  }
  else if (v2 == &llvm::semFloat8E5M2FNUZ)
  {
    llvm::detail::IEEEFloat::convertFloat8E5M2FNUZAPFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloat8E4M3FN)
  {
    llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloat8E4M3)
  {
    llvm::detail::IEEEFloat::convertFloat8E4M3APFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloat8E4M3FNUZ)
  {
    llvm::detail::IEEEFloat::convertFloat8E4M3FNUZAPFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloat8E4M3B11FNUZ)
  {
    llvm::detail::IEEEFloat::convertFloat8E4M3B11FNUZAPFloatToAPInt((uint64_t)this, a2);
  }
  else if (v2 == &llvm::semFloatTF32)
  {
    llvm::detail::IEEEFloat::convertFloatTF32APFloatToAPInt((uint64_t)this, a2);
  }
  else
  {
    llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt(this, a2);
  }
}

void llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::APInt *v7;
  char v8;
  unsigned int v9;
  char v11;
  BOOL v12;
  BOOL v13;
  int v14;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3;
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 & 0x7FFF;
  *(_QWORD *)this = &llvm::semX87DoubleExtended;
  v7 = (llvm::APInt *)operator new[](0x10uLL);
  *((_QWORD *)this + 1) = v7;
  v8 = *((_BYTE *)this + 20);
  v9 = (v5 >> 12) & 8;
  if (!(v6 | v4))
  {
    *((_BYTE *)this + 20) = v9 | v8 & 0xF0 | 3;
    v14 = -16383;
LABEL_24:
    *((_DWORD *)this + 4) = v14;
    llvm::APInt::tcSet(v7, 0, 2u);
    return;
  }
  if (v4 == 0x8000000000000000 && v6 == 0x7FFF)
  {
    *((_BYTE *)this + 20) = v8 & 0xF0 | v9;
    v14 = 0x4000;
    goto LABEL_24;
  }
  v11 = v8 & 0xF7 | v9;
  v12 = v4 != 0x8000000000000000 && v6 == 0x7FFF;
  if (!v12 && (v4 < 0 || ((v5 & 0x7FFF) != 0 ? (v13 = v6 == 0x7FFF) : (v13 = 1), v13)))
  {
    *((_BYTE *)this + 20) = v11 & 0xF8 | 2;
    *((_DWORD *)this + 4) = v6 - 0x3FFF;
    *(_QWORD *)v7 = v4;
    *((_QWORD *)v7 + 1) = 0;
    if ((v5 & 0x7FFF) == 0)
      *((_DWORD *)this + 4) = -16382;
  }
  else
  {
    *((_BYTE *)this + 20) = v11 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 0x4000;
    *(_QWORD *)v7 = v4;
    *((_QWORD *)v7 + 1) = 0;
  }
}

void llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v3;
  const llvm::APInt *v4;
  const llvm::APInt *v5;
  int v7;
  int v8;
  int v9;
  const llvm::APInt *v10;
  int v11;
  const llvm::APInt *v12;
  void *__p;
  unsigned __int8 v14;
  char v15;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(const llvm::APInt **)v3;
  v5 = (const llvm::APInt *)*((_QWORD *)v3 + 1);
  LODWORD(__p) = 64;
  v12 = v4;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v12);
  llvm::detail::IEEEFloat::convert((uint64_t)this, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, 1, &v15);
  if ((*((_BYTE *)this + 20) & 6) != 0 && (*((_BYTE *)this + 20) & 7) != 3)
  {
    v11 = 64;
    v10 = v5;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v12, &v10);
    llvm::detail::IEEEFloat::convert((uint64_t)&v12, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, 1, &v15);
    llvm::detail::IEEEFloat::addOrSubtractSpecials(this, (const llvm::detail::IEEEFloat *)&v12);
    if (v7 == 2)
    {
      v8 = llvm::detail::IEEEFloat::addOrSubtractSignificand(this, (const llvm::detail::IEEEFloat *)&v12, 0);
      llvm::detail::IEEEFloat::normalize((uint64_t)this, 1, v8);
    }
    v9 = *((unsigned __int8 *)this + 20);
    if ((v9 & 7) == 3)
    {
      if ((v14 & 7) != 3 || ((v14 ^ v9) & 8) != 0)
      {
        LOBYTE(v9) = v9 & 0xF7;
        *((_BYTE *)this + 20) = v9;
      }
      if (*(_DWORD *)(*(_QWORD *)this + 20) == 2)
        *((_BYTE *)this + 20) = v9 & 0xF7;
    }
    if ((*((_DWORD *)v12 + 2) - 64) <= 0xFFFFFF7F)
    {
      if (__p)
        operator delete[](__p);
    }
  }
}

void llvm::detail::IEEEFloat::initFromDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 52) & 0x7FF;
  *(_QWORD *)this = &llvm::semIEEEdouble;
  v7 = *((_BYTE *)this + 20);
  v8 = (v5 >> 60) & 8;
  if (v6 == 2047 && v4 == 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 1024;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 2047 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 60) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 1023;
      *((_QWORD *)this + 1) = v4;
      if (v6)
        *((_QWORD *)this + 1) = v4 | 0x10000000000000;
      else
        *((_DWORD *)this + 4) = -1022;
    }
    else
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -1023;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 60) & 8 | 1;
    *((_DWORD *)this + 4) = 1024;
    *((_QWORD *)this + 1) = v4;
  }
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  llvm::detail::IEEEFloat::initFromAPInt(a1, a2, a3);
  return a1;
}

void llvm::detail::IEEEFloat::initFromQuadrupleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v3;
  const llvm::APInt *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  llvm::APInt *v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  int v15;

  v3 = *((unsigned int *)a2 + 2);
  v4 = *a2;
  if (v3 < 0x41)
    v4 = (const llvm::APInt *)a2;
  v5 = *(_QWORD *)v4;
  v6 = *((_QWORD *)v4 + 1) & 0xFFFFFFFFFFFFLL;
  v7 = *((_QWORD *)v4 + ((v3 + 63) >> 6) - 1);
  *(_QWORD *)this = &llvm::semIEEEquad;
  v8 = (llvm::APInt *)operator new[](0x10uLL);
  *((_QWORD *)this + 1) = v8;
  v9 = *((_BYTE *)this + 20);
  if (v5)
    v10 = v5;
  else
    v10 = v6;
  v11 = (v5 | v6) == 0;
  v12 = (v7 >> 60) & 8;
  v13 = HIWORD(v7) & 0x7FFF;
  if (v13 == 0x7FFF && (v5 | v6) == 0)
  {
    *((_BYTE *)this + 20) = v9 & 0xF0 | v12;
    v15 = 0x4000;
LABEL_17:
    *((_DWORD *)this + 4) = v15;
    llvm::APInt::tcSet(v8, 0, 2u);
    return;
  }
  if (v13 != 0x7FFF)
    v11 = 1;
  if (v11)
  {
    if (!(v10 | v13))
    {
      *((_BYTE *)this + 20) = v12 | v9 & 0xF0 | 3;
      v15 = -16383;
      goto LABEL_17;
    }
    *((_BYTE *)this + 20) = v9 & 0xF0 | (v7 >> 60) & 8 | 2;
    *((_DWORD *)this + 4) = v13 - 0x3FFF;
    *(_QWORD *)v8 = v5;
    *((_QWORD *)v8 + 1) = v6;
    if (v13)
      *((_QWORD *)v8 + 1) |= 0x1000000000000uLL;
    else
      *((_DWORD *)this + 4) = -16382;
  }
  else
  {
    *((_BYTE *)this + 20) = v9 & 0xF0 | (v7 >> 60) & 8 | 1;
    *((_DWORD *)this + 4) = 0x4000;
    *(_QWORD *)v8 = v5;
    *((_QWORD *)v8 + 1) = v6;
  }
}

void llvm::detail::IEEEFloat::initFromFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0x7FFFFFLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 23);
  *(_QWORD *)this = &llvm::semIEEEsingle;
  v7 = *((_BYTE *)this + 20);
  v8 = (v5 >> 28) & 8;
  if (v6 == 255 && v4 == 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 128;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 255 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 28) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 127;
      *((_QWORD *)this + 1) = v4;
      if ((v5 >> 23))
        *((_QWORD *)this + 1) = v4 | 0x800000;
      else
        *((_DWORD *)this + 4) = -126;
    }
    else
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -127;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 28) & 8 | 1;
    *((_DWORD *)this + 4) = 128;
    *((_QWORD *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromBFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0x7FLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 7);
  *(_QWORD *)this = &llvm::semBFloat;
  v7 = *((_BYTE *)this + 20);
  v8 = (v5 >> 12) & 8;
  if (v6 == 255 && v4 == 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 128;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 255 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 12) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 127;
      *((_QWORD *)this + 1) = v4;
      if ((v5 >> 7))
        *((_QWORD *)this + 1) = v4 | 0x80;
      else
        *((_DWORD *)this + 4) = -126;
    }
    else
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -127;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 12) & 8 | 1;
    *((_DWORD *)this + 4) = 128;
    *((_QWORD *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromHalfAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0x3FFLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 10) & 0x1F;
  *(_QWORD *)this = &llvm::semIEEEhalf;
  v7 = *((_BYTE *)this + 20);
  v8 = (v5 >> 12) & 8;
  if (v6 == 31 && v4 == 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 16;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 31 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 12) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 15;
      *((_QWORD *)this + 1) = v4;
      if (v6)
        *((_QWORD *)this + 1) = v4 | 0x400;
      else
        *((_DWORD *)this + 4) = -14;
    }
    else
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -15;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 12) & 8 | 1;
    *((_DWORD *)this + 4) = 16;
    *((_QWORD *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 3;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 2) & 0x1F;
  *(_QWORD *)this = &llvm::semFloat8E5M2;
  v7 = *((_BYTE *)this + 20);
  v8 = (v5 >> 4) & 8;
  if (v6 == 31 && v4 == 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 16;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 31 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 15;
      *((_QWORD *)this + 1) = v4;
      if (v6)
        *((_QWORD *)this + 1) = v4 | 4;
      else
        *((_DWORD *)this + 4) = -14;
    }
    else
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -15;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = 16;
    *((_QWORD *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2FNUZAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 3;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 2) & 0x1F;
  *(_QWORD *)this = &llvm::semFloat8E5M2FNUZ;
  v7 = *((_BYTE *)this + 20);
  if (v6 | v4)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
    *((_DWORD *)this + 4) = v6 - 16;
    *((_QWORD *)this + 1) = v4;
    if (v6)
      *((_QWORD *)this + 1) = v4 | 4;
    else
      *((_DWORD *)this + 4) = -15;
  }
  else if (((v5 >> 4) & 8) != 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = -16;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | 3;
    *((_DWORD *)this + 4) = -16;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 7;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 3) & 0xF;
  *(_QWORD *)this = &llvm::semFloat8E4M3FN;
  v7 = *((_BYTE *)this + 20);
  if (v6 == 15 && v4 == 7)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = 8;
    *((_QWORD *)this + 1) = 7;
  }
  else if (v6 | v4)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
    *((_DWORD *)this + 4) = v6 - 7;
    *((_QWORD *)this + 1) = v4;
    if (v6)
      *((_QWORD *)this + 1) = v4 | 8;
    else
      *((_DWORD *)this + 4) = -6;
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 3;
    *((_DWORD *)this + 4) = -7;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v8;
  uint64_t v10;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v2 = *a2;
  else
    v2 = (const llvm::APInt *)a2;
  v3 = *(_QWORD *)v2;
  v4 = (v3 >> 3) & 0xF;
  *(_QWORD *)this = &llvm::semFloat8E4M3;
  v5 = (v3 >> 4) & 8;
  v6 = *((_BYTE *)this + 20) & 0xF0;
  if (v4 | v3 & 7)
  {
    if ((v3 & 7) == 0 && v4 == 15)
    {
      *((_BYTE *)this + 20) = v6 | v5;
      *((_DWORD *)this + 4) = 8;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
    else
    {
      v8 = v6 | v5;
      if ((v3 & 7) != 0 && v4 == 15)
      {
        *((_BYTE *)this + 20) = v8 | 1;
        *((_DWORD *)this + 4) = 8;
        *((_QWORD *)this + 1) = v3 & 7;
      }
      else
      {
        *((_BYTE *)this + 20) = v8 | 2;
        *((_DWORD *)this + 4) = v4 - 7;
        v10 = v3 & 7;
        *((_QWORD *)this + 1) = v10;
        if (v4)
          *((_QWORD *)this + 1) = v10 | 8;
        else
          *((_DWORD *)this + 4) = -6;
      }
    }
  }
  else
  {
    *((_BYTE *)this + 20) = v5 | v6 | 3;
    *((_DWORD *)this + 4) = -7;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3FNUZAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 7;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 3) & 0xF;
  *(_QWORD *)this = &llvm::semFloat8E4M3FNUZ;
  v7 = *((_BYTE *)this + 20);
  if (v6 | v4)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
    *((_DWORD *)this + 4) = v6 - 8;
    *((_QWORD *)this + 1) = v4;
    if (v6)
      *((_QWORD *)this + 1) = v4 | 8;
    else
      *((_DWORD *)this + 4) = -7;
  }
  else if (((v5 >> 4) & 8) != 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = -8;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | 3;
    *((_DWORD *)this + 4) = -8;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3B11FNUZAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 7;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 3) & 0xF;
  *(_QWORD *)this = &llvm::semFloat8E4M3B11FNUZ;
  v7 = *((_BYTE *)this + 20);
  if (v6 | v4)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 2;
    *((_DWORD *)this + 4) = v6 - 11;
    *((_QWORD *)this + 1) = v4;
    if (v6)
      *((_QWORD *)this + 1) = v4 | 8;
    else
      *((_DWORD *)this + 4) = -10;
  }
  else if (((v5 >> 4) & 8) != 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 4) & 8 | 1;
    *((_DWORD *)this + 4) = -11;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | 3;
    *((_DWORD *)this + 4) = -11;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
}

void llvm::detail::IEEEFloat::initFromFloatTF32APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0x3FFLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 10);
  *(_QWORD *)this = &llvm::semFloatTF32;
  v7 = *((_BYTE *)this + 20);
  v8 = (v5 >> 15) & 8;
  if (v6 == 255 && v4 == 0)
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | v8;
    *((_DWORD *)this + 4) = 128;
    llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
  }
  else if (v6 != 255 || v4 == 0)
  {
    if (v6 | v4)
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 15) & 8 | 2;
      *((_DWORD *)this + 4) = v6 - 127;
      *((_QWORD *)this + 1) = v4;
      if ((v5 >> 10))
        *((_QWORD *)this + 1) = v4 | 0x400;
      else
        *((_DWORD *)this + 4) = -126;
    }
    else
    {
      *((_BYTE *)this + 20) = v7 & 0xF0 | v8 | 3;
      *((_DWORD *)this + 4) = -127;
      llvm::APInt::tcSet((llvm::detail::IEEEFloat *)((char *)this + 8), 0, 1u);
    }
  }
  else
  {
    *((_BYTE *)this + 20) = v7 & 0xF0 | (v5 >> 15) & 8 | 1;
    *((_DWORD *)this + 4) = 128;
    *((_QWORD *)this + 1) = v4;
  }
}

void llvm::detail::IEEEFloat::initFromAPInt(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &llvm::semIEEEhalf)
  {
    llvm::detail::IEEEFloat::initFromHalfAPInt(a1, a3);
  }
  else if (a2 == &llvm::semBFloat)
  {
    llvm::detail::IEEEFloat::initFromBFloatAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEsingle)
  {
    llvm::detail::IEEEFloat::initFromFloatAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEdouble)
  {
    llvm::detail::IEEEFloat::initFromDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semX87DoubleExtended)
  {
    llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEquad)
  {
    llvm::detail::IEEEFloat::initFromQuadrupleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semPPCDoubleDoubleLegacy)
  {
    llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E5M2)
  {
    llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E5M2FNUZ)
  {
    llvm::detail::IEEEFloat::initFromFloat8E5M2FNUZAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E4M3FN)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E4M3)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3APInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E4M3FNUZ)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3FNUZAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E4M3B11FNUZ)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3B11FNUZAPInt(a1, a3);
  }
  else
  {
    llvm::detail::IEEEFloat::initFromFloatTF32APInt(a1, a3);
  }
}

void *llvm::detail::IEEEFloat::makeLargest(llvm::detail::IEEEFloat *this, int a2)
{
  char v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  unsigned int v7;
  void *result;
  uint64_t v9;
  unint64_t v10;

  if (a2)
    v3 = 10;
  else
    v3 = 2;
  *((_BYTE *)this + 20) = v3 | *((_BYTE *)this + 20) & 0xF0;
  v4 = *(_QWORD *)this;
  *((_DWORD *)this + 4) = **(_DWORD **)this;
  v5 = *(_DWORD *)(v4 + 8);
  v6 = (_QWORD *)((char *)this + 8);
  if ((v5 - 64) <= 0xFFFFFF7F)
    v6 = (_QWORD *)*v6;
  v7 = v5 + 64;
  result = memset(v6, 255, 8 * (((v5 + 64) >> 6) - 1));
  v9 = *(_QWORD *)this;
  if ((v7 & 0xFFFFFFC0) - *(_DWORD *)(*(_QWORD *)this + 8) >= 0x40)
    v10 = 0;
  else
    v10 = 0xFFFFFFFFFFFFFFFFLL >> ((v7 & 0xC0) - *(_BYTE *)(*(_QWORD *)this + 8));
  v6[(v7 >> 6) - 1] = v10;
  if (*(_DWORD *)(v9 + 16) == 1 && *(_DWORD *)(v9 + 20) == 1)
    *v6 &= ~1uLL;
  return result;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, float a2)
{
  const llvm::APInt *v4;
  int v5;

  v5 = 32;
  v4 = (const llvm::APInt *)LODWORD(a2);
  llvm::detail::IEEEFloat::initFromFloatAPInt(this, &v4);
  return this;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, double a2)
{
  const llvm::APInt *v4;
  int v5;

  v5 = 64;
  v4 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v4);
  return this;
}

void llvm::detail::IEEEFloat::toString(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  int v21;
  llvm::APInt *v22;
  uint64_t v23;
  unint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  signed int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  void *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  char v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  char *v65;
  size_t v66;
  _BYTE *v67;
  int v68;
  int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  char v75;
  int v76;
  unsigned int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  size_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  char v99;
  uint64_t v100;
  unsigned int v101;
  char v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  void *v111;
  __int128 v112;
  uint64_t v113;
  void *v114;
  unsigned int v115;
  void *__p;
  unsigned int v117;
  void *v118;
  unsigned int v119;
  void *__dst;
  __int128 v121;
  _QWORD v122[34];

  v122[32] = *MEMORY[0x1E0C80C00];
  v9 = *(_BYTE *)(a1 + 20) & 7;
  if (v9 == 3)
  {
    if ((*(_BYTE *)(a1 + 20) & 8) != 0)
    {
      v13 = a2[1];
      if (v13 + 1 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v13 + 1, 1);
        v13 = a2[1];
      }
      *(_BYTE *)(*a2 + v13) = 45;
      ++a2[1];
    }
    v14 = a2[1];
    if (a4)
    {
      if (v14 + 1 > (unint64_t)a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v14 + 1, 1);
        v14 = a2[1];
      }
      *(_BYTE *)(*a2 + v14) = 48;
      ++a2[1];
    }
    else
    {
      v32 = a2[2];
      if (!a5)
      {
        if (v32 < v14 + 3)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v14 + 3, 1);
          v14 = a2[1];
        }
        v42 = *a2 + v14;
        *(_BYTE *)(v42 + 2) = 48;
        *(_WORD *)v42 = 11824;
        v10 = a2[1] + 3;
        a2[1] = v10;
        if (a3 >= 2)
        {
          v43 = a3 - 1;
          if (v10 + v43 > (unint64_t)a2[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v10 + v43, 1);
            v10 = a2[1];
          }
          memset((void *)(*a2 + v10), 48, a3 - 1);
          v10 = a2[1] + v43;
          a2[1] = v10;
        }
        if (a2[2] < (unint64_t)(v10 + 4))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v10 + 4, 1);
          v10 = a2[1];
        }
        v30 = *a2;
        v31 = 808463205;
        goto LABEL_72;
      }
      if (v32 < v14 + 6)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v14 + 6, 1);
        v14 = a2[1];
      }
      v33 = *a2 + v14;
      *(_WORD *)(v33 + 4) = 12331;
      *(_DWORD *)v33 = 1160785456;
      a2[1] += 6;
    }
  }
  else
  {
    if (v9 != 1)
    {
      if ((*(_BYTE *)(a1 + 20) & 7) == 0)
      {
        v10 = a2[1];
        v11 = a2[2];
        v12 = v10 + 4;
        if ((*(_BYTE *)(a1 + 20) & 8) == 0)
        {
          if (v11 < v10 + 4)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v12, 1);
            v10 = a2[1];
          }
          *(_DWORD *)(*a2 + v10) = 1718503723;
          goto LABEL_73;
        }
        if (v11 < v10 + 4)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v12, 1);
          v10 = a2[1];
        }
        v30 = *a2;
        v31 = 1718503725;
LABEL_72:
        *(_DWORD *)(v30 + v10) = v31;
LABEL_73:
        a2[1] += 4;
        return;
      }
      if ((*(_BYTE *)(a1 + 20) & 8) != 0)
      {
        v18 = a2[1];
        if (v18 + 1 > (unint64_t)a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v18 + 1, 1);
          v18 = a2[1];
        }
        *(_BYTE *)(*a2 + v18) = 45;
        ++a2[1];
      }
      v19 = *(_DWORD *)(*(_QWORD *)a1 + 8);
      v20 = (_QWORD *)(a1 + 8);
      if ((v19 - 64) <= 0xFFFFFF7F)
        v20 = (_QWORD *)*v20;
      v21 = *(_DWORD *)(a1 + 16);
      llvm::APInt::APInt((uint64_t)&__p, *(_DWORD *)(*(_QWORD *)a1 + 8), v20, (v19 + 63) >> 6);
      if (a3)
      {
        v25 = v117;
        if (v117 <= 0x40)
          goto LABEL_27;
      }
      else
      {
        a3 = 59 * *(_DWORD *)(*(_QWORD *)a1 + 8) / 0xC4u + 2;
        v25 = v117;
        if (v117 <= 0x40)
        {
LABEL_27:
          v26 = __clz(__rbit64((unint64_t)__p));
          if (v25 >= v26)
            v27 = v26;
          else
            v27 = v25;
          if (v25 <= v26)
          {
            __p = 0;
            v36 = v21 - v19 + v27;
            v29 = v36 + 1;
            if (v36 == -1)
              goto LABEL_82;
          }
          else
          {
            __p = (void *)((unint64_t)__p >> v27);
            v28 = v21 - v19 + v27;
            v29 = v28 + 1;
            if (v28 == -1)
              goto LABEL_82;
          }
LABEL_44:
          if (v29 < 1)
          {
            v39 = *(_DWORD *)(*(_QWORD *)a1 + 8) + (-137 * v29 + 136) / 59;
            llvm::APInt::zext((const void **)&__p, v39, (uint64_t)&__dst);
            if (v117 >= 0x41 && __p)
              operator delete[](__p);
            v40 = -v29;
            __p = __dst;
            v117 = v121;
            LODWORD(v121) = v39;
            if (v39 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 5, 0);
            }
            else
            {
              v41 = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v39) & 5);
              if (!v39)
                v41 = 0;
              __dst = v41;
            }
            while (1)
            {
              if ((v40 & 1) != 0)
                llvm::APInt::operator*=((uint64_t)&__p, (const unint64_t **)&__dst);
              if (v40 < 2)
                break;
              v40 >>= 1;
              llvm::APInt::operator*=((uint64_t)&__dst, (const unint64_t **)&__dst);
            }
            if (v121 >= 0x41 && __dst)
              operator delete[](__dst);
          }
          else
          {
            llvm::APInt::zext((const void **)&__p, *(_DWORD *)(*(_QWORD *)a1 + 8) + v29, (uint64_t)&__dst);
            if (v117 >= 0x41 && __p)
              operator delete[](__p);
            __p = __dst;
            v117 = v121;
            if (v121 > 0x40)
            {
              llvm::APInt::shlSlowCase((const void **)&__p, v29);
              v29 = 0;
            }
            else
            {
              v37 = (_QWORD)__dst << v29;
              if ((_DWORD)v121 == v29)
                v37 = 0;
              if ((_DWORD)v121)
                v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v121;
              else
                v38 = 0;
              __p = (void *)(v37 & v38);
              v29 = 0;
            }
          }
LABEL_82:
          v44 = v117;
          if (v117 > 0x40)
            v45 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
          else
            v45 = v117 + __clz((unint64_t)__p) - 64;
          v46 = (196 * a3 + 58) / 0x3B;
          if (v44 - v45 <= v46)
            goto LABEL_114;
          v47 = 59 * (v44 - v45 - v46);
          if (v47 < 0xC4)
            goto LABEL_114;
          v48 = v47 / 0xC4;
          v29 += v47 / 0xC4;
          LODWORD(v121) = v44;
          if (v44 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 1, 0);
            v44 = v117;
            LODWORD(v112) = v117;
            if (v117 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v111, 10, 0);
              while (1)
              {
LABEL_95:
                if ((v48 & 1) != 0)
                  llvm::APInt::operator*=((uint64_t)&__dst, (const unint64_t **)&v111);
                if (v48 < 2)
                  break;
                v48 >>= 1;
                llvm::APInt::operator*=((uint64_t)&v111, (const unint64_t **)&v111);
              }
              llvm::APInt::udiv((llvm::APInt **)&__p, (size_t)&__dst, (llvm::APInt *)&v118);
              if (v117 >= 0x41 && __p)
                operator delete[](__p);
              __p = v118;
              v50 = v119;
              v117 = v119;
              if (v119 > 0x40)
                v51 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p);
              else
                v51 = v119 + __clz((unint64_t)v118) - 64;
              llvm::APInt::trunc((char *)&__p, v50 - v51, (uint64_t)&v118);
              if (v117 >= 0x41 && __p)
                operator delete[](__p);
              __p = v118;
              v117 = v119;
              if (v112 >= 0x41 && v111)
                operator delete[](v111);
              if (v121 >= 0x41 && __dst)
                operator delete[](__dst);
              v44 = v117;
LABEL_114:
              __dst = v122;
              v121 = xmmword_181236410;
              if (v44 > 3)
              {
                v119 = v44;
                if (v44 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v118, 10, 0);
                  v115 = v44;
                  llvm::APInt::initSlowCase((llvm::APInt *)&v114, 0, 0);
                  v52 = v117;
                  if (v117 < 0x41)
                    goto LABEL_128;
LABEL_125:
                  if (v52 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40
                    || *(_QWORD *)__p)
                  {
                    while (1)
                    {
                      llvm::APInt::udivrem((llvm::APInt *)&__p, (const llvm::APInt *)&v118, &__p, (llvm::APInt *)&v114, v22, v23, v24);
                      v53 = (unsigned int *)(v115 >= 0x41 ? v114 : &v114);
                      v54 = *v53;
                      if (v54)
                        break;
                      ++v29;
                      v52 = v117;
                      if (v117 >= 0x41)
                        goto LABEL_125;
LABEL_128:
                      if (!__p)
                        goto LABEL_147;
                    }
                    v55 = v54 + 48;
                    v56 = v121;
                    if ((unint64_t)(v121 + 1) > *((_QWORD *)&v121 + 1))
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v122, v121 + 1, 1);
                      v56 = v121;
                    }
                    *((_BYTE *)__dst + v56) = v55;
                    *(_QWORD *)&v121 = v121 + 1;
                    v57 = v117;
                    if (v117 < 0x41)
                      goto LABEL_139;
                    while (v57 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) > 0x40
                         || *(_QWORD *)__p)
                    {
                      while (1)
                      {
                        llvm::APInt::udivrem((llvm::APInt *)&__p, (const llvm::APInt *)&v118, &__p, (llvm::APInt *)&v114, v22, v23, v24);
                        if (v115 >= 0x41)
                          v58 = (char *)v114;
                        else
                          v58 = (char *)&v114;
                        v59 = *v58;
                        v60 = v121;
                        if ((unint64_t)(v121 + 1) > *((_QWORD *)&v121 + 1))
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v122, v121 + 1, 1);
                          v60 = v121;
                        }
                        *((_BYTE *)__dst + v60) = v59 + 48;
                        *(_QWORD *)&v121 = v121 + 1;
                        v57 = v117;
                        if (v117 >= 0x41)
                          break;
LABEL_139:
                        if (!__p)
                          goto LABEL_147;
                      }
                    }
                  }
LABEL_147:
                  LODWORD(v61) = v121;
                  v62 = v121 - a3;
                  if (v121 <= a3)
                  {
LABEL_171:
                    if (a4)
                    {
                      if (v29 < 0)
                      {
                        v76 = v29 + v61;
                        if (((v29 + (_DWORD)v61 - 1) & 0x80000000) == 0 || 1 - v76 <= a4)
                        {
                          if (v76 < 1)
                          {
                            llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
                            llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
                            if (v76)
                            {
                              v107 = a2[1];
                              do
                              {
                                if (v107 + 1 > (unint64_t)a2[2])
                                {
                                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v107 + 1, 1);
                                  v107 = a2[1];
                                }
                                *(_BYTE *)(*a2 + v107) = 48;
                                v107 = a2[1] + 1;
                                a2[1] = v107;
                                v70 = __CFADD__(v76++, 1);
                              }
                              while (!v70);
                              v76 = 0;
                            }
                          }
                          else
                          {
                            v103 = a2[1];
                            v104 = v61 - 1;
                            v105 = (v29 + v61);
                            do
                            {
                              v106 = *((_BYTE *)__dst + v104);
                              if (v103 + 1 > (unint64_t)a2[2])
                              {
                                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v103 + 1, 1);
                                v103 = a2[1];
                              }
                              *(_BYTE *)(*a2 + v103) = v106;
                              v103 = a2[1] + 1;
                              a2[1] = v103;
                              --v104;
                              --v105;
                            }
                            while (v105);
                            llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
                          }
                          if (v76 != (_DWORD)v61)
                          {
                            v108 = a2[1];
                            v109 = ~v76 + v61;
                            do
                            {
                              v110 = *((_BYTE *)__dst + v109);
                              if (v108 + 1 > (unint64_t)a2[2])
                              {
                                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v108 + 1, 1);
                                v108 = a2[1];
                              }
                              *(_BYTE *)(*a2 + v108) = v110;
                              v108 = a2[1] + 1;
                              a2[1] = v108;
                              --v109;
                            }
                            while (v109 != -1);
                          }
                          goto LABEL_227;
                        }
                      }
                      else if (v29 <= a4 && v29 + (int)v61 <= a3)
                      {
                        if ((_DWORD)v61)
                        {
                          v72 = v61;
                          v73 = a2[1];
                          v74 = v61 - 1;
                          do
                          {
                            v75 = *((_BYTE *)__dst + v74);
                            if (v73 + 1 > (unint64_t)a2[2])
                            {
                              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v73 + 1, 1);
                              v73 = a2[1];
                            }
                            *(_BYTE *)(*a2 + v73) = v75;
                            v73 = a2[1] + 1;
                            a2[1] = v73;
                            --v74;
                            --v72;
                          }
                          while (v72);
                        }
                        if (v29)
                        {
                          v100 = a2[1];
                          do
                          {
                            if (v100 + 1 > (unint64_t)a2[2])
                            {
                              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v100 + 1, 1);
                              v100 = a2[1];
                            }
                            *(_BYTE *)(*a2 + v100) = 48;
                            v100 = a2[1] + 1;
                            a2[1] = v100;
                            --v29;
                          }
                          while (v29);
                        }
LABEL_227:
                        if (v115 >= 0x41 && v114)
                          operator delete[](v114);
                        if (v119 >= 0x41 && v118)
                          operator delete[](v118);
                        if (__dst != v122)
                          free(__dst);
                        if (v117 >= 0x41 && __p)
                          operator delete[](__p);
                        return;
                      }
                    }
                    v77 = v61 - 1;
                    v78 = *((_BYTE *)__dst + (v61 - 1));
                    v79 = a2[1];
                    if (v79 + 1 > (unint64_t)a2[2])
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v79 + 1, 1);
                      v79 = a2[1];
                    }
                    *(_BYTE *)(*a2 + v79) = v78;
                    v80 = a2[1];
                    v81 = a2[2];
                    v82 = v80 + 1;
                    a2[1] = v80 + 1;
                    if (v80 + 2 > v81)
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v80 + 2, 1);
                      v82 = a2[1];
                    }
                    *(_BYTE *)(*a2 + v82) = 46;
                    v83 = a2[1];
                    v84 = v83 + 1;
                    a2[1] = v83 + 1;
                    if ((_DWORD)v61 == 1 && (a5 & 1) != 0)
                    {
                      if (v83 + 2 > (unint64_t)a2[2])
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v83 + 2, 1);
                        v84 = a2[1];
                      }
                      *(_BYTE *)(*a2 + v84) = 48;
                      v84 = a2[1] + 1;
                      a2[1] = v84;
                    }
                    else if ((_DWORD)v61 != 1)
                    {
                      v101 = v61 - 2;
                      do
                      {
                        v102 = *((_BYTE *)__dst + v101);
                        if (v84 + 1 > (unint64_t)a2[2])
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v84 + 1, 1);
                          v84 = a2[1];
                        }
                        *(_BYTE *)(*a2 + v84) = v102;
                        v84 = a2[1] + 1;
                        a2[1] = v84;
                        --v101;
                      }
                      while (v101 != -1);
                    }
                    if ((a5 & 1) != 0)
                    {
                      v85 = 69;
LABEL_201:
                      v87 = v77 + v29;
                      if (v84 + 1 > (unint64_t)a2[2])
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v84 + 1, 1);
                        v84 = a2[1];
                      }
                      *(_BYTE *)(*a2 + v84) = v85;
                      v88 = a2[1];
                      v89 = a2[2];
                      v90 = v88 + 1;
                      a2[1] = v88 + 1;
                      if (v87 < 0)
                        v91 = 45;
                      else
                        v91 = 43;
                      if (v88 + 2 > v89)
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v88 + 2, 1);
                        v90 = a2[1];
                      }
                      v92 = 0;
                      *(_BYTE *)(*a2 + v90) = v91;
                      ++a2[1];
                      if (v87 >= 0)
                        v93 = v87;
                      else
                        v93 = -v87;
                      v111 = &v113;
                      v112 = xmmword_18125D2D0;
                      do
                      {
                        if (v92 + 1 > *((_QWORD *)&v112 + 1))
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v111, &v113, v92 + 1, 1);
                          v92 = v112;
                        }
                        *((_BYTE *)v111 + v92) = (v93 % 0xA) | 0x30;
                        v94 = v112;
                        v92 = v112 + 1;
                        *(_QWORD *)&v112 = v112 + 1;
                        v95 = v93 > 9;
                        v93 /= 0xAu;
                      }
                      while (v95);
                      if ((a5 & 1) == 0 && v92 <= 1)
                      {
                        if ((unint64_t)(v94 + 2) > *((_QWORD *)&v112 + 1))
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v111, &v113, v94 + 2, 1);
                          v92 = v112;
                        }
                        *((_BYTE *)v111 + v92) = 48;
                        LODWORD(v92) = v112 + 1;
                        *(_QWORD *)&v112 = v112 + 1;
                      }
                      v96 = v92;
                      if ((_DWORD)v92)
                      {
                        v97 = a2[1];
                        v98 = v92 - 1;
                        do
                        {
                          v99 = *((_BYTE *)v111 + v98);
                          if (v97 + 1 > (unint64_t)a2[2])
                          {
                            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v97 + 1, 1);
                            v97 = a2[1];
                          }
                          *(_BYTE *)(*a2 + v97) = v99;
                          v97 = a2[1] + 1;
                          a2[1] = v97;
                          --v98;
                          --v96;
                        }
                        while (v96);
                      }
                      if (v111 != &v113)
                        free(v111);
                      goto LABEL_227;
                    }
                    if (a3 <= v77)
                    {
LABEL_200:
                      v85 = 101;
                      goto LABEL_201;
                    }
                    v86 = a3 - v61 + 1;
                    if (v84 + v86 > a2[2])
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v84 + v86, 1);
                      v84 = a2[1];
                      if (!(_DWORD)v86)
                        goto LABEL_199;
                    }
                    else if (!(_DWORD)v86)
                    {
LABEL_199:
                      v84 += v86;
                      a2[1] = v84;
                      goto LABEL_200;
                    }
                    memset((void *)(*a2 + v84), 48, v86);
                    v84 = a2[1];
                    goto LABEL_199;
                  }
                  v63 = __dst;
                  if (*((char *)__dst + (v62 - 1)) >= 53)
                  {
                    if (a3)
                    {
                      v68 = -a3;
                      while (1)
                      {
                        v62 = (v121 + v68);
                        v69 = *((unsigned __int8 *)__dst + v62);
                        if (v69 != 57)
                          break;
                        v70 = __CFADD__(v68++, 1);
                        if (v70)
                          goto LABEL_164;
                      }
                      *((_BYTE *)__dst + v62) = v69 + 1;
                    }
                    if ((_DWORD)v62 == (_DWORD)v61)
                    {
LABEL_164:
                      v71 = 0;
                      *(_QWORD *)&v121 = 0;
                      if (!*((_QWORD *)&v121 + 1))
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v122, 1uLL, 1);
                        v71 = v121;
                      }
                      *((_BYTE *)__dst + v71) = 49;
                      LODWORD(v62) = v61;
                      v61 = v121 + 1;
                      goto LABEL_170;
                    }
                    v63 = __dst;
                    v65 = (char *)__dst + v62;
                    v66 = v121 - v62;
                    if ((_QWORD)v121 == v62)
                      goto LABEL_155;
                  }
                  else
                  {
                    if (v62 < v121)
                    {
                      v64 = a3;
                      while (*((_BYTE *)__dst + v62) == 48)
                      {
                        ++v62;
                        if (!--v64)
                        {
                          LODWORD(v62) = v121;
                          break;
                        }
                      }
                    }
                    v65 = (char *)__dst + v62;
                    v66 = v121 - v62;
                    if ((_QWORD)v121 == v62)
                    {
LABEL_155:
                      v67 = v63;
LABEL_169:
                      v61 = &v63[v66] - v67;
LABEL_170:
                      v29 += v62;
                      *(_QWORD *)&v121 = v61;
                      goto LABEL_171;
                    }
                  }
                  memmove(v63, v65, v66);
                  v67 = __dst;
                  goto LABEL_169;
                }
              }
              else
              {
                v44 = 4;
                llvm::APInt::zext((const void **)&__p, 4u, (uint64_t)&v111);
                if (v117 >= 0x41 && __p)
                  operator delete[](__p);
                __p = v111;
                v117 = v112;
                v119 = 4;
              }
              v118 = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v44) & 0xA);
              v115 = v44;
              v114 = 0;
              v52 = v117;
              if (v117 < 0x41)
                goto LABEL_128;
              goto LABEL_125;
            }
          }
          else
          {
            __dst = (void *)(v44 != 0);
            LODWORD(v112) = v44;
          }
          v49 = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v44) & 0xA);
          if (!v44)
            v49 = 0;
          v111 = v49;
          goto LABEL_95;
        }
      }
      v34 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&__p);
      llvm::APInt::lshrSlowCase(&__p, v34);
      v35 = v21 - v19 + v34;
      v29 = v35 + 1;
      if (v35 == -1)
        goto LABEL_82;
      goto LABEL_44;
    }
    v15 = a2[1];
    if (a2[2] < (unint64_t)(v15 + 3))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v15 + 3, 1);
      v15 = a2[1];
    }
    v16 = *a2 + v15;
    *(_BYTE *)(v16 + 2) = 78;
    *(_WORD *)v16 = 24910;
    a2[1] += 3;
  }
}

void llvm::SmallVectorTemplateBase<char,true>::push_back(_QWORD *a1, char a2)
{
  uint64_t v4;

  v4 = a1[1];
  if ((unint64_t)(v4 + 1) > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v4 + 1, 1);
    v4 = a1[1];
  }
  *(_BYTE *)(*a1 + v4) = a2;
  ++a1[1];
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  *a1 = a2;
  v3 = operator new[](0x50uLL);
  *(_OWORD *)v3 = xmmword_18125D2E0;
  v3[3] = &llvm::semIEEEdouble;
  *((_BYTE *)v3 + 44) = 3;
  *((_DWORD *)v3 + 10) = -1023;
  llvm::APInt::tcSet((llvm::APInt *)(v3 + 4), 0, 1u);
  v3[7] = &llvm::semIEEEdouble;
  *((_BYTE *)v3 + 76) = *((_BYTE *)v3 + 76) & 0xF0 | 3;
  *((_DWORD *)v3 + 18) = -1023;
  llvm::APInt::tcSet((llvm::APInt *)(v3 + 8), 0, 1u);
  a1[1] = v3 + 2;
  return a1;
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;

  *a1 = a2;
  v5 = operator new[](0x50uLL);
  *(_OWORD *)v5 = xmmword_18125D2E0;
  v5[3] = &llvm::semIEEEdouble;
  *((_BYTE *)v5 + 44) = 2;
  v6 = v5 + 4;
  llvm::APInt::tcSet((llvm::APInt *)(v5 + 4), 0, 1u);
  *((_DWORD *)v5 + 10) = 52;
  if ((*(_DWORD *)(v5[3] + 8) - 64) <= 0xFFFFFF7F)
    v6 = (_QWORD *)*v6;
  *v6 = a3;
  llvm::detail::IEEEFloat::normalize((uint64_t)(v5 + 3), 1, 0);
  v5[7] = &llvm::semIEEEdouble;
  *((_BYTE *)v5 + 76) = *((_BYTE *)v5 + 76) & 0xF0 | 3;
  *((_DWORD *)v5 + 18) = -1023;
  llvm::APInt::tcSet((llvm::APInt *)(v5 + 8), 0, 1u);
  a1[1] = v5 + 2;
  return a1;
}

{
  _OWORD *v5;
  _OWORD *v6;
  llvm::detail::IEEEFloat *v7;
  llvm::detail::IEEEFloat *v8;
  const llvm::APInt **v9;
  const llvm::APInt *v10;
  const llvm::APInt **v11;
  const llvm::APInt *v12;
  const llvm::APInt *v14;
  int v15;
  const llvm::APInt *v16;
  int v17;

  *a1 = a2;
  v5 = operator new[](0x50uLL);
  v6 = v5 + 1;
  v7 = (llvm::detail::IEEEFloat *)((char *)v5 + 24);
  *v5 = xmmword_18125D2E0;
  v8 = (llvm::detail::IEEEFloat *)((char *)v5 + 56);
  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v9 = *(const llvm::APInt ***)a3;
  else
    v9 = (const llvm::APInt **)a3;
  v10 = *v9;
  v17 = 64;
  v16 = v10;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v7, &v16);
  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v11 = *(const llvm::APInt ***)a3;
  else
    v11 = (const llvm::APInt **)a3;
  v12 = v11[1];
  v15 = 64;
  v14 = v12;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v8, &v14);
  a1[1] = v6;
  return a1;
}

llvm::detail::DoubleAPFloat *llvm::detail::DoubleAPFloat::DoubleAPFloat(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v3;
  _OWORD *v5;
  _OWORD *v6;

  *(_QWORD *)this = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
  {
    v5 = operator new[](0x50uLL);
    v6 = v5 + 1;
    *v5 = xmmword_18125D2E0;
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)((char *)v5 + 24), (const llvm::detail::IEEEFloat *)(v3 + 8));
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)((char *)v5 + 56), (const llvm::detail::IEEEFloat *)(*((_QWORD *)a2 + 1) + 40));
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 1) = v6;
  return this;
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  *result = *a2;
  v2 = a2[1];
  a2[1] = 0;
  result[1] = v2;
  *a2 = &llvm::semBogus;
  return result;
}

uint64_t *llvm::detail::DoubleAPFloat::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  _BOOL4 v4;
  uint64_t *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::detail::DoubleAPFloat *v12;
  void *v13;
  const llvm::detail::IEEEFloat *v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t *v20;
  void *v21;
  _BOOL4 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::detail::DoubleAPFloat *v27;
  void *v28;
  const llvm::detail::IEEEFloat *v29;
  void *v30;
  void *v31;

  v2 = a2;
  if (*a1 == *a2)
  {
    v9 = a2[1];
    if (v9)
    {
      v10 = a1[1];
      v12 = (llvm::detail::DoubleAPFloat *)(v10 + 8);
      v11 = *(_QWORD *)(v10 + 8);
      v14 = (const llvm::detail::IEEEFloat *)(v9 + 8);
      v13 = *(void **)(v9 + 8);
      if ((_UNKNOWN *)v11 == &llvm::semPPCDoubleDouble)
      {
        if (v13 == &llvm::semPPCDoubleDouble)
        {
          llvm::detail::DoubleAPFloat::operator=(v12, v9 + 8);
          goto LABEL_23;
        }
        if (v10 == v9)
        {
LABEL_23:
          v17 = v2[1];
          v18 = a1[1];
          v20 = (uint64_t *)(v18 + 40);
          v19 = *(_DWORD **)(v18 + 40);
          v2 = (uint64_t *)(v17 + 40);
          v21 = *(void **)(v17 + 40);
          v22 = v21 == &llvm::semPPCDoubleDouble;
          v4 = v19 == (_DWORD *)&llvm::semPPCDoubleDouble;
          if (v19 != (_DWORD *)&llvm::semPPCDoubleDouble)
          {
            v5 = a1;
            if (v21 != &llvm::semPPCDoubleDouble)
            {
LABEL_50:
              llvm::detail::IEEEFloat::operator=(v20, v2);
              goto LABEL_11;
            }
LABEL_25:
            if (v18 == v17)
              goto LABEL_11;
            if ((v19[2] - 64) <= 0xFFFFFF7F)
            {
              v23 = *(void **)(v18 + 48);
              if (v23)
                operator delete[](v23);
            }
            goto LABEL_33;
          }
          if (v21 != &llvm::semPPCDoubleDouble)
          {
            v5 = a1;
LABEL_31:
            if (v18 == v17)
            {
              v4 = v22;
              goto LABEL_11;
            }
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v20);
            v4 = v22;
LABEL_33:
            llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v20, (const llvm::detail::IEEEFloat *)v2);
            goto LABEL_11;
          }
          while (1)
          {
            v5 = v20;
            v24 = v2[1];
            if (!v24)
            {
              v4 = 1;
              if (v20 != v2)
                goto LABEL_3;
              goto LABEL_11;
            }
            v25 = v20[1];
            v27 = (llvm::detail::DoubleAPFloat *)(v25 + 8);
            v26 = *(_QWORD *)(v25 + 8);
            v29 = (const llvm::detail::IEEEFloat *)(v24 + 8);
            v28 = *(void **)(v24 + 8);
            if ((_UNKNOWN *)v26 == &llvm::semPPCDoubleDouble)
            {
              if (v28 != &llvm::semPPCDoubleDouble)
              {
                if (v25 == v24)
                  goto LABEL_48;
                llvm::detail::DoubleAPFloat::~DoubleAPFloat(v27);
                goto LABEL_46;
              }
              llvm::detail::DoubleAPFloat::operator=(v27, v24 + 8);
            }
            else
            {
              if (v28 != &llvm::semPPCDoubleDouble)
              {
                llvm::detail::IEEEFloat::operator=((uint64_t *)v27, (uint64_t *)(v24 + 8));
                goto LABEL_48;
              }
              if (v25 != v24)
              {
                if ((*(_DWORD *)(v26 + 8) - 64) <= 0xFFFFFF7F)
                {
                  v30 = *(void **)(v25 + 16);
                  if (v30)
                    operator delete[](v30);
                }
LABEL_46:
                llvm::APFloat::Storage::Storage(v27, v29);
              }
            }
LABEL_48:
            v17 = v2[1];
            v18 = v5[1];
            v20 = (uint64_t *)(v18 + 40);
            v19 = *(_DWORD **)(v18 + 40);
            v2 = (uint64_t *)(v17 + 40);
            v31 = *(void **)(v17 + 40);
            if (v19 != (_DWORD *)&llvm::semPPCDoubleDouble)
            {
              if (v31 == &llvm::semPPCDoubleDouble)
                goto LABEL_25;
              goto LABEL_50;
            }
            if (v31 != &llvm::semPPCDoubleDouble)
              goto LABEL_31;
          }
        }
        llvm::detail::DoubleAPFloat::~DoubleAPFloat(v12);
      }
      else
      {
        if (v13 != &llvm::semPPCDoubleDouble)
        {
          llvm::detail::IEEEFloat::operator=((uint64_t *)v12, (uint64_t *)(v9 + 8));
          goto LABEL_23;
        }
        if (v10 == v9)
          goto LABEL_23;
        if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F)
        {
          v16 = *(void **)(v10 + 16);
          if (v16)
            operator delete[](v16);
        }
      }
      llvm::APFloat::Storage::Storage(v12, v14);
      goto LABEL_23;
    }
  }
  v4 = 0;
  v5 = a1;
  if (a1 != a2)
  {
LABEL_3:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v5);
    *v5 = *v2;
    v6 = v2[1];
    if (v6)
    {
      v7 = operator new[](0x50uLL);
      v8 = v7 + 1;
      *v7 = xmmword_18125D2E0;
      llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)((char *)v7 + 24), (const llvm::detail::IEEEFloat *)(v6 + 8));
      llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)((char *)v7 + 56), (const llvm::detail::IEEEFloat *)(v2[1] + 40));
    }
    else
    {
      v8 = 0;
    }
    v5[1] = (uint64_t)v8;
  }
LABEL_11:
  if (v4)
    return a1;
  else
    return v5;
}

llvm::detail::DoubleAPFloat *llvm::APFloat::operator=(llvm::detail::DoubleAPFloat *this, uint64_t *a2)
{
  uint64_t v3;
  llvm::detail::IEEEFloat *v4;
  void *v5;
  const llvm::detail::IEEEFloat *v6;
  void *v8;

  v4 = (llvm::detail::DoubleAPFloat *)((char *)this + 8);
  v3 = *((_QWORD *)this + 1);
  v6 = (const llvm::detail::IEEEFloat *)(a2 + 1);
  v5 = (void *)a2[1];
  if ((_UNKNOWN *)v3 != &llvm::semPPCDoubleDouble)
  {
    if (v5 != &llvm::semPPCDoubleDouble)
    {
      llvm::detail::IEEEFloat::operator=((uint64_t *)this + 1, a2 + 1);
      return this;
    }
    if (this == (llvm::detail::DoubleAPFloat *)a2)
      return this;
    if ((*(_DWORD *)(v3 + 8) - 64) <= 0xFFFFFF7F)
    {
      v8 = (void *)*((_QWORD *)this + 2);
      if (v8)
        operator delete[](v8);
    }
    goto LABEL_12;
  }
  if (v5 != &llvm::semPPCDoubleDouble)
  {
    if (this == (llvm::detail::DoubleAPFloat *)a2)
      return this;
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)this + 8));
LABEL_12:
    llvm::APFloat::Storage::Storage(v4, v6);
    return this;
  }
  llvm::detail::DoubleAPFloat::operator=((uint64_t *)this + 1, a2 + 1);
  return this;
}

uint64_t llvm::detail::DoubleAPFloat::addImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  const llvm::detail::IEEEFloat *v10;
  int v11;
  const llvm::detail::IEEEFloat *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  void *v18;
  unsigned __int8 v19;
  int v20;
  int v21;
  unsigned __int8 v22;
  const llvm::detail::IEEEFloat *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned __int8 v34;
  void *v35;
  int v36;
  int v37;
  int v38;
  unsigned __int8 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  int v47;
  unsigned int v48;
  const llvm::detail::IEEEFloat *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 v54;
  int v55;
  void *v56;
  const llvm::detail::IEEEFloat *v57;
  int v58;
  int v59;
  unsigned __int8 v60;
  int v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  llvm::APInt *v67;
  const unint64_t *v68;
  int v69;
  void *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  llvm::detail::DoubleAPFloat *v82;
  void *v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  unsigned __int8 *v90;
  llvm::detail::DoubleAPFloat *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  llvm::detail::DoubleAPFloat *v99;
  int v100;
  int v101;
  int v102;
  const llvm::detail::IEEEFloat *v103;
  int v104;
  int v105;
  int v106;
  unsigned __int8 v107;
  int v108;
  void *v109;
  int v110;
  int v111;
  int v112;
  unsigned __int8 v113;
  int v114;
  void *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  unsigned __int8 v121;
  int v122;
  void *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  llvm::detail::DoubleAPFloat *v130;
  void *v132;
  int v133;
  int v134;
  int v135;
  unsigned __int8 v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  llvm::detail::DoubleAPFloat *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  uint64_t v147;
  llvm::detail::DoubleAPFloat *v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  llvm::detail::DoubleAPFloat *v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  llvm::detail::IEEEFloat *v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  llvm::detail::DoubleAPFloat *v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  llvm::detail::DoubleAPFloat *v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v185;
  int v187;
  _DWORD *v188;
  void *__p;
  unsigned __int8 v190;
  uint64_t v191;
  void *v192;
  unsigned __int8 v193;
  char v194;
  uint64_t v195;
  void *v196;
  unsigned __int8 v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v10 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  v11 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)(a2 + 8));
  v12 = (const llvm::detail::IEEEFloat *)(a4 + 8);
  if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
  {
    v14 = llvm::detail::DoubleAPFloat::addWithSpecial(v11, (int)&v195, (int)a4 + 8, (llvm::detail::DoubleAPFloat *)&v195);
    goto LABEL_20;
  }
  llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)(a4 + 8));
  v14 = v13;
  if ((_DWORD)v13 == 2)
  {
    v15 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)(a4 + 8), 0);
    v14 = llvm::detail::IEEEFloat::normalize((uint64_t)&v195, a6, v15);
  }
  v16 = v197;
  if ((v197 & 7) != 3)
  {
LABEL_20:
    if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
      goto LABEL_21;
    goto LABEL_9;
  }
  v17 = *(unsigned __int8 *)(a4 + 28);
  if ((v17 & 7) == 3 && ((v17 ^ v197) & 8) == 0)
  {
    v18 = (void *)v195;
    if (*(_DWORD *)(v195 + 20) != 2)
      goto LABEL_8;
    goto LABEL_26;
  }
  v16 = v197 & 0xF7 | (8 * (a6 == 3));
  v197 = v16;
  v18 = (void *)v195;
  if (*(_DWORD *)(v195 + 20) == 2)
  {
LABEL_26:
    v197 = v16 & 0xF7;
    if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
      goto LABEL_21;
LABEL_9:
    v19 = v197;
    if ((v197 & 6) != 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_8:
  if (v18 != &llvm::semPPCDoubleDouble)
    goto LABEL_9;
LABEL_21:
  v19 = *((_BYTE *)v196 + 28);
  if ((v19 & 6) != 0)
  {
LABEL_10:
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v191, v10);
    v183 = a1;
    if ((_UNKNOWN *)v191 == &llvm::semPPCDoubleDouble)
    {
      v23 = v10;
      v25 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v191);
      v181 = llvm::detail::DoubleAPFloat::addWithSpecial(v25, (int)&v191, (int)&v195, (llvm::detail::DoubleAPFloat *)&v191);
      llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v191);
    }
    else
    {
      llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v191, (const llvm::detail::IEEEFloat *)&v195);
      if (v20 == 2)
      {
        v21 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v191, (const llvm::detail::IEEEFloat *)&v195, 1);
        v20 = llvm::detail::IEEEFloat::normalize((uint64_t)&v191, a6, v21);
      }
      v22 = v193;
      v181 = v20;
      if ((v193 & 7) == 3)
      {
        if ((v197 & 7) != 3 || ((v197 ^ v193) & 8) == 0)
        {
          v22 = v193 & 0xF7 | (8 * (a6 == 3));
          v193 = v22;
        }
        v23 = v10;
        if (*(_DWORD *)(v191 + 20) == 2)
          v193 = v22 & 0xF7;
      }
      else
      {
        v23 = v10;
      }
    }
    v26 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v188, (const llvm::detail::IEEEFloat *)&v191);
    if (v188 == (_DWORD *)&llvm::semPPCDoubleDouble)
    {
      v27 = llvm::detail::DoubleAPFloat::addWithSpecial(v26, (int)&v188, (int)a4 + 8, (llvm::detail::DoubleAPFloat *)&v188);
      v179 = v27;
      if ((_UNKNOWN *)v191 != &llvm::semPPCDoubleDouble)
        goto LABEL_40;
    }
    else
    {
      llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v188, (const llvm::detail::IEEEFloat *)(a4 + 8));
      if (v27 == 2)
      {
        v28 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v188, (const llvm::detail::IEEEFloat *)(a4 + 8), 0);
        v27 = llvm::detail::IEEEFloat::normalize((uint64_t)&v188, a6, v28);
      }
      v29 = v190;
      if ((v190 & 7) == 3)
      {
        v30 = *(unsigned __int8 *)(a4 + 28);
        if ((v30 & 7) != 3 || ((v30 ^ v190) & 8) != 0)
        {
          v29 = v190 & 0xF7 | (8 * (a6 == 3));
          v190 = v29;
        }
        if (v188[5] == 2)
          v190 = v29 & 0xF7;
      }
      v179 = v27;
      if ((_UNKNOWN *)v191 != &llvm::semPPCDoubleDouble)
      {
LABEL_40:
        llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v191, (const llvm::detail::IEEEFloat *)&v195);
        v32 = v31;
        if (v31 == 2)
        {
          v33 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v191, (const llvm::detail::IEEEFloat *)&v195, 0);
          v32 = llvm::detail::IEEEFloat::normalize((uint64_t)&v191, a6, v33);
        }
        v34 = v193;
        if ((v193 & 7) == 3)
        {
          if ((v197 & 7) != 3 || ((v197 ^ v193) & 8) != 0)
          {
            v34 = v193 & 0xF7 | (8 * (a6 == 3));
            v193 = v34;
            v35 = (void *)v191;
            if (*(_DWORD *)(v191 + 20) != 2)
            {
LABEL_46:
              if (v35 != &llvm::semPPCDoubleDouble)
                goto LABEL_47;
              goto LABEL_71;
            }
          }
          else
          {
            v35 = (void *)v191;
            if (*(_DWORD *)(v191 + 20) != 2)
              goto LABEL_46;
          }
          v193 = v34 & 0xF7;
        }
LABEL_70:
        if ((_UNKNOWN *)v191 != &llvm::semPPCDoubleDouble)
        {
LABEL_47:
          llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v191, v23);
          v37 = v36;
          if (v36 == 2)
          {
            v38 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v191, v23, 1);
            v36 = llvm::detail::IEEEFloat::normalize((uint64_t)&v191, a6, v38);
            v37 = v36;
          }
          v39 = v193;
          v40 = a3;
          if ((v193 & 7) == 3)
          {
            v41 = *(unsigned __int8 *)(a2 + 28);
            if ((v41 & 7) == 3 && ((v41 ^ v193) & 8) != 0)
            {
              v42 = v191;
              if (*(_DWORD *)(v191 + 20) != 2)
                goto LABEL_53;
            }
            else
            {
              v39 = v193 & 0xF7 | (8 * (a6 == 3));
              v193 = v39;
              v42 = v191;
              if (*(_DWORD *)(v191 + 20) != 2)
              {
LABEL_53:
                if ((_UNKNOWN *)v42 != &llvm::semPPCDoubleDouble)
                {
LABEL_54:
                  if (*(_DWORD *)(v42 + 20) != 2 || (v193 & 5 | 2) != 3)
                    v193 ^= 8u;
                  if (v188 != (_DWORD *)&llvm::semPPCDoubleDouble)
                  {
LABEL_58:
                    llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v188, (const llvm::detail::IEEEFloat *)&v191);
                    v44 = v43;
                    if (v43 == 2)
                    {
                      v45 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v188, (const llvm::detail::IEEEFloat *)&v191, 0);
                      v43 = llvm::detail::IEEEFloat::normalize((uint64_t)&v188, a6, v45);
                      v44 = v43;
                    }
                    v46 = v190;
                    if ((v190 & 7) == 3)
                    {
                      if ((v193 & 7) != 3 || ((v193 ^ v190) & 8) != 0)
                      {
                        v46 = v190 & 0xF7 | (8 * (a6 == 3));
                        v190 = v46;
                      }
                      if (v188[5] != 2)
                      {
                        v48 = v14;
                        v49 = (const llvm::detail::IEEEFloat *)(v40 + 8);
                        if (v188 != (_DWORD *)&llvm::semPPCDoubleDouble)
                        {
LABEL_76:
                          v50 = a6;
                          llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v188, v49);
                          v52 = v51;
                          if (v51 == 2)
                          {
                            v53 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v188, v49, 0);
                            v51 = llvm::detail::IEEEFloat::normalize((uint64_t)&v188, v50, v53);
                            v52 = v51;
                          }
                          v54 = v190;
                          if ((v190 & 7) == 3)
                          {
                            v55 = *(unsigned __int8 *)(v40 + 28);
                            if ((v55 & 7) != 3 || ((v55 ^ v190) & 8) != 0)
                            {
                              v54 = v190 & 0xF7 | (8 * (v50 == 3));
                              v190 = v54;
                              v56 = v188;
                              if (v188[5] != 2)
                              {
LABEL_82:
                                v57 = (const llvm::detail::IEEEFloat *)(a5 + 8);
                                if (v56 != &llvm::semPPCDoubleDouble)
                                  goto LABEL_83;
                                goto LABEL_114;
                              }
                            }
                            else
                            {
                              v56 = v188;
                              if (v188[5] != 2)
                                goto LABEL_82;
                            }
                            v190 = v54 & 0xF7;
                          }
LABEL_113:
                          v57 = (const llvm::detail::IEEEFloat *)(a5 + 8);
                          if (v188 != (_DWORD *)&llvm::semPPCDoubleDouble)
                          {
LABEL_83:
                            llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v188, v57);
                            if (v58 == 2)
                            {
                              v59 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v188, v57, 0);
                              v58 = llvm::detail::IEEEFloat::normalize((uint64_t)&v188, v50, v59);
                            }
                            v60 = v190;
                            if ((v190 & 7) == 3)
                            {
                              v61 = a5[28];
                              if ((v61 & 7) != 3 || ((v61 ^ v190) & 8) != 0)
                              {
                                v60 = v190 & 0xF7 | (8 * (v50 == 3));
                                v190 = v60;
                              }
                              v62 = v188;
                              if (v188[5] != 2)
                              {
LABEL_116:
                                v73 = v181 | v179 | v32 | v37 | v44 | v52 | v58 | v48;
                                if (v62 == &llvm::semPPCDoubleDouble)
                                {
                                  v74 = *((_BYTE *)__p + 28);
                                  v75 = v183;
                                  if ((v74 & 7) != 3)
                                    goto LABEL_123;
                                }
                                else
                                {
                                  v74 = v190;
                                  v75 = v183;
                                  if ((v190 & 7) != 3)
                                    goto LABEL_123;
                                }
                                if ((v74 & 8) == 0)
                                {
                                  llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*(_QWORD *)(v75 + 8) + 8), (llvm::APFloatBase *)&v195);
                                  llvm::APFloat::makeZero((llvm::APFloat **)(*(_QWORD *)(v75 + 8) + 32), 0);
                                  v14 = 0;
                                  v76 = 0;
                                  v77 = v188;
                                  if (v188 == (_DWORD *)&llvm::semPPCDoubleDouble)
                                    goto LABEL_180;
                                  goto LABEL_161;
                                }
LABEL_123:
                                v78 = *(_QWORD *)(v75 + 8);
                                v80 = (uint64_t *)(v78 + 8);
                                v79 = *(_QWORD *)(v78 + 8);
                                if ((_UNKNOWN *)v79 == &llvm::semPPCDoubleDouble)
                                {
                                  if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
                                  {
                                    v58 = llvm::detail::DoubleAPFloat::operator=(v80, &v195);
                                    v81 = *(_QWORD *)(v75 + 8);
                                    v82 = (llvm::detail::DoubleAPFloat *)(v81 + 8);
                                    if (*(_UNKNOWN **)(v81 + 8) == &llvm::semPPCDoubleDouble)
                                      goto LABEL_148;
                                    goto LABEL_136;
                                  }
                                  if ((char *)v78 != &v194)
                                  {
                                    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v80);
LABEL_134:
                                    v58 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v80, (const llvm::detail::IEEEFloat *)&v195);
                                  }
                                }
                                else
                                {
                                  if ((_UNKNOWN *)v195 != &llvm::semPPCDoubleDouble)
                                  {
                                    v58 = llvm::detail::IEEEFloat::operator=(v80, &v195);
                                    v81 = *(_QWORD *)(v75 + 8);
                                    v82 = (llvm::detail::DoubleAPFloat *)(v81 + 8);
                                    if (*(_UNKNOWN **)(v81 + 8) == &llvm::semPPCDoubleDouble)
                                    {
LABEL_148:
                                      v14 = llvm::detail::DoubleAPFloat::addWithSpecial(v58, (int)v82, (int)&v188, v82) | v73;
                                      v87 = *(_QWORD *)(v75 + 8);
                                      if (*(_UNKNOWN **)(v87 + 8) == &llvm::semPPCDoubleDouble)
                                        goto LABEL_149;
                                      goto LABEL_145;
                                    }
LABEL_136:
                                    llvm::detail::IEEEFloat::addOrSubtractSpecials(v82, (const llvm::detail::IEEEFloat *)&v188);
                                    if (v84 == 2)
                                    {
                                      v85 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v82, (const llvm::detail::IEEEFloat *)&v188, 0);
                                      v84 = llvm::detail::IEEEFloat::normalize((uint64_t)v82, v50, v85);
                                    }
                                    v86 = *(unsigned __int8 *)(v81 + 28);
                                    if ((v86 & 7) == 3)
                                    {
                                      if ((v190 & 7) != 3 || ((v190 ^ v86) & 8) != 0)
                                      {
                                        LOBYTE(v86) = v86 & 0xF7 | (8 * (v50 == 3));
                                        *(_BYTE *)(v81 + 28) = v86;
                                      }
                                      if (*(_DWORD *)(*(_QWORD *)v82 + 20) == 2)
                                        *(_BYTE *)(v81 + 28) = v86 & 0xF7;
                                    }
                                    v14 = v84 | v73;
                                    v87 = *(_QWORD *)(v75 + 8);
                                    if (*(_UNKNOWN **)(v87 + 8) == &llvm::semPPCDoubleDouble)
                                    {
LABEL_149:
                                      v88 = *(_BYTE *)(*(_QWORD *)(v87 + 16) + 28) & 7;
                                      if (v88 == 1)
                                        goto LABEL_160;
LABEL_150:
                                      if (v88)
                                      {
                                        v89 = v14;
                                        llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(v87 + 40), (llvm::APFloatBase *)&v195);
                                        v90 = *(unsigned __int8 **)(v75 + 8);
                                        v91 = (llvm::detail::DoubleAPFloat *)(v90 + 40);
                                        if (*((_UNKNOWN **)v90 + 5) == &llvm::semPPCDoubleDouble)
                                        {
                                          v98 = llvm::detail::DoubleAPFloat::changeSign(v91);
                                          v93 = llvm::detail::DoubleAPFloat::addWithSpecial(v98, (int)v91, (int)v90 + 8, v91);
                                          v92 = llvm::detail::DoubleAPFloat::changeSign(v91);
                                        }
                                        else
                                        {
                                          llvm::detail::IEEEFloat::addOrSubtractSpecials(v91, (const llvm::detail::IEEEFloat *)(v90 + 8));
                                          v93 = v92;
                                          if (v92 == 2)
                                          {
                                            v94 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v91, (const llvm::detail::IEEEFloat *)(v90 + 8), 1);
                                            v92 = llvm::detail::IEEEFloat::normalize((uint64_t)v91, v50, v94);
                                            v93 = v92;
                                          }
                                          v95 = v90[60];
                                          if ((v95 & 7) == 3)
                                          {
                                            v96 = v90[28];
                                            if ((v96 & 7) != 3 || ((v96 ^ v95) & 8) == 0)
                                            {
                                              LOBYTE(v95) = v95 & 0xF7 | (8 * (v50 == 3));
                                              v90[60] = v95;
                                            }
                                            if (*(_DWORD *)(*(_QWORD *)v91 + 20) == 2)
                                              v90[60] = v95 & 0xF7;
                                          }
                                        }
                                        v14 = *(_QWORD *)(v75 + 8);
                                        v99 = (llvm::detail::DoubleAPFloat *)(v14 + 40);
                                        if (*(_UNKNOWN **)(v14 + 40) == &llvm::semPPCDoubleDouble)
                                        {
                                          v100 = llvm::detail::DoubleAPFloat::addWithSpecial(v92, (int)v99, (int)&v188, v99);
                                        }
                                        else
                                        {
                                          llvm::detail::IEEEFloat::addOrSubtractSpecials(v99, (const llvm::detail::IEEEFloat *)&v188);
                                          if (v100 == 2)
                                          {
                                            v101 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v99, (const llvm::detail::IEEEFloat *)&v188, 0);
                                            v100 = llvm::detail::IEEEFloat::normalize((uint64_t)v99, v50, v101);
                                          }
                                          v102 = *(unsigned __int8 *)(v14 + 60);
                                          if ((v102 & 7) == 3)
                                          {
                                            if ((v190 & 7) != 3 || ((v190 ^ v102) & 8) != 0)
                                            {
                                              LOBYTE(v102) = v102 & 0xF7 | (8 * (v50 == 3));
                                              *(_BYTE *)(v14 + 60) = v102;
                                            }
                                            if (*(_DWORD *)(*(_QWORD *)v99 + 20) == 2)
                                              *(_BYTE *)(v14 + 60) = v102 & 0xF7;
                                          }
                                        }
                                        v73 = v93 | v100 | v89;
                                        v76 = 1;
                                        v77 = v188;
                                        if (v188 == (_DWORD *)&llvm::semPPCDoubleDouble)
                                        {
LABEL_180:
                                          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v188);
                                          v97 = v191;
                                          if ((_UNKNOWN *)v191 == &llvm::semPPCDoubleDouble)
                                          {
LABEL_181:
                                            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v191);
                                            goto LABEL_182;
                                          }
LABEL_165:
                                          if ((*(_DWORD *)(v97 + 8) - 64) <= 0xFFFFFF7F && v192)
                                            operator delete[](v192);
LABEL_182:
                                          if (!v76)
                                            goto LABEL_184;
                                          goto LABEL_183;
                                        }
LABEL_161:
                                        if ((v77[2] - 64) <= 0xFFFFFF7F && __p)
                                          operator delete[](__p);
                                        v97 = v191;
                                        if ((_UNKNOWN *)v191 == &llvm::semPPCDoubleDouble)
                                          goto LABEL_181;
                                        goto LABEL_165;
                                      }
LABEL_160:
                                      llvm::APFloat::makeZero((llvm::APFloat **)(v87 + 32), 0);
                                      v76 = 0;
                                      v73 = v14;
                                      v77 = v188;
                                      if (v188 == (_DWORD *)&llvm::semPPCDoubleDouble)
                                        goto LABEL_180;
                                      goto LABEL_161;
                                    }
LABEL_145:
                                    v88 = *(_BYTE *)(v87 + 28) & 7;
                                    if (v88 == 1)
                                      goto LABEL_160;
                                    goto LABEL_150;
                                  }
                                  if ((char *)v78 != &v194)
                                  {
                                    if ((*(_DWORD *)(v79 + 8) - 64) <= 0xFFFFFF7F)
                                    {
                                      v83 = *(void **)(v78 + 16);
                                      if (v83)
                                        operator delete[](v83);
                                    }
                                    goto LABEL_134;
                                  }
                                }
                                v81 = *(_QWORD *)(v75 + 8);
                                v82 = (llvm::detail::DoubleAPFloat *)(v81 + 8);
                                if (*(_UNKNOWN **)(v81 + 8) == &llvm::semPPCDoubleDouble)
                                  goto LABEL_148;
                                goto LABEL_136;
                              }
                              v190 = v60 & 0xF7;
                            }
LABEL_115:
                            v62 = v188;
                            goto LABEL_116;
                          }
LABEL_114:
                          v58 = llvm::detail::DoubleAPFloat::addWithSpecial(v51, (int)&v188, (int)v57, (llvm::detail::DoubleAPFloat *)&v188);
                          goto LABEL_115;
                        }
LABEL_112:
                        v50 = a6;
                        v51 = llvm::detail::DoubleAPFloat::addWithSpecial(v43, (int)&v188, (int)v49, (llvm::detail::DoubleAPFloat *)&v188);
                        v52 = v51;
                        goto LABEL_113;
                      }
                      v190 = v46 & 0xF7;
                    }
LABEL_75:
                    v48 = v14;
                    v49 = (const llvm::detail::IEEEFloat *)(v40 + 8);
                    if (v188 != (_DWORD *)&llvm::semPPCDoubleDouble)
                      goto LABEL_76;
                    goto LABEL_112;
                  }
LABEL_74:
                  v43 = llvm::detail::DoubleAPFloat::addWithSpecial(v36, (int)&v188, (int)&v191, (llvm::detail::DoubleAPFloat *)&v188);
                  v44 = v43;
                  goto LABEL_75;
                }
LABEL_73:
                v36 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v191);
                if (v188 != (_DWORD *)&llvm::semPPCDoubleDouble)
                  goto LABEL_58;
                goto LABEL_74;
              }
            }
            v193 = v39 & 0xF7;
            v42 = v191;
            if ((_UNKNOWN *)v191 != &llvm::semPPCDoubleDouble)
              goto LABEL_54;
            goto LABEL_73;
          }
LABEL_72:
          v42 = v191;
          if ((_UNKNOWN *)v191 != &llvm::semPPCDoubleDouble)
            goto LABEL_54;
          goto LABEL_73;
        }
LABEL_71:
        v47 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v191);
        v37 = llvm::detail::DoubleAPFloat::addWithSpecial(v47, (int)&v191, (int)v23, (llvm::detail::DoubleAPFloat *)&v191);
        v36 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v191);
        v40 = a3;
        goto LABEL_72;
      }
    }
    v32 = llvm::detail::DoubleAPFloat::addWithSpecial(v27, (int)&v191, (int)&v195, (llvm::detail::DoubleAPFloat *)&v191);
    goto LABEL_70;
  }
LABEL_22:
  if ((v19 & 7) == 0)
  {
    if (*(_UNKNOWN **)v10 == &llvm::semPPCDoubleDouble)
    {
      v65 = llvm::detail::DoubleAPFloat::compareAbsoluteValue(v10, (const llvm::detail::DoubleAPFloat *)(a4 + 8));
      v69 = v65;
      v71 = (uint64_t *)(a5 + 8);
      v70 = (void *)*((_QWORD *)a5 + 1);
      v72 = v195;
      if ((_UNKNOWN *)v195 != &llvm::semPPCDoubleDouble)
        goto LABEL_109;
    }
    else
    {
      v63 = *(_DWORD *)(a2 + 24);
      v64 = *(_DWORD *)(a4 + 24);
      v65 = v63 - v64;
      if (v63 == v64)
      {
        v66 = *(_DWORD *)(*(_QWORD *)v10 + 8);
        if ((v66 - 64) >= 0xFFFFFF80)
          v67 = (llvm::APInt *)(a2 + 16);
        else
          v67 = *(llvm::APInt **)(a2 + 16);
        if ((*(_DWORD *)(*(_QWORD *)(a4 + 8) + 8) - 64) >= 0xFFFFFF80)
          v68 = (const unint64_t *)(a4 + 16);
        else
          v68 = *(const unint64_t **)(a4 + 16);
        v65 = llvm::APInt::tcCompare(v67, v68, (const unint64_t *)((v66 + 64) >> 6));
      }
      if (v65 <= 0)
        v69 = v65 >= 0;
      else
        v69 = 2;
      v71 = (uint64_t *)(a5 + 8);
      v70 = (void *)*((_QWORD *)a5 + 1);
      v72 = v195;
      if ((_UNKNOWN *)v195 != &llvm::semPPCDoubleDouble)
      {
LABEL_109:
        if (v70 != &llvm::semPPCDoubleDouble)
        {
          v65 = llvm::detail::IEEEFloat::operator=(&v195, v71);
          goto LABEL_198;
        }
        if (&v194 != a5)
        {
          if ((*(_DWORD *)(v72 + 8) - 64) <= 0xFFFFFF7F && v196)
            operator delete[](v196);
LABEL_196:
          v65 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)v71);
          goto LABEL_198;
        }
        goto LABEL_198;
      }
    }
    if (v70 != &llvm::semPPCDoubleDouble)
    {
      if (&v194 == a5)
        goto LABEL_198;
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v195);
      goto LABEL_196;
    }
    v65 = llvm::detail::DoubleAPFloat::operator=(&v195, v71);
LABEL_198:
    v180 = a4;
    v182 = a2;
    v103 = (const llvm::detail::IEEEFloat *)(a3 + 8);
    v178 = a6;
    if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
    {
      v104 = llvm::detail::DoubleAPFloat::addWithSpecial(v65, (int)&v195, (int)a3 + 8, (llvm::detail::DoubleAPFloat *)&v195);
      v105 = v104;
      v109 = (void *)v195;
      if (v69 == 2)
        goto LABEL_208;
    }
    else
    {
      llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v195, (const llvm::detail::IEEEFloat *)(a3 + 8));
      v105 = v104;
      if (v104 == 2)
      {
        v106 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v195, v103, 0);
        v104 = llvm::detail::IEEEFloat::normalize((uint64_t)&v195, v178, v106);
        v105 = v104;
      }
      v107 = v197;
      if ((v197 & 7) == 3)
      {
        v108 = *(unsigned __int8 *)(a3 + 28);
        if ((v108 & 7) != 3 || ((v108 ^ v197) & 8) != 0)
        {
          v107 = v197 & 0xF7 | (8 * (v178 == 3));
          v197 = v107;
        }
        if (*(_DWORD *)(v195 + 20) == 2)
          v197 = v107 & 0xF7;
      }
      v109 = (void *)v195;
      if (v69 == 2)
      {
LABEL_208:
        if (v109 == &llvm::semPPCDoubleDouble)
        {
          v110 = llvm::detail::DoubleAPFloat::addWithSpecial(v104, (int)&v195, (int)v12, (llvm::detail::DoubleAPFloat *)&v195);
          v111 = v110;
        }
        else
        {
          llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v195, v12);
          v111 = v110;
          if (v110 == 2)
          {
            v112 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v195, v12, 0);
            v110 = llvm::detail::IEEEFloat::normalize((uint64_t)&v195, v178, v112);
            v111 = v110;
          }
          v113 = v197;
          if ((v197 & 7) == 3)
          {
            v114 = *(unsigned __int8 *)(v180 + 28);
            if ((v114 & 7) != 3 || ((v114 ^ v197) & 8) != 0)
            {
              v113 = v197 & 0xF7 | (8 * (v178 == 3));
              v197 = v113;
              v115 = (void *)v195;
              if (*(_DWORD *)(v195 + 20) != 2)
              {
LABEL_215:
                if (v115 != &llvm::semPPCDoubleDouble)
                  goto LABEL_216;
                goto LABEL_240;
              }
            }
            else
            {
              v115 = (void *)v195;
              if (*(_DWORD *)(v195 + 20) != 2)
                goto LABEL_215;
            }
            v197 = v113 & 0xF7;
            if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
            {
LABEL_240:
              v125 = (int)v10;
LABEL_244:
              v116 = llvm::detail::DoubleAPFloat::addWithSpecial(v110, (int)&v195, v125, (llvm::detail::DoubleAPFloat *)&v195);
              goto LABEL_245;
            }
LABEL_216:
            llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v195, v10);
            if (v116 == 2)
            {
              v117 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v195, v10, 0);
              v116 = llvm::detail::IEEEFloat::normalize((uint64_t)&v195, v178, v117);
            }
            v118 = v197;
            if ((v197 & 7) == 3)
            {
              v119 = *(unsigned __int8 *)(v182 + 28);
              if ((v119 & 7) != 3)
                goto LABEL_235;
              goto LABEL_234;
            }
            goto LABEL_245;
          }
        }
        if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
          goto LABEL_240;
        goto LABEL_216;
      }
    }
    if (v109 == &llvm::semPPCDoubleDouble)
    {
      v110 = llvm::detail::DoubleAPFloat::addWithSpecial(v104, (int)&v195, (int)v10, (llvm::detail::DoubleAPFloat *)&v195);
      v111 = v110;
    }
    else
    {
      llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v195, v10);
      v111 = v110;
      if (v110 == 2)
      {
        v120 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v195, v10, 0);
        v110 = llvm::detail::IEEEFloat::normalize((uint64_t)&v195, v178, v120);
        v111 = v110;
      }
      v121 = v197;
      if ((v197 & 7) == 3)
      {
        v122 = *(unsigned __int8 *)(v182 + 28);
        if ((v122 & 7) != 3 || ((v122 ^ v197) & 8) != 0)
        {
          v121 = v197 & 0xF7 | (8 * (v178 == 3));
          v197 = v121;
          v123 = (void *)v195;
          if (*(_DWORD *)(v195 + 20) != 2)
          {
LABEL_229:
            if (v123 != &llvm::semPPCDoubleDouble)
              goto LABEL_230;
LABEL_243:
            v125 = (int)v12;
            goto LABEL_244;
          }
        }
        else
        {
          v123 = (void *)v195;
          if (*(_DWORD *)(v195 + 20) != 2)
            goto LABEL_229;
        }
        v197 = v121 & 0xF7;
        if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
          goto LABEL_243;
LABEL_230:
        llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v195, v12);
        if (v116 == 2)
        {
          v124 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v195, v12, 0);
          v116 = llvm::detail::IEEEFloat::normalize((uint64_t)&v195, v178, v124);
        }
        v118 = v197;
        if ((v197 & 7) == 3)
        {
          v119 = *(unsigned __int8 *)(v180 + 28);
          if ((v119 & 7) != 3)
          {
LABEL_235:
            LOBYTE(v118) = v118 & 0xF7 | (8 * (v178 == 3));
            v197 = v118;
LABEL_236:
            if (*(_DWORD *)(v195 + 20) == 2)
              v197 = v118 & 0xF7;
            goto LABEL_245;
          }
LABEL_234:
          if (((v119 ^ v118) & 8) == 0)
            goto LABEL_236;
          goto LABEL_235;
        }
LABEL_245:
        v185 = v116 | v111 | v105;
        if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
        {
          v126 = *((_BYTE *)v196 + 28) & 7;
          v127 = v178;
          if (v126 == 1)
            goto LABEL_253;
        }
        else
        {
          v126 = v197 & 7;
          v127 = v178;
          if (v126 == 1)
          {
LABEL_253:
            llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*(_QWORD *)(a1 + 8) + 8), (llvm::APFloatBase *)&v195);
            llvm::APFloat::makeZero((llvm::APFloat **)(*(_QWORD *)(a1 + 8) + 32), 0);
            v14 = v185;
            v24 = v195;
            if ((_UNKNOWN *)v195 != &llvm::semPPCDoubleDouble)
              goto LABEL_185;
            goto LABEL_254;
          }
        }
        if (!v126)
          goto LABEL_253;
        v128 = *(_QWORD *)(a1 + 8);
        v130 = (llvm::detail::DoubleAPFloat *)(v128 + 8);
        v129 = *(_QWORD *)(v128 + 8);
        if ((_UNKNOWN *)v129 == &llvm::semPPCDoubleDouble)
        {
          if ((_UNKNOWN *)v195 != &llvm::semPPCDoubleDouble)
          {
            if ((char *)v128 == &v194)
              goto LABEL_271;
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v130);
            goto LABEL_269;
          }
          llvm::detail::DoubleAPFloat::operator=((uint64_t *)v130, &v195);
        }
        else
        {
          if ((_UNKNOWN *)v195 != &llvm::semPPCDoubleDouble)
          {
            llvm::detail::IEEEFloat::operator=((uint64_t *)v130, &v195);
            goto LABEL_271;
          }
          if ((char *)v128 != &v194)
          {
            if ((*(_DWORD *)(v129 + 8) - 64) <= 0xFFFFFF7F)
            {
              v132 = *(void **)(v128 + 16);
              if (v132)
                operator delete[](v132);
            }
LABEL_269:
            llvm::APFloat::Storage::Storage(v130, (const llvm::detail::IEEEFloat *)&v195);
          }
        }
LABEL_271:
        v133 = llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v191, v103);
        if ((_UNKNOWN *)v191 == &llvm::semPPCDoubleDouble)
        {
          v138 = v127;
          v134 = llvm::detail::DoubleAPFloat::addWithSpecial(v133, (int)&v191, (int)v71, (llvm::detail::DoubleAPFloat *)&v191);
        }
        else
        {
          llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)&v191, (const llvm::detail::IEEEFloat *)v71);
          if (v134 == 2)
          {
            v135 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)&v191, (const llvm::detail::IEEEFloat *)v71, 0);
            v134 = llvm::detail::IEEEFloat::normalize((uint64_t)&v191, v127, v135);
          }
          v136 = v193;
          if ((v193 & 7) == 3)
          {
            v137 = a5[28];
            if ((v137 & 7) != 3 || ((v137 ^ v193) & 8) != 0)
            {
              v136 = v193 & 0xF7 | (8 * (v127 == 3));
              v193 = v136;
            }
            v138 = v127;
            if (*(_DWORD *)(v191 + 20) == 2)
              v193 = v136 & 0xF7;
          }
          else
          {
            v138 = v127;
          }
        }
        v139 = *(_QWORD *)(a1 + 8);
        v140 = v139 + 32;
        v142 = (llvm::detail::DoubleAPFloat *)(v139 + 40);
        v141 = *(_QWORD *)(v139 + 40);
        v187 = v134;
        if (v69 == 2)
        {
          v143 = *(void **)v10;
          if ((_UNKNOWN *)v141 == &llvm::semPPCDoubleDouble)
          {
            if (v143 != &llvm::semPPCDoubleDouble)
            {
              if (v140 == v182)
                goto LABEL_306;
              llvm::detail::DoubleAPFloat::~DoubleAPFloat(v142);
              goto LABEL_299;
            }
            llvm::detail::DoubleAPFloat::operator=((uint64_t *)v142, (uint64_t *)v10);
          }
          else
          {
            if (v143 != &llvm::semPPCDoubleDouble)
            {
              llvm::detail::IEEEFloat::operator=((uint64_t *)v142, (uint64_t *)v10);
              goto LABEL_306;
            }
            if (v140 != v182)
            {
              if ((*(_DWORD *)(v141 + 8) - 64) <= 0xFFFFFF7F)
              {
                v145 = *(void **)(v139 + 48);
                if (v145)
                  operator delete[](v145);
              }
LABEL_299:
              llvm::APFloat::Storage::Storage(v142, v10);
            }
          }
LABEL_306:
          v147 = *(_QWORD *)(a1 + 8);
          v148 = (llvm::detail::DoubleAPFloat *)(v147 + 40);
          if (*(_UNKNOWN **)(v147 + 40) == &llvm::semPPCDoubleDouble)
          {
            v153 = llvm::detail::DoubleAPFloat::changeSign(v148);
            v150 = llvm::detail::DoubleAPFloat::addWithSpecial(v153, (int)v148, (int)&v195, v148);
            v149 = llvm::detail::DoubleAPFloat::changeSign(v148);
          }
          else
          {
            llvm::detail::IEEEFloat::addOrSubtractSpecials(v148, (const llvm::detail::IEEEFloat *)&v195);
            v150 = v149;
            if (v149 == 2)
            {
              v151 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v148, (const llvm::detail::IEEEFloat *)&v195, 1);
              v149 = llvm::detail::IEEEFloat::normalize((uint64_t)v148, v138, v151);
              v150 = v149;
            }
            v152 = *(unsigned __int8 *)(v147 + 60);
            if ((v152 & 7) == 3)
            {
              if ((v197 & 7) != 3 || ((v197 ^ v152) & 8) == 0)
              {
                LOBYTE(v152) = v152 & 0xF7 | (8 * (v138 == 3));
                *(_BYTE *)(v147 + 60) = v152;
              }
              if (*(_DWORD *)(*(_QWORD *)v148 + 20) == 2)
                *(_BYTE *)(v147 + 60) = v152 & 0xF7;
            }
          }
          v154 = *(_QWORD *)(a1 + 8);
          v155 = (llvm::detail::DoubleAPFloat *)(v154 + 40);
          if (*(_UNKNOWN **)(v154 + 40) == &llvm::semPPCDoubleDouble)
          {
            v156 = llvm::detail::DoubleAPFloat::addWithSpecial(v149, (int)v155, (int)v12, v155);
          }
          else
          {
            llvm::detail::IEEEFloat::addOrSubtractSpecials(v155, v12);
            if (v156 == 2)
            {
              v157 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v155, v12, 0);
              v156 = llvm::detail::IEEEFloat::normalize((uint64_t)v155, v138, v157);
            }
            v158 = *(unsigned __int8 *)(v154 + 60);
            if ((v158 & 7) == 3)
            {
              v159 = *(unsigned __int8 *)(v180 + 28);
              if ((v159 & 7) != 3 || ((v159 ^ v158) & 8) != 0)
              {
                LOBYTE(v158) = v158 & 0xF7 | (8 * (v138 == 3));
                *(_BYTE *)(v154 + 60) = v158;
              }
              if (*(_DWORD *)(*(_QWORD *)v155 + 20) == 2)
                *(_BYTE *)(v154 + 60) = v158 & 0xF7;
            }
          }
          v160 = v156 | v150;
          v161 = *(_QWORD *)(a1 + 8);
          v162 = (llvm::detail::IEEEFloat *)(v161 + 40);
          if (*(_UNKNOWN **)(v161 + 40) != &llvm::semPPCDoubleDouble)
          {
LABEL_327:
            llvm::detail::IEEEFloat::addOrSubtractSpecials(v162, (const llvm::detail::IEEEFloat *)&v191);
            if (v163 == 2)
            {
              v164 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v162, (const llvm::detail::IEEEFloat *)&v191, 0);
              v163 = llvm::detail::IEEEFloat::normalize((uint64_t)v162, v138, v164);
            }
            v165 = *(unsigned __int8 *)(v161 + 60);
            if ((v165 & 7) == 3)
            {
              if ((v193 & 7) != 3 || ((v193 ^ v165) & 8) != 0)
              {
                LOBYTE(v165) = v165 & 0xF7 | (8 * (v138 == 3));
                *(_BYTE *)(v161 + 60) = v165;
              }
              if (*(_DWORD *)(*(_QWORD *)v162 + 20) == 2)
                *(_BYTE *)(v161 + 60) = v165 & 0xF7;
            }
            goto LABEL_358;
          }
LABEL_357:
          v163 = llvm::detail::DoubleAPFloat::addWithSpecial(v156, (int)v162, (int)&v191, v162);
LABEL_358:
          v73 = v187 | v160 | v163 | v185;
          if ((_UNKNOWN *)v191 == &llvm::semPPCDoubleDouble)
          {
            llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v191);
          }
          else if ((*(_DWORD *)(v191 + 8) - 64) <= 0xFFFFFF7F && v192)
          {
            operator delete[](v192);
          }
LABEL_183:
          v14 = v73;
LABEL_184:
          v24 = v195;
          if ((_UNKNOWN *)v195 != &llvm::semPPCDoubleDouble)
            goto LABEL_185;
LABEL_254:
          llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v195);
          return v14;
        }
        v144 = *(void **)v12;
        if ((_UNKNOWN *)v141 == &llvm::semPPCDoubleDouble)
        {
          if (v144 != &llvm::semPPCDoubleDouble)
          {
            if (v140 == v180)
              goto LABEL_336;
            llvm::detail::DoubleAPFloat::~DoubleAPFloat(v142);
            goto LABEL_304;
          }
          llvm::detail::DoubleAPFloat::operator=((uint64_t *)v142, (uint64_t *)v12);
        }
        else
        {
          if (v144 != &llvm::semPPCDoubleDouble)
          {
            llvm::detail::IEEEFloat::operator=((uint64_t *)v142, (uint64_t *)v12);
            goto LABEL_336;
          }
          if (v140 != v180)
          {
            if ((*(_DWORD *)(v141 + 8) - 64) <= 0xFFFFFF7F)
            {
              v146 = *(void **)(v139 + 48);
              if (v146)
                operator delete[](v146);
            }
LABEL_304:
            llvm::APFloat::Storage::Storage(v142, v12);
          }
        }
LABEL_336:
        v166 = *(_QWORD *)(a1 + 8);
        v167 = (llvm::detail::DoubleAPFloat *)(v166 + 40);
        if (*(_UNKNOWN **)(v166 + 40) == &llvm::semPPCDoubleDouble)
        {
          v172 = llvm::detail::DoubleAPFloat::changeSign(v167);
          v169 = llvm::detail::DoubleAPFloat::addWithSpecial(v172, (int)v167, (int)&v195, v167);
          v168 = llvm::detail::DoubleAPFloat::changeSign(v167);
        }
        else
        {
          llvm::detail::IEEEFloat::addOrSubtractSpecials(v167, (const llvm::detail::IEEEFloat *)&v195);
          v169 = v168;
          if (v168 == 2)
          {
            v170 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v167, (const llvm::detail::IEEEFloat *)&v195, 1);
            v168 = llvm::detail::IEEEFloat::normalize((uint64_t)v167, v138, v170);
            v169 = v168;
          }
          v171 = *(unsigned __int8 *)(v166 + 60);
          if ((v171 & 7) == 3)
          {
            if ((v197 & 7) != 3 || ((v197 ^ v171) & 8) == 0)
            {
              LOBYTE(v171) = v171 & 0xF7 | (8 * (v138 == 3));
              *(_BYTE *)(v166 + 60) = v171;
            }
            if (*(_DWORD *)(*(_QWORD *)v167 + 20) == 2)
              *(_BYTE *)(v166 + 60) = v171 & 0xF7;
          }
        }
        v173 = *(_QWORD *)(a1 + 8);
        v174 = (llvm::detail::DoubleAPFloat *)(v173 + 40);
        if (*(_UNKNOWN **)(v173 + 40) == &llvm::semPPCDoubleDouble)
        {
          v156 = llvm::detail::DoubleAPFloat::addWithSpecial(v168, (int)v174, (int)v10, v174);
        }
        else
        {
          llvm::detail::IEEEFloat::addOrSubtractSpecials(v174, v10);
          if (v156 == 2)
          {
            v175 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v174, v10, 0);
            v156 = llvm::detail::IEEEFloat::normalize((uint64_t)v174, v138, v175);
          }
          v176 = *(unsigned __int8 *)(v173 + 60);
          if ((v176 & 7) == 3)
          {
            v177 = *(unsigned __int8 *)(v182 + 28);
            if ((v177 & 7) != 3 || ((v177 ^ v176) & 8) != 0)
            {
              LOBYTE(v176) = v176 & 0xF7 | (8 * (v138 == 3));
              *(_BYTE *)(v173 + 60) = v176;
            }
            if (*(_DWORD *)(*(_QWORD *)v174 + 20) == 2)
              *(_BYTE *)(v173 + 60) = v176 & 0xF7;
          }
        }
        v160 = v156 | v169;
        v161 = *(_QWORD *)(a1 + 8);
        v162 = (llvm::detail::IEEEFloat *)(v161 + 40);
        if (*(_UNKNOWN **)(v161 + 40) != &llvm::semPPCDoubleDouble)
          goto LABEL_327;
        goto LABEL_357;
      }
    }
    if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
      goto LABEL_243;
    goto LABEL_230;
  }
  llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*(_QWORD *)(a1 + 8) + 8), (llvm::APFloatBase *)&v195);
  llvm::APFloat::makeZero((llvm::APFloat **)(*(_QWORD *)(a1 + 8) + 32), 0);
  v24 = v195;
  if ((_UNKNOWN *)v195 == &llvm::semPPCDoubleDouble)
    goto LABEL_254;
LABEL_185:
  if ((*(_DWORD *)(v24 + 8) - 64) <= 0xFFFFFF7F && v196)
    operator delete[](v196);
  return v14;
}

void llvm::APFloat::add(llvm::detail::IEEEFloat *this, uint64_t a2, int a3)
{
  llvm::detail::IEEEFloat *v4;
  const llvm::detail::IEEEFloat *v5;
  int v8;
  int v9;
  int v10;
  int v11;

  v4 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  v5 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  if (*((_UNKNOWN **)this + 1) == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::addWithSpecial((int)this, (uint64_t *)this + 1, (uint64_t *)(a2 + 8), (llvm::detail::IEEEFloat *)((char *)this + 8), a3);
  }
  else
  {
    llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::IEEEFloat *)((char *)this + 8), (const llvm::detail::IEEEFloat *)(a2 + 8));
    if (v8 == 2)
    {
      v9 = llvm::detail::IEEEFloat::addOrSubtractSignificand(v4, v5, 0);
      llvm::detail::IEEEFloat::normalize((uint64_t)v4, a3, v9);
    }
    v10 = *((unsigned __int8 *)this + 28);
    if ((v10 & 7) == 3)
    {
      v11 = *(unsigned __int8 *)(a2 + 28);
      if ((v11 & 7) != 3 || ((v11 ^ v10) & 8) != 0)
      {
        LOBYTE(v10) = v10 & 0xF7 | (8 * (a3 == 3));
        *((_BYTE *)this + 28) = v10;
      }
      if (*(_DWORD *)(*(_QWORD *)v4 + 20) == 2)
        *((_BYTE *)this + 28) = v10 & 0xF7;
    }
  }
}

void llvm::APFloat::makeZero(llvm::APFloat **this, _BOOL4 a2)
{
  llvm::APFloat *v2;
  llvm::APFloat *i;
  char v4;
  llvm::APFloat **v5;
  char v6;
  int v7;
  int v8;
  llvm::APInt *v9;

  v2 = (llvm::APFloat *)this;
  i = this[1];
  if (i == (llvm::APFloat *)&llvm::semPPCDoubleDouble)
  {
    llvm::APFloat::makeZero(this[2], a2);
    v5 = (llvm::APFloat **)*((_QWORD *)v2 + 2);
    for (i = v5[5]; i == (llvm::APFloat *)&llvm::semPPCDoubleDouble; i = v5[5])
    {
      llvm::APFloat::makeZero(v5[6], 0);
      v5 = (llvm::APFloat **)v5[6];
    }
    v4 = 0;
    v2 = (llvm::APFloat *)(v5 + 4);
  }
  else if (a2)
  {
    v4 = 8;
  }
  else
  {
    v4 = 0;
  }
  v6 = *((_BYTE *)v2 + 28) & 0xF0;
  *((_BYTE *)v2 + 28) = v6 | v4 | 3;
  if (*((_DWORD *)i + 5) == 2)
    *((_BYTE *)v2 + 28) = v6 | 3;
  v8 = *((_DWORD *)i + 1);
  v7 = *((_DWORD *)i + 2);
  *((_DWORD *)v2 + 6) = v8 - 1;
  v9 = (llvm::APFloat *)((char *)v2 + 16);
  if ((v7 - 64) <= 0xFFFFFF7F)
    v9 = *(llvm::APInt **)v9;
  llvm::APInt::tcSet(v9, 0, (v7 + 64) >> 6);
}

void llvm::APFloat::subtract(llvm::detail::DoubleAPFloat *this, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v4 = (uint64_t *)((char *)this + 8);
  v5 = (uint64_t *)(a2 + 8);
  if (*((_UNKNOWN **)this + 1) == &llvm::semPPCDoubleDouble)
  {
    v12 = llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)this + 8));
    llvm::detail::DoubleAPFloat::addWithSpecial(v12, v4, v5, (llvm::detail::DoubleAPFloat *)v4, a3);
    llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)v4);
  }
  else
  {
    llvm::detail::IEEEFloat::addOrSubtractSpecials((llvm::detail::DoubleAPFloat *)((char *)this + 8), (const llvm::detail::IEEEFloat *)(a2 + 8));
    if (v8 == 2)
    {
      v9 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)v4, (const llvm::detail::IEEEFloat *)v5, 1);
      llvm::detail::IEEEFloat::normalize((uint64_t)v4, a3, v9);
    }
    v10 = *((unsigned __int8 *)this + 28);
    if ((v10 & 7) == 3)
    {
      v11 = *(unsigned __int8 *)(a2 + 28);
      if ((v11 & 7) != 3 || ((v11 ^ v10) & 8) == 0)
      {
        LOBYTE(v10) = v10 & 0xF7 | (8 * (a3 == 3));
        *((_BYTE *)this + 28) = v10;
      }
      if (*(_DWORD *)(*v4 + 20) == 2)
        *((_BYTE *)this + 28) = v10 & 0xF7;
    }
  }
}

llvm::detail::DoubleAPFloat *llvm::APFloat::changeSign(llvm::detail::DoubleAPFloat *this)
{
  uint64_t v1;
  char v2;

  v1 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v1 == &llvm::semPPCDoubleDouble)
    return llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)((char *)this + 8));
  v2 = *((_BYTE *)this + 28);
  if (*(_DWORD *)(v1 + 20) != 2 || (v2 & 5 | 2) != 3)
    *((_BYTE *)this + 28) = v2 ^ 8;
  return this;
}

uint64_t llvm::detail::DoubleAPFloat::addWithSpecial(int a1, uint64_t *a2, uint64_t *a3, llvm::detail::DoubleAPFloat *this, int a5)
{
  uint64_t v9;
  const llvm::detail::IEEEFloat *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char v23[8];
  uint64_t v24;
  void *__p;
  char v26[8];
  uint64_t v27;
  void *v28;
  char v29[8];
  uint64_t v30;
  void *v31;
  char v32[8];
  uint64_t v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v9 = a2[1];
  v10 = (const llvm::detail::IEEEFloat *)(v9 + 8);
  v11 = *(void **)(v9 + 8);
  if (v11 == &llvm::semPPCDoubleDouble)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 16) + 28) & 7) == 1)
      goto LABEL_41;
  }
  else if ((*(_BYTE *)(v9 + 28) & 7) == 1)
  {
    goto LABEL_41;
  }
  v12 = a3[1];
  v13 = *(void **)(v12 + 8);
  if (v13 == &llvm::semPPCDoubleDouble)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 16) + 28) & 7) == 1)
      goto LABEL_42;
  }
  else if ((*(_BYTE *)(a3[1] + 28) & 7) == 1)
  {
    goto LABEL_42;
  }
  if (v11 == &llvm::semPPCDoubleDouble)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 16) + 28) & 7) == 3)
      goto LABEL_42;
  }
  else if ((*(_BYTE *)(v9 + 28) & 7) == 3)
  {
    goto LABEL_42;
  }
  if (v13 == &llvm::semPPCDoubleDouble)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 16) + 28) & 7) != 3)
      goto LABEL_17;
LABEL_41:
    v20 = (uint64_t *)this;
    v21 = a2;
LABEL_43:
    llvm::detail::DoubleAPFloat::operator=(v20, v21);
    return 0;
  }
  if ((*(_BYTE *)(v12 + 28) & 7) == 3)
    goto LABEL_41;
LABEL_17:
  v14 = v9;
  if (v11 == &llvm::semPPCDoubleDouble)
    v14 = *(_QWORD *)(v9 + 16);
  if ((*(_BYTE *)(v14 + 28) & 7) != 0)
    goto LABEL_31;
  v15 = a3[1];
  if (v13 == &llvm::semPPCDoubleDouble)
    v15 = *(_QWORD *)(v12 + 16);
  if ((*(_BYTE *)(v15 + 28) & 7) != 0)
    goto LABEL_31;
  if (v11 != &llvm::semPPCDoubleDouble)
  {
    v16 = *(unsigned __int8 *)(v9 + 28);
    v17 = a3[1];
    if (v13 != &llvm::semPPCDoubleDouble)
      goto LABEL_25;
LABEL_30:
    if (((v16 >> 3) & 1) != (*(_BYTE *)(*(_QWORD *)(v12 + 16) + 28) & 8) >> 3)
      goto LABEL_26;
    goto LABEL_31;
  }
  v16 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 16) + 28);
  v17 = a3[1];
  if (v13 == &llvm::semPPCDoubleDouble)
    goto LABEL_30;
LABEL_25:
  if (((v16 >> 3) & 1) != (*(_BYTE *)(v17 + 28) & 8) >> 3)
  {
LABEL_26:
    v18 = *((_QWORD *)this + 1);
    if (*(_UNKNOWN **)(v18 + 8) == &llvm::semPPCDoubleDouble)
      v18 = *(_QWORD *)(v18 + 16);
    llvm::detail::DoubleAPFloat::makeNaN(this, 0, (*(_BYTE *)(v18 + 28) & 8) != 0, 0);
    return 1;
  }
LABEL_31:
  if (v11 == &llvm::semPPCDoubleDouble)
    v9 = *(_QWORD *)(v9 + 16);
  if ((*(_BYTE *)(v9 + 28) & 7) == 0)
    goto LABEL_41;
  if (v13 == &llvm::semPPCDoubleDouble)
    v12 = *(_QWORD *)(v12 + 16);
  if ((*(_BYTE *)(v12 + 28) & 7) == 0)
  {
LABEL_42:
    v20 = (uint64_t *)this;
    v21 = a3;
    goto LABEL_43;
  }
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v33, v10);
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v30, (const llvm::detail::IEEEFloat *)(a2[1] + 40));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v27, (const llvm::detail::IEEEFloat *)(a3[1] + 8));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v24, (const llvm::detail::IEEEFloat *)(a3[1] + 40));
  v19 = llvm::detail::DoubleAPFloat::addImpl((uint64_t)this, (uint64_t)v32, (uint64_t)v29, (uint64_t)v26, v23, a5);
  if ((_UNKNOWN *)v24 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v24);
  }
  else if ((*(_DWORD *)(v24 + 8) - 64) <= 0xFFFFFF7F && __p)
  {
    operator delete[](__p);
  }
  if ((_UNKNOWN *)v27 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v27);
  }
  else if ((*(_DWORD *)(v27 + 8) - 64) <= 0xFFFFFF7F && v28)
  {
    operator delete[](v28);
  }
  if ((_UNKNOWN *)v30 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v30);
  }
  else if ((*(_DWORD *)(v30 + 8) - 64) <= 0xFFFFFF7F && v31)
  {
    operator delete[](v31);
  }
  if ((_UNKNOWN *)v33 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v33);
  }
  else if ((*(_DWORD *)(v33 + 8) - 64) <= 0xFFFFFF7F && v34)
  {
    operator delete[](v34);
  }
  return v19;
}

void llvm::detail::DoubleAPFloat::makeNaN(llvm::detail::DoubleAPFloat *this, char a2, char a3, const llvm::APInt *a4)
{
  uint64_t v5;
  llvm::detail::DoubleAPFloat *v6;
  void *v7;

  v5 = *((_QWORD *)this + 1);
  v7 = *(void **)(v5 + 8);
  v6 = (llvm::detail::DoubleAPFloat *)(v5 + 8);
  if (v7 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::makeNaN(v6, a2, a3, a4);
  else
    llvm::detail::IEEEFloat::makeNaN(v6, a2, a3, a4);
  llvm::APFloat::makeZero((llvm::APFloat **)(*((_QWORD *)this + 1) + 32), 0);
}

uint64_t llvm::detail::DoubleAPFloat::add(uint64_t *a1, uint64_t *a2, int a3)
{
  return llvm::detail::DoubleAPFloat::addWithSpecial((int)a1, a1, a2, (llvm::detail::DoubleAPFloat *)a1, a3);
}

uint64_t llvm::detail::DoubleAPFloat::subtract(llvm::detail::DoubleAPFloat *a1, uint64_t *a2, int a3)
{
  int v6;
  uint64_t v7;

  v6 = llvm::detail::DoubleAPFloat::changeSign(a1);
  v7 = llvm::detail::DoubleAPFloat::addWithSpecial(v6, (uint64_t *)a1, a2, a1, a3);
  llvm::detail::DoubleAPFloat::changeSign(a1);
  return v7;
}

llvm::detail::DoubleAPFloat *llvm::detail::DoubleAPFloat::changeSign(llvm::detail::DoubleAPFloat *this)
{
  llvm::detail::DoubleAPFloat *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  int v10;
  char v11;

  do
  {
    v5 = *((_QWORD *)this + 1);
    result = (llvm::detail::DoubleAPFloat *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    if ((_UNKNOWN *)v6 == &llvm::semPPCDoubleDouble)
    {
      result = (llvm::detail::DoubleAPFloat *)llvm::detail::DoubleAPFloat::changeSign(result);
    }
    else
    {
      v7 = *(_DWORD *)(v6 + 20);
      v8 = *(_BYTE *)(v5 + 28);
      if (v7 != 2 || (v8 & 5 | 2) != 3)
        *(_BYTE *)(v5 + 28) = v8 ^ 8;
    }
    v3 = *((_QWORD *)this + 1);
    this = (llvm::detail::DoubleAPFloat *)(v3 + 40);
    v4 = *(_QWORD *)(v3 + 40);
  }
  while ((_UNKNOWN *)v4 == &llvm::semPPCDoubleDouble);
  v10 = *(_DWORD *)(v4 + 20);
  v11 = *(_BYTE *)(v3 + 60);
  if (v10 != 2 || (v11 & 5 | 2) != 3)
    *(_BYTE *)(v3 + 60) = v11 ^ 8;
  return result;
}

uint64_t llvm::detail::DoubleAPFloat::multiply(llvm::detail::DoubleAPFloat *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  const llvm::detail::IEEEFloat *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v35[8];
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  char v39;
  char v40[8];
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  char v45[8];
  uint64_t v46;
  char v47[8];
  uint64_t v48;
  char v49[8];
  _BYTE v50[24];
  char v51[8];
  _QWORD v52[5];

  v52[3] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 1);
  v7 = (const llvm::detail::IEEEFloat *)(v6 + 8);
  v8 = *(void **)(v6 + 8);
  if (v8 == &llvm::semPPCDoubleDouble)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v6 + 16) + 28) & 7) == 1)
      goto LABEL_35;
  }
  else if ((*(_BYTE *)(*((_QWORD *)this + 1) + 28) & 7) == 1)
  {
    goto LABEL_35;
  }
  v9 = a2[1];
  v10 = *(void **)(v9 + 8);
  if (v10 == &llvm::semPPCDoubleDouble)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v9 + 16) + 28) & 7) == 1)
    {
LABEL_36:
      v18 = a2;
      goto LABEL_37;
    }
  }
  else if ((*(_BYTE *)(a2[1] + 28) & 7) == 1)
  {
    goto LABEL_36;
  }
  if (v8 == &llvm::semPPCDoubleDouble)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v6 + 16) + 28) & 7) != 3)
      goto LABEL_16;
  }
  else if ((*(_BYTE *)(v6 + 28) & 7) != 3)
  {
    goto LABEL_16;
  }
  v11 = a2[1];
  if (v10 == &llvm::semPPCDoubleDouble)
    v11 = *(_QWORD *)(v9 + 16);
  if ((*(_BYTE *)(v11 + 28) & 7) == 0)
    goto LABEL_23;
LABEL_16:
  if (v8 == &llvm::semPPCDoubleDouble)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v6 + 16) + 28) & 7) != 0)
      goto LABEL_24;
  }
  else if ((*(_BYTE *)(v6 + 28) & 7) != 0)
  {
    goto LABEL_24;
  }
  v12 = a2[1];
  if (v10 == &llvm::semPPCDoubleDouble)
    v12 = *(_QWORD *)(v9 + 16);
  if ((*(_BYTE *)(v12 + 28) & 7) == 3)
  {
LABEL_23:
    llvm::detail::DoubleAPFloat::makeNaN(this, 0, 0, 0);
    return 0;
  }
LABEL_24:
  if (v8 == &llvm::semPPCDoubleDouble)
  {
    v13 = *(_BYTE *)(*(_QWORD *)(v6 + 16) + 28) & 7;
    if (v13 != 3)
      goto LABEL_28;
LABEL_35:
    v18 = (uint64_t *)this;
LABEL_37:
    llvm::detail::DoubleAPFloat::operator=((uint64_t *)this, v18);
    return 0;
  }
  v13 = *(_BYTE *)(v6 + 28) & 7;
  if (v13 == 3)
    goto LABEL_35;
LABEL_28:
  if (!v13)
    goto LABEL_35;
  if (v10 == &llvm::semPPCDoubleDouble)
    v9 = *(_QWORD *)(v9 + 16);
  v14 = *(_BYTE *)(v9 + 28) & 7;
  if (v14 == 3 || !v14)
    goto LABEL_36;
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v52, v7);
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v50, (const llvm::detail::IEEEFloat *)(*((_QWORD *)this + 1) + 40));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v48, (const llvm::detail::IEEEFloat *)(a2[1] + 8));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v46, (const llvm::detail::IEEEFloat *)(a2[1] + 40));
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v43, (const llvm::detail::IEEEFloat *)v52);
  llvm::APFloat::multiply((llvm::detail::DoubleAPFloat *)&v42, (uint64_t)v47, a3);
  v16 = v15;
  if ((_UNKNOWN *)v43[0] == &llvm::semPPCDoubleDouble)
    v17 = *(_BYTE *)(v43[1] + 28);
  else
    v17 = v44;
  if ((v17 & 6) != 0 && (v17 & 7) != 3)
  {
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v41, (const llvm::detail::IEEEFloat *)v52);
    llvm::APFloat::changeSign((llvm::detail::DoubleAPFloat *)&v42);
    llvm::APFloat::fusedMultiplyAdd((uint64_t)v40, (uint64_t)v47, (uint64_t)&v42, a3);
    v34 = v20;
    llvm::APFloat::changeSign((llvm::detail::DoubleAPFloat *)&v42);
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v38, (const llvm::detail::IEEEFloat *)v52);
    llvm::APFloat::multiply((llvm::detail::DoubleAPFloat *)&v37, (uint64_t)v45, a3);
    v22 = v21;
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v36, (const llvm::detail::IEEEFloat *)v50);
    llvm::APFloat::multiply((llvm::detail::DoubleAPFloat *)v35, (uint64_t)v47, a3);
    v24 = v23;
    llvm::APFloat::add((llvm::detail::IEEEFloat *)&v37, (uint64_t)v35, a3);
    v26 = v25;
    llvm::APFloat::add((llvm::detail::IEEEFloat *)v40, (uint64_t)&v37, a3);
    v28 = v27;
    llvm::APFloat::~APFloat((llvm::APFloat *)v35);
    llvm::APFloat::~APFloat((llvm::APFloat *)&v37);
    llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)v38, (const llvm::detail::IEEEFloat *)v43);
    llvm::APFloat::add((llvm::detail::IEEEFloat *)&v37, (uint64_t)v40, a3);
    v16 = v34 | v22 | v24 | v26 | v28 | v29 | v16;
    llvm::APFloat::operator=(*((llvm::detail::DoubleAPFloat **)this + 1), &v37);
    if ((_UNKNOWN *)v38[0] == &llvm::semPPCDoubleDouble)
      v30 = *(_BYTE *)(v38[1] + 28);
    else
      v30 = v39;
    if ((v30 & 7u) < 2)
    {
      llvm::APFloat::makeZero((llvm::APFloat **)(*((_QWORD *)this + 1) + 32), 0);
    }
    else
    {
      llvm::APFloat::subtract((llvm::detail::DoubleAPFloat *)&v42, (uint64_t)&v37, a3);
      v32 = v31;
      llvm::APFloat::add((llvm::detail::IEEEFloat *)&v42, (uint64_t)v40, a3);
      v16 = v32 | v33 | v16;
      llvm::APFloat::operator=((llvm::detail::DoubleAPFloat *)(*((_QWORD *)this + 1) + 32), &v42);
    }
    llvm::APFloat::~APFloat((llvm::APFloat *)&v37);
    llvm::APFloat::~APFloat((llvm::APFloat *)v40);
  }
  else
  {
    llvm::APFloat::operator=(*((llvm::detail::DoubleAPFloat **)this + 1), &v42);
    llvm::APFloat::makeZero((llvm::APFloat **)(*((_QWORD *)this + 1) + 32), 0);
  }
  llvm::APFloat::~APFloat((llvm::APFloat *)&v42);
  llvm::APFloat::~APFloat((llvm::APFloat *)v45);
  llvm::APFloat::~APFloat((llvm::APFloat *)v47);
  llvm::APFloat::~APFloat((llvm::APFloat *)v49);
  llvm::APFloat::~APFloat((llvm::APFloat *)v51);
  return v16;
}

void llvm::APFloat::multiply(llvm::detail::DoubleAPFloat *this, uint64_t a2, int a3)
{
  unint64_t **v4;
  const llvm::detail::IEEEFloat *v5;
  char v7;
  int v8;

  v4 = (unint64_t **)((char *)this + 8);
  v5 = (const llvm::detail::IEEEFloat *)(a2 + 8);
  if (*((_UNKNOWN **)this + 1) == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::multiply((llvm::detail::DoubleAPFloat *)((char *)this + 8));
  }
  else
  {
    *((_BYTE *)this + 28) ^= *(_BYTE *)(a2 + 28) & 8;
    llvm::detail::IEEEFloat::multiplySpecials((llvm::detail::DoubleAPFloat *)((char *)this + 8), (const llvm::detail::IEEEFloat *)(a2 + 8));
    v7 = *((_BYTE *)this + 28);
    if ((v7 & 7) == 3)
    {
      if (*((_DWORD *)*v4 + 5) == 2)
        *((_BYTE *)this + 28) = v7 & 0xF7;
    }
    else if ((*((_BYTE *)this + 28) & 6) != 0)
    {
      v8 = llvm::detail::IEEEFloat::multiplySignificand(v4, v5);
      llvm::detail::IEEEFloat::normalize((uint64_t)v4, a3, v8);
    }
  }
}

void llvm::APFloat::fusedMultiplyAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::detail::DoubleAPFloat *v4;
  void *v5;
  llvm::detail::DoubleAPFloat *v6;
  llvm::detail::DoubleAPFloat *v7;

  v5 = *(void **)(a1 + 8);
  v4 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v6 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v7 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v5 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::fusedMultiplyAdd(v4, v6, v7, a4);
  else
    llvm::detail::IEEEFloat::fusedMultiplyAdd(v4, v6, (unint64_t *)v7, a4);
}

uint64_t llvm::detail::DoubleAPFloat::divide(llvm::detail::DoubleAPFloat *a1, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _OWORD *v10;
  _OWORD *v11;
  llvm::detail::IEEEFloat *v12;
  llvm::detail::IEEEFloat *v13;
  void **v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v19;
  unsigned int v20;
  __int128 v21;
  void *v22;
  unsigned int v23;
  void *__p;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&__p);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v28, (const llvm::APInt **)&__p);
  if (v25 >= 0x41 && __p)
    operator delete[](__p);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v22);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v25, (const llvm::APInt **)&v22);
  if ((_UNKNOWN *)v28 == &llvm::semPPCDoubleDouble)
  {
    v7 = llvm::detail::DoubleAPFloat::divide(&v28, &v25, a3);
  }
  else
  {
    v30 ^= v27 & 8;
    llvm::detail::IEEEFloat::divideSpecials((llvm::detail::IEEEFloat *)&v28, (const llvm::detail::IEEEFloat *)&v25);
    v7 = v6;
    if ((v30 & 7) == 3)
    {
      if (*(_DWORD *)(v28 + 20) == 2)
        v30 &= ~8u;
    }
    else if ((v30 & 6) != 0)
    {
      v8 = llvm::detail::IEEEFloat::divideSignificand((llvm::detail::IEEEFloat *)&v28, (const llvm::detail::IEEEFloat *)&v25);
      v9 = llvm::detail::IEEEFloat::normalize((uint64_t)&v28, a3, v8);
      if (v8)
        v7 = v9 | 0x10;
      else
        v7 = v9;
    }
  }
  if ((_UNKNOWN *)v25 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v25);
  }
  else if ((*(_DWORD *)(v25 + 8) - 64) <= 0xFFFFFF7F && v26)
  {
    operator delete[](v26);
  }
  if (v23 >= 0x41 && v22)
    operator delete[](v22);
  if ((_UNKNOWN *)v28 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v28, (llvm::APInt *)&v19);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v28, (uint64_t)&v19);
  *(_QWORD *)&v21 = &llvm::semPPCDoubleDouble;
  v10 = operator new[](0x50uLL);
  v11 = v10 + 1;
  v12 = (llvm::detail::IEEEFloat *)((char *)v10 + 24);
  *v10 = xmmword_18125D2E0;
  v13 = (llvm::detail::IEEEFloat *)((char *)v10 + 56);
  if (v20 >= 0x41)
    v14 = (void **)v19;
  else
    v14 = &v19;
  v15 = *v14;
  LODWORD(v25) = 64;
  __p = v15;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v12, (const llvm::APInt **)&__p);
  if (v20 >= 0x41)
    v16 = v19;
  else
    v16 = &v19;
  v17 = (void *)v16[1];
  v23 = 64;
  v22 = v17;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v13, (const llvm::APInt **)&v22);
  *((_QWORD *)&v21 + 1) = v11;
  if (&v21 != (__int128 *)a1)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    *(_OWORD *)a1 = v21;
    *(_QWORD *)&v21 = &llvm::semBogus;
    *((_QWORD *)&v21 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v21);
  if (v20 >= 0x41 && v19)
    operator delete[](v19);
  if ((_UNKNOWN *)v28 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v28);
  }
  else if ((*(_DWORD *)(v28 + 8) - 64) <= 0xFFFFFF7F && v29)
  {
    operator delete[](v29);
  }
  return v7;
}

llvm::APInt *llvm::detail::DoubleAPFloat::bitcastToAPInt@<X0>(llvm::detail::DoubleAPFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  unint64_t *v7;
  uint64_t v8;
  llvm::detail::IEEEFloat *v9;
  void *v10;
  void *__p;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 1);
  v6 = *(void **)(v4 + 8);
  v5 = (llvm::detail::DoubleAPFloat *)(v4 + 8);
  if (v6 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((uint64_t *)&v14, v5);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v5, (uint64_t)&v14);
  v7 = (unint64_t *)&v14;
  if (v15 >= 0x41)
    v7 = (unint64_t *)v14;
  v16 = *v7;
  v8 = *((_QWORD *)this + 1);
  v10 = *(void **)(v8 + 40);
  v9 = (llvm::detail::IEEEFloat *)(v8 + 40);
  if (v10 != &llvm::semPPCDoubleDouble)
  {
    llvm::detail::IEEEFloat::bitcastToAPInt(v9, (uint64_t)&__p);
    if (v13 <= 0x40)
      goto LABEL_8;
LABEL_11:
    v17 = *(void **)__p;
    operator delete[](__p);
    if (v15 < 0x41)
      return llvm::APInt::APInt(a2, 0x80u, 2u, &v16);
    goto LABEL_12;
  }
  llvm::detail::DoubleAPFloat::bitcastToAPInt((uint64_t *)&__p, v9);
  if (v13 > 0x40)
    goto LABEL_11;
LABEL_8:
  v17 = __p;
  if (v15 < 0x41)
    return llvm::APInt::APInt(a2, 0x80u, 2u, &v16);
LABEL_12:
  if (v14)
    operator delete[](v14);
  return llvm::APInt::APInt(a2, 0x80u, 2u, &v16);
}

uint64_t llvm::detail::DoubleAPFloat::remainder(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v4;
  unint64_t *v5;
  _OWORD *v6;
  _OWORD *v7;
  llvm::detail::IEEEFloat *v8;
  llvm::detail::IEEEFloat *v9;
  void **v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v15;
  unsigned int v16;
  __int128 v17;
  void *v18;
  unsigned int v19;
  void *__p;
  unint64_t *v21;
  void *v22;
  __int128 *v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (llvm::APInt *)&__p);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v23, (const llvm::APInt **)&__p);
  if (v21 >= 0x41 && __p)
    operator delete[](__p);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v18);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v21, (const llvm::APInt **)&v18);
  if (v23 == (__int128 *)&llvm::semPPCDoubleDouble)
  {
    v4 = llvm::detail::DoubleAPFloat::remainder((llvm::detail::DoubleAPFloat *)&v23, (const llvm::detail::DoubleAPFloat *)&v21);
    v5 = v21;
    if (v21 != (unint64_t *)&llvm::semPPCDoubleDouble)
      goto LABEL_6;
LABEL_10:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v21);
    goto LABEL_11;
  }
  v4 = llvm::detail::IEEEFloat::remainder(&v23, &v21);
  v5 = v21;
  if (v21 == (unint64_t *)&llvm::semPPCDoubleDouble)
    goto LABEL_10;
LABEL_6:
  if ((*((_DWORD *)v5 + 2) - 64) <= 0xFFFFFF7F && v22)
    operator delete[](v22);
LABEL_11:
  if (v19 >= 0x41 && v18)
    operator delete[](v18);
  if (v23 == (__int128 *)&llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v23, (llvm::APInt *)&v15);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v23, (uint64_t)&v15);
  *(_QWORD *)&v17 = &llvm::semPPCDoubleDouble;
  v6 = operator new[](0x50uLL);
  v7 = v6 + 1;
  v8 = (llvm::detail::IEEEFloat *)((char *)v6 + 24);
  *v6 = xmmword_18125D2E0;
  v9 = (llvm::detail::IEEEFloat *)((char *)v6 + 56);
  if (v16 >= 0x41)
    v10 = (void **)v15;
  else
    v10 = &v15;
  v11 = *v10;
  LODWORD(v21) = 64;
  __p = v11;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v8, (const llvm::APInt **)&__p);
  if (v16 >= 0x41)
    v12 = v15;
  else
    v12 = &v15;
  v13 = (void *)v12[1];
  v19 = 64;
  v18 = v13;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v9, (const llvm::APInt **)&v18);
  *((_QWORD *)&v17 + 1) = v7;
  if (&v17 != (__int128 *)this)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(this);
    *(_OWORD *)this = v17;
    *(_QWORD *)&v17 = &llvm::semBogus;
    *((_QWORD *)&v17 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v17);
  if (v16 >= 0x41 && v15)
    operator delete[](v15);
  if (v23 == (__int128 *)&llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v23);
  }
  else if ((*((_DWORD *)v23 + 2) - 64) <= 0xFFFFFF7F && v24)
  {
    operator delete[](v24);
  }
  return v4;
}

uint64_t llvm::detail::DoubleAPFloat::mod(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  llvm::detail::IEEEFloat *v8;
  llvm::detail::IEEEFloat *v9;
  void **v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v15;
  unsigned int v16;
  __int128 v17;
  void *v18;
  unsigned int v19;
  void *__p;
  _DWORD *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (llvm::APInt *)&__p);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v23, (const llvm::APInt **)&__p);
  if (v21 >= 0x41 && __p)
    operator delete[](__p);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v18);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v21, (const llvm::APInt **)&v18);
  if ((_UNKNOWN *)v23 == &llvm::semPPCDoubleDouble)
  {
    v4 = llvm::detail::DoubleAPFloat::mod((llvm::detail::DoubleAPFloat *)&v23, (const llvm::detail::DoubleAPFloat *)&v21);
    v5 = v21;
    if (v21 != (_DWORD *)&llvm::semPPCDoubleDouble)
      goto LABEL_6;
LABEL_10:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v21);
    goto LABEL_11;
  }
  v4 = llvm::detail::IEEEFloat::mod((llvm::detail::IEEEFloat *)&v23, (const llvm::detail::IEEEFloat *)&v21);
  v5 = v21;
  if (v21 == (_DWORD *)&llvm::semPPCDoubleDouble)
    goto LABEL_10;
LABEL_6:
  if ((v5[2] - 64) <= 0xFFFFFF7F && v22)
    operator delete[](v22);
LABEL_11:
  if (v19 >= 0x41 && v18)
    operator delete[](v18);
  if ((_UNKNOWN *)v23 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v23, (llvm::APInt *)&v15);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v23, (uint64_t)&v15);
  *(_QWORD *)&v17 = &llvm::semPPCDoubleDouble;
  v6 = operator new[](0x50uLL);
  v7 = v6 + 1;
  v8 = (llvm::detail::IEEEFloat *)((char *)v6 + 24);
  *v6 = xmmword_18125D2E0;
  v9 = (llvm::detail::IEEEFloat *)((char *)v6 + 56);
  if (v16 >= 0x41)
    v10 = (void **)v15;
  else
    v10 = &v15;
  v11 = *v10;
  LODWORD(v21) = 64;
  __p = v11;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v8, (const llvm::APInt **)&__p);
  if (v16 >= 0x41)
    v12 = v15;
  else
    v12 = &v15;
  v13 = (void *)v12[1];
  v19 = 64;
  v18 = v13;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v9, (const llvm::APInt **)&v18);
  *((_QWORD *)&v17 + 1) = v7;
  if (&v17 != (__int128 *)this)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(this);
    *(_OWORD *)this = v17;
    *(_QWORD *)&v17 = &llvm::semBogus;
    *((_QWORD *)&v17 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v17);
  if (v16 >= 0x41 && v15)
    operator delete[](v15);
  if ((_UNKNOWN *)v23 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v23);
  }
  else if ((*(_DWORD *)(v23 + 8) - 64) <= 0xFFFFFF7F && v24)
  {
    operator delete[](v24);
  }
  return v4;
}

uint64_t llvm::detail::DoubleAPFloat::fusedMultiplyAdd(llvm::detail::DoubleAPFloat *a1, llvm::detail::DoubleAPFloat *a2, llvm::detail::DoubleAPFloat *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _OWORD *v11;
  void *v12;
  llvm::detail::IEEEFloat *v13;
  llvm::detail::IEEEFloat *v14;
  void **v15;
  void *v16;
  void *v17;
  const llvm::APInt *v18;
  void *v20;
  unsigned int v21;
  void *v22[2];
  const llvm::APInt *v23;
  _DWORD *v24;
  void *v25;
  void *__p;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&__p);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v29, (const llvm::APInt **)&__p);
  if (v27 >= 0x41 && __p)
    operator delete[](__p);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)v22);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v27, (const llvm::APInt **)v22);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a3, (llvm::APInt *)&v20);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v24, (const llvm::APInt **)&v20);
  if ((_UNKNOWN *)v29 == &llvm::semPPCDoubleDouble)
  {
    v9 = llvm::detail::DoubleAPFloat::fusedMultiplyAdd(&v29, &v27, &v24, a4);
    v10 = v24;
    if (v24 != (_DWORD *)&llvm::semPPCDoubleDouble)
      goto LABEL_6;
LABEL_10:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v24);
    goto LABEL_11;
  }
  llvm::detail::IEEEFloat::fusedMultiplyAdd((llvm::detail::IEEEFloat *)&v29, (llvm::detail::IEEEFloat *)&v27, (unint64_t *)&v24, a4);
  v9 = v8;
  v10 = v24;
  if (v24 == (_DWORD *)&llvm::semPPCDoubleDouble)
    goto LABEL_10;
LABEL_6:
  if ((v10[2] - 64) <= 0xFFFFFF7F && v25)
    operator delete[](v25);
LABEL_11:
  if (v21 >= 0x41 && v20)
    operator delete[](v20);
  if ((_UNKNOWN *)v27 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v27);
  }
  else if ((*(_DWORD *)(v27 + 8) - 64) <= 0xFFFFFF7F && v28)
  {
    operator delete[](v28);
  }
  if (LODWORD(v22[1]) >= 0x41 && v22[0])
    operator delete[](v22[0]);
  if ((_UNKNOWN *)v29 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v29, (llvm::APInt *)&v20);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v29, (uint64_t)&v20);
  v22[0] = &llvm::semPPCDoubleDouble;
  v11 = operator new[](0x50uLL);
  v12 = v11 + 1;
  v13 = (llvm::detail::IEEEFloat *)((char *)v11 + 24);
  *v11 = xmmword_18125D2E0;
  v14 = (llvm::detail::IEEEFloat *)((char *)v11 + 56);
  if (v21 >= 0x41)
    v15 = (void **)v20;
  else
    v15 = &v20;
  v16 = *v15;
  LODWORD(v27) = 64;
  __p = v16;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v13, (const llvm::APInt **)&__p);
  if (v21 >= 0x41)
    v17 = v20;
  else
    v17 = &v20;
  v18 = (const llvm::APInt *)*((_QWORD *)v17 + 1);
  LODWORD(v24) = 64;
  v23 = v18;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v14, &v23);
  v22[1] = v12;
  if (v22 != (void **)a1)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    *(_OWORD *)a1 = *(_OWORD *)v22;
    v22[0] = &llvm::semBogus;
    v22[1] = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)v22);
  if (v21 >= 0x41 && v20)
    operator delete[](v20);
  if ((_UNKNOWN *)v29 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v29);
  }
  else if ((*(_DWORD *)(v29 + 8) - 64) <= 0xFFFFFF7F && v30)
  {
    operator delete[](v30);
  }
  return v9;
}

uint64_t llvm::detail::DoubleAPFloat::compareAbsoluteValue(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;
  llvm::APInt *v12;
  const unint64_t *v13;
  const unint64_t *v14;
  const unint64_t *v15;
  const unint64_t *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  llvm::APInt *v24;
  const unint64_t *v25;
  const unint64_t *v26;
  const unint64_t *v27;
  const unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;

  v4 = (_DWORD *)*((_QWORD *)this + 1);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)v4 + 1);
  if ((_UNKNOWN *)v6 == &llvm::semPPCDoubleDouble)
  {
    result = llvm::detail::DoubleAPFloat::compareAbsoluteValue((llvm::detail::DoubleAPFloat *)(v4 + 2), (const llvm::detail::DoubleAPFloat *)(v5 + 8));
    if ((_DWORD)result != 1)
      return result;
  }
  else
  {
    v7 = v4[6];
    v8 = *(_DWORD *)(v5 + 24);
    v9 = v7 - v8;
    if (v7 == v8)
    {
      v11 = *(_DWORD *)(v6 + 8);
      v12 = (llvm::APInt *)(v4 + 4);
      if ((v11 - 64) <= 0xFFFFFF7F)
        v12 = *(llvm::APInt **)v12;
      v15 = *(const unint64_t **)(v5 + 16);
      v13 = (const unint64_t *)(v5 + 16);
      v14 = v15;
      if ((*(_DWORD *)(*(v13 - 1) + 8) - 64) >= 0xFFFFFF80)
        v16 = v13;
      else
        v16 = v14;
      v9 = llvm::APInt::tcCompare(v12, v16, (const unint64_t *)((v11 + 64) >> 6));
      if (v9 > 0)
        return 2;
    }
    else if (v9 > 0)
    {
      return 2;
    }
    result = v9 >= 0;
    if ((_DWORD)result != 1)
      return result;
  }
  v17 = (_DWORD *)*((_QWORD *)this + 1);
  v18 = *((_QWORD *)a2 + 1);
  v19 = *((_QWORD *)v17 + 5);
  if ((_UNKNOWN *)v19 == &llvm::semPPCDoubleDouble)
  {
    result = llvm::detail::DoubleAPFloat::compareAbsoluteValue((llvm::detail::DoubleAPFloat *)(v17 + 10), (const llvm::detail::DoubleAPFloat *)(v18 + 40));
    if ((result & 0xFFFFFFFD) != 0)
      return result;
LABEL_29:
    v29 = *((_QWORD *)this + 1);
    v30 = v29;
    if (*(_UNKNOWN **)(v29 + 8) == &llvm::semPPCDoubleDouble)
      v30 = *(_QWORD *)(v29 + 16);
    v31 = *(unsigned __int8 *)(v30 + 28);
    if (*(_UNKNOWN **)(v29 + 40) == &llvm::semPPCDoubleDouble)
      v32 = *(_QWORD *)(v29 + 48);
    else
      v32 = v29 + 32;
    v33 = v31 ^ *(unsigned __int8 *)(v32 + 28);
    v34 = *((_QWORD *)a2 + 1);
    v35 = v34;
    if (*(_UNKNOWN **)(v34 + 8) == &llvm::semPPCDoubleDouble)
      v35 = *(_QWORD *)(v34 + 16);
    v36 = (v33 >> 3) & 1;
    v37 = *(unsigned __int8 *)(v35 + 28);
    if (*(_UNKNOWN **)(v34 + 40) == &llvm::semPPCDoubleDouble)
    {
      v38 = ((v37 ^ *(unsigned __int8 *)(*(_QWORD *)(v34 + 48) + 28)) >> 3) & 1;
      v39 = v36 ^ 1;
      if (((v36 ^ 1) & 1) != 0)
        goto LABEL_42;
    }
    else
    {
      v38 = ((v37 ^ *(unsigned __int8 *)(v34 + 60)) >> 3) & 1;
      v39 = v36 ^ 1;
      if (((v36 ^ 1) & 1) != 0)
      {
LABEL_42:
        if ((v39 & v38 & 1) != 0)
          return 2;
        if ((v36 | v38) == 1 && (v36 & v38 & 1) != 0)
          return (2 - result);
        return result;
      }
    }
    if (!v38)
      return 0;
    goto LABEL_42;
  }
  v20 = v17[14];
  v21 = *(_DWORD *)(v18 + 56);
  v22 = v20 - v21;
  if (v20 == v21)
  {
    v23 = *(_DWORD *)(v19 + 8);
    v24 = (llvm::APInt *)(v17 + 12);
    if ((v23 - 64) <= 0xFFFFFF7F)
      v24 = *(llvm::APInt **)v24;
    v27 = *(const unint64_t **)(v18 + 48);
    v25 = (const unint64_t *)(v18 + 48);
    v26 = v27;
    if ((*(_DWORD *)(*(v25 - 1) + 8) - 64) >= 0xFFFFFF80)
      v28 = v25;
    else
      v28 = v26;
    v22 = llvm::APInt::tcCompare(v24, v28, (const unint64_t *)((v23 + 64) >> 6));
  }
  if (v22 <= 0)
    result = v22 >= 0;
  else
    result = 2;
  if ((result & 0xFFFFFFFD) == 0)
    goto LABEL_29;
  return result;
}

void llvm::detail::DoubleAPFloat::makeInf(llvm::detail::DoubleAPFloat *this, int a2)
{
  uint64_t v3;
  llvm::detail::DoubleAPFloat *v4;
  uint64_t v5;
  char v6;
  int v7;
  llvm::APInt *v8;

  v3 = *((_QWORD *)this + 1);
  v4 = (llvm::detail::DoubleAPFloat *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 8);
  if ((_UNKNOWN *)v5 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::makeInf(v4, a2);
    llvm::APFloat::makeZero((llvm::APFloat **)(*((_QWORD *)this + 1) + 32), 0);
  }
  else if (*(_DWORD *)(v5 + 16) == 1)
  {
    llvm::detail::IEEEFloat::makeNaN(v4, 0, a2, 0);
    llvm::APFloat::makeZero((llvm::APFloat **)(*((_QWORD *)this + 1) + 32), 0);
  }
  else
  {
    if (a2)
      v6 = 8;
    else
      v6 = 0;
    *(_BYTE *)(v3 + 28) = *(_BYTE *)(v3 + 28) & 0xF0 | v6;
    *(_DWORD *)(v3 + 24) = *(_DWORD *)v5 + 1;
    v7 = *(_DWORD *)(v5 + 8);
    v8 = (llvm::APInt *)(v3 + 16);
    if ((v7 - 64) <= 0xFFFFFF7F)
      v8 = *(llvm::APInt **)v8;
    llvm::APInt::tcSet(v8, 0, (v7 + 64) >> 6);
    llvm::APFloat::makeZero((llvm::APFloat **)(*((_QWORD *)this + 1) + 32), 0);
  }
}

void llvm::detail::DoubleAPFloat::makeZero(llvm::APFloat ***this, _BOOL4 a2)
{
  llvm::APFloat::makeZero(this[1], a2);
  llvm::APFloat::makeZero(this[1] + 4, 0);
}

void llvm::detail::DoubleAPFloat::makeLargest(llvm::detail::DoubleAPFloat *this, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *__p;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 64;
  v4 = 0x7FEFFFFFFFFFFFFFLL;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v6, (const llvm::APInt **)&v4);
  llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*((_QWORD *)this + 1) + 8), (llvm::APFloatBase *)&v6);
  if ((_UNKNOWN *)v6 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v6);
  }
  else if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F && __p)
  {
    operator delete[](__p);
  }
  v5 = 64;
  v4 = 0x7C8FFFFFFFFFFFFELL;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v6, (const llvm::APInt **)&v4);
  llvm::APFloat::Storage::operator=((llvm::APFloatBase *)(*((_QWORD *)this + 1) + 40), (llvm::APFloatBase *)&v6);
  if ((_UNKNOWN *)v6 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v6);
  }
  else if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F && __p)
  {
    operator delete[](__p);
  }
  if (a2)
    llvm::detail::DoubleAPFloat::changeSign(this);
}

void llvm::detail::DoubleAPFloat::compare(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v4;
  llvm::detail::DoubleAPFloat *v5;
  void *v6;
  const llvm::detail::DoubleAPFloat *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  do
  {
    v4 = *((_QWORD *)this + 1);
    v6 = *(void **)(v4 + 8);
    v5 = (llvm::detail::DoubleAPFloat *)(v4 + 8);
    v7 = (const llvm::detail::DoubleAPFloat *)(*((_QWORD *)a2 + 1) + 8);
    if (v6 == &llvm::semPPCDoubleDouble)
    {
      if (llvm::detail::DoubleAPFloat::compare(v5, v7) != 1)
        return;
    }
    else
    {
      llvm::detail::IEEEFloat::compare(v5, v7);
      if (v8 != 1)
        return;
    }
    v9 = *((_QWORD *)this + 1);
    v10 = *((_QWORD *)a2 + 1);
    v11 = *(void **)(v9 + 40);
    this = (llvm::detail::DoubleAPFloat *)(v9 + 40);
    a2 = (const llvm::detail::DoubleAPFloat *)(v10 + 40);
  }
  while (v11 == &llvm::semPPCDoubleDouble);
  llvm::detail::IEEEFloat::compare(this, (const llvm::detail::IEEEFloat *)(v10 + 40));
}

uint64_t llvm::detail::DoubleAPFloat::bitwiseIsEqual(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t result;

  result = llvm::APFloat::bitwiseIsEqual(*((_QWORD *)this + 1), *((_QWORD *)a2 + 1));
  if ((_DWORD)result)
    return llvm::APFloat::bitwiseIsEqual(*((_QWORD *)this + 1) + 32, *((_QWORD *)a2 + 1) + 32);
  return result;
}

uint64_t llvm::APFloat::bitwiseIsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
    return 0;
  v4 = a2;
  v5 = a1;
  while ((_UNKNOWN *)v2 == &llvm::semPPCDoubleDouble)
  {
    result = llvm::APFloat::bitwiseIsEqual(*(_QWORD *)(v5 + 16), *(_QWORD *)(v4 + 16));
    if (!(_DWORD)result)
      return result;
    v6 = *(_QWORD *)(v5 + 16);
    v5 = v6 + 32;
    v7 = *(_QWORD *)(v4 + 16);
    v4 = v7 + 32;
    v2 = *(_QWORD *)(v6 + 40);
    if (v2 != *(_QWORD *)(v7 + 40))
      return 0;
  }
  if (v5 == v4)
    return 1;
  v8 = *(unsigned __int8 *)(v5 + 28);
  v9 = *(unsigned __int8 *)(v4 + 28);
  if ((v8 & 7) != (v9 & 7) || ((v9 ^ v8) & 8) != 0)
    return 0;
  result = 1;
  if ((v8 & 7) == 0 || (v8 & 7) == 3)
    return result;
  if ((v8 & 6) != 0 && *(_DWORD *)(v5 + 24) != *(_DWORD *)(v4 + 24))
    return 0;
  v10 = *(_DWORD *)(v2 + 8);
  v11 = v10 - 64;
  v12 = (_QWORD *)(v5 + 16);
  if ((v10 - 64) <= 0xFFFFFF7F)
    v12 = (_QWORD *)*v12;
  v13 = v10 + 64;
  v16 = *(const void **)(v4 + 16);
  v15 = (const void *)(v4 + 16);
  v14 = v16;
  if (v11 >= 0xFFFFFF80)
    v17 = v15;
  else
    v17 = v14;
  return memcmp(v12, v17, (v13 >> 3) & 0x1FFFFFF8) == 0;
}

unint64_t llvm::detail::hash_value(llvm::detail *this, const llvm::detail::DoubleAPFloat *a2)
{
  uint64_t v3;
  llvm::detail *v4;
  void *v5;
  const llvm::detail::IEEEFloat *v6;
  unint64_t v7;
  uint64_t v8;
  llvm::detail *v9;
  void *v10;
  unint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v5 = *(void **)(v3 + 8);
    v4 = (llvm::detail *)(v3 + 8);
    if (v5 == &llvm::semPPCDoubleDouble)
    {
      v7 = llvm::detail::hash_value(v4, a2);
      v17 = *((_QWORD *)this + 1);
      v18 = *(void **)(v17 + 40);
      v9 = (llvm::detail *)(v17 + 40);
      if (v18 != &llvm::semPPCDoubleDouble)
      {
LABEL_4:
        v11 = llvm::detail::hash_value(v9, v6);
        if ((v12 & 1) == 0)
        {
LABEL_11:
          {
            v21 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v21 = 0xFF51AFD7ED558CCDLL;
            llvm::hashing::detail::get_execution_seed(void)::seed = v21;
          }
        }
LABEL_10:
        v20 = __ROR8__(v11 + 16, 16);
        return (0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69
                * (v20 ^ ((0x9DDFEA08EB382D69 * (v7 ^ llvm::hashing::detail::get_execution_seed(void)::seed ^ v20)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ llvm::hashing::detail::get_execution_seed(void)::seed ^ v20)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v7 ^ llvm::hashing::detail::get_execution_seed(void)::seed ^ v20)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ llvm::hashing::detail::get_execution_seed(void)::seed ^ v20)))) >> 47))) ^ v11;
      }
    }
    else
    {
      v7 = llvm::detail::hash_value(v4, a2);
      v8 = *((_QWORD *)this + 1);
      v10 = *(void **)(v8 + 40);
      v9 = (llvm::detail *)(v8 + 40);
      if (v10 != &llvm::semPPCDoubleDouble)
        goto LABEL_4;
    }
    v11 = llvm::detail::hash_value(v9, v6);
    if ((v19 & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  {
    v22 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v22 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v22;
  }
  v14 = llvm::hashing::detail::get_execution_seed(void)::seed ^ HIDWORD(*(_QWORD *)this);
  v15 = 0x9DDFEA08EB382D69 * ((8 * *(_QWORD *)this + 8) ^ v14);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) ^ ((0x9DDFEA08EB382D69 * (v14 ^ (v15 >> 47) ^ v15)) >> 47));
}

unint64_t llvm::hash_value(llvm *this, const llvm::APFloat *a2)
{
  llvm::detail *v2;
  void *v3;

  v3 = (void *)*((_QWORD *)this + 1);
  v2 = (llvm *)((char *)this + 8);
  if (v3 == &llvm::semPPCDoubleDouble)
    return llvm::detail::hash_value(v2, a2);
  else
    return llvm::detail::hash_value(v2, a2);
}

void llvm::detail::DoubleAPFloat::convertFromString(llvm::detail::DoubleAPFloat *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _OWORD *v10;
  _OWORD *v11;
  llvm::detail::IEEEFloat *v12;
  llvm::detail::IEEEFloat *v13;
  const llvm::APInt **p_p;
  const llvm::APInt *v15;
  void *v16;
  const llvm::APInt *v17;
  void *__p;
  unsigned int v19;
  __int128 v20;
  const llvm::APInt *v21;
  int v22;
  const llvm::APInt *v23;
  int v24;
  _DWORD *v25;
  void *v26;
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = &llvm::semPPCDoubleDoubleLegacy;
  v26 = operator new[](0x10uLL);
  v28 = 3;
  v27 = -970;
  llvm::APInt::tcSet((llvm::APInt *)v26, 0, 2u);
  llvm::detail::IEEEFloat::convertFromString((llvm *)&v25, a2, a3, a4, a5);
  if (v25 == (_DWORD *)&llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v25, (llvm::APInt *)&__p);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v25, (uint64_t)&__p);
  *(_QWORD *)&v20 = &llvm::semPPCDoubleDouble;
  v10 = operator new[](0x50uLL);
  v11 = v10 + 1;
  v12 = (llvm::detail::IEEEFloat *)((char *)v10 + 24);
  *v10 = xmmword_18125D2E0;
  v13 = (llvm::detail::IEEEFloat *)((char *)v10 + 56);
  if (v19 >= 0x41)
    p_p = (const llvm::APInt **)__p;
  else
    p_p = (const llvm::APInt **)&__p;
  v15 = *p_p;
  v24 = 64;
  v23 = v15;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v12, &v23);
  if (v19 >= 0x41)
    v16 = __p;
  else
    v16 = &__p;
  v17 = (const llvm::APInt *)*((_QWORD *)v16 + 1);
  v22 = 64;
  v21 = v17;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v13, &v21);
  *((_QWORD *)&v20 + 1) = v11;
  if (&v20 != (__int128 *)a1)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    *(_OWORD *)a1 = v20;
    *(_QWORD *)&v20 = &llvm::semBogus;
    *((_QWORD *)&v20 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v20);
  if (v19 >= 0x41 && __p)
    operator delete[](__p);
  if (v25 == (_DWORD *)&llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v25);
  }
  else if ((v25[2] - 64) <= 0xFFFFFF7F)
  {
    if (v26)
      operator delete[](v26);
  }
}

void llvm::APFloat::convertFromString(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  llvm::detail::DoubleAPFloat *v5;
  void *v6;

  v6 = *(void **)(a1 + 8);
  v5 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v6 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::convertFromString(v5, a2, a3, a4, a5);
  else
    llvm::detail::IEEEFloat::convertFromString(v5, a2, a3, a4, a5);
}

uint64_t llvm::detail::DoubleAPFloat::convertToInteger(llvm::detail::DoubleAPFloat *a1, llvm::APInt *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v13;
  _DWORD *v14;
  void *v16;
  unsigned int v17;
  _DWORD *v18;
  void *__p;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v16);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v18, (const llvm::APInt **)&v16);
  if (v18 == (_DWORD *)&llvm::semPPCDoubleDouble)
  {
    v13 = llvm::detail::DoubleAPFloat::convertToInteger(&v18, a2, a3, a4, a5, a6, a7);
    v14 = v18;
    if (v18 != (_DWORD *)&llvm::semPPCDoubleDouble)
      goto LABEL_3;
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v18);
    goto LABEL_8;
  }
  v13 = llvm::detail::IEEEFloat::convertToInteger((uint64_t)&v18, a2, a3, a4, a5, a6, a7);
  v14 = v18;
  if (v18 == (_DWORD *)&llvm::semPPCDoubleDouble)
    goto LABEL_7;
LABEL_3:
  if ((v14[2] - 64) <= 0xFFFFFF7F && __p)
    operator delete[](__p);
LABEL_8:
  if (v17 >= 0x41 && v16)
    operator delete[](v16);
  return v13;
}

uint64_t llvm::detail::DoubleAPFloat::convertFromAPInt(llvm::detail::DoubleAPFloat *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  llvm::detail::IEEEFloat *v11;
  llvm::detail::IEEEFloat *v12;
  const llvm::APInt **p_p;
  const llvm::APInt *v14;
  void *v15;
  const llvm::APInt *v16;
  void *__p;
  unsigned int v19;
  __int128 v20;
  const llvm::APInt *v21;
  int v22;
  const llvm::APInt *v23;
  int v24;
  _DWORD *v25;
  void *v26;
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = &llvm::semPPCDoubleDoubleLegacy;
  v26 = operator new[](0x10uLL);
  v28 = 3;
  v27 = -970;
  llvm::APInt::tcSet((llvm::APInt *)v26, 0, 2u);
  v8 = llvm::detail::IEEEFloat::convertFromAPInt((uint64_t)&v25, a2, a3, a4);
  if (v25 == (_DWORD *)&llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v25, (llvm::APInt *)&__p);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)&v25, (uint64_t)&__p);
  *(_QWORD *)&v20 = &llvm::semPPCDoubleDouble;
  v9 = operator new[](0x50uLL);
  v10 = v9 + 1;
  v11 = (llvm::detail::IEEEFloat *)((char *)v9 + 24);
  *v9 = xmmword_18125D2E0;
  v12 = (llvm::detail::IEEEFloat *)((char *)v9 + 56);
  if (v19 >= 0x41)
    p_p = (const llvm::APInt **)__p;
  else
    p_p = (const llvm::APInt **)&__p;
  v14 = *p_p;
  v24 = 64;
  v23 = v14;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v11, &v23);
  if (v19 >= 0x41)
    v15 = __p;
  else
    v15 = &__p;
  v16 = (const llvm::APInt *)*((_QWORD *)v15 + 1);
  v22 = 64;
  v21 = v16;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v12, &v21);
  *((_QWORD *)&v20 + 1) = v10;
  if (&v20 != (__int128 *)a1)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat(a1);
    *(_OWORD *)a1 = v20;
    *(_QWORD *)&v20 = &llvm::semBogus;
    *((_QWORD *)&v20 + 1) = 0;
  }
  llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v20);
  if (v19 >= 0x41 && __p)
    operator delete[](__p);
  if (v25 == (_DWORD *)&llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v25);
  }
  else if ((v25[2] - 64) <= 0xFFFFFF7F && v26)
  {
    operator delete[](v26);
  }
  return v8;
}

void llvm::detail::DoubleAPFloat::toString(llvm::detail::DoubleAPFloat *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  void *v10;
  unsigned int v11;
  _DWORD *v12;
  void *__p;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v10);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)&v12, (const llvm::APInt **)&v10);
  if (v12 == (_DWORD *)&llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::toString(&v12, a2, a3, a4, a5);
    v9 = v12;
    if (v12 != (_DWORD *)&llvm::semPPCDoubleDouble)
      goto LABEL_3;
LABEL_7:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v12);
    goto LABEL_8;
  }
  llvm::detail::IEEEFloat::toString((uint64_t)&v12, a2, a3, a4, a5);
  v9 = v12;
  if (v12 == (_DWORD *)&llvm::semPPCDoubleDouble)
    goto LABEL_7;
LABEL_3:
  if ((v9[2] - 64) <= 0xFFFFFF7F && __p)
    operator delete[](__p);
LABEL_8:
  if (v11 >= 0x41)
  {
    if (v10)
      operator delete[](v10);
  }
}

uint64_t llvm::APFloat::Storage::Storage(uint64_t a1, uint64_t *a2, void *a3)
{
  char v4;
  uint64_t v6;
  void *v7;
  int v8;
  char v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  uint64_t v18;
  int v19;
  char v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a3 == &llvm::semPPCDoubleDouble)
  {
    v6 = *a2;
    v7 = (void *)a2[1];
    v8 = *((_DWORD *)a2 + 4);
    v9 = *((_BYTE *)a2 + 20);
    *a2 = (uint64_t)&llvm::semBogus;
    v16 = v6;
    __p = v7;
    LODWORD(v18) = v8;
    BYTE4(v18) = v9 & 0xF;
    llvm::APFloat::Storage::Storage(&v21, &v16);
    if ((*(_DWORD *)(v16 + 8) - 64) <= 0xFFFFFF7F && __p)
      operator delete[](__p);
    __p = &llvm::semIEEEdouble;
    v20 = 3;
    v19 = -1023;
    llvm::APInt::tcSet((llvm::APInt *)&v18, 0, 1u);
    *(_QWORD *)a1 = &llvm::semPPCDoubleDouble;
    v10 = operator new[](0x50uLL);
    *(_OWORD *)v10 = xmmword_18125D2E0;
    v11 = v21;
    if (v21 == &llvm::semPPCDoubleDouble)
    {
      v15 = v22;
      v10[3] = v21;
      v10[4] = v15;
      v13 = __p;
      if (__p != &llvm::semPPCDoubleDouble)
        goto LABEL_9;
    }
    else
    {
      v12 = v22;
      *((_DWORD *)v10 + 10) = v23;
      *((_BYTE *)v10 + 44) = v24 & 0xF;
      v10[3] = v11;
      v10[4] = v12;
      v13 = __p;
      if (__p != &llvm::semPPCDoubleDouble)
      {
LABEL_9:
        v14 = v18;
        *((_DWORD *)v10 + 18) = v19;
        *((_BYTE *)v10 + 76) = v20 & 0xF;
LABEL_12:
        v10[7] = v13;
        v10[8] = v14;
        *(_QWORD *)(a1 + 8) = v10 + 2;
        return a1;
      }
    }
    v14 = v18;
    goto LABEL_12;
  }
  *(_QWORD *)a1 = &llvm::semBogus;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  v4 = *(_BYTE *)(a1 + 20) & 0xF8 | *((_BYTE *)a2 + 20) & 7;
  *(_BYTE *)(a1 + 20) = v4;
  *(_BYTE *)(a1 + 20) = v4 & 0xF7 | *((_BYTE *)a2 + 20) & 8;
  *a2 = (uint64_t)&llvm::semBogus;
  return a1;
}

llvm::APFloatBase *llvm::APFloat::APFloat(llvm::APFloatBase *a1, void *a2, unsigned __int8 *a3, unint64_t a4)
{
  llvm::APFloatBase *v7;
  llvm::detail::DoubleAPFloat *v8;
  void *v9;
  char v10;
  _QWORD *v11;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = llvm::APFloat::APFloat(a1, a2);
  v9 = (void *)*((_QWORD *)v7 + 1);
  v8 = (llvm::APFloatBase *)((char *)v7 + 8);
  if (v9 == &llvm::semPPCDoubleDouble)
  {
    llvm::detail::DoubleAPFloat::convertFromString(v8, a3, a4, 1, (uint64_t)&v15);
    v10 = v16;
    if ((v16 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    llvm::detail::IEEEFloat::convertFromString(v8, a3, a4, 1, (uint64_t)&v15);
    v10 = v16;
    if ((v16 & 1) == 0)
    {
LABEL_3:
      v11 = 0;
      goto LABEL_6;
    }
  }
  v11 = v15;
  v15 = 0;
LABEL_6:
  v13 = v11;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v13, &v14);
  if (v13)
    (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  if ((v10 & 1) != 0 && v15)
    (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  return a1;
}

uint64_t llvm::APFloat::convert(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  void *v4;
  llvm::APFloatBase *v5;
  uint64_t v8;
  const llvm::APInt *v10;
  llvm::APFloatBase *v11;
  uint64_t v12;
  const llvm::APInt *v13;
  void *v14;
  int v15;
  char v16;
  void *v17;
  _OWORD *v18;
  void *v19;
  llvm::detail::IEEEFloat *v20;
  llvm::detail::IEEEFloat *v21;
  const llvm::APInt **v22;
  const llvm::APInt *v23;
  void *v24;
  const llvm::APInt *v25;
  void *v26;
  unsigned int v27;
  const llvm::APInt *v28;
  int v29;
  const llvm::APInt *v30;
  void *__p;
  int v32;
  char v33;
  _DWORD *v34;
  void *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = (llvm::APFloatBase *)(a1 + 8);
  v4 = *(void **)(a1 + 8);
  if (v4 == a2)
  {
    v8 = 0;
    *a4 = 0;
  }
  else if (v4 == &llvm::semPPCDoubleDouble)
  {
    v8 = llvm::detail::IEEEFloat::convert(*(_QWORD *)(a1 + 16) + 8, (uint64_t)a2, a3, a4);
    v10 = *(const llvm::APInt **)(a1 + 8);
    v11 = v5;
    if (v10 == (const llvm::APInt *)&llvm::semPPCDoubleDouble)
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(const llvm::APInt **)(v12 + 8);
      v11 = (llvm::APFloatBase *)(v12 + 8);
      v10 = v13;
    }
    v14 = (void *)*((_QWORD *)v11 + 1);
    v15 = *((_DWORD *)v11 + 4);
    v16 = *((_BYTE *)v11 + 20) & 0xF;
    *(_QWORD *)v11 = &llvm::semBogus;
    v30 = v10;
    __p = v14;
    v32 = v15;
    v33 = v16;
    llvm::APFloat::Storage::Storage((uint64_t)&v34, (uint64_t *)&v30, a2);
    if ((*((_DWORD *)v30 + 2) - 64) <= 0xFFFFFF7F && __p)
      operator delete[](__p);
    llvm::APFloat::Storage::operator=(v5, (llvm::APFloatBase *)&v34);
    if (v34 != (_DWORD *)&llvm::semPPCDoubleDouble)
    {
      if ((v34[2] - 64) > 0xFFFFFF7F)
        return v8;
      v17 = v35;
      if (!v35)
        return v8;
      goto LABEL_30;
    }
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v34);
  }
  else
  {
    if (a2 != &llvm::semPPCDoubleDouble)
      return llvm::detail::IEEEFloat::convert(a1 + 8, (uint64_t)a2, a3, a4);
    v8 = llvm::detail::IEEEFloat::convert(a1 + 8, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, a3, a4);
    llvm::detail::IEEEFloat::bitcastToAPInt(v5, (uint64_t)&v26);
    v34 = &llvm::semPPCDoubleDouble;
    v18 = operator new[](0x50uLL);
    v19 = v18 + 1;
    v20 = (llvm::detail::IEEEFloat *)((char *)v18 + 24);
    *v18 = xmmword_18125D2E0;
    v21 = (llvm::detail::IEEEFloat *)((char *)v18 + 56);
    if (v27 >= 0x41)
      v22 = (const llvm::APInt **)v26;
    else
      v22 = (const llvm::APInt **)&v26;
    v23 = *v22;
    LODWORD(__p) = 64;
    v30 = v23;
    llvm::detail::IEEEFloat::initFromDoubleAPInt(v20, &v30);
    if (v27 >= 0x41)
      v24 = v26;
    else
      v24 = &v26;
    v25 = (const llvm::APInt *)*((_QWORD *)v24 + 1);
    v29 = 64;
    v28 = v25;
    llvm::detail::IEEEFloat::initFromDoubleAPInt(v21, &v28);
    v35 = v19;
    llvm::APFloat::Storage::operator=(v5, (llvm::APFloatBase *)&v34);
    if (v34 == (_DWORD *)&llvm::semPPCDoubleDouble)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v34);
    }
    else if ((v34[2] - 64) <= 0xFFFFFF7F && v35)
    {
      operator delete[](v35);
    }
    if (v27 >= 0x41)
    {
      v17 = v26;
      if (v26)
LABEL_30:
        operator delete[](v17);
    }
  }
  return v8;
}

void llvm::APFloat::getAllOnesValue(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  void *v5;
  _OWORD *v6;
  _OWORD *v7;
  llvm::detail::IEEEFloat *v8;
  llvm::detail::IEEEFloat *v9;
  const llvm::APInt **p_p;
  const llvm::APInt *v11;
  void *v12;
  const llvm::APInt *v13;
  void *__p;
  unsigned int v15;
  const llvm::APInt *v16;
  int v17;
  const llvm::APInt *v18;
  int v19;

  v4 = *(_DWORD *)(a1 + 12);
  v15 = v4;
  if (v4 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, -1, 1);
    if ((_UNKNOWN *)a1 != &llvm::semPPCDoubleDouble)
      goto LABEL_6;
  }
  else
  {
    if (v4)
      v5 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v4);
    else
      v5 = 0;
    __p = v5;
    if ((_UNKNOWN *)a1 != &llvm::semPPCDoubleDouble)
    {
LABEL_6:
      llvm::detail::IEEEFloat::initFromAPInt((llvm::detail::IEEEFloat *)(a2 + 8), (void *)a1, (const llvm::APInt **)&__p);
      if (v15 < 0x41)
        return;
      goto LABEL_16;
    }
  }
  *(_QWORD *)(a2 + 8) = &llvm::semPPCDoubleDouble;
  v6 = operator new[](0x50uLL);
  v7 = v6 + 1;
  v8 = (llvm::detail::IEEEFloat *)((char *)v6 + 24);
  *v6 = xmmword_18125D2E0;
  v9 = (llvm::detail::IEEEFloat *)((char *)v6 + 56);
  if (v15 >= 0x41)
    p_p = (const llvm::APInt **)__p;
  else
    p_p = (const llvm::APInt **)&__p;
  v11 = *p_p;
  v19 = 64;
  v18 = v11;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v8, &v18);
  if (v15 >= 0x41)
    v12 = __p;
  else
    v12 = &__p;
  v13 = (const llvm::APInt *)*((_QWORD *)v12 + 1);
  v17 = 64;
  v16 = v13;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v9, &v16);
  *(_QWORD *)(a2 + 16) = v7;
  if (v15 >= 0x41)
  {
LABEL_16:
    if (__p)
      operator delete[](__p);
  }
}

uint64_t llvm::APFloat::convertToInteger(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  llvm::APInt *v11;
  unint64_t v12;
  int v13;
  llvm::detail::DoubleAPFloat *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(a2 + 8);
  v21 = v23;
  v22 = 0x400000000;
  if ((_DWORD)v8)
  {
    v9 = (unint64_t)(v8 + 63) >> 6;
    if (v8 < 0x101)
    {
      v10 = 0;
      v11 = (llvm::APInt *)v23;
      v12 = (unint64_t)(v8 + 63) >> 6;
      if (!v9)
        goto LABEL_9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, (unint64_t)(v8 + 63) >> 6, 8);
      v10 = v22;
      v11 = (llvm::APInt *)v21;
      v12 = v9 - v22;
      if (v9 == v22)
      {
LABEL_9:
        LODWORD(v22) = (unint64_t)(v8 + 63) >> 6;
        v13 = *(unsigned __int8 *)(a2 + 12);
        v16 = *(void **)(a1 + 8);
        v14 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
        if (v16 != &llvm::semPPCDoubleDouble)
          goto LABEL_10;
        goto LABEL_6;
      }
    }
    bzero((char *)v11 + 8 * v10, 8 * v12);
    goto LABEL_9;
  }
  v9 = 0;
  v11 = (llvm::APInt *)v23;
  v13 = *(unsigned __int8 *)(a2 + 12);
  v14 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (*(_UNKNOWN **)(a1 + 8) != &llvm::semPPCDoubleDouble)
  {
LABEL_10:
    v15 = llvm::detail::IEEEFloat::convertToInteger((uint64_t)v14, v11, v9, v8, v13 == 0, a3, a4);
    goto LABEL_11;
  }
LABEL_6:
  v15 = llvm::detail::DoubleAPFloat::convertToInteger(v14, v11, v9, v8, v13 == 0, a3, a4);
LABEL_11:
  v17 = v15;
  llvm::APInt::APInt((uint64_t)&v19, v8, v21, v22);
  if (*(_DWORD *)(a2 + 8) >= 0x41u && *(_QWORD *)a2)
    operator delete[](*(void **)a2);
  *(_QWORD *)a2 = v19;
  *(_DWORD *)(a2 + 8) = v20;
  v20 = 0;
  if (v21 != v23)
    free(v21);
  return v17;
}

double llvm::APFloat::convertToDouble(void **this)
{
  llvm::detail::IEEEFloat *v1;
  void *v2;
  _DWORD *v3;
  void *v4;
  char v6;
  void *__p;
  unsigned int v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (this[1] == &llvm::semIEEEdouble)
  {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)(this + 1), (uint64_t)&v9);
    if (v10 <= 0x40)
    {
      v2 = v9;
      return *(double *)&v2;
    }
    v4 = v9;
    v2 = *(void **)v9;
LABEL_16:
    operator delete[](v4);
    return *(double *)&v2;
  }
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v10, (const llvm::detail::IEEEFloat *)(this + 1));
  llvm::APFloat::convert((uint64_t)&v9, &llvm::semIEEEdouble, 1, &v6);
  if (v10 == (_DWORD *)&llvm::semPPCDoubleDouble)
    v1 = (llvm::detail::IEEEFloat *)(v11 + 8);
  else
    v1 = (llvm::detail::IEEEFloat *)&v10;
  llvm::detail::IEEEFloat::bitcastToAPInt(v1, (uint64_t)&__p);
  if (v8 > 0x40)
  {
    v2 = *(void **)__p;
    operator delete[](__p);
    v3 = v10;
    if (v10 != (_DWORD *)&llvm::semPPCDoubleDouble)
      goto LABEL_7;
LABEL_13:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v10);
    return *(double *)&v2;
  }
  v2 = __p;
  v3 = v10;
  if (v10 == (_DWORD *)&llvm::semPPCDoubleDouble)
    goto LABEL_13;
LABEL_7:
  if ((v3[2] - 64) <= 0xFFFFFF7F)
  {
    v4 = (void *)v11;
    if (v11)
      goto LABEL_16;
  }
  return *(double *)&v2;
}

float llvm::APFloat::convertToFloat(void **this)
{
  llvm::detail::IEEEFloat *v1;
  uint64_t v2;
  _DWORD *v3;
  void *v4;
  char v6;
  void *__p;
  unsigned int v8;
  void *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (this[1] == &llvm::semIEEEsingle)
  {
    llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)(this + 1), (uint64_t)&v9);
    if (v10 <= 0x40)
    {
      LODWORD(v2) = (_DWORD)v9;
      return *(float *)&v2;
    }
    v4 = v9;
    v2 = *(_QWORD *)v9;
LABEL_16:
    operator delete[](v4);
    return *(float *)&v2;
  }
  llvm::APFloat::Storage::Storage((llvm::detail::IEEEFloat *)&v10, (const llvm::detail::IEEEFloat *)(this + 1));
  llvm::APFloat::convert((uint64_t)&v9, &llvm::semIEEEsingle, 1, &v6);
  if (v10 == (_DWORD *)&llvm::semPPCDoubleDouble)
    v1 = (llvm::detail::IEEEFloat *)(v11 + 8);
  else
    v1 = (llvm::detail::IEEEFloat *)&v10;
  llvm::detail::IEEEFloat::bitcastToAPInt(v1, (uint64_t)&__p);
  if (v8 > 0x40)
  {
    v2 = *(_QWORD *)__p;
    operator delete[](__p);
    v3 = v10;
    if (v10 != (_DWORD *)&llvm::semPPCDoubleDouble)
      goto LABEL_7;
LABEL_13:
    llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v10);
    return *(float *)&v2;
  }
  LODWORD(v2) = (_DWORD)__p;
  v3 = v10;
  if (v10 == (_DWORD *)&llvm::semPPCDoubleDouble)
    goto LABEL_13;
LABEL_7:
  if ((v3[2] - 64) <= 0xFFFFFF7F)
  {
    v4 = (void *)v11;
    if (v11)
      goto LABEL_16;
  }
  return *(float *)&v2;
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::Storage(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;

  if (*(_UNKNOWN **)a2 != &llvm::semPPCDoubleDouble)
    return llvm::detail::IEEEFloat::IEEEFloat(a1, a2);
  *(_QWORD *)a1 = &llvm::semPPCDoubleDouble;
  v5 = *((_QWORD *)a2 + 1);
  if (v5)
  {
    v6 = operator new[](0x50uLL);
    v7 = v6 + 1;
    *v6 = xmmword_18125D2E0;
    llvm::APFloat::Storage::Storage((char *)v6 + 24, v5 + 8);
    llvm::APFloat::Storage::Storage((char *)v6 + 56, *((_QWORD *)a2 + 1) + 40);
  }
  else
  {
    v7 = 0;
  }
  *((_QWORD *)a1 + 1) = v7;
  return a1;
}

void llvm::APInt::initSlowCase(llvm::APInt *this, uint64_t a2, int a3)
{
  llvm::APInt *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;

  v5 = this;
  v6 = *((unsigned int *)this + 2);
  v7 = (unint64_t)(v6 + 63) >> 6;
  v8 = operator new[](8 * v7);
  bzero(v8, 8 * v7);
  *(_QWORD *)v5 = v8;
  *v8 = a2;
  if (a2 < 0 && a3 && v6 >= 0x41)
  {
    v9 = 8;
    do
    {
      *(_QWORD *)(*(_QWORD *)v5 + v9) = -1;
      v9 += 8;
    }
    while (8 * v7 != v9);
  }
  if ((_DWORD)v6)
  {
    v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (v6 >= 0x41)
      v5 = (llvm::APInt *)(*(_QWORD *)v5 + 8 * (v7 - 1));
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)v5 &= v10;
}

void *llvm::APInt::initSlowCase(llvm::APInt *this, const void **a2)
{
  size_t v4;
  void *v5;

  v4 = (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8;
  v5 = operator new[](v4);
  *(_QWORD *)this = v5;
  return memcpy(v5, *a2, v4);
}

uint64_t llvm::APInt::APInt(uint64_t a1, unsigned int a2, _QWORD *a3, unsigned int a4)
{
  char v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  char *v12;
  int v13;

  v5 = a2;
  *(_DWORD *)(a1 + 8) = a2;
  if (a2 > 0x40)
  {
    v11 = ((unint64_t)a2 + 63) >> 6;
    v12 = (char *)operator new[](8 * v11);
    bzero(v12, 8 * v11);
    *(_QWORD *)a1 = v12;
    if (v11 >= a4)
      v13 = a4;
    else
      v13 = v11;
    memcpy(v12, a3, (8 * v13));
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -v5;
    v9 = (unint64_t *)&v12[8 * (v11 - 1)];
    v7 = *v9;
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)a1 = *a3;
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v8 = 0;
    v9 = (unint64_t *)a1;
  }
  *v9 = v8 & v7;
  return a1;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, unsigned int a2, unsigned int a3, const unint64_t *a4)
{
  char v5;
  uint64_t v7;
  unint64_t v8;
  llvm::APInt *v9;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  size_t v16;
  size_t v17;

  v5 = a2;
  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40)
  {
    v11 = ((unint64_t)a2 + 63) >> 6;
    v12 = 8 * v11;
    v13 = (char *)operator new[](8 * v11);
    v14 = v13;
    *(_QWORD *)this = v13;
    if (v11 >= a3)
      v15 = a3;
    else
      v15 = v11;
    v16 = (8 * v15);
    if (v12 >= v16)
      v17 = v12 - v16;
    else
      v17 = 0;
    bzero(&v13[v16], v17);
    memcpy(v14, a4, v16);
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -v5;
    v9 = (llvm::APInt *)&v14[8 * (v11 - 1)];
    v7 = *(_QWORD *)v9;
  }
  else
  {
    v7 = *a4;
    *(_QWORD *)this = *a4;
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v8 = 0;
    v9 = this;
  }
  *(_QWORD *)v9 = v8 & v7;
  return this;
}

void llvm::APInt::assignSlowCase(const void **this, const void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;

  if (this != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *((unsigned int *)this + 2);
    v6 = (unint64_t)(v4 + 63) >> 6;
    if (((unint64_t)(v5 + 63) >> 6) == (_DWORD)v6)
    {
      *((_DWORD *)this + 2) = v4;
      if (v4 > 0x40)
        goto LABEL_12;
    }
    else
    {
      if (v5 >= 0x41)
      {
        v7 = (void *)*this;
        if (*this)
          operator delete[](v7);
      }
      *((_DWORD *)this + 2) = v4;
      if (v4 >= 0x41)
      {
        *this = operator new[](8 * v6);
LABEL_12:
        memcpy((void *)*this, *a2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
        return;
      }
    }
    *this = *a2;
  }
}

uint64_t **llvm::APInt::operator++(uint64_t **result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v11;

  v1 = *((unsigned int *)result + 2);
  if (v1 >= 0x41)
  {
    v4 = *result;
    v5 = (unint64_t)(v1 + 63) >> 6;
    v6 = **result;
    **result = v6 + 1;
    if (v6 == -1)
    {
      v7 = v4[1];
      v4[1] = v7 + 1;
      if (v7 == -1)
      {
        v8 = v4 + 2;
        v9 = v5 - 2;
        do
        {
          if (!v9)
            break;
          --v9;
        }
        while (__CFADD__((*v8++)++, 1));
      }
    }
    v11 = &(*result)[(v5 - 1)];
    *v11 &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  }
  else
  {
    v2 = (uint64_t)*result + 1;
    *result = (uint64_t *)v2;
    if ((_DWORD)v1)
      v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
    else
      v3 = 0;
    *result = (uint64_t *)(v2 & v3);
  }
  return result;
}

uint64_t llvm::APInt::operator+=(uint64_t result, _QWORD **a2)
{
  uint64_t v2;
  _BOOL8 v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  unint64_t v11;
  _QWORD *v12;

  v2 = *(unsigned int *)(result + 8);
  if (v2 > 0x40)
  {
    v3 = 0;
    v4 = *(_QWORD **)result;
    v5 = *a2;
    v6 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      v7 = *v5++;
      v8 = v7 + *v4;
      v9 = __CFADD__(v7, *v4);
      v10 = (unint64_t)(v8 + 1) <= *v4;
      if (v3)
      {
        ++v8;
        v3 = v10;
      }
      else
      {
        v3 = v9;
      }
      *v4++ = v8;
      --v6;
    }
    while (v6);
    LODWORD(v2) = *(_DWORD *)(result + 8);
  }
  else
  {
    *(_QWORD *)result += *a2;
  }
  if ((_DWORD)v2)
  {
    v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    if (v2 >= 0x41)
    {
      v12 = (_QWORD *)(*(_QWORD *)result + 8 * ((((unint64_t)v2 + 63) >> 6) - 1));
      *v12 &= v11;
    }
    else
    {
      *(_QWORD *)result &= v11;
    }
  }
  else
  {
    *(_QWORD *)result = 0;
  }
  return result;
}

unint64_t llvm::APInt::tcAdd(llvm::APInt *this, unint64_t *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;

  if (a4)
  {
    v4 = a4;
    do
    {
      v5 = *(_QWORD *)this;
      v7 = *a2++;
      v6 = v7;
      v8 = v7 + *(_QWORD *)this;
      v9 = __CFADD__(v7, *(_QWORD *)this);
      v10 = v5 + v6;
      v11 = v10 + 1 <= v5;
      if (a3)
        v12 = v10 + 1;
      else
        v12 = v8;
      if (a3)
        a3 = v11;
      else
        a3 = v9;
      *(_QWORD *)this = v12;
      this = (llvm::APInt *)((char *)this + 8);
      --v4;
    }
    while (v4);
  }
  return a3;
}

BOOL llvm::APInt::tcAddPart(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  BOOL v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!a3)
    return 1;
  v3 = __CFADD__(*(_QWORD *)this, a2);
  *(_QWORD *)this += a2;
  if (!v3)
    return 0;
  v4 = a3 < 2;
  if (a3 == 1)
    return v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5 + 1;
  if (v5 != -1)
    return v4;
  v6 = 2;
  do
  {
    v7 = v6;
    if (a3 == v6)
      break;
    v8 = *((_QWORD *)this + v6++);
    *((_QWORD *)this + v7) = v8 + 1;
  }
  while (v8 == -1);
  return v7 >= a3;
}

uint64_t llvm::APInt::operator-=(uint64_t result, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v2 = *(unsigned int *)(result + 8);
  if (v2 > 0x40)
  {
    v3 = 0;
    v4 = *(unint64_t **)result;
    v5 = *a2;
    v6 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      v7 = *v5++;
      v8 = *v4 - v7;
      v9 = *v4 < v7;
      v10 = *v4 + ~v7;
      if (v3)
      {
        v3 = v10 >= *v4;
      }
      else
      {
        v10 = v8;
        v3 = v9;
      }
      *v4++ = v10;
      --v6;
    }
    while (v6);
    LODWORD(v2) = *(_DWORD *)(result + 8);
  }
  else
  {
    *(_QWORD *)result -= *a2;
  }
  if ((_DWORD)v2)
  {
    v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    if (v2 >= 0x41)
    {
      v12 = (_QWORD *)(*(_QWORD *)result + 8 * ((((unint64_t)v2 + 63) >> 6) - 1));
      *v12 &= v11;
    }
    else
    {
      *(_QWORD *)result &= v11;
    }
  }
  else
  {
    *(_QWORD *)result = 0;
  }
  return result;
}

unint64_t llvm::APInt::tcSubtract(llvm::APInt *this, unint64_t *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v7;
  unint64_t v8;

  if (a4)
  {
    v4 = a4;
    do
    {
      v5 = *a2++;
      v6 = *(_QWORD *)this - v5;
      v7 = *(_QWORD *)this < v5;
      v8 = *(_QWORD *)this + ~v5;
      if (a3)
      {
        a3 = v8 >= *(_QWORD *)this;
      }
      else
      {
        v8 = v6;
        a3 = v7;
      }
      *(_QWORD *)this = v8;
      this = (llvm::APInt *)((char *)this + 8);
      --v4;
    }
    while (v4);
  }
  return a3;
}

unint64_t **llvm::APInt::operator-=(unint64_t **result, unint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v12;

  v2 = *((unsigned int *)result + 2);
  if (v2 >= 0x41)
  {
    v5 = *result;
    v6 = (unint64_t)(v2 + 63) >> 6;
    v7 = **result;
    **result = v7 - a2;
    if (v7 < a2)
    {
      v8 = v6 - 2;
      v9 = v5 + 1;
      do
      {
        v10 = v8;
        if ((*v9++)-- != 0)
          break;
        --v8;
      }
      while (v10);
    }
    v12 = (uint64_t *)&(*result)[(v6 - 1)];
    *v12 &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  }
  else
  {
    v3 = (unint64_t *)((char *)*result - a2);
    *result = v3;
    if ((_DWORD)v2)
      v4 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
    else
      v4 = 0;
    *result = (unint64_t *)((unint64_t)v3 & v4);
  }
  return result;
}

uint64_t llvm::APInt::operator*@<X0>(uint64_t result@<X0>, const unint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t **v4;
  uint64_t v6;
  unint64_t v7;
  llvm::APInt *v8;
  unint64_t v9;

  v4 = (unint64_t **)result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 > 0x40)
  {
    v9 = (unint64_t)(v6 + 63) >> 6;
    v8 = (llvm::APInt *)operator new[](8 * v9);
    result = llvm::APInt::tcMultiply(v8, *v4, *a2, (const unint64_t *)v9);
    *((_QWORD *)v8 + (v9 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  }
  else
  {
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!(_DWORD)v6)
      v7 = 0;
    v8 = (llvm::APInt *)(((_QWORD)*a2 * *(_QWORD *)result) & v7);
  }
  *(_DWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v8;
  return result;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, unsigned int a2, uint64_t a3, int a4)
{
  char v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = a2;
  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40)
  {
    v9 = ((unint64_t)a2 + 63) >> 6;
    v10 = operator new[](8 * v9);
    bzero(v10, 8 * v9);
    *(_QWORD *)this = v10;
    *v10 = a3;
    if (a3 < 0 && a4)
    {
      v11 = 8;
      do
      {
        *(_QWORD *)(*(_QWORD *)this + v11) = -1;
        v11 += 8;
      }
      while (8 * v9 != v11);
      v10 = *(_QWORD **)this;
    }
    v10[(v9 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v5;
  }
  else
  {
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v7 = 0;
    *(_QWORD *)this = v7 & a3;
  }
  return this;
}

uint64_t llvm::APInt::tcMultiply(llvm::APInt *this, unint64_t *a2, const unint64_t *a3, const unint64_t *a4)
{
  unsigned int v4;
  llvm::APInt *v7;
  uint64_t v8;
  uint64_t result;
  unsigned int i;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t *v18;
  llvm::APInt *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;

  v4 = a4;
  v7 = this;
  *(_QWORD *)this = 0;
  if (a4 >= 2)
  {
    bzero((char *)this + 8, 8 * ((_DWORD)a4 - 2) + 8);
LABEL_4:
    v8 = 0;
    LODWORD(result) = 0;
    for (i = v4; ; --i)
    {
      v12 = v4 - (unint64_t)i;
      if (v4 >= (unint64_t)i)
        v13 = i;
      else
        v13 = v4;
      v14 = a3[v8];
      if (v4 >= v4 - v8)
        v15 = v4 - v8;
      else
        v15 = v4;
      if (!v15)
        goto LABEL_32;
      if (v14)
      {
        v16 = 0;
        v17 = a3[v8];
        v18 = a2;
        v19 = v7;
        do
        {
          v21 = *v18++;
          v20 = v21;
          if (v21)
          {
            v22 = v20 * (unint64_t)v17;
            v23 = HIDWORD(v20);
            v24 = v20 * (unint64_t)HIDWORD(v14);
            v25 = HIDWORD(v24) + HIDWORD(v20) * (unint64_t)HIDWORD(v14);
            v26 = v20 * v14;
            v27 = __CFADD__(v26, v16);
            v16 += v26;
            v28 = v27;
            if (v26 >= v22 + (v24 << 32))
              v20 = (__PAIR128__(v28, v22)
                   + __PAIR128__(v25 + ((v23 * (unint64_t)v17) >> 32), v24 << 32)) >> 64;
            else
              v20 = ((__PAIR128__(v28, v22)
                    + __PAIR128__(v25 + ((v23 * (unint64_t)v17) >> 32), v24 << 32)) >> 64)
                  + 1;
          }
          if (__CFADD__(v16, *(_QWORD *)v19))
            ++v20;
          *(_QWORD *)v19 += v16;
          v19 = (llvm::APInt *)((char *)v19 + 8);
          v16 = v20;
          --v13;
        }
        while (v13);
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 8 * v13;
        do
        {
          v32 = *(_QWORD *)((char *)v7 + v29);
          v20 = __CFADD__(v30, v32);
          *(_QWORD *)((char *)v7 + v29) = v32 + v30;
          v29 += 8;
          v30 = v20;
        }
        while (v31 != v29);
      }
      if (!v20)
      {
LABEL_32:
        v11 = 0;
        if (v4 - v8 >= v4 || !v14)
          goto LABEL_6;
        v33 = &a2[i];
        while (!*v33++)
        {
          if (!--v12)
          {
            v11 = 0;
            goto LABEL_6;
          }
        }
      }
      v11 = 1;
LABEL_6:
      result = v11 | result;
      ++v8;
      v7 = (llvm::APInt *)((char *)v7 + 8);
      if (v8 == v4)
        return result;
    }
  }
  if ((_DWORD)a4)
    goto LABEL_4;
  return 0;
}

uint64_t llvm::APInt::andAssignSlowCase(uint64_t this, const llvm::APInt *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;

  v2 = *(unsigned int *)(this + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)this;
    v4 = *(_QWORD *)a2;
    v5 = (unint64_t)(v2 + 63) >> 6;
    if (v2 < 0x141 || (v3 < v4 + 8 * v5 ? (v6 = v4 >= v3 + 8 * v5) : (v6 = 1), !v6))
    {
      v7 = 0;
LABEL_13:
      v12 = v5 - v7;
      v13 = 8 * v7;
      v14 = (_QWORD *)(v3 + v13);
      v15 = (uint64_t *)(v4 + v13);
      do
      {
        v16 = *v15++;
        *v14++ &= v16;
        --v12;
      }
      while (v12);
      return this;
    }
    v7 = ((unint64_t)(v2 + 63) >> 6) & 0x7FFFFFC;
    v8 = (int8x16_t *)(v4 + 16);
    v9 = (int8x16_t *)(v3 + 16);
    v10 = v7;
    do
    {
      v11 = vandq_s8(*v9, *v8);
      v9[-1] = vandq_s8(v9[-1], v8[-1]);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v5 != v7)
      goto LABEL_13;
  }
  return this;
}

uint64_t llvm::APInt::orAssignSlowCase(uint64_t this, const llvm::APInt *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;

  v2 = *(unsigned int *)(this + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)this;
    v4 = *(_QWORD *)a2;
    v5 = (unint64_t)(v2 + 63) >> 6;
    if (v2 < 0x141 || (v3 < v4 + 8 * v5 ? (v6 = v4 >= v3 + 8 * v5) : (v6 = 1), !v6))
    {
      v7 = 0;
LABEL_13:
      v12 = v5 - v7;
      v13 = 8 * v7;
      v14 = (_QWORD *)(v3 + v13);
      v15 = (uint64_t *)(v4 + v13);
      do
      {
        v16 = *v15++;
        *v14++ |= v16;
        --v12;
      }
      while (v12);
      return this;
    }
    v7 = ((unint64_t)(v2 + 63) >> 6) & 0x7FFFFFC;
    v8 = (int8x16_t *)(v4 + 16);
    v9 = (int8x16_t *)(v3 + 16);
    v10 = v7;
    do
    {
      v11 = vorrq_s8(*v9, *v8);
      v9[-1] = vorrq_s8(v9[-1], v8[-1]);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v5 != v7)
      goto LABEL_13;
  }
  return this;
}

uint64_t llvm::APInt::xorAssignSlowCase(uint64_t this, const llvm::APInt *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;

  v2 = *(unsigned int *)(this + 8);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)this;
    v4 = *(_QWORD *)a2;
    v5 = (unint64_t)(v2 + 63) >> 6;
    if (v2 < 0x141 || (v3 < v4 + 8 * v5 ? (v6 = v4 >= v3 + 8 * v5) : (v6 = 1), !v6))
    {
      v7 = 0;
LABEL_13:
      v12 = v5 - v7;
      v13 = 8 * v7;
      v14 = (_QWORD *)(v3 + v13);
      v15 = (uint64_t *)(v4 + v13);
      do
      {
        v16 = *v15++;
        *v14++ ^= v16;
        --v12;
      }
      while (v12);
      return this;
    }
    v7 = ((unint64_t)(v2 + 63) >> 6) & 0x7FFFFFC;
    v8 = (int8x16_t *)(v4 + 16);
    v9 = (int8x16_t *)(v3 + 16);
    v10 = v7;
    do
    {
      v11 = veorq_s8(*v9, *v8);
      v9[-1] = veorq_s8(v9[-1], v8[-1]);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v5 != v7)
      goto LABEL_13;
  }
  return this;
}

uint64_t llvm::APInt::operator*=(uint64_t a1, const unint64_t **a2)
{
  uint64_t v4;
  unint64_t v5;
  llvm::APInt *v6;
  unint64_t v7;
  unint64_t *v8;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 > 0x40)
  {
    v7 = (unint64_t)(v4 + 63) >> 6;
    v6 = (llvm::APInt *)operator new[](8 * v7);
    v8 = *(unint64_t **)a1;
    llvm::APInt::tcMultiply(v6, *(unint64_t **)a1, *a2, (const unint64_t *)v7);
    *((_QWORD *)v6 + (v7 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    if (v8)
      operator delete[](v8);
  }
  else
  {
    v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    if (!(_DWORD)v4)
      v5 = 0;
    v6 = (llvm::APInt *)(((_QWORD)*a2 * *(_QWORD *)a1) & v5);
  }
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v4;
  return a1;
}

uint64_t llvm::APInt::tcMultiplyPart(llvm::APInt *this, unint64_t *a2, unint64_t a3, unint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v7;
  unint64_t v8;
  llvm::APInt *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  llvm::APInt *v16;
  uint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (a5 >= a6)
    v7 = a6;
  else
    v7 = a5;
  if ((_DWORD)v7)
  {
    if (a3)
    {
      v8 = HIDWORD(a3);
      v9 = this;
      v10 = a2;
      if ((a7 & 1) != 0)
      {
        do
        {
          v12 = *v10++;
          v11 = v12;
          if (v12)
          {
            v13 = v11 * a3 + a4;
            v11 = (__PAIR128__(((HIDWORD(v11) * (unint64_t)a3) >> 32)+ __CFADD__(v11 * (unint64_t)a3, (v11 * (unint64_t)v8) << 32)+ ((v11 * (unint64_t)v8) >> 32)+ HIDWORD(v11) * (unint64_t)v8, v11 * a3)+ __PAIR128__(v11 * a3 < v11 * (unint64_t)a3+ ((v11 * (unint64_t)v8) << 32), a4)) >> 64;
            a4 = v13;
          }
          if (__CFADD__(a4, *(_QWORD *)v9))
            ++v11;
          *(_QWORD *)v9 += a4;
          v9 = (llvm::APInt *)((char *)v9 + 8);
          a4 = v11;
          --v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v14 = *v10++;
          v11 = v14;
          if (v14)
          {
            v15 = v11 * a3 + a4;
            v11 = (__PAIR128__(((HIDWORD(v11) * (unint64_t)a3) >> 32)+ __CFADD__(v11 * (unint64_t)a3, (v11 * (unint64_t)v8) << 32)+ ((v11 * (unint64_t)v8) >> 32)+ HIDWORD(v11) * (unint64_t)v8, v11 * a3)+ __PAIR128__(v11 * a3 < v11 * (unint64_t)a3+ ((v11 * (unint64_t)v8) << 32), a4)) >> 64;
            a4 = v15;
          }
          *(_QWORD *)v9 = a4;
          v9 = (llvm::APInt *)((char *)v9 + 8);
          a4 = v11;
          --v7;
        }
        while (v7);
      }
LABEL_24:
      if (a5 < a6)
        goto LABEL_25;
      goto LABEL_35;
    }
    if (a7)
    {
      v16 = this;
      do
      {
        v11 = __CFADD__(a4, *(_QWORD *)v16);
        *(_QWORD *)v16 += a4;
        v16 = (llvm::APInt *)((char *)v16 + 8);
        a4 = v11;
        --v7;
      }
      while (v7);
      goto LABEL_24;
    }
    *(_QWORD *)this = a4;
    if ((_DWORD)v7 != 1)
    {
      if (v7 < 5)
      {
        v18 = 1;
LABEL_32:
        v22 = (_QWORD *)((char *)this + 8 * v18);
        v23 = v7 - v18;
        do
        {
          *v22++ = 0;
          --v23;
        }
        while (v23);
        goto LABEL_34;
      }
      v19 = (v7 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v18 = v19 | 1;
      v20 = (_OWORD *)((char *)this + 24);
      v21 = v19;
      do
      {
        *(v20 - 1) = 0uLL;
        *v20 = 0uLL;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v7 - 1 != v19)
        goto LABEL_32;
    }
LABEL_34:
    v11 = 0;
    if (a5 < a6)
      goto LABEL_25;
    goto LABEL_35;
  }
  v11 = a4;
  if (a5 < a6)
  {
LABEL_25:
    *((_QWORD *)this + a5) = v11;
    return 0;
  }
LABEL_35:
  if (!v11)
  {
    v24 = 0;
    if (!a3 || a6 >= a5)
      return v24;
    v25 = &a2[a6];
    v26 = a5 - (unint64_t)a6;
    while (!*v25++)
    {
      if (!--v26)
        return 0;
    }
  }
  return 1;
}

BOOL llvm::APInt::equalSlowCase(const void **this, const void **a2)
{
  return memcmp(*this, *a2, (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8) == 0;
}

uint64_t llvm::APInt::compare(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    v4 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v4)
        return 0;
      v5 = *(_QWORD *)(*(_QWORD *)this - 8 + v4);
      v6 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v4);
      v4 -= 8;
    }
    while (v5 == v6);
    if (v5 > v6)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else if (*(_QWORD *)this < *(_QWORD *)a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return *(_QWORD *)this > *(_QWORD *)a2;
  }
}

uint64_t llvm::APInt::tcCompare(llvm::APInt *this, const unint64_t *a2, const unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = a3;
  do
  {
    if (!(v3 * 8))
      return 0;
    v4 = *(_QWORD *)((char *)this + v3 * 8 - 8);
    v5 = a2[--v3];
  }
  while (v4 == v5);
  if (v4 > v5)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t llvm::APInt::compareSigned(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 v7;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  const llvm::APInt *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    v9 = *(_QWORD *)(*(_QWORD *)this + 8 * ((v2 - 1) >> 6)) & (1 << (v2 - 1));
    v10 = *((_DWORD *)a2 + 2);
    v11 = v10 - 1;
    if (v10 >= 0x41)
      v12 = (const llvm::APInt *)(*(_QWORD *)a2 + 8 * (v11 >> 6));
    else
      v12 = a2;
    if ((v9 != 0) == ((*(_QWORD *)v12 >> v11) & 1))
    {
      v13 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v13)
          return 0;
        v14 = *(_QWORD *)(*(_QWORD *)this - 8 + v13);
        v15 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v13);
        v13 -= 8;
      }
      while (v14 == v15);
      if (v14 > v15)
        return 1;
      else
        return 0xFFFFFFFFLL;
    }
    else if (v9)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v3 = -v2;
    v4 = (uint64_t)(*(_QWORD *)this << v3) >> v3;
    v5 = (uint64_t)(*(_QWORD *)a2 << v3) >> v3;
    v6 = v4 < v5;
    v7 = v4 > v5;
    if (v6)
      return 0xFFFFFFFFLL;
    else
      return v7;
  }
}

_QWORD *llvm::APInt::setBitsSlowCase(_QWORD *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a2 >> 6;
  v4 = a3 >> 6;
  v5 = -1 << a2;
  if ((a3 & 0x3F) != 0)
  {
    v6 = 0xFFFFFFFFFFFFFFFFLL >> -(a3 & 0x3F);
    if ((_DWORD)v4 == v3)
      v5 &= v6;
    else
      *(_QWORD *)(*this + 8 * (a3 >> 6)) |= v6;
  }
  *(_QWORD *)(*this + 8 * (a2 >> 6)) |= v5;
  v7 = v3 + 1;
  if (v7 < v4)
  {
    do
      *(_QWORD *)(*this + 8 * v7++) = -1;
    while (v4 != v7);
  }
  return this;
}

uint64_t llvm::APInt::flipAllBitsSlowCase(uint64_t this)
{
  uint64_t v1;
  int8x16_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int8x16_t *v6;
  unint64_t v7;
  int8x16_t v8;
  unint64_t v9;
  uint64_t *v10;

  v1 = *(unsigned int *)(this + 8);
  if (!(_DWORD)v1)
  {
    v5 = 0;
LABEL_5:
    *(_QWORD *)this &= v5;
    return this;
  }
  v2 = *(int8x16_t **)this;
  v3 = (unint64_t)(v1 + 63) >> 6;
  if (v1 < 0xC1)
  {
    v4 = 0;
LABEL_9:
    v9 = v3 - v4;
    v10 = &v2->i64[v4];
    do
    {
      *v10 = ~*v10;
      ++v10;
      --v9;
    }
    while (v9);
    goto LABEL_11;
  }
  v4 = ((unint64_t)(v1 + 63) >> 6) & 0x7FFFFFC;
  v6 = v2 + 1;
  v7 = v4;
  do
  {
    v8 = vmvnq_s8(*v6);
    v6[-1] = vmvnq_s8(v6[-1]);
    *v6 = v8;
    v6 += 2;
    v7 -= 4;
  }
  while (v7);
  if (v3 != v4)
    goto LABEL_9;
LABEL_11:
  v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
  if (v1 < 0x41)
    goto LABEL_5;
  this = *(_QWORD *)this + 8 * (v3 - 1);
  *(_QWORD *)this &= v5;
  return this;
}

void llvm::APInt::zext(const void **this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  const void **v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;

  v4 = this;
  if (a2 > 0x40)
  {
    v8 = *((unsigned int *)this + 2);
    if ((_DWORD)v8 == a2)
    {
      *(_DWORD *)(a3 + 8) = a2;
      v9 = (((unint64_t)a2 + 63) >> 3) & 0x3FFFFFF8;
      v10 = operator new[](v9);
      *(_QWORD *)a3 = v10;
      memcpy(v10, *v4, v9);
    }
    else
    {
      v11 = ((unint64_t)a2 + 63) >> 6;
      v12 = (char *)operator new[](8 * v11);
      v13 = v12;
      *(_DWORD *)(a3 + 8) = a2;
      *(_QWORD *)a3 = v12;
      if (v8 >= 0x41)
        v4 = (const void **)*v4;
      v14 = (unint64_t)(v8 + 63) >> 6;
      memcpy(v12, v4, 8 * v14);
      bzero(&v13[8 * v14], (8 * (v11 - v14)));
    }
  }
  else
  {
    v6 = (unint64_t)*this;
    *(_DWORD *)(a3 + 8) = a2;
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v7 = 0;
    *(_QWORD *)a3 = v6 & v7;
  }
}

void llvm::APInt::extractBits(unint64_t *__sz@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  void **v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;

  v7 = *((unsigned int *)__sz + 2);
  if (v7 <= 0x40)
  {
    v8 = *__sz >> a3;
    *(_DWORD *)(a4 + 8) = a2;
    if (a2 <= 0x40)
    {
LABEL_3:
      v9 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      if (!a2)
        v9 = 0;
      *(_QWORD *)a4 = v8 & v9;
      return;
    }
LABEL_8:
    v14 = ((unint64_t)a2 + 63) >> 6;
    v15 = operator new[](8 * v14);
    bzero(v15, 8 * v14);
    *(_QWORD *)a4 = v15;
    *v15 = v8;
    v15[(v14 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    return;
  }
  v10 = a3 & 0x3F;
  v11 = a3 >> 6;
  v12 = (a2 + a3 - 1) >> 6;
  v13 = v12 - v11;
  if (v12 == (_DWORD)v11)
  {
    v8 = *(_QWORD *)(*__sz + 8 * v11) >> v10;
    *(_DWORD *)(a4 + 8) = a2;
    if (a2 <= 0x40)
      goto LABEL_3;
    goto LABEL_8;
  }
  if ((a3 & 0x3F) != 0)
  {
    v16 = a2 + 63;
    v17 = v16 >> 6;
    if (a2 >= 0x41)
    {
      v18 = (uint64_t *)operator new[](8 * v17);
      bzero(v18, 8 * v17);
      *v18 = 0;
      v18[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
      v33 = (unint64_t)v18;
      if (!a2)
        goto LABEL_23;
    }
    else
    {
      v18 = (uint64_t *)&v33;
      v33 = 0;
      if (!a2)
        goto LABEL_23;
    }
    v24 = *__sz;
    v25 = v16 >> 6;
    do
    {
      if (v11 + 1 < (unint64_t)(v7 + 63) >> 6)
        v26 = *(_QWORD *)(v24 + 8 * v11 + 8);
      else
        v26 = 0;
      *v18++ = (v26 << (64 - v10)) | (*(_QWORD *)(v24 + 8 * v11++) >> v10);
      --v25;
    }
    while (v25);
LABEL_23:
    v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (a2 > 0x40)
    {
      v29 = (void *)v33;
      *(_QWORD *)(v33 + 8 * (v17 - 1)) &= v27;
      *(_DWORD *)(a4 + 8) = a2;
      v30 = operator new[]((v16 >> 3) & 0x3FFFFFF8);
      *(_QWORD *)a4 = v30;
      memcpy(v30, v29, (v16 >> 3) & 0x3FFFFFF8);
      operator delete[](v29);
    }
    else
    {
      if (!a2)
        v27 = 0;
      v28 = v33 & v27;
      *(_DWORD *)(a4 + 8) = a2;
      *(_QWORD *)a4 = v28;
    }
    return;
  }
  v19 = (void **)(*__sz + 8 * v11);
  *(_DWORD *)(a4 + 8) = a2;
  if (a2 > 0x40)
  {
    v31 = ((unint64_t)a2 + 63) >> 6;
    v20 = (char *)operator new[](8 * v31);
    bzero(v20, 8 * v31);
    if (v31 >= v13 + 1)
      v32 = v13 + 1;
    else
      v32 = v31;
    memcpy(v20, v19, (8 * v32));
    v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    v23 = (unint64_t *)&v20[8 * (v31 - 1)];
    v22 = *v23;
  }
  else
  {
    v20 = (char *)*v19;
    v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v21 = 0;
    v22 = (unint64_t)*v19;
    v23 = (unint64_t *)a4;
  }
  *(_QWORD *)a4 = v20;
  *v23 = v21 & v22;
}

unint64_t llvm::hash_value(llvm *this, const llvm::APInt *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  char *v5;
  unint64_t v6;
  uint64_t *v7;
  unsigned __int8 v8;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    v6 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)this, *(_QWORD *)this + (((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8));
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
    if ((v8 & 1) == 0)
    {
      v14 = v6;
      v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
      v12 = v11;
      v6 = v14;
      if (v12)
      {
        v13 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v13 = 0xFF51AFD7ED558CCDLL;
        llvm::hashing::detail::get_execution_seed(void)::seed = v13;
        v7 = &mlir::detail::TypeIDResolver<std::complex<int>,void>::resolveTypeID(void)::id;
        v6 = v14;
      }
    }
    v23 = v7[19];
    LODWORD(v15) = *((_DWORD *)this + 2);
    v5 = (char *)((unint64_t)&v15 | 0xC);
    *(_QWORD *)((char *)&v15 + 4) = v6;
  }
  else
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    if ((v4 & 1) == 0
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
    }
    v23 = llvm::hashing::detail::get_execution_seed(void)::seed;
    LODWORD(v15) = *((_DWORD *)this + 2);
    v5 = (char *)((unint64_t)&v15 | 0xC);
    *(_QWORD *)((char *)&v15 + 4) = *(_QWORD *)this;
  }
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v15, 0, v5, (char *)&v19);
}

unint64_t llvm::DenseMapInfo<llvm::APInt,void>::getHashValue(llvm *a1, const llvm::APInt *a2)
{
  return llvm::hash_value(a1, a2);
}

void llvm::APInt::getHiBits(const void **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;

  v6 = *((unsigned int *)this + 2);
  v7 = v6 - a2;
  *(_DWORD *)(a3 + 8) = v6;
  if (v6 > 0x40)
  {
    v8 = v6 + 63;
    v9 = operator new[](((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    *(_QWORD *)a3 = v9;
    memcpy(v9, *this, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    if ((_DWORD)v6 != a2)
    {
      v10 = v8 >> 6;
      if (v7 >> 6 >= (v8 >> 6))
        v11 = v8 >> 6;
      else
        v11 = v7 >> 6;
      v12 = (v10 - v11);
      v13 = v7 & 0x3F;
      if ((v7 & 0x3F) != 0)
      {
        if (v7 >> 6 < v10)
        {
          v14 = v9[v11] >> v13;
          *v9 = v14;
          if ((_DWORD)v12 != 1)
          {
            v15 = 1 - v12;
            v16 = v9 + 1;
            v17 = v11 + 1;
            do
            {
              v18 = v17;
              *(v16 - 1) = (v9[v18] << (64 - v13)) | v14;
              v14 = v9[v18] >> v13;
              *v16++ = v14;
              ++v17;
            }
            while (!__CFADD__(v15++, 1));
          }
        }
      }
      else
      {
        memmove(v9, &v9[v11], (8 * v12));
      }
      bzero(&v9[v12], (8 * v11));
    }
  }
  else if (a2)
  {
    *(_QWORD *)a3 = (unint64_t)*this >> v7;
  }
  else
  {
    *(_QWORD *)a3 = 0;
  }
}

void llvm::APInt::getLoBits(llvm::APInt *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int8x16_t *v15;
  int8x16_t *v16;
  unint64_t v17;
  int8x16_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;

  v6 = *((unsigned int *)this + 2);
  *(_DWORD *)(a3 + 8) = v6;
  if (v6 >= 0x41)
  {
    v9 = (unint64_t)(v6 + 63) >> 6;
    v8 = operator new[](8 * v9);
    bzero(v8, 8 * v9);
    *v8 = 0;
    v8[(v9 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    v7 = v8;
    *(_QWORD *)a3 = v8;
    if (!a2)
      goto LABEL_11;
  }
  else
  {
    v7 = 0;
    v8 = (_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    if (!a2)
      goto LABEL_11;
  }
  if (a2 > 0x40)
  {
    if ((a2 & 0x3F) != 0)
      v7[a2 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(a2 & 0x3F);
    *v7 = -1;
    if (a2 >= 0x80)
      memset(v7 + 1, 255, 8 * (a2 >> 6) - 8);
  }
  else
  {
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  }
LABEL_11:
  if (v6 <= 0x40)
  {
    *(_QWORD *)a3 &= *(_QWORD *)this;
    return;
  }
  v10 = *(_QWORD *)a3;
  v11 = *(_QWORD *)this;
  v12 = (unint64_t)(v6 + 63) >> 6;
  if (v6 < 0x141 || (v10 < v11 + 8 * v12 ? (v13 = v11 >= v10 + 8 * v12) : (v13 = 1), !v13))
  {
    v14 = 0;
LABEL_24:
    v19 = v12 - v14;
    v20 = 8 * v14;
    v21 = (_QWORD *)(v10 + v20);
    v22 = (uint64_t *)(v11 + v20);
    do
    {
      v23 = *v22++;
      *v21++ &= v23;
      --v19;
    }
    while (v19);
    return;
  }
  v14 = ((unint64_t)(v6 + 63) >> 6) & 0x7FFFFFC;
  v15 = (int8x16_t *)(v11 + 16);
  v16 = (int8x16_t *)(v10 + 16);
  v17 = v14;
  do
  {
    v18 = vandq_s8(*v16, *v15);
    v16[-1] = vandq_s8(v16[-1], v15[-1]);
    *v16 = v18;
    v15 += 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v12 != v14)
    goto LABEL_24;
}

uint64_t llvm::APInt::countLeadingZerosSlowCase(llvm::APInt *this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v10;
  int v11;

  v1 = *((unsigned int *)this + 2);
  v2 = (unint64_t)(v1 + 63) >> 6;
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (_DWORD)v2 << 6;
    v5 = v2 + 1;
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)this + 8 * (v5 - 2));
      if (v6)
        break;
      v3 += 64;
      if (--v5 <= 1)
      {
        if ((v1 & 0x3F) != 0)
          v7 = v1 | 0xFFFFFFC0;
        else
          v7 = 0;
        return (v4 + v7);
      }
    }
    v10 = __clz(v6) + v3;
    if ((v1 & 0x3F) != 0)
      v11 = v1 | 0xFFFFFFC0;
    else
      v11 = 0;
    return (v10 + v11);
  }
  else if ((v1 & 0x3F) != 0)
  {
    return (v1 | 0xFFFFFFC0);
  }
  else
  {
    return 0;
  }
}

unint64_t llvm::APInt::countLeadingOnesSlowCase(llvm::APInt *this)
{
  uint64_t v1;
  char v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t result;
  int v8;
  uint64_t v9;

  v1 = *((unsigned int *)this + 2);
  v2 = 64 - (v1 & 0x3F);
  v3 = *((_DWORD *)this + 2) & 0x3F;
  if ((v1 & 0x3F) == 0)
  {
    v3 = 64;
    v2 = 0;
  }
  v4 = (unint64_t)(v1 + 63) >> 6;
  v5 = *(_QWORD *)this;
  result = __clz(~(*(_QWORD *)(*(_QWORD *)this + 8 * v4 - 8) << v2));
  if (v3 == (_DWORD)result && v4 >= 2)
  {
    result = (v3 + ((_DWORD)v4 << 6) - 64);
    v8 = v4 - 1;
    while (1)
    {
      v9 = *(_QWORD *)(v5 + 8 * --v8);
      if (v9 != -1)
        break;
      v3 += 64;
      if (v8 <= 0)
        return result;
    }
    return __clz(~v9) + v3;
  }
  return result;
}

uint64_t llvm::APInt::countTrailingZerosSlowCase(unint64_t **this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v8;

  v1 = *((unsigned int *)this + 2);
  v2 = (unint64_t)(v1 + 63) >> 6;
  if (!(_DWORD)v2)
    return 0;
  v3 = 0;
  v4 = *this;
  v5 = (_DWORD)v2 << 6;
  v6 = v2 << 6;
  while (!*v4)
  {
    ++v4;
    v3 += 64;
    if (v6 == v3)
    {
      if (v1 >= v5)
        return v5;
      else
        return v1;
    }
  }
  v8 = __clz(__rbit64(*v4)) + v3;
  if (v1 >= v8)
    return v8;
  else
    return v1;
}

uint64_t llvm::APInt::countTrailingOnesSlowCase(llvm::APInt *this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;

  v1 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = *(_QWORD **)this;
  result = ((_DWORD)v1 << 6);
  v5 = v1 << 6;
  while (*v3 == -1)
  {
    ++v3;
    v2 += 64;
    if (v5 == v2)
      return result;
  }
  return __clz(__rbit64(~*v3)) + v2;
}

uint64_t llvm::APInt::countPopulationSlowCase(int8x16_t **this)
{
  uint64_t v1;
  unint64_t v2;
  int8x16_t *v3;
  unint64_t v4;
  uint64_t result;
  int8x16_t *v6;
  int32x4_t v7;
  unint64_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x8_t *v14;
  unint64_t v15;
  int8x8_t v16;
  uint8x8_t v17;

  v1 = *((unsigned int *)this + 2);
  if (!(_DWORD)v1)
    return 0;
  v2 = (unint64_t)(v1 + 63) >> 6;
  v3 = *this;
  if (v1 < 0x1C1)
  {
    v4 = 0;
    LODWORD(result) = 0;
LABEL_8:
    v14 = (int8x8_t *)v3 + v4;
    v15 = v2 - v4;
    do
    {
      v16 = *v14++;
      v17 = (uint8x8_t)vcnt_s8(v16);
      v17.i16[0] = vaddlv_u8(v17);
      result = (result + v17.i32[0]);
      --v15;
    }
    while (v15);
    return result;
  }
  v4 = ((unint64_t)(v1 + 63) >> 6) & 0x7FFFFF8;
  v6 = v3 + 2;
  v7 = 0uLL;
  v8 = v4;
  v9 = 0uLL;
  do
  {
    v10 = v6[-2];
    v11 = v6[-1];
    v12 = *v6;
    v13 = v6[1];
    v6 += 4;
    v7 = vaddq_s32(v7, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v10)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v11))))));
    v9 = vaddq_s32(v9, vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v12)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v13))))));
    v8 -= 8;
  }
  while (v8);
  result = vaddvq_s32(vaddq_s32(v9, v7));
  if (v2 != v4)
    goto LABEL_8;
  return result;
}

void llvm::APInt::byteSwap(llvm::APInt *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  int8x16_t *v17;
  unint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;

  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4 == 32)
  {
    v5 = bswap32(*(_DWORD *)this);
    v6 = 32;
    goto LABEL_5;
  }
  if ((_DWORD)v4 == 16)
  {
    v5 = bswap32(*(unsigned __int16 *)this) >> 16;
    v6 = 16;
LABEL_5:
    *(_DWORD *)(a2 + 8) = v6;
    *(_QWORD *)a2 = v5;
    return;
  }
  if (v4 <= 0x40)
  {
    v7 = bswap64(*(_QWORD *)this) >> -(char)v4;
    *(_DWORD *)(a2 + 8) = v4;
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    if (!(_DWORD)v4)
      v8 = 0;
    *(_QWORD *)a2 = v7 & v8;
    return;
  }
  v9 = (unint64_t)(v4 + 63) >> 6;
  v10 = (_DWORD)v9 << 6;
  *(_DWORD *)(a2 + 8) = (_DWORD)v9 << 6;
  if ((_DWORD)v9 << 6 >= 0x41u)
  {
    v11 = (unint64_t)operator new[](8 * (((unint64_t)(v4 + 63) >> 6) & 0x3FFFFFF));
    bzero((void *)v11, 8 * (((unint64_t)(v4 + 63) >> 6) & 0x3FFFFFF));
    *(_QWORD *)v11 = 0;
    *(_QWORD *)a2 = v11;
    v12 = *(_QWORD *)this;
    if (v4 >= 0x441)
      goto LABEL_15;
LABEL_24:
    v15 = 0;
LABEL_25:
    v21 = ~v15 + v9;
    v22 = (_QWORD *)(v11 + 8 * v15);
    do
      *v22++ = bswap64(*(_QWORD *)(v12 + 8 * v21--));
    while (v21 != -1);
    goto LABEL_27;
  }
  v11 = 0;
  *(_QWORD *)a2 = 0;
  v12 = *(_QWORD *)this;
  if (v4 < 0x441)
    goto LABEL_24;
LABEL_15:
  v13 = ((8 * v9 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8;
  v14 = v11 >= v12 + v13 || v12 + v13 - 8 * v9 >= v11 + 8 * v9;
  if (!v14)
    goto LABEL_24;
  v15 = ((unint64_t)(v4 + 63) >> 6) & 0x7FFFFFC;
  v16 = v9 - 1;
  v17 = (int8x16_t *)(v11 + 16);
  v18 = v15;
  do
  {
    v19 = v12 + 8 * v16;
    v20 = vrev64q_s8(vextq_s8(*(int8x16_t *)(v19 - 24), *(int8x16_t *)(v19 - 24), 8uLL));
    v17[-1] = vrev64q_s8(vextq_s8(*(int8x16_t *)(v19 - 8), *(int8x16_t *)(v19 - 8), 8uLL));
    *v17 = v20;
    v16 -= 4;
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  if (v9 != v15)
    goto LABEL_25;
LABEL_27:
  v23 = v10 - v4;
  if (v10 != (_DWORD)v4)
  {
    if (v10 > 0x40)
    {
      v24 = v9 & 0x3FFFFFF;
      v25 = v23 >> 6;
      if (v23 >> 6 >= (v9 & 0x3FFFFFF))
        v26 = v9 & 0x3FFFFFF;
      else
        v26 = v23 >> 6;
      v27 = v24 - v26;
      v28 = v23 & 0x3F;
      if (v28)
      {
        if (v25 < v24)
        {
          v29 = *(_QWORD *)(v11 + 8 * v26) >> v28;
          *(_QWORD *)v11 = v29;
          if ((_DWORD)v27 != 1)
          {
            v30 = 1 - v27;
            v31 = (_QWORD *)(v11 + 8);
            v32 = v26 + 1;
            do
            {
              v33 = 8 * v32;
              *(v31 - 1) = (*(_QWORD *)(v11 + v33) << (64 - v28)) | v29;
              v29 = *(_QWORD *)(v11 + v33) >> v28;
              *v31++ = v29;
              ++v32;
              v14 = __CFADD__(v30++, 1);
            }
            while (!v14);
          }
        }
      }
      else
      {
        memmove((void *)v11, (const void *)(v11 + 8 * v26), (8 * v27));
      }
      bzero((void *)(v11 + 8 * v27), 8 * v26);
    }
    else
    {
      *(_QWORD *)a2 = v11 >> v23;
    }
    *(_DWORD *)(a2 + 8) = v4;
  }
}

void llvm::APIntOps::GreatestCommonDivisor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t v62;
  size_t v63;
  void *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BOOL4 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _BOOL4 v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  uint64_t v120;

  v6 = (_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 8);
  if (v7 > 0x40)
  {
    v8 = *(_QWORD *)a1;
    v11 = v7 + 63;
    v9 = *(_QWORD *)a2;
    if (!memcmp(*(const void **)a1, *(const void **)a2, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_25;
    v12 = 0;
    v13 = (v11 >> 6) + 1;
    while (1)
    {
      v14 = *(_QWORD *)(v8 + 8 * (v13 - 2));
      if (v14)
        break;
      v12 += 64;
      if ((unint64_t)--v13 <= 1)
      {
        v15 = v7 | 0xFFFFFFC0;
        if ((v7 & 0x3F) == 0)
          v15 = 0;
        if (((v11 >> 6) << 6) + v15 != (_DWORD)v7)
          goto LABEL_4;
        goto LABEL_14;
      }
    }
    v16 = __clz(v14) + v12;
    v17 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0)
      v17 = 0;
    if (v16 + v17 != (_DWORD)v7)
      goto LABEL_4;
    goto LABEL_14;
  }
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    goto LABEL_25;
  if (!v8)
  {
LABEL_14:
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
    v8 = v9;
    v6 = (_DWORD *)(a2 + 8);
    goto LABEL_183;
  }
LABEL_4:
  v10 = *(unsigned int *)(a2 + 8);
  if (v10 <= 0x40)
  {
    if (!v9)
      goto LABEL_25;
    goto LABEL_29;
  }
  v18 = 0;
  v19 = (unint64_t)(v10 + 63) >> 6;
  v20 = (_DWORD)v19 << 6;
  v21 = v19 + 1;
  while (1)
  {
    v22 = *(_QWORD *)(v9 + 8 * (v21 - 2));
    if (v22)
      break;
    v18 += 64;
    if (--v21 <= 1)
    {
      v23 = v10 | 0xFFFFFFC0;
      if ((v10 & 0x3F) == 0)
        v23 = 0;
      if (v20 + v23 == (_DWORD)v10)
        goto LABEL_25;
LABEL_29:
      if (v7 <= 0x40)
      {
        v26 = __clz(__rbit64(v8));
        if (v7 >= v26)
          v27 = v26;
        else
          v27 = v7;
        if (v10 > 0x40)
          goto LABEL_34;
LABEL_51:
        v40 = __clz(__rbit64(v9));
        if (v10 >= v40)
          v33 = v40;
        else
          v33 = *(_DWORD *)(a2 + 8);
        v34 = v27 - v33;
        if (v27 <= v33)
          goto LABEL_55;
LABEL_41:
        v27 = v33;
        if (v7 <= 0x40)
        {
          if ((_DWORD)v7 == v34)
            *(_QWORD *)a1 = 0;
          else
            *(_QWORD *)a1 = v8 >> v34;
          goto LABEL_98;
        }
        v44 = (unint64_t)(v7 + 63) >> 6;
        if (v34 >> 6 >= v44)
          v45 = (unint64_t)(v7 + 63) >> 6;
        else
          v45 = v34 >> 6;
        v46 = v44 - v45;
        v47 = v34 & 0x3F;
        if ((v34 & 0x3F) != 0)
        {
          if (v34 >> 6 < v44)
          {
            v48 = *(_QWORD *)(v8 + 8 * v45) >> v47;
            *(_QWORD *)v8 = v48;
            if ((_DWORD)v46 != 1)
            {
              v49 = 1 - v46;
              v50 = (_QWORD *)(v8 + 8);
              v51 = v45 + 1;
              do
              {
                v52 = 8 * v51;
                *(v50 - 1) = (*(_QWORD *)(v8 + v52) << (64 - v47)) | v48;
                v48 = *(_QWORD *)(v8 + v52) >> v47;
                *v50++ = v48;
                ++v51;
                v53 = __CFADD__(v49++, 1);
              }
              while (!v53);
            }
          }
        }
        else
        {
          memmove((void *)v8, (const void *)(v8 + 8 * v45), (8 * v46));
        }
        v63 = 8 * v45;
        v64 = (void *)(v8 + 8 * v46);
LABEL_95:
        bzero(v64, v63);
        goto LABEL_98;
      }
      v35 = 0;
      v36 = (unint64_t)(v7 + 63) >> 6;
      v37 = (_DWORD)v36 << 6;
      v38 = v36 << 6;
      v39 = (unint64_t *)v8;
      do
      {
        if (*v39)
        {
          v43 = __clz(__rbit64(*v39)) + v35;
          if (v7 >= v43)
            v27 = v43;
          else
            v27 = v7;
          if (v10 <= 0x40)
            goto LABEL_51;
          goto LABEL_34;
        }
        ++v39;
        v35 += 64;
      }
      while (v38 != v35);
      if (v7 >= v37)
        v27 = v37;
      else
        v27 = v7;
      if (v10 <= 0x40)
        goto LABEL_51;
LABEL_34:
      v28 = 0;
      v29 = (unint64_t)(v10 + 63) >> 6;
      v30 = (_DWORD)v29 << 6;
      v31 = v29 << 6;
      v32 = (unint64_t *)v9;
      do
      {
        if (*v32)
        {
          v42 = __clz(__rbit64(*v32)) + v28;
          if (v10 >= v42)
            v33 = v42;
          else
            v33 = *(_DWORD *)(a2 + 8);
          v34 = v27 - v33;
          if (v27 <= v33)
            goto LABEL_55;
          goto LABEL_41;
        }
        ++v32;
        v28 += 64;
      }
      while (v31 != v28);
      if (v10 >= v30)
        v33 = v30;
      else
        v33 = *(_DWORD *)(a2 + 8);
      v34 = v27 - v33;
      if (v27 > v33)
        goto LABEL_41;
LABEL_55:
      v41 = v33 - v27;
      if (v33 <= v27)
        goto LABEL_98;
      if (v10 > 0x40)
      {
        v54 = (unint64_t)(v10 + 63) >> 6;
        if (v41 >> 6 >= v54)
          v55 = (unint64_t)(v10 + 63) >> 6;
        else
          v55 = v41 >> 6;
        v56 = v54 - v55;
        v57 = v41 & 0x3F;
        if ((v41 & 0x3F) != 0)
        {
          if (v41 >> 6 < v54)
          {
            v58 = *(_QWORD *)(v9 + 8 * v55) >> v57;
            *(_QWORD *)v9 = v58;
            if ((_DWORD)v56 != 1)
            {
              v59 = 1 - v56;
              v60 = (_QWORD *)(v9 + 8);
              v61 = v55 + 1;
              do
              {
                v62 = 8 * v61;
                *(v60 - 1) = (*(_QWORD *)(v9 + v62) << (64 - v57)) | v58;
                v58 = *(_QWORD *)(v9 + v62) >> v57;
                *v60++ = v58;
                ++v61;
                v53 = __CFADD__(v59++, 1);
              }
              while (!v53);
            }
          }
        }
        else
        {
          memmove((void *)v9, (const void *)(v9 + 8 * v55), (8 * v56));
        }
        v63 = 8 * v55;
        v64 = (void *)(v9 + 8 * v56);
        goto LABEL_95;
      }
      if ((_DWORD)v10 == v41)
        *(_QWORD *)a2 = 0;
      else
        *(_QWORD *)a2 = v9 >> v41;
LABEL_98:
      while (2)
      {
        while (1)
        {
          v65 = *v6;
          if (v65 > 0x40)
            break;
          v8 = *(_QWORD *)a1;
          v66 = *(unint64_t **)a2;
          if (*(_QWORD *)a1 == *(_QWORD *)a2)
            goto LABEL_182;
          if (*(_QWORD *)a1 <= *(_QWORD *)a2)
            goto LABEL_116;
          *(_QWORD *)a1 -= *(_QWORD *)a2;
          if ((_DWORD)v65)
          {
LABEL_102:
            v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v65;
            if (v65 >= 0x41)
              v68 = (_QWORD *)(*(_QWORD *)a1
                             + 8 * ((((unint64_t)v65 + 63) >> 6) - 1));
            else
              v68 = (_QWORD *)a1;
          }
          else
          {
LABEL_115:
            v67 = 0;
            v68 = (_QWORD *)a1;
          }
          *v68 &= v67;
          v96 = *(unsigned int *)(a1 + 8);
          if (v96 > 0x40)
          {
            v99 = 0;
            v100 = 0;
            v101 = (unint64_t)(v96 + 63) >> 6;
            v94 = *(_QWORD **)a1;
            while (!v94[v100])
            {
              ++v100;
              v99 -= 64;
              if (v101 == v100)
              {
                if (v96 >= (_DWORD)v101 << 6)
                  LODWORD(v96) = (_DWORD)v101 << 6;
                v102 = v96 - v27;
                if (!v102)
                  goto LABEL_98;
                goto LABEL_168;
              }
            }
            v113 = __clz(__rbit64(v94[v100])) - v99;
            if (v96 >= v113)
              LODWORD(v96) = v113;
            v102 = v96 - v27;
            if (!v102)
              continue;
LABEL_168:
            v114 = v102 >> 6;
            if (v102 >> 6 >= v101)
              v105 = v101;
            else
              v105 = v102 >> 6;
            v106 = (v101 - v105);
            v115 = v102 & 0x3F;
            if (!v115)
              goto LABEL_178;
            if (v114 < v101)
            {
              v116 = v94[v105] >> v115;
              *v94 = v116;
              if ((_DWORD)v106 != 1)
              {
                v117 = 1 - v106;
                v118 = v94 + 1;
                v119 = v105 + 1;
                do
                {
                  v120 = v119;
                  *(v118 - 1) = (v94[v120] << (64 - v115)) | v116;
                  v116 = v94[v120] >> v115;
                  *v118++ = v116;
                  ++v119;
                  v53 = __CFADD__(v117++, 1);
                }
                while (!v53);
              }
            }
LABEL_179:
            bzero(&v94[v106], (8 * v105));
            continue;
          }
          v97 = __clz(__rbit64(*(_QWORD *)a1));
          if (v96 < v97)
            v97 = *(_DWORD *)(a1 + 8);
          v98 = v97 - v27;
          if ((_DWORD)v96 == v98)
            *(_QWORD *)a1 = 0;
          else
            *(_QWORD *)a1 >>= v98;
        }
        v8 = *(_QWORD *)a1;
        v69 = v65 + 63;
        v66 = *(unint64_t **)a2;
        if (!memcmp(*(const void **)a1, *(const void **)a2, ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8))
        {
LABEL_182:
          *(_DWORD *)(a3 + 8) = v65;
          goto LABEL_183;
        }
        v70 = v69 >> 6;
        v71 = v69 >> 6;
        while (v71 * 8)
        {
          v72 = *(_QWORD *)(v8 + v71 * 8 - 8);
          v73 = v66[--v71];
          if (v72 != v73)
          {
            if (v72 <= v73)
              break;
            v74 = 0;
            do
            {
              v75 = *v66++;
              v76 = *(_QWORD *)v8 - v75;
              v77 = *(_QWORD *)v8 < v75;
              v78 = *(_QWORD *)v8 + ~v75;
              if (v74)
              {
                v74 = v78 >= *(_QWORD *)v8;
              }
              else
              {
                v78 = v76;
                v74 = v77;
              }
              *(_QWORD *)v8 = v78;
              v8 += 8;
              --v70;
            }
            while (v70);
            LODWORD(v65) = *v6;
            if (*v6)
              goto LABEL_102;
            goto LABEL_115;
          }
        }
LABEL_116:
        v79 = *(unsigned int *)(a2 + 8);
        if (v79 > 0x40)
        {
          v80 = 0;
          v81 = (unint64_t)(v79 + 63) >> 6;
          do
          {
            v82 = *(_QWORD *)v8;
            v8 += 8;
            v83 = *v66 - v82;
            v84 = *v66 < v82;
            v85 = *v66 + ~v82;
            if (v80)
            {
              v80 = v85 >= *v66;
            }
            else
            {
              v85 = v83;
              v80 = v84;
            }
            *v66++ = v85;
            --v81;
          }
          while (v81);
          LODWORD(v79) = *(_DWORD *)(a2 + 8);
        }
        else
        {
          *(_QWORD *)a2 = (char *)v66 - v8;
        }
        if ((_DWORD)v79)
        {
          v86 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v79;
          if (v79 >= 0x41)
          {
            v90 = (_QWORD *)(*(_QWORD *)a2 + 8 * ((((unint64_t)v79 + 63) >> 6) - 1));
            *v90 &= v86;
            v87 = *(unsigned int *)(a2 + 8);
            if (v87 > 0x40)
            {
LABEL_132:
              v91 = 0;
              v92 = 0;
              v93 = (unint64_t)(v87 + 63) >> 6;
              v94 = *(_QWORD **)a2;
              while (!v94[v92])
              {
                ++v92;
                v91 -= 64;
                if (v93 == v92)
                {
                  if (v87 >= (_DWORD)v93 << 6)
                    LODWORD(v87) = (_DWORD)v93 << 6;
                  v95 = v87 - v27;
                  if (!v95)
                    goto LABEL_98;
                  goto LABEL_155;
                }
              }
              v103 = __clz(__rbit64(v94[v92])) - v91;
              if (v87 >= v103)
                LODWORD(v87) = v103;
              v95 = v87 - v27;
              if (!v95)
                continue;
LABEL_155:
              v104 = v95 >> 6;
              if (v95 >> 6 >= v93)
                v105 = v93;
              else
                v105 = v95 >> 6;
              v106 = (v93 - v105);
              v107 = v95 & 0x3F;
              if (v107)
              {
                if (v104 < v93)
                {
                  v108 = v94[v105] >> v107;
                  *v94 = v108;
                  if ((_DWORD)v106 != 1)
                  {
                    v109 = 1 - v106;
                    v110 = v94 + 1;
                    v111 = v105 + 1;
                    do
                    {
                      v112 = v111;
                      *(v110 - 1) = (v94[v112] << (64 - v107)) | v108;
                      v108 = v94[v112] >> v107;
                      *v110++ = v108;
                      ++v111;
                      v53 = __CFADD__(v109++, 1);
                    }
                    while (!v53);
                  }
                }
              }
              else
              {
LABEL_178:
                memmove(v94, &v94[v105], (8 * v106));
              }
              goto LABEL_179;
            }
          }
          else
          {
LABEL_126:
            *(_QWORD *)a2 &= v86;
            v87 = *(unsigned int *)(a2 + 8);
            if (v87 > 0x40)
              goto LABEL_132;
          }
          v88 = __clz(__rbit64(*(_QWORD *)a2));
          if (v87 < v88)
            v88 = v87;
          v89 = v88 - v27;
          if ((_DWORD)v87 == v89)
            *(_QWORD *)a2 = 0;
          else
            *(_QWORD *)a2 >>= v89;
          continue;
        }
        break;
      }
      v86 = 0;
      goto LABEL_126;
    }
  }
  v24 = __clz(v22) + v18;
  v25 = v10 | 0xFFFFFFC0;
  if ((v10 & 0x3F) == 0)
    v25 = 0;
  if (v24 + v25 != (_DWORD)v10)
    goto LABEL_29;
LABEL_25:
  *(_DWORD *)(a3 + 8) = v7;
LABEL_183:
  *(_QWORD *)a3 = v8;
  *v6 = 0;
}

char *llvm::APInt::trunc@<X0>(char *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  const void **v4;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v4 = (const void **)this;
  v6 = *((_DWORD *)this + 2);
  if (a2 > 0x40)
  {
    if (v6 == a2)
    {
      *(_DWORD *)(a3 + 8) = a2;
      v9 = (((unint64_t)a2 + 63) >> 3) & 0x3FFFFFF8;
      v10 = operator new[](v9);
      *(_QWORD *)a3 = v10;
      return (char *)memcpy(v10, *v4, v9);
    }
    else
    {
      this = (char *)operator new[]((((unint64_t)a2 + 63) >> 3) & 0x3FFFFFF8);
      v11 = 0;
      *(_DWORD *)(a3 + 8) = a2;
      *(_QWORD *)a3 = this;
      v12 = a2 >> 6;
      v13 = (char *)*v4;
      if (a2 < 0x100)
        goto LABEL_15;
      if ((unint64_t)(this - v13) < 0x20)
        goto LABEL_15;
      v11 = v12 & 0x3FFFFFC;
      v14 = (__int128 *)(v13 + 16);
      v15 = this + 16;
      v16 = v11;
      do
      {
        v17 = *v14;
        *(v15 - 1) = *(v14 - 1);
        *v15 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v11 != v12)
      {
LABEL_15:
        v18 = &v13[8 * v11];
        v19 = &this[8 * v11];
        v20 = v12 - v11;
        do
        {
          v21 = *(_QWORD *)v18;
          v18 += 8;
          *(_QWORD *)v19 = v21;
          v19 += 8;
          --v20;
        }
        while (v20);
      }
      v22 = -a2 & 0x3F;
      if (v22)
        *(_QWORD *)&this[8 * v12] = *((_QWORD *)*v4 + v12) & (0xFFFFFFFFFFFFFFFFLL >> v22);
    }
  }
  else
  {
    if (v6 >= 0x41)
      v4 = *(const void ***)this;
    v7 = (unint64_t)*v4;
    *(_DWORD *)(a3 + 8) = a2;
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v8 = 0;
    *(_QWORD *)a3 = v7 & v8;
  }
  return this;
}

const void **llvm::APInt::sext@<X0>(const void **this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  const void **v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const void *v14;
  unint64_t v15;
  unsigned int v16;
  int v17;

  v4 = this;
  if (a2 > 0x40)
  {
    v8 = *((unsigned int *)this + 2);
    if ((_DWORD)v8 == a2)
    {
      *(_DWORD *)(a3 + 8) = a2;
      v9 = (((unint64_t)a2 + 63) >> 3) & 0x3FFFFFF8;
      v10 = operator new[](v9);
      *(_QWORD *)a3 = v10;
      return (const void **)memcpy(v10, *v4, v9);
    }
    else
    {
      v11 = ((unint64_t)a2 + 63) >> 6;
      v12 = operator new[](8 * v11);
      v13 = v12;
      *(_DWORD *)(a3 + 8) = a2;
      *(_QWORD *)a3 = v12;
      v14 = v4;
      if (v8 >= 0x41)
        v14 = *v4;
      v15 = (unint64_t)(v8 + 63) >> 6;
      memcpy(v12, v14, 8 * v15);
      v13[(v15 - 1)] = (uint64_t)(v13[(v15 - 1)] << -(char)v8) >> -(char)v8;
      v16 = v8 - 1;
      if (v8 >= 0x41)
        v4 = (const void **)((char *)*v4 + 8 * (v16 >> 6));
      if ((((unint64_t)*v4 >> v16) & 1) != 0)
        v17 = -1;
      else
        v17 = 0;
      this = (const void **)memset(&v13[v15], v17, (8 * (v11 - v15)));
      v13[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    }
  }
  else
  {
    v6 = (uint64_t)((_QWORD)*this << -*((_BYTE *)this + 8)) >> -*((_BYTE *)this + 8);
    *(_DWORD *)(a3 + 8) = a2;
    v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
    if (!a2)
      v7 = 0;
    *(_QWORD *)a3 = v6 & v7;
  }
  return this;
}

void llvm::APInt::zextOrTrunc(const void **this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  const void **v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  void *v12;

  v4 = this;
  v6 = *((unsigned int *)this + 2);
  if (v6 >= a2)
  {
    if (v6 <= a2)
    {
      *(_DWORD *)(a3 + 8) = v6;
      if (v6 > 0x40)
      {
        v12 = operator new[](((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
        *(_QWORD *)a3 = v12;
        memcpy(v12, *v4, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)a3 = *this;
      }
    }
    else
    {
      llvm::APInt::trunc((char *)this, a2, a3);
    }
  }
  else if (a2 > 0x40)
  {
    v8 = ((unint64_t)a2 + 63) >> 6;
    v9 = (char *)operator new[](8 * v8);
    v10 = v9;
    *(_DWORD *)(a3 + 8) = a2;
    *(_QWORD *)a3 = v9;
    if (v6 >= 0x41)
      v4 = (const void **)*v4;
    v11 = (unint64_t)(v6 + 63) >> 6;
    memcpy(v9, v4, 8 * v11);
    bzero(&v10[8 * v11], (8 * (v8 - v11)));
  }
  else
  {
    v7 = (unint64_t)*this;
    *(_DWORD *)(a3 + 8) = a2;
    *(_QWORD *)a3 = v7 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a2);
  }
}

char *llvm::APInt::sextOrTrunc@<X0>(char *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  const void **v3;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = (const void **)this;
  v5 = *((unsigned int *)this + 2);
  if (v5 < a2)
    return (char *)llvm::APInt::sext((const void **)this, a2, a3);
  if (v5 > a2)
    return llvm::APInt::trunc(this, a2, a3);
  *(_DWORD *)(a3 + 8) = v5;
  if (v5 > 0x40)
  {
    v6 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v7 = operator new[](v6);
    *(_QWORD *)a3 = v7;
    return (char *)memcpy(v7, *v3, v6);
  }
  else
  {
    *(_QWORD *)a3 = *(_QWORD *)this;
  }
  return this;
}

unsigned int *llvm::APInt::ashrInPlace(unsigned int *this, unint64_t **a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unint64_t *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;

  v2 = this[2];
  v3 = *((unsigned int *)a2 + 2);
  if (v3 < 0x41)
  {
    v4 = *a2;
    v5 = this[2];
    if ((unint64_t)v4 > v2)
      goto LABEL_14;
LABEL_13:
    v5 = v4;
    goto LABEL_14;
  }
  v6 = 0;
  v7 = (unint64_t)(v3 + 63) >> 6;
  v8 = *a2;
  v9 = (_DWORD)v7 << 6;
  v10 = v7 + 1;
  while (1)
  {
    v11 = v8[(v10 - 2)];
    if (v11)
      break;
    v6 += 64;
    if (--v10 <= 1)
      goto LABEL_9;
  }
  v9 = __clz(v11) + v6;
LABEL_9:
  v12 = v3 | 0xFFFFFFC0;
  if ((v3 & 0x3F) == 0)
    v12 = 0;
  v5 = this[2];
  if ((v3 - v12 - v9) <= 0x40)
  {
    v4 = (unint64_t *)*v8;
    v5 = this[2];
    if (*v8 <= v2)
      goto LABEL_13;
  }
LABEL_14:
  if (v2 > 0x40)
    return llvm::APInt::ashrSlowCase(this, v5);
  v13 = v5;
  if ((_DWORD)v2 == v5)
    v13 = 63;
  v14 = (uint64_t)(*(_QWORD *)this << -(char)v2) >> -(char)v2 >> v13;
  if ((_DWORD)v2)
    v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v2;
  else
    v15 = 0;
  *(_QWORD *)this = v14 & v15;
  return this;
}

unsigned int *llvm::APInt::ashrSlowCase(unsigned int *this, unsigned int a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  if (a2)
  {
    v2 = this;
    v3 = this[2];
    v4 = v3 - 1;
    v5 = this;
    if (v3 >= 0x41)
      v5 = (_QWORD *)(*(_QWORD *)this + 8 * (v4 >> 6));
    v6 = *v5 & (1 << v4);
    v7 = a2 >> 6;
    v8 = (unint64_t)(v3 + 63) >> 6;
    v9 = v8 - (a2 >> 6);
    if ((_DWORD)v8 != a2 >> 6)
    {
      v10 = (v8 - 1);
      *(_QWORD *)(*(_QWORD *)this + 8 * v10) = (uint64_t)(*(_QWORD *)(*(_QWORD *)this
                                                                                   + 8 * v10) << -(char)v3) >> -(char)v3;
      v11 = a2 & 0x3F;
      if ((a2 & 0x3F) != 0)
      {
        v12 = v9 - 1;
        if (v9 == 1)
        {
          v12 = 0;
        }
        else
        {
          v13 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)this + 8 * v13) = (*(_QWORD *)(*(_QWORD *)this
                                                                + 8 * ((a2 >> 6) + v13 + 1)) << (64 - v11)) | (*(_QWORD *)(*(_QWORD *)this + 8 * ((a2 >> 6) + v13)) >> v11);
            ++v13;
          }
          while (v12 != v13);
        }
        v14 = 8 * v12;
        *(_QWORD *)(*(_QWORD *)this + v14) = *(_QWORD *)(*(_QWORD *)this + 8 * v10) >> v11;
        *(_QWORD *)(*(_QWORD *)this + v14) = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + v14) << v11) >> v11;
      }
      else
      {
        memmove(*(void **)this, (const void *)(*(_QWORD *)this + 8 * v7), 8 * v9);
      }
    }
    if (v6)
      v15 = -1;
    else
      v15 = 0;
    this = (unsigned int *)memset((void *)(*(_QWORD *)v2 + 8 * v9), v15, 8 * v7);
    v16 = v2[2];
    if ((_DWORD)v16)
    {
      v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
      if (v16 >= 0x41)
        v2 = (unsigned int *)(*(_QWORD *)v2 + 8 * (((unint64_t)(v16 + 63) >> 6) - 1));
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)v2 &= v17;
  }
  return this;
}

void llvm::APInt::lshrInPlace(llvm::APInt *this, const llvm::APInt *a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;

  v2 = *((unsigned int *)this + 2);
  v3 = *((unsigned int *)a2 + 2);
  if (v3 < 0x41)
  {
    v4 = *(_QWORD **)a2;
    v5 = *((_DWORD *)this + 2);
    if (*(_QWORD *)a2 > v2)
      goto LABEL_14;
LABEL_13:
    v5 = v4;
    goto LABEL_14;
  }
  v6 = 0;
  v7 = (unint64_t)(v3 + 63) >> 6;
  v8 = *(_QWORD **)a2;
  v9 = (_DWORD)v7 << 6;
  v10 = v7 + 1;
  while (1)
  {
    v11 = v8[(v10 - 2)];
    if (v11)
      break;
    v6 += 64;
    if (--v10 <= 1)
      goto LABEL_9;
  }
  v9 = __clz(v11) + v6;
LABEL_9:
  v12 = v3 | 0xFFFFFFC0;
  if ((v3 & 0x3F) == 0)
    v12 = 0;
  v13 = v3 - v12 - v9;
  v5 = *((_DWORD *)this + 2);
  if (v13 <= 0x40)
  {
    v4 = (_QWORD *)*v8;
    v5 = *((_DWORD *)this + 2);
    if ((unint64_t)v4 <= v2)
      goto LABEL_13;
  }
LABEL_14:
  if (v2 > 0x40)
  {
    if (v5)
    {
      v14 = *(_QWORD **)this;
      v15 = (v2 + 63) >> 6;
      if (v5 >> 6 >= v15)
        v16 = v15;
      else
        v16 = v5 >> 6;
      v17 = (v15 - v16);
      v18 = v5 & 0x3F;
      if ((v5 & 0x3F) != 0)
      {
        if (v5 >> 6 < v15)
        {
          v19 = v14[v16] >> v5;
          *v14 = v19;
          if ((_DWORD)v17 != 1)
          {
            v20 = v5 & 0x3F;
            v21 = 64 - v18;
            v22 = 1 - v17;
            v23 = v14 + 1;
            v24 = v16 + 1;
            do
            {
              v25 = v24;
              *(v23 - 1) = (v14[v25] << v21) | v19;
              v19 = v14[v25] >> v20;
              *v23++ = v19;
              ++v24;
            }
            while (!__CFADD__(v22++, 1));
          }
        }
        bzero(&v14[v17], (8 * v16));
      }
      else
      {
        memmove(*(void **)this, &v14[v16], (8 * v17));
        bzero(&v14[v17], (8 * v16));
      }
    }
  }
  else if ((_DWORD)v2 == v5)
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    *(_QWORD *)this >>= v5;
  }
}

void llvm::APInt::lshrSlowCase(void **this, unsigned int a2)
{
  _QWORD *v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v2 = *this;
    v3 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
    if (a2 >> 6 >= v3)
      v4 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
    else
      v4 = a2 >> 6;
    v5 = (v3 - v4);
    v6 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      if (a2 >> 6 < v3)
      {
        v7 = v2[v4] >> v6;
        *v2 = v7;
        if ((_DWORD)v5 != 1)
        {
          v8 = v4 + 1;
          v9 = v2 + 1;
          v10 = 1 - v5;
          do
          {
            v11 = v8;
            *(v9 - 1) = (v2[v11] << (64 - v6)) | v7;
            v7 = v2[v11] >> v6;
            *v9++ = v7;
            ++v8;
          }
          while (!__CFADD__(v10++, 1));
        }
      }
      bzero(&v2[v5], (8 * v4));
    }
    else
    {
      memmove(*this, &v2[v4], (8 * v5));
      bzero(&v2[v5], (8 * v4));
    }
  }
}

void llvm::APInt::tcShiftRight(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;

  if (a3)
  {
    if (a3 >> 6 >= a2)
      v4 = a2;
    else
      v4 = a3 >> 6;
    v5 = a2 - v4;
    v6 = a3 & 0x3F;
    if ((a3 & 0x3F) != 0)
    {
      if (a3 >> 6 < a2)
      {
        v7 = *((_QWORD *)this + v4) >> v6;
        *(_QWORD *)this = v7;
        if ((_DWORD)v5 != 1)
        {
          v8 = 1 - v5;
          v9 = v4 + 1;
          v10 = (_QWORD *)((char *)this + 8);
          do
          {
            v11 = 8 * v9;
            *(v10 - 1) = (*(_QWORD *)((char *)this + v11) << (64 - v6)) | v7;
            v7 = *(_QWORD *)((char *)this + v11) >> v6;
            *v10++ = v7;
            ++v9;
          }
          while (!__CFADD__(v8++, 1));
        }
      }
      bzero((char *)this + 8 * v5, 8 * v4);
    }
    else
    {
      memmove(this, (char *)this + 8 * v4, (8 * v5));
      bzero((char *)this + 8 * v5, 8 * v4);
    }
  }
}

uint64_t llvm::APInt::operator<<=(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;

  v2 = this;
  v3 = *(unsigned int *)(this + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if (v4 < 0x41)
  {
    v5 = *(unint64_t **)a2;
    v6 = *(_DWORD *)(this + 8);
    if ((unint64_t)v5 > v3)
      goto LABEL_14;
LABEL_13:
    v6 = v5;
    goto LABEL_14;
  }
  v7 = 0;
  v8 = (unint64_t)(v4 + 63) >> 6;
  v9 = *(unint64_t **)a2;
  v10 = (_DWORD)v8 << 6;
  v11 = v8 + 1;
  while (1)
  {
    v12 = v9[(v11 - 2)];
    if (v12)
      break;
    v7 += 64;
    if (--v11 <= 1)
      goto LABEL_9;
  }
  v10 = __clz(v12) + v7;
LABEL_9:
  v13 = v4 | 0xFFFFFFC0;
  if ((v4 & 0x3F) == 0)
    v13 = 0;
  v6 = *(_DWORD *)(this + 8);
  if ((v4 - v13 - v10) <= 0x40)
  {
    v5 = (unint64_t *)*v9;
    v6 = *(_DWORD *)(this + 8);
    if (*v9 <= v3)
      goto LABEL_13;
  }
LABEL_14:
  if (v3 > 0x40)
  {
    llvm::APInt::shlSlowCase((const void **)this, v6);
    return v2;
  }
  else
  {
    if ((_DWORD)v3 == v6)
      v14 = 0;
    else
      v14 = *(_QWORD *)this << v6;
    if ((_DWORD)v3)
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    else
      v15 = 0;
    *(_QWORD *)this = v14 & v15;
  }
  return this;
}

void llvm::APInt::shlSlowCase(const void **this, unsigned int a2)
{
  const void **v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unsigned int v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v2 = this;
  v3 = *((unsigned int *)this + 2);
  if (a2)
  {
    v4 = *this;
    v5 = (unint64_t)(v3 + 63) >> 6;
    if (a2 >> 6 >= v5)
      v6 = (unint64_t)(v3 + 63) >> 6;
    else
      v6 = a2 >> 6;
    v7 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      if (a2 >> 6 < v5)
      {
        v8 = v5 - 1;
        v9 = v4[(_DWORD)v5 - 1 - v6] << (a2 & 0x3F);
        v10 = &v4[(v5 - 1)];
        *v10 = v9;
        if ((int)v5 - 1 > v6)
        {
          v11 = &v4[(v5 - 1) - 1 + (uint64_t)-v6];
          v12 = &v4[(v5 - 2)];
          do
          {
            v13 = *v11--;
            *v10 = (v13 >> (64 - v7)) | v9;
            v9 = v4[v8 - v6 - 1] << v7;
            v10 = &v4[(v8 - 1)];
            *v12-- = v9;
            --v8;
          }
          while (v6 < v8);
        }
      }
    }
    else
    {
      memmove(&v4[v6], *this, 8 * (v5 - v6));
    }
    bzero(v4, 8 * v6);
    LODWORD(v3) = *((_DWORD *)v2 + 2);
  }
  if ((_DWORD)v3)
  {
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
    if (v3 >= 0x41)
      v2 = (const void **)((char *)*v2 + 8 * (((unint64_t)v3 + 63) >> 6) - 8);
  }
  else
  {
    v14 = 0;
  }
  *v2 = (const void *)((unint64_t)*v2 & v14);
}

void llvm::APInt::tcShiftLeft(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;

  if (a3)
  {
    if (a3 >> 6 >= a2)
      v4 = a2;
    else
      v4 = a3 >> 6;
    v5 = a3 & 0x3F;
    if ((a3 & 0x3F) != 0)
    {
      if (a3 >> 6 < a2)
      {
        v6 = a2 - 1;
        v7 = *((_QWORD *)this + v6 - v4) << v5;
        v8 = (uint64_t *)((char *)this + 8 * v6);
        *v8 = v7;
        if (v6 > v4)
        {
          v9 = (_QWORD *)((char *)this + 8 * ((_DWORD)a2 - 2));
          do
          {
            v10 = 8 * (v6 - v4 - 1);
            *v8 = (*(_QWORD *)((char *)this + v10) >> (64 - v5)) | v7;
            --v6;
            v7 = *(_QWORD *)((char *)this + v10) << v5;
            v8 = (uint64_t *)((char *)this + 8 * v6);
            *v9-- = v7;
          }
          while (v4 < v6);
        }
      }
      bzero(this, 8 * v4);
    }
    else
    {
      memmove((char *)this + 8 * v4, this, 8 * (a2 - v4));
      bzero(this, 8 * v4);
    }
  }
}

void llvm::APInt::udiv(llvm::APInt **this@<X0>, size_t __sz@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  llvm::APInt *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  const unint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  _QWORD *v30;
  const unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  _QWORD *v37;
  unint64_t *v38;

  v6 = *((unsigned int *)this + 2);
  if (v6 > 0x40)
  {
    v9 = 0;
    v10 = v6 + 63;
    v11 = (unint64_t)(v6 + 63) >> 6;
    v12 = *this;
    v13 = (_DWORD)v11 << 6;
    v14 = v11 + 1;
    while (1)
    {
      v15 = *((_QWORD *)v12 + (v14 - 2));
      if (v15)
        break;
      v9 += 64;
      if (--v14 <= 1)
        goto LABEL_10;
    }
    v13 = __clz(v15) + v9;
LABEL_10:
    v16 = v6 | 0xFFFFFFC0;
    if ((v6 & 0x3F) == 0)
      v16 = 0;
    v17 = (const unint64_t *)(((unint64_t)(v6 - v16 - v13) + 63) >> 6);
    v18 = *(unsigned int *)(__sz + 8);
    if (v18 > 0x40)
    {
      v24 = 0;
      v25 = (unint64_t)(v18 + 63) >> 6;
      v19 = *(_QWORD **)__sz;
      v26 = (_DWORD)v25 << 6;
      v27 = v25 + 1;
      while (1)
      {
        v28 = v19[(v27 - 2)];
        if (v28)
          break;
        v24 += 64;
        if (--v27 <= 1)
        {
          v29 = v18 | 0xFFFFFFC0;
          if ((v18 & 0x3F) == 0)
            v29 = 0;
          v20 = v26 + v29;
          if ((_DWORD)v17)
            goto LABEL_14;
          goto LABEL_22;
        }
      }
      v35 = __clz(v28) + v24;
      v36 = v18 | 0xFFFFFFC0;
      if ((v18 & 0x3F) == 0)
        v36 = 0;
      v20 = v35 + v36;
      if ((_DWORD)v17)
        goto LABEL_14;
    }
    else
    {
      v19 = *(_QWORD **)__sz;
      v20 = v18 + __clz(*(_QWORD *)__sz) - 64;
      if ((_DWORD)v17)
      {
LABEL_14:
        v21 = (v18 - v20);
        if ((_DWORD)v21 == 1)
        {
          *((_DWORD *)a3 + 2) = v6;
          v22 = (v10 >> 3) & 0x3FFFFFF8;
          v23 = operator new[](v22);
          *(_QWORD *)a3 = v23;
          memcpy(v23, v12, v22);
          return;
        }
        v31 = (const unint64_t *)((unint64_t)(v21 + 63) >> 6);
        if (v17 < v31)
        {
LABEL_35:
          *((_DWORD *)a3 + 2) = v6;
          v37 = operator new[](8 * v11);
          bzero(v37, 8 * v11);
          *(_QWORD *)a3 = v37;
          *v37 = 0;
        }
        else
        {
          v32 = v11;
          while (v32 * 8)
          {
            v33 = *(_QWORD *)((char *)v12 + v32 * 8 - 8);
            v34 = v19[--v32];
            if (v33 != v34)
            {
              if (v33 <= v34)
                goto LABEL_35;
              break;
            }
          }
          if (memcmp(*this, v19, (v10 >> 3) & 0x3FFFFFF8))
          {
            if ((_DWORD)v17 == 1)
            {
              llvm::APInt::APInt(a3, v6, *(_QWORD *)v12 / *v19, 0);
            }
            else
            {
              llvm::APInt::APInt(a3, v6, 0, 0);
              llvm::APInt::divide(*this, v17, *(int32x4_t **)__sz, v31, *(int8x16_t **)a3, 0, v38);
            }
            return;
          }
          *((_DWORD *)a3 + 2) = v6;
          v37 = operator new[](8 * v11);
          bzero(v37, 8 * v11);
          *(_QWORD *)a3 = v37;
          *v37 = 1;
        }
        v37[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
        return;
      }
    }
LABEL_22:
    *((_DWORD *)a3 + 2) = v6;
    v30 = operator new[](8 * v11);
    bzero(v30, 8 * v11);
    *(_QWORD *)a3 = v30;
    *v30 = 0;
    v30[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    return;
  }
  v7 = (unint64_t)*this / *(_QWORD *)__sz;
  *((_DWORD *)a3 + 2) = v6;
  v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  if (!(_DWORD)v6)
    v8 = 0;
  *(_QWORD *)a3 = v7 & v8;
}

void llvm::APInt::udivrem(llvm::APInt *__sz, const llvm::APInt *a2, void **a3, llvm::APInt *a4, llvm::APInt *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  _QWORD *v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  size_t v36;
  _QWORD *v37;
  unint64_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::APInt *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v11 = *((unsigned int *)__sz + 2);
  if (v11 <= 0x40)
  {
    v12 = *(_QWORD *)__sz % *(_QWORD *)a2;
    if ((_DWORD)v11)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    else
      v13 = 0;
    v14 = (void *)((*(_QWORD *)__sz / *(_QWORD *)a2) & v13);
    if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
      operator delete[](*a3);
    *a3 = v14;
    *((_DWORD *)a3 + 2) = v11;
    v15 = (_QWORD *)(v12 & v13);
    if (*((_DWORD *)a4 + 2) < 0x41u)
      goto LABEL_36;
    goto LABEL_34;
  }
  v16 = 0;
  v17 = (unint64_t)(v11 + 63) >> 6;
  v18 = (_DWORD)v17 << 6;
  v19 = v17 + 1;
  while (1)
  {
    v20 = *(_QWORD *)(*(_QWORD *)__sz + 8 * (v19 - 2));
    if (v20)
      break;
    v16 += 64;
    if (--v19 <= 1)
      goto LABEL_15;
  }
  v18 = __clz(v20) + v16;
LABEL_15:
  v21 = v11 | 0xFFFFFFC0;
  if ((v11 & 0x3F) == 0)
    v21 = 0;
  v22 = ((unint64_t)(v11 - v21 - v18) + 63) >> 6;
  v23 = *((unsigned int *)a2 + 2);
  if (v23 > 0x40)
  {
    v30 = 0;
    v31 = (unint64_t)(v23 + 63) >> 6;
    v32 = (_DWORD)v31 << 6;
    v33 = v31 + 1;
    while (1)
    {
      v34 = *(_QWORD *)(*(_QWORD *)a2 + 8 * (v33 - 2));
      if (v34)
        break;
      v30 += 64;
      if (--v33 <= 1)
      {
        v35 = v23 | 0xFFFFFFC0;
        if ((v23 & 0x3F) == 0)
          v35 = 0;
        v24 = v32 + v35;
        if ((_DWORD)v22)
          goto LABEL_19;
        goto LABEL_29;
      }
    }
    v39 = __clz(v34) + v30;
    v40 = v23 | 0xFFFFFFC0;
    if ((v23 & 0x3F) == 0)
      v40 = 0;
    v24 = v39 + v40;
    if ((_DWORD)v22)
      goto LABEL_19;
    goto LABEL_29;
  }
  v24 = v23 + __clz(*(_QWORD *)a2) - 64;
  if (!(_DWORD)v22)
  {
LABEL_29:
    v36 = 8 * v17;
    v37 = operator new[](8 * v17);
    bzero(v37, 8 * v17);
    *v37 = 0;
LABEL_30:
    v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    v37[(v17 - 1)] &= v38;
    if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
      operator delete[](*a3);
    *a3 = v37;
    *((_DWORD *)a3 + 2) = v11;
    v15 = operator new[](v36);
    bzero(v15, v36);
    *v15 = 0;
    v15[(v17 - 1)] &= v38;
    if (*((_DWORD *)a4 + 2) < 0x41u)
      goto LABEL_36;
LABEL_34:
    if (*(_QWORD *)a4)
      operator delete[](*(void **)a4);
LABEL_36:
    *(_QWORD *)a4 = v15;
    *((_DWORD *)a4 + 2) = v11;
    return;
  }
LABEL_19:
  v25 = (v23 - v24);
  v26 = (unint64_t)(v25 + 63) >> 6;
  v27 = *((_DWORD *)__sz + 2);
  if ((_DWORD)v25 == 1)
  {
    if (a3 != (void **)__sz)
    {
      v28 = *((unsigned int *)a3 + 2);
      if (((unint64_t)(v28 + 63) >> 6) == (_DWORD)v17)
      {
        *((_DWORD *)a3 + 2) = v11;
        v29 = *a3;
      }
      else
      {
        if (v28 >= 0x41 && *a3)
          operator delete[](*a3);
        *((_DWORD *)a3 + 2) = v11;
        v29 = operator new[](8 * v17);
        *a3 = v29;
      }
      memcpy(v29, *(const void **)__sz, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    }
    v41 = operator new[](8 * v17);
    bzero(v41, 8 * v17);
    *v41 = 0;
    v41[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    if (*((_DWORD *)a4 + 2) >= 0x41u && *(_QWORD *)a4)
      operator delete[](*(void **)a4);
    *(_QWORD *)a4 = v41;
    *((_DWORD *)a4 + 2) = v11;
    v27 = *((_DWORD *)__sz + 2);
  }
  if (v22 >= v26)
  {
    if (v27 > 0x40)
    {
      v45 = *(char **)__sz;
      v46 = *(char **)a2;
      v47 = ((unint64_t)v27 + 63) >> 3;
      v48 = v47 & 0x3FFFFFF8;
      while (v48)
      {
        v49 = *(_QWORD *)&v45[v48 - 8];
        v50 = *(_QWORD *)&v46[v48 - 8];
        v48 -= 8;
        if (v49 != v50)
        {
          if (v49 <= v50)
            goto LABEL_51;
          break;
        }
      }
      if (!memcmp(v45, v46, v47 & 0x3FFFFFF8))
      {
LABEL_57:
        v36 = 8 * v17;
        v37 = operator new[](8 * v17);
        bzero(v37, 8 * v17);
        *v37 = 1;
        goto LABEL_30;
      }
    }
    else
    {
      if (*(_QWORD *)__sz < *(_QWORD *)a2)
        goto LABEL_51;
      if (*(_QWORD *)__sz == *(_QWORD *)a2)
        goto LABEL_57;
    }
    v51 = *((unsigned int *)a3 + 2);
    if (((unint64_t)(v51 + 63) >> 6) == (_DWORD)v17)
    {
      *((_DWORD *)a3 + 2) = v11;
      v52 = *((unsigned int *)a4 + 2);
      if (((unint64_t)(v52 + 63) >> 6) != (_DWORD)v17)
        goto LABEL_69;
    }
    else
    {
      if (v51 >= 0x41 && *a3)
        operator delete[](*a3);
      *((_DWORD *)a3 + 2) = v11;
      *a3 = operator new[](8 * v17);
      v52 = *((unsigned int *)a4 + 2);
      if (((unint64_t)(v52 + 63) >> 6) != (_DWORD)v17)
      {
LABEL_69:
        if (v52 >= 0x41 && *(_QWORD *)a4)
          operator delete[](*(void **)a4);
        *((_DWORD *)a4 + 2) = v11;
        *(_QWORD *)a4 = operator new[](8 * v17);
        v53 = *(llvm::APInt **)__sz;
        if ((_DWORD)v22 != 1)
          goto LABEL_73;
        goto LABEL_84;
      }
    }
    *((_DWORD *)a4 + 2) = v11;
    v53 = *(llvm::APInt **)__sz;
    if ((_DWORD)v22 != 1)
    {
LABEL_73:
      llvm::APInt::divide(v53, (const unint64_t *)v22, *(int32x4_t **)a2, (const unint64_t *)v26, (int8x16_t *)*a3, *(unint64_t **)a4, a7);
      bzero((char *)*a3 + 8 * v22, (8 * (v17 - v22)));
      bzero((void *)(*(_QWORD *)a4 + 8 * v26), (8 * (v17 - v26)));
      return;
    }
LABEL_84:
    v54 = *(_QWORD *)v53;
    v55 = **(_QWORD **)a2;
    v56 = *((unsigned int *)a3 + 2);
    v57 = *(_QWORD *)v53 / v55;
    if (v56 > 0x40)
    {
      *(_QWORD *)*a3 = v57;
      bzero((char *)*a3 + 8, (((unint64_t)(v56 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if ((_DWORD)v56)
        v58 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
      else
        v58 = 0;
      *a3 = (void *)(v58 & v57);
    }
    v60 = v54 - v57 * v55;
    v61 = *((unsigned int *)a4 + 2);
    if (v61 > 0x40)
    {
      **(_QWORD **)a4 = v60;
      bzero((void *)(*(_QWORD *)a4 + 8), (((unint64_t)(v61 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if ((_DWORD)v61)
        v62 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v61;
      else
        v62 = 0;
      *(_QWORD *)a4 = v62 & v60;
    }
    return;
  }
LABEL_51:
  v42 = *((unsigned int *)a4 + 2);
  if (v42 <= 0x40 && v27 <= 0x40)
  {
    *(_QWORD *)a4 = *(_QWORD *)__sz;
    *((_DWORD *)a4 + 2) = *((_DWORD *)__sz + 2);
    goto LABEL_91;
  }
  if (a4 != __sz)
  {
    v43 = v27 + 63;
    if (((unint64_t)(v42 + 63) >> 6) == (v43 >> 6))
    {
      *((_DWORD *)a4 + 2) = v27;
      if (v27 >= 0x41)
      {
        v44 = *(void **)a4;
LABEL_90:
        memcpy(v44, *(const void **)__sz, (v43 >> 3) & 0x3FFFFFF8);
        goto LABEL_91;
      }
    }
    else
    {
      if (v42 >= 0x41 && *(_QWORD *)a4)
        operator delete[](*(void **)a4);
      *((_DWORD *)a4 + 2) = v27;
      if (v27 >= 0x41)
      {
        v44 = operator new[](8 * (v43 >> 6));
        *(_QWORD *)a4 = v44;
        goto LABEL_90;
      }
    }
    *(_QWORD *)a4 = *(_QWORD *)__sz;
  }
LABEL_91:
  v59 = operator new[](8 * v17);
  bzero(v59, 8 * v17);
  *v59 = 0;
  v59[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (*((_DWORD *)a3 + 2) >= 0x41u && *a3)
    operator delete[](*a3);
  *a3 = v59;
  *((_DWORD *)a3 + 2) = v11;
}

void llvm::APInt::divide(llvm::APInt *this, const unint64_t *a2, int32x4_t *a3, const unint64_t *a4, int8x16_t *a5, unint64_t *a6, unint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  uint32x4_t *v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t *v19;
  uint32x4_t *v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int8x16_t *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t i;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  __int32 v48;
  uint64_t v49;
  uint64_t v50;
  int32x4_t *v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  float *v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  int32x4_t *v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float *v65;
  float *v66;
  uint32x4_t v67;
  uint32x4_t *v68;
  int8x16_t v69;
  uint32x4_t v70;
  uint64_t v71;
  uint32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  uint64_t v76;
  int *v77;
  __int32 v78;
  unsigned int v79;
  uint64_t v80;
  __int32 v81;
  uint32x4_t v82;
  uint32x4_t *v83;
  int8x16_t v84;
  uint32x4_t v85;
  uint64_t v86;
  uint32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  uint64_t v91;
  int *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned __int32 v116;
  unsigned __int32 v117;
  unsigned __int32 v118;
  unsigned __int32 v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int8x16_t *v123;
  const float *v124;
  const float *v125;
  int8x16_t v131;
  int8x16_t v133;
  int8x16_t v134;
  int v135;
  uint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  int8x16_t *v140;
  const float *v141;
  const float *v142;
  int8x16_t v144;
  int8x16_t v146;
  int8x16_t v147;
  int v148;
  uint64_t v149;
  unint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  __int8 *v156;
  uint64_t v157;
  __int128 v158;
  llvm::APInt *v159;
  int32x4_t *v160;
  unsigned int v161;
  int8x16_t *v162;
  _DWORD v163[128];
  uint64_t v164;
  float32x4x2_t v165;
  float32x4x2_t v166;
  float32x4x2_t v167;
  float32x4x2_t v168;
  float32x4x2_t v169;
  float32x4x2_t v170;
  float32x4x2_t v171;
  float32x4x2_t v172;

  v162 = a5;
  v159 = this;
  v160 = a3;
  v164 = *MEMORY[0x1E0C80C00];
  v161 = a4;
  v8 = (2 * (_DWORD)a4);
  v9 = (2 * (_DWORD)a2);
  if (a6)
    v10 = 4;
  else
    v10 = 3;
  v11 = (v10 * v8 + 2 * (v9 - v8)) | 1;
  v12 = a2;
  v13 = (2 * (_DWORD)a2) | 1u;
  v14 = 4 * v13;
  if (v11 > 0x80)
  {
    v20 = (uint32x4_t *)operator new[](4 * v13);
    v15 = (uint32x4_t *)operator new[](4 * v8);
    v17 = operator new[](4 * v9);
    v19 = a6;
    if (a6)
    {
      v21 = operator new[](4 * v8);
      bzero(v20, v14);
      v22 = v161;
      v23 = v12;
      if (!v12)
        goto LABEL_18;
    }
    else
    {
      v21 = 0;
      bzero(v20, v14);
      v22 = v161;
      v23 = v12;
      if (!v12)
        goto LABEL_18;
    }
LABEL_14:
    if (v23 >= 0x10)
    {
      v24 = 0;
      v49 = 8 * v23 - 8;
      if ((char *)v20->i64 + v49 + 4 >= (char *)v20->i64 + 4 && &v20->i8[v49] >= (__int8 *)v20)
      {
        v50 = 0;
        v24 = v23 & 0xFFFFFFF8;
        v51 = (int32x4_t *)((char *)v159 + 32);
        do
        {
          v53 = v51[-2];
          v52 = v51[-1];
          v55 = *v51;
          v54 = v51[1];
          v51 += 4;
          v171.val[0] = (float32x4_t)vuzp1q_s32(v53, v52);
          v171.val[1] = (float32x4_t)vuzp2q_s32(v53, v52);
          v165.val[0] = (float32x4_t)vuzp1q_s32(v55, v54);
          v56 = (float *)&v20->i32[v50 & 0xFFFFFFF0];
          vst2q_f32(v56, v171);
          v165.val[1] = (float32x4_t)vuzp2q_s32(v55, v54);
          v57 = (float *)&v20[2].i32[v50 & 0xFFFFFFF0];
          vst2q_f32(v57, v165);
          v50 += 16;
        }
        while (((2 * v23) & 0x1FFFFFFF0) != v50);
        if (v24 == v23)
          goto LABEL_18;
      }
    }
    else
    {
      v24 = 0;
    }
    v25 = 2 * v24;
    v26 = v23 - v24;
    v27 = (uint64_t *)((char *)v159 + 8 * v24);
    do
    {
      v28 = *v27++;
      v20->i32[v25] = v28;
      v20->i32[v25 + 1] = HIDWORD(v28);
      v25 += 2;
      --v26;
    }
    while (v26);
    goto LABEL_18;
  }
  v15 = (uint32x4_t *)&v163[v13];
  v16 = v8 + v13;
  v17 = &v163[v16];
  v18 = &v163[(v16 + v9)];
  v19 = a6;
  v20 = (uint32x4_t *)v163;
  if (a6)
    v21 = v18;
  else
    v21 = 0;
  bzero(v163, v14);
  v22 = v161;
  v23 = v12;
  if (v12)
    goto LABEL_14;
LABEL_18:
  v20->i32[v9] = 0;
  bzero(v15, 4 * v8);
  if (!v22)
    goto LABEL_23;
  if (v22 < 0x10)
  {
    v29 = 0;
LABEL_21:
    v30 = 2 * v29;
    v31 = v22 - v29;
    v32 = &v160->i64[v29];
    do
    {
      v33 = *v32++;
      v15->i32[v30] = v33;
      v15->i32[v30 + 1] = HIDWORD(v33);
      v30 += 2;
      --v31;
    }
    while (v31);
    goto LABEL_23;
  }
  v29 = 0;
  v58 = 8 * v22 - 8;
  if ((char *)v15->i64 + v58 + 4 < (char *)v15->i64 + 4)
    goto LABEL_21;
  if (&v15->i8[v58] < (__int8 *)v15)
    goto LABEL_21;
  v59 = 0;
  v29 = v22 & 0xFFFFFFF8;
  v60 = v160 + 2;
  do
  {
    v62 = v60[-2];
    v61 = v60[-1];
    v64 = *v60;
    v63 = v60[1];
    v60 += 4;
    v172.val[0] = (float32x4_t)vuzp1q_s32(v62, v61);
    v172.val[1] = (float32x4_t)vuzp2q_s32(v62, v61);
    v166.val[0] = (float32x4_t)vuzp1q_s32(v64, v63);
    v65 = (float *)&v15->i32[v59 & 0xFFFFFFF0];
    vst2q_f32(v65, v172);
    v166.val[1] = (float32x4_t)vuzp2q_s32(v64, v63);
    v66 = (float *)&v15[2].i32[v59 & 0xFFFFFFF0];
    vst2q_f32(v66, v166);
    v59 += 16;
  }
  while (((2 * v22) & 0x1FFFFFFF0) != v59);
  if (v29 != v22)
    goto LABEL_21;
LABEL_23:
  bzero(v17, 4 * v9);
  if (v19)
    bzero(v21, 4 * v8);
  if ((_DWORD)v8)
  {
    v34 = v162;
    while (!v15[-1].i32[v8 + 3])
    {
      if (!--v8)
      {
        v35 = v9;
        if ((_DWORD)v9)
          goto LABEL_34;
        goto LABEL_38;
      }
    }
    LODWORD(v9) = v9 - v8;
    v35 = v8 + v9;
    if (!((_DWORD)v8 + (_DWORD)v9))
      goto LABEL_38;
  }
  else
  {
    v34 = v162;
    v35 = v9 - v8;
    if ((_DWORD)v9 == (_DWORD)v8)
      goto LABEL_38;
  }
LABEL_34:
  v36 = v35;
  while (!v20[-1].i32[v36 + 3])
  {
    LODWORD(v9) = v9 - 1;
    if (!(--v36 * 4))
    {
      LODWORD(v9) = -(int)v8;
      break;
    }
  }
LABEL_38:
  v37 = (v8 - 1);
  if ((_DWORD)v8 != 1)
  {
    v44 = __clz(v15->u32[v37]);
    v45 = (v9 + v8);
    if (!v44)
    {
      v48 = 0;
      goto LABEL_83;
    }
    if (!(_DWORD)v45)
    {
      v48 = 0;
      goto LABEL_74;
    }
    v46 = 32 - v44;
    if (v45 >= 8)
    {
      v47 = v45 & 0xFFFFFFF8;
      v67 = (uint32x4_t)vdupq_n_s32(v44);
      v68 = v20 + 1;
      v69 = 0uLL;
      v70 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v46));
      v71 = v47;
      do
      {
        v72 = v68[-1];
        v73 = (int8x16_t)vshlq_u32(v72, v70);
        v74 = vextq_s8(v69, v73, 0xCuLL);
        v69 = (int8x16_t)vshlq_u32(*v68, v70);
        v75 = vorrq_s8((int8x16_t)vshlq_u32(*v68, v67), vextq_s8(v73, v69, 0xCuLL));
        v68[-1] = (uint32x4_t)vorrq_s8((int8x16_t)vshlq_u32(v72, v67), v74);
        *v68 = (uint32x4_t)v75;
        v68 += 2;
        v71 -= 8;
      }
      while (v71);
      v48 = v69.i32[3];
      if (v47 == v45)
      {
LABEL_74:
        if (!(_DWORD)v8)
          goto LABEL_83;
        v79 = 32 - v44;
        if (v8 >= 8)
        {
          v80 = v8 & 0xFFFFFFF8;
          v82 = (uint32x4_t)vdupq_n_s32(v44);
          v83 = v15 + 1;
          v84 = 0uLL;
          v85 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v79));
          v86 = v80;
          do
          {
            v87 = v83[-1];
            v88 = (int8x16_t)vshlq_u32(v87, v85);
            v89 = vextq_s8(v84, v88, 0xCuLL);
            v84 = (int8x16_t)vshlq_u32(*v83, v85);
            v90 = vorrq_s8((int8x16_t)vshlq_u32(*v83, v82), vextq_s8(v88, v84, 0xCuLL));
            v83[-1] = (uint32x4_t)vorrq_s8((int8x16_t)vshlq_u32(v87, v82), v89);
            *v83 = (uint32x4_t)v90;
            v83 += 2;
            v86 -= 8;
          }
          while (v86);
          if (v80 == v8)
          {
LABEL_83:
            v20->i32[v45] = v48;
            v94 = (v8 - 2);
            v95 = (int)v9;
            do
            {
              v97 = (v8 + v95);
              v98 = v20->u32[(v97 - 1)] | ((unint64_t)v20->u32[v97] << 32);
              v99 = v15->u32[v37];
              v100 = v98 / v99;
              v101 = v98 % v99;
              if (v98 / v99 == 0x100000000
                || (v102 = v98 / v99, v100 * v15->u32[v94] > (v20->u32[(v97 - 2)] | (v101 << 32))))
              {
                v102 = v100 - 1;
                v103 = v101 + v99;
                if (!HIDWORD(v103)
                  && (v100 == 0x100000001 || v102 * v15->u32[v94] > (v20->u32[(v97 - 2)] | (v103 << 32))))
                {
                  v102 = v100 - 2;
                }
              }
              if ((_DWORD)v8)
              {
                v104 = 0;
                v105 = 0;
                do
                {
                  v106 = v102 * v15->u32[v104];
                  v107 = (v95 + v104);
                  v108 = v20->u32[v107] - (v105 + v106);
                  v20->i32[v107] = v108;
                  v109 = HIDWORD(v106) - HIDWORD(v108);
                  v105 = v109;
                  ++v104;
                }
                while (v8 != v104);
                v110 = v97;
                v111 = v20->u32[v110];
                v20->i32[v110] = v111 - v109;
                v17[v95] = v102;
                if (v109 > v111)
                {
                  v112 = 0;
                  LOBYTE(v113) = 0;
                  v17[v95] = v102 - 1;
                  do
                  {
                    while (1)
                    {
                      v114 = v15->u32[v112];
                      v115 = v20->u32[(v95 + v112)];
                      v116 = v114 >= v115 ? v20->i32[(v95 + v112)] : v15->i32[v112];
                      v117 = v114 + (v113 & 1) + v115;
                      v20->i32[(v95 + v112)] = v117;
                      if (v117 < v116)
                        break;
                      v113 = v113 & (v117 == v116);
                      if (v8 == ++v112)
                        goto LABEL_103;
                    }
                    v113 = 1;
                    ++v112;
                  }
                  while (v8 != v112);
LABEL_103:
                  v20->i32[v110] += v113;
                }
              }
              else
              {
                v17[v95] = v102;
              }
              v96 = v95-- <= 0;
            }
            while (!v96);
            if (v21)
            {
              if (v44)
              {
                if ((v37 & 0x80000000) == 0)
                {
                  v118 = 0;
                  do
                  {
                    v119 = v20->u32[v37];
                    v120 = (v119 >> v44) | v118;
                    v118 = v119 << (32 - v44);
                    v21[v37] = v120;
                    v96 = v37-- <= 0;
                  }
                  while (!v96);
                }
              }
              else if ((v37 & 0x80000000) == 0)
              {
                if (v37 < 0x1F)
                  goto LABEL_114;
                v151 = 4 * v37;
                if (v21 > &v21[v37])
                  goto LABEL_114;
                if (v20 > (uint32x4_t *)&v20->i8[v151])
                  goto LABEL_114;
                if ((unint64_t)((char *)v20 - (char *)v21) < 0x20)
                  goto LABEL_114;
                v152 = v37 + 1;
                v153 = (v37 + 1) & 0x1FFFFFFF8;
                v37 -= v153;
                v154 = v151 - 12;
                v155 = &v21[(unint64_t)v151 / 4 - 3];
                v156 = &v20->i8[v154];
                v157 = v153;
                do
                {
                  v158 = *(_OWORD *)v156;
                  *(v155 - 1) = *((_OWORD *)v156 - 1);
                  *v155 = v158;
                  v155 -= 2;
                  v156 -= 32;
                  v157 -= 8;
                }
                while (v157);
                if (v152 != v153)
                {
LABEL_114:
                  do
                  {
                    v21[v37] = v20->i32[v37];
                    v96 = v37-- <= 0;
                  }
                  while (!v96);
                }
              }
            }
            goto LABEL_115;
          }
          v81 = v84.i32[3];
        }
        else
        {
          v80 = 0;
          v81 = 0;
        }
        v91 = v8 - v80;
        v92 = &v15->i32[v80];
        do
        {
          v93 = *v92 >> v79;
          *v92 = (*v92 << v44) | v81;
          ++v92;
          v81 = v93;
          --v91;
        }
        while (v91);
        goto LABEL_83;
      }
    }
    else
    {
      v47 = 0;
      v48 = 0;
    }
    v76 = v45 - v47;
    v77 = &v20->i32[v47];
    v78 = v48;
    do
    {
      v48 = *v77 >> v46;
      *v77 = (*v77 << v44) | v78;
      ++v77;
      v78 = v48;
      --v76;
    }
    while (v76);
    goto LABEL_74;
  }
  v38 = 0;
  if ((v9 & 0x80000000) == 0)
  {
    v39 = v15->u32[0];
    for (i = v9; i != -1; --i)
    {
      v41 = v38;
      v38 = v20->u32[i];
      v42 = v38 | (v41 << 32);
      if (v42)
      {
        if (v42 >= v39)
        {
          if (v42 == v39)
          {
            v38 = 0;
            v17[i] = 1;
          }
          else
          {
            v43 = v42 / v39;
            v17[i] = v43;
            v38 = (v38 - v39 * v43);
          }
          continue;
        }
      }
      else
      {
        v38 = 0;
      }
      v17[i] = 0;
    }
  }
  if (v21)
    *v21 = v38;
LABEL_115:
  if (v34 && v23)
  {
    if (v23 < 8)
    {
      v121 = 0;
LABEL_122:
      v135 = 2 * v121;
      v136 = v23 - v121;
      v137 = (unint64_t *)v34 + v121;
      do
      {
        *v137++ = v17[v135] | ((unint64_t)v17[v135 + 1] << 32);
        v135 += 2;
        --v136;
      }
      while (v136);
      goto LABEL_124;
    }
    v122 = 0;
    v121 = v23 & 0xFFFFFFF8;
    v123 = v34 + 2;
    do
    {
      v124 = (const float *)&v17[v122 & 0xFFFFFFF0];
      v167 = vld2q_f32(v124);
      v125 = (const float *)&v17[(v122 & 0xFFFFFFF0) + 8];
      v169 = vld2q_f32(v125);
      __asm { SHLL2           V4.2D, V1.4S, #0x20 ; ' ' }
      v131 = (int8x16_t)vshll_n_s32(*(int32x2_t *)v167.val[1].f32, 0x20uLL);
      __asm { SHLL2           V6.2D, V3.4S, #0x20 ; ' ' }
      v133.i64[0] = v167.val[0].u32[2];
      v133.i64[1] = v167.val[0].u32[3];
      v134 = v133;
      v133.i64[0] = v167.val[0].u32[0];
      v133.i64[1] = v167.val[0].u32[1];
      v167.val[0] = (float32x4_t)v133;
      v133.i64[0] = v169.val[0].u32[2];
      v133.i64[1] = v169.val[0].u32[3];
      v167.val[1] = (float32x4_t)v133;
      v133.i64[0] = v169.val[0].u32[0];
      v133.i64[1] = v169.val[0].u32[1];
      v123[-2] = vorrq_s8(v131, (int8x16_t)v167.val[0]);
      v123[-1] = vorrq_s8(_Q4, v134);
      *v123 = vorrq_s8((int8x16_t)vshll_n_s32(*(int32x2_t *)v169.val[1].f32, 0x20uLL), v133);
      v123[1] = vorrq_s8(_Q6, (int8x16_t)v167.val[1]);
      v123 += 4;
      v122 += 16;
    }
    while (((2 * v23) & 0x1FFFFFFF0) != v122);
    if (v121 != v23)
      goto LABEL_122;
  }
LABEL_124:
  if (v19 && v22)
  {
    if (v22 < 8)
    {
      v138 = 0;
LABEL_131:
      v148 = 2 * v138;
      v149 = v22 - v138;
      v150 = &v19[v138];
      do
      {
        *v150++ = v21[v148] | ((unint64_t)v21[v148 + 1] << 32);
        v148 += 2;
        --v149;
      }
      while (v149);
      goto LABEL_133;
    }
    v139 = 0;
    v138 = v22 & 0xFFFFFFF8;
    v140 = (int8x16_t *)(v19 + 4);
    do
    {
      v141 = (const float *)&v21[v139 & 0xFFFFFFF0];
      v168 = vld2q_f32(v141);
      v142 = (const float *)&v21[(v139 & 0xFFFFFFF0) + 8];
      v170 = vld2q_f32(v142);
      __asm { SHLL2           V4.2D, V1.4S, #0x20 ; ' ' }
      v144 = (int8x16_t)vshll_n_s32(*(int32x2_t *)v168.val[1].f32, 0x20uLL);
      __asm { SHLL2           V6.2D, V3.4S, #0x20 ; ' ' }
      v146.i64[0] = v168.val[0].u32[2];
      v146.i64[1] = v168.val[0].u32[3];
      v147 = v146;
      v146.i64[0] = v168.val[0].u32[0];
      v146.i64[1] = v168.val[0].u32[1];
      v168.val[0] = (float32x4_t)v146;
      v146.i64[0] = v170.val[0].u32[2];
      v146.i64[1] = v170.val[0].u32[3];
      v168.val[1] = (float32x4_t)v146;
      v146.i64[0] = v170.val[0].u32[0];
      v146.i64[1] = v170.val[0].u32[1];
      v140[-2] = vorrq_s8(v144, (int8x16_t)v168.val[0]);
      v140[-1] = vorrq_s8(_Q4, v147);
      *v140 = vorrq_s8((int8x16_t)vshll_n_s32(*(int32x2_t *)v170.val[1].f32, 0x20uLL), v146);
      v140[1] = vorrq_s8(_Q6, (int8x16_t)v168.val[1]);
      v140 += 4;
      v139 += 16;
    }
    while (((2 * v22) & 0x1FFFFFFF0) != v139);
    if (v138 != v22)
      goto LABEL_131;
  }
LABEL_133:
  if (v20 != (uint32x4_t *)v163)
  {
    operator delete[](v20);
    operator delete[](v15);
    operator delete[](v17);
    if (v21)
      operator delete[](v21);
  }
}

void llvm::APInt::sdiv(llvm::APInt **this@<X0>, size_t __sz@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  llvm::APInt **v8;
  llvm::APInt *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  llvm::APInt *v13;
  void *v14;
  llvm::APInt *v15;
  size_t v16;
  unsigned int v17;
  llvm::APInt *v18;
  uint64_t v19;
  size_t v20;
  unsigned int v21;
  void *v22;
  void *v23;
  const void *v24;
  size_t v25;
  unsigned int v26;
  void *v27;
  size_t v28;
  unsigned int v29;
  void *v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  void *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  void *__p;
  unsigned int v40;
  void *v41;
  unsigned int v42;
  llvm::APInt *v43;
  unsigned int v44;
  llvm::APInt *v45;
  unsigned int v46;

  v6 = *((unsigned int *)this + 2);
  v7 = v6 - 1;
  v8 = this;
  if (v6 >= 0x41)
    v8 = (llvm::APInt **)((char *)*this + 8 * (v7 >> 6));
  v9 = *v8;
  v10 = *(unsigned int *)(__sz + 8);
  v11 = v10 - 1;
  if ((((unint64_t)v9 >> v7) & 1) == 0)
  {
    if (v10 > 0x40)
    {
      v24 = *(const void **)__sz;
      if (((*(_QWORD *)(*(_QWORD *)__sz + 8 * (v11 >> 6)) >> v11) & 1) != 0)
      {
        v32 = *(_DWORD *)(__sz + 8);
        v25 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
        v31 = operator new[](v25);
        memcpy(v31, v24, v25);
        goto LABEL_33;
      }
    }
    else
    {
      v14 = *(void **)__sz;
      if (((*(_QWORD *)__sz >> v11) & 1) != 0)
      {
        v32 = *(_DWORD *)(__sz + 8);
        v31 = v14;
LABEL_33:
        llvm::APInt::negate((llvm::APInt *)&v31);
        v26 = v32;
        v46 = v32;
        v27 = v31;
        v45 = (llvm::APInt *)v31;
        v32 = 0;
        llvm::APInt::udiv(this, (size_t)&v45, (llvm::APInt *)&v33);
        llvm::APInt::negate((llvm::APInt *)&v33);
        *((_DWORD *)a3 + 2) = v34;
        *(_QWORD *)a3 = v33;
        v34 = 0;
        if (v26 >= 0x41 && v27)
          operator delete[](v27);
        if (v32 >= 0x41)
        {
          v23 = v31;
          if (v31)
            goto LABEL_46;
        }
        return;
      }
    }
    llvm::APInt::udiv(this, __sz, a3);
    return;
  }
  if (v10 >= 0x41)
    v12 = (_QWORD *)(*(_QWORD *)__sz + 8 * (v11 >> 6));
  else
    v12 = (_QWORD *)__sz;
  if (((*v12 >> v11) & 1) != 0)
  {
    v44 = *((_DWORD *)this + 2);
    if (v6 > 0x40)
    {
      v16 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
      v13 = (llvm::APInt *)operator new[](v16);
      memcpy(v13, *this, v16);
    }
    else
    {
      v13 = *this;
    }
    v43 = v13;
    llvm::APInt::negate((llvm::APInt *)&v43);
    v17 = v44;
    v46 = v44;
    v18 = v43;
    v45 = v43;
    v44 = 0;
    v19 = *(unsigned int *)(__sz + 8);
    v40 = v19;
    if (v19 > 0x40)
    {
      v20 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
      __p = operator new[](v20);
      memcpy(__p, *(const void **)__sz, v20);
    }
    else
    {
      __p = *(void **)__sz;
    }
    llvm::APInt::negate((llvm::APInt *)&__p);
    v21 = v40;
    v42 = v40;
    v22 = __p;
    v41 = __p;
    v40 = 0;
    llvm::APInt::udiv(&v45, (size_t)&v41, a3);
    if (v21 >= 0x41 && v22)
      operator delete[](v22);
    if (v40 >= 0x41 && __p)
      operator delete[](__p);
    if (v17 >= 0x41 && v18)
      operator delete[](v18);
    if (v44 < 0x41)
      return;
    v23 = v43;
    if (!v43)
      return;
LABEL_46:
    operator delete[](v23);
    return;
  }
  v36 = *((_DWORD *)this + 2);
  if (v6 > 0x40)
  {
    v28 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    v15 = (llvm::APInt *)operator new[](v28);
    memcpy(v15, *this, v28);
  }
  else
  {
    v15 = *this;
  }
  v35 = v15;
  llvm::APInt::negate((llvm::APInt *)&v35);
  v29 = v36;
  v46 = v36;
  v30 = v35;
  v45 = (llvm::APInt *)v35;
  v36 = 0;
  llvm::APInt::udiv(&v45, __sz, (llvm::APInt *)&v37);
  llvm::APInt::negate((llvm::APInt *)&v37);
  *((_DWORD *)a3 + 2) = v38;
  *(_QWORD *)a3 = v37;
  v38 = 0;
  if (v29 >= 0x41 && v30)
    operator delete[](v30);
  if (v36 >= 0x41)
  {
    v23 = v35;
    if (v35)
      goto LABEL_46;
  }
}

void llvm::APInt::urem(llvm::APInt **this@<X0>, size_t __sz@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  llvm::APInt *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  const unint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  const unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  void *v36;
  _QWORD *v37;
  unint64_t *v38;

  v6 = *((unsigned int *)this + 2);
  if (v6 <= 0x40)
  {
    v7 = (unint64_t)*this % *(_QWORD *)__sz;
    *((_DWORD *)a3 + 2) = v6;
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    if (!(_DWORD)v6)
      v8 = 0;
    *(_QWORD *)a3 = v7 & v8;
    return;
  }
  v9 = 0;
  v10 = v6 + 63;
  v11 = (unint64_t)(v6 + 63) >> 6;
  v12 = *this;
  v13 = (_DWORD)v11 << 6;
  v14 = v11 + 1;
  while (1)
  {
    v15 = *((_QWORD *)v12 + (v14 - 2));
    if (v15)
      break;
    v9 += 64;
    if (--v14 <= 1)
      goto LABEL_10;
  }
  v13 = __clz(v15) + v9;
LABEL_10:
  v16 = v6 | 0xFFFFFFC0;
  if ((v6 & 0x3F) == 0)
    v16 = 0;
  v17 = (const unint64_t *)(((unint64_t)(v6 - v16 - v13) + 63) >> 6);
  v18 = *(unsigned int *)(__sz + 8);
  if (v18 > 0x40)
  {
    v21 = 0;
    v22 = (unint64_t)(v18 + 63) >> 6;
    v19 = *(_QWORD **)__sz;
    v23 = (_DWORD)v22 << 6;
    v24 = v22 + 1;
    while (1)
    {
      v25 = v19[(v24 - 2)];
      if (v25)
        break;
      v21 += 64;
      if (--v24 <= 1)
      {
        v26 = v18 | 0xFFFFFFC0;
        if ((v18 & 0x3F) == 0)
          v26 = 0;
        v20 = v23 + v26;
        if ((_DWORD)v17)
          goto LABEL_25;
        goto LABEL_26;
      }
    }
    v27 = __clz(v25) + v21;
    v28 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0)
      v28 = 0;
    v20 = v27 + v28;
    if (!(_DWORD)v17)
      goto LABEL_26;
  }
  else
  {
    v19 = *(_QWORD **)__sz;
    v20 = v18 + __clz(*(_QWORD *)__sz) - 64;
    if (!(_DWORD)v17)
      goto LABEL_26;
  }
LABEL_25:
  v29 = (v18 - v20);
  if ((_DWORD)v29 == 1)
  {
LABEL_26:
    *((_DWORD *)a3 + 2) = v6;
    v30 = operator new[](8 * v11);
    bzero(v30, 8 * v11);
    *(_QWORD *)a3 = v30;
    *v30 = 0;
    v30[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    return;
  }
  v31 = (const unint64_t *)((unint64_t)(v29 + 63) >> 6);
  if (v17 < v31)
  {
LABEL_35:
    *((_DWORD *)a3 + 2) = v6;
    v35 = (v10 >> 3) & 0x3FFFFFF8;
    v36 = operator new[](v35);
    *(_QWORD *)a3 = v36;
    memcpy(v36, v12, v35);
  }
  else
  {
    v32 = v11;
    while (v32 * 8)
    {
      v33 = *(_QWORD *)((char *)v12 + v32 * 8 - 8);
      v34 = v19[--v32];
      if (v33 != v34)
      {
        if (v33 <= v34)
          goto LABEL_35;
        break;
      }
    }
    if (!memcmp(*this, v19, (v10 >> 3) & 0x3FFFFFF8))
    {
      *((_DWORD *)a3 + 2) = v6;
      v37 = operator new[](8 * v11);
      bzero(v37, 8 * v11);
      *(_QWORD *)a3 = v37;
      *v37 = 0;
      v37[(v11 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
    }
    else if ((_DWORD)v17 == 1)
    {
      llvm::APInt::APInt(a3, v6, *(_QWORD *)v12 % *v19, 0);
    }
    else
    {
      llvm::APInt::APInt(a3, v6, 0, 0);
      llvm::APInt::divide(*this, v17, *(int32x4_t **)__sz, v31, 0, *(unint64_t **)a3, v38);
    }
  }
}

void llvm::APInt::srem(llvm::APInt **this@<X0>, size_t __sz@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  llvm::APInt **v8;
  llvm::APInt *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  llvm::APInt *v13;
  void *v14;
  llvm::APInt *v15;
  size_t v16;
  unsigned int v17;
  llvm::APInt *v18;
  uint64_t v19;
  size_t v20;
  unsigned int v21;
  void *v22;
  void *v23;
  const void *v24;
  size_t v25;
  unsigned int v26;
  void *v27;
  size_t v28;
  unsigned int v29;
  void *v30;
  void *v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  void *__p;
  unsigned int v38;
  void *v39;
  unsigned int v40;
  llvm::APInt *v41;
  unsigned int v42;
  llvm::APInt *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;

  v6 = *((unsigned int *)this + 2);
  v7 = v6 - 1;
  v8 = this;
  if (v6 >= 0x41)
    v8 = (llvm::APInt **)((char *)*this + 8 * (v7 >> 6));
  v9 = *v8;
  v10 = *(unsigned int *)(__sz + 8);
  v11 = v10 - 1;
  if ((((unint64_t)v9 >> v7) & 1) == 0)
  {
    if (v10 > 0x40)
    {
      v24 = *(const void **)__sz;
      if (((*(_QWORD *)(*(_QWORD *)__sz + 8 * (v11 >> 6)) >> v11) & 1) != 0)
      {
        v32 = *(_DWORD *)(__sz + 8);
        v25 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
        v31 = operator new[](v25);
        memcpy(v31, v24, v25);
        goto LABEL_33;
      }
    }
    else
    {
      v14 = *(void **)__sz;
      if (((*(_QWORD *)__sz >> v11) & 1) != 0)
      {
        v32 = *(_DWORD *)(__sz + 8);
        v31 = v14;
LABEL_33:
        llvm::APInt::negate((llvm::APInt *)&v31);
        v26 = v32;
        v44 = v32;
        v27 = v31;
        v43 = (llvm::APInt *)v31;
        v32 = 0;
        llvm::APInt::urem(this, (size_t)&v43, a3);
        if (v26 >= 0x41 && v27)
          operator delete[](v27);
        if (v32 >= 0x41)
        {
          v23 = v31;
          if (v31)
            goto LABEL_46;
        }
        return;
      }
    }
    llvm::APInt::urem(this, __sz, a3);
    return;
  }
  if (v10 >= 0x41)
    v12 = (_QWORD *)(*(_QWORD *)__sz + 8 * (v11 >> 6));
  else
    v12 = (_QWORD *)__sz;
  if (((*v12 >> v11) & 1) != 0)
  {
    v42 = *((_DWORD *)this + 2);
    if (v6 > 0x40)
    {
      v16 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
      v13 = (llvm::APInt *)operator new[](v16);
      memcpy(v13, *this, v16);
    }
    else
    {
      v13 = *this;
    }
    v41 = v13;
    llvm::APInt::negate((llvm::APInt *)&v41);
    v17 = v42;
    v44 = v42;
    v18 = v41;
    v43 = v41;
    v42 = 0;
    v19 = *(unsigned int *)(__sz + 8);
    v38 = v19;
    if (v19 > 0x40)
    {
      v20 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
      __p = operator new[](v20);
      memcpy(__p, *(const void **)__sz, v20);
    }
    else
    {
      __p = *(void **)__sz;
    }
    llvm::APInt::negate((llvm::APInt *)&__p);
    v21 = v38;
    v40 = v38;
    v22 = __p;
    v39 = __p;
    v38 = 0;
    llvm::APInt::urem(&v43, (size_t)&v39, (llvm::APInt *)&v45);
    llvm::APInt::negate((llvm::APInt *)&v45);
    *((_DWORD *)a3 + 2) = v46;
    *(_QWORD *)a3 = v45;
    v46 = 0;
    if (v21 >= 0x41 && v22)
      operator delete[](v22);
    if (v38 >= 0x41 && __p)
      operator delete[](__p);
    if (v17 >= 0x41 && v18)
      operator delete[](v18);
    if (v42 < 0x41)
      return;
    v23 = v41;
    if (!v41)
      return;
LABEL_46:
    operator delete[](v23);
    return;
  }
  v34 = *((_DWORD *)this + 2);
  if (v6 > 0x40)
  {
    v28 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    v15 = (llvm::APInt *)operator new[](v28);
    memcpy(v15, *this, v28);
  }
  else
  {
    v15 = *this;
  }
  v33 = v15;
  llvm::APInt::negate((llvm::APInt *)&v33);
  v29 = v34;
  v44 = v34;
  v30 = v33;
  v43 = (llvm::APInt *)v33;
  v34 = 0;
  llvm::APInt::urem(&v43, __sz, (llvm::APInt *)&v35);
  llvm::APInt::negate((llvm::APInt *)&v35);
  *((_DWORD *)a3 + 2) = v36;
  *(_QWORD *)a3 = v35;
  v36 = 0;
  if (v29 >= 0x41 && v30)
    operator delete[](v30);
  if (v34 >= 0x41)
  {
    v23 = v33;
    if (v33)
      goto LABEL_46;
  }
}

void llvm::APInt::udivrem(size_t __sz, unint64_t a2, uint64_t a3, llvm::APInt *a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  llvm::APInt *v35;
  uint64_t v36;
  unint64_t v37;
  int32x4_t v38;

  v38.i64[0] = a2;
  v11 = *(unsigned int *)(__sz + 8);
  if (v11 > 0x40)
  {
    v15 = 0;
    v16 = v11 + 63;
    v17 = (unint64_t)(v11 + 63) >> 6;
    v18 = *(unint64_t **)__sz;
    v19 = (_DWORD)v17 << 6;
    v20 = v17 + 1;
    while (1)
    {
      v21 = v18[(v20 - 2)];
      if (v21)
        break;
      v15 += 64;
      if (--v20 <= 1)
      {
        v22 = (_DWORD)v17 << 6;
        goto LABEL_13;
      }
    }
    v22 = __clz(v21) + v15;
LABEL_13:
    v23 = v11 | 0xFFFFFFC0;
    if ((v11 & 0x3F) == 0)
      v23 = 0;
    v24 = ((unint64_t)(v11 - v23 - v22) + 63) >> 6;
    if (!(_DWORD)v24)
    {
      v27 = operator new[](8 * v17);
      bzero(v27, 8 * v17);
      *v27 = 0;
LABEL_21:
      v27[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
        operator delete[](*(void **)a3);
      *(_QWORD *)a3 = v27;
      *(_DWORD *)(a3 + 8) = v11;
      *(_QWORD *)a4 = 0;
      return;
    }
    if (a2 == 1)
    {
      if (a3 != __sz)
      {
        v25 = *(unsigned int *)(a3 + 8);
        if (((unint64_t)(v25 + 63) >> 6) == (_DWORD)v17)
        {
          *(_DWORD *)(a3 + 8) = v11;
          v26 = *(void **)a3;
        }
        else
        {
          if (v25 >= 0x41 && *(_QWORD *)a3)
            operator delete[](*(void **)a3);
          *(_DWORD *)(a3 + 8) = v11;
          v26 = operator new[](8 * v17);
          *(_QWORD *)a3 = v26;
        }
        memcpy(v26, *(const void **)__sz, (v16 >> 3) & 0x3FFFFFF8);
      }
      *(_QWORD *)a4 = 0;
      return;
    }
    v28 = 0;
    v29 = v17 + 1;
    do
    {
      v30 = v18[(v29 - 2)];
      if (v30)
      {
        if ((_DWORD)v11 - v23 - (__clz(v30) + v28) <= 0x40)
          goto LABEL_31;
        goto LABEL_34;
      }
      v28 += 64;
      --v29;
    }
    while (v29 > 1);
    if ((v11 - v23 - v19) > 0x40)
      goto LABEL_34;
LABEL_31:
    if (*v18 < a2)
    {
      *(_QWORD *)a4 = *v18;
      v14 = operator new[](8 * v17);
      bzero(v14, 8 * v17);
      *v14 = 0;
      v14[(v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      if (*(_DWORD *)(a3 + 8) >= 0x41u)
        goto LABEL_5;
      goto LABEL_7;
    }
LABEL_34:
    v31 = 0;
    v32 = v17 + 1;
    while (1)
    {
      v33 = v18[(v32 - 2)];
      if (v33)
        break;
      v31 += 64;
      if (--v32 <= 1)
      {
        if ((v11 - v23 - v19) > 0x40)
          goto LABEL_42;
        goto LABEL_40;
      }
    }
    if ((_DWORD)v11 - v23 - (__clz(v33) + v31) > 0x40)
      goto LABEL_42;
LABEL_40:
    if (*v18 == a2)
    {
      v27 = operator new[](8 * v17);
      bzero(v27, 8 * v17);
      *v27 = 1;
      goto LABEL_21;
    }
LABEL_42:
    v34 = *(unsigned int *)(a3 + 8);
    if (((unint64_t)(v34 + 63) >> 6) == (_DWORD)v17)
    {
      *(_DWORD *)(a3 + 8) = v11;
      v35 = *(llvm::APInt **)__sz;
      if ((_DWORD)v24 != 1)
      {
LABEL_44:
        llvm::APInt::divide(v35, (const unint64_t *)v24, &v38, (const unint64_t *)1, *(int8x16_t **)a3, (unint64_t *)a4, a7);
        bzero((void *)(*(_QWORD *)a3 + 8 * v24), (8 * (v17 - v24)));
        return;
      }
    }
    else
    {
      if (v34 >= 0x41 && *(_QWORD *)a3)
        operator delete[](*(void **)a3);
      *(_DWORD *)(a3 + 8) = v11;
      *(_QWORD *)a3 = operator new[](8 * v17);
      v35 = *(llvm::APInt **)__sz;
      if ((_DWORD)v24 != 1)
        goto LABEL_44;
    }
    v36 = *(_QWORD *)v35;
    v37 = *(_QWORD *)v35 / a2;
    **(_QWORD **)a3 = v37;
    bzero((void *)(*(_QWORD *)a3 + 8), ((v16 >> 3) - 8) & 0xFFFFFFF8);
    *(_QWORD *)a4 = v36 - v37 * a2;
    return;
  }
  v12 = *(_QWORD *)__sz / a2;
  *(_QWORD *)a4 = *(_QWORD *)__sz % a2;
  v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if (!(_DWORD)v11)
    v13 = 0;
  v14 = (_QWORD *)(v12 & v13);
  if (*(_DWORD *)(a3 + 8) >= 0x41u)
  {
LABEL_5:
    if (*(_QWORD *)a3)
      operator delete[](*(void **)a3);
  }
LABEL_7:
  *(_QWORD *)a3 = v14;
  *(_DWORD *)(a3 + 8) = v11;
}

const void **llvm::APInt::sadd_ov@<X0>(const void **this@<X0>, const llvm::APInt *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  const void **v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  uint64_t v25;
  _BOOL4 v26;
  unsigned int v27;
  const llvm::APInt *v28;
  BOOL v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v6 = this;
  v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    v13 = (char *)operator new[](((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v9 = (unint64_t)*v6;
    this = (const void **)memcpy(v13, (const void *)v9, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v16 = 0;
    v17 = 0;
    v10 = *(_QWORD *)a2;
    v18 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      v19 = *(_QWORD *)&v13[v16];
      v20 = *(_QWORD *)(v10 + v16);
      v21 = __CFADD__(v20, v19);
      v22 = v20 + v19;
      v23 = v21;
      v24 = v22 + 1 <= v19;
      if (v17)
      {
        ++v22;
        v17 = v24;
      }
      else
      {
        v17 = v23;
      }
      *(_QWORD *)&v13[v16] = v22;
      v16 += 8;
    }
    while (8 * v18 != v16);
    *(_QWORD *)&v13[8 * (v18 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v13;
    v14 = v8 - 1;
    v15 = *(_QWORD *)(v9 + 8 * ((v8 - 1) >> 6));
  }
  else
  {
    v9 = (unint64_t)*this;
    v10 = *(_QWORD *)a2;
    v11 = (unint64_t)*this + *(_QWORD *)a2;
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!(_DWORD)v8)
      v12 = 0;
    v13 = (char *)(v11 & v12);
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v11 & v12;
    v14 = v8 - 1;
    v15 = v9;
  }
  v25 = 1 << v14;
  v26 = (v15 & (1 << v14)) == 0;
  v27 = *((_DWORD *)a2 + 2);
  v28 = (const llvm::APInt *)(v10 + 8 * ((v27 - 1) >> 6));
  if (v27 < 0x41)
    v28 = a2;
  if (((v26 ^ (((*(_QWORD *)v28 >> (v27 - 1)) & 1) == 0)) & 1) != 0)
  {
    v29 = 0;
  }
  else
  {
    v30 = v14 >> 6;
    v31 = &v13[8 * v30];
    if (v8 < 0x41)
      v31 = (char *)a4;
    v32 = *(_QWORD *)v31 & v25;
    if (v8 >= 0x41)
      v9 = *(_QWORD *)(v9 + 8 * v30);
    v29 = (v32 == 0) ^ ((v9 & v25) == 0);
  }
  *a3 = v29;
  return this;
}

const void **llvm::APInt::uadd_ov@<X0>(const void **this@<X0>, uint64_t **a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  const void **v6;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  _BOOL8 v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = this;
  v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    v13 = (char *)operator new[](((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    this = (const void **)memcpy(v13, *v6, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v14 = 0;
    v15 = *a2;
    v16 = (unint64_t)(v8 + 63) >> 6;
    v17 = v13;
    v18 = *a2;
    v19 = v16;
    do
    {
      v20 = *v18++;
      v21 = v20 + *v17;
      v22 = __CFADD__(v20, *v17);
      v23 = (unint64_t)(v21 + 1) <= *v17;
      if (v14)
      {
        ++v21;
        v14 = v23;
      }
      else
      {
        v14 = v22;
      }
      *v17++ = v21;
      --v19;
    }
    while (v19);
    *(_QWORD *)&v13[8 * (v16 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v13;
    v24 = v15 - 1;
    v25 = v16;
    while (v25 * 8)
    {
      v26 = *(_QWORD *)&v13[v25 * 8 - 8];
      v27 = v24[v25--];
      if (v26 != v27)
      {
        v12 = v26 <= v27;
        goto LABEL_18;
      }
    }
    v12 = 0;
  }
  else
  {
    v9 = *a2;
    v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!(_DWORD)v8)
      v10 = 0;
    v11 = ((unint64_t)*this + (_QWORD)*a2) & v10;
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v11;
    v12 = v11 < (unint64_t)v9;
  }
LABEL_18:
  *a3 = v12;
  return this;
}

const void **llvm::APInt::ssub_ov@<X0>(const void **this@<X0>, const llvm::APInt *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  const void **v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  _BOOL4 v26;
  unsigned int v27;
  const llvm::APInt *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  BOOL v32;

  v6 = this;
  v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    v13 = (char *)operator new[](((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v9 = (unint64_t)*v6;
    this = (const void **)memcpy(v13, (const void *)v9, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v16 = 0;
    v17 = 0;
    v10 = *(_QWORD *)a2;
    v18 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      v19 = *(_QWORD *)&v13[v16];
      v20 = *(_QWORD *)(v10 + v16);
      v21 = v19 - v20;
      v22 = v19 < v20;
      v23 = v19 + ~v20;
      v24 = v23 >= v19;
      if (v17)
      {
        v17 = v24;
      }
      else
      {
        v23 = v21;
        v17 = v22;
      }
      *(_QWORD *)&v13[v16] = v23;
      v16 += 8;
    }
    while (8 * v18 != v16);
    *(_QWORD *)&v13[8 * (v18 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v13;
    v14 = v8 - 1;
    v15 = *(_QWORD *)(v9 + 8 * ((v8 - 1) >> 6));
  }
  else
  {
    v9 = (unint64_t)*this;
    v10 = *(_QWORD *)a2;
    v11 = (unint64_t)*this - *(_QWORD *)a2;
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!(_DWORD)v8)
      v12 = 0;
    v13 = (char *)(v11 & v12);
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v11 & v12;
    v14 = v8 - 1;
    v15 = v9;
  }
  v25 = 1 << v14;
  v26 = (v15 & (1 << v14)) == 0;
  v27 = *((_DWORD *)a2 + 2);
  v28 = (const llvm::APInt *)(v10 + 8 * ((v27 - 1) >> 6));
  if (v27 < 0x41)
    v28 = a2;
  if (v26 == (((*(_QWORD *)v28 >> (v27 - 1)) & 1) == 0))
  {
    v32 = 0;
  }
  else
  {
    v29 = v14 >> 6;
    v30 = &v13[8 * v29];
    if (v8 < 0x41)
      v30 = (char *)a4;
    v31 = *(_QWORD *)v30 & v25;
    if (v8 >= 0x41)
      v9 = *(_QWORD *)(v9 + 8 * v29);
    v32 = (v31 == 0) ^ ((v9 & v25) == 0);
  }
  *a3 = v32;
  return this;
}

const void **llvm::APInt::usub_ov@<X0>(const void **this@<X0>, unint64_t **a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  const void **v6;
  uint64_t v8;
  const void *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v6 = this;
  v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    v13 = (char *)operator new[](((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v14 = (char *)*v6;
    this = (const void **)memcpy(v13, v14, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v15 = 0;
    v16 = *a2;
    v17 = (unint64_t)(v8 + 63) >> 6;
    v18 = (unint64_t *)v13;
    v19 = v17;
    do
    {
      v20 = *v16++;
      v21 = *v18 - v20;
      v22 = *v18 < v20;
      v23 = *v18 + ~v20;
      if (v15)
      {
        v15 = v23 >= *v18;
      }
      else
      {
        v23 = v21;
        v15 = v22;
      }
      *v18++ = v23;
      --v19;
    }
    while (v19);
    *(_QWORD *)&v13[8 * (v17 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v13;
    v24 = 8 * v17;
    while (v24)
    {
      v25 = *(_QWORD *)&v13[v24 - 8];
      v26 = *(_QWORD *)&v14[v24 - 8];
      v24 -= 8;
      v12 = v25 > v26;
      if (v25 != v26)
        goto LABEL_13;
    }
  }
  else
  {
    v9 = *this;
    v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!(_DWORD)v8)
      v10 = 0;
    v11 = ((_BYTE *)*this - (_BYTE *)*a2) & v10;
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v11;
    v12 = v11 > (unint64_t)v9;
LABEL_13:
    LOBYTE(v24) = v12;
  }
  *a3 = v24;
  return this;
}

void llvm::APInt::sdiv_ov(llvm::APInt **this@<X0>, size_t __sz@<X1>, BOOL *x2_0@<X2>, llvm::APInt *a3@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  unint64_t v17;

  v4 = *((unsigned int *)this + 2);
  if (v4 > 0x40)
  {
    v5 = v4 - 1;
    v6 = (unint64_t *)*this;
    if (((*((_QWORD *)*this + ((v4 - 1) >> 6)) >> (v4 - 1)) & 1) != 0)
    {
      v7 = 0;
      v8 = (unint64_t)(v4 + 63) >> 6;
      v9 = (_DWORD)v8 << 6;
      v10 = v8 << 6;
      while (!*v6)
      {
        ++v6;
        v7 += 64;
        if (v10 == v7)
        {
          if (v4 >= v9)
            LODWORD(v4) = v9;
          if ((_DWORD)v4 != v5)
            goto LABEL_18;
          goto LABEL_11;
        }
      }
      v12 = __clz(__rbit64(*v6)) + v7;
      if (v4 >= v12)
        LODWORD(v4) = v12;
      if ((_DWORD)v4 == v5)
        goto LABEL_11;
    }
    goto LABEL_18;
  }
  if (*this != (llvm::APInt *)(1 << (v4 - 1)))
  {
LABEL_18:
    *x2_0 = 0;
    goto LABEL_14;
  }
LABEL_11:
  v11 = *(unsigned int *)(__sz + 8);
  if ((_DWORD)v11)
  {
    if (v11 > 0x40)
    {
      v13 = 0;
      v14 = (unint64_t)(v11 + 63) >> 6;
      v15 = *(_QWORD **)__sz;
      v16 = (_DWORD)v14 << 6;
      v17 = v14 << 6;
      while (*v15 == -1)
      {
        ++v15;
        v13 += 64;
        if (v17 == v13)
        {
          *x2_0 = v16 == (_DWORD)v11;
          goto LABEL_14;
        }
      }
      *x2_0 = __clz(__rbit64(~*v15)) + (_DWORD)v13 == (_DWORD)v11;
    }
    else
    {
      *x2_0 = *(_QWORD *)__sz == 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    }
  }
  else
  {
    *x2_0 = 1;
  }
LABEL_14:
  llvm::APInt::sdiv(this, __sz, a3);
}

void llvm::APInt::smul_ov(unint64_t **this@<X0>, size_t __sz@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  const unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  llvm::APInt *v19;
  int v20;
  unsigned int v21;
  void *v22;
  unint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  const unint64_t *v36;
  int v37;
  unint64_t v38;
  void *__s1;
  unsigned int v40;

  v8 = *((unsigned int *)this + 2);
  if (v8 <= 0x40)
  {
    v9 = *(const unint64_t **)__sz;
    v10 = *(_QWORD *)__sz * (_QWORD)*this;
    v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!(_DWORD)v8)
      v11 = 0;
    *(_DWORD *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v10 & v11;
    v12 = *(unsigned int *)(__sz + 8);
    if (v12 >= 0x41)
      goto LABEL_5;
LABEL_10:
    if (v9)
      goto LABEL_17;
LABEL_25:
    *a3 = 0;
    return;
  }
  v18 = (unint64_t)(v8 + 63) >> 6;
  v19 = (llvm::APInt *)operator new[](8 * v18);
  v9 = *(const unint64_t **)__sz;
  llvm::APInt::tcMultiply(v19, *this, *(const unint64_t **)__sz, (const unint64_t *)v18);
  *((_QWORD *)v19 + (v18 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
  *(_DWORD *)(a4 + 8) = v8;
  *(_QWORD *)a4 = v19;
  v12 = *(unsigned int *)(__sz + 8);
  if (v12 < 0x41)
    goto LABEL_10;
LABEL_5:
  v13 = 0;
  v14 = (unint64_t)(v12 + 63) >> 6;
  v15 = (_DWORD)v14 << 6;
  v16 = v14 + 1;
  while (1)
  {
    v17 = v9[(v16 - 2)];
    if (v17)
      break;
    v13 += 64;
    if (--v16 <= 1)
      goto LABEL_13;
  }
  v15 = __clz(v17) + v13;
LABEL_13:
  v20 = v12 | 0xFFFFFFC0;
  if ((v12 & 0x3F) == 0)
    v20 = 0;
  if ((v12 - v20 - v15) <= 0x40 && !*v9)
    goto LABEL_25;
LABEL_17:
  llvm::APInt::sdiv((llvm::APInt **)a4, __sz, (llvm::APInt *)&__s1);
  v21 = v40;
  if (v40 <= 0x40)
  {
    v22 = __s1;
    v23 = *this;
    if (__s1 != *this)
    {
      *a3 = 1;
      return;
    }
LABEL_22:
    v24 = *((unsigned int *)this + 2);
    v25 = v24 - 1;
    if (v24 > 0x40)
    {
      if (((v23[v25 >> 6] >> v25) & 1) != 0)
      {
        v26 = 0;
        v27 = (unint64_t)(v24 + 63) >> 6;
        v28 = (_DWORD)v27 << 6;
        v29 = v27 << 6;
        while (!*v23)
        {
          ++v23;
          v26 += 64;
          if (v29 == v26)
          {
            if (v24 >= v28)
              LODWORD(v24) = v28;
            if ((_DWORD)v24 != v25)
              goto LABEL_39;
            goto LABEL_33;
          }
        }
        v32 = __clz(__rbit64(*v23)) + v26;
        if (v24 >= v32)
          LODWORD(v24) = v32;
        if ((_DWORD)v24 == v25)
          goto LABEL_33;
      }
    }
    else if (v23 == (unint64_t *)(1 << v25))
    {
LABEL_33:
      v30 = *(unsigned int *)(__sz + 8);
      if ((_DWORD)v30)
      {
        if (v30 > 0x40)
        {
          v34 = 0;
          v35 = (unint64_t)(v30 + 63) >> 6;
          v36 = *(const unint64_t **)__sz;
          v37 = (_DWORD)v35 << 6;
          v38 = v35 << 6;
          while (*v36 == -1)
          {
            ++v36;
            v34 += 64;
            if (v38 == v34)
              goto LABEL_46;
          }
          v37 = __clz(__rbit64(~*v36)) + v34;
LABEL_46:
          v31 = v37 == (_DWORD)v30;
        }
        else
        {
          v31 = *(_QWORD *)__sz == 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
        }
        v33 = v31;
      }
      else
      {
        v33 = 1;
      }
LABEL_50:
      *a3 = v33;
      if (v21 < 0x41)
        return;
      goto LABEL_51;
    }
LABEL_39:
    v33 = 0;
    goto LABEL_50;
  }
  v22 = __s1;
  v23 = *this;
  if (!memcmp(__s1, *this, (((unint64_t)v40 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_22;
  *a3 = 1;
LABEL_51:
  if (v22)
    operator delete[](v22);
}

void llvm::APInt::umul_ov(llvm::APInt *this@<X0>, const unint64_t **a2@<X1>, BOOL *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t *v5;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  const unint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  llvm::APInt *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  llvm::APInt *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  const unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _BOOL8 v49;
  const unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  BOOL *v62;

  v5 = (unint64_t *)this;
  v7 = *((unsigned int *)this + 2);
  if (v7 > 0x40)
  {
    v17 = 0;
    v18 = (unint64_t)(v7 + 63) >> 6;
    v8 = *(_QWORD *)this;
    v19 = (_DWORD)v18 << 6;
    v20 = v18 + 1;
    while (1)
    {
      v21 = *(_QWORD *)(v8 + 8 * (v20 - 2));
      if (v21)
        break;
      v17 += 64;
      if (--v20 <= 1)
        goto LABEL_21;
    }
    v19 = __clz(v21) + v17;
LABEL_21:
    v25 = v7 | 0xFFFFFFC0;
    if ((v7 & 0x3F) == 0)
      v25 = 0;
    v9 = v19 + v25;
    v10 = *((unsigned int *)a2 + 2);
    if (v10 > 0x40)
    {
LABEL_3:
      v11 = 0;
      v12 = (unint64_t)(v10 + 63) >> 6;
      v13 = *a2;
      v14 = (_DWORD)v12 << 6;
      v15 = v12 + 1;
      while (1)
      {
        v16 = v13[(v15 - 2)];
        if (v16)
          break;
        v11 += 64;
        if (--v15 <= 1)
          goto LABEL_12;
      }
      v14 = __clz(v16) + v11;
LABEL_12:
      if ((v10 & 0x3F) != 0)
        v22 = v10 | 0xFFFFFFC0;
      else
        v22 = 0;
      if (v9 + v14 + v22 + 2 <= v7)
        goto LABEL_16;
      goto LABEL_25;
    }
  }
  else
  {
    v8 = *(_QWORD *)this;
    v9 = v7 + __clz(*(_QWORD *)this) - 64;
    v10 = *((unsigned int *)a2 + 2);
    if (v10 > 0x40)
      goto LABEL_3;
  }
  v13 = *a2;
  if (v9 + v10 + __clz((unint64_t)*a2) - 64 + 2 <= v7)
  {
LABEL_16:
    *a3 = 1;
    if (v7 > 0x40)
    {
      v31 = (unint64_t)(v7 + 63) >> 6;
      v24 = (llvm::APInt *)operator new[](8 * v31);
      llvm::APInt::tcMultiply(v24, (unint64_t *)*v5, *a2, (const unint64_t *)v31);
      *((_QWORD *)v24 + (v31 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    }
    else
    {
      v23 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      if (!(_DWORD)v7)
        v23 = 0;
      v24 = (llvm::APInt *)(((_QWORD)*a2 * *(_QWORD *)this) & v23);
    }
    *((_DWORD *)a4 + 2) = v7;
    *a4 = (uint64_t)v24;
    return;
  }
LABEL_25:
  if (v7 > 0x40)
  {
    v62 = a3;
    v32 = v7 + 63;
    v33 = operator new[](((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    memcpy(v33, (const void *)v8, ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    v34 = 0;
    v35 = (unint64_t)(v7 + 63) >> 6;
    v36 = *v33 >> 1;
    *v33 = v36;
    v37 = 8 * v35;
    do
    {
      v38 = &v33[v34 / 8];
      v39 = v33[v34 / 8 + 1];
      v40 = v36 | (v39 << 63);
      v36 = v39 >> 1;
      *v38 = v40;
      v38[1] = v39 >> 1;
      v34 += 8;
    }
    while (v37 - 8 != v34);
    v30 = (llvm::APInt *)operator new[](8 * (v32 >> 6));
    llvm::APInt::tcMultiply(v30, v33, v13, (const unint64_t *)(v32 >> 6));
    v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    *((_QWORD *)v30 + (v35 - 1)) &= v41;
    *((_DWORD *)a4 + 2) = v7;
    *a4 = (uint64_t)v30;
    operator delete[](v33);
    a3 = v62;
    *v62 = (*((_QWORD *)v30 + ((v7 - 1) >> 6)) >> (v7 - 1)) & 1;
    v42 = (uint64_t *)((char *)v30 + v37 - 8);
    v43 = 2 * *v42;
    *v42 = v43;
    v44 = v35 - 2;
    do
    {
      *v42 = v43 | (*((_QWORD *)v30 + v44) >> 63);
      v42 = (uint64_t *)((char *)v30 + 8 * v44);
      v43 = 2 * *v42;
      *v42 = v43;
    }
    while ((unint64_t)v44--);
    *((_QWORD *)v30 + (v35 - 1)) &= v41;
    if (*((_DWORD *)v5 + 2) < 0x41u)
      goto LABEL_42;
LABEL_41:
    v5 = (unint64_t *)*v5;
    goto LABEL_42;
  }
  v26 = 0xFFFFFFFFFFFFFFFFLL >> ((v7 - 1) & 0x3F ^ 0x3F);
  if (!(_DWORD)v7)
    v26 = 0;
  v27 = v8 >> 1;
  if ((_DWORD)v7 == 1)
    v27 = 0;
  v28 = ((_QWORD)v13 * v27) & v26;
  *((_DWORD *)a4 + 2) = v7;
  *a3 = (v28 >> (v7 - 1)) & 1;
  v29 = 2 * v28;
  if ((_DWORD)v7 == 1)
    v29 = 0;
  v30 = (llvm::APInt *)(v29 & v26);
  *a4 = v29 & v26;
  if (*((_DWORD *)this + 2) >= 0x41u)
    goto LABEL_41;
LABEL_42:
  if ((*(_BYTE *)v5 & 1) != 0)
  {
    if (v7 >= 0x41)
    {
      v49 = 0;
      v50 = *a2;
      v51 = (unint64_t)(v7 + 63) >> 6;
      v52 = v51;
      do
      {
        v53 = *v50++;
        v54 = v53 + *(_QWORD *)v30;
        v55 = __CFADD__(v53, *(_QWORD *)v30);
        v56 = (unint64_t)(v54 + 1) <= *(_QWORD *)v30;
        if (v49)
        {
          ++v54;
          v49 = v56;
        }
        else
        {
          v49 = v55;
        }
        *(_QWORD *)v30 = v54;
        v30 = (llvm::APInt *)((char *)v30 + 8);
        --v52;
      }
      while (v52);
      v57 = *a4;
      *(_QWORD *)(v57 + 8 * (v51 - 1)) = *(_QWORD *)(*a4 + 8 * (v51 - 1)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v7);
      v58 = v51;
      v59 = v57 - 8;
      while (v58 * 8)
      {
        v60 = *(_QWORD *)(v59 + v58 * 8);
        v61 = (*a2)[--v58];
        if (v60 != v61)
        {
          if (v60 > v61)
            return;
          goto LABEL_60;
        }
      }
    }
    else
    {
      v46 = *a2;
      v47 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
      if (!(_DWORD)v7)
        v47 = 0;
      v48 = ((unint64_t)*a2 + (_QWORD)v30) & v47;
      *a4 = v48;
      if (v48 < (unint64_t)v46)
LABEL_60:
        *a3 = 1;
    }
  }
}

void llvm::APInt::toString(uint64_t a1, _QWORD *a2, unsigned int a3, char a4, int a5, int a6)
{
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  char v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  unint64_t v70;
  char v71;
  int v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  void *__p;
  unsigned int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    v10 = "";
    v11 = *(unsigned int *)(a1 + 8);
    if (v11 > 0x40)
      goto LABEL_3;
LABEL_11:
    v19 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_36;
    if (a6)
      v20 = 36;
    else
      v20 = 0;
    if ((a4 & 1) != 0)
    {
      v19 = (uint64_t)(v19 << -(char)v11) >> -(char)v11;
      if ((v19 & 0x8000000000000000) != 0)
      {
        v21 = a2[1];
        if ((unint64_t)(v21 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v21 + 1, 1);
          v21 = a2[1];
        }
        *(_BYTE *)(*a2 + v21) = 45;
        ++a2[1];
        v19 = -(uint64_t)v19;
      }
    }
    v22 = *v10;
    if (*v10)
    {
      v23 = a2[1];
      v24 = (unsigned __int8 *)(v10 + 1);
      do
      {
        if ((unint64_t)(v23 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v23 + 1, 1);
          v23 = a2[1];
        }
        *(_BYTE *)(*a2 + v23) = v22;
        v23 = a2[1] + 1;
        a2[1] = v23;
        v25 = *v24++;
        v22 = v25;
      }
      while (v25);
    }
    if (v19)
    {
      v26 = 64;
      do
      {
        *((_BYTE *)&__p + v26--) = llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL,BOOL)const::BothDigits[v20 + v19 % a3];
        v27 = v19 >= a3;
        v19 /= a3;
      }
      while (v27);
      v28 = v26 + 1;
      v29 = 64 - v26;
      v30 = a2[1];
      v31 = v30 + 64 - v26;
      if (a2[2] >= v31)
        goto LABEL_30;
    }
    else
    {
      v28 = 65;
      v29 = 0;
      v30 = a2[1];
      v31 = v30;
      if (a2[2] >= v30)
        goto LABEL_30;
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v31, 1);
    v30 = a2[1];
LABEL_30:
    if (v28 != 65)
    {
      memcpy((void *)(*a2 + v30), (char *)&__p + v28, v29);
      v30 = a2[1];
    }
    a2[1] = v30 + v29;
    return;
  }
  HIDWORD(v9) = a3;
  LODWORD(v9) = a3 - 2;
  v10 = off_1E0E558E0[(int)(v9 >> 1)];
  v11 = *(unsigned int *)(a1 + 8);
  if (v11 <= 0x40)
    goto LABEL_11;
LABEL_3:
  v12 = 0;
  v13 = (unint64_t)(v11 + 63) >> 6;
  v14 = *(_QWORD **)a1;
  v15 = (_DWORD)v13 << 6;
  v16 = v13 + 1;
  do
  {
    v17 = v14[(v16 - 2)];
    if (v17)
    {
      v32 = __clz(v17) + v12;
      v33 = v11 | 0xFFFFFFC0;
      if ((v11 & 0x3F) == 0)
        v33 = 0;
      if (v32 + v33 == (_DWORD)v11)
        goto LABEL_36;
LABEL_42:
      if (a6)
        v38 = 36;
      else
        v38 = 0;
      v82 = v11;
      __p = operator new[](((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      memcpy(__p, v14, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      if ((a4 & 1) != 0 && ((v14[(v11 - 1) >> 6] >> (v11 - 1)) & 1) != 0)
      {
        llvm::APInt::negate((llvm::APInt *)&__p);
        v42 = a2[1];
        if ((unint64_t)(v42 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v42 + 1, 1);
          v42 = a2[1];
        }
        *(_BYTE *)(*a2 + v42) = 45;
        ++a2[1];
      }
      v43 = &llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL,BOOL)const::BothDigits[v38];
      v44 = *v10;
      if (*v10)
      {
        v45 = a2[1];
        v46 = (unsigned __int8 *)(v10 + 1);
        do
        {
          if ((unint64_t)(v45 + 1) > a2[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v45 + 1, 1);
            v45 = a2[1];
          }
          *(_BYTE *)(*a2 + v45) = v44;
          v45 = a2[1] + 1;
          a2[1] = v45;
          v47 = *v46++;
          v44 = v47;
        }
        while (v47);
      }
      else
      {
        v45 = a2[1];
      }
      if (a3 == 2 || a3 == 8)
      {
        if (a3 == 8)
          v48 = 3;
        else
          v48 = 1;
      }
      else
      {
        if (a3 != 16)
        {
          v68 = v45;
          v51 = v82;
          if (v82 > 0x40)
            goto LABEL_108;
          while (__p)
          {
            while (1)
            {
              v80 = 0;
              llvm::APInt::udivrem((size_t)&__p, a3, (uint64_t)&__p, (llvm::APInt *)&v80, v39, v40, v41);
              v78 = v43[v80];
              v79 = a2[1];
              if ((unint64_t)(v79 + 1) > a2[2])
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v79 + 1, 1);
                v79 = a2[1];
              }
              *(_BYTE *)(*a2 + v79) = v78;
              v68 = a2[1] + 1;
              a2[1] = v68;
              v51 = v82;
              if (v82 <= 0x40)
                break;
LABEL_108:
              v72 = 0;
              v73 = (unint64_t)(v51 + 63) >> 6;
              v74 = (_DWORD)v73 << 6;
              v75 = v73 + 1;
              while (1)
              {
                v76 = *((_QWORD *)__p + (v75 - 2));
                if (v76)
                  break;
                v72 += 64;
                if (--v75 <= 1)
                  goto LABEL_113;
              }
              v74 = __clz(v76) + v72;
LABEL_113:
              v77 = v51 | 0xFFFFFFC0;
              if ((v51 & 0x3F) == 0)
                v77 = 0;
              if (v74 + v77 == (_DWORD)v51)
                goto LABEL_95;
            }
          }
          goto LABEL_95;
        }
        v48 = 4;
      }
      v49 = v48;
      v50 = 64 - v48;
      LODWORD(v51) = v82;
      while (v51 < 0x41)
      {
        LODWORD(v52) = (_DWORD)__p;
        if (!__p)
          goto LABEL_94;
LABEL_86:
        v61 = v43[v52 & (a3 - 1)];
        v62 = a2[1];
        if ((unint64_t)(v62 + 1) > a2[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v62 + 1, 1);
          v62 = a2[1];
        }
        *(_BYTE *)(*a2 + v62) = v61;
        ++a2[1];
        v51 = v82;
        if (v82 > 0x40)
        {
          v63 = (char *)__p;
          v64 = *(_QWORD *)__p >> v49;
          *(_QWORD *)__p = v64;
          v65 = (unint64_t *)(v63 + 8);
          v66 = ((unint64_t)(v51 + 63) >> 6) - 1;
          do
          {
            v67 = *v65;
            *(v65 - 1) = (*v65 << v50) | v64;
            v64 = v67 >> v49;
            *v65++ = v67 >> v49;
            --v66;
          }
          while (v66);
        }
        else if (v82 == v49)
        {
          __p = 0;
        }
        else
        {
          __p = (void *)((unint64_t)__p >> v49);
        }
      }
      v53 = 0;
      v54 = ((unint64_t)v51 + 63) >> 6;
      v55 = (_DWORD)v54 << 6;
      v56 = v54 + 1;
      while (1)
      {
        v57 = *((_QWORD *)__p + (v56 - 2));
        if (v57)
          break;
        v53 += 64;
        if (--v56 <= 1)
        {
          v58 = v51 | 0xFFFFFFC0;
          if ((v51 & 0x3F) == 0)
            v58 = 0;
          if (v55 + v58 == (_DWORD)v51)
            goto LABEL_94;
LABEL_85:
          v52 = *(_QWORD *)__p;
          goto LABEL_86;
        }
      }
      v59 = __clz(v57) + v53;
      v60 = v51 | 0xFFFFFFC0;
      if ((v51 & 0x3F) == 0)
        v60 = 0;
      if (v59 + v60 != (_DWORD)v51)
        goto LABEL_85;
LABEL_94:
      v68 = a2[1];
LABEL_95:
      if (v45 != v68)
      {
        v69 = (_BYTE *)(*a2 + v68 - 1);
        if ((unint64_t)v69 > *a2 + (unint64_t)v45)
        {
          v70 = v45 + *a2 + 1;
          do
          {
            v71 = *(_BYTE *)(v70 - 1);
            *(_BYTE *)(v70 - 1) = *v69;
            *v69-- = v71;
            v27 = v70++ >= (unint64_t)v69;
          }
          while (!v27);
          LODWORD(v51) = v82;
        }
      }
      if (v51 >= 0x41)
      {
        if (__p)
          operator delete[](__p);
      }
      return;
    }
    v12 += 64;
    --v16;
  }
  while (v16 > 1);
  v18 = v11 | 0xFFFFFFC0;
  if ((v11 & 0x3F) == 0)
    v18 = 0;
  if (v15 + v18 != (_DWORD)v11)
    goto LABEL_42;
LABEL_36:
  v34 = *v10;
  if (*v10)
  {
    v35 = a2[1];
    v36 = (unsigned __int8 *)(v10 + 1);
    do
    {
      if ((unint64_t)(v35 + 1) > a2[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v35 + 1, 1);
        v35 = a2[1];
      }
      *(_BYTE *)(*a2 + v35) = v34;
      v35 = a2[1] + 1;
      a2[1] = v35;
      v37 = *v36++;
      v34 = v37;
    }
    while (v37);
  }
  else
  {
    v35 = a2[1];
  }
  if ((unint64_t)(v35 + 1) > a2[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v35 + 1, 1);
    v35 = a2[1];
  }
  *(_BYTE *)(*a2 + v35) = 48;
  ++a2[1];
}

void llvm::APInt::print(llvm::APInt *this, llvm::raw_ostream *a2, char a3)
{
  void *v4;
  __int128 v5;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x1E0C80C00];
  v4 = v6;
  v5 = xmmword_181233150;
  llvm::APInt::toString((uint64_t)this, &v4, 0xAu, a3, 0, 1);
  llvm::raw_ostream::write(a2, (const char *)v4, v5);
  if (v4 != v6)
    free(v4);
}

void llvm::APInt::tcSet(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  *(_QWORD *)this = a2;
  if (a3 >= 2)
    bzero((char *)this + 8, 8 * (a3 - 2) + 8);
}

uint64_t llvm::APInt::tcAssign(uint64_t this, unint64_t *a2, const unint64_t *a3)
{
  uint64_t v3;
  unint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a3)
  {
    v3 = 0;
    if (a3 < 4)
      goto LABEL_7;
    if ((unint64_t)(this - (_QWORD)a2) < 0x20)
      goto LABEL_7;
    v3 = a3 & 0xFFFFFFFC;
    v4 = a2 + 2;
    v5 = (_OWORD *)(this + 16);
    v6 = v3;
    do
    {
      v7 = *(_OWORD *)v4;
      *(v5 - 1) = *((_OWORD *)v4 - 1);
      *v5 = v7;
      v4 += 4;
      v5 += 2;
      v6 -= 4;
    }
    while (v6);
    if (v3 != a3)
    {
LABEL_7:
      v8 = &a2[v3];
      v9 = (_QWORD *)(this + 8 * v3);
      v10 = a3 - v3;
      do
      {
        v11 = *v8++;
        *v9++ = v11;
        --v10;
      }
      while (v10);
    }
  }
  return this;
}

BOOL llvm::APInt::tcIsZero(llvm::APInt *this, const unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  if (!(_DWORD)a2)
    return 1;
  if (*(_QWORD *)this)
    return 0;
  v3 = 1;
  do
  {
    v4 = v3;
    if (a2 == v3)
      break;
  }
  while (!*((_QWORD *)this + v3++));
  return v4 >= a2;
}

uint64_t llvm::APInt::tcExtractBit(llvm::APInt *this, const unint64_t *a2)
{
  return (*((_QWORD *)this + (a2 >> 6)) >> (char)a2) & 1;
}

uint64_t llvm::APInt::tcSetBit(uint64_t this, unint64_t *a2)
{
  *(_QWORD *)(this + 8 * (a2 >> 6)) |= 1 << (char)a2;
  return this;
}

uint64_t llvm::APInt::tcClearBit(uint64_t this, unint64_t *a2)
{
  *(_QWORD *)(this + 8 * (a2 >> 6)) &= ~(1 << (char)a2);
  return this;
}

uint64_t llvm::APInt::tcLSB(llvm::APInt *this, const unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (!(_DWORD)a2)
    return 0xFFFFFFFFLL;
  v2 = 0;
  while (1)
  {
    v4 = *(_QWORD *)this;
    this = (llvm::APInt *)((char *)this + 8);
    v3 = v4;
    if (v4)
      break;
    v2 -= 64;
    if (!(((unint64_t)a2 << 6) + v2))
      return 0xFFFFFFFFLL;
  }
  return __clz(__rbit64(v3)) - v2;
}

uint64_t llvm::APInt::tcMSB(llvm::APInt *this, const unint64_t *a2)
{
  int v2;
  unsigned int v3;
  unint64_t v4;

  v2 = 64 - ((_DWORD)a2 << 6);
  v3 = (_DWORD)a2 - 1;
  while (1)
  {
    v4 = *((_QWORD *)this + v3);
    if (v4)
      break;
    v2 += 64;
    if (--v3 == -1)
      return 0xFFFFFFFFLL;
  }
  return (__clz(v4) - v2) ^ 0x3F;
}

void llvm::APInt::tcExtract(llvm::APInt *this, unint64_t *a2, uint64_t a3, const unint64_t *a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;

  v5 = (_DWORD)a4 + 63;
  v6 = ((_DWORD)a4 + 63) >> 6;
  v7 = a5 >> 6;
  if ((_DWORD)a4 == 0 || a4 >= 0xFFFFFFC1)
  {
    v8 = a5 & 0x3F;
    goto LABEL_12;
  }
  if (v5 < 0x200 || (v9 = 8 * v7 + a3, (unint64_t)this - v9 < 0x20))
  {
    v10 = 0;
LABEL_6:
    v11 = v6 - v10;
    v12 = 8 * v10;
    v13 = (_QWORD *)((char *)this + 8 * v10);
    v14 = (uint64_t *)(a3 + v12 + 8 * v7);
    do
    {
      v15 = *v14++;
      *v13++ = v15;
      --v11;
    }
    while (v11);
    goto LABEL_8;
  }
  v10 = v6 & 0x3FFFFFC;
  v25 = (__int128 *)(v9 + 16);
  v26 = (_OWORD *)((char *)this + 16);
  v27 = v10;
  do
  {
    v28 = *v25;
    *(v26 - 1) = *(v25 - 1);
    *v26 = v28;
    v25 += 2;
    v26 += 2;
    v27 -= 4;
  }
  while (v27);
  if (v10 != v6)
    goto LABEL_6;
LABEL_8:
  v8 = a5 & 0x3F;
  if ((a5 & 0x3F) != 0)
  {
    v16 = *(_QWORD *)this >> v8;
    *(_QWORD *)this = v16;
    if ((_DWORD)v6 != 1)
    {
      v17 = 0;
      do
      {
        v18 = (uint64_t *)((char *)this + 8 * v17);
        v19 = v17 + 1;
        v20 = 8 * (v17 + 1);
        *v18 = (*(_QWORD *)((char *)this + v20) << (64 - v8)) | v16;
        v16 = *(_QWORD *)((char *)this + v20) >> v8;
        v18[1] = v16;
        v17 = v19;
      }
      while (v6 - 1 != v19);
    }
  }
LABEL_12:
  v21 = (v5 & 0xFFFFFFC0) - v8;
  if (v21 >= a4)
  {
    if (v21 <= a4 || (a4 & 0x3F) == 0)
      goto LABEL_18;
    v23 = 8 * (v6 - 1);
    v24 = *(_QWORD *)((_BYTE *)this + v23) & (0xFFFFFFFFFFFFFFFFLL >> -(a4 & 0x3F));
  }
  else
  {
    v22 = (*(_QWORD *)(a3 + 8 * (v7 + v6)) & (0xFFFFFFFFFFFFFFFFLL >> (v21
                                                                                     - a4))) << v21;
    v23 = 8 * (v6 - 1);
    v24 = v22 | *(_QWORD *)((char *)this + v23);
  }
  *(_QWORD *)((char *)this + v23) = v24;
LABEL_18:
  if (v6 < a2)
    bzero((char *)this + ((v5 >> 3) & 0x1FFFFFF8), 8 * (~(_DWORD)v6 + (_DWORD)a2) + 8);
}

int8x16_t *llvm::APInt::tcNegate(int8x16_t *this, unint64_t *a2)
{
  uint64_t v2;
  int8x16_t *v3;
  uint64_t v4;
  int8x16_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  BOOL v12;

  if (!(_DWORD)a2)
    return this;
  if (a2 < 4)
  {
    v2 = 0;
LABEL_7:
    v6 = a2 - v2;
    v7 = &this->i64[v2];
    do
    {
      *v7 = ~*v7;
      ++v7;
      --v6;
    }
    while (v6);
    goto LABEL_9;
  }
  v2 = a2 & 0xFFFFFFFC;
  v3 = this + 1;
  v4 = v2;
  do
  {
    v5 = vmvnq_s8(*v3);
    v3[-1] = vmvnq_s8(v3[-1]);
    *v3 = v5;
    v3 += 2;
    v4 -= 4;
  }
  while (v4);
  if (v2 != a2)
    goto LABEL_7;
LABEL_9:
  v8 = this->i64[0] + 1;
  this->i64[0] = v8;
  if ((_DWORD)a2 != 1 && !v8)
  {
    v9 = this->i64[1];
    this->i64[1] = v9 + 1;
    if (v9 == -1)
    {
      v10 = this + 1;
      v11 = a2 - 2;
      do
      {
        if (!v11)
          break;
        --v11;
        v12 = __CFADD__(v10->i64[0]++, 1);
        v10 = (int8x16_t *)((char *)v10 + 8);
      }
      while (v12);
    }
  }
  return this;
}

void llvm::APInt::tcFullMultiply(llvm::APInt *this, unint64_t *a2, unint64_t *a3, const unint64_t *a4, const unint64_t *a5)
{
  const unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::APInt *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t *v17;
  llvm::APInt *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  do
  {
    v8 = a5;
    a5 = a4;
    v9 = a3;
    a3 = a2;
    a2 = v9;
    a4 = v8;
  }
  while (a5 > v8);
  *(_QWORD *)this = 0;
  if (v8 >= 2)
    bzero((char *)this + 8, 8 * ((_DWORD)v8 - 2) + 8);
  if ((_DWORD)a5)
  {
    if (v8 < (int)v8 + 1)
      v10 = v8;
    else
      v10 = ((_DWORD)v8 + 1);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = this;
      v13 = a5;
      do
      {
        v14 = a3[v11];
        if (v14)
        {
          v15 = 0;
          v16 = a3[v11];
          v17 = v9;
          v18 = v12;
          v19 = v10;
          do
          {
            v21 = *v17++;
            v20 = v21;
            if (v21)
            {
              v22 = v20 * (unint64_t)v16;
              v23 = HIDWORD(v20);
              v24 = v20 * (unint64_t)HIDWORD(v14);
              v25 = HIDWORD(v24) + HIDWORD(v20) * (unint64_t)HIDWORD(v14);
              v26 = v20 * v14;
              v27 = __CFADD__(v26, v15);
              v15 += v26;
              v28 = v27;
              if (v26 >= v22 + (v24 << 32))
                v20 = (__PAIR128__(v28, v22)
                     + __PAIR128__(v25 + ((v23 * (unint64_t)v16) >> 32), v24 << 32)) >> 64;
              else
                v20 = ((__PAIR128__(v28, v22)
                      + __PAIR128__(v25 + ((v23 * (unint64_t)v16) >> 32), v24 << 32)) >> 64)
                    + 1;
            }
            if (__CFADD__(v15, *(_QWORD *)v18))
              ++v20;
            *(_QWORD *)v18 += v15;
            v18 = (llvm::APInt *)((char *)v18 + 8);
            v15 = v20;
            --v19;
          }
          while (v19);
        }
        else
        {
          v29 = 0;
          do
          {
            v30 = *(_QWORD *)((char *)v12 + v14);
            v20 = __CFADD__(v29, v30);
            *(_QWORD *)((char *)v12 + v14) = v30 + v29;
            v14 += 8;
            v29 = v20;
          }
          while (8 * v10 != v14);
        }
        if ((_DWORD)v8 != -1)
          *((_QWORD *)this + v11 + v8) = v20;
        ++v11;
        v12 = (llvm::APInt *)((char *)v12 + 8);
      }
      while (v11 != v13);
    }
    else if ((_DWORD)v8 != -1)
    {
      bzero((char *)this + 8 * v8, 8 * a5);
    }
  }
}

void *llvm::StoreIntToMemory(llvm **this, const llvm::APInt *__dst, size_t __n)
{
  llvm *v4;

  if (*((_DWORD *)this + 2) >= 0x41u)
    v4 = *this;
  else
    v4 = (llvm *)this;
  return memcpy(__dst, v4, __n);
}

void *llvm::LoadIntFromMemory(llvm *this, llvm::APInt *a2, size_t __n)
{
  if (*((_DWORD *)this + 2) >= 0x41u)
    this = *(llvm **)this;
  return memcpy(this, a2, __n);
}

_UNKNOWN **llvm::ARMBuildAttrs::getARMAttributeTags(llvm::ARMBuildAttrs *this)
{
  return &ARMAttributeTags;
}

void *llvm::ARMAttributeParser::stringAttribute@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v6 = llvm::ELFAttrs::attrTypeAsString(a2, a1[14], a1[15], 0);
  v8 = v7;
  result = llvm::DataExtractor::getCStrRef(a1 + 16, a1 + 19, a1 + 20);
  v11 = a1[13];
  if (v11)
  {
    v12 = result;
    v13 = v10;
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v11 + 248))(a1[13], "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 64))(a1[13], "Tag", 3, a2);
    if (v8)
      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1[13] + 232))(a1[13], "TagName", 7, v6, v8);
    (*(void (**)(_QWORD, const char *, uint64_t, void *, uint64_t))(*(_QWORD *)a1[13] + 232))(a1[13], "Value", 5, v12, v13);
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 256))(v11);
  }
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::CPU_arch(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "CPU_arch", a2, (uint64_t)CPU_arch_strings, 0x17uLL, a3);
}

uint64_t *llvm::ARMAttributeParser::CPU_arch_profile@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ULEB128;
  const char *v7;
  uint64_t v8;
  uint64_t *result;

  ULEB128 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
  v7 = "Unknown";
  v8 = 7;
  switch(ULEB128)
  {
    case 'A':
      v7 = "Application";
      v8 = 11;
      break;
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
      break;
    case 'M':
      v7 = "Microcontroller";
      v8 = 15;
      break;
    case 'R':
      v7 = "Real-time";
      v8 = 9;
      break;
    case 'S':
      v7 = "Classic";
      v8 = 7;
      break;
    default:
      if (!ULEB128)
      {
        v8 = 4;
        v7 = "None";
      }
      break;
  }
  result = llvm::ELFAttributeParser::printAttribute(a1, a2, ULEB128, (uint64_t)v7, v8);
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::ARM_ISA_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ARM_ISA_use", a2, (uint64_t)&llvm::ARMAttributeParser::ARM_ISA_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::THUMB_ISA_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "THUMB_ISA_use", a2, (uint64_t)&llvm::ARMAttributeParser::THUMB_ISA_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::FP_arch(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "FP_arch", a2, (uint64_t)&llvm::ARMAttributeParser::FP_arch(llvm::ARMBuildAttrs::AttrType)::strings, 9uLL, a3);
}

void llvm::ARMAttributeParser::WMMX_arch(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "WMMX_arch", a2, (uint64_t)&llvm::ARMAttributeParser::WMMX_arch(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::Advanced_SIMD_arch(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "Advanced_SIMD_arch", a2, (uint64_t)&llvm::ARMAttributeParser::Advanced_SIMD_arch(llvm::ARMBuildAttrs::AttrType)::strings, 5uLL, a3);
}

void llvm::ARMAttributeParser::MVE_arch(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "MVE_arch", a2, (uint64_t)&llvm::ARMAttributeParser::MVE_arch(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::PCS_config(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "PCS_config", a2, (uint64_t)&llvm::ARMAttributeParser::PCS_config(llvm::ARMBuildAttrs::AttrType)::strings, 8uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_R9_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_R9_use", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_R9_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_RW_data(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_RW_data", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_RW_data(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_RO_data(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_RO_data", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_RO_data(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_GOT_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_GOT_use", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_GOT_use(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_wchar_t(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_wchar_t", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_PCS_wchar_t(llvm::ARMBuildAttrs::AttrType)::strings, 5uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_rounding(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_rounding", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_rounding(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_denormal(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_denormal", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_denormal(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_exceptions(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_exceptions", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_exceptions(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_user_exceptions(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_user_exceptions", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_user_exceptions(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_number_model(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_number_model", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_number_model(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_align_needed(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t ULEB128;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  std::string *v13;
  void *p_p;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  void *v21;
  char v22;
  std::string v23;
  void *__p;
  __int128 v25;
  std::string v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  ULEB128 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
  v7 = ULEB128;
  __p = 0;
  v25 = 0uLL;
  if (ULEB128 <= 3)
  {
    v8 = llvm::ARMAttributeParser::ABI_align_needed(llvm::ARMBuildAttrs::AttrType)::strings[ULEB128];
LABEL_11:
    MEMORY[0x186DA1308](&__p, v8);
    goto LABEL_12;
  }
  if (ULEB128 > 0xC)
  {
    v8 = "Invalid";
    goto LABEL_11;
  }
  v9 = 0;
  v10 = 1 << ULEB128;
  do
  {
    v26.__r_.__value_.__s.__data_[v9-- + 20] = (v10 % 0xA) | 0x30;
    v11 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v11);
  v12 = -v9;
  if ((unint64_t)-v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v12 <= 0x16)
  {
    *((_BYTE *)&v23.__r_.__value_.__s + 23) = -(char)v9;
    v13 = &v23;
    if (!v9)
      goto LABEL_25;
LABEL_24:
    memcpy(v13, (char *)&v26.__r_.__value_.__r.__words[2] + v9 + 5, -v9);
    v13 = (std::string *)((char *)v13 - v9);
    goto LABEL_25;
  }
  v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17)
    v16 = v12 | 7;
  v17 = v16 + 1;
  v13 = (std::string *)operator new(v16 + 1);
  v23.__r_.__value_.__l.__size_ = -v9;
  v23.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  if (v9)
    goto LABEL_24;
LABEL_25:
  v13->__r_.__value_.__s.__data_[0] = 0;
  v18 = std::string::insert(&v23, 0, "8-byte alignment, ");
  v19 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v26, "-byte extended alignment");
  v21 = (void *)v20->__r_.__value_.__r.__words[0];
  v27[0] = v20->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  __p = v21;
  *(_QWORD *)&v25 = v27[0];
  *(_QWORD *)((char *)&v25 + 7) = *(_QWORD *)((char *)v27 + 7);
  HIBYTE(v25) = v22;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
LABEL_12:
  if (v25 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v25 >= 0)
    v15 = HIBYTE(v25);
  else
    v15 = v25;
  llvm::ELFAttributeParser::printAttribute(a1, a2, v7, (uint64_t)p_p, v15);
  *a3 = 0;
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
}

void llvm::ARMAttributeParser::ABI_align_preserved(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t ULEB128;
  uint64_t v7;
  const char *v8;
  size_t v9;
  std::string::size_type v10;
  std::string *p_dst;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  std::string *p_p;
  std::string::size_type size;
  void *v30[4];
  void *v31;
  std::string::size_type v32;
  int64_t v33;
  std::string v34;
  std::string __p;
  _QWORD v36[2];
  std::string __dst;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  ULEB128 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
  v7 = ULEB128;
  memset(&__p, 0, sizeof(__p));
  if (ULEB128 <= 3)
  {
    v8 = llvm::ARMAttributeParser::ABI_align_preserved(llvm::ARMBuildAttrs::AttrType)::strings[ULEB128];
    v9 = strlen(v8);
    if (v9 <= 0x7FFFFFFFFFFFFFF7)
    {
      v10 = v9;
      if (v9 >= 0x17)
      {
        v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17)
          v17 = v9 | 7;
        v18 = v17 + 1;
        p_dst = (std::string *)operator new(v17 + 1);
        __dst.__r_.__value_.__l.__size_ = v10;
        __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
        p_dst = &__dst;
        if (!v9)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_6:
            __p = __dst;
            goto LABEL_36;
          }
LABEL_19:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_6;
        }
      }
      memmove(p_dst, v8, v10);
      p_dst->__r_.__value_.__s.__data_[v10] = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_19;
    }
LABEL_49:
    abort();
  }
  if (ULEB128 > 0xC)
  {
    MEMORY[0x186DA1308](&__p, "Invalid");
    goto LABEL_36;
  }
  v12 = 0;
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = xmmword_18125D370;
  strcpy(v34.__r_.__value_.__l.__data_, "8-byte stack alignment, ");
  v13 = 1 << v7;
  do
  {
    __dst.__r_.__value_.__s.__data_[v12-- + 20] = (v13 % 0xA) | 0x30;
    v14 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v14);
  v15 = -v12;
  if ((unint64_t)-v12 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_49;
  if (v15 <= 0x16)
  {
    HIBYTE(v33) = -(char)v12;
    v16 = &v31;
    if (!v12)
      goto LABEL_24;
LABEL_23:
    memcpy(v16, (char *)&__dst.__r_.__value_.__r.__words[2] + v12 + 5, -v12);
    v16 -= v12;
    goto LABEL_24;
  }
  v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v15 | 7) != 0x17)
    v19 = v15 | 7;
  v20 = v19 + 1;
  v16 = operator new(v19 + 1);
  v32 = -v12;
  v33 = v20 | 0x8000000000000000;
  v31 = v16;
  if (v12)
    goto LABEL_23;
LABEL_24:
  *v16 = 0;
  if (v33 >= 0)
    v21 = (const std::string::value_type *)&v31;
  else
    v21 = (const std::string::value_type *)v31;
  if (v33 >= 0)
    v22 = HIBYTE(v33);
  else
    v22 = v32;
  v23 = std::string::append(&v34, v21, v22);
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  __dst.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  HIBYTE(v30[2]) = 20;
  strcpy((char *)v30, "-byte data alignment");
  v25 = std::string::append(&__dst, (const std::string::value_type *)v30, 0x14uLL);
  v26 = v25->__r_.__value_.__r.__words[0];
  v36[0] = v25->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v26;
  __p.__r_.__value_.__l.__size_ = v36[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v36 + 7);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v27;
  if (SHIBYTE(v30[2]) < 0)
  {
    operator delete(v30[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(v33) & 0x80000000) == 0)
        goto LABEL_35;
LABEL_47:
      operator delete(v31);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_48;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33) < 0)
    goto LABEL_47;
LABEL_35:
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_48:
  operator delete(v34.__r_.__value_.__l.__data_);
LABEL_36:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::ELFAttributeParser::printAttribute(a1, a2, v7, (uint64_t)p_p, size);
  *a3 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void llvm::ARMAttributeParser::ABI_enum_size(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_enum_size", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_enum_size(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_HardFP_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_HardFP_use", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_HardFP_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_VFP_args(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_VFP_args", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_VFP_args(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_WMMX_args(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_WMMX_args", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_WMMX_args(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::ABI_optimization_goals(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_optimization_goals", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_optimization_goals(llvm::ARMBuildAttrs::AttrType)::strings, 7uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_optimization_goals(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_optimization_goals", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_optimization_goals(llvm::ARMBuildAttrs::AttrType)::strings, 7uLL, a3);
}

void *llvm::ARMAttributeParser::compatibility@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t ULEB128;
  void *result;
  size_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  llvm::raw_ostream *v15;
  _DWORD *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  _BYTE *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;

  v6 = a1 + 16;
  v7 = a1 + 19;
  v8 = a1 + 20;
  ULEB128 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
  result = llvm::DataExtractor::getCStrRef(v6, v7, v8);
  v12 = a1[13];
  if (v12)
  {
    v13 = result;
    v14 = v11;
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v12 + 248))(a1[13], "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 64))(a1[13], "Tag", 3, a2);
    v15 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[13] + 288))(a1[13]);
    v16 = (_DWORD *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 6uLL)
    {
      *(_DWORD *)((char *)v16 + 3) = 540697973;
      *v16 = 1970037078;
      *((_QWORD *)v15 + 4) += 7;
    }
    else
    {
      v15 = llvm::raw_ostream::write(v15, "Value: ", 7uLL);
    }
    v17 = llvm::raw_ostream::operator<<(v15, ULEB128);
    v18 = v17;
    v19 = (_WORD *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v19 > 1uLL)
    {
      *v19 = 8236;
      v20 = (_BYTE *)(*((_QWORD *)v17 + 4) + 2);
      *((_QWORD *)v18 + 4) = v20;
      if (v14 <= *((_QWORD *)v18 + 3) - (_QWORD)v20)
      {
LABEL_7:
        if (v14)
        {
          memcpy(v20, v13, v14);
          v20 = (_BYTE *)(*((_QWORD *)v18 + 4) + v14);
          *((_QWORD *)v18 + 4) = v20;
        }
        if ((unint64_t)v20 < *((_QWORD *)v18 + 3))
          goto LABEL_10;
        goto LABEL_13;
      }
    }
    else
    {
      v18 = llvm::raw_ostream::write(v17, ", ", 2uLL);
      v20 = (_BYTE *)*((_QWORD *)v18 + 4);
      if (v14 <= *((_QWORD *)v18 + 3) - (_QWORD)v20)
        goto LABEL_7;
    }
    v18 = llvm::raw_ostream::write(v18, (const char *)v13, v14);
    v20 = (_BYTE *)*((_QWORD *)v18 + 4);
    if ((unint64_t)v20 < *((_QWORD *)v18 + 3))
    {
LABEL_10:
      *((_QWORD *)v18 + 4) = v20 + 1;
      *v20 = 10;
LABEL_14:
      v21 = a1[13];
      v22 = llvm::ELFAttrs::attrTypeAsString(a2, a1[14], a1[15], 0);
      (*(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v21 + 232))(v21, "TagName", 7, v22, v23);
      (*(void (**)(void))(*(_QWORD *)a1[13] + 232))();
      result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 256))(v12);
      goto LABEL_15;
    }
LABEL_13:
    llvm::raw_ostream::write(v18, 10);
    goto LABEL_14;
  }
LABEL_15:
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::CPU_unaligned_access(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "CPU_unaligned_access", a2, (uint64_t)&llvm::ARMAttributeParser::CPU_unaligned_access(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::FP_HP_extension(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "FP_HP_extension", a2, (uint64_t)&llvm::ARMAttributeParser::FP_HP_extension(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_16bit_format(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_16bit_format", a2, (uint64_t)&llvm::ARMAttributeParser::ABI_FP_16bit_format(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::MPextension_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "MPextension_use", a2, (uint64_t)&llvm::ARMAttributeParser::MPextension_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::DIV_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "DIV_use", a2, (uint64_t)&llvm::ARMAttributeParser::DIV_use(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::DSP_extension(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "DSP_extension", a2, (uint64_t)&llvm::ARMAttributeParser::DSP_extension(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::T2EE_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "T2EE_use", a2, (uint64_t)&llvm::ARMAttributeParser::T2EE_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::Virtualization_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "Virtualization_use", a2, (uint64_t)&llvm::ARMAttributeParser::Virtualization_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::PAC_extension(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "PAC_extension", a2, (uint64_t)&llvm::ARMAttributeParser::PAC_extension(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::BTI_extension(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "BTI_extension", a2, (uint64_t)&llvm::ARMAttributeParser::BTI_extension(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::PACRET_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "PACRET_use", a2, (uint64_t)&llvm::ARMAttributeParser::PACRET_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::BTI_use(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "BTI_use", a2, (uint64_t)&llvm::ARMAttributeParser::BTI_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

uint64_t *llvm::ARMAttributeParser::nodefaults@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ULEB128;
  uint64_t *result;

  ULEB128 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
  result = llvm::ELFAttributeParser::printAttribute(a1, a2, ULEB128, (uint64_t)"Unspecified Tags UNDEFINED", 26);
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::also_compatible_with(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ULEB128;
  uint64_t v9;
  int v10;
  char **v11;
  _DWORD *v12;
  uint64_t v13;
  const std::error_category *v14;
  std::error_code v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  const char *v28;
  size_t v29;
  char *v30;
  llvm::raw_ostream *v31;
  void *v32;
  const std::error_category *v33;
  const char *v34;
  uint64_t v35;
  std::error_code v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  const char *v40;
  size_t v41;
  char *v42;
  llvm::raw_ostream *v43;
  unint64_t v44;
  size_t v45;
  const char *v46;
  size_t v47;
  char *v48;
  llvm::raw_ostream *v49;
  const std::error_category *v50;
  const char *v51;
  uint64_t v52;
  std::error_code v53;
  unint64_t v54;
  llvm::raw_ostream *v55;
  char *v56;
  size_t v57;
  void *v58;
  _BYTE *v59;
  uint64_t v60;
  void *CStrRef;
  _QWORD v63[4];
  __int16 v64;
  std::string __p;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  const char *v71;
  __int16 v72;
  uint64_t v73;
  void (**v74)(llvm::raw_svector_ostream *__hidden);
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  uint64_t v80;
  int v81;
  void **v82;
  std::string v83;
  _QWORD *v84;
  __int128 v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  v84 = v86;
  v85 = xmmword_1812349A0;
  v75 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 1;
  v77 = 0;
  v78 = 0;
  v76 = 0;
  v74 = off_1E0E22B88;
  v82 = (void **)&v84;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v74, 0, 0, 0);
  v5 = a1[19];
  CStrRef = llvm::DataExtractor::getCStrRef(a1 + 16, a1 + 19, a1 + 20);
  v7 = v6;
  v60 = a1[19];
  a1[19] = v5;
  ULEB128 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
  v73 = ULEB128;
  v9 = a1[15];
  if (!v9)
  {
LABEL_5:
    v14 = std::generic_category();
    *(_QWORD *)&v70 = &v73;
    v71 = " is not a valid tag number";
    v72 = 781;
    llvm::Twine::str((llvm::Twine *)&v70, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15.__cat_ = (const std::error_category *)&__p;
    else
      v15.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v15.__val_ = v14;
    llvm::createStringError((llvm *)0x21, v15, v63);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  v10 = ULEB128;
  v11 = &v78;
  v12 = (_DWORD *)a1[14];
  v13 = 24 * v9;
  while (ULEB128 != *v12)
  {
    v12 += 6;
    v13 -= 24;
    if (!v13)
      goto LABEL_5;
  }
  if ((unint64_t)(ULEB128 - 4) > 0x3F)
  {
LABEL_45:
    v44 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
    v46 = llvm::ELFAttrs::attrTypeAsString(v10, a1[14], a1[15], 1);
    v47 = v45;
    v48 = v78;
    if (v45 <= v77 - (uint64_t)v78)
    {
      if (v45)
      {
        memcpy(v78, v46, v45);
        v48 = &v78[v47];
        v78 += v47;
      }
      v49 = (llvm::raw_ostream *)&v74;
      v17 = CStrRef;
      if ((unint64_t)(v77 - (_QWORD)v48) > 2)
        goto LABEL_47;
    }
    else
    {
      v49 = llvm::raw_ostream::write((llvm::raw_ostream *)&v74, v46, v45);
      v11 = (char **)((char *)v49 + 32);
      v48 = (char *)*((_QWORD *)v49 + 4);
      v17 = CStrRef;
      if (*((_QWORD *)v49 + 3) - (_QWORD)v48 > 2uLL)
      {
LABEL_47:
        v48[2] = 32;
        *(_WORD *)v48 = 15648;
        *v11 += 3;
LABEL_58:
        llvm::raw_ostream::operator<<(v49, v44);
LABEL_59:
        v16 = 0;
        v18 = 0;
        goto LABEL_12;
      }
    }
    v49 = llvm::raw_ostream::write(v49, " = ", 3uLL);
    goto LABEL_58;
  }
  if (((1 << (ULEB128 - 4)) & 0x8000000010000003) != 0)
  {
    v24 = llvm::DataExtractor::getCStrRef(a1 + 16, a1 + 19, a1 + 20);
    v26 = v25;
    v28 = llvm::ELFAttrs::attrTypeAsString(v10, a1[14], a1[15], 1);
    v29 = v27;
    v30 = v78;
    if (v27 <= v77 - (uint64_t)v78)
    {
      if (v27)
      {
        memcpy(v78, v28, v27);
        v30 = &v78[v29];
        v78 += v29;
      }
      v31 = (llvm::raw_ostream *)&v74;
      if ((unint64_t)(v77 - (_QWORD)v30) > 2)
      {
LABEL_26:
        v30[2] = 32;
        *(_WORD *)v30 = 15648;
        *v11 += 3;
        v32 = (void *)*((_QWORD *)v31 + 4);
        if (v26 <= *((_QWORD *)v31 + 3) - (_QWORD)v32)
          goto LABEL_27;
        goto LABEL_40;
      }
    }
    else
    {
      v31 = llvm::raw_ostream::write((llvm::raw_ostream *)&v74, v28, v27);
      v11 = (char **)((char *)v31 + 32);
      v30 = (char *)*((_QWORD *)v31 + 4);
      if (*((_QWORD *)v31 + 3) - (_QWORD)v30 > 2uLL)
        goto LABEL_26;
    }
    v31 = llvm::raw_ostream::write(v31, " = ", 3uLL);
    v32 = (void *)*((_QWORD *)v31 + 4);
    if (v26 <= *((_QWORD *)v31 + 3) - (_QWORD)v32)
    {
LABEL_27:
      if (v26)
      {
        memcpy(v32, v24, v26);
        v16 = 0;
        v18 = 0;
        *((_QWORD *)v31 + 4) += v26;
        v17 = CStrRef;
        goto LABEL_12;
      }
      goto LABEL_41;
    }
LABEL_40:
    llvm::raw_ostream::write(v31, (const char *)v24, v26);
LABEL_41:
    v16 = 0;
    v18 = 0;
    v17 = CStrRef;
    goto LABEL_12;
  }
  if (ULEB128 != 6)
  {
    if (ULEB128 == 65)
    {
      v33 = std::generic_category();
      v34 = llvm::ELFAttrs::attrTypeAsString(65, a1[14], a1[15], 1);
      v72 = 773;
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v35;
      v71 = " cannot be recursively defined";
      llvm::Twine::str((llvm::Twine *)&v70, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36.__cat_ = (const std::error_category *)&__p;
      else
        v36.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v36.__val_ = v33;
      llvm::createStringError((llvm *)0x16, v36, v63);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
LABEL_9:
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_10:
      v17 = CStrRef;
      v16 = v63[0];
LABEL_11:
      v18 = 1;
      goto LABEL_12;
    }
    goto LABEL_45;
  }
  v37 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
  v69 = v37;
  if (v37 >= 0x17)
  {
    v50 = std::generic_category();
    v63[0] = &v69;
    v63[2] = " is not a valid ";
    v64 = 781;
    v51 = llvm::ELFAttrs::attrTypeAsString(6, a1[14], a1[15], 1);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v51;
    v66 = v52;
    v67 = 1282;
    *(_QWORD *)&v70 = &__p;
    v71 = " value";
    v72 = 770;
    llvm::Twine::str((llvm::Twine *)&v70, &v83);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53.__cat_ = (const std::error_category *)&v83;
    else
      v53.__cat_ = (const std::error_category *)v83.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v53.__val_ = v50;
    llvm::createStringError((llvm *)0x21, v53, &v68);
    v17 = CStrRef;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    v16 = v68;
    goto LABEL_11;
  }
  v38 = v37;
  v40 = llvm::ELFAttrs::attrTypeAsString(6, a1[14], a1[15], 1);
  v41 = v39;
  v42 = v78;
  v17 = CStrRef;
  if (v39 <= v77 - (uint64_t)v78)
  {
    if (v39)
    {
      memcpy(v78, v40, v39);
      v42 = &v78[v41];
      v78 += v41;
    }
    v43 = (llvm::raw_ostream *)&v74;
  }
  else
  {
    v43 = llvm::raw_ostream::write((llvm::raw_ostream *)&v74, v40, v39);
    v11 = (char **)((char *)v43 + 32);
    v42 = (char *)*((_QWORD *)v43 + 4);
  }
  if (*((_QWORD *)v43 + 3) - (_QWORD)v42 > 2uLL)
  {
    v42[2] = 32;
    *(_WORD *)v42 = 15648;
    *v11 += 3;
  }
  else
  {
    v43 = llvm::raw_ostream::write(v43, " = ", 3uLL);
  }
  llvm::raw_ostream::operator<<(v43, v38);
  v54 = v69;
  if (!CPU_arch_strings[v69])
    goto LABEL_59;
  if ((unint64_t)(v77 - (_QWORD)v78) > 1)
  {
    *(_WORD *)v78 = 10272;
    v78 += 2;
    v55 = (llvm::raw_ostream *)&v74;
  }
  else
  {
    v55 = llvm::raw_ostream::write((llvm::raw_ostream *)&v74, " (", 2uLL);
  }
  v56 = CPU_arch_strings[v54];
  if (v56)
  {
    v57 = strlen(CPU_arch_strings[v54]);
    v58 = (void *)*((_QWORD *)v55 + 4);
    if (v57 <= *((_QWORD *)v55 + 3) - (_QWORD)v58)
    {
      if (v57)
      {
        memcpy(v58, v56, v57);
        *((_QWORD *)v55 + 4) += v57;
      }
    }
    else
    {
      v55 = llvm::raw_ostream::write(v55, v56, v57);
    }
    v17 = CStrRef;
  }
  v59 = (_BYTE *)*((_QWORD *)v55 + 4);
  if ((unint64_t)v59 >= *((_QWORD *)v55 + 3))
  {
    llvm::raw_ostream::write(v55, 41);
    goto LABEL_59;
  }
  v16 = 0;
  v18 = 0;
  *((_QWORD *)v55 + 4) = v59 + 1;
  *v59 = 41;
LABEL_12:
  *(_QWORD *)&v70 = v17;
  *((_QWORD *)&v70 + 1) = v7;
  LODWORD(__p.__r_.__value_.__l.__data_) = a2;
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>((uint64_t)(a1 + 8), (unsigned int *)&__p, &__p, &v70);
  v19 = a1[13];
  if (v19)
  {
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v19 + 248))(a1[13], "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 64))(a1[13], "Tag", 3, a2);
    v20 = a1[13];
    v21 = llvm::ELFAttrs::attrTypeAsString(a2, a1[14], a1[15], 0);
    (*(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v20 + 232))(v20, "TagName", 7, v21, v22);
    (*(void (**)(_QWORD, const char *, uint64_t, void *, uint64_t))(*(_QWORD *)a1[13] + 368))(a1[13], "Value", 5, v17, v7);
    if ((_QWORD)v85)
      (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *))(*(_QWORD *)a1[13] + 232))(a1[13], "Description", 11, v84);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 256))(v19);
  }
  a1[19] = v60;
  if (v18)
    v23 = v16;
  else
    v23 = 0;
  *a3 = v23;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v74);
  if (v84 != v86)
    free(v84);
}

char *llvm::ARMAttributeParser::handler@<X0>(char *this@<X0>, BOOL *a2@<X2>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  void *(*v8)@<X0>(_QWORD *@<X0>, uint64_t@<X1>, _QWORD *@<X8>);
  char *v9;

  *a2 = 0;
  v6 = &llvm::ARMAttributeParser::displayRoutines;
  switch(a3)
  {
    case 4:
      goto LABEL_45;
    case 5:
      v6 = &unk_1E0E06058;
      goto LABEL_45;
    case 6:
      v6 = &unk_1E0E06070;
      goto LABEL_45;
    case 7:
      v6 = &unk_1E0E06088;
      goto LABEL_45;
    case 8:
      v6 = &unk_1E0E060A0;
      goto LABEL_45;
    case 9:
      v6 = &unk_1E0E060B8;
      goto LABEL_45;
    case 10:
      v6 = &unk_1E0E060D0;
      goto LABEL_45;
    case 11:
      v6 = &unk_1E0E060E8;
      goto LABEL_45;
    case 12:
      v6 = &unk_1E0E06100;
      goto LABEL_45;
    case 13:
      v6 = &unk_1E0E06130;
      goto LABEL_45;
    case 14:
      v6 = &unk_1E0E06148;
      goto LABEL_45;
    case 15:
      v6 = &unk_1E0E06160;
      goto LABEL_45;
    case 16:
      v6 = &unk_1E0E06178;
      goto LABEL_45;
    case 17:
      v6 = &unk_1E0E06190;
      goto LABEL_45;
    case 18:
      v6 = &unk_1E0E061A8;
      goto LABEL_45;
    case 19:
      v6 = &unk_1E0E061C0;
      goto LABEL_45;
    case 20:
      v6 = &unk_1E0E061D8;
      goto LABEL_45;
    case 21:
      v6 = &unk_1E0E061F0;
      goto LABEL_45;
    case 22:
      v6 = &unk_1E0E06208;
      goto LABEL_45;
    case 23:
      v6 = &unk_1E0E06220;
      goto LABEL_45;
    case 24:
      v6 = &unk_1E0E06238;
      goto LABEL_45;
    case 25:
      v6 = &unk_1E0E06250;
      goto LABEL_45;
    case 26:
      v6 = &unk_1E0E06268;
      goto LABEL_45;
    case 27:
      v6 = &unk_1E0E06280;
      goto LABEL_45;
    case 28:
      v6 = &unk_1E0E06298;
      goto LABEL_45;
    case 29:
      v6 = &unk_1E0E062B0;
      goto LABEL_45;
    case 30:
      v6 = &unk_1E0E062C8;
      goto LABEL_45;
    case 31:
      v6 = &unk_1E0E062E0;
      goto LABEL_45;
    case 32:
      v6 = &unk_1E0E062F8;
      goto LABEL_45;
    case 34:
      v6 = &unk_1E0E06310;
      goto LABEL_45;
    case 36:
      v6 = &unk_1E0E06328;
      goto LABEL_45;
    case 38:
      v6 = &unk_1E0E06340;
      goto LABEL_45;
    case 42:
      v6 = &unk_1E0E06358;
      goto LABEL_45;
    case 44:
      v6 = &unk_1E0E06370;
      goto LABEL_45;
    case 46:
      v6 = &unk_1E0E06388;
      goto LABEL_45;
    case 48:
      v6 = &unk_1E0E06118;
      goto LABEL_45;
    case 50:
      v6 = &unk_1E0E063D0;
      goto LABEL_45;
    case 52:
      v6 = &unk_1E0E063E8;
      goto LABEL_45;
    case 64:
      v6 = &unk_1E0E06430;
      goto LABEL_45;
    case 65:
      v6 = &unk_1E0E06448;
      goto LABEL_45;
    case 66:
      v6 = &unk_1E0E063A0;
      goto LABEL_45;
    case 68:
      v6 = &unk_1E0E063B8;
      goto LABEL_45;
    case 74:
      v6 = &unk_1E0E06418;
      goto LABEL_45;
    case 76:
      v6 = &unk_1E0E06400;
LABEL_45:
      v8 = (void *(*)@<X0>(_QWORD *@<X0>, uint64_t@<X1>, _QWORD *@<X8>))v6[1];
      v7 = v6[2];
      v9 = &this[v7 >> 1];
      if ((v7 & 1) != 0)
      {
        this = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + v8))();
        if (*a4)
          return this;
      }
      else
      {
        this = (char *)v8(v9, a3, a4);
        if (*a4)
          return this;
      }
      *a2 = 1;
LABEL_50:
      *a4 = 0;
      return this;
    default:
      goto LABEL_50;
  }
}

void llvm::ARMAttributeParser::~ARMAttributeParser(llvm::ARMAttributeParser *this)
{
  void *v1;

  llvm::ELFAttributeParser::~ELFAttributeParser(this);
  operator delete(v1);
}

char *std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>(uint64_t a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  size_t v23;
  uint8x8_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = *((_QWORD *)v12 + 1);
            if (v14 == v8)
            {
              if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = *(char **)v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_37;
    if (prime < v9)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 >= 3)
      {
        v24 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] <= 1uLL)
        {
          v25 = 1 << -(char)__clz(v23 - 1);
          if (v23 >= 2)
            v23 = v25;
          if (prime <= v23)
            prime = v23;
          if (prime >= v9)
            goto LABEL_50;
LABEL_37:
          std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(a1, prime);
          goto LABEL_50;
        }
      }
      v26 = std::__next_prime(v23);
      if (prime <= v26)
        prime = v26;
      if (prime < v9)
        goto LABEL_37;
    }
LABEL_50:
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        v4 = v8 % v9;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      if (v18)
        goto LABEL_26;
    }
    goto LABEL_52;
  }
  v17 = *(_QWORD *)a1;
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
LABEL_26:
    *(_QWORD *)v12 = *v18;
LABEL_63:
    *v18 = v12;
    goto LABEL_64;
  }
LABEL_52:
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v17 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

void llvm::ELFAttributeParser::~ELFAttributeParser(llvm::ELFAttributeParser *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  *(_QWORD *)this = &unk_1E0E22AC8;
  v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 20);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 10);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    operator delete(v6);
  v7 = (_QWORD *)*((_QWORD *)this + 5);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    operator delete(v9);
}

void llvm::decodeBase64(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _BYTE *v5;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  char *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  size_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  size_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  _BYTE *v55;
  char *v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  __int128 *v62;
  unint64_t v63;
  __int128 v64;
  _QWORD *v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  unint64_t v71;
  __int128 v72;
  char *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  unint64_t v79;
  __int128 v80;
  _QWORD *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v86;
  unint64_t v87;
  unint64_t v89;
  char v90;
  unsigned __int8 v91;
  unint64_t v92;
  std::error_code v93;

  v5 = (_BYTE *)*a3;
  a3[1] = *a3;
  if (!a2)
  {
    *a4 = 0;
    return;
  }
  if ((a2 & 3) != 0)
  {
    *(_QWORD *)&v93.__val_ = std::generic_category();
    v93.__cat_ = (const std::error_category *)"Base64 encoded strings must be a multiple of 4 bytes in length";
    llvm::createStringError((llvm *)0x5C, v93, a4);
    return;
  }
  v8 = 0;
  v9 = a2 - 2;
  v89 = a2 - 1;
  v87 = a2 - 2;
  do
  {
    while (1)
    {
      v92 = v8;
      v91 = *(_BYTE *)(a1 + v8);
      if (v91 > 0x7Au)
      {
LABEL_140:
        llvm::createStringError<char,unsigned long long>(0x5Cu, (uint64_t)"Invalid Base64 character %#2.2x at index %llu", (char *)&v91, (uint64_t *)&v92, a4);
        return;
      }
      v10 = decodeBase64Byte(unsigned char)::DecodeTable[v91];
      if (v91 != 61 || v10 == 64)
      {
        if (v10 == 64)
          goto LABEL_140;
      }
      else if (v8 < v9 || v8 == v9 && *(_BYTE *)(a1 + v89) != 61)
      {
        goto LABEL_140;
      }
      v11 = v8 | 1;
      v92 = v8 | 1;
      v91 = *(_BYTE *)(a1 + (v8 | 1));
      if (v91 > 0x7Au)
        goto LABEL_140;
      v12 = decodeBase64Byte(unsigned char)::DecodeTable[v91];
      if (v91 != 61 || v12 == 64)
      {
        if (v12 == 64)
          goto LABEL_140;
      }
      else if (v11 < v9 || v11 == v9 && *(_BYTE *)(a1 + v89) != 61)
      {
        goto LABEL_140;
      }
      v13 = v8 | 2;
      v92 = v8 | 2;
      v91 = *(_BYTE *)(a1 + (v8 | 2));
      if (v91 > 0x7Au)
        goto LABEL_140;
      v14 = decodeBase64Byte(unsigned char)::DecodeTable[v91];
      if (v91 != 61 || v14 == 64)
      {
        if (v14 == 64)
          goto LABEL_140;
      }
      else if (v13 < v9 || v13 == v9 && *(_BYTE *)(a1 + v89) != 61)
      {
        goto LABEL_140;
      }
      v15 = v8 | 3;
      v92 = v8 | 3;
      v91 = *(_BYTE *)(a1 + (v8 | 3));
      if (v91 > 0x7Au)
        goto LABEL_140;
      v16 = decodeBase64Byte(unsigned char)::DecodeTable[v91];
      if (v91 != 61 || v16 == 64)
      {
        if (v16 == 64)
          goto LABEL_140;
      }
      else if (v15 < v9 || v15 == v9 && *(_BYTE *)(a1 + v89) != 61)
      {
        goto LABEL_140;
      }
      v17 = (4 * v10) | (v12 >> 4) & 3;
      v18 = a3[2];
      v90 = decodeBase64Byte(unsigned char)::DecodeTable[v91];
      if ((unint64_t)v5 >= v18)
        break;
      *v5 = v17;
      v19 = v5 + 1;
      a3[1] = (unint64_t)(v5 + 1);
      v20 = (16 * v12) | (v14 >> 2) & 0xF;
      v21 = a3[2];
      if ((unint64_t)(v5 + 1) < v21)
        goto LABEL_41;
LABEL_64:
      v35 = *a3;
      v36 = (unint64_t)&v19[-*a3];
      v37 = v36 + 1;
      if ((uint64_t)(v36 + 1) < 0)
        goto LABEL_145;
      v38 = v14;
      v39 = v21 - v35;
      if (2 * v39 > v37)
        v37 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v37;
      if (v40)
      {
        v41 = (unint64_t)operator new(v40);
        v42 = (char *)(v41 + v36);
        v43 = (char *)(v41 + v40);
        *(_BYTE *)(v41 + v36) = v20;
        v22 = (_BYTE *)(v41 + v36 + 1);
        if (v19 == (char *)v35)
          goto LABEL_82;
      }
      else
      {
        v41 = 0;
        v42 = &v19[-*a3];
        v43 = 0;
        *(_BYTE *)v36 = v20;
        v22 = (_BYTE *)(v36 + 1);
        if (v19 == (char *)v35)
        {
LABEL_82:
          *a3 = (unint64_t)v42;
          a3[1] = (unint64_t)v22;
          a3[2] = (unint64_t)v43;
LABEL_83:
          operator delete(v19);
          goto LABEL_84;
        }
      }
      if (v36 < 8
        || v41 + v36 + v35 - (_QWORD)v19 > v41 + v36 - 1
        || v35 > (unint64_t)(v19 - 1)
        || v35 - v41 < 0x20)
      {
        v44 = v19;
        goto LABEL_77;
      }
      if (v36 >= 0x20)
      {
        v59 = v36 & 0xFFFFFFFFFFFFFFE0;
        v69 = (_OWORD *)(v41 + v36 - 16);
        v70 = (__int128 *)(v19 - 16);
        v71 = v36 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v72 = *v70;
          *(v69 - 1) = *(v70 - 1);
          *v69 = v72;
          v69 -= 2;
          v70 -= 2;
          v71 -= 32;
        }
        while (v71);
        if (v36 == v59)
          goto LABEL_79;
        if ((v36 & 0x18) == 0)
        {
          v42 -= v59;
          v44 = &v19[-v59];
LABEL_77:
          v45 = v42 - 1;
          do
          {
            v46 = *--v44;
            *v45-- = v46;
          }
          while (v44 != (char *)v35);
          goto LABEL_79;
        }
      }
      else
      {
        v59 = 0;
      }
      v44 = &v19[-(v36 & 0xFFFFFFFFFFFFFFF8)];
      v42 -= v36 & 0xFFFFFFFFFFFFFFF8;
      v73 = &v19[-v59 - v35 - 8 + v41];
      v74 = (uint64_t *)&v19[-v59 - 8];
      v75 = v59 - (v36 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v76 = *v74--;
        *(_QWORD *)v73 = v76;
        v73 -= 8;
        v75 += 8;
      }
      while (v75);
      if (v36 != (v36 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_77;
LABEL_79:
      v19 = (char *)*a3;
      *a3 = v41;
      a3[1] = (unint64_t)v22;
      a3[2] = (unint64_t)v43;
      if (v19)
        goto LABEL_83;
LABEL_84:
      a3[1] = (unint64_t)v22;
      v23 = v90 & 0x3F | (v38 << 6);
      v24 = a3[2];
      if ((unint64_t)v22 >= v24)
        goto LABEL_85;
LABEL_6:
      *v22 = v23;
      v5 = v22 + 1;
      v9 = v87;
      a3[1] = (unint64_t)(v22 + 1);
      v8 += 4;
      if (v8 >= a2)
        goto LABEL_141;
    }
    v25 = *a3;
    v26 = (unint64_t)&v5[-*a3];
    v27 = v26 + 1;
    if ((uint64_t)(v26 + 1) < 0)
      goto LABEL_145;
    v86 = v14;
    v28 = v18 - v25;
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (!v29)
    {
      v30 = 0;
      v31 = &v5[-*a3];
      *(_BYTE *)v26 = v17;
      v19 = (char *)(v26 + 1);
      if (v5 == (_BYTE *)v25)
        goto LABEL_61;
LABEL_53:
      if (v26 < 8
        || &v30[v26 + v25 - (_QWORD)v5] > &v30[v26 - 1]
        || v25 > (unint64_t)(v5 - 1)
        || v25 - (unint64_t)v30 < 0x20)
      {
        v32 = v5;
        goto LABEL_58;
      }
      if (v26 >= 0x20)
      {
        v58 = v26 & 0xFFFFFFFFFFFFFFE0;
        v61 = &v30[v26 - 16];
        v62 = (__int128 *)(v5 - 16);
        v63 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v64 = *v62;
          *((_OWORD *)v61 - 1) = *(v62 - 1);
          *(_OWORD *)v61 = v64;
          v61 -= 32;
          v62 -= 2;
          v63 -= 32;
        }
        while (v63);
        if (v26 == v58)
          goto LABEL_60;
        if ((v26 & 0x18) == 0)
        {
          v31 -= v58;
          v32 = &v5[-v58];
LABEL_58:
          v33 = v31 - 1;
          do
          {
            v34 = *--v32;
            *v33-- = v34;
          }
          while (v32 != (_BYTE *)v25);
LABEL_60:
          v5 = (_BYTE *)*a3;
          v31 = v30;
          goto LABEL_61;
        }
      }
      else
      {
        v58 = 0;
      }
      v32 = &v5[-(v26 & 0xFFFFFFFFFFFFFFF8)];
      v31 -= v26 & 0xFFFFFFFFFFFFFFF8;
      v65 = &v5[-v58 - v25 - 8 + (_QWORD)v30];
      v66 = (uint64_t *)&v5[-v58 - 8];
      v67 = v58 - (v26 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v68 = *v66--;
        *v65-- = v68;
        v67 += 8;
      }
      while (v67);
      if (v26 == (v26 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_60;
      goto LABEL_58;
    }
    v30 = (char *)operator new(v29);
    v31 = &v30[v26];
    v30[v26] = v17;
    v19 = &v30[v26 + 1];
    if (v5 != (_BYTE *)v25)
      goto LABEL_53;
LABEL_61:
    *a3 = (unint64_t)v31;
    a3[1] = (unint64_t)v19;
    a3[2] = (unint64_t)&v30[v29];
    if (v5)
      operator delete(v5);
    LOBYTE(v14) = v86;
    LOBYTE(v16) = v90;
    a3[1] = (unint64_t)v19;
    v20 = (16 * v12) | (v86 >> 2) & 0xF;
    v21 = a3[2];
    if ((unint64_t)v19 >= v21)
      goto LABEL_64;
LABEL_41:
    *v19 = v20;
    v22 = v19 + 1;
    a3[1] = (unint64_t)(v19 + 1);
    v23 = v16 & 0x3F | ((_BYTE)v14 << 6);
    v24 = a3[2];
    if ((unint64_t)(v19 + 1) < v24)
      goto LABEL_6;
LABEL_85:
    v47 = *a3;
    v48 = (unint64_t)&v22[-*a3];
    v49 = v48 + 1;
    if ((uint64_t)(v48 + 1) < 0)
LABEL_145:
      abort();
    v50 = v24 - v47;
    if (2 * v50 > v49)
      v49 = 2 * v50;
    if (v50 >= 0x3FFFFFFFFFFFFFFFLL)
      v51 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (!v51)
    {
      v52 = 0;
      v53 = &v22[-*a3];
      v54 = 0;
      *(_BYTE *)v48 = v23;
      v5 = (_BYTE *)(v48 + 1);
      if (v22 == (_BYTE *)v47)
        goto LABEL_96;
LABEL_93:
      if (v48 < 8)
      {
        v55 = v22;
        v9 = v87;
        goto LABEL_101;
      }
      v9 = v87;
      if (v52 + v48 + v47 - (_QWORD)v22 > v52 + v48 - 1 || v47 > (unint64_t)(v22 - 1) || v47 - v52 < 0x20)
      {
        v55 = v22;
        goto LABEL_101;
      }
      if (v48 >= 0x20)
      {
        v60 = v48 & 0xFFFFFFFFFFFFFFE0;
        v77 = (_OWORD *)(v52 + v48 - 16);
        v78 = (__int128 *)(v22 - 16);
        v79 = v48 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v80 = *v78;
          *(v77 - 1) = *(v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 2;
          v79 -= 32;
        }
        while (v79);
        if (v48 == v60)
          goto LABEL_103;
        if ((v48 & 0x18) == 0)
        {
          v53 -= v60;
          v55 = &v22[-v60];
LABEL_101:
          v56 = v53 - 1;
          do
          {
            v57 = *--v55;
            *v56-- = v57;
          }
          while (v55 != (_BYTE *)v47);
          goto LABEL_103;
        }
      }
      else
      {
        v60 = 0;
      }
      v55 = &v22[-(v48 & 0xFFFFFFFFFFFFFFF8)];
      v53 -= v48 & 0xFFFFFFFFFFFFFFF8;
      v81 = &v22[-v60 - v47 - 8 + v52];
      v82 = (uint64_t *)&v22[-v60 - 8];
      v83 = v60 - (v48 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v84 = *v82--;
        *v81-- = v84;
        v83 += 8;
      }
      while (v83);
      if (v48 != (v48 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_101;
LABEL_103:
      v22 = (_BYTE *)*a3;
      *a3 = v52;
      a3[1] = (unint64_t)v5;
      a3[2] = (unint64_t)v54;
      if (!v22)
        goto LABEL_105;
      goto LABEL_104;
    }
    v52 = (unint64_t)operator new(v51);
    v53 = (char *)(v52 + v48);
    v54 = (char *)(v52 + v51);
    *(_BYTE *)(v52 + v48) = v23;
    v5 = (_BYTE *)(v52 + v48 + 1);
    if (v22 != (_BYTE *)v47)
      goto LABEL_93;
LABEL_96:
    *a3 = (unint64_t)v53;
    a3[1] = (unint64_t)v5;
    a3[2] = (unint64_t)v54;
    v9 = v87;
LABEL_104:
    operator delete(v22);
LABEL_105:
    a3[1] = (unint64_t)v5;
    v8 += 4;
  }
  while (v8 < a2);
LABEL_141:
  if (*(_BYTE *)(a1 + v89) == 61)
  {
    a3[1] = (unint64_t)(v5 - 1);
    if (*(_BYTE *)(a1 + v9) == 61)
      a3[1] = (unint64_t)(v5 - 2);
  }
  *a4 = 0;
}

void llvm::createStringError<char,unsigned long long>(unsigned int a1@<W0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  const std::error_category *v10;
  void **v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *__p[2];
  uint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  __int16 v27;

  v10 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  v14 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v13 = &unk_1E0E22B10;
  v21 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v13, 0, 0, 0);
  v24[0] = &unk_1E0E20200;
  v24[1] = a2;
  v25 = *a3;
  v26 = *a4;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v13, (uint64_t)v24);
  v11 = v21;
  v12 = operator new(0x38uLL);
  v27 = 260;
  v24[0] = v11;
  *a5 = llvm::StringError::StringError((uint64_t)v12, (llvm::Twine *)v24, a1, (uint64_t)v10);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v13);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::format_object<char,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(char *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void llvm::ErrorInfoBase::message(llvm::ErrorInfoBase *this@<X0>, std::string *a2@<X8>)
{
  __int128 v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = &unk_1E0E22B10;
  v13 = v14;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v5, 0, 0, 0);
  (*(void (**)(llvm::ErrorInfoBase *, void **))(*(_QWORD *)this + 16))(this, &v5);
  if ((*((char *)v13 + 23) & 0x80000000) == 0)
  {
    v4 = *(_OWORD *)v13;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v14[0]);
    return;
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v5);
  if (SHIBYTE(v15) < 0)
    goto LABEL_5;
}

uint64_t llvm::format_object<long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t AsUnsignedInteger;
  uint64_t v11;
  llvm::raw_ostream *v13;
  _QWORD v14[4];
  __int16 v15;
  unint64_t v16[4];
  __int16 v17;

  v16[0] = 0;
  AsUnsignedInteger = llvm::getAsUnsignedInteger(a5, a6, 0, v16);
  if ((AsUnsignedInteger & 1) != 0 || HIDWORD(v16[0]))
  {
    v15 = 1283;
    v14[0] = "'";
    v14[2] = a5;
    v14[3] = a6;
    v16[0] = (unint64_t)v14;
    v16[2] = (unint64_t)"' value invalid for uint argument!";
    v17 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)AsUnsignedInteger);
    llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)v16, 0, 0, v13);
    return 1;
  }
  else
  {
    LODWORD(v14[0]) = v16[0];
    *(_DWORD *)(a1 + 128) = v16[0];
    *(_WORD *)(a1 + 12) = a2;
    v11 = *(_QWORD *)(a1 + 184);
    if (v11)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v14);
      return 0;
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault();
    }
  }
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == 1)
    v3 = 7;
  else
    v3 = v2 + 7;
  (*(void (**)(void))(*(_QWORD *)(a1 + 152) + 16))();
  if (v4)
  {
    v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0)
      v5 = 3;
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6)
      v6 = v4;
    v3 += v5 + v6;
  }
  return v3;
}

uint64_t llvm::cl::basic_parser_impl::getOptionWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 == 1)
    v4 = 7;
  else
    v4 = v3 + 7;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v5)
  {
    v6 = 6;
    if ((*(_WORD *)(a2 + 10) & 0x400) == 0)
      v6 = 3;
    v7 = *(_QWORD *)(a2 + 56);
    if (!v7)
      v7 = v5;
    v4 += v6 + v7;
  }
  return v4;
}

llvm::raw_ostream *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::printOptionInfo(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::basic_parser_impl::printOptionInfo(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, unsigned int a3)
{
  llvm::raw_ostream *v6;
  llvm *v7;
  size_t v8;
  llvm *v9;
  size_t v10;
  unsigned int v11;
  int v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  void *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  void *v19;
  uint64_t v20;
  llvm *v21;
  _DWORD *v22;
  uint64_t v23;
  llvm *v24;
  int v25;
  const char *v26;
  _WORD *v27;
  void *v28;
  uint64_t v29;
  llvm *v30;
  _WORD *v31;
  uint64_t v32;
  llvm *v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v45;
  uint64_t v46;

  v6 = (llvm::raw_ostream *)llvm::outs(this);
  v45 = *((_OWORD *)a2 + 1);
  v46 = 2;
  v7 = (llvm *)(*(uint64_t (**)(llvm::cl::basic_parser_impl *))(*(_QWORD *)this + 16))(this);
  if (!v8)
    goto LABEL_48;
  v9 = v7;
  v10 = v8;
  v11 = *((unsigned __int16 *)a2 + 5);
  if ((v11 & 0x400) != 0)
  {
    v16 = (llvm::raw_ostream *)llvm::outs(v7);
    v17 = v16;
    v18 = (_WORD *)*((_QWORD *)v16 + 4);
    if (*((_QWORD *)v16 + 3) - (_QWORD)v18 > 1uLL)
    {
      *v18 = 15392;
      v19 = (void *)(*((_QWORD *)v16 + 4) + 2);
      *((_QWORD *)v17 + 4) = v19;
    }
    else
    {
      v17 = llvm::raw_ostream::write(v16, " <", 2uLL);
      v19 = (void *)*((_QWORD *)v17 + 4);
    }
    v20 = *((_QWORD *)a2 + 7);
    if (v20)
      v21 = (llvm *)*((_QWORD *)a2 + 6);
    else
      v21 = v9;
    if (v20)
      v10 = *((_QWORD *)a2 + 7);
    if (v10 <= *((_QWORD *)v17 + 3) - (_QWORD)v19)
    {
      memcpy(v19, v21, v10);
      v23 = *((_QWORD *)v17 + 3);
      v22 = (_DWORD *)(*((_QWORD *)v17 + 4) + v10);
      *((_QWORD *)v17 + 4) = v22;
      if ((unint64_t)(v23 - (_QWORD)v22) > 3)
        goto LABEL_17;
    }
    else
    {
      v17 = llvm::raw_ostream::write(v17, (const char *)v21, v10);
      v22 = (_DWORD *)*((_QWORD *)v17 + 4);
      if (*((_QWORD *)v17 + 3) - (_QWORD)v22 > 3uLL)
      {
LABEL_17:
        *v22 = 774778430;
        *((_QWORD *)v17 + 4) += 4;
        goto LABEL_48;
      }
    }
    llvm::raw_ostream::write(v17, ">...", 4uLL);
    goto LABEL_48;
  }
  v12 = (v11 >> 3) & 3;
  if (!v12)
  {
    v24 = (llvm *)(*(uint64_t (**)(const llvm::cl::Option *))(*(_QWORD *)a2 + 8))(a2);
    v25 = (int)v24;
    v13 = (llvm::raw_ostream *)llvm::outs(v24);
    if (v25 == 1)
      goto LABEL_5;
LABEL_21:
    if (*((_QWORD *)a2 + 3) == 1)
      v26 = " <";
    else
      v26 = "=<";
    v27 = (_WORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v27 > 1uLL)
    {
      *v27 = *(_WORD *)v26;
      v28 = (void *)(*((_QWORD *)v13 + 4) + 2);
      *((_QWORD *)v13 + 4) = v28;
    }
    else
    {
      v13 = llvm::raw_ostream::write(v13, v26, 2uLL);
      v28 = (void *)*((_QWORD *)v13 + 4);
    }
    v32 = *((_QWORD *)a2 + 7);
    if (v32)
      v33 = (llvm *)*((_QWORD *)a2 + 6);
    else
      v33 = v9;
    if (v32)
      v10 = *((_QWORD *)a2 + 7);
    if (v10 <= *((_QWORD *)v13 + 3) - (_QWORD)v28)
    {
      memcpy(v28, v33, v10);
      v36 = *((_QWORD *)v13 + 3);
      v34 = (_BYTE *)(*((_QWORD *)v13 + 4) + v10);
      *((_QWORD *)v13 + 4) = v34;
      if ((unint64_t)v34 >= v36)
        goto LABEL_43;
    }
    else
    {
      v13 = llvm::raw_ostream::write(v13, (const char *)v33, v10);
      v34 = (_BYTE *)*((_QWORD *)v13 + 4);
      if ((unint64_t)v34 >= *((_QWORD *)v13 + 3))
      {
LABEL_43:
        llvm::raw_ostream::write(v13, 62);
        goto LABEL_48;
      }
    }
    *((_QWORD *)v13 + 4) = v34 + 1;
    *v34 = 62;
    goto LABEL_48;
  }
  v13 = (llvm::raw_ostream *)llvm::outs(v7);
  if (v12 != 1)
    goto LABEL_21;
LABEL_5:
  v14 = *((_QWORD *)v13 + 4);
  if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 2)
  {
    *(_BYTE *)(v14 + 2) = 60;
    *(_WORD *)v14 = 15707;
    v15 = (void *)(*((_QWORD *)v13 + 4) + 3);
    *((_QWORD *)v13 + 4) = v15;
  }
  else
  {
    v13 = llvm::raw_ostream::write(v13, "[=<", 3uLL);
    v15 = (void *)*((_QWORD *)v13 + 4);
  }
  v29 = *((_QWORD *)a2 + 7);
  if (v29)
    v30 = (llvm *)*((_QWORD *)a2 + 6);
  else
    v30 = v9;
  if (v29)
    v10 = *((_QWORD *)a2 + 7);
  if (v10 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
  {
    memcpy(v15, v30, v10);
    v35 = *((_QWORD *)v13 + 3);
    v31 = (_WORD *)(*((_QWORD *)v13 + 4) + v10);
    *((_QWORD *)v13 + 4) = v31;
    if ((unint64_t)(v35 - (_QWORD)v31) > 1)
      goto LABEL_34;
  }
  else
  {
    v13 = llvm::raw_ostream::write(v13, (const char *)v30, v10);
    v31 = (_WORD *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v31 > 1uLL)
    {
LABEL_34:
      *v31 = 23870;
      *((_QWORD *)v13 + 4) += 2;
      goto LABEL_48;
    }
  }
  llvm::raw_ostream::write(v13, ">]", 2uLL);
LABEL_48:
  v38 = *((_QWORD *)a2 + 4);
  v37 = *((_QWORD *)a2 + 5);
  v39 = *((_QWORD *)a2 + 3);
  if (v39 == 1)
    v40 = 7;
  else
    v40 = v39 + 7;
  (*(void (**)(llvm::cl::basic_parser_impl *))(*(_QWORD *)this + 16))(this);
  if (v41)
  {
    v42 = 6;
    if ((*((_WORD *)a2 + 5) & 0x400) == 0)
      v42 = 3;
    v43 = *((_QWORD *)a2 + 7);
    if (!v43)
      LODWORD(v43) = v41;
    v40 += v42 + v43;
  }
  return llvm::cl::Option::printHelpStr(v38, v37, a3, v40);
}

void llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  unsigned int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 148) || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a1 + 128))
  {
    v3 = *(_DWORD *)(a1 + 128);
    v5 = *(_DWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 148);
    v4 = &off_1E0E22FA8;
    llvm::cl::parser<unsigned int>::printOptionDiff((llvm *)a1, a1, v3, (uint64_t)&v4, a2);
  }
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AsSignedInteger;
  uint64_t v11;
  llvm::raw_ostream *v13;
  _QWORD v14[4];
  __int16 v15;
  unint64_t v16[4];
  __int16 v17;

  v16[0] = 0;
  AsSignedInteger = llvm::getAsSignedInteger(a5, a6, 0, v16);
  if ((AsSignedInteger & 1) != 0 || v16[0] != SLODWORD(v16[0]))
  {
    v15 = 1283;
    v14[0] = "'";
    v14[2] = a5;
    v14[3] = a6;
    v16[0] = (unint64_t)v14;
    v16[2] = (unint64_t)"' value invalid for integer argument!";
    v17 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)AsSignedInteger);
    llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)v16, 0, 0, v13);
    return 1;
  }
  else
  {
    LODWORD(v14[0]) = v16[0];
    *(_DWORD *)(a1 + 128) = v16[0];
    *(_WORD *)(a1 + 12) = a2;
    v11 = *(_QWORD *)(a1 + 184);
    if (v11)
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v14);
      return 0;
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return llvm::cl::opt<int,false,llvm::cl::parser<int>>::getValueExpectedFlagDefault();
    }
  }
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == 1)
    v3 = 7;
  else
    v3 = v2 + 7;
  (*(void (**)(void))(*(_QWORD *)(a1 + 152) + 16))();
  if (v4)
  {
    v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0)
      v5 = 3;
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6)
      v6 = v4;
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<int,false,llvm::cl::parser<int>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<int,false,llvm::cl::parser<int>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 148) || *(_DWORD *)(a1 + 144) != *(_DWORD *)(a1 + 128))
  {
    v3 = *(_DWORD *)(a1 + 128);
    v5 = *(_DWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 148);
    v4 = &unk_1E0E22F88;
    llvm::cl::parser<llvm::cl::BOOLOrDefault>::printOptionDiff((llvm *)a1, a1, v3, (uint64_t)&v4, a2);
  }
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  std::string __p;
  std::string __dst;

  memset(&__p, 0, sizeof(__p));
  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_18;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_11:
    memmove(p_dst, __src, __len);
    p_dst->__r_.__value_.__s.__data_[__len] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
    goto LABEL_11;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_12:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
  __p = __dst;
  std::string::operator=((std::string *)(a1 + 128), &__p);
  *(_WORD *)(a1 + 12) = a2;
  v13 = *(_QWORD *)(a1 + 224);
  if (!v13)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_18:
    abort();
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 48))(v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == 1)
    v3 = 7;
  else
    v3 = v2 + 7;
  (*(void (**)(void))(*(_QWORD *)(a1 + 192) + 16))();
  if (v4)
  {
    v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0)
      v5 = 3;
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6)
      v6 = v4;
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 192), a1, a2);
}

llvm::raw_ostream *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::printOptionValue(llvm::raw_ostream *result, int a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  int v11;
  const void *v12;
  size_t v13;

  v4 = (uint64_t)result;
  if ((a3 & 1) == 0 && *((_BYTE *)result + 184))
  {
    v5 = *((unsigned __int8 *)result + 183);
    if ((v5 & 0x80u) == 0)
      v6 = *((unsigned __int8 *)result + 183);
    else
      v6 = *((_QWORD *)result + 21);
    v7 = *((unsigned __int8 *)result + 151);
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *((_QWORD *)result + 17);
    if (v6 == v7)
    {
      v9 = (const void **)((char *)result + 160);
      if (v8 >= 0)
        v10 = (unsigned __int8 *)result + 128;
      else
        v10 = (unsigned __int8 *)*((_QWORD *)result + 16);
      if ((v5 & 0x80) != 0)
      {
        result = (llvm::raw_ostream *)memcmp(*v9, v10, *((_QWORD *)result + 21));
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (!*((_BYTE *)result + 183))
          return result;
        while (*(unsigned __int8 *)v9 == *v10)
        {
          v9 = (const void **)((char *)v9 + 1);
          ++v10;
          if (!--v5)
            return result;
        }
      }
    }
  }
  v11 = *(char *)(v4 + 151);
  if (v11 >= 0)
    v12 = (const void *)(v4 + 128);
  else
    v12 = *(const void **)(v4 + 128);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(v4 + 151);
  else
    v13 = *(_QWORD *)(v4 + 136);
  return llvm::cl::parser<std::string>::printOptionDiff(result, v4, v12, v13, v4 + 152, a2);
}

void llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::setDefault(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  v2 = (std::string *)(a1 + 128);
  if (*(_BYTE *)(a1 + 184))
  {
    std::string::operator=(v2, (const std::string *)(a1 + 160));
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
    std::string::operator=(v2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  _QWORD *v12;
  int v13;
  int v14;
  _DWORD *v15;
  size_t v16;
  _BYTE *v17;
  char v18;

  v18 = 0;
  v8 = llvm::cl::parser<BOOL>::parse(a1, (_QWORD *)a1, a3, a4, a5, a6, &v18);
  if ((v8 & 1) != 0)
    return v8;
  *(_BYTE *)(a1 + 128) = v18;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 48))(v9, &v18);
    return v8;
  }
  v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::parser<BOOL>::parse(v11, v12, v13, v14, v15, v16, v17);
}

uint64_t llvm::cl::parser<BOOL>::parse(int a1, _QWORD *a2, int a3, int a4, _DWORD *__s1, size_t __n, _BYTE *a7)
{
  uint64_t result;
  uint64_t *v14;
  llvm::raw_ostream *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _BYTE v20[40];

  switch(__n)
  {
    case 0uLL:
      goto LABEL_8;
    case 1uLL:
      if (!memcmp(__s1, "1", __n))
        goto LABEL_8;
      if (!memcmp(__s1, "0", __n))
        goto LABEL_19;
      goto LABEL_18;
    case 4uLL:
      if (*__s1 != 1702195828 && *__s1 != 1163219540 && *__s1 != 1702195796)
        goto LABEL_18;
LABEL_8:
      result = 0;
      *a7 = 1;
      break;
    case 5uLL:
      if (memcmp(__s1, "false", __n))
      {
        if ((*__s1 != 1397506374 || *((_BYTE *)__s1 + 4) != 69) && (*__s1 != 1936482630 || *((_BYTE *)__s1 + 4) != 101))
          goto LABEL_18;
      }
LABEL_19:
      result = 0;
      *a7 = 0;
      break;
    default:
LABEL_18:
      v19 = 1283;
      v18[0] = (uint64_t)"'";
      v18[2] = (uint64_t)__s1;
      v18[3] = __n;
      v16 = "' is invalid value for BOOLean argument! Try 0 or 1";
      v17 = 259;
      v14 = llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
      v15 = (llvm::raw_ostream *)llvm::errs((llvm *)v14);
      llvm::cl::Option::error(a2, (llvm::Twine *)v20, 0, 0, v15);
      result = 1;
      break;
  }
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == 1)
    v3 = 7;
  else
    v3 = v2 + 7;
  (*(void (**)(void))(*(_QWORD *)(a1 + 152) + 16))();
  if (v4)
  {
    v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0)
      v5 = 3;
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6)
      v6 = v4;
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::printOptionValue(uint64_t a1, int a2, char a3)
{
  unsigned int v3;
  uint64_t (**v4)();
  __int16 v5;

  if ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 145) || *(unsigned __int8 *)(a1 + 144) != *(unsigned __int8 *)(a1 + 128))
  {
    v3 = *(unsigned __int8 *)(a1 + 128);
    v5 = *(_WORD *)(a1 + 144);
    v4 = &off_1E0E22F68;
    llvm::cl::parser<BOOL>::printOptionDiff((llvm *)a1, a1, v3, (uint64_t)&v4, a2);
  }
}

_BYTE *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::setDefault(_BYTE *result)
{
  char v1;

  v1 = result[145];
  if (v1)
    v1 = result[144];
  result[128] = v1;
  return result;
}

void llvm::cl::Option::addCategory(llvm::cl::Option *this, llvm::cl::OptionCategory *a2)
{
  unsigned __int8 v4;
  uint64_t *v5;
  unsigned __int8 v6;
  llvm::cl::OptionCategory **v7;
  uint64_t v8;
  llvm::cl::OptionCategory **v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_46);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_46))
  {
    qword_1ECD32F08 = (uint64_t)"General options";
    unk_1ECD32F10 = 15;
    qword_1ECD32F18 = (uint64_t)"";
    unk_1ECD32F20 = 0;
    if (!atomic_load(qword_1ECD32ED8))
    v12 = qword_1ECD32ED8[0];
    v13 = *(_QWORD *)(qword_1ECD32ED8[0] + 120);
    if (v13 != *(_QWORD *)(qword_1ECD32ED8[0] + 112))
      goto LABEL_20;
    v18 = *(unsigned int *)(qword_1ECD32ED8[0] + 132);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 8 * v18;
      v21 = *(_QWORD **)(qword_1ECD32ED8[0] + 120);
      while ((uint64_t *)*v21 != &qword_1ECD32F08)
      {
        if (*v21 == -2)
          v19 = v21;
        ++v21;
        v20 -= 8;
        if (!v20)
        {
          if (!v19)
            goto LABEL_44;
          *v19 = &qword_1ECD32F08;
          --*(_DWORD *)(v12 + 136);
          goto LABEL_21;
        }
      }
      goto LABEL_21;
    }
LABEL_44:
    if (v18 < *(_DWORD *)(qword_1ECD32ED8[0] + 128))
    {
      *(_DWORD *)(qword_1ECD32ED8[0] + 132) = v18 + 1;
      *(_QWORD *)(v13 + 8 * v18) = &qword_1ECD32F08;
    }
    else
    {
LABEL_20:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1ECD32ED8[0] + 112), &qword_1ECD32F08);
    }
LABEL_21:
    __cxa_guard_release(&_MergedGlobals_46);
  }
  if (a2 == (llvm::cl::OptionCategory *)&qword_1ECD32F08)
    goto LABEL_5;
  v5 = (uint64_t *)**((_QWORD **)this + 8);
  v6 = atomic_load((unsigned __int8 *)&_MergedGlobals_46);
  if ((v6 & 1) == 0)
  {
    v26 = (uint64_t *)**((_QWORD **)this + 8);
    v14 = __cxa_guard_acquire(&_MergedGlobals_46);
    v5 = v26;
    if (v14)
    {
      qword_1ECD32F08 = (uint64_t)"General options";
      unk_1ECD32F10 = 15;
      qword_1ECD32F18 = (uint64_t)"";
      unk_1ECD32F20 = 0;
      if (!atomic_load(qword_1ECD32ED8))
      v16 = qword_1ECD32ED8[0];
      v17 = *(_QWORD *)(qword_1ECD32ED8[0] + 120);
      if (v17 != *(_QWORD *)(qword_1ECD32ED8[0] + 112))
        goto LABEL_26;
      v22 = *(unsigned int *)(qword_1ECD32ED8[0] + 132);
      if ((_DWORD)v22)
      {
        v23 = 0;
        v24 = 8 * v22;
        v25 = *(_QWORD **)(qword_1ECD32ED8[0] + 120);
        while ((uint64_t *)*v25 != &qword_1ECD32F08)
        {
          if (*v25 == -2)
            v23 = v25;
          ++v25;
          v24 -= 8;
          if (!v24)
          {
            if (!v23)
              goto LABEL_46;
            *v23 = &qword_1ECD32F08;
            --*(_DWORD *)(v16 + 136);
            goto LABEL_27;
          }
        }
        goto LABEL_27;
      }
LABEL_46:
      if (v22 < *(_DWORD *)(qword_1ECD32ED8[0] + 128))
      {
        *(_DWORD *)(qword_1ECD32ED8[0] + 132) = v22 + 1;
        *(_QWORD *)(v17 + 8 * v22) = &qword_1ECD32F08;
      }
      else
      {
LABEL_26:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1ECD32ED8[0] + 112), &qword_1ECD32F08);
      }
LABEL_27:
      __cxa_guard_release(&_MergedGlobals_46);
      v5 = v26;
    }
  }
  if (v5 == &qword_1ECD32F08)
  {
    **((_QWORD **)this + 8) = a2;
    return;
  }
LABEL_5:
  v7 = (llvm::cl::OptionCategory **)*((_QWORD *)this + 8);
  v8 = *((unsigned int *)this + 18);
  v9 = v7;
  if ((_DWORD)v8)
  {
    v10 = 8 * v8;
    v9 = (llvm::cl::OptionCategory **)*((_QWORD *)this + 8);
    while (*v9 != a2)
    {
      ++v9;
      v10 -= 8;
      if (!v10)
      {
        v9 = &v7[v8];
        break;
      }
    }
  }
  if (v8 == v9 - v7)
  {
    if (v8 >= *((_DWORD *)this + 19))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 64, (char *)this + 80, v8 + 1, 8);
      v8 = *((unsigned int *)this + 18);
      v7 = (llvm::cl::OptionCategory **)*((_QWORD *)this + 8);
    }
    v7[v8] = a2;
    ++*((_DWORD *)this + 18);
  }
}

uint64_t *llvm::cl::getGeneralCategory(llvm::cl *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_46);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&_MergedGlobals_46))
    return &qword_1ECD32F08;
  llvm::cl::OptionCategory::OptionCategory(&qword_1ECD32F08, (uint64_t)"General options", 15, (uint64_t)"", 0);
  __cxa_guard_release(&_MergedGlobals_46);
  return &qword_1ECD32F08;
}

const void **llvm::cl::OptionCategory::registerCategory(llvm::cl::OptionCategory *this)
{
  unint64_t v3;
  const void **result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  if (!atomic_load(qword_1ECD32ED8))
  v3 = qword_1ECD32ED8[0];
  result = (const void **)(qword_1ECD32ED8[0] + 112);
  v5 = *(_QWORD *)(qword_1ECD32ED8[0] + 120);
  if (v5 != *(_QWORD *)(qword_1ECD32ED8[0] + 112))
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, this);
  v6 = *(unsigned int *)(qword_1ECD32ED8[0] + 132);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 8 * v6;
    v9 = *(_QWORD **)(qword_1ECD32ED8[0] + 120);
    while ((llvm::cl::OptionCategory *)*v9 != this)
    {
      if (*v9 == -2)
        v7 = v9;
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        if (!v7)
          goto LABEL_14;
        *v7 = this;
        --*(_DWORD *)(v3 + 136);
        return result;
      }
    }
  }
  else
  {
LABEL_14:
    if (v6 >= *(_DWORD *)(qword_1ECD32ED8[0] + 128))
      return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, this);
    *(_DWORD *)(qword_1ECD32ED8[0] + 132) = v6 + 1;
    *(_QWORD *)(v5 + 8 * v6) = this;
  }
  return result;
}

void `anonymous namespace'::CommandLineParser::registerSubCommand(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;

  v4 = *(_QWORD *)(a1 + 280);
  if (v4 != *(_QWORD *)(a1 + 272))
    goto LABEL_2;
  v15 = *(unsigned int *)(a1 + 292);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = 8 * v15;
    v18 = *(_QWORD **)(a1 + 280);
    while ((void *)*v18 != a2)
    {
      if (*v18 == -2)
        v16 = v18;
      ++v18;
      v17 -= 8;
      if (!v17)
      {
        if (!v16)
          goto LABEL_46;
        *v16 = a2;
        --*(_DWORD *)(a1 + 296);
        break;
      }
    }
  }
  else
  {
LABEL_46:
    if (v15 >= *(_DWORD *)(a1 + 288))
    {
LABEL_2:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(a1 + 272), a2);
      goto LABEL_3;
    }
    *(_DWORD *)(a1 + 292) = v15 + 1;
    *(_QWORD *)(v4 + 8 * v15) = a2;
  }
LABEL_3:
  if (!atomic_load(llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  if ((void *)llvm::cl::AllSubCommands[0] != a2)
  {
    if (atomic_load(llvm::cl::AllSubCommands))
    {
      v7 = *(uint64_t **)(llvm::cl::AllSubCommands[0] + 128);
      v8 = *(unsigned int *)(llvm::cl::AllSubCommands[0] + 136);
      if ((_DWORD)v8)
        goto LABEL_8;
    }
    else
    {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      v7 = *(uint64_t **)(llvm::cl::AllSubCommands[0] + 128);
      v8 = *(unsigned int *)(llvm::cl::AllSubCommands[0] + 136);
      if ((_DWORD)v8)
      {
LABEL_8:
        v9 = v7;
        if (*v7)
          v10 = *v7 == -8;
        else
          v10 = 1;
        if (v10)
        {
          do
          {
            v12 = v9[1];
            ++v9;
            v11 = v12;
            if (v12)
              v13 = v11 == -8;
            else
              v13 = 1;
          }
          while (v13);
        }
        v14 = &v7[v8];
        if (v9 == v14)
          return;
LABEL_29:
        v19 = *v9;
        do
        {
          v20 = *(_QWORD *)(v19 + 8);
          v21 = *(_WORD *)(v20 + 10);
          if ((v21 & 7) == 4
            || ((v22 = v21 & 0x180, v23 = v21 & 0x800, v22 != 128) ? (v24 = v23 == 0) : (v24 = 0),
                !v24 || *(_QWORD *)(v20 + 24)))
          {
          }
          else
          {
          }
          do
          {
            v25 = v9[1];
            ++v9;
            v19 = v25;
            if (v25)
              v26 = v19 == -8;
            else
              v26 = 1;
          }
          while (v26);
        }
        while (v9 != v14);
        return;
      }
    }
    v9 = v7;
    v14 = &v7[v8];
    if (v7 == v14)
      return;
    goto LABEL_29;
  }
}

uint64_t llvm::cl::ProvidePositionalOption(uint64_t a1, _BYTE *a2, size_t a3, int a4)
{
  int v5;

  v5 = a4;
  return ProvideOption((unsigned __int16 *)a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3, 0, 0, &v5);
}

uint64_t ProvideOption(unsigned __int16 *a1, uint64_t a2, uint64_t a3, _BYTE *a4, size_t a5, int a6, uint64_t a7, _DWORD *a8)
{
  int v16;
  uint64_t result;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  size_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  size_t v31;
  llvm::raw_ostream *v32;
  _QWORD v33[4];
  __int16 v34;
  _QWORD v35[4];
  __int16 v36;

  v16 = a1[7];
  result = (a1[5] >> 3) & 3;
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a1 + 8))(a1);
    if ((_DWORD)result != 3)
      goto LABEL_3;
LABEL_11:
    if (!v16)
    {
      if (a4)
      {
        v33[0] = "does not allow a value! '";
        v33[2] = a4;
        v33[3] = a5;
        v34 = 1283;
        v35[0] = v33;
        v35[2] = "' specified.";
        v21 = 770;
LABEL_40:
        v36 = v21;
        v32 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
        llvm::cl::Option::error(a1, (llvm::Twine *)v35, 0, 0, v32);
        return 1;
      }
      return CommaSeparateAndAddOccurrence(a1, *a8, a2, a3, a4, a5, 0);
    }
    v19 = "multi-valued option specified with ValueDisallowed modifier!";
LABEL_39:
    v35[0] = v19;
    v21 = 259;
    goto LABEL_40;
  }
  if ((_DWORD)result == 3)
    goto LABEL_11;
LABEL_3:
  if ((_DWORD)result != 2 || a4)
  {
    if (v16)
      goto LABEL_6;
    return CommaSeparateAndAddOccurrence(a1, *a8, a2, a3, a4, a5, 0);
  }
  v20 = (int)*a8 + 1;
  if ((int)v20 >= a6 || (~a1[5] & 0x180) == 0)
  {
    v19 = "requires a value!";
    goto LABEL_39;
  }
  *a8 = v20;
  a4 = *(_BYTE **)(a7 + 8 * v20);
  if (!a4)
  {
    if (v16)
      goto LABEL_22;
    a5 = 0;
    a4 = 0;
    return CommaSeparateAndAddOccurrence(a1, *a8, a2, a3, a4, a5, 0);
  }
  result = strlen(*(const char **)(a7 + 8 * v20));
  a5 = result;
  if (!v16)
    return CommaSeparateAndAddOccurrence(a1, *a8, a2, a3, a4, a5, 0);
LABEL_6:
  if (!a4)
  {
LABEL_22:
    v18 = 0;
LABEL_23:
    v22 = (int)*a8;
    v23 = v22 + 1;
    if ((int)v22 + 1 < a6)
    {
      *a8 = v23;
      v24 = *(_BYTE **)(a7 + 8 * v23);
      if (v24)
        v25 = strlen(*(const char **)(a7 + 8 * v23));
      else
        v25 = 0;
      result = CommaSeparateAndAddOccurrence(a1, v23, a2, a3, v24, v25, v18);
      if ((result & 1) != 0)
        return 1;
      if (v16 == 1)
        return 0;
      v26 = v16 - 2;
      while (1)
      {
        v27 = v26;
        v28 = (int)*a8;
        v29 = v28 + 1;
        if ((int)v28 + 1 >= a6)
          break;
        *a8 = v29;
        v30 = *(_BYTE **)(a7 + 8 * v29);
        if (v30)
          v31 = strlen(*(const char **)(a7 + 8 * v29));
        else
          v31 = 0;
        result = CommaSeparateAndAddOccurrence(a1, v29, a2, a3, v30, v31, 1);
        if ((result & 1) == 0)
        {
          v26 = v27 - 1;
          if (v27)
            continue;
        }
        return result;
      }
    }
    v19 = "not enough values!";
    goto LABEL_39;
  }
  result = CommaSeparateAndAddOccurrence(a1, *a8, a2, a3, a4, a5, 0);
  if ((result & 1) == 0)
  {
    --v16;
    v18 = 1;
    if (!v16)
      return 0;
    goto LABEL_23;
  }
  return 1;
}

void llvm::cl::TokenizeGNUCommandLine(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t **v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t **v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  uint64_t **v42;
  uint64_t v43;
  _QWORD *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t **v47;
  _BYTE *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  void *v54;
  __int128 v55;
  _QWORD v56[18];

  v56[16] = *MEMORY[0x1E0C80C00];
  v5 = v56;
  v54 = v56;
  v55 = xmmword_181236BB0;
  if (!a2)
    goto LABEL_58;
  v10 = 0;
  v53 = (void *)(a4 + 16);
  while (1)
  {
    if ((_QWORD)v55)
    {
      v11 = *(unsigned __int8 *)(a1 + v10);
      goto LABEL_5;
    }
    if (v10 == a2)
      goto LABEL_58;
    if ((a5 & 1) != 0)
      break;
    while (1)
    {
      v11 = *(unsigned __int8 *)(a1 + v10);
      if (v11 > 0x20 || ((1 << v11) & 0x100002600) == 0)
        break;
      if (a2 == ++v10)
        goto LABEL_53;
    }
LABEL_5:
    v12 = v10 + 1;
    if (v10 + 1 < a2 && v11 == 92)
    {
      v13 = *(_BYTE *)(a1 + v12);
      v14 = v55;
      if ((unint64_t)(v55 + 1) > *((_QWORD *)&v55 + 1))
      {
        v35 = v5;
        v36 = a3;
        v51 = v5;
        v37 = a5;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v54, v35, v55 + 1, 1);
        a5 = v37;
        v5 = v51;
        a3 = v36;
        v14 = v55;
      }
      *((_BYTE *)v54 + v14) = v13;
      v15 = v55 + 1;
      goto LABEL_51;
    }
    if (v11 > 0x27)
      goto LABEL_47;
    if (((1 << v11) & 0x100002600) == 0)
    {
      if (((1 << v11) & 0x8400000000) != 0)
      {
        if (v12 == a2)
          goto LABEL_53;
        while (1)
        {
          v26 = *(unsigned __int8 *)(a1 + v12);
          if (v26 == v11)
            goto LABEL_52;
          if (v12 + 1 == a2)
            v27 = v12;
          else
            v27 = v12 + 1;
          if (v26 == 92)
            v28 = v27;
          else
            v28 = v12;
          v29 = *(_BYTE *)(a1 + v28);
          v30 = v55;
          if ((unint64_t)(v55 + 1) > *((_QWORD *)&v55 + 1))
          {
            v32 = v5;
            v47 = a3;
            v50 = v5;
            v33 = a5;
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v54, v32, v55 + 1, 1);
            a5 = v33;
            a3 = v47;
            v5 = v50;
            v30 = v55;
          }
          *((_BYTE *)v54 + v30) = v29;
          v31 = v55 + 1;
          *(_QWORD *)&v55 = v55 + 1;
          v12 = v28 + 1;
          if (v28 + 1 == a2)
            goto LABEL_54;
        }
      }
LABEL_47:
      v34 = v55;
      if ((unint64_t)(v55 + 1) > *((_QWORD *)&v55 + 1))
      {
        v41 = v5;
        v42 = a3;
        v52 = v5;
        v43 = a5;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v54, v41, v55 + 1, 1);
        a5 = v43;
        v5 = v52;
        a3 = v42;
        v34 = v55;
      }
      *((_BYTE *)v54 + v34) = v11;
      v15 = v55 + 1;
      goto LABEL_50;
    }
    if ((_QWORD)v55)
    {
      v49 = v5;
      v21 = a5;
      v22 = a3;
      v23 = llvm::StringSaver::save(a3, v54, v55);
      v24 = *(unsigned int *)(a4 + 8);
      if (v24 >= *(unsigned int *)(a4 + 12))
      {
        v48 = v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v53, v24 + 1, 8);
        v23 = v48;
        v24 = *(unsigned int *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v24) = v23;
      ++*(_DWORD *)(a4 + 8);
      a3 = v22;
      a5 = v21;
      v5 = v49;
    }
    v15 = 0;
    if ((_DWORD)a5 && v11 == 10)
    {
      v25 = *(unsigned int *)(a4 + 8);
      if (v25 >= *(unsigned int *)(a4 + 12))
      {
        v38 = a3;
        v39 = v5;
        v40 = a5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v53, v25 + 1, 8);
        a5 = v40;
        v5 = v39;
        a3 = v38;
        v25 = *(unsigned int *)(a4 + 8);
      }
      v15 = 0;
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v25) = 0;
      ++*(_DWORD *)(a4 + 8);
    }
LABEL_50:
    v12 = v10;
LABEL_51:
    *(_QWORD *)&v55 = v15;
LABEL_52:
    v10 = v12 + 1;
    if (v12 + 1 == a2)
      goto LABEL_53;
  }
  do
  {
    v11 = *(unsigned __int8 *)(a1 + v10);
    switch(*(_BYTE *)(a1 + v10))
    {
      case 9:
      case 0xD:
      case 0x20:
        break;
      case 0xA:
        v17 = *(unsigned int *)(a4 + 8);
        if (v17 >= *(unsigned int *)(a4 + 12))
        {
          v18 = a3;
          v19 = v5;
          v20 = a5;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v53, v17 + 1, 8);
          a5 = v20;
          v5 = v19;
          a3 = v18;
          v17 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v17) = 0;
        ++*(_DWORD *)(a4 + 8);
        break;
      default:
        goto LABEL_5;
    }
    ++v10;
  }
  while (a2 != v10);
LABEL_53:
  v31 = v55;
LABEL_54:
  v44 = v54;
  if (v31)
  {
    v45 = llvm::StringSaver::save(a3, v54, v31);
    v46 = *(unsigned int *)(a4 + 8);
    if (v46 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v53, v46 + 1, 8);
      LODWORD(v46) = *(_DWORD *)(a4 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a4 + 8 * v46) = v45;
    ++*(_DWORD *)(a4 + 8);
LABEL_58:
    v44 = v54;
  }
  if (v44 != v5)
    free(v44);
}

void llvm::cl::ExpansionContext::expandResponseFile(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::string *v11;
  std::string::size_type size;
  __int128 v13;
  std::error_code v14;
  unsigned __int8 *v15;
  size_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  size_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  char *v39;
  char ConfigFile;
  size_t v42;
  void *v43;
  uint64_t v44;
  std::error_code v45;
  void *v46;
  uint64_t v47;
  const std::error_category *v48;
  _QWORD *v49;
  uint64_t v50;
  std::string v51;
  std::string v52;
  __int16 v53;
  std::string __p;
  __int16 v55;
  _QWORD *v56[2];
  char *v57;
  unint64_t v58;
  __int16 v59;
  uint64_t v60;
  size_t v61;
  void *v62;
  __int128 v63;
  uint64_t v64;
  __int16 v65;
  __int128 v66;
  char v67;
  void **v68;
  __int128 v69;
  char v70[8];
  __int16 v71;
  uint64_t v72;
  std::error_code v73;

  v72 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 16);
  v71 = 261;
  v68 = (void **)a2;
  *(_QWORD *)&v69 = a3;
  llvm::vfs::FileSystem::getBufferForFile(v10, (uint64_t)&v68, -1, 1, 0, 0, (uint64_t)&v66);
  if ((v67 & 1) != 0)
  {
    v13 = v66;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v66;
    v56[0] = "cannot not open file '";
    v57 = a2;
    v58 = a3;
    v59 = 1283;
    v62 = v56;
    *((_QWORD *)&v63 + 1) = "': ";
    v65 = 770;
    std::error_code::message(&v52, (const std::error_code *)&v51);
    v68 = &v62;
    *((_QWORD *)&v69 + 1) = &v52;
    v71 = 1026;
    llvm::Twine::str((llvm::Twine *)&v68, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14.__cat_ = (const std::error_category *)&__p;
    else
      v14.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v14.__val_ = *((_QWORD *)&v13 + 1);
    llvm::createStringError((llvm *)v13, v14, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_100;
    }
    else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_100;
    }
    v46 = (void *)v52.__r_.__value_.__r.__words[0];
    goto LABEL_99;
  }
  v11 = *(std::string **)(v66 + 8);
  size = *(_QWORD *)(v66 + 16) - (_QWORD)v11;
  memset(&v51, 0, sizeof(v51));
  if (llvm::hasUTF16ByteOrderMark((unsigned __int8 *)v11, size))
  {
    if (!llvm::convertUTF16ToUTF8String((char *)v11, size, &v51))
    {
      *(_QWORD *)&v73.__val_ = std::generic_category();
      v73.__cat_ = (const std::error_category *)"Could not convert UTF16 to UTF8";
      llvm::createStringError((llvm *)0x5C, v73, a5);
LABEL_97:
      if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_100;
LABEL_98:
      v46 = (void *)v51.__r_.__value_.__r.__words[0];
LABEL_99:
      operator delete(v46);
      goto LABEL_100;
    }
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v51;
    else
      v11 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      size = v51.__r_.__value_.__l.__size_;
  }
  else if (size >= 3
         && v11->__r_.__value_.__s.__data_[0] == 239
         && v11->__r_.__value_.__s.__data_[1] == 187
         && v11->__r_.__value_.__s.__data_[2] == 191)
  {
    v11 = (std::string *)((char *)v11 + 3);
    size -= 3;
  }
  (*(void (**)(std::string *, std::string::size_type, uint64_t, uint64_t, _QWORD))(a1 + 8))(v11, size, a1, a4, *(unsigned __int8 *)(a1 + 57));
  if (!*(_BYTE *)(a1 + 56) && !*(_BYTE *)(a1 + 58))
  {
    *a5 = 0;
    if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_100;
    goto LABEL_98;
  }
  v49 = a5;
  v15 = llvm::sys::path::parent_path((unsigned __int8 *)a2, a3, 0);
  v17 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v17)
  {
    v18 = v15;
    v19 = v16;
    v20 = *(uint64_t **)a4;
    v50 = *(_QWORD *)a4 + 8 * v17;
    do
    {
      v21 = *v20;
      if (*v20)
      {
        if (!*(_BYTE *)(a1 + 58))
          goto LABEL_57;
        v60 = *v20;
        v61 = strlen((const char *)v21);
        v68 = (void **)v70;
        v69 = xmmword_181236BB0;
        v22 = llvm::StringRef::find(&v60, "<CFGDIR>", 8uLL, 0);
        if (v22 != -1)
        {
          v23 = v22;
          v24 = 0;
          while (1)
          {
            v25 = v61 >= v24 ? v24 : v61;
            v26 = (const void *)(v60 + v25);
            v27 = v61 - v25 >= v23 - v24 ? v23 - v24 : v61 - v25;
            if (!(_QWORD)v69)
              break;
            v65 = 261;
            v62 = (void *)(v60 + v25);
            *(_QWORD *)&v63 = v27;
            v59 = 257;
            v55 = 257;
            v53 = 257;
            llvm::sys::path::append(&v68, (_QWORD **)&v62, v56, (const char **)&__p.__r_.__value_.__l.__data_, &v52);
            v28 = v69;
            v29 = v69 + v19;
            if (*((_QWORD *)&v69 + 1) < (unint64_t)v69 + v19)
              goto LABEL_40;
LABEL_41:
            if (v19)
            {
              memcpy((char *)v68 + v28, v18, v19);
              v28 = v69;
            }
            *(_QWORD *)&v69 = v28 + v19;
            v24 = v23 + 8;
            v23 = llvm::StringRef::find(&v60, "<CFGDIR>", 8uLL, v23 + 8);
            if (v23 == -1)
              goto LABEL_50;
          }
          *(_QWORD *)&v69 = 0;
          if (*((_QWORD *)&v69 + 1) < v27)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v68, v70, v27, 1);
            v30 = v69;
            goto LABEL_46;
          }
          v30 = 0;
          v31 = 0;
          if (v27)
          {
LABEL_46:
            memcpy((char *)v68 + v30, v26, v27);
            v31 = v69;
          }
          v28 = v31 + v27;
          *(_QWORD *)&v69 = v31 + v27;
          v29 = v31 + v27 + v19;
          if (*((_QWORD *)&v69 + 1) >= v29)
            goto LABEL_41;
LABEL_40:
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v68, v70, v29, 1);
          v28 = v69;
          goto LABEL_41;
        }
        v24 = 0;
LABEL_50:
        v32 = v69;
        if ((_QWORD)v69)
        {
          if (v61 > v24)
          {
            v65 = 261;
            v62 = (void *)(v60 + v24);
            *(_QWORD *)&v63 = v61 - v24;
            v59 = 257;
            v55 = 257;
            v53 = 257;
            llvm::sys::path::append(&v68, (_QWORD **)&v62, v56, (const char **)&__p.__r_.__value_.__l.__data_, &v52);
            v32 = v69;
          }
          *v20 = (uint64_t)llvm::StringSaver::save((uint64_t **)a1, v68, v32);
        }
        if (v68 != (void **)v70)
          free(v68);
        v21 = *v20;
        if (*v20)
        {
LABEL_57:
          v33 = strlen((const char *)v21);
          if (v33)
          {
            if (*(_BYTE *)v21 == 64)
            {
              v34 = (char *)(v21 + 1);
              v71 = 261;
              v35 = v33 - 1;
              v68 = (void **)v34;
              *(_QWORD *)&v69 = v33 - 1;
              if ((llvm::sys::path::is_relative((const char **)&v68, 0) & 1) != 0)
              {
                v68 = (void **)v70;
                v70[0] = 64;
                v36 = 1;
                v69 = xmmword_18125DF60;
                v37 = v19 + 1;
                if (v19 + 1 <= 0x80)
                  goto LABEL_62;
                goto LABEL_61;
              }
            }
            else if (v33 >= 9 && *(_QWORD *)v21 == 0x6769666E6F632D2DLL && *(_BYTE *)(v21 + 8) == 61)
            {
              v68 = (void **)v70;
              v34 = (char *)(v21 + 9);
              v70[0] = 64;
              v35 = v33 - 9;
              v69 = xmmword_18125DF60;
              v65 = 261;
              v62 = v34;
              *(_QWORD *)&v63 = v33 - 9;
              if (llvm::sys::path::has_parent_path((const char **)&v62, 0))
              {
                v36 = v69;
                v37 = v69 + v19;
                if (*((_QWORD *)&v69 + 1) >= (unint64_t)v69 + v19)
                {
LABEL_62:
                  if (v19)
                  {
                    memcpy((char *)v68 + v36, v18, v19);
                    v36 = v69;
                  }
                  *(_QWORD *)&v69 = v36 + v19;
                  v65 = 261;
                  v62 = v34;
                  *(_QWORD *)&v63 = v35;
                  v59 = 257;
                  v55 = 257;
                  v53 = 257;
                  llvm::sys::path::append(&v68, (_QWORD **)&v62, v56, (const char **)&__p.__r_.__value_.__l.__data_, &v52);
                  goto LABEL_65;
                }
LABEL_61:
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v68, v70, v37, 1);
                v36 = v69;
                goto LABEL_62;
              }
              v62 = &v64;
              v63 = xmmword_181236BB0;
              ConfigFile = llvm::cl::ExpansionContext::findConfigFile(a1, v34, v35, &v62);
              if ((ConfigFile & 1) != 0)
              {
                v43 = v62;
                v42 = v63;
                v44 = v69;
                if (*((_QWORD *)&v69 + 1) < (_QWORD)v69 + (_QWORD)v63)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v68, v70, v69 + v63, 1);
                  v44 = v69;
                }
                if (v42)
                {
                  memcpy((char *)v68 + v44, v43, v42);
                  v44 = v69;
                }
                *(_QWORD *)&v69 = v44 + v42;
              }
              else
              {
                v48 = std::generic_category();
                v59 = 1283;
                v56[0] = "cannot not find configuration file: ";
                v57 = v34;
                v58 = v35;
                llvm::Twine::str((llvm::Twine *)v56, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v45.__cat_ = (const std::error_category *)&__p;
                else
                  v45.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
                *(_QWORD *)&v45.__val_ = v48;
                llvm::createStringError((llvm *)2, v45, v49);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v62 != &v64)
                free(v62);
              if ((ConfigFile & 1) != 0)
              {
LABEL_65:
                *v20 = (uint64_t)llvm::StringSaver::save((uint64_t **)a1, v68, v69);
                v38 = 1;
                v39 = (char *)v68;
                if (v68 == (void **)v70)
                  goto LABEL_25;
              }
              else
              {
                v38 = 0;
                v39 = (char *)v68;
                if (v68 == (void **)v70)
                {
LABEL_25:
                  if (!v38)
                    goto LABEL_97;
                  goto LABEL_26;
                }
              }
              free(v39);
              goto LABEL_25;
            }
          }
        }
      }
LABEL_26:
      ++v20;
    }
    while (v20 != (uint64_t *)v50);
  }
  *v49 = 0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_98;
LABEL_100:
  if ((v67 & 1) == 0)
  {
    v47 = v66;
    *(_QWORD *)&v66 = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
}

uint64_t llvm::cl::ExpansionContext::findConfigFile(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  _QWORD *v18;
  uint64_t v19;
  _BYTE *v20;
  size_t v21;
  uint64_t v22;
  _BOOL4 v23;
  _QWORD *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  _QWORD *v42;
  uint64_t v43;
  __int16 v44;
  void *__dst;
  __int128 v46;
  _BYTE v47[33];
  void *v48;
  __int128 v49;
  _BYTE v50[128];
  void *__src;
  __int128 __n;
  _BYTE v53[128];
  _QWORD *v54;
  unint64_t v55;
  char v56;
  __int16 v57;
  int v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  __src = v53;
  __n = xmmword_181236BB0;
  v57 = 261;
  v54 = a2;
  v55 = a3;
  if (llvm::sys::path::has_parent_path((const char **)&v54, 0))
  {
    v8 = 0;
    *(_QWORD *)&__n = 0;
    if (*((_QWORD *)&__n + 1) < a3)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v53, a3, 1);
      v8 = __n;
    }
    if (a3)
    {
      memcpy((char *)__src + v8, a2, a3);
      v8 = __n;
    }
    *(_QWORD *)&__n = v8 + a3;
    v57 = 261;
    v54 = a2;
    v55 = a3;
    if (llvm::sys::path::is_relative((const char **)&v54, 0)
      && (*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 16) + 88))(*(_QWORD *)(a1 + 16), &__src))
    {
      goto LABEL_46;
    }
    v48 = v50;
    v49 = xmmword_181236BB0;
    v9 = __n;
    if (!(_QWORD)__n)
    {
      v24 = v50;
      goto LABEL_37;
    }
    if ((unint64_t)__n < 0x81)
    {
      v11 = v50;
      v10 = __n;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v48, v50, __n, 1);
      v10 = __n;
      if (!(_QWORD)__n)
      {
LABEL_36:
        *(_QWORD *)&v49 = v9;
        v24 = v48;
LABEL_37:
        v28 = *(_QWORD *)(a1 + 16);
        v44 = 261;
        v42 = v24;
        v43 = v9;
        (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)v28 + 16))(&v54, v28, &v42);
        if ((v59 & 1) != 0)
        {
          v29 = 0;
        }
        else
        {
          v29 = v58 == 2;
          if (v56 < 0)
            operator delete(v54);
        }
        if (v48 != v50)
          free(v48);
        if (v29)
        {
          v31 = __src;
          v30 = __n;
          a4[1] = 0;
          if (a4[2] >= v30)
          {
            v32 = 0;
            v34 = 0;
            if (!v30)
            {
LABEL_50:
              a4[1] = v34 + v30;
              v14 = 1;
LABEL_51:
              v33 = __src;
              if (__src == v53)
                return v14;
LABEL_52:
              free(v33);
              return v14;
            }
          }
          else
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a4, a4 + 3, v30, 1);
            v32 = a4[1];
          }
          memcpy((void *)(*a4 + v32), v31, v30);
          v34 = a4[1];
          goto LABEL_50;
        }
LABEL_46:
        v14 = 0;
        v33 = __src;
        if (__src == v53)
          return v14;
        goto LABEL_52;
      }
      v11 = v48;
    }
    memcpy(v11, __src, v10);
    goto LABEL_36;
  }
  v12 = *(_QWORD *)(a1 + 48);
  if (!v12)
    goto LABEL_46;
  v37 = a4;
  v13 = (unint64_t *)(*(_QWORD *)(a1 + 40) + 8);
  v14 = 16 * v12;
  while (1)
  {
    v15 = *v13;
    if (*v13)
      break;
LABEL_15:
    v13 += 2;
    v14 -= 16;
    if (!v14)
      goto LABEL_51;
  }
  v16 = 0;
  v17 = (const void *)*(v13 - 1);
  *(_QWORD *)&__n = 0;
  if (*((_QWORD *)&__n + 1) < v15)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v53, v15, 1);
    v16 = __n;
  }
  memcpy((char *)__src + v16, v17, v15);
  *(_QWORD *)&__n = __n + v15;
  v57 = 261;
  v54 = a2;
  v55 = a3;
  v44 = 257;
  v41 = 257;
  v39 = 257;
  llvm::sys::path::append(&__src, &v54, &v42, &v40, &v38);
  llvm::sys::path::native(&__src, 0);
  __dst = v47;
  v46 = xmmword_181236BB0;
  v18 = v47;
  v19 = __n;
  if ((_QWORD)__n)
  {
    v20 = v47;
    v21 = __n;
    if ((unint64_t)__n >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__dst, v47, __n, 1);
      v21 = __n;
      if (!(_QWORD)__n)
      {
LABEL_24:
        *(_QWORD *)&v46 = v19;
        v18 = __dst;
        goto LABEL_25;
      }
      v20 = __dst;
    }
    memcpy(v20, __src, v21);
    goto LABEL_24;
  }
LABEL_25:
  v22 = *(_QWORD *)(a1 + 16);
  v44 = 261;
  v42 = v18;
  v43 = v19;
  (*(void (**)(_QWORD **__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)v22 + 16))(&v54, v22, &v42);
  if ((v59 & 1) != 0)
  {
    v23 = 0;
  }
  else
  {
    v23 = v58 == 2;
    if (v56 < 0)
      operator delete(v54);
  }
  if (__dst != v47)
    free(__dst);
  if (!v23)
    goto LABEL_15;
  v26 = __src;
  v25 = __n;
  v37[1] = 0;
  if (v37[2] < v25)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v37, v37 + 3, v25, 1);
    v27 = v37[1];
    goto LABEL_55;
  }
  v27 = 0;
  v36 = 0;
  if (v25)
  {
LABEL_55:
    memcpy((void *)(*v37 + v27), v26, v25);
    v36 = v37[1];
  }
  v37[1] = v36 + v25;
  v14 = 1;
  v33 = __src;
  if (__src != v53)
    goto LABEL_52;
  return v14;
}

void llvm::cl::ExpansionContext::expandResponseFiles(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  _BYTE *v11;
  char *v12;
  int v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  const void *v18;
  char v19;
  std::string *v20;
  std::string::size_type v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  std::error_code v26;
  char v27;
  uint64_t v28;
  char v29;
  const std::error_category *size;
  int data;
  uint64_t v32;
  std::string *p_src;
  char v34;
  char v35;
  const std::error_category *v36;
  int v37;
  char v38;
  char v39;
  std::string *v40;
  std::error_code v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  const std::error_category *v47;
  std::error_code v48;
  void *v49;
  size_t v50;
  void *v51;
  std::error_code v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  size_t v64;
  size_t v65;
  __n128 *p_dst;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v76;
  std::string v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int16 v81;
  uint64_t v82;
  std::string v83;
  std::error_code v84;
  std::string __src;
  __int16 v86;
  std::string v87;
  std::string v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int16 v92;
  char v93;
  void *__p;
  __int128 v95;
  _QWORD v96[16];
  void *v97;
  uint64_t v98;
  _BYTE v99[96];
  __n128 __dst;
  const char *v101;
  uint64_t v102;
  __int16 v103;
  char v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v97 = v99;
  v98 = 0x300000000;
  HIBYTE(v95) = 0;
  LOBYTE(__p) = 0;
  v96[0] = *(unsigned int *)(a2 + 8);
  llvm::SmallVectorTemplateBase<llvm::cl::ExpansionContext::expandResponseFiles(llvm::SmallVectorImpl<char const*> &)::ResponseFileRecord,false>::push_back((uint64_t)&v97, (__n128 *)&__p);
  if ((SHIBYTE(v95) & 0x80000000) == 0)
  {
    if (!*(_DWORD *)(a2 + 8))
      goto LABEL_150;
    goto LABEL_5;
  }
  operator delete(__p);
  if (*(_DWORD *)(a2 + 8))
  {
LABEL_5:
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = v97;
      LODWORD(v9) = v98;
      if (*((_QWORD *)v97 + 4 * v98 - 1) == v6)
      {
        do
        {
          v9 = (v9 - 1);
          LODWORD(v98) = v9;
          v10 = (void **)&v8[4 * v9];
          if (*((char *)v10 + 23) < 0)
          {
            operator delete(*v10);
            v8 = v97;
            v9 = v98;
          }
        }
        while (v8[4 * v9 - 1] == v6);
      }
      v11 = *(_BYTE **)(*(_QWORD *)a2 + 8 * v6);
      if (!v11 || *v11 != 64)
      {
        ++v7;
        goto LABEL_7;
      }
      __p = v96;
      v95 = xmmword_181236BB0;
      v103 = 257;
      v13 = v11[1];
      v12 = v11 + 1;
      if (v13)
      {
        __dst.n128_u64[0] = (unint64_t)v12;
        LOBYTE(v103) = 3;
        if (!llvm::sys::path::is_relative((const char **)&__dst, 0))
          goto LABEL_17;
      }
      else
      {
        LOBYTE(v103) = 1;
        if (!llvm::sys::path::is_relative((const char **)&__dst, 0))
        {
LABEL_17:
          v14 = *(_QWORD *)(a1 + 16);
          v103 = 257;
          if (*v12)
            goto LABEL_18;
          goto LABEL_54;
        }
      }
      v16 = *(_QWORD *)(a1 + 32);
      if (v16)
      {
        v17 = 0;
        v18 = *(const void **)(a1 + 24);
        *(_QWORD *)&v95 = 0;
        if (*((_QWORD *)&v95 + 1) < v16)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v96, v16, 1);
          v17 = v95;
        }
        memcpy((char *)__p + v17, v18, v16);
        *(_QWORD *)&v95 = v95 + v16;
        goto LABEL_48;
      }
      (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 16) + 48))(&v88);
      v19 = v89;
      if ((v89 & 1) == 0)
        break;
      if (*v12)
      {
        __dst.n128_u64[0] = (unint64_t)"cannot get absolute path for: ";
        v101 = v12;
        v23 = 3;
      }
      else
      {
        __dst.n128_u64[0] = (unint64_t)"cannot get absolute path for: ";
        v23 = 1;
      }
      v25 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
      LOBYTE(v103) = 3;
      HIBYTE(v103) = v23;
      llvm::Twine::str((llvm::Twine *)&__dst, &v77);
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26.__cat_ = (const std::error_category *)&v77;
      else
        v26.__cat_ = (const std::error_category *)v77.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v26.__val_ = *((_QWORD *)&v25 + 1);
      llvm::createStringError((llvm *)v25, v26, a3);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
LABEL_44:
      if ((v89 & 1) == 0 && SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if ((v19 & 1) != 0)
      {
        v37 = 1;
        goto LABEL_145;
      }
LABEL_48:
      v103 = 257;
      if (*v12)
      {
        __dst.n128_u64[0] = (unint64_t)v12;
        v27 = 3;
      }
      else
      {
        v27 = 1;
      }
      LOBYTE(v103) = v27;
      WORD4(v89) = 257;
      WORD4(v78) = 257;
      v86 = 257;
      llvm::sys::path::append(&__p, &__dst, &v88, (const char **)&v77.__r_.__value_.__l.__data_, &__src);
      v28 = v95;
      if ((unint64_t)(v95 + 1) > *((_QWORD *)&v95 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v96, v95 + 1, 1);
        v28 = v95;
      }
      *((_BYTE *)__p + v28) = 0;
      v12 = (char *)__p;
      v14 = *(_QWORD *)(a1 + 16);
      v103 = 257;
      if (*(_BYTE *)__p)
      {
LABEL_18:
        __dst.n128_u64[0] = (unint64_t)v12;
        v15 = 3;
        goto LABEL_55;
      }
LABEL_54:
      v15 = 1;
LABEL_55:
      LOBYTE(v103) = v15;
      (*(void (**)(std::string *__return_ptr, uint64_t, __n128 *))(*(_QWORD *)v14 + 16))(&v88, v14, &__dst);
      v29 = v93;
      if ((v93 & 1) == 0)
      {
        if (llvm::vfs::Status::exists((llvm::vfs::Status *)&v88))
        {
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v77, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          else
            v77 = v88;
          v78 = v89;
          v79 = v90;
          v80 = v91;
          v81 = v92;
          v82 = a1;
          v42 = (char *)v97;
          v43 = 32 * v98 - 32;
          v44 = (char *)v97 + 32;
          while (v43)
          {
            v45 = *(_QWORD *)(v82 + 16);
            v86 = 260;
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
            (*(void (**)(__n128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v45 + 16))(&__dst, v45, &__src);
            v46 = v104;
            if ((v104 & 1) != 0)
            {
              v76 = __dst.n128_u64[1];
              v3 = __dst.n128_u64[0];
            }
            else
            {
              v3 = v3 & 0xFFFFFFFFFFFFFF00 | llvm::vfs::Status::equivalent((uint64_t)&v77, (uint64_t)&__dst);
              if ((v104 & 1) == 0 && SHIBYTE(v101) < 0)
                operator delete((void *)__dst.n128_u64[0]);
            }
            if ((v46 & 1) != 0)
            {
              __dst.n128_u64[0] = (unint64_t)"cannot open file: ";
              v101 = v42 + 32;
              v103 = 1027;
              llvm::Twine::str((llvm::Twine *)&__dst, &__src);
              if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v52.__cat_ = (const std::error_category *)&__src;
              else
                v52.__cat_ = (const std::error_category *)__src.__r_.__value_.__r.__words[0];
              *(_QWORD *)&v52.__val_ = v76;
              llvm::createStringError((llvm *)v3, v52, a3);
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              {
                v49 = (void *)__src.__r_.__value_.__r.__words[0];
LABEL_115:
                operator delete(v49);
              }
LABEL_116:
              v37 = 1;
              goto LABEL_140;
            }
            v42 += 32;
            v43 -= 32;
            v44 += 32;
            if ((_BYTE)v3)
            {
              v47 = std::system_category();
              __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"recursive expansion of: '";
              __src.__r_.__value_.__r.__words[2] = (std::string::size_type)v42;
              v86 = 1027;
              __dst.n128_u64[0] = (unint64_t)&__src;
              v101 = "'";
              v103 = 770;
              llvm::Twine::str((llvm::Twine *)&__dst, &v87);
              if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v48.__cat_ = (const std::error_category *)&v87;
              else
                v48.__cat_ = (const std::error_category *)v87.__r_.__value_.__r.__words[0];
              *(_QWORD *)&v48.__val_ = v47;
              llvm::createStringError(0, v48, a3);
              if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
              {
                v49 = (void *)v87.__r_.__value_.__r.__words[0];
                goto LABEL_115;
              }
              goto LABEL_116;
            }
          }
          __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src.__r_.__value_.__r.__words[2];
          __src.__r_.__value_.__l.__size_ = 0;
          v50 = strlen(v12);
          llvm::cl::ExpansionContext::expandResponseFile(a1, v12, v50, (uint64_t)&__src, a3);
          if (*a3)
          {
            v37 = 1;
            v51 = (void *)__src.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)__src.__r_.__value_.__l.__data_ == &__src.__r_.__value_.__r.__words[2])
              goto LABEL_140;
LABEL_139:
            free(v51);
LABEL_140:
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v77.__r_.__value_.__l.__data_);
            goto LABEL_142;
          }
          v53 = v98;
          if ((_DWORD)v98)
          {
            v54 = (char *)v97;
            v55 = LODWORD(__src.__r_.__value_.__r.__words[1]) - 1;
            v56 = (v98 - 1) & 0x7FFFFFFFFFFFFFFLL;
            if (v56)
            {
              v57 = v56 + 1;
              v58 = (v56 + 1) & 0xFFFFFFFFFFFFFFELL;
              v59 = (char *)v97 + 32 * v58;
              v60 = (uint64_t *)((char *)v97 + 56);
              v61 = v58;
              do
              {
                v62 = v55 + *v60;
                *(v60 - 4) += v55;
                *v60 = v62;
                v60 += 8;
                v61 -= 2;
              }
              while (v61);
              if (v57 == v58)
                goto LABEL_126;
            }
            else
            {
              v59 = (char *)v97;
            }
            v63 = &v54[32 * v53];
            do
            {
              *((_QWORD *)v59 + 3) += v55;
              v59 += 32;
            }
            while (v59 != v63);
          }
LABEL_126:
          v64 = strlen(v12);
          if (v64 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          v65 = v64;
          if (v64 >= 0x17)
          {
            v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v64 | 7) != 0x17)
              v67 = v64 | 7;
            v68 = v67 + 1;
            p_dst = (__n128 *)operator new(v67 + 1);
            __dst.n128_u64[1] = v65;
            v101 = (const char *)(v68 | 0x8000000000000000);
            __dst.n128_u64[0] = (unint64_t)p_dst;
          }
          else
          {
            HIBYTE(v101) = v64;
            p_dst = &__dst;
            if (!v64)
            {
LABEL_134:
              p_dst->n128_u8[v65] = 0;
              v102 = v6 + LODWORD(__src.__r_.__value_.__r.__words[1]);
              llvm::SmallVectorTemplateBase<llvm::cl::ExpansionContext::expandResponseFiles(llvm::SmallVectorImpl<char const*> &)::ResponseFileRecord,false>::push_back((uint64_t)&v97, &__dst);
              if (SHIBYTE(v101) < 0)
                operator delete((void *)__dst.n128_u64[0]);
              v69 = *(_QWORD *)a2;
              v70 = *(_QWORD *)a2 + 8 * v6;
              v71 = *(unsigned int *)(a2 + 8);
              v72 = *(_QWORD *)a2 + 8 * v71;
              if (v72 != v70 + 8)
              {
                memmove((void *)v70, (const void *)(v70 + 8), v72 - (v70 + 8));
                LODWORD(v71) = *(_DWORD *)(a2 + 8);
                v69 = *(_QWORD *)a2;
              }
              *(_DWORD *)(a2 + 8) = v71 - 1;
              llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(a2, v69 + 8 * v6, __src.__r_.__value_.__l.__data_, (char *)(__src.__r_.__value_.__r.__words[0] + 8 * LODWORD(__src.__r_.__value_.__r.__words[1])));
              v37 = 0;
              v51 = (void *)__src.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)__src.__r_.__value_.__l.__data_ != &__src.__r_.__value_.__r.__words[2])
                goto LABEL_139;
              goto LABEL_140;
            }
          }
          memmove(p_dst, v12, v65);
          goto LABEL_134;
        }
        v29 = v93;
      }
      if ((v29 & 1) != 0)
      {
        data = (int)v88.__r_.__value_.__l.__data_;
        size = (const std::error_category *)v88.__r_.__value_.__l.__size_;
        v84 = *(std::error_code *)&v88.__r_.__value_.__l.__data_;
        if (*(_BYTE *)(a1 + 58))
          goto LABEL_64;
      }
      else
      {
        size = std::system_category();
        data = 0;
        *(_QWORD *)&v84.__val_ = 0;
        v84.__cat_ = size;
        if (*(_BYTE *)(a1 + 58))
          goto LABEL_64;
      }
      if (data)
      {
        v36 = std::generic_category();
        size = v84.__cat_;
        data = v84.__val_;
        if (v84.__cat_ != v36 || v84.__val_ != 2)
        {
LABEL_64:
          if (data)
          {
            v32 = *(_QWORD *)&v84.__val_;
            if (*v12)
              goto LABEL_66;
LABEL_72:
            p_src = (std::string *)"cannot not open file '";
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"cannot not open file '";
            v34 = 1;
            v35 = 3;
          }
          else
          {
            size = std::generic_category();
            *(_QWORD *)&v84.__val_ = 2;
            v84.__cat_ = size;
            v32 = 2;
            if (!*v12)
              goto LABEL_72;
LABEL_66:
            p_src = &__src;
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)"cannot not open file '";
            __src.__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
            v34 = 3;
            v35 = 2;
          }
          LOBYTE(v86) = 3;
          HIBYTE(v86) = v34;
          v77.__r_.__value_.__r.__words[0] = (std::string::size_type)p_src;
          v77.__r_.__value_.__r.__words[2] = (std::string::size_type)"': ";
          BYTE8(v78) = v35;
          BYTE9(v78) = 3;
          std::error_code::message(&v83, &v84);
          v38 = BYTE8(v78);
          if (BYTE8(v78))
          {
            if (BYTE8(v78) == 1)
            {
              __dst.n128_u64[0] = (unint64_t)&v83;
              v39 = 1;
              v38 = 4;
            }
            else
            {
              if (BYTE9(v78) != 1)
                v38 = 2;
              v40 = &v77;
              if (BYTE9(v78) == 1)
                v40 = (std::string *)v77.__r_.__value_.__r.__words[0];
              __dst.n128_u64[0] = (unint64_t)v40;
              __dst.n128_u64[1] = v77.__r_.__value_.__l.__size_;
              v101 = (const char *)&v83;
              v39 = 4;
            }
          }
          else
          {
            v39 = 1;
          }
          LOBYTE(v103) = v38;
          HIBYTE(v103) = v39;
          llvm::Twine::str((llvm::Twine *)&__dst, &v87);
          if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41.__cat_ = (const std::error_category *)&v87;
          else
            v41.__cat_ = (const std::error_category *)v87.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v41.__val_ = size;
          llvm::createStringError((llvm *)v32, v41, a3);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v87.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_87;
          }
          else if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_87:
            v37 = 1;
            goto LABEL_142;
          }
          operator delete(v83.__r_.__value_.__l.__data_);
          goto LABEL_87;
        }
      }
      ++v7;
      v37 = 3;
LABEL_142:
      if ((v93 & 1) == 0 && SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
LABEL_145:
      if (__p != v96)
        free(__p);
      if (v37 && v37 != 3)
        goto LABEL_151;
LABEL_7:
      v6 = v7;
      if (*(_DWORD *)(a2 + 8) == v7)
        goto LABEL_150;
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v88;
    else
      v20 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    else
      v21 = v88.__r_.__value_.__l.__size_;
    *(_QWORD *)&v95 = 0;
    if (*((_QWORD *)&v95 + 1) >= v21)
    {
      v22 = 0;
      v24 = 0;
      if (!v21)
      {
LABEL_37:
        *(_QWORD *)&v95 = v24 + v21;
        goto LABEL_44;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__p, v96, v21, 1);
      v22 = v95;
    }
    memcpy((char *)__p + v22, v20, v21);
    v24 = v95;
    goto LABEL_37;
  }
LABEL_150:
  *a3 = 0;
LABEL_151:
  v73 = (char *)v97;
  if ((_DWORD)v98)
  {
    v74 = 32 * v98;
    do
    {
      if (v73[v74 - 9] < 0)
        operator delete(*(void **)&v73[v74 - 32]);
      v74 -= 32;
    }
    while (v74);
    v73 = (char *)v97;
  }
  if (v73 != v99)
    free(v73);
}

__n128 llvm::SmallVectorTemplateBase<llvm::cl::ExpansionContext::expandResponseFiles(llvm::SmallVectorImpl<char const*> &)::ResponseFileRecord,false>::push_back(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  uint64_t v4;
  __n128 *v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  __n128 *v9;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  uint64_t v14;
  __n128 *v15;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  uint64_t v25;
  __n128 *v26;
  __n128 *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(__n128 **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = &v5[2 * v4];
    if (v5 <= a2 && v9 > a2)
    {
      v21 = (char *)a2 - (char *)v5;
      v33 = 0;
      v22 = (__n128 *)(a1 + 16);
      v23 = (__n128 *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v8, 32, &v33);
      v5 = v23;
      v24 = *(__n128 **)a1;
      v25 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v25)
      {
        v26 = &v24[2 * v25];
        v27 = v23;
        do
        {
          v28 = *v24;
          v27[1].n128_u64[0] = v24[1].n128_u64[0];
          *v27 = v28;
          v24->n128_u64[1] = 0;
          v24[1].n128_u64[0] = 0;
          v24->n128_u64[0] = 0;
          v27[1].n128_u64[1] = v24[1].n128_u64[1];
          v24 += 2;
          v27 += 2;
        }
        while (v24 != v26);
        v24 = *(__n128 **)a1;
        v29 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v29)
        {
          v30 = 2 * v29;
          do
          {
            if (v24[v30 - 1].n128_i8[7] < 0)
              operator delete((void *)v24[v30 - 2].n128_u64[0]);
            v30 -= 2;
          }
          while (v30 * 16);
          v24 = *(__n128 **)a1;
        }
      }
      v31 = v21 >> 5;
      v32 = v33;
      if (v24 != v22)
        free(v24);
      *(_QWORD *)a1 = v5;
      *(_DWORD *)(a1 + 12) = v32;
      v2 = &v5[2 * v31];
    }
    else
    {
      v33 = 0;
      v11 = (__n128 *)(a1 + 16);
      v12 = (__n128 *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v8, 32, &v33);
      v5 = v12;
      v13 = *(__n128 **)a1;
      v14 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v14)
      {
        v15 = &v13[2 * v14];
        v16 = v12;
        do
        {
          v17 = *v13;
          v16[1].n128_u64[0] = v13[1].n128_u64[0];
          *v16 = v17;
          v13->n128_u64[1] = 0;
          v13[1].n128_u64[0] = 0;
          v13->n128_u64[0] = 0;
          v16[1].n128_u64[1] = v13[1].n128_u64[1];
          v13 += 2;
          v16 += 2;
        }
        while (v13 != v15);
        v13 = *(__n128 **)a1;
        v18 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v18)
        {
          v19 = 2 * v18;
          do
          {
            if (v13[v19 - 1].n128_i8[7] < 0)
              operator delete((void *)v13[v19 - 2].n128_u64[0]);
            v19 -= 2;
          }
          while (v19 * 16);
          v13 = *(__n128 **)a1;
        }
      }
      v20 = v33;
      if (v13 != v11)
        free(v13);
      *(_QWORD *)a1 = v5;
      *(_DWORD *)(a1 + 12) = v20;
    }
  }
  v6 = &v5[2 * *(unsigned int *)(a1 + 8)];
  result = *v2;
  v6[1].n128_u64[0] = v2[1].n128_u64[0];
  *v6 = result;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  v2->n128_u64[0] = 0;
  v6[1].n128_u64[1] = v2[1].n128_u64[1];
  ++*(_DWORD *)(a1 + 8);
  return result;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, const char *a2)
{
  size_t v2;
  size_t v3;

  v2 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v3 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v3 = v2;
  }
  return llvm::raw_ostream::write(a1, a2, v3);
}

BOOL llvm::cl::ParseCommandLineOptions(llvm *a1, _QWORD *a2, uint64_t a3, uint64_t a4, llvm::raw_ostream *a5, const char *a6, int a7)
{
  int v12;
  llvm *v13;
  size_t v14;
  std::string *v15;
  unint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  void *v23;
  unsigned int v24;
  std::string::size_type v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int64x2_t v29;
  int8x16_t v30;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  unsigned __int8 *v35;
  _BOOL8 v36;
  std::string::size_type Key;
  unint64_t v38;
  const void *v39;
  std::string::size_type v40;
  std::string *v41;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  uint64_t v47;
  llvm::cl::Option **v48;
  uint64_t v49;
  llvm::cl::Option *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  llvm::raw_ostream *v58;
  llvm::raw_ostream *v59;
  int v60;
  const char *v61;
  size_t v62;
  llvm::raw_ostream *v63;
  llvm::raw_ostream *v64;
  void *v65;
  _DWORD *v66;
  const void *v67;
  size_t v68;
  const char **v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char *v74;
  int v75;
  size_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  std::string *v80;
  char *v81;
  __int128 v82;
  unsigned int v83;
  int v84;
  const char **v85;
  char *v86;
  std::string *v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  int64_t v91;
  const unsigned __int8 *v92;
  BOOL v93;
  int v94;
  unsigned __int16 *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  const char *v99;
  size_t v100;
  llvm::raw_ostream *v101;
  void *v102;
  const char *v103;
  const unsigned __int8 *v104;
  BOOL v105;
  char v106;
  char *v107;
  size_t v108;
  size_t v110;
  unint64_t v112;
  int8x16_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  const unsigned __int8 *v120;
  int8x16_t *v121;
  unint64_t v122;
  const unsigned __int8 *v123;
  int8x16_t *v124;
  int v125;
  llvm *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  const unsigned __int8 *v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  size_t v145;
  uint64_t v146;
  int v147;
  const char *v148;
  size_t v149;
  llvm::raw_ostream *v150;
  _OWORD *v151;
  std::string::size_type v152;
  std::string *v153;
  uint64_t v154;
  llvm::raw_ostream *v155;
  unint64_t v156;
  const unsigned __int8 *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t *v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t *v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  int v175;
  uint64_t v176;
  std::string::size_type v177;
  unint64_t v178;
  unsigned __int8 *v179;
  uint64_t v181;
  unsigned int v182;
  unsigned int v183;
  std::string::size_type v184;
  const void *v185;
  std::string *p_dst;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t v193;
  BOOL v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  size_t v198;
  const char *v199;
  unint64_t v200;
  int64_t v201;
  unsigned int v202;
  unsigned int v203;
  unint64_t v204;
  int v205;
  const char *v206;
  size_t v207;
  llvm::raw_ostream *v208;
  void *v209;
  void *v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  char *v217;
  _BYTE *v218;
  size_t v219;
  size_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t *v225;
  uint64_t v226;
  llvm::raw_ostream *v227;
  llvm::raw_ostream *v228;
  uint64_t v229;
  int v230;
  const char *v231;
  size_t v232;
  llvm::raw_ostream *v233;
  void *v234;
  uint64_t v235;
  std::string::size_type v236;
  const char *v237;
  const char *v238;
  size_t v239;
  _QWORD *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t *v243;
  BOOL v244;
  uint64_t v245;
  uint64_t v246;
  BOOL v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  llvm::raw_ostream *v251;
  uint64_t v252;
  BOOL v253;
  uint64_t v255;
  void *v256;
  uint64_t v258;
  _BYTE *v259;
  size_t v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  char *v264;
  _BYTE *v265;
  size_t v266;
  unsigned int v267;
  uint64_t v268;
  __int16 v269;
  char *v270;
  _BYTE *v271;
  size_t v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v276;
  uint64_t v281;
  char *v282;
  _BYTE *v283;
  size_t v284;
  const unsigned __int8 *v285;
  int8x16_t *v286;
  uint64_t *v287;
  unsigned int v288;
  _QWORD *v289;
  char v290;
  void *v291;
  int v292;
  uint64_t *v293;
  std::string::size_type v294;
  const unsigned __int8 *v295;
  unint64_t v296;
  uint64_t v297;
  llvm::raw_ostream *v298;
  char v299;
  unsigned __int16 *v301;
  unsigned int v302;
  int v303;
  uint64_t v304;
  uint64_t *v305;
  int8x16_t *v306;
  const unsigned __int8 *v307;
  int8x16_t *v308;
  size_t v309;
  std::string v310;
  int v311;
  _QWORD v312[3];
  __int128 v313;
  _BYTE v314[19];
  _QWORD v315[4];
  __int16 v316;
  std::string __dst;
  const unsigned __int8 *v318;
  __int16 v319;
  std::string v320;
  int8x16_t *v321;
  const unsigned __int8 *v322;
  _QWORD v323[2];
  void *v324;
  uint64_t v325;
  _BYTE v326[32];
  void *v327;
  uint64_t v328;
  _QWORD v329[2];
  void *v330;
  uint64_t v331;
  _QWORD v332[20];
  void *v333;
  uint64_t v334;
  _BYTE v335[96];
  _QWORD v336[2];
  void *v337;
  uint64_t v338;
  _BYTE v339[32];
  void *v340;
  uint64_t v341;
  _QWORD v342[2];
  void *v343;
  uint64_t v344;
  _BYTE v345[160];
  std::string __p;
  char v347;
  __int16 v348;
  uint64_t v349;

  v12 = (int)a1;
  v349 = *MEMORY[0x1E0C80C00];
  initCommonOptions(a1);
  v330 = v332;
  v323[0] = 0;
  v323[1] = 0;
  v324 = v326;
  v325 = 0x400000000;
  v327 = v329;
  v328 = 0;
  v329[0] = 0;
  v329[1] = 1;
  v305 = v323;
  v332[0] = *a2;
  v331 = 0x1400000001;
  if (!a6)
  {
    v17 = 1;
    if (v12 < 2)
      goto LABEL_19;
    goto LABEL_15;
  }
  v14 = strlen(a6);
  llvm::sys::Process::GetEnv(a6, v14, (uint64_t)&__p);
  if (v347)
  {
    v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    llvm::cl::TokenizeGNUCommandLine((uint64_t)v15, v16, &v305, (uint64_t)&v330, 0);
    if (v347)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v17 = v331;
  if (v12 >= 2)
  {
LABEL_15:
    v18 = a2 + 1;
    v19 = v12 - 1;
    do
    {
      v20 = *v18;
      if (v17 >= HIDWORD(v331))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, v332, v17 + 1, 8);
        v17 = v331;
      }
      *((_QWORD *)v330 + v17) = v20;
      v17 = v331 + 1;
      LODWORD(v331) = v331 + 1;
      ++v18;
      --v19;
    }
    while (v19);
  }
LABEL_19:
  if (!atomic_load(qword_1ECD32ED8))
  v22 = qword_1ECD32ED8[0];
  v23 = v330;
  *(_QWORD *)(qword_1ECD32ED8[0] + 24) = a3;
  *(_QWORD *)(v22 + 32) = a4;
  v298 = a5;
  if (!a5)
    v298 = (llvm::raw_ostream *)llvm::errs(v13);
  v343 = v345;
  v344 = 0x1400000000;
  if ((unint64_t)(8 * v17) >= 0xA1)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v343, v345, v17, 8);
    v24 = v344;
    if (!v17)
      goto LABEL_28;
    goto LABEL_27;
  }
  v24 = 0;
  if (v17)
  {
LABEL_27:
    memcpy((char *)v343 + 8 * v24, v23, 8 * v17);
    v24 = v344;
  }
LABEL_28:
  LODWORD(v344) = v24 + v17;
  v336[1] = 0;
  v336[0] = 0;
  v337 = v339;
  v338 = 0x400000000;
  v340 = v342;
  v341 = 0;
  v342[0] = 0;
  v342[1] = 1;
  v312[0] = v336;
  v312[1] = llvm::cl::TokenizeGNUCommandLine;
  llvm::vfs::getRealFileSystem(&__p);
  v25 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v26 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 8);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v25 + 8))(v25);
  }
  v312[2] = v25;
  v313 = 0u;
  memset(v314, 0, sizeof(v314));
  llvm::cl::ExpansionContext::expandResponseFiles((uint64_t)v312, (uint64_t)&v343, &v333);
  if (v333)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v333;
    v333 = 0;
    llvm::toString(&__dst, &__p, v29, v30);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v33 = llvm::raw_ostream::write(v298, (const char *)p_p, size);
    v34 = (_BYTE *)*((_QWORD *)v33 + 4);
    if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
    {
      llvm::raw_ostream::write(v33, 10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_46:
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      *((_QWORD *)v33 + 4) = v34 + 1;
      *v34 = 10;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_46;
    }
    if (__dst.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8))(__dst.__r_.__value_.__r.__words[0]);
    if (v333)
      (*(void (**)(void *))(*(_QWORD *)v333 + 8))(v333);
    v36 = 0;
    goto LABEL_487;
  }
  v303 = v344;
  v291 = v343;
  if (*(_QWORD *)v343)
    v35 = (unsigned __int8 *)strlen(*(const char **)v343);
  else
    v35 = 0;
  Key = llvm::sys::path::filename(*(unsigned __int8 **)v343, v35, 0);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
LABEL_565:
    abort();
  v39 = (const void *)Key;
  v40 = v38;
  if (v38 >= 0x17)
  {
    v71 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v71 = v38 | 7;
    v72 = v71 + 1;
    v41 = (std::string *)operator new(v71 + 1);
    __p.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    __p.__r_.__value_.__l.__size_ = v40;
LABEL_103:
    Key = (std::string::size_type)memmove(v41, v39, v40);
    v41->__r_.__value_.__s.__data_[v40] = 0;
    if ((*(char *)(v22 + 23) & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_104;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v38;
  v41 = &__p;
  if (v38)
    goto LABEL_103;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if ((*(char *)(v22 + 23) & 0x80000000) == 0)
    goto LABEL_57;
LABEL_104:
  operator delete(*(void **)v22);
LABEL_57:
  *(std::string *)v22 = __p;
  if (!atomic_load(llvm::cl::TopLevelSubCommand))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  v43 = llvm::cl::TopLevelSubCommand[0];
  v296 = v22;
  v292 = a7;
  if (v303 >= 2)
  {
    v44 = (_BYTE *)*((_QWORD *)v291 + 1);
    if (*v44 != 45)
    {
      Key = strlen(*((const char **)v291 + 1));
      if (Key)
      {
        v220 = Key;
        v221 = *(_QWORD *)(v22 + 280);
        v222 = 288;
        if (v221 == *(_QWORD *)(v22 + 272))
          v222 = 292;
        v223 = *(unsigned int *)(v22 + v222);
        if ((_DWORD)v223)
        {
          v224 = 8 * v223;
          v225 = *(unint64_t **)(v22 + 280);
          while (*v225 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v225;
            v224 -= 8;
            if (!v224)
              goto LABEL_549;
          }
        }
        else
        {
          v225 = *(unint64_t **)(v22 + 280);
        }
        v273 = (unint64_t *)(v221 + 8 * v223);
        if (v225 != v273)
        {
          v274 = *v225;
LABEL_537:
          if (!atomic_load(llvm::cl::AllSubCommands))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
          if (v274 != llvm::cl::AllSubCommands[0])
          {
            v276 = *(_QWORD *)(v274 + 8);
            if (v276 && v276 == v220)
            {
              Key = memcmp(*(const void **)v274, v44, v220);
              if (!(_DWORD)Key)
              {
LABEL_552:
                if (!atomic_load(llvm::cl::TopLevelSubCommand))
                  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
                v43 = v274;
                if (v274 == llvm::cl::TopLevelSubCommand[0])
                  v45 = 1;
                else
                  v45 = 2;
                v22 = v296;
                if (atomic_load(qword_1ECD32ED8))
                  goto LABEL_63;
                goto LABEL_62;
              }
            }
          }
          while (++v225 != v273)
          {
            v274 = *v225;
            if (*v225 < 0xFFFFFFFFFFFFFFFELL)
            {
              if (v225 != v273)
                goto LABEL_537;
              break;
            }
          }
        }
      }
LABEL_549:
      if (!atomic_load(llvm::cl::TopLevelSubCommand))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      v274 = llvm::cl::TopLevelSubCommand[0];
      goto LABEL_552;
    }
  }
  v45 = 1;
  if (!atomic_load(qword_1ECD32ED8))
LABEL_62:
LABEL_63:
  *(_QWORD *)(qword_1ECD32ED8[0] + 336) = v43;
  v47 = *(unsigned int *)(v22 + 72);
  if ((_DWORD)v47)
  {
    v48 = *(llvm::cl::Option ***)(v22 + 64);
    v49 = 8 * v47;
    do
    {
      v50 = *v48++;
      v49 -= 8;
    }
    while (v49);
  }
  v51 = *(unsigned int *)(v43 + 40);
  if (!(_DWORD)v51)
  {
    v54 = 0;
    v290 = 0;
    v302 = 0;
    v69 = (const char **)v291;
    goto LABEL_108;
  }
  v52 = 0;
  v302 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 8 * v51;
  do
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v43 + 32) + v52);
    if ((*(_WORD *)(v56 + 10) & 6) == 2)
    {
      ++v302;
      goto LABEL_69;
    }
    if (*(_QWORD *)(v43 + 152))
    {
      v57 = *(_DWORD *)(v43 + 40);
      if (v57 >= 2)
        v54 = 1;
      else
        v54 = v54;
      if (!a5 && v57 >= 2)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"error - this positional option will never be matched,"
                                                                   " because it does not Require a value, and a cl::Consu"
                                                                   "meAfter option is active!";
        v348 = 259;
        v58 = (llvm::raw_ostream *)llvm::errs((llvm *)Key);
        Key = llvm::cl::Option::error((_QWORD *)v56, (llvm::Twine *)&__p, 0, 0, v58);
        v54 = 1;
      }
    }
    else if ((v53 & 1) != 0 && !*(_QWORD *)(v56 + 24))
    {
      if (!a5)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"error - option can never match, because another posit"
                                                                   "ional argument will match an unbounded number of valu"
                                                                   "es, and this option does not require a value!";
        v348 = 259;
        v59 = (llvm::raw_ostream *)llvm::errs((llvm *)Key);
        llvm::cl::Option::error((_QWORD *)v56, (llvm::Twine *)&__p, 0, 0, v59);
      }
      v60 = *(char *)(v296 + 23);
      if (v60 >= 0)
        v61 = (const char *)v296;
      else
        v61 = *(const char **)v296;
      if (v60 >= 0)
        v62 = *(unsigned __int8 *)(v296 + 23);
      else
        v62 = *(_QWORD *)(v296 + 8);
      v63 = llvm::raw_ostream::write(v298, v61, v62);
      v64 = v63;
      v65 = (void *)*((_QWORD *)v63 + 4);
      if (*((_QWORD *)v63 + 3) - (_QWORD)v65 > 0x1CuLL)
      {
        qmemcpy(v65, ": CommandLine Error: Option '", 29);
        v66 = (_DWORD *)(*((_QWORD *)v63 + 4) + 29);
        *((_QWORD *)v64 + 4) = v66;
        v67 = *(const void **)(v56 + 16);
        v68 = *(_QWORD *)(v56 + 24);
        if (v68 > *((_QWORD *)v64 + 3) - (_QWORD)v66)
          goto LABEL_95;
LABEL_90:
        if (v68)
        {
          memcpy(v66, v67, v68);
          v66 = (_DWORD *)(*((_QWORD *)v64 + 4) + v68);
          *((_QWORD *)v64 + 4) = v66;
        }
        if (*((_QWORD *)v64 + 3) - (_QWORD)v66 <= 0x13uLL)
          goto LABEL_93;
LABEL_96:
        v66[4] = 169963637;
        *(_OWORD *)v66 = *(_OWORD *)"' is all messed up!\n";
        *((_QWORD *)v64 + 4) += 20;
      }
      else
      {
        v64 = llvm::raw_ostream::write(v63, ": CommandLine Error: Option '", 0x1DuLL);
        v66 = (_DWORD *)*((_QWORD *)v64 + 4);
        v67 = *(const void **)(v56 + 16);
        v68 = *(_QWORD *)(v56 + 24);
        if (v68 <= *((_QWORD *)v64 + 3) - (_QWORD)v66)
          goto LABEL_90;
LABEL_95:
        v64 = llvm::raw_ostream::write(v64, (const char *)v67, v68);
        v66 = (_DWORD *)*((_QWORD *)v64 + 4);
        if (*((_QWORD *)v64 + 3) - (_QWORD)v66 > 0x13uLL)
          goto LABEL_96;
LABEL_93:
        llvm::raw_ostream::write(v64, "' is all messed up!\n", 0x14uLL);
      }
      Key = (std::string::size_type)llvm::raw_ostream::operator<<(v298, *(unsigned int *)(v43 + 40));
      v54 = 1;
    }
LABEL_69:
    v53 |= (*(_WORD *)(v56 + 10) & 5) == 1;
    v52 += 8;
  }
  while (v55 != v52);
  v69 = (const char **)v291;
  v70 = (v53 & 1) != 0 || *(_QWORD *)(v43 + 152) != 0;
  v290 = v70;
  v22 = v296;
LABEL_108:
  v333 = v335;
  v334 = 0x400000000;
  v311 = v45;
  v304 = v43;
  v73 = v292;
  if (v45 >= v303)
  {
    v202 = 0;
    v203 = v302;
    if (!v302)
      goto LABEL_411;
LABEL_401:
    v204 = v203;
    v205 = *(char *)(v22 + 23);
    if (v205 >= 0)
      v206 = (const char *)v22;
    else
      v206 = *(const char **)v22;
    if (v205 >= 0)
      v207 = *(unsigned __int8 *)(v22 + 23);
    else
      v207 = *(_QWORD *)(v22 + 8);
    v208 = llvm::raw_ostream::write(v298, v206, v207);
    v209 = (void *)*((_QWORD *)v208 + 4);
    if (*((_QWORD *)v208 + 3) - (_QWORD)v209 > 0x39uLL)
    {
      qmemcpy(v209, ": Not enough positional command line arguments specified!\n", 58);
      v226 = *((_QWORD *)v208 + 3);
      v210 = (void *)(*((_QWORD *)v208 + 4) + 58);
      *((_QWORD *)v208 + 4) = v210;
      if ((unint64_t)(v226 - (_QWORD)v210) > 0x15)
        goto LABEL_409;
    }
    else
    {
      v208 = llvm::raw_ostream::write(v208, ": Not enough positional command line arguments specified!\n", 0x3AuLL);
      v210 = (void *)*((_QWORD *)v208 + 4);
      if (*((_QWORD *)v208 + 3) - (_QWORD)v210 > 0x15uLL)
      {
LABEL_409:
        qmemcpy(v210, "Must specify at least ", 22);
        *((_QWORD *)v208 + 4) += 22;
        goto LABEL_430;
      }
    }
    v208 = llvm::raw_ostream::write(v208, "Must specify at least ", 0x16uLL);
LABEL_430:
    v227 = llvm::raw_ostream::operator<<(v208, v204);
    v228 = v227;
    v229 = *((_QWORD *)v227 + 4);
    if ((unint64_t)(*((_QWORD *)v227 + 3) - v229) > 0x13)
    {
      *(_DWORD *)(v229 + 16) = 1953391981;
      *(_OWORD *)v229 = *(_OWORD *)" positional argument";
      Key = *((_QWORD *)v227 + 4) + 20;
      *((_QWORD *)v228 + 4) = Key;
    }
    else
    {
      v228 = llvm::raw_ostream::write(v227, " positional argument", 0x14uLL);
      Key = *((_QWORD *)v228 + 4);
    }
    v236 = v302 > 1;
    if (*((_QWORD *)v228 + 3) - Key >= v236)
    {
      if (v302 >= 2)
      {
        memcpy((void *)Key, "s", v302 > 1);
        Key = *((_QWORD *)v228 + 4) + v236;
        *((_QWORD *)v228 + 4) = Key;
      }
    }
    else
    {
      if (v302 <= 1)
        v237 = "";
      else
        v237 = "s";
      v228 = llvm::raw_ostream::write(v228, v237, v302 > 1);
      Key = *((_QWORD *)v228 + 4);
    }
    if (*((_QWORD *)v228 + 3) - Key > 6)
    {
      *(_DWORD *)(Key + 3) = 540697957;
      *(_DWORD *)Key = 1699946554;
      *((_QWORD *)v228 + 4) += 7;
      v238 = *v69;
      if (*v69)
        goto LABEL_451;
    }
    else
    {
      Key = (std::string::size_type)llvm::raw_ostream::write(v228, ": See: ", 7uLL);
      v228 = (llvm::raw_ostream *)Key;
      v238 = *v69;
      if (*v69)
        goto LABEL_451;
    }
LABEL_457:
    v240 = (_QWORD *)*((_QWORD *)v228 + 4);
    if (*((_QWORD *)v228 + 3) - (_QWORD)v240 > 7uLL)
    {
      *v240 = 0xA706C65682D2D20;
      *((_QWORD *)v228 + 4) += 8;
    }
    else
    {
      Key = (std::string::size_type)llvm::raw_ostream::write(v228, " --help\n", 8uLL);
    }
    v213 = 1;
    goto LABEL_461;
  }
  v301 = 0;
  v299 = 0;
  v293 = (uint64_t *)(v43 + 128);
  v289 = v69 + 1;
  while (2)
  {
    memset(&v310, 0, sizeof(v310));
    v308 = 0;
    v309 = 0;
    v306 = (int8x16_t *)"";
    v307 = 0;
    v74 = (char *)v69[v45];
    if (*v74 == 45)
    {
      v75 = v74[1];
      if (!((v74[1] == 0) | v299 & 1))
      {
        if (v75 == 45 && !v74[2])
        {
          v77 = 9;
          v299 = 1;
          if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_116;
          goto LABEL_115;
        }
        if (v301 && (v301[5] & 0x400) != 0)
        {
          v104 = (const unsigned __int8 *)strlen(v74 + 1);
          v306 = (int8x16_t *)(v74 + 1);
          v307 = v104;
          v105 = v75 != 45 || v104 == 0;
          v106 = v105;
          if (!v105)
          {
            v306 = (int8x16_t *)(v74 + 2);
            v307 = v104 - 1;
          }
          if (!Key || (v95 = (unsigned __int16 *)Key, (*(_WORD *)(Key + 10) & 0x180) != 0x80))
          {
            v107 = (char *)v69[v311];
            if (v107)
              v108 = strlen(v69[v311]);
            else
              v108 = 0;
            LODWORD(__p.__r_.__value_.__l.__data_) = v311;
            Key = ProvideOption(v301, *((_QWORD *)v301 + 2), *((_QWORD *)v301 + 3), v107, v108, 0, 0, &__p);
            v299 = 0;
            v77 = 9;
            if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_116;
            goto LABEL_115;
          }
          goto LABEL_151;
        }
        v92 = (const unsigned __int8 *)strlen(v74 + 1);
        v306 = (int8x16_t *)(v74 + 1);
        v307 = v92;
        v93 = v75 != 45 || v92 == 0;
        v94 = v93;
        if (!v93)
        {
          v306 = (int8x16_t *)(v74 + 2);
          v307 = v92 - 1;
        }
        if (Key)
          goto LABEL_150;
        if (atomic_load(llvm::cl::TopLevelSubCommand))
        {
          if (v43 == llvm::cl::TopLevelSubCommand[0])
            goto LABEL_198;
        }
        else
        {
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
          if (v43 == llvm::cl::TopLevelSubCommand[0])
          {
LABEL_198:
            if ((v94 | v292 ^ 1) != 1)
              goto LABEL_311;
            v112 = (unint64_t)v307;
            if (v307 == (const unsigned __int8 *)1)
              goto LABEL_311;
            v113 = v306;
            Key = llvm::StringMapImpl::FindKey(v293, v306, v307);
            v114 = *(_QWORD *)(v43 + 128);
            v115 = *(unsigned int *)(v43 + 136);
            if ((_DWORD)Key == -1)
              v116 = *(unsigned int *)(v43 + 136);
            else
              v116 = (int)Key;
            v117 = v114 + 8 * v116;
            if (v116 != v115 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v117 + 8) + 10) & 0x1100) == 0)
              v117 = v114 + 8 * v115;
            v118 = v114 + 8 * v115;
            if (v112 >= 2 && v117 == v118)
            {
              do
              {
                if (v112 >= v112 - 1)
                  --v112;
                Key = llvm::StringMapImpl::FindKey(v293, v113, (const unsigned __int8 *)v112);
                v140 = *(_QWORD *)(v43 + 128);
                v141 = *(unsigned int *)(v43 + 136);
                if ((_DWORD)Key == -1)
                  v142 = *(unsigned int *)(v43 + 136);
                else
                  v142 = (int)Key;
                v117 = v140 + 8 * v142;
                if (v142 != v141 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v117 + 8) + 10) & 0x1100) == 0)
                  v117 = v140 + 8 * v141;
                v118 = v140 + 8 * v141;
              }
              while (v117 == v118 && v112 > 1);
            }
            if (v117 == v118)
              goto LABEL_311;
            v95 = *(unsigned __int16 **)(*(_QWORD *)v117 + 8);
            v119 = v95[5];
            if ((v119 & 0x1100) == 0)
              goto LABEL_311;
            v121 = v306;
            v120 = v307;
            if ((unint64_t)v307 >= v112)
              v122 = (unint64_t)&v307[-v112];
            else
              v122 = 0;
            if ((unint64_t)v307 >= v112)
              v123 = (const unsigned __int8 *)v112;
            else
              v123 = v307;
            v307 = v123;
            if (v112 >= (unint64_t)v120)
            {
LABEL_305:
              v124 = 0;
            }
            else
            {
              v124 = (int8x16_t *)((char *)v306 + v112);
              while (1)
              {
                v125 = (v119 >> 7) & 3;
                if (v125 == 3)
                  goto LABEL_306;
                if (v125 == 2)
                  break;
                if (v124->i8[0] == 61)
                  goto LABEL_308;
                v126 = (llvm *)((v119 >> 3) & 3);
                if (!(_DWORD)v126)
                  v126 = (llvm *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v95 + 8))(v95);
                if ((_DWORD)v126 == 2)
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"may not occur within a group!";
                  v348 = 259;
                  v155 = (llvm::raw_ostream *)llvm::errs(v126);
                  llvm::cl::Option::error(v95, (llvm::Twine *)&__p, 0, 0, v155);
                  v54 = 1;
LABEL_310:
                  v22 = v296;
                  v73 = v292;
LABEL_311:
                  v97 = *(unsigned int *)(v43 + 88);
                  if ((_DWORD)v97)
                    goto LABEL_389;
                  v321 = v306;
                  v322 = v307;
                  if (!v307)
                    goto LABEL_387;
                  __p.__r_.__value_.__s.__data_[0] = 61;
                  v156 = llvm::StringRef::find((uint64_t *)&v321, (char *)&__p, 1uLL, 0);
                  if (v156 == -1)
                  {
                    v294 = 0;
                    v295 = 0;
                    v285 = v322;
                    v286 = v321;
                  }
                  else
                  {
                    v157 = v156 >= (unint64_t)v322 ? v322 : (const unsigned __int8 *)v156;
                    v285 = v157;
                    v286 = v321;
                    v158 = (unint64_t)v322 >= v156 + 1 ? v156 + 1 : (uint64_t)v322;
                    v294 = (std::string::size_type)v321->u64 + v158;
                    v295 = &v322[-v158];
                  }
                  v159 = *(_QWORD **)(v43 + 128);
                  v160 = *(unsigned int *)(v43 + 136);
                  if ((_DWORD)v160)
                  {
                    v161 = *(uint64_t **)(v43 + 128);
                    if (*v159)
                      v162 = *v159 == -8;
                    else
                      v162 = 1;
                    if (v162)
                    {
                      do
                      {
                        v164 = v161[1];
                        ++v161;
                        v163 = v164;
                        if (v164)
                          v165 = v163 == -8;
                        else
                          v165 = 1;
                      }
                      while (v165);
                    }
                  }
                  else
                  {
                    v161 = *(uint64_t **)(v43 + 128);
                  }
                  v166 = &v159[v160];
                  if (v161 == v166)
                  {
LABEL_387:
                    v96 = 0;
LABEL_388:
                    v69 = (const char **)v291;
                    v97 = *(unsigned int *)(v43 + 88);
                    if (!(_DWORD)v97)
                      goto LABEL_159;
                    goto LABEL_389;
                  }
                  v96 = 0;
                  v167 = 0;
                  v168 = *v161;
                  v288 = v54;
                  v287 = v166;
                  while (2)
                  {
                    v169 = *(_QWORD *)(v168 + 8);
                    if ((*(_WORD *)(v169 + 10) & 0x60) == 0x40)
                      goto LABEL_381;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
                    __p.__r_.__value_.__l.__size_ = 0x1000000000;
                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v169 + 72))(v169, &__p);
                    v170 = *(_QWORD *)(v169 + 24);
                    if (v170)
                    {
                      v171 = v169;
                      v172 = *(_QWORD *)(v169 + 16);
                      v173 = LODWORD(__p.__r_.__value_.__r.__words[1]);
                      if (LODWORD(__p.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__p.__r_.__value_.__r.__words[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, &__p.__r_.__value_.__r.__words[2], LODWORD(__p.__r_.__value_.__r.__words[1]) + 1, 16);
                        v173 = LODWORD(__p.__r_.__value_.__r.__words[1]);
                      }
                      v174 = (_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16 * v173);
                      *v174 = v172;
                      v174[1] = v170;
                      ++LODWORD(__p.__r_.__value_.__r.__words[1]);
                      v169 = v171;
                    }
                    v175 = (*(unsigned __int16 *)(v169 + 10) >> 3) & 3;
                    if (v175)
                    {
                      v176 = LODWORD(__p.__r_.__value_.__r.__words[1]);
                      if (!LODWORD(__p.__r_.__value_.__r.__words[1]))
                        goto LABEL_378;
                    }
                    else
                    {
                      v175 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
                      v176 = LODWORD(__p.__r_.__value_.__r.__words[1]);
                      if (!LODWORD(__p.__r_.__value_.__r.__words[1]))
                        goto LABEL_378;
                    }
                    v297 = v169;
                    v177 = __p.__r_.__value_.__r.__words[0];
                    if (v175 == 3)
                      v178 = (unint64_t)v322;
                    else
                      v178 = (unint64_t)v285;
                    if (v175 == 3)
                      v179 = (unsigned __int8 *)v321;
                    else
                      v179 = (unsigned __int8 *)v286;
                    if (v175 != 3 && v295 != 0)
                    {
                      v189 = 16 * v176;
                      do
                      {
                        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v177;
                        v191 = llvm::StringRef::edit_distance((uint64_t)&__dst, v179, v178, 1, v167);
                        v192 = v191;
                        if (!v96 || v191 < v167)
                        {
                          v190 = *(_QWORD *)(v177 + 8);
                          v315[0] = *(_QWORD *)v177;
                          v315[1] = v190;
                          v315[2] = "=";
                          v316 = 773;
                          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v315;
                          __dst.__r_.__value_.__r.__words[2] = v294;
                          v318 = v295;
                          v319 = 1282;
                          llvm::Twine::str((llvm::Twine *)&__dst, &v320);
                          if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v310.__r_.__value_.__l.__data_);
                          v310 = v320;
                          v167 = v192;
                          v96 = v297;
                        }
                        v177 += 16;
                        v189 -= 16;
                      }
                      while (v189);
LABEL_378:
                      if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[2])
                        free(__p.__r_.__value_.__l.__data_);
                      v22 = v296;
                      v43 = v304;
                      v73 = v292;
                      v54 = v288;
                      v166 = v287;
                      do
                      {
LABEL_381:
                        v193 = v161[1];
                        ++v161;
                        v168 = v193;
                        if (v193)
                          v194 = v168 == -8;
                        else
                          v194 = 1;
                      }
                      while (v194);
                      if (v161 == v166)
                        goto LABEL_388;
                      continue;
                    }
                    break;
                  }
                  v181 = 16 * v176;
                  while (2)
                  {
                    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v177;
                    v182 = llvm::StringRef::edit_distance((uint64_t)&__dst, v179, v178, 1, v167);
                    v183 = v182;
                    if (v96 && v182 >= v167)
                      goto LABEL_359;
                    v184 = *(_QWORD *)(v177 + 8);
                    if (v184 > 0x7FFFFFFFFFFFFFF7)
                      goto LABEL_565;
                    v185 = *(const void **)v177;
                    if (v184 >= 0x17)
                    {
                      v187 = (v184 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v184 | 7) != 0x17)
                        v187 = v184 | 7;
                      v188 = v187 + 1;
                      p_dst = (std::string *)operator new(v187 + 1);
                      __dst.__r_.__value_.__l.__size_ = v184;
                      __dst.__r_.__value_.__r.__words[2] = v188 | 0x8000000000000000;
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                    }
                    else
                    {
                      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v177 + 8);
                      p_dst = &__dst;
                      if (!v184)
                      {
                        __dst.__r_.__value_.__s.__data_[0] = 0;
                        if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_358;
LABEL_370:
                        operator delete(v310.__r_.__value_.__l.__data_);
LABEL_358:
                        v310 = __dst;
                        v167 = v183;
                        v96 = v297;
LABEL_359:
                        v177 += 16;
                        v181 -= 16;
                        if (!v181)
                          goto LABEL_378;
                        continue;
                      }
                    }
                    break;
                  }
                  memmove(p_dst, v185, v184);
                  p_dst->__r_.__value_.__s.__data_[v184] = 0;
                  if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_370;
                  goto LABEL_358;
                }
                LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                v127 = ProvideOption(v95, (uint64_t)v121, (uint64_t)v123, 0, 0, 0, 0, &__p);
                v306 = v124;
                v307 = (const unsigned __int8 *)v122;
                Key = llvm::StringMapImpl::FindKey(v293, v124, (const unsigned __int8 *)v122);
                v128 = *(_QWORD *)(v43 + 128);
                v129 = *(unsigned int *)(v43 + 136);
                if ((_DWORD)Key == -1)
                  v130 = *(unsigned int *)(v43 + 136);
                else
                  v130 = (int)Key;
                v131 = v128 + 8 * v130;
                if (v130 != v129 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v131 + 8) + 10) & 0x1000) == 0)
                  v131 = v128 + 8 * v129;
                v132 = v128 + 8 * v129;
                if (v122 >= 2 && v131 == v132)
                {
                  do
                  {
                    if (v122 >= v122 - 1)
                      --v122;
                    Key = llvm::StringMapImpl::FindKey(v293, v124, (const unsigned __int8 *)v122);
                    v136 = *(_QWORD *)(v43 + 128);
                    v137 = *(unsigned int *)(v43 + 136);
                    if ((_DWORD)Key == -1)
                      v138 = *(unsigned int *)(v43 + 136);
                    else
                      v138 = (int)Key;
                    v131 = v136 + 8 * v138;
                    if (v138 != v137 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)v131 + 8) + 10) & 0x1000) == 0)
                      v131 = v136 + 8 * v137;
                    v132 = v136 + 8 * v137;
                  }
                  while (v131 == v132 && v122 > 1);
                }
                v133 = v122;
                v54 = v54 | v127;
                if (v131 == v132)
                  goto LABEL_310;
                v95 = *(unsigned __int16 **)(*(_QWORD *)v131 + 8);
                v119 = v95[5];
                if ((v119 & 0x1000) == 0)
                  goto LABEL_310;
                v121 = v306;
                v134 = v307;
                v124 = (int8x16_t *)((char *)v306 + v122);
                if ((unint64_t)v307 >= v122)
                  v122 = (unint64_t)&v307[-v122];
                else
                  v122 = 0;
                if ((unint64_t)v307 >= v133)
                  v123 = (const unsigned __int8 *)v133;
                else
                  v123 = v307;
                v307 = v123;
                if (v133 >= (unint64_t)v134)
                  goto LABEL_305;
              }
              if (v124->i8[0] == 61)
              {
LABEL_308:
                v124 = (int8x16_t *)((char *)v124 + 1);
                --v122;
              }
            }
LABEL_306:
            v308 = v124;
            v309 = v122;
            v22 = v296;
            v73 = v292;
LABEL_151:
            if ((v95[5] & 0x180) == 0x80)
            {
              v299 = 0;
              if ((v95[5] & 0x400) != 0 && v309)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"This argument does not take a value.\n"
                                                                           "\tInstead, it consumes any positional argumen"
                                                                           "ts until the next recognized option.";
                v348 = 259;
                Key = llvm::cl::Option::error(v95, (llvm::Twine *)&__p, 0, 0, v298);
                v299 = 0;
                v77 = 0;
                v54 = 1;
                v301 = v95;
                if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_116;
              }
              else
              {
                v301 = v95;
                v77 = 0;
                if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_116;
              }
            }
            else
            {
              Key = ProvideOption(v95, (uint64_t)v306, (uint64_t)v307, v308, v309, v303, (uint64_t)v69, &v311);
              v299 = 0;
              v77 = 0;
              v54 = v54 | Key;
              if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_116;
            }
            goto LABEL_115;
          }
        }
        if (!atomic_load(llvm::cl::TopLevelSubCommand))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
        if (Key)
        {
LABEL_150:
          v95 = (unsigned __int16 *)Key;
          goto LABEL_151;
        }
        goto LABEL_198;
      }
    }
    if (!v301)
    {
      if (*(_DWORD *)(v43 + 40))
      {
        Key = strlen(v69[v45]);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v69[v45];
        __p.__r_.__value_.__l.__size_ = Key;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v45;
        v78 = (char *)v333;
        if (v334 >= HIDWORD(v334))
        {
          v200 = v334 + 1;
          if (v333 <= &__p && (char *)v333 + 24 * v334 > (char *)&__p)
          {
            v79 = v54;
            v201 = (char *)&__p - (_BYTE *)v333;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v333, v335, v200, 24);
            v78 = (char *)v333;
            v80 = (std::string *)((char *)v333 + v201);
          }
          else
          {
            v79 = v54;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v333, v335, v200, 24);
            v80 = &__p;
            v78 = (char *)v333;
          }
        }
        else
        {
          v79 = v54;
          v80 = &__p;
        }
        v81 = &v78[24 * v334];
        v82 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        *((_QWORD *)v81 + 2) = *((_QWORD *)&v80->__r_.__value_.__l + 2);
        *(_OWORD *)v81 = v82;
        v83 = v334 + 1;
        LODWORD(v334) = v83;
        if (v83 >= v302 && *(_QWORD *)(v43 + 152))
        {
          v84 = v45 + 1;
          if (v45 + 1 < v303)
          {
            v85 = (const char **)&v289[v45];
            do
            {
              if (*v85)
                Key = strlen(*v85);
              else
                Key = 0;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*v85;
              __p.__r_.__value_.__l.__size_ = Key;
              LODWORD(__p.__r_.__value_.__r.__words[2]) = v84;
              v86 = (char *)v333;
              if (v83 >= HIDWORD(v334))
              {
                v90 = v83 + 1;
                if (v333 <= &__p && (char *)v333 + 24 * v83 > (char *)&__p)
                {
                  v91 = (char *)&__p - (_BYTE *)v333;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v333, v335, v90, 24);
                  v86 = (char *)v333;
                  v87 = (std::string *)((char *)v333 + v91);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v333, v335, v90, 24);
                  v87 = &__p;
                  v86 = (char *)v333;
                }
              }
              else
              {
                v87 = &__p;
              }
              v88 = &v86[24 * v334];
              v89 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
              *((_QWORD *)v88 + 2) = *((_QWORD *)&v87->__r_.__value_.__l + 2);
              *(_OWORD *)v88 = v89;
              v83 = v334 + 1;
              LODWORD(v334) = v334 + 1;
              ++v84;
              ++v85;
            }
            while (v303 != v84);
            v84 = v303;
          }
          v301 = 0;
          v311 = v84;
          v77 = 7;
          v54 = v79;
          if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_116;
        }
        else
        {
          v301 = 0;
          v77 = 9;
          v54 = v79;
          if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_116;
        }
LABEL_115:
        operator delete(v310.__r_.__value_.__l.__data_);
        goto LABEL_116;
      }
      v96 = 0;
      v97 = *(unsigned int *)(v43 + 88);
      if (!(_DWORD)v97)
      {
LABEL_159:
        v98 = *(char *)(v22 + 23);
        if (v98 >= 0)
          v99 = (const char *)v22;
        else
          v99 = *(const char **)v22;
        if (v98 >= 0)
          v100 = *(unsigned __int8 *)(v22 + 23);
        else
          v100 = *(_QWORD *)(v22 + 8);
        Key = (std::string::size_type)llvm::raw_ostream::write(v298, v99, v100);
        v101 = (llvm::raw_ostream *)Key;
        v102 = *(void **)(Key + 32);
        if (*(_QWORD *)(Key + 24) - (_QWORD)v102 > 0x20uLL)
        {
          qmemcpy(v102, ": Unknown command line argument '", 33);
          *(_QWORD *)(Key + 32) += 33;
          v103 = v69[v311];
          if (!v103)
            goto LABEL_275;
        }
        else
        {
          Key = (std::string::size_type)llvm::raw_ostream::write((llvm::raw_ostream *)Key, ": Unknown command line argument '", 0x21uLL);
          v101 = (llvm::raw_ostream *)Key;
          v103 = v69[v311];
          if (!v103)
            goto LABEL_275;
        }
        v110 = strlen(v103);
        Key = *((_QWORD *)v101 + 4);
        if (v110 <= *((_QWORD *)v101 + 3) - Key)
        {
          if (v110)
          {
            Key = (std::string::size_type)memcpy((void *)Key, v103, v110);
            *((_QWORD *)v101 + 4) += v110;
          }
        }
        else
        {
          Key = (std::string::size_type)llvm::raw_ostream::write(v101, v103, v110);
          v101 = (llvm::raw_ostream *)Key;
        }
LABEL_275:
        v143 = *((_QWORD *)v101 + 4);
        if ((unint64_t)(*((_QWORD *)v101 + 3) - v143) > 9)
        {
          *(_WORD *)(v143 + 8) = 10016;
          *(_QWORD *)v143 = *(_QWORD *)"'.  Try: '";
          *((_QWORD *)v101 + 4) += 10;
          v144 = *v69;
          if (!*v69)
            goto LABEL_283;
        }
        else
        {
          Key = (std::string::size_type)llvm::raw_ostream::write(v101, "'.  Try: '", 0xAuLL);
          v101 = (llvm::raw_ostream *)Key;
          v144 = *v69;
          if (!*v69)
            goto LABEL_283;
        }
        v145 = strlen(v144);
        Key = *((_QWORD *)v101 + 4);
        if (v145 <= *((_QWORD *)v101 + 3) - Key)
        {
          if (v145)
          {
            Key = (std::string::size_type)memcpy((void *)Key, v144, v145);
            *((_QWORD *)v101 + 4) += v145;
          }
        }
        else
        {
          Key = (std::string::size_type)llvm::raw_ostream::write(v101, v144, v145);
          v101 = (llvm::raw_ostream *)Key;
        }
LABEL_283:
        v146 = *((_QWORD *)v101 + 4);
        if ((unint64_t)(*((_QWORD *)v101 + 3) - v146) > 8)
        {
          *(_BYTE *)(v146 + 8) = 10;
          *(_QWORD *)v146 = *(_QWORD *)" --help'\n";
          *((_QWORD *)v101 + 4) += 9;
          if (!v96)
          {
LABEL_285:
            v77 = 9;
            v54 = 1;
            if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_116;
            goto LABEL_115;
          }
        }
        else
        {
          Key = (std::string::size_type)llvm::raw_ostream::write(v101, " --help'\n", 9uLL);
          if (!v96)
            goto LABEL_285;
        }
        v147 = *(char *)(v22 + 23);
        if (v147 >= 0)
          v148 = (const char *)v22;
        else
          v148 = *(const char **)v22;
        if (v147 >= 0)
          v149 = *(unsigned __int8 *)(v22 + 23);
        else
          v149 = *(_QWORD *)(v22 + 8);
        v150 = llvm::raw_ostream::write(v298, v148, v149);
        v151 = (_OWORD *)*((_QWORD *)v150 + 4);
        if (*((_QWORD *)v150 + 3) - (_QWORD)v151 > 0xFuLL)
        {
          *v151 = *(_OWORD *)": Did you mean '";
          *((_QWORD *)v150 + 4) += 16;
        }
        else
        {
          v150 = llvm::raw_ostream::write(v150, ": Did you mean '", 0x10uLL);
        }
        v152 = HIBYTE(v310.__r_.__value_.__r.__words[2]);
        v153 = (std::string *)v310.__r_.__value_.__r.__words[0];
        if ((v310.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v152 = v310.__r_.__value_.__l.__size_;
        else
          v153 = &v310;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v153;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v152;
        v154 = *(_QWORD *)(Key + 32);
        if ((unint64_t)(*(_QWORD *)(Key + 24) - v154) > 2)
        {
          *(_BYTE *)(v154 + 2) = 10;
          *(_WORD *)v154 = 16167;
          *(_QWORD *)(Key + 32) += 3;
          v77 = 9;
          v54 = 1;
          if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_116;
        }
        else
        {
          Key = (std::string::size_type)llvm::raw_ostream::write((llvm::raw_ostream *)Key, "'?\n", 3uLL);
          v77 = 9;
          v54 = 1;
          if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_116;
        }
        goto LABEL_115;
      }
LABEL_389:
      v195 = *(_QWORD **)(v43 + 80);
      v196 = v311;
      v197 = 8 * v97;
      do
      {
        v199 = v69[v196];
        if (v199)
          v198 = strlen(v69[v196]);
        else
          v198 = 0;
        Key = (*(uint64_t (**)(_QWORD, uint64_t, const char *, _QWORD, const char *, size_t, _QWORD))(*(_QWORD *)*v195 + 80))(*v195, v196, "", 0, v199, v198, 0);
        ++v195;
        v197 -= 8;
      }
      while (v197);
      v77 = 9;
      v43 = v304;
      if ((SHIBYTE(v310.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_116;
      goto LABEL_115;
    }
    v76 = strlen(v69[v45]);
    LODWORD(__p.__r_.__value_.__l.__data_) = v45;
    Key = ProvideOption(v301, *((_QWORD *)v301 + 2), *((_QWORD *)v301 + 3), v74, v76, 0, 0, &__p);
    v77 = 9;
    if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_115;
LABEL_116:
    if (v77 == 9 || !v77)
    {
      v45 = v311 + 1;
      v311 = v45;
      if (v45 < v303)
        continue;
    }
    break;
  }
  v202 = v334;
  v203 = v302;
  if (v334 < v302)
    goto LABEL_401;
LABEL_411:
  v211 = *(unsigned int *)(v43 + 40);
  v212 = v290;
  if (v202 <= v211)
    v212 = 1;
  if ((v212 & 1) == 0)
  {
    v230 = *(char *)(v22 + 23);
    if (v230 >= 0)
      v231 = (const char *)v22;
    else
      v231 = *(const char **)v22;
    if (v230 >= 0)
      v232 = *(unsigned __int8 *)(v22 + 23);
    else
      v232 = *(_QWORD *)(v22 + 8);
    v233 = llvm::raw_ostream::write(v298, v231, v232);
    v234 = (void *)*((_QWORD *)v233 + 4);
    if (*((_QWORD *)v233 + 3) - (_QWORD)v234 > 0x2AuLL)
    {
      qmemcpy(v234, ": Too many positional arguments specified!\n", 43);
      v255 = *((_QWORD *)v233 + 3);
      v235 = *((_QWORD *)v233 + 4) + 43;
      *((_QWORD *)v233 + 4) = v235;
      if ((unint64_t)(v255 - v235) > 0x13)
        goto LABEL_440;
    }
    else
    {
      v233 = llvm::raw_ostream::write(v233, ": Too many positional arguments specified!\n", 0x2BuLL);
      v235 = *((_QWORD *)v233 + 4);
      if ((unint64_t)(*((_QWORD *)v233 + 3) - v235) > 0x13)
      {
LABEL_440:
        *(_DWORD *)(v235 + 16) = 544502639;
        *(_OWORD *)v235 = *(_OWORD *)"Can specify at most ";
        *((_QWORD *)v233 + 4) += 20;
        goto LABEL_511;
      }
    }
    v233 = llvm::raw_ostream::write(v233, "Can specify at most ", 0x14uLL);
LABEL_511:
    Key = (std::string::size_type)llvm::raw_ostream::operator<<(v233, *(unsigned int *)(v43 + 40));
    v228 = (llvm::raw_ostream *)Key;
    v256 = *(void **)(Key + 32);
    if (*(_QWORD *)(Key + 24) - (_QWORD)v256 > 0x1BuLL)
    {
      qmemcpy(v256, " positional arguments: See: ", 28);
      *(_QWORD *)(Key + 32) += 28;
      v238 = *v69;
      if (!*v69)
        goto LABEL_457;
    }
    else
    {
      Key = (std::string::size_type)llvm::raw_ostream::write((llvm::raw_ostream *)Key, " positional arguments: See: ", 0x1CuLL);
      v228 = (llvm::raw_ostream *)Key;
      v238 = *v69;
      if (!*v69)
        goto LABEL_457;
    }
LABEL_451:
    v239 = strlen(v238);
    Key = *((_QWORD *)v228 + 4);
    if (v239 <= *((_QWORD *)v228 + 3) - Key)
    {
      if (v239)
      {
        Key = (std::string::size_type)memcpy((void *)Key, v238, v239);
        *((_QWORD *)v228 + 4) += v239;
      }
    }
    else
    {
      Key = (std::string::size_type)llvm::raw_ostream::write(v228, v238, v239);
      v228 = (llvm::raw_ostream *)Key;
    }
    goto LABEL_457;
  }
  v213 = v54;
  if (*(_QWORD *)(v43 + 152))
  {
    if ((_DWORD)v211)
    {
      v214 = 0;
      v215 = 0;
      v216 = 8 * v211;
      do
      {
        Key = *(_QWORD *)(*(_QWORD *)(v43 + 32) + v214);
        if ((*(_WORD *)(Key + 10) & 6) == 2)
        {
          v217 = (char *)v333 + 24 * v215;
          v218 = *(_BYTE **)v217;
          v219 = *((_QWORD *)v217 + 1);
          LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v217 + 4);
          Key = ProvideOption((unsigned __int16 *)Key, *(_QWORD *)(Key + 16), *(_QWORD *)(Key + 24), v218, v219, 0, 0, &__p);
          v213 |= Key;
          ++v215;
        }
        v214 += 8;
      }
      while (v216 != v214);
      v202 = v334;
      if (*(_DWORD *)(v43 + 40) == 1 && v215 == 0)
      {
        if (!(_DWORD)v334)
          goto LABEL_461;
        v258 = **(_QWORD **)(v43 + 32);
        v259 = *(_BYTE **)v333;
        v260 = *((_QWORD *)v333 + 1);
        LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v333 + 4);
        Key = ProvideOption((unsigned __int16 *)v258, *(_QWORD *)(v258 + 16), *(_QWORD *)(v258 + 24), v259, v260, 0, 0, &__p);
        v213 |= Key;
        v215 = 1;
        v202 = v334;
      }
    }
    else
    {
      v215 = 0;
    }
    if (v202 != v215)
    {
      do
      {
        v281 = *(_QWORD *)(v43 + 152);
        v282 = (char *)v333 + 24 * v215;
        v283 = *(_BYTE **)v282;
        v284 = *((_QWORD *)v282 + 1);
        LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v282 + 4);
        Key = ProvideOption((unsigned __int16 *)v281, *(_QWORD *)(v281 + 16), *(_QWORD *)(v281 + 24), v283, v284, 0, 0, &__p);
        v213 |= Key;
        ++v215;
      }
      while (v215 != (_DWORD)v334);
    }
  }
  else if ((_DWORD)v211)
  {
    v261 = 0;
    v262 = 0;
    v263 = v302;
    do
    {
      Key = *(_QWORD *)(*(_QWORD *)(v304 + 32) + 8 * v261);
      if ((*(_WORD *)(Key + 10) & 6) == 2)
      {
        v264 = (char *)v333 + 24 * v262;
        v265 = *(_BYTE **)v264;
        v266 = *((_QWORD *)v264 + 1);
        LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v264 + 4);
        ProvideOption((unsigned __int16 *)Key, *(_QWORD *)(Key + 16), *(_QWORD *)(Key + 24), v265, v266, 0, 0, &__p);
        ++v262;
        --v263;
        Key = *(_QWORD *)(*(_QWORD *)(v304 + 32) + 8 * v261);
      }
      if (v202 - v262 > v263 && (*(_WORD *)(Key + 10) & 7) != 2)
      {
        v267 = v202 - 1 - v262;
        do
        {
          v268 = *(_QWORD *)(*(_QWORD *)(v304 + 32) + 8 * v261);
          v269 = *(_WORD *)(v268 + 10);
          v270 = (char *)v333 + 24 * v262;
          v271 = *(_BYTE **)v270;
          v272 = *((_QWORD *)v270 + 1);
          LODWORD(__p.__r_.__value_.__l.__data_) = *((_DWORD *)v270 + 4);
          Key = ProvideOption((unsigned __int16 *)v268, *(_QWORD *)(v268 + 16), *(_QWORD *)(v268 + 24), v271, v272, 0, 0, &__p);
          ++v262;
          if (v267 <= v263)
            break;
          --v267;
        }
        while ((v269 & 7) != 0);
      }
      ++v261;
      v22 = v296;
    }
    while (v261 != v211);
    v43 = v304;
  }
LABEL_461:
  v241 = *(uint64_t **)(v43 + 128);
  v242 = *(unsigned int *)(v43 + 136);
  if ((_DWORD)v242)
  {
    v243 = *(uint64_t **)(v43 + 128);
    if (*v241)
      v244 = *v241 == -8;
    else
      v244 = 1;
    if (v244)
    {
      do
      {
        v246 = v243[1];
        ++v243;
        v245 = v246;
        if (v246)
          v247 = v245 == -8;
        else
          v247 = 1;
      }
      while (v247);
    }
    v248 = &v241[v242];
    if (v243 == v248)
      goto LABEL_483;
    goto LABEL_474;
  }
  v243 = *(uint64_t **)(v43 + 128);
  v248 = &v241[v242];
  if (v241 != v248)
  {
LABEL_474:
    v249 = *v243;
    do
    {
      v250 = *(_QWORD *)(v249 + 8);
      if ((*(_WORD *)(v250 + 10) & 6) == 2 && !*(_WORD *)(v250 + 8))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"must be specified at least once!";
        v348 = 259;
        v251 = (llvm::raw_ostream *)llvm::errs((llvm *)Key);
        Key = llvm::cl::Option::error((_QWORD *)v250, (llvm::Twine *)&__p, 0, 0, v251);
        v213 = 1;
      }
      do
      {
        v252 = v243[1];
        ++v243;
        v249 = v252;
        if (v252)
          v253 = v249 == -8;
        else
          v253 = 1;
      }
      while (v253);
    }
    while (v243 != v248);
  }
LABEL_483:
  *(_QWORD *)(v22 + 48) = *(_QWORD *)(v22 + 40);
  v36 = v213 == 0;
  if (!a5 && v213)
    exit(1);
  if (v333 != v335)
    free(v333);
LABEL_487:
  if ((_DWORD)v338)
    llvm::deallocate_buffer(*(llvm **)v337, (void *)0x1000);
  if ((_DWORD)v341)
    llvm::deallocate_buffer(*(llvm **)v340, *((void **)v340 + 1));
  if (v340 != v342)
    free(v340);
  if (v337 != v339)
    free(v337);
  if (v343 != v345)
    free(v343);
  if ((_DWORD)v325)
    llvm::deallocate_buffer(*(llvm **)v324, (void *)0x1000);
  if ((_DWORD)v328)
    llvm::deallocate_buffer(*(llvm **)v327, *((void **)v327 + 1));
  if (v327 != v329)
    free(v327);
  if (v324 != v326)
    free(v324);
  if (v330 != v332)
    free(v330);
  return v36;
}

void initCommonOptions(llvm *a1)
{
  mlir::GenericProgramPoint *v2;
  llvm *v3;
  llvm *v4;
  llvm *v5;
  llvm *v6;
  llvm *v7;
  mlir::GenericProgramPoint *v8;
  llvm *v9;

  if (!atomic_load(qword_1ECD32EF0))
  llvm::initDebugCounterOptions(a1);
  mlir::GenericProgramPoint::~GenericProgramPoint(v2);
  llvm::initSignalsOptions(v3);
  llvm::initStatisticOptions(v4);
  llvm::initTimerOptions(v5);
  llvm::initTypeSizeOptions(v6);
  llvm::initWithColorOptions(v7);
  mlir::GenericProgramPoint::~GenericProgramPoint(v8);
  llvm::initRandomSeedOptions(v9);
}

uint64_t llvm::cl::Option::error(_QWORD *a1, llvm::Twine *a2, uint64_t a3, uint64_t a4, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v5;
  uint64_t v7;
  uint64_t v8;
  int v10;
  const char *v11;
  size_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  const void *v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD v21[3];

  v5 = this;
  if (a3)
  {
    v7 = a4;
    v8 = a3;
    if (a4)
    {
LABEL_3:
      if (!atomic_load(qword_1ECD32ED8))
      v10 = *(char *)(qword_1ECD32ED8[0] + 23);
      if (v10 >= 0)
        v11 = (const char *)qword_1ECD32ED8[0];
      else
        v11 = *(const char **)qword_1ECD32ED8[0];
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(qword_1ECD32ED8[0] + 23);
      else
        v12 = *(_QWORD *)(qword_1ECD32ED8[0] + 8);
      v13 = llvm::raw_ostream::write(v5, v11, v12);
      v14 = *((_QWORD *)v13 + 4);
      if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 9)
      {
        *(_WORD *)(v14 + 8) = 8293;
        *(_QWORD *)v14 = *(_QWORD *)": for the ";
        *((_QWORD *)v13 + 4) += 10;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v13, ": for the ", 0xAuLL);
      }
      v21[0] = v8;
      v21[1] = v7;
      v21[2] = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v8 = a1[2];
    v7 = a1[3];
    if (v7)
      goto LABEL_3;
  }
  v15 = (const void *)a1[4];
  v16 = a1[5];
  v17 = (void *)*((_QWORD *)this + 4);
  if (v16 <= *((_QWORD *)this + 3) - (_QWORD)v17)
  {
    if (v16)
    {
      memcpy(v17, v15, v16);
      *((_QWORD *)v5 + 4) += v16;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v15, v16);
  }
LABEL_18:
  v18 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v18) > 8)
  {
    *(_BYTE *)(v18 + 8) = 32;
    *(_QWORD *)v18 = *(_QWORD *)" option: ";
    *((_QWORD *)v5 + 4) += 9;
    llvm::Twine::print(a2, v5);
    v19 = (_BYTE *)*((_QWORD *)v5 + 4);
    if (*((_BYTE **)v5 + 3) != v19)
      goto LABEL_20;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, " option: ", 9uLL);
    llvm::Twine::print(a2, v5);
    v19 = (_BYTE *)*((_QWORD *)v5 + 4);
    if (*((_BYTE **)v5 + 3) != v19)
    {
LABEL_20:
      *v19 = 10;
      ++*((_QWORD *)v5 + 4);
      return 1;
    }
  }
  llvm::raw_ostream::write(v5, "\n", 1uLL);
  return 1;
}

llvm::raw_ostream *`anonymous namespace'::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  size_t v9;
  llvm::raw_ostream *v10;
  const void *v11;
  size_t v12;
  void *v13;
  void *v15;
  __int128 v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v15 = v17;
  v16 = xmmword_1812349A0;
  v6 = 0;
  if (v5)
  {
    do
    {
      if ((unint64_t)(v6 + 1) > *((_QWORD *)&v16 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v15, v17, v6 + 1, 1);
        v6 = v16;
      }
      *((_BYTE *)v15 + v6) = 32;
      v6 = v16 + 1;
      *(_QWORD *)&v16 = v16 + 1;
      --v5;
    }
    while (v5);
    v7 = *((_QWORD *)&v16 + 1);
  }
  else
  {
    v7 = 8;
  }
  if (v4 <= 1)
    v8 = "-";
  else
    v8 = "--";
  if (v4 <= 1)
    v9 = 1;
  else
    v9 = 2;
  if (v7 < v9 + v6)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v15, v17, v9 + v6, 1);
    v6 = v16;
  }
  memcpy((char *)v15 + v6, v8, v9);
  *(_QWORD *)&v16 = v16 + v9;
  v10 = llvm::raw_ostream::write(a1, (const char *)v15, v16);
  v11 = *(const void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = (void *)*((_QWORD *)v10 + 4);
  if (v12 <= *((_QWORD *)v10 + 3) - (_QWORD)v13)
  {
    if (v12)
    {
      memcpy(v13, v11, v12);
      *((_QWORD *)v10 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, (const char *)v11, v12);
  }
  if (v15 != v17)
    free(v15);
  return a1;
}

uint64_t llvm::cl::Option::addOccurrence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
    ++*(_WORD *)(a1 + 8);
  return (**(uint64_t (***)(uint64_t))a1)(a1);
}

uint64_t llvm::cl::alias::getOptionWidth(llvm::cl::alias *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1 == 1)
    return 7;
  else
    return v1 + 7;
}

llvm::raw_ostream *llvm::cl::Option::printHelpStr(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  llvm *v6;
  llvm *v7;
  char *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *result;
  const char *v14;
  size_t v15;
  llvm *v16;
  uint64_t v17;
  llvm *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  __int128 v24;
  const void *v25;
  size_t v26;
  char *v27;
  unint64_t v28;
  __int128 v29;
  char v30;

  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = a2;
  v30 = 10;
  v6 = (llvm *)llvm::StringRef::find((uint64_t *)&v29, &v30, 1uLL, 0);
  if (v6 == (llvm *)-1)
  {
    v27 = 0;
    v28 = 0;
    v24 = v29;
  }
  else
  {
    if ((unint64_t)v6 >= *((_QWORD *)&v29 + 1))
      v7 = (llvm *)*((_QWORD *)&v29 + 1);
    else
      v7 = v6;
    if (*((_QWORD *)&v29 + 1) >= (unint64_t)v6 + 1)
      v8 = (char *)v6 + 1;
    else
      v8 = (char *)*((_QWORD *)&v29 + 1);
    *(_QWORD *)&v24 = v29;
    *((_QWORD *)&v24 + 1) = v7;
    v27 = &v8[v29];
    v28 = *((_QWORD *)&v29 + 1) - (_QWORD)v8;
  }
  v9 = (llvm::raw_ostream *)llvm::outs(v6);
  v10 = llvm::raw_ostream::indent(v9, a3 - a4);
  v11 = v10;
  v12 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 3) - v12) <= 2)
  {
    v11 = llvm::raw_ostream::write(v10, " - ", 3uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)v11 + 4);
    v15 = *((_QWORD *)&v24 + 1);
    v14 = (const char *)v24;
    if (*((_QWORD *)&v24 + 1) <= *((_QWORD *)v11 + 3) - (_QWORD)result)
      goto LABEL_12;
LABEL_18:
    v11 = llvm::raw_ostream::write(v11, v14, v15);
    result = (llvm::raw_ostream *)*((_QWORD *)v11 + 4);
    if (*((llvm::raw_ostream **)v11 + 3) != result)
      goto LABEL_15;
    goto LABEL_19;
  }
  *(_BYTE *)(v12 + 2) = 32;
  *(_WORD *)v12 = 11552;
  result = (llvm::raw_ostream *)(*((_QWORD *)v10 + 4) + 3);
  *((_QWORD *)v11 + 4) = result;
  v15 = *((_QWORD *)&v24 + 1);
  v14 = (const char *)v24;
  if (*((_QWORD *)&v24 + 1) > *((_QWORD *)v11 + 3) - (_QWORD)result)
    goto LABEL_18;
LABEL_12:
  if (v15)
  {
    memcpy(result, v14, v15);
    result = (llvm::raw_ostream *)(*((_QWORD *)v11 + 4) + v15);
    *((_QWORD *)v11 + 4) = result;
  }
  if (*((llvm::raw_ostream **)v11 + 3) != result)
  {
LABEL_15:
    *(_BYTE *)result = 10;
    ++*((_QWORD *)v11 + 4);
    if (v28)
      goto LABEL_22;
    return result;
  }
LABEL_19:
  for (result = llvm::raw_ostream::write(v11, "\n", 1uLL); v28; result = llvm::raw_ostream::write(v23, "\n", 1uLL))
  {
LABEL_22:
    while (1)
    {
      v30 = 10;
      v16 = (llvm *)llvm::StringRef::find((uint64_t *)&v27, &v30, 1uLL, 0);
      if (v16 == (llvm *)-1)
      {
        v20 = 0;
        v21 = 0;
        v17 = (uint64_t)v27;
        v18 = (llvm *)v28;
      }
      else
      {
        v17 = (uint64_t)v27;
        v18 = (unint64_t)v16 >= v28 ? (llvm *)v28 : v16;
        v19 = v28 >= (unint64_t)v16 + 1 ? (uint64_t)v16 + 1 : v28;
        v20 = (uint64_t)&v27[v19];
        v21 = v28 - v19;
      }
      v25 = (const void *)v17;
      v26 = (size_t)v18;
      v27 = (char *)v20;
      v28 = v21;
      v22 = (llvm::raw_ostream *)llvm::outs(v16);
      v23 = llvm::raw_ostream::indent(v22, a3);
      result = (llvm::raw_ostream *)*((_QWORD *)v23 + 4);
      if (v26 <= *((_QWORD *)v23 + 3) - (_QWORD)result)
      {
        if (v26)
        {
          memcpy(result, v25, v26);
          result = (llvm::raw_ostream *)(*((_QWORD *)v23 + 4) + v26);
          *((_QWORD *)v23 + 4) = result;
        }
      }
      else
      {
        v23 = llvm::raw_ostream::write(v23, (const char *)v25, v26);
        result = (llvm::raw_ostream *)*((_QWORD *)v23 + 4);
      }
      if (*((llvm::raw_ostream **)v23 + 3) == result)
        break;
      *(_BYTE *)result = 10;
      ++*((_QWORD *)v23 + 4);
      if (!v28)
        return result;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::cl::Option::printEnumValHelpStr(uint64_t a1, uint64_t a2, int a3, int a4)
{
  llvm *v6;
  llvm *v7;
  char *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  _WORD *v13;
  llvm::raw_ostream *result;
  const char *v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  llvm *v19;
  uint64_t v20;
  llvm *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  __int128 v27;
  const void *v28;
  size_t v29;
  char *v30;
  unint64_t v31;
  __int128 v32;
  char v33;

  *(_QWORD *)&v32 = a1;
  *((_QWORD *)&v32 + 1) = a2;
  v33 = 10;
  v6 = (llvm *)llvm::StringRef::find((uint64_t *)&v32, &v33, 1uLL, 0);
  if (v6 == (llvm *)-1)
  {
    v30 = 0;
    v31 = 0;
    v27 = v32;
  }
  else
  {
    if ((unint64_t)v6 >= *((_QWORD *)&v32 + 1))
      v7 = (llvm *)*((_QWORD *)&v32 + 1);
    else
      v7 = v6;
    if (*((_QWORD *)&v32 + 1) >= (unint64_t)v6 + 1)
      v8 = (char *)v6 + 1;
    else
      v8 = (char *)*((_QWORD *)&v32 + 1);
    *(_QWORD *)&v27 = v32;
    *((_QWORD *)&v27 + 1) = v7;
    v30 = &v8[v32];
    v31 = *((_QWORD *)&v32 + 1) - (_QWORD)v8;
  }
  v9 = (llvm::raw_ostream *)llvm::outs(v6);
  v10 = llvm::raw_ostream::indent(v9, a3 - a4);
  v11 = v10;
  v12 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 3) - v12) > 2)
  {
    *(_BYTE *)(v12 + 2) = 32;
    *(_WORD *)v12 = 11552;
    v17 = *((_QWORD *)v10 + 3);
    v13 = (_WORD *)(*((_QWORD *)v10 + 4) + 3);
    *((_QWORD *)v10 + 4) = v13;
    if ((unint64_t)(v17 - (_QWORD)v13) > 1)
    {
LABEL_12:
      *v13 = 8224;
      result = (llvm::raw_ostream *)(*((_QWORD *)v11 + 4) + 2);
      *((_QWORD *)v11 + 4) = result;
      v16 = *((_QWORD *)&v27 + 1);
      v15 = (const char *)v27;
      if (*((_QWORD *)&v27 + 1) <= *((_QWORD *)v11 + 3) - (_QWORD)result)
        goto LABEL_13;
LABEL_20:
      v11 = llvm::raw_ostream::write(v11, v15, v16);
      result = (llvm::raw_ostream *)*((_QWORD *)v11 + 4);
      if (*((llvm::raw_ostream **)v11 + 3) != result)
        goto LABEL_16;
      goto LABEL_21;
    }
  }
  else
  {
    v11 = llvm::raw_ostream::write(v10, " - ", 3uLL);
    v13 = (_WORD *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 1uLL)
      goto LABEL_12;
  }
  v11 = llvm::raw_ostream::write(v11, "  ", 2uLL);
  result = (llvm::raw_ostream *)*((_QWORD *)v11 + 4);
  v16 = *((_QWORD *)&v27 + 1);
  v15 = (const char *)v27;
  if (*((_QWORD *)&v27 + 1) > *((_QWORD *)v11 + 3) - (_QWORD)result)
    goto LABEL_20;
LABEL_13:
  if (v16)
  {
    memcpy(result, v15, v16);
    result = (llvm::raw_ostream *)(*((_QWORD *)v11 + 4) + v16);
    *((_QWORD *)v11 + 4) = result;
  }
  if (*((llvm::raw_ostream **)v11 + 3) != result)
  {
LABEL_16:
    *(_BYTE *)result = 10;
    ++*((_QWORD *)v11 + 4);
    if (!v31)
      return result;
    goto LABEL_22;
  }
LABEL_21:
  result = llvm::raw_ostream::write(v11, "\n", 1uLL);
  if (!v31)
    return result;
LABEL_22:
  v18 = a3 + 2;
  do
  {
    while (1)
    {
      v33 = 10;
      v19 = (llvm *)llvm::StringRef::find((uint64_t *)&v30, &v33, 1uLL, 0);
      if (v19 == (llvm *)-1)
      {
        v23 = 0;
        v24 = 0;
        v20 = (uint64_t)v30;
        v21 = (llvm *)v31;
      }
      else
      {
        v20 = (uint64_t)v30;
        v21 = (unint64_t)v19 >= v31 ? (llvm *)v31 : v19;
        v22 = v31 >= (unint64_t)v19 + 1 ? (uint64_t)v19 + 1 : v31;
        v23 = (uint64_t)&v30[v22];
        v24 = v31 - v22;
      }
      v28 = (const void *)v20;
      v29 = (size_t)v21;
      v30 = (char *)v23;
      v31 = v24;
      v25 = (llvm::raw_ostream *)llvm::outs(v19);
      v26 = llvm::raw_ostream::indent(v25, v18);
      result = (llvm::raw_ostream *)*((_QWORD *)v26 + 4);
      if (v29 <= *((_QWORD *)v26 + 3) - (_QWORD)result)
      {
        if (v29)
        {
          memcpy(result, v28, v29);
          result = (llvm::raw_ostream *)(*((_QWORD *)v26 + 4) + v29);
          *((_QWORD *)v26 + 4) = result;
        }
      }
      else
      {
        v26 = llvm::raw_ostream::write(v26, (const char *)v28, v29);
        result = (llvm::raw_ostream *)*((_QWORD *)v26 + 4);
      }
      if (*((llvm::raw_ostream **)v26 + 3) == result)
        break;
      *(_BYTE *)result = 10;
      ++*((_QWORD *)v26 + 4);
      if (!v31)
        return result;
    }
    result = llvm::raw_ostream::write(v26, "\n", 1uLL);
  }
  while (v31);
  return result;
}

llvm::raw_ostream *llvm::cl::alias::printOptionInfo(llvm::cl::alias *this, unsigned int a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  int v6;
  __int128 v8;
  uint64_t v9;

  v4 = (llvm::raw_ostream *)llvm::outs(this);
  v8 = *((_OWORD *)this + 1);
  v9 = 2;
  v5 = *((_QWORD *)this + 3);
  if (v5 == 1)
    v6 = 7;
  else
    v6 = v5 + 7;
  return llvm::cl::Option::printHelpStr(*((_QWORD *)this + 4), *((_QWORD *)this + 5), a2, v6);
}

uint64_t llvm::cl::parser<llvm::cl::BOOLOrDefault>::parse(int a1, _QWORD *a2, int a3, int a4, _DWORD *__s1, size_t __n, _DWORD *a7)
{
  uint64_t result;
  uint64_t *v14;
  llvm::raw_ostream *v15;
  const char *v16;
  __int16 v17;
  uint64_t v18[4];
  __int16 v19;
  _BYTE v20[40];

  switch(__n)
  {
    case 0uLL:
      goto LABEL_8;
    case 1uLL:
      if (!memcmp(__s1, "1", __n))
        goto LABEL_8;
      if (!memcmp(__s1, "0", __n))
        goto LABEL_19;
      goto LABEL_18;
    case 4uLL:
      if (*__s1 != 1702195828 && *__s1 != 1163219540 && *__s1 != 1702195796)
        goto LABEL_18;
LABEL_8:
      result = 0;
      *a7 = 1;
      break;
    case 5uLL:
      if (memcmp(__s1, "false", __n))
      {
        if ((*__s1 != 1397506374 || *((_BYTE *)__s1 + 4) != 69) && (*__s1 != 1936482630 || *((_BYTE *)__s1 + 4) != 101))
          goto LABEL_18;
      }
LABEL_19:
      result = 0;
      *a7 = 2;
      break;
    default:
LABEL_18:
      v19 = 1283;
      v18[0] = (uint64_t)"'";
      v18[2] = (uint64_t)__s1;
      v18[3] = __n;
      v16 = "' is invalid value for BOOLean argument! Try 0 or 1";
      v17 = 259;
      v14 = llvm::operator+(v18, (uint64_t *)&v16, (uint64_t)v20);
      v15 = (llvm::raw_ostream *)llvm::errs((llvm *)v14);
      llvm::cl::Option::error(a2, (llvm::Twine *)v20, 0, 0, v15);
      result = 1;
      break;
  }
  return result;
}

uint64_t llvm::cl::parser<long long>::parse(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t AsSignedInteger;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _QWORD v15[4];
  __int16 v16;
  unint64_t v17[4];
  __int16 v18;

  v17[0] = 0;
  AsSignedInteger = llvm::getAsSignedInteger(a5, a6, 0, v17);
  v12 = AsSignedInteger;
  if ((AsSignedInteger & 1) != 0)
  {
    v16 = 1283;
    v15[0] = "'";
    v15[2] = a5;
    v15[3] = a6;
    v17[0] = (unint64_t)v15;
    v17[2] = (unint64_t)"' value invalid for llong argument!";
    v18 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)AsSignedInteger);
    llvm::cl::Option::error(a2, (llvm::Twine *)v17, 0, 0, v13);
  }
  else
  {
    *a7 = v17[0];
  }
  return v12;
}

uint64_t llvm::cl::parser<unsigned long long>::parse(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t AsUnsignedInteger;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _QWORD v15[4];
  __int16 v16;
  unint64_t v17[4];
  __int16 v18;

  v17[0] = 0;
  AsUnsignedInteger = llvm::getAsUnsignedInteger(a5, a6, 0, v17);
  v12 = AsUnsignedInteger;
  if ((AsUnsignedInteger & 1) != 0)
  {
    v16 = 1283;
    v15[0] = "'";
    v15[2] = a5;
    v15[3] = a6;
    v17[0] = (unint64_t)v15;
    v17[2] = (unint64_t)"' value invalid for ullong argument!";
    v18 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)AsUnsignedInteger);
    llvm::cl::Option::error(a2, (llvm::Twine *)v17, 0, 0, v13);
  }
  else
  {
    *a7 = v17[0];
  }
  return v12;
}

unint64_t llvm::cl::generic_parser_base::getOptionWidth(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2)
{
  uint64_t v3;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *((_QWORD *)a2 + 3);
  if (v3)
  {
    if (v3 == 1)
      v5 = 15;
    else
      v5 = v3 + 15;
    v6 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      do
      {
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v8);
        v10 = v9;
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 32))(this, v8);
        v12 = v11;
        v13 = (*((unsigned __int16 *)a2 + 5) >> 3) & 3;
        if (v13)
        {
          if (v13 != 1 || v10 != 0 || v11 != 0)
            goto LABEL_24;
        }
        else if ((*(unsigned int (**)(const llvm::cl::Option *))(*(_QWORD *)a2 + 8))(a2) != 1
               || v10 != 0
               || v12 != 0)
        {
LABEL_24:
          v18 = v10 + 8;
          if (!v10)
            v18 = 15;
          if (v5 <= v18)
            v5 = v18;
        }
        v8 = (v8 + 1);
      }
      while (v7 != (_DWORD)v8);
    }
  }
  else
  {
    v19 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
    if (v19)
    {
      v20 = v19;
      v21 = 0;
      v5 = 0;
      do
      {
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v21);
        if (v5 <= v22 + 8)
          v5 = v22 + 8;
        v21 = (v21 + 1);
      }
      while (v20 != (_DWORD)v21);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t llvm::cl::generic_parser_base::printOptionInfo(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2, unsigned int a3)
{
  llvm *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  _BYTE *v9;
  const void *v10;
  size_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  _DWORD *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  int v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::raw_ostream *v45;
  llvm::raw_ostream *v46;
  uint64_t v47;
  void *v48;
  int v49;
  llvm *v50;
  _DWORD *v51;
  _BYTE *v52;
  __int128 v54;
  uint64_t v55;

  if (!*((_QWORD *)a2 + 3))
  {
    if (!*((_QWORD *)a2 + 5))
      goto LABEL_12;
    v6 = (llvm::raw_ostream *)llvm::outs(this);
    v7 = v6;
    v8 = (_WORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 8224;
      v9 = (_BYTE *)(*((_QWORD *)v6 + 4) + 2);
      *((_QWORD *)v7 + 4) = v9;
      v10 = (const void *)*((_QWORD *)a2 + 4);
      v11 = *((_QWORD *)a2 + 5);
      if (v11 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
      {
LABEL_8:
        if (v11)
        {
          memcpy(v9, v10, v11);
          v9 = (_BYTE *)(*((_QWORD *)v7 + 4) + v11);
          *((_QWORD *)v7 + 4) = v9;
        }
        if ((unint64_t)v9 < *((_QWORD *)v7 + 3))
          goto LABEL_11;
        goto LABEL_22;
      }
    }
    else
    {
      v7 = llvm::raw_ostream::write(v6, "  ", 2uLL);
      v9 = (_BYTE *)*((_QWORD *)v7 + 4);
      v10 = (const void *)*((_QWORD *)a2 + 4);
      v11 = *((_QWORD *)a2 + 5);
      if (v11 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
        goto LABEL_8;
    }
    v7 = llvm::raw_ostream::write(v7, (const char *)v10, v11);
    v9 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v9 < *((_QWORD *)v7 + 3))
    {
LABEL_11:
      *((_QWORD *)v7 + 4) = v9 + 1;
      *v9 = 10;
LABEL_12:
      result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
      if (!(_DWORD)result)
        return result;
      goto LABEL_23;
    }
LABEL_22:
    llvm::raw_ostream::write(v7, 10);
    result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
    if (!(_DWORD)result)
      return result;
LABEL_23:
    v16 = result;
    v17 = 0;
    do
    {
      v20 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v17);
      v22 = v21;
      v23 = (llvm::raw_ostream *)llvm::outs(v20);
      v24 = (_DWORD *)*((_QWORD *)v23 + 4);
      if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 3uLL)
      {
        *v24 = 538976288;
        *((_QWORD *)v23 + 4) += 4;
      }
      else
      {
        v23 = llvm::raw_ostream::write(v23, "    ", 4uLL);
      }
      *(_QWORD *)&v54 = v20;
      *((_QWORD *)&v54 + 1) = v22;
      v55 = 2;
      v18 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 32))(this, v17);
      result = (uint64_t)llvm::cl::Option::printHelpStr(v18, v19, a3, (int)v22 + 8);
      v17 = (v17 + 1);
    }
    while (v16 != (_DWORD)v17);
    return result;
  }
  v5 = (llvm *)((*((unsigned __int16 *)a2 + 5) >> 3) & 3);
  if ((_DWORD)v5)
  {
    if ((_DWORD)v5 != 1)
      goto LABEL_32;
  }
  else
  {
    v5 = (llvm *)(*(uint64_t (**)(const llvm::cl::Option *))(*(_QWORD *)a2 + 8))(a2);
    if ((_DWORD)v5 != 1)
      goto LABEL_32;
  }
  v5 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)v5)
  {
    v13 = (int)v5;
    v14 = 0;
    while (1)
    {
      v5 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v14);
      if (!v15)
        break;
      v14 = (v14 + 1);
      if (v13 == (_DWORD)v14)
        goto LABEL_32;
    }
    v25 = (llvm::raw_ostream *)llvm::outs(v5);
    v54 = *((_OWORD *)a2 + 1);
    v55 = 2;
    v26 = *((_QWORD *)a2 + 3);
    if (v26 == 1)
      v27 = 7;
    else
      v27 = v26 + 7;
    v5 = llvm::cl::Option::printHelpStr(*((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), a3, v27);
  }
LABEL_32:
  v28 = (llvm::raw_ostream *)llvm::outs(v5);
  v54 = *((_OWORD *)a2 + 1);
  v55 = 2;
  v30 = (_QWORD *)*((_QWORD *)v29 + 4);
  if (*((_QWORD *)v29 + 3) - (_QWORD)v30 > 7uLL)
  {
    *v30 = 0x3E65756C61763C3DLL;
    *((_QWORD *)v29 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v29, "=<value>", 8uLL);
  }
  v31 = *((_QWORD *)a2 + 3);
  if (v31 == 1)
    v32 = 15;
  else
    v32 = v31 + 15;
  llvm::cl::Option::printHelpStr(*((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), a3, v32);
  result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)result)
  {
    v33 = result;
    v34 = 0;
    do
    {
      v35 = (const char *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v34);
      v37 = v36;
      v39 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 32))(this, v34);
      v40 = v38;
      result = (*((unsigned __int16 *)a2 + 5) >> 3) & 3;
      if ((_DWORD)result)
      {
        if ((_DWORD)result == 1 && v37 == 0 && v38 == 0)
          goto LABEL_41;
      }
      else
      {
        result = (*(uint64_t (**)(const llvm::cl::Option *))(*(_QWORD *)a2 + 8))(a2);
        if ((_DWORD)result == 1 && v37 == 0 && v40 == 0)
          goto LABEL_41;
      }
      v45 = (llvm::raw_ostream *)llvm::outs((llvm *)result);
      v46 = v45;
      v47 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v47) > 4)
      {
        *(_BYTE *)(v47 + 4) = 61;
        *(_DWORD *)v47 = 538976288;
        v48 = (void *)(*((_QWORD *)v45 + 4) + 5);
        *((_QWORD *)v46 + 4) = v48;
        v49 = v37 + 8;
        if (v37 > *((_QWORD *)v46 + 3) - (_QWORD)v48)
        {
LABEL_64:
          v50 = llvm::raw_ostream::write(v46, v35, v37);
          if (!v40)
            goto LABEL_70;
          goto LABEL_40;
        }
      }
      else
      {
        v46 = llvm::raw_ostream::write(v45, "    =", 5uLL);
        v48 = (void *)*((_QWORD *)v46 + 4);
        v49 = v37 + 8;
        if (v37 > *((_QWORD *)v46 + 3) - (_QWORD)v48)
          goto LABEL_64;
      }
      if (v37)
      {
        v50 = (llvm *)memcpy(v48, v35, v37);
        *((_QWORD *)v46 + 4) += v37;
        if (!v40)
          goto LABEL_70;
      }
      else
      {
        v50 = (llvm *)llvm::outs((llvm *)v48);
        v51 = (_DWORD *)*((_QWORD *)v50 + 4);
        if (*((_QWORD *)v50 + 3) - (_QWORD)v51 > 6uLL)
        {
          *(_DWORD *)((char *)v51 + 3) = 1048147056;
          *v51 = 1886217532;
          *((_QWORD *)v50 + 4) += 7;
          v49 = 15;
          if (!v40)
          {
LABEL_70:
            result = (uint64_t)llvm::outs(v50);
            v52 = *(_BYTE **)(result + 32);
            if ((unint64_t)v52 >= *(_QWORD *)(result + 24))
            {
              result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 10);
            }
            else
            {
              *(_QWORD *)(result + 32) = v52 + 1;
              *v52 = 10;
            }
            goto LABEL_41;
          }
        }
        else
        {
          v50 = llvm::raw_ostream::write(v50, "<empty>", 7uLL);
          v49 = 15;
          if (!v40)
            goto LABEL_70;
        }
      }
LABEL_40:
      result = (uint64_t)llvm::cl::Option::printEnumValHelpStr(v39, v40, a3, v49);
LABEL_41:
      v34 = (v34 + 1);
    }
    while (v33 != (_DWORD)v34);
  }
  return result;
}

llvm::raw_ostream *llvm::cl::generic_parser_base::printGenericOptionDiff(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2, const llvm::cl::GenericOptionValue *a3, const llvm::cl::GenericOptionValue *a4, int a5)
{
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *result;
  void *v19;
  const char *v20;
  size_t v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  _WORD *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  void *v29;
  llvm *v30;
  unint64_t v31;
  unsigned int v32;
  llvm::raw_ostream *v33;
  llvm::raw_ostream *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm *v38;
  llvm::raw_ostream *v39;
  size_t v40;
  const void *v41;
  size_t v42;
  _WORD *v43;
  __int128 v44;
  uint64_t v45;

  v10 = (llvm::raw_ostream *)llvm::outs(this);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8224;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, "  ", 2uLL);
  }
  v44 = *((_OWORD *)a2 + 1);
  v45 = 2;
  v13 = (llvm::raw_ostream *)llvm::outs(v12);
  llvm::raw_ostream::indent(v13, a5 - *((_DWORD *)a2 + 6));
  v14 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)v14)
  {
    v15 = (int)v14;
    v16 = 0;
    while (1)
    {
      v17 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 48))(this, v16);
      v14 = (llvm *)(**(uint64_t (***)(const llvm::cl::GenericOptionValue *, uint64_t))a3)(a3, v17);
      if ((_DWORD)v14)
        break;
      v16 = (v16 + 1);
      if (v15 == (_DWORD)v16)
        goto LABEL_8;
    }
    v23 = (llvm::raw_ostream *)llvm::outs(v14);
    v24 = v23;
    v25 = (_WORD *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v25 > 1uLL)
    {
      *v25 = 8253;
      *((_QWORD *)v23 + 4) += 2;
    }
    else
    {
      v24 = llvm::raw_ostream::write(v23, "= ", 2uLL);
    }
    v27 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v16);
    v28 = v26;
    v29 = (void *)*((_QWORD *)v24 + 4);
    if (v26 <= *((_QWORD *)v24 + 3) - (_QWORD)v29)
    {
      if (v26)
      {
        memcpy(v29, v27, v26);
        *((_QWORD *)v24 + 4) += v28;
      }
    }
    else
    {
      llvm::raw_ostream::write(v24, (const char *)v27, v26);
    }
    v30 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v16);
    if (v31 <= 8)
      v32 = 8 - v31;
    else
      v32 = 0;
    v33 = (llvm::raw_ostream *)llvm::outs(v30);
    v34 = llvm::raw_ostream::indent(v33, v32);
    v35 = *((_QWORD *)v34 + 4);
    if ((unint64_t)(*((_QWORD *)v34 + 3) - v35) > 0xA)
    {
      *(_DWORD *)(v35 + 7) = 540701804;
      *(_QWORD *)v35 = *(_QWORD *)" (default: ";
      *((_QWORD *)v34 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v34, " (default: ", 0xBuLL);
    }
    v36 = 0;
    while (1)
    {
      v37 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 48))(this, v36);
      v38 = (llvm *)(**(uint64_t (***)(const llvm::cl::GenericOptionValue *, uint64_t))a4)(a4, v37);
      if ((_DWORD)v38)
        break;
      v36 = (v36 + 1);
      if (v15 == (_DWORD)v36)
        goto LABEL_33;
    }
    v39 = (llvm::raw_ostream *)llvm::outs(v38);
    v41 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v36);
    v42 = v40;
    v38 = (llvm *)*((_QWORD *)v39 + 4);
    if (v40 <= *((_QWORD *)v39 + 3) - (_QWORD)v38)
    {
      if (v40)
      {
        v38 = (llvm *)memcpy(v38, v41, v40);
        *((_QWORD *)v39 + 4) += v42;
      }
    }
    else
    {
      v38 = llvm::raw_ostream::write(v39, (const char *)v41, v40);
    }
LABEL_33:
    result = (llvm::raw_ostream *)llvm::outs(v38);
    v43 = (_WORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v43 <= 1uLL)
    {
      v20 = ")\n";
      v21 = 2;
      return llvm::raw_ostream::write(result, v20, v21);
    }
    *v43 = 2601;
    v22 = *((_QWORD *)result + 4) + 2;
  }
  else
  {
LABEL_8:
    result = (llvm::raw_ostream *)llvm::outs(v14);
    v19 = (void *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v19 <= 0x18uLL)
    {
      v20 = "= *unknown option value*\n";
      v21 = 25;
      return llvm::raw_ostream::write(result, v20, v21);
    }
    qmemcpy(v19, "= *unknown option value*\n", 25);
    v22 = *((_QWORD *)result + 4) + 25;
  }
  *((_QWORD *)result + 4) = v22;
  return result;
}

void llvm::cl::parser<BOOL>::printOptionDiff(llvm *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  const char *v15;
  size_t v16;
  llvm::raw_ostream *v17;
  int v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  int v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  int v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;

  v9 = (llvm::raw_ostream *)llvm::outs(a1);
  v32 = *(_OWORD *)(a2 + 16);
  v33 = 2;
  v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  v40 = 0;
  v41 = 0;
  v42 = 0;
  DWORD2(v32) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  *(_QWORD *)&v32 = &unk_1E0E22B10;
  v39 = (void **)&v40;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  v13 = (llvm::raw_ostream *)llvm::outs(v12);
  v14 = (_WORD *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 1uLL)
  {
    *v14 = 8253;
    *((_QWORD *)v13 + 4) += 2;
  }
  else
  {
    v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0)
    v15 = (const char *)&v40;
  else
    v15 = v40;
  if (v42 >= 0)
    v16 = HIBYTE(v42);
  else
    v16 = v41;
  v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    v18 = v41;
    if (v41 < 8)
      goto LABEL_12;
  }
  else
  {
    v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  v19 = 0;
LABEL_15:
  v20 = (llvm::raw_ostream *)llvm::outs(v17);
  v21 = llvm::raw_ostream::indent(v20, v19);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) <= 0xA)
  {
    v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    v24 = *(unsigned __int8 *)(a4 + 9);
    v25 = (llvm *)llvm::outs(v23);
    if (v24)
      goto LABEL_17;
LABEL_21:
    v30 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(_QWORD *)v30 = *(_QWORD *)"*no default*";
      *((_QWORD *)v25 + 4) += 12;
      v27 = (llvm::raw_ostream *)llvm::outs(v25);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
    else
    {
      v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      v27 = (llvm::raw_ostream *)llvm::outs(v31);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(_QWORD *)v22 = *(_QWORD *)" (default: ";
  *((_QWORD *)v21 + 4) += 11;
  v29 = *(unsigned __int8 *)(a4 + 9);
  v25 = (llvm *)llvm::outs(v21);
  if (!v29)
    goto LABEL_21;
LABEL_17:
  v26 = llvm::raw_ostream::operator<<(v25, *(unsigned __int8 *)(a4 + 8));
  v27 = (llvm::raw_ostream *)llvm::outs(v26);
  v28 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v28 <= 1uLL)
    goto LABEL_18;
LABEL_25:
  *v28 = 2601;
  *((_QWORD *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0)
LABEL_19:
    operator delete(v40);
}

void llvm::cl::parser<llvm::cl::BOOLOrDefault>::printOptionDiff(llvm *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  const char *v15;
  size_t v16;
  llvm::raw_ostream *v17;
  int v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  int v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  int v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;

  v9 = (llvm::raw_ostream *)llvm::outs(a1);
  v32 = *(_OWORD *)(a2 + 16);
  v33 = 2;
  v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  v40 = 0;
  v41 = 0;
  v42 = 0;
  DWORD2(v32) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  *(_QWORD *)&v32 = &unk_1E0E22B10;
  v39 = (void **)&v40;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  v13 = (llvm::raw_ostream *)llvm::outs(v12);
  v14 = (_WORD *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 1uLL)
  {
    *v14 = 8253;
    *((_QWORD *)v13 + 4) += 2;
  }
  else
  {
    v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0)
    v15 = (const char *)&v40;
  else
    v15 = v40;
  if (v42 >= 0)
    v16 = HIBYTE(v42);
  else
    v16 = v41;
  v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    v18 = v41;
    if (v41 < 8)
      goto LABEL_12;
  }
  else
  {
    v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  v19 = 0;
LABEL_15:
  v20 = (llvm::raw_ostream *)llvm::outs(v17);
  v21 = llvm::raw_ostream::indent(v20, v19);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) <= 0xA)
  {
    v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    v24 = *(unsigned __int8 *)(a4 + 12);
    v25 = (llvm *)llvm::outs(v23);
    if (v24)
      goto LABEL_17;
LABEL_21:
    v30 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(_QWORD *)v30 = *(_QWORD *)"*no default*";
      *((_QWORD *)v25 + 4) += 12;
      v27 = (llvm::raw_ostream *)llvm::outs(v25);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
    else
    {
      v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      v27 = (llvm::raw_ostream *)llvm::outs(v31);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(_QWORD *)v22 = *(_QWORD *)" (default: ";
  *((_QWORD *)v21 + 4) += 11;
  v29 = *(unsigned __int8 *)(a4 + 12);
  v25 = (llvm *)llvm::outs(v21);
  if (!v29)
    goto LABEL_21;
LABEL_17:
  v26 = llvm::raw_ostream::operator<<(v25, *(int *)(a4 + 8));
  v27 = (llvm::raw_ostream *)llvm::outs(v26);
  v28 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v28 <= 1uLL)
    goto LABEL_18;
LABEL_25:
  *v28 = 2601;
  *((_QWORD *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0)
LABEL_19:
    operator delete(v40);
}

void llvm::cl::parser<long long>::printOptionDiff(llvm *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  const char *v15;
  size_t v16;
  llvm::raw_ostream *v17;
  int v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  int v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  int v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;

  v9 = (llvm::raw_ostream *)llvm::outs(a1);
  v32 = *(_OWORD *)(a2 + 16);
  v33 = 2;
  v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  v40 = 0;
  v41 = 0;
  v42 = 0;
  DWORD2(v32) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  *(_QWORD *)&v32 = &unk_1E0E22B10;
  v39 = (void **)&v40;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  v13 = (llvm::raw_ostream *)llvm::outs(v12);
  v14 = (_WORD *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 1uLL)
  {
    *v14 = 8253;
    *((_QWORD *)v13 + 4) += 2;
  }
  else
  {
    v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0)
    v15 = (const char *)&v40;
  else
    v15 = v40;
  if (v42 >= 0)
    v16 = HIBYTE(v42);
  else
    v16 = v41;
  v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    v18 = v41;
    if (v41 < 8)
      goto LABEL_12;
  }
  else
  {
    v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  v19 = 0;
LABEL_15:
  v20 = (llvm::raw_ostream *)llvm::outs(v17);
  v21 = llvm::raw_ostream::indent(v20, v19);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) <= 0xA)
  {
    v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    v24 = *(unsigned __int8 *)(a4 + 16);
    v25 = (llvm *)llvm::outs(v23);
    if (v24)
      goto LABEL_17;
LABEL_21:
    v30 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(_QWORD *)v30 = *(_QWORD *)"*no default*";
      *((_QWORD *)v25 + 4) += 12;
      v27 = (llvm::raw_ostream *)llvm::outs(v25);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
    else
    {
      v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      v27 = (llvm::raw_ostream *)llvm::outs(v31);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(_QWORD *)v22 = *(_QWORD *)" (default: ";
  *((_QWORD *)v21 + 4) += 11;
  v29 = *(unsigned __int8 *)(a4 + 16);
  v25 = (llvm *)llvm::outs(v21);
  if (!v29)
    goto LABEL_21;
LABEL_17:
  v26 = llvm::raw_ostream::operator<<(v25, *(_QWORD *)(a4 + 8));
  v27 = (llvm::raw_ostream *)llvm::outs(v26);
  v28 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v28 <= 1uLL)
    goto LABEL_18;
LABEL_25:
  *v28 = 2601;
  *((_QWORD *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0)
LABEL_19:
    operator delete(v40);
}

void llvm::cl::parser<unsigned int>::printOptionDiff(llvm *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  const char *v15;
  size_t v16;
  llvm::raw_ostream *v17;
  int v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  int v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  int v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;

  v9 = (llvm::raw_ostream *)llvm::outs(a1);
  v32 = *(_OWORD *)(a2 + 16);
  v33 = 2;
  v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  v40 = 0;
  v41 = 0;
  v42 = 0;
  DWORD2(v32) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  *(_QWORD *)&v32 = &unk_1E0E22B10;
  v39 = (void **)&v40;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  v13 = (llvm::raw_ostream *)llvm::outs(v12);
  v14 = (_WORD *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 1uLL)
  {
    *v14 = 8253;
    *((_QWORD *)v13 + 4) += 2;
  }
  else
  {
    v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0)
    v15 = (const char *)&v40;
  else
    v15 = v40;
  if (v42 >= 0)
    v16 = HIBYTE(v42);
  else
    v16 = v41;
  v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    v18 = v41;
    if (v41 < 8)
      goto LABEL_12;
  }
  else
  {
    v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  v19 = 0;
LABEL_15:
  v20 = (llvm::raw_ostream *)llvm::outs(v17);
  v21 = llvm::raw_ostream::indent(v20, v19);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) <= 0xA)
  {
    v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    v24 = *(unsigned __int8 *)(a4 + 12);
    v25 = (llvm *)llvm::outs(v23);
    if (v24)
      goto LABEL_17;
LABEL_21:
    v30 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(_QWORD *)v30 = *(_QWORD *)"*no default*";
      *((_QWORD *)v25 + 4) += 12;
      v27 = (llvm::raw_ostream *)llvm::outs(v25);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
    else
    {
      v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      v27 = (llvm::raw_ostream *)llvm::outs(v31);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(_QWORD *)v22 = *(_QWORD *)" (default: ";
  *((_QWORD *)v21 + 4) += 11;
  v29 = *(unsigned __int8 *)(a4 + 12);
  v25 = (llvm *)llvm::outs(v21);
  if (!v29)
    goto LABEL_21;
LABEL_17:
  v26 = llvm::raw_ostream::operator<<(v25, *(unsigned int *)(a4 + 8));
  v27 = (llvm::raw_ostream *)llvm::outs(v26);
  v28 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v28 <= 1uLL)
    goto LABEL_18;
LABEL_25:
  *v28 = 2601;
  *((_QWORD *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0)
LABEL_19:
    operator delete(v40);
}

void llvm::cl::parser<unsigned long long>::printOptionDiff(llvm *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  _WORD *v14;
  const char *v15;
  size_t v16;
  llvm::raw_ostream *v17;
  int v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  int v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  int v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;

  v9 = (llvm::raw_ostream *)llvm::outs(a1);
  v32 = *(_OWORD *)(a2 + 16);
  v33 = 2;
  v11 = (llvm::raw_ostream *)llvm::outs(v10);
  llvm::raw_ostream::indent(v11, a5 - *(_DWORD *)(a2 + 24));
  v40 = 0;
  v41 = 0;
  v42 = 0;
  DWORD2(v32) = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  *(_QWORD *)&v32 = &unk_1E0E22B10;
  v39 = (void **)&v40;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v32, 0, 0, 0);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, a3);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
  v13 = (llvm::raw_ostream *)llvm::outs(v12);
  v14 = (_WORD *)*((_QWORD *)v13 + 4);
  if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 1uLL)
  {
    *v14 = 8253;
    *((_QWORD *)v13 + 4) += 2;
  }
  else
  {
    v13 = llvm::raw_ostream::write(v13, "= ", 2uLL);
  }
  if (v42 >= 0)
    v15 = (const char *)&v40;
  else
    v15 = v40;
  if (v42 >= 0)
    v16 = HIBYTE(v42);
  else
    v16 = v41;
  v17 = llvm::raw_ostream::write(v13, v15, v16);
  if (SHIBYTE(v42) < 0)
  {
    v18 = v41;
    if (v41 < 8)
      goto LABEL_12;
  }
  else
  {
    v18 = HIBYTE(v42);
    if (HIBYTE(v42) <= 7u)
    {
LABEL_12:
      v19 = 8 - v18;
      goto LABEL_15;
    }
  }
  v19 = 0;
LABEL_15:
  v20 = (llvm::raw_ostream *)llvm::outs(v17);
  v21 = llvm::raw_ostream::indent(v20, v19);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) <= 0xA)
  {
    v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    v24 = *(unsigned __int8 *)(a4 + 16);
    v25 = (llvm *)llvm::outs(v23);
    if (v24)
      goto LABEL_17;
LABEL_21:
    v30 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v30) > 0xB)
    {
      *(_DWORD *)(v30 + 8) = 712273013;
      *(_QWORD *)v30 = *(_QWORD *)"*no default*";
      *((_QWORD *)v25 + 4) += 12;
      v27 = (llvm::raw_ostream *)llvm::outs(v25);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
    else
    {
      v31 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
      v27 = (llvm::raw_ostream *)llvm::outs(v31);
      v28 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
        goto LABEL_25;
    }
LABEL_18:
    llvm::raw_ostream::write(v27, ")\n", 2uLL);
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      return;
    goto LABEL_19;
  }
  *(_DWORD *)(v22 + 7) = 540701804;
  *(_QWORD *)v22 = *(_QWORD *)" (default: ";
  *((_QWORD *)v21 + 4) += 11;
  v29 = *(unsigned __int8 *)(a4 + 16);
  v25 = (llvm *)llvm::outs(v21);
  if (!v29)
    goto LABEL_21;
LABEL_17:
  v26 = llvm::raw_ostream::operator<<(v25, *(_QWORD *)(a4 + 8));
  v27 = (llvm::raw_ostream *)llvm::outs(v26);
  v28 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v28 <= 1uLL)
    goto LABEL_18;
LABEL_25:
  *v28 = 2601;
  *((_QWORD *)v27 + 4) += 2;
  if (SHIBYTE(v42) < 0)
LABEL_19:
    operator delete(v40);
}

llvm::raw_ostream *llvm::cl::parser<std::string>::printOptionDiff(llvm *a1, uint64_t a2, const void *a3, size_t a4, uint64_t a5, int a6)
{
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  _WORD *v17;
  void *v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  int v24;
  llvm::raw_ostream *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  int v29;
  const char *v30;
  size_t v31;
  llvm::raw_ostream *v32;
  llvm::raw_ostream *result;
  _WORD *v34;
  int v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  __int128 v38;
  uint64_t v39;

  v11 = (llvm::raw_ostream *)llvm::outs(a1);
  v38 = *(_OWORD *)(a2 + 16);
  v39 = 2;
  v13 = (llvm::raw_ostream *)llvm::outs(v12);
  v14 = llvm::raw_ostream::indent(v13, a6 - *(_DWORD *)(a2 + 24));
  v15 = (llvm::raw_ostream *)llvm::outs(v14);
  v16 = v15;
  v17 = (_WORD *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v17 > 1uLL)
  {
    *v17 = 8253;
    v18 = (void *)(*((_QWORD *)v15 + 4) + 2);
    *((_QWORD *)v16 + 4) = v18;
    if (a4 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
      goto LABEL_3;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v15, "= ", 2uLL);
    v18 = (void *)*((_QWORD *)v16 + 4);
    if (a4 <= *((_QWORD *)v16 + 3) - (_QWORD)v18)
    {
LABEL_3:
      if (a4)
      {
        v18 = memcpy(v18, a3, a4);
        *((_QWORD *)v16 + 4) += a4;
        if (a4 > 7)
          goto LABEL_5;
      }
      goto LABEL_8;
    }
  }
  v18 = llvm::raw_ostream::write(v16, (const char *)a3, a4);
  if (a4 > 7)
  {
LABEL_5:
    v19 = 0;
    goto LABEL_9;
  }
LABEL_8:
  v19 = 8 - a4;
LABEL_9:
  v20 = (llvm::raw_ostream *)llvm::outs((llvm *)v18);
  v21 = llvm::raw_ostream::indent(v20, v19);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 0xA)
  {
    *(_DWORD *)(v22 + 7) = 540701804;
    *(_QWORD *)v22 = *(_QWORD *)" (default: ";
    *((_QWORD *)v21 + 4) += 11;
    v35 = *(unsigned __int8 *)(a5 + 32);
    v25 = (llvm::raw_ostream *)llvm::outs(v21);
    if (v35)
    {
LABEL_11:
      v28 = *(const char **)(a5 + 8);
      v27 = a5 + 8;
      v26 = v28;
      v29 = *(char *)(v27 + 23);
      if (v29 >= 0)
        v30 = (const char *)v27;
      else
        v30 = v26;
      if (v29 >= 0)
        v31 = *(unsigned __int8 *)(v27 + 23);
      else
        v31 = *(_QWORD *)(v27 + 8);
      v32 = llvm::raw_ostream::write(v25, v30, v31);
      result = (llvm::raw_ostream *)llvm::outs(v32);
      v34 = (_WORD *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v34 <= 1uLL)
        return llvm::raw_ostream::write(result, ")\n", 2uLL);
LABEL_22:
      *v34 = 2601;
      *((_QWORD *)result + 4) += 2;
      return result;
    }
  }
  else
  {
    v23 = llvm::raw_ostream::write(v21, " (default: ", 0xBuLL);
    v24 = *(unsigned __int8 *)(a5 + 32);
    v25 = (llvm::raw_ostream *)llvm::outs(v23);
    if (v24)
      goto LABEL_11;
  }
  v36 = *((_QWORD *)v25 + 4);
  if ((unint64_t)(*((_QWORD *)v25 + 3) - v36) > 0xB)
  {
    *(_DWORD *)(v36 + 8) = 712273013;
    *(_QWORD *)v36 = *(_QWORD *)"*no default*";
    *((_QWORD *)v25 + 4) += 12;
    result = (llvm::raw_ostream *)llvm::outs(v25);
    v34 = (_WORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v34 > 1uLL)
      goto LABEL_22;
  }
  else
  {
    v37 = llvm::raw_ostream::write(v25, "*no default*", 0xCuLL);
    result = (llvm::raw_ostream *)llvm::outs(v37);
    v34 = (_WORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v34 > 1uLL)
      goto LABEL_22;
  }
  return llvm::raw_ostream::write(result, ")\n", 2uLL);
}

double llvm::cl::basic_parser_impl::printOptionNoValue(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, int a3)
{
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  void *v10;
  double result;
  __int128 v12;
  uint64_t v13;

  v5 = (llvm::raw_ostream *)llvm::outs(this);
  v12 = *((_OWORD *)a2 + 1);
  v13 = 2;
  v7 = (llvm::raw_ostream *)llvm::outs(v6);
  v8 = llvm::raw_ostream::indent(v7, a3 - *((_DWORD *)a2 + 6));
  v9 = (llvm::raw_ostream *)llvm::outs(v8);
  v10 = (void *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 0x1DuLL)
  {
    qmemcpy(v10, "= *cannot print option value*\n", 30);
    result = *(double *)"t option value*\n";
    *((_QWORD *)v9 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(v9, "= *cannot print option value*\n", 0x1EuLL);
  }
  return result;
}

_QWORD *llvm::cl::OptionCategory::OptionCategory(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  if (!atomic_load(qword_1ECD32ED8))
  v7 = qword_1ECD32ED8[0];
  v8 = *(_QWORD *)(qword_1ECD32ED8[0] + 120);
  if (v8 != *(_QWORD *)(qword_1ECD32ED8[0] + 112))
    goto LABEL_4;
  v10 = *(unsigned int *)(qword_1ECD32ED8[0] + 132);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 8 * v10;
    v13 = *(_QWORD **)(qword_1ECD32ED8[0] + 120);
    while ((_QWORD *)*v13 != a1)
    {
      if (*v13 == -2)
        v11 = v13;
      ++v13;
      v12 -= 8;
      if (!v12)
      {
        if (!v11)
          goto LABEL_14;
        *v11 = a1;
        --*(_DWORD *)(v7 + 136);
        return a1;
      }
    }
    return a1;
  }
LABEL_14:
  if (v10 >= *(_DWORD *)(qword_1ECD32ED8[0] + 128))
  {
LABEL_4:
    llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1ECD32ED8[0] + 112), a1);
    return a1;
  }
  *(_DWORD *)(qword_1ECD32ED8[0] + 132) = v10 + 1;
  *(_QWORD *)(v8 + 8 * v10) = a1;
  return a1;
}

void `anonymous namespace'::HelpPrinter::printHelp(_anonymous_namespace_::HelpPrinter *this)
{
  uint64_t v1;
  uint64_t v3;
  llvm::raw_ostream *v4;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  const char *v23;
  size_t v24;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  _BYTE *v29;
  const char *v30;
  size_t v31;
  _WORD *v32;
  const void *v33;
  size_t v34;
  llvm::raw_ostream *v35;
  _DWORD *v36;
  llvm::raw_ostream *v39;
  llvm::raw_ostream *v40;
  _DWORD *v41;
  int v44;
  const char *v45;
  size_t v46;
  llvm::raw_ostream *v47;
  llvm::raw_ostream *v48;
  _BYTE *v49;
  llvm::raw_ostream *v50;
  const char *v51;
  size_t v52;
  uint64_t v53;
  int v55;
  const char *v56;
  size_t v57;
  llvm::raw_ostream *v58;
  llvm *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  llvm::raw_ostream *v65;
  llvm::raw_ostream *v66;
  uint64_t v67;
  const void *v68;
  size_t v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  const void *v72;
  size_t v73;
  llvm::raw_ostream *v74;
  int *v75;
  llvm::raw_ostream *v76;
  llvm::raw_ostream *v77;
  _BYTE *v78;
  uint64_t v79;
  const char *v80;
  size_t v81;
  uint64_t v82;
  uint64_t v84;
  llvm *v85;
  const char **v86;
  const char *v87;
  llvm *v88;
  llvm::raw_ostream *v89;
  _WORD *v90;
  llvm::raw_ostream *v91;
  llvm::raw_ostream *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  llvm::raw_ostream *v97;
  _BYTE *v98;
  llvm::raw_ostream *v99;
  _WORD *v100;
  const char *v101;
  size_t v102;
  llvm::raw_ostream *v103;
  int v104;
  llvm::raw_ostream *v105;
  llvm::raw_ostream *v106;
  llvm::raw_ostream *v107;
  uint64_t v108;
  const void *v109;
  size_t v110;
  llvm::raw_ostream *v111;
  _BYTE *v112;
  llvm::raw_ostream *v113;
  llvm::raw_ostream *v114;
  _QWORD *v115;
  int v118;
  const char *v119;
  size_t v120;
  llvm::raw_ostream *v121;
  void *v122;
  llvm::raw_ostream *v123;
  _WORD *v124;
  uint64_t v125;
  uint64_t v126;
  llvm *v127;
  uint64_t v128;
  llvm *v129;
  llvm::raw_ostream *v130;
  uint64_t v131;
  llvm *v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t i;
  llvm::raw_ostream *v137;
  const char *v138;
  unint64_t v139;
  uint64_t (***v141)(_QWORD, void **, llvm *);
  uint64_t v142;
  void *__base;
  size_t __nel;
  _BYTE v145[2048];
  void *v146;
  uint64_t v147;
  _QWORD v148[258];

  v1 = MEMORY[0x1E0C80A78](this);
  v148[256] = *MEMORY[0x1E0C80C00];
  if (!atomic_load(qword_1ECD32ED8))
  v3 = *(_QWORD *)(qword_1ECD32ED8[0] + 336);
  v146 = v148;
  v147 = 0x8000000000;
  sortOpts(*(_QWORD **)(v3 + 128), *(_DWORD *)(v3 + 136), (uint64_t)&v146, *(unsigned __int8 *)(v1 + 8));
  __base = v145;
  __nel = 0x8000000000;
  if (!atomic_load(qword_1ECD32ED8))
  v141 = (uint64_t (***)(_QWORD, void **, llvm *))v1;
  v6 = *(_QWORD *)(qword_1ECD32ED8[0] + 280);
  v7 = (unsigned int *)(qword_1ECD32ED8[0] + 288);
  if (v6 == *(_QWORD *)(qword_1ECD32ED8[0] + 272))
    v7 = (unsigned int *)(qword_1ECD32ED8[0] + 292);
  v8 = *v7;
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = *(uint64_t ***)(qword_1ECD32ED8[0] + 280);
    while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_22;
    }
  }
  else
  {
    v10 = *(uint64_t ***)(qword_1ECD32ED8[0] + 280);
  }
  v11 = (uint64_t **)(v6 + 8 * v8);
  if (v10 != v11)
  {
    v12 = *v10;
LABEL_15:
    if (v12[1])
    {
      v13 = *v12;
      v14 = __nel;
      if (__nel >= (unint64_t)HIDWORD(__nel))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v145, __nel + 1, 16);
        v14 = __nel;
      }
      v15 = (char *)__base + 16 * v14;
      *v15 = v13;
      v15[1] = v12;
      LODWORD(__nel) = __nel + 1;
    }
    while (++v10 != v11)
    {
      v12 = *v10;
      if ((unint64_t)*v10 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v10 != v11)
          goto LABEL_15;
        break;
      }
    }
  }
LABEL_22:
  if (__nel < 2)
  {
    if (atomic_load(qword_1ECD32ED8))
      goto LABEL_24;
LABEL_27:
    if (!*(_QWORD *)(qword_1ECD32ED8[0] + 32))
      goto LABEL_39;
    goto LABEL_28;
  }
  qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))SubNameCompare);
  if (!atomic_load(qword_1ECD32ED8))
    goto LABEL_27;
LABEL_24:
  if (!*(_QWORD *)(qword_1ECD32ED8[0] + 32))
  {
LABEL_39:
    if (atomic_load(llvm::cl::TopLevelSubCommand))
      goto LABEL_40;
    goto LABEL_56;
  }
LABEL_28:
  v18 = (llvm::raw_ostream *)llvm::outs(v4);
  v19 = v18;
  v20 = *((_QWORD *)v18 + 4);
  if ((unint64_t)(*((_QWORD *)v18 + 3) - v20) > 9)
  {
    *(_WORD *)(v20 + 8) = 8250;
    *(_QWORD *)v20 = *(_QWORD *)"OVERVIEW: ";
    *((_QWORD *)v18 + 4) += 10;
    if (!atomic_load(qword_1ECD32ED8))
      goto LABEL_34;
LABEL_32:
    v23 = *(const char **)(qword_1ECD32ED8[0] + 24);
    v24 = *(_QWORD *)(qword_1ECD32ED8[0] + 32);
    v4 = (llvm::raw_ostream *)*((_QWORD *)v19 + 4);
    if (v24 <= *((_QWORD *)v19 + 3) - (_QWORD)v4)
      goto LABEL_35;
LABEL_33:
    v19 = llvm::raw_ostream::write(v19, v23, v24);
    v4 = (llvm::raw_ostream *)*((_QWORD *)v19 + 4);
    goto LABEL_37;
  }
  v19 = llvm::raw_ostream::write(v18, "OVERVIEW: ", 0xAuLL);
  if (atomic_load(qword_1ECD32ED8))
    goto LABEL_32;
LABEL_34:
  v23 = *(const char **)(qword_1ECD32ED8[0] + 24);
  v24 = *(_QWORD *)(qword_1ECD32ED8[0] + 32);
  v4 = (llvm::raw_ostream *)*((_QWORD *)v19 + 4);
  if (v24 > *((_QWORD *)v19 + 3) - (_QWORD)v4)
    goto LABEL_33;
LABEL_35:
  if (v24)
  {
    memcpy(v4, v23, v24);
    v4 = (llvm::raw_ostream *)(*((_QWORD *)v19 + 4) + v24);
    *((_QWORD *)v19 + 4) = v4;
  }
LABEL_37:
  if (*((llvm::raw_ostream **)v19 + 3) != v4)
  {
    *(_BYTE *)v4 = 10;
    ++*((_QWORD *)v19 + 4);
    goto LABEL_39;
  }
  v4 = llvm::raw_ostream::write(v19, "\n", 1uLL);
  if (atomic_load(llvm::cl::TopLevelSubCommand))
  {
LABEL_40:
    if (v3 != llvm::cl::TopLevelSubCommand[0])
      goto LABEL_41;
LABEL_57:
    v39 = (llvm::raw_ostream *)llvm::outs(v4);
    v40 = v39;
    v41 = (_DWORD *)*((_QWORD *)v39 + 4);
    if (*((_QWORD *)v39 + 3) - (_QWORD)v41 > 6uLL)
    {
      *(_DWORD *)((char *)v41 + 3) = 540689735;
      *v41 = 1195463509;
      *((_QWORD *)v39 + 4) += 7;
      if (atomic_load(qword_1ECD32ED8))
        goto LABEL_86;
    }
    else
    {
      v40 = llvm::raw_ostream::write(v39, "USAGE: ", 7uLL);
      if (atomic_load(qword_1ECD32ED8))
        goto LABEL_86;
    }
LABEL_86:
    v55 = *(char *)(qword_1ECD32ED8[0] + 23);
    if (v55 >= 0)
      v56 = (const char *)qword_1ECD32ED8[0];
    else
      v56 = *(const char **)qword_1ECD32ED8[0];
    if (v55 >= 0)
      v57 = *(unsigned __int8 *)(qword_1ECD32ED8[0] + 23);
    else
      v57 = *(_QWORD *)(qword_1ECD32ED8[0] + 8);
    v58 = llvm::raw_ostream::write(v40, v56, v57);
    if (__nel >= 3)
    {
      v59 = (llvm *)llvm::outs(v58);
      v60 = (void *)*((_QWORD *)v59 + 4);
      if (*((_QWORD *)v59 + 3) - (_QWORD)v60 > 0xCuLL)
      {
        qmemcpy(v60, " [subcommand]", 13);
        *((_QWORD *)v59 + 4) += 13;
        v50 = (llvm::raw_ostream *)llvm::outs(v59);
        v61 = *((_QWORD *)v50 + 4);
        if ((unint64_t)(*((_QWORD *)v50 + 3) - v61) <= 9)
        {
LABEL_96:
          v50 = llvm::raw_ostream::write(v50, " [options]", 0xAuLL);
          v142 = v3;
          v53 = *(unsigned int *)(v3 + 40);
          if (!(_DWORD)v53)
            goto LABEL_116;
LABEL_100:
          v62 = *(_QWORD *)(v142 + 32);
          v63 = 8 * v53;
          while (1)
          {
            v64 = *(_QWORD **)v62;
            if (!*(_QWORD *)(*(_QWORD *)v62 + 24))
              goto LABEL_108;
            v65 = (llvm::raw_ostream *)llvm::outs(v50);
            v66 = v65;
            v67 = *((_QWORD *)v65 + 4);
            if ((unint64_t)(*((_QWORD *)v65 + 3) - v67) > 2)
            {
              *(_BYTE *)(v67 + 2) = 45;
              *(_WORD *)v67 = 11552;
              v50 = (llvm::raw_ostream *)(*((_QWORD *)v65 + 4) + 3);
              *((_QWORD *)v66 + 4) = v50;
              v68 = (const void *)v64[2];
              v69 = v64[3];
              if (v69 <= *((_QWORD *)v66 + 3) - (_QWORD)v50)
              {
LABEL_106:
                if (v69)
                {
                  v50 = (llvm::raw_ostream *)memcpy(v50, v68, v69);
                  *((_QWORD *)v66 + 4) += v69;
                }
LABEL_108:
                v70 = (llvm::raw_ostream *)llvm::outs(v50);
                v71 = (_BYTE *)*((_QWORD *)v70 + 4);
                if (*((_BYTE **)v70 + 3) != v71)
                  goto LABEL_109;
                goto LABEL_113;
              }
            }
            else
            {
              v66 = llvm::raw_ostream::write(v65, " --", 3uLL);
              v50 = (llvm::raw_ostream *)*((_QWORD *)v66 + 4);
              v68 = (const void *)v64[2];
              v69 = v64[3];
              if (v69 <= *((_QWORD *)v66 + 3) - (_QWORD)v50)
                goto LABEL_106;
            }
            v74 = llvm::raw_ostream::write(v66, (const char *)v68, v69);
            v70 = (llvm::raw_ostream *)llvm::outs(v74);
            v71 = (_BYTE *)*((_QWORD *)v70 + 4);
            if (*((_BYTE **)v70 + 3) != v71)
            {
LABEL_109:
              *v71 = 32;
              v50 = (llvm::raw_ostream *)(*((_QWORD *)v70 + 4) + 1);
              *((_QWORD *)v70 + 4) = v50;
              v72 = (const void *)v64[4];
              v73 = v64[5];
              if (v73 <= *((_QWORD *)v70 + 3) - (_QWORD)v50)
                goto LABEL_114;
              goto LABEL_101;
            }
LABEL_113:
            v70 = llvm::raw_ostream::write(v70, " ", 1uLL);
            v50 = (llvm::raw_ostream *)*((_QWORD *)v70 + 4);
            v72 = (const void *)v64[4];
            v73 = v64[5];
            if (v73 <= *((_QWORD *)v70 + 3) - (_QWORD)v50)
            {
LABEL_114:
              if (v73)
              {
                v50 = (llvm::raw_ostream *)memcpy(v50, v72, v73);
                *((_QWORD *)v70 + 4) += v73;
              }
              goto LABEL_102;
            }
LABEL_101:
            v50 = llvm::raw_ostream::write(v70, (const char *)v72, v73);
LABEL_102:
            v62 += 8;
            v63 -= 8;
            if (!v63)
              goto LABEL_116;
          }
        }
LABEL_99:
        *(_WORD *)(v61 + 8) = 23923;
        *(_QWORD *)v61 = *(_QWORD *)" [options]";
        *((_QWORD *)v50 + 4) += 10;
        v142 = v3;
        v53 = *(unsigned int *)(v3 + 40);
        if (!(_DWORD)v53)
          goto LABEL_116;
        goto LABEL_100;
      }
      v58 = llvm::raw_ostream::write(v59, " [subcommand]", 0xDuLL);
    }
    v50 = (llvm::raw_ostream *)llvm::outs(v58);
    v61 = *((_QWORD *)v50 + 4);
    if ((unint64_t)(*((_QWORD *)v50 + 3) - v61) <= 9)
      goto LABEL_96;
    goto LABEL_99;
  }
LABEL_56:
  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  if (v3 == llvm::cl::TopLevelSubCommand[0])
    goto LABEL_57;
LABEL_41:
  if (!*(_QWORD *)(v3 + 24))
    goto LABEL_52;
  v26 = (llvm::raw_ostream *)llvm::outs(v4);
  v27 = v26;
  v28 = *((_QWORD *)v26 + 4);
  if ((unint64_t)(*((_QWORD *)v26 + 3) - v28) <= 0xB)
  {
    v27 = llvm::raw_ostream::write(v26, "SUBCOMMAND '", 0xCuLL);
    v29 = (_BYTE *)*((_QWORD *)v27 + 4);
    v30 = *(const char **)v3;
    v31 = *(_QWORD *)(v3 + 8);
    if (v31 <= *((_QWORD *)v27 + 3) - (_QWORD)v29)
      goto LABEL_44;
LABEL_61:
    v27 = llvm::raw_ostream::write(v27, v30, v31);
    v29 = (_BYTE *)*((_QWORD *)v27 + 4);
    if (*((_QWORD *)v27 + 3) - (_QWORD)v29 <= 2uLL)
      goto LABEL_47;
    goto LABEL_62;
  }
  *(_DWORD *)(v28 + 8) = 656426062;
  *(_QWORD *)v28 = *(_QWORD *)"SUBCOMMAND '";
  v29 = (_BYTE *)(*((_QWORD *)v26 + 4) + 12);
  *((_QWORD *)v27 + 4) = v29;
  v30 = *(const char **)v3;
  v31 = *(_QWORD *)(v3 + 8);
  if (v31 > *((_QWORD *)v27 + 3) - (_QWORD)v29)
    goto LABEL_61;
LABEL_44:
  if (v31)
  {
    memcpy(v29, v30, v31);
    v29 = (_BYTE *)(*((_QWORD *)v27 + 4) + v31);
    *((_QWORD *)v27 + 4) = v29;
  }
  if (*((_QWORD *)v27 + 3) - (_QWORD)v29 <= 2uLL)
  {
LABEL_47:
    v27 = llvm::raw_ostream::write(v27, "': ", 3uLL);
    v32 = (_WORD *)*((_QWORD *)v27 + 4);
    v33 = *(const void **)(v3 + 16);
    v34 = *(_QWORD *)(v3 + 24);
    if (v34 <= *((_QWORD *)v27 + 3) - (_QWORD)v32)
      goto LABEL_48;
    goto LABEL_63;
  }
LABEL_62:
  v29[2] = 32;
  *(_WORD *)v29 = 14887;
  v32 = (_WORD *)(*((_QWORD *)v27 + 4) + 3);
  *((_QWORD *)v27 + 4) = v32;
  v33 = *(const void **)(v3 + 16);
  v34 = *(_QWORD *)(v3 + 24);
  if (v34 <= *((_QWORD *)v27 + 3) - (_QWORD)v32)
  {
LABEL_48:
    if (v34)
    {
      memcpy(v32, v33, v34);
      v32 = (_WORD *)(*((_QWORD *)v27 + 4) + v34);
      *((_QWORD *)v27 + 4) = v32;
    }
    if (*((_QWORD *)v27 + 3) - (_QWORD)v32 <= 1uLL)
      goto LABEL_51;
    goto LABEL_64;
  }
LABEL_63:
  v27 = llvm::raw_ostream::write(v27, (const char *)v33, v34);
  v32 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v32 <= 1uLL)
  {
LABEL_51:
    v4 = llvm::raw_ostream::write(v27, "\n\n", 2uLL);
LABEL_52:
    v35 = (llvm::raw_ostream *)llvm::outs(v4);
    v36 = (_DWORD *)*((_QWORD *)v35 + 4);
    if (*((_QWORD *)v35 + 3) - (_QWORD)v36 <= 6uLL)
      goto LABEL_53;
LABEL_65:
    *(_DWORD *)((char *)v36 + 3) = 540689735;
    *v36 = 1195463509;
    *((_QWORD *)v35 + 4) += 7;
    if (atomic_load(qword_1ECD32ED8))
      goto LABEL_67;
    goto LABEL_66;
  }
LABEL_64:
  *v32 = 2570;
  *((_QWORD *)v27 + 4) += 2;
  v35 = (llvm::raw_ostream *)llvm::outs((llvm *)v32);
  v36 = (_DWORD *)*((_QWORD *)v35 + 4);
  if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 6uLL)
    goto LABEL_65;
LABEL_53:
  v35 = llvm::raw_ostream::write(v35, "USAGE: ", 7uLL);
  if (atomic_load(qword_1ECD32ED8))
    goto LABEL_67;
LABEL_66:
LABEL_67:
  v44 = *(char *)(qword_1ECD32ED8[0] + 23);
  if (v44 >= 0)
    v45 = (const char *)qword_1ECD32ED8[0];
  else
    v45 = *(const char **)qword_1ECD32ED8[0];
  if (v44 >= 0)
    v46 = *(unsigned __int8 *)(qword_1ECD32ED8[0] + 23);
  else
    v46 = *(_QWORD *)(qword_1ECD32ED8[0] + 8);
  v47 = llvm::raw_ostream::write(v35, v45, v46);
  v48 = v47;
  v49 = (_BYTE *)*((_QWORD *)v47 + 4);
  if (*((_BYTE **)v47 + 3) == v49)
  {
    v48 = llvm::raw_ostream::write(v47, " ", 1uLL);
    v50 = (llvm::raw_ostream *)*((_QWORD *)v48 + 4);
    v51 = *(const char **)v3;
    v52 = *(_QWORD *)(v3 + 8);
    if (v52 > *((_QWORD *)v48 + 3) - (_QWORD)v50)
      goto LABEL_75;
  }
  else
  {
    *v49 = 32;
    v50 = (llvm::raw_ostream *)(*((_QWORD *)v47 + 4) + 1);
    *((_QWORD *)v48 + 4) = v50;
    v51 = *(const char **)v3;
    v52 = *(_QWORD *)(v3 + 8);
    if (v52 > *((_QWORD *)v48 + 3) - (_QWORD)v50)
    {
LABEL_75:
      v48 = llvm::raw_ostream::write(v48, v51, v52);
      v50 = (llvm::raw_ostream *)*((_QWORD *)v48 + 4);
      goto LABEL_79;
    }
  }
  if (v52)
  {
    memcpy(v50, v51, v52);
    v50 = (llvm::raw_ostream *)(*((_QWORD *)v48 + 4) + v52);
    *((_QWORD *)v48 + 4) = v50;
  }
LABEL_79:
  if (*((_QWORD *)v48 + 3) - (_QWORD)v50 <= 9uLL)
  {
    v50 = llvm::raw_ostream::write(v48, " [options]", 0xAuLL);
    v142 = v3;
    v53 = *(unsigned int *)(v3 + 40);
    if (!(_DWORD)v53)
      goto LABEL_116;
    goto LABEL_100;
  }
  *((_WORD *)v50 + 4) = 23923;
  *(_QWORD *)v50 = *(_QWORD *)" [options]";
  *((_QWORD *)v48 + 4) += 10;
  v142 = v3;
  v53 = *(unsigned int *)(v3 + 40);
  if ((_DWORD)v53)
    goto LABEL_100;
LABEL_116:
  v75 = &OBJC_IVAR___MPSGraphExecutable__specializationsPendingCV;
  if (!*(_QWORD *)(v142 + 152))
    goto LABEL_123;
  v76 = (llvm::raw_ostream *)llvm::outs(v50);
  v77 = v76;
  v78 = (_BYTE *)*((_QWORD *)v76 + 4);
  if (*((_BYTE **)v76 + 3) == v78)
  {
    v77 = llvm::raw_ostream::write(v76, " ", 1uLL);
    v50 = (llvm::raw_ostream *)*((_QWORD *)v77 + 4);
    v82 = *(_QWORD *)(v142 + 152);
    v80 = *(const char **)(v82 + 32);
    v81 = *(_QWORD *)(v82 + 40);
    if (v81 > *((_QWORD *)v77 + 3) - (_QWORD)v50)
      goto LABEL_119;
  }
  else
  {
    *v78 = 32;
    v50 = (llvm::raw_ostream *)(*((_QWORD *)v76 + 4) + 1);
    *((_QWORD *)v77 + 4) = v50;
    v79 = *(_QWORD *)(v142 + 152);
    v80 = *(const char **)(v79 + 32);
    v81 = *(_QWORD *)(v79 + 40);
    if (v81 > *((_QWORD *)v77 + 3) - (_QWORD)v50)
    {
LABEL_119:
      v50 = llvm::raw_ostream::write(v77, v80, v81);
      goto LABEL_123;
    }
  }
  if (v81)
  {
    v50 = (llvm::raw_ostream *)memcpy(v50, v80, v81);
    *((_QWORD *)v77 + 4) += v81;
  }
LABEL_123:
  if (atomic_load(llvm::cl::TopLevelSubCommand))
  {
    if (v142 != llvm::cl::TopLevelSubCommand[0])
      goto LABEL_175;
  }
  else
  {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    if (v142 != llvm::cl::TopLevelSubCommand[0])
      goto LABEL_175;
  }
  v84 = __nel;
  if (!(_DWORD)__nel)
  {
LABEL_175:
    v123 = (llvm::raw_ostream *)llvm::outs(v50);
    v124 = (_WORD *)*((_QWORD *)v123 + 4);
    if (*((_QWORD *)v123 + 3) - (_QWORD)v124 <= 1uLL)
      goto LABEL_176;
LABEL_184:
    *v124 = 2570;
    *((_QWORD *)v123 + 4) += 2;
    v125 = v147;
    if ((_DWORD)v147)
      goto LABEL_177;
    goto LABEL_185;
  }
  v85 = 0;
  v86 = (const char **)__base;
  do
  {
    v87 = *v86;
    v86 += 2;
    v88 = (llvm *)strlen(v87);
    if (v85 <= v88)
      v85 = v88;
    --v84;
  }
  while (v84);
  v89 = (llvm::raw_ostream *)llvm::outs(v88);
  v90 = (_WORD *)*((_QWORD *)v89 + 4);
  if (*((_QWORD *)v89 + 3) - (_QWORD)v90 <= 1uLL)
  {
    v91 = llvm::raw_ostream::write(v89, "\n\n", 2uLL);
    v92 = (llvm::raw_ostream *)llvm::outs(v91);
    v93 = (void *)*((_QWORD *)v92 + 4);
    if (*((_QWORD *)v92 + 3) - (_QWORD)v93 > 0xDuLL)
      goto LABEL_134;
LABEL_137:
    v92 = llvm::raw_ostream::write(v92, "SUBCOMMANDS:\n\n", 0xEuLL);
    v94 = __nel;
    if (!(_DWORD)__nel)
      goto LABEL_159;
    goto LABEL_138;
  }
  *v90 = 2570;
  *((_QWORD *)v89 + 4) += 2;
  v92 = (llvm::raw_ostream *)llvm::outs(v89);
  v93 = (void *)*((_QWORD *)v92 + 4);
  if (*((_QWORD *)v92 + 3) - (_QWORD)v93 <= 0xDuLL)
    goto LABEL_137;
LABEL_134:
  qmemcpy(v93, "SUBCOMMANDS:\n\n", 14);
  *((_QWORD *)v92 + 4) += 14;
  v94 = __nel;
  if ((_DWORD)__nel)
  {
LABEL_138:
    v95 = 16 * v94;
    v96 = (char *)__base + 8;
    while (1)
    {
      v97 = (llvm::raw_ostream *)llvm::outs(v92);
      v99 = v97;
      v100 = (_WORD *)*((_QWORD *)v97 + 4);
      if (*((_QWORD *)v97 + 3) - (_QWORD)v100 > 1uLL)
      {
        *v100 = 8224;
        *((_QWORD *)v97 + 4) += 2;
        v101 = (const char *)*((_QWORD *)v96 - 1);
        if (!v101)
          goto LABEL_152;
      }
      else
      {
        v97 = llvm::raw_ostream::write(v97, "  ", 2uLL);
        v99 = v97;
        v101 = (const char *)*((_QWORD *)v96 - 1);
        if (!v101)
          goto LABEL_152;
      }
      v102 = strlen(v101);
      v97 = (llvm::raw_ostream *)*((_QWORD *)v99 + 4);
      if (v102 <= *((_QWORD *)v99 + 3) - (_QWORD)v97)
      {
        if (v102)
        {
          v97 = (llvm::raw_ostream *)memcpy(v97, v101, v102);
          *((_QWORD *)v99 + 4) += v102;
        }
      }
      else
      {
        v97 = llvm::raw_ostream::write(v99, v101, v102);
      }
LABEL_152:
      if (*(_QWORD *)(*(_QWORD *)v96 + 24))
      {
        v103 = (llvm::raw_ostream *)llvm::outs(v97);
        v104 = strlen(*((const char **)v96 - 1));
        v105 = llvm::raw_ostream::indent(v103, (int)v85 - v104);
        v106 = (llvm::raw_ostream *)llvm::outs(v105);
        v107 = v106;
        v108 = *((_QWORD *)v106 + 4);
        if ((unint64_t)(*((_QWORD *)v106 + 3) - v108) > 2)
        {
          *(_BYTE *)(v108 + 2) = 32;
          *(_WORD *)v108 = 11552;
          v97 = (llvm::raw_ostream *)(*((_QWORD *)v106 + 4) + 3);
          *((_QWORD *)v107 + 4) = v97;
          v109 = *(const void **)(*(_QWORD *)v96 + 16);
          v110 = *(_QWORD *)(*(_QWORD *)v96 + 24);
          if (v110 <= *((_QWORD *)v107 + 3) - (_QWORD)v97)
          {
LABEL_157:
            if (v110)
            {
              v97 = (llvm::raw_ostream *)memcpy(v97, v109, v110);
              *((_QWORD *)v107 + 4) += v110;
            }
            goto LABEL_140;
          }
        }
        else
        {
          v107 = llvm::raw_ostream::write(v106, " - ", 3uLL);
          v97 = (llvm::raw_ostream *)*((_QWORD *)v107 + 4);
          v109 = *(const void **)(*(_QWORD *)v96 + 16);
          v110 = *(_QWORD *)(*(_QWORD *)v96 + 24);
          if (v110 <= *((_QWORD *)v107 + 3) - (_QWORD)v97)
            goto LABEL_157;
        }
        v97 = llvm::raw_ostream::write(v107, (const char *)v109, v110);
      }
LABEL_140:
      v92 = (llvm::raw_ostream *)llvm::outs(v97);
      v98 = (_BYTE *)*((_QWORD *)v92 + 4);
      if (*((_BYTE **)v92 + 3) == v98)
      {
        v92 = llvm::raw_ostream::write(v92, "\n", 1uLL);
        v96 += 16;
        v95 -= 16;
        if (!v95)
          break;
      }
      else
      {
        *v98 = 10;
        ++*((_QWORD *)v92 + 4);
        v96 += 16;
        v95 -= 16;
        if (!v95)
          break;
      }
    }
  }
LABEL_159:
  v111 = (llvm::raw_ostream *)llvm::outs(v92);
  v112 = (_BYTE *)*((_QWORD *)v111 + 4);
  if (*((_BYTE **)v111 + 3) == v112)
  {
    v111 = llvm::raw_ostream::write(v111, "\n", 1uLL);
  }
  else
  {
    *v112 = 10;
    ++*((_QWORD *)v111 + 4);
  }
  v75 = &OBJC_IVAR___MPSGraphExecutable__specializationsPendingCV;
  v113 = (llvm::raw_ostream *)llvm::outs(v111);
  v114 = v113;
  v115 = (_QWORD *)*((_QWORD *)v113 + 4);
  if (*((_QWORD *)v113 + 3) - (_QWORD)v115 > 7uLL)
  {
    *v115 = 0x2220657079542020;
    *((_QWORD *)v113 + 4) += 8;
    if (atomic_load(qword_1ECD32ED8))
      goto LABEL_167;
  }
  else
  {
    v114 = llvm::raw_ostream::write(v113, "  Type \"", 8uLL);
    if (atomic_load(qword_1ECD32ED8))
      goto LABEL_167;
  }
LABEL_167:
  v118 = *(char *)(qword_1ECD32ED8[0] + 23);
  if (v118 >= 0)
    v119 = (const char *)qword_1ECD32ED8[0];
  else
    v119 = *(const char **)qword_1ECD32ED8[0];
  if (v118 >= 0)
    v120 = *(unsigned __int8 *)(qword_1ECD32ED8[0] + 23);
  else
    v120 = *(_QWORD *)(qword_1ECD32ED8[0] + 8);
  v121 = llvm::raw_ostream::write(v114, v119, v120);
  v122 = (void *)*((_QWORD *)v121 + 4);
  if (*((_QWORD *)v121 + 3) - (_QWORD)v122 <= 0x3EuLL)
  {
    v50 = llvm::raw_ostream::write(v121, " <subcommand> --help\" to get more help on a specific subcommand", 0x3FuLL);
    goto LABEL_175;
  }
  qmemcpy(v122, " <subcommand> --help\" to get more help on a specific subcommand", 63);
  *((_QWORD *)v121 + 4) += 63;
  v123 = (llvm::raw_ostream *)llvm::outs(v121);
  v124 = (_WORD *)*((_QWORD *)v123 + 4);
  if (*((_QWORD *)v123 + 3) - (_QWORD)v124 > 1uLL)
    goto LABEL_184;
LABEL_176:
  v123 = llvm::raw_ostream::write(v123, "\n\n", 2uLL);
  v125 = v147;
  if ((_DWORD)v147)
  {
LABEL_177:
    v126 = 0;
    v127 = 0;
    v128 = 16 * v125;
    do
    {
      v129 = (llvm *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)((char *)v146 + v126 + 8) + 40))(*(_QWORD *)((char *)v146 + v126 + 8));
      if (v127 <= v129)
        v127 = v129;
      v126 += 16;
    }
    while (v128 != v126);
    v130 = (llvm::raw_ostream *)llvm::outs(v129);
    v131 = *((_QWORD *)v130 + 4);
    if ((unint64_t)(*((_QWORD *)v130 + 3) - v131) <= 8)
      goto LABEL_182;
    goto LABEL_186;
  }
LABEL_185:
  v127 = 0;
  v130 = (llvm::raw_ostream *)llvm::outs(v123);
  v131 = *((_QWORD *)v130 + 4);
  if ((unint64_t)(*((_QWORD *)v130 + 3) - v131) <= 8)
  {
LABEL_182:
    llvm::raw_ostream::write(v130, "OPTIONS:\n", 9uLL);
    goto LABEL_187;
  }
LABEL_186:
  *(_BYTE *)(v131 + 8) = 10;
  *(_QWORD *)v131 = *(_QWORD *)"OPTIONS:\n";
  *((_QWORD *)v130 + 4) += 9;
LABEL_187:
  v132 = (llvm *)(**v141)(v141, &v146, v127);
  if (!atomic_load(qword_1ECD32ED8))
  v134 = *((_QWORD *)v75 + 475);
  v135 = *(_QWORD *)(v134 + 40);
  for (i = *(_QWORD *)(v134 + 48); v135 != i; v135 += 16)
  {
    while (1)
    {
      v137 = (llvm::raw_ostream *)llvm::outs(v132);
      v138 = *(const char **)v135;
      v139 = *(_QWORD *)(v135 + 8);
      v132 = (llvm *)*((_QWORD *)v137 + 4);
      if (v139 <= *((_QWORD *)v137 + 3) - (_QWORD)v132)
        break;
      v132 = llvm::raw_ostream::write(v137, v138, *(_QWORD *)(v135 + 8));
      v135 += 16;
      if (v135 == i)
        goto LABEL_196;
    }
    if (v139)
    {
      v132 = (llvm *)memcpy(v132, v138, *(_QWORD *)(v135 + 8));
      *((_QWORD *)v137 + 4) += v139;
    }
  }
LABEL_196:
  if (!atomic_load(qword_1ECD32ED8))
  *(_QWORD *)(*((_QWORD *)v75 + 475) + 48) = *(_QWORD *)(*((_QWORD *)v75 + 475) + 40);
  if (__base != v145)
    free(__base);
  if (v146 != v148)
    free(v146);
}

llvm::raw_ostream *`anonymous namespace'::VersionPrinter::print(llvm *a1)
{
  llvm::raw_ostream *v2;
  llvm::raw_ostream *v3;
  void *v4;
  _DWORD *v5;
  uint64_t v6;
  llvm::raw_ostream *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v2 = (llvm::raw_ostream *)llvm::outs(a1);
  v3 = v2;
  v4 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0x1AuLL)
  {
    qmemcpy(v4, "LLVM (http://llvm.org/):\n  ", 27);
    v17 = *((_QWORD *)v2 + 3);
    v5 = (_DWORD *)(*((_QWORD *)v2 + 4) + 27);
    *((_QWORD *)v2 + 4) = v5;
    if ((unint64_t)(v17 - (_QWORD)v5) > 3)
    {
LABEL_3:
      *v5 = 1297501260;
      v6 = *((_QWORD *)v3 + 4) + 4;
      *((_QWORD *)v3 + 4) = v6;
      result = v3;
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v6) > 8)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v2, "LLVM (http://llvm.org/):\n  ", 0x1BuLL);
    v5 = (_DWORD *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v5 > 3uLL)
      goto LABEL_3;
  }
  result = llvm::raw_ostream::write(v3, "LLVM", 4uLL);
  v6 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v6) > 8)
  {
LABEL_4:
    *(_BYTE *)(v6 + 8) = 32;
    *(_QWORD *)v6 = *(_QWORD *)" version ";
    v8 = *((_QWORD *)result + 3);
    v9 = *((_QWORD *)result + 4) + 9;
    *((_QWORD *)result + 4) = v9;
    if ((unint64_t)(v8 - v9) > 8)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = llvm::raw_ostream::write(result, " version ", 9uLL);
  v9 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v9) > 8)
  {
LABEL_5:
    *(_BYTE *)(v9 + 8) = 116;
    *(_QWORD *)v9 = *(_QWORD *)"18.0.0git";
    v10 = *((_QWORD *)result + 3);
    v11 = *((_QWORD *)result + 4) + 9;
    *((_QWORD *)result + 4) = v11;
    if ((unint64_t)(v10 - v11) > 2)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = llvm::raw_ostream::write(result, "18.0.0git", 9uLL);
  v11 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v11) > 2)
  {
LABEL_6:
    *(_BYTE *)(v11 + 2) = 32;
    *(_WORD *)v11 = 8202;
    *((_QWORD *)result + 4) += 3;
    v12 = (void *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v12 > 0xEuLL)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = llvm::raw_ostream::write(result, "\n  ", 3uLL);
  v12 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v12 > 0xEuLL)
  {
LABEL_7:
    qmemcpy(v12, "Optimized build", 15);
    v13 = *((_QWORD *)v3 + 3);
    v14 = (_WORD *)(*((_QWORD *)v3 + 4) + 15);
    *((_QWORD *)v3 + 4) = v14;
    if ((unint64_t)(v13 - (_QWORD)v14) > 1)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = llvm::raw_ostream::write(v3, "Optimized build", 0xFuLL);
  v14 = (_WORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v14 > 1uLL)
  {
LABEL_8:
    *v14 = 2606;
    *((_QWORD *)v3 + 4) += 2;
    v16 = *(_QWORD *)a1;
    v15 = *((_QWORD *)a1 + 1);
    if (v16 != v15)
      goto LABEL_17;
    return result;
  }
LABEL_16:
  result = llvm::raw_ostream::write(v3, ".\n", 2uLL);
  v16 = *(_QWORD *)a1;
  v15 = *((_QWORD *)a1 + 1);
  if (v16 != v15)
  {
LABEL_17:
    while (1)
    {
      v18 = llvm::outs(result);
      v19 = *(_QWORD *)(v16 + 24);
      if (!v19)
        break;
      result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v19 + 48))(v19, v18);
      v16 += 32;
      if (v16 == v15)
        return result;
    }
    v20 = std::__throw_bad_function_call[abi:nn180100]();
    return (llvm::raw_ostream *)std::vector<std::function<void ()(llvm::raw_ostream &)>>::vector(v20);
  }
  return result;
}

_QWORD *std::vector<std::function<void ()(llvm::raw_ostream &)>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      abort();
    v6 = v5 >> 5;
    v7 = (char *)operator new(v5);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[32 * v6];
    do
    {
      v9 = v3 + v8;
      v10 = &v7[v8];
      v11 = *(_QWORD *)(v3 + v8 + 24);
      if (v11)
      {
        if (v9 == v11)
        {
          *(_QWORD *)&v7[v8 + 24] = v10;
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
        }
        else
        {
          *(_QWORD *)&v7[v8 + 24] = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)v11 + 16))(*(_QWORD *)(v3 + v8 + 24), v10);
        }
      }
      else
      {
        *((_QWORD *)v10 + 3) = 0;
      }
      v8 += 32;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void **std::vector<std::function<void ()(llvm::raw_ostream &)>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v7 = v3 - 32;
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 = v7;
      if (v7 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t llvm::cl::Option::getValueExpectedFlagDefault(llvm::cl::Option *this)
{
  return 1;
}

BOOL llvm::cl::OptionValueCopy<llvm::cl::BOOLOrDefault>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t llvm::cl::parser<BOOL>::getValueName()
{
  return 0;
}

uint64_t llvm::cl::parser<llvm::cl::BOOLOrDefault>::getValueName()
{
  return 0;
}

const char *llvm::cl::parser<int>::getValueName()
{
  return "int";
}

const char *llvm::cl::parser<long long>::getValueName()
{
  return "long";
}

const char *llvm::cl::parser<unsigned int>::getValueName()
{
  return "uint";
}

const char *llvm::cl::parser<unsigned long long>::getValueName()
{
  return "ulong";
}

const char *llvm::cl::parser<std::string>::getValueName()
{
  return "string";
}

void llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &unk_1E0E23658;
  v2 = __p + 160;
  v3 = (char *)*((_QWORD *)__p + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

_QWORD *llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_1E0E235F0;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &unk_1E0E235F0;
  v2 = __p + 160;
  v3 = (char *)*((_QWORD *)__p + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &unk_1E0E23450;
  v2 = (_QWORD *)(a1 + 200);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 152) = &off_1E0E23088;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    if ((*(char *)(a1 + 151) & 0x80000000) == 0)
    {
LABEL_8:
      *(_QWORD *)a1 = &unk_1E0E23930;
      v5 = *(void **)(a1 + 96);
      if (v5 == *(void **)(a1 + 88))
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 128));
  *(_QWORD *)a1 = &unk_1E0E23930;
  v5 = *(void **)(a1 + 96);
  if (v5 != *(void **)(a1 + 88))
LABEL_9:
    free(v5);
LABEL_10:
  v6 = *(void **)(a1 + 64);
  if (v6 != (void *)(a1 + 80))
    free(v6);
  return a1;
}

void llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &unk_1E0E23450;
  v2 = __p + 200;
  v3 = (char *)*((_QWORD *)__p + 28);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)__p + 19) = &off_1E0E23088;
  if (__p[183] < 0)
  {
    operator delete(*((void **)__p + 20));
    if ((__p[151] & 0x80000000) == 0)
    {
LABEL_8:
      *(_QWORD *)__p = &unk_1E0E23930;
      v5 = (void *)*((_QWORD *)__p + 12);
      if (v5 == *((void **)__p + 11))
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((__p[151] & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*((void **)__p + 16));
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
LABEL_9:
    free(v5);
LABEL_10:
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

_QWORD *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &unk_1E0E23520;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &unk_1E0E23520;
  v2 = __p + 160;
  v3 = (char *)*((_QWORD *)__p + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::alias::handleOccurrence(uint64_t a1, uint64_t a2)
{
  return (***(uint64_t (****)(_QWORD, uint64_t, _QWORD, _QWORD))(a1 + 128))(*(_QWORD *)(a1 + 128), a2, *(_QWORD *)(*(_QWORD *)(a1 + 128) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24));
}

uint64_t llvm::cl::alias::getValueExpectedFlagDefault(llvm::cl::alias *this)
{
  unsigned __int16 *v1;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 16);
  if (((v1[5] >> 3) & 3) != 0)
    return (v1[5] >> 3) & 3;
  else
    return (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t llvm::cl::alias::setDefault(llvm::cl::alias *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 64))(*((_QWORD *)this + 16));
}

uint64_t llvm::cl::alias::addOccurrence(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 80))(*(_QWORD *)(a1 + 128), a2, *(_QWORD *)(*(_QWORD *)(a1 + 128) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24));
}

uint64_t `anonymous namespace'::CommandLineParser::updateArgStr(const char *a1, uint64_t a2, int8x16_t *a3, const unsigned __int8 *a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  uint64_t result;
  const unsigned __int8 **v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;

  v8 = (uint64_t *)(a5 + 128);
  v17 = a2;
  v9 = llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(a5 + 128, a3, a4, &v17);
  if ((v10 & 1) == 0)
  {
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
    v14 = llvm::raw_ostream::operator<<(v13, a1);
    v15 = llvm::raw_ostream::operator<<(v14, ": CommandLine Error: Option '");
    v16 = llvm::raw_ostream::operator<<(v15, *(const char **)(a2 + 16), *(_QWORD *)(a2 + 24));
    llvm::raw_ostream::operator<<(v16, "' registered more than once!\n");
    llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const char *)1);
  }
  result = llvm::StringMapImpl::FindKey(v8, *(int8x16_t **)(a2 + 16), *(const unsigned __int8 **)(a2 + 24));
  if ((_DWORD)result != -1 && (int)result != (unint64_t)*(unsigned int *)(a5 + 136))
  {
    v12 = *(const unsigned __int8 ***)(*v8 + 8 * (int)result);
    llvm::StringMapImpl::RemoveKey((uint64_t)v8, v12);
    llvm::deallocate_buffer((llvm *)v12, (void *)(*v12 + 17));
  }
  return result;
}

uint64_t CommaSeparateAndAddOccurrence(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *__s, size_t __n, uint64_t a7)
{
  size_t v8;
  _BYTE *v9;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _BYTE *v18;

  v8 = __n;
  v9 = __s;
  if ((a1[5] & 0x200) == 0)
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, _BYTE *, size_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, v9, v8, a7);
  if (!__n)
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, _BYTE *, size_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, v9, v8, a7);
  v14 = memchr(__s, 44, __n);
  if (!v14)
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, _BYTE *, size_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, v9, v8, a7);
  v15 = v14 - v9;
  if (v14 - v9 == -1)
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, _BYTE *, size_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, v9, v8, a7);
  while (1)
  {
    v16 = v8 >= v15 ? v15 : v8;
    if (((*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, _BYTE *, unint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, v9, v16, a7) & 1) != 0)break;
    if (v8 >= v15 + 1)
      v17 = v15 + 1;
    else
      v17 = v8;
    v9 += v17;
    v8 -= v17;
    if (v8)
    {
      v18 = memchr(v9, 44, v8);
      v15 = v18 - v9;
      if (v18 && v15 != -1)
        continue;
    }
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t, _BYTE *, size_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4, v9, v8, a7);
  }
  return 1;
}

uint64_t `anonymous namespace'::CommandLineParser::LookupLongOption(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, char a5)
{
  const unsigned __int8 *v5;
  int8x16_t *v11;
  _BYTE *v12;
  unint64_t v13;
  BOOL v14;
  int v15;
  uint64_t result;
  BOOL v17;
  const unsigned __int8 *v18;
  int Key;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;

  v5 = *(const unsigned __int8 **)(a2 + 8);
  if (!v5)
    return 0;
  v11 = *(int8x16_t **)a2;
  v12 = memchr(*(void **)a2, 61, (size_t)v5);
  v13 = v12 - (_BYTE *)v11;
  if (v12)
    v14 = v13 == -1;
  else
    v14 = 1;
  if (!v14)
  {
    if ((unint64_t)v5 >= v13)
      v18 = (const unsigned __int8 *)(v12 - (_BYTE *)v11);
    else
      v18 = v5;
    Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 128), v11, v18);
    v20 = Key;
    if (Key == -1)
      v20 = *(unsigned int *)(a1 + 136);
    if (v20 == *(_DWORD *)(a1 + 136))
      return 0;
    v21 = *(_QWORD *)(a1 + 128) + 8 * v20;
    if ((~*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)v21 + 8) + 10) & 0x180) == 0)
      return 0;
    v22 = *(_QWORD *)(a2 + 8);
    if (v22 >= v13 + 1)
      v23 = v13 + 1;
    else
      v23 = *(_QWORD *)(a2 + 8);
    *a3 = *(_QWORD *)a2 + v23;
    a3[1] = v22 - v23;
    v24 = *(_QWORD *)(a2 + 8);
    if (v24 >= v13)
      v24 = v13;
    *(_QWORD *)(a2 + 8) = v24;
    result = *(_QWORD *)(*(_QWORD *)v21 + 8);
    if (result)
      v25 = a4 == 0;
    else
      v25 = 1;
    if (v25)
      return result;
    goto LABEL_31;
  }
  v15 = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 128), v11, v5);
  if (v15 == -1 || v15 == (unint64_t)*(unsigned int *)(a1 + 136))
    return 0;
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v15) + 8);
  if (result)
    v17 = a4 == 0;
  else
    v17 = 1;
  if (!v17)
  {
LABEL_31:
    if ((a5 & 1) == 0 && (*(_WORD *)(result + 10) & 0x1000) == 0)
      return 0;
  }
  return result;
}

_QWORD *llvm::object_creator<`anonymous namespace'::CommandLineCommonOptions>::call()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  const void *v12;
  uint64_t v13;
  llvm *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  const void *v23;
  uint64_t v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v37;
  uint64_t v39;
  llvm *v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  const void *v48;
  char v49;
  llvm::cl::OptionCategory *v50;
  llvm::cl::OptionCategory *v51;
  int v52;
  _OWORD v53[2];
  __int16 v54;

  v0 = operator new(0x660uLL);
  bzero(v0, 0x660uLL);
  *v0 = &off_1E0E15258;
  v0[2] = &off_1E0E15258;
  v0[4] = &off_1E0E18B38;
  *((_BYTE *)v0 + 24) = 1;
  *((_BYTE *)v0 + 56) = 1;
  v0[6] = &off_1E0E18B38;
  v0[8] = v0;
  v0[9] = v0 + 4;
  v0[10] = v0 + 2;
  v0[11] = v0 + 6;
  v0[12] = "Generic Options";
  v1 = v0 + 12;
  v0[13] = 15;
  v0[14] = "";
  if (!atomic_load(qword_1ECD32ED8))
  v3 = qword_1ECD32ED8[0];
  v4 = *(_QWORD *)(qword_1ECD32ED8[0] + 120);
  if (v4 != *(_QWORD *)(qword_1ECD32ED8[0] + 112))
    goto LABEL_4;
  v16 = *(unsigned int *)(qword_1ECD32ED8[0] + 132);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 8 * v16;
    v19 = *(_QWORD **)(qword_1ECD32ED8[0] + 120);
    while ((_QWORD *)*v19 != v1)
    {
      if (*v19 == -2)
        v17 = v19;
      ++v19;
      v18 -= 8;
      if (!v18)
      {
        if (!v17)
          goto LABEL_69;
        *v17 = v1;
        --*(_DWORD *)(v3 + 136);
        break;
      }
    }
  }
  else
  {
LABEL_69:
    if (v16 >= *(_DWORD *)(qword_1ECD32ED8[0] + 128))
    {
LABEL_4:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1ECD32ED8[0] + 112), v0 + 12);
      goto LABEL_5;
    }
    *(_DWORD *)(qword_1ECD32ED8[0] + 132) = v16 + 1;
    *(_QWORD *)(v4 + 8 * v16) = v1;
  }
LABEL_5:
  *(_QWORD *)&v53[0] = v0;
  LODWORD(v48) = 1;
  v52 = 3;
  v51 = (llvm::cl::OptionCategory *)(v0 + 12);
  if (!atomic_load(llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  v50 = (llvm::cl::OptionCategory *)llvm::cl::AllSubCommands[0];
  v6 = llvm::cl::Option::Option((uint64_t)(v0 + 16), 0, 0);
  v0[32] = 0;
  v0[33] = &off_1E0E22E28;
  v0[16] = &off_1E0E230A8;
  v0[34] = off_1E0E23B68;
  v0[35] = off_1E0E4F760;
  v0[38] = v0 + 35;
  llvm::cl::Option::setArgStr(v6, (int8x16_t *)"help-list", (const unsigned __int8 *)9);
  if (!atomic_load(qword_1ECD32ED8))
  *((_WORD *)v0 + 69) |= 0x4000u;
  *(_QWORD *)&v53[0] = v0 + 2;
  LODWORD(v48) = 1;
  v52 = 3;
  v51 = (llvm::cl::OptionCategory *)(v0 + 12);
  if (!atomic_load(llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  v50 = (llvm::cl::OptionCategory *)llvm::cl::AllSubCommands[0];
  v9 = llvm::cl::Option::Option((uint64_t)(v0 + 39), 0, 0);
  v0[55] = 0;
  v0[56] = &off_1E0E22E28;
  v0[39] = &off_1E0E230A8;
  v0[57] = off_1E0E23B68;
  v0[58] = off_1E0E4F760;
  v0[61] = v0 + 58;
  llvm::cl::Option::setArgStr(v9, (int8x16_t *)"help-list-hidden", (const unsigned __int8 *)0x10);
  if (!atomic_load(qword_1ECD32ED8))
  *((_WORD *)v0 + 161) |= 0x4000u;
  if (!atomic_load(llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  v12 = (const void *)llvm::cl::AllSubCommands[0];
  v13 = llvm::cl::Option::Option((uint64_t)(v0 + 62), 0, 0);
  v0[78] = 0;
  v0[79] = &off_1E0E22EA8;
  v0[62] = &off_1E0E23248;
  v0[80] = off_1E0E23B68;
  v0[81] = off_1E0E4F8C0;
  v0[84] = v0 + 81;
  llvm::cl::Option::setArgStr(v13, (int8x16_t *)"help", (const unsigned __int8 *)4);
  v0[66] = "Display available options (--help-hidden for more)";
  v0[67] = 50;
  if (v0[78])
  {
    *(_QWORD *)&v53[0] = "cl::location(x) specified more than once!";
    v54 = 259;
    v15 = (llvm::raw_ostream *)llvm::errs(v14);
    llvm::cl::Option::error(v0 + 62, (llvm::Twine *)v53, 0, 0, v15);
  }
  else
  {
    v0[78] = v0 + 8;
  }
  *((_WORD *)v0 + 253) |= 0x18u;
  llvm::cl::Option::addCategory((llvm::cl::Option *)(v0 + 62), (llvm::cl::OptionCategory *)(v0 + 12));
  v20 = v0[74];
  if (v20 != v0[73])
    goto LABEL_27;
  v27 = *((unsigned int *)v0 + 151);
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = 8 * v27;
    v30 = (_QWORD *)v0[74];
    while ((const void *)*v30 != v12)
    {
      if (*v30 == -2)
        v28 = v30;
      ++v30;
      v29 -= 8;
      if (!v29)
      {
        if (!v28)
          goto LABEL_71;
        *v28 = v12;
        --*((_DWORD *)v0 + 152);
        break;
      }
    }
  }
  else
  {
LABEL_71:
    if (v27 >= *((_DWORD *)v0 + 150))
    {
LABEL_27:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v0 + 73), v12);
      goto LABEL_28;
    }
    *((_DWORD *)v0 + 151) = v27 + 1;
    *(_QWORD *)(v20 + 8 * v27) = v12;
  }
LABEL_28:
  if (!atomic_load(qword_1ECD32ED8))
  *((_WORD *)v0 + 253) |= 0x4000u;
  *(_QWORD *)&v53[0] = "Alias for --help";
  *((_QWORD *)&v53[0] + 1) = 16;
  v51 = (llvm::cl::OptionCategory *)(v0 + 62);
  LODWORD(v50) = 16;
  llvm::cl::alias::alias<char [2],llvm::cl::desc,llvm::cl::aliasopt,llvm::cl::MiscFlags>((uint64_t)(v0 + 85), (int8x16_t *)"h", v53, (uint64_t *)&v51, &v50);
  if (!atomic_load(llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  v23 = (const void *)llvm::cl::AllSubCommands[0];
  v24 = llvm::cl::Option::Option((uint64_t)(v0 + 102), 0, 0);
  v0[118] = 0;
  v0[119] = &off_1E0E22EA8;
  v0[102] = &off_1E0E23248;
  v0[120] = off_1E0E23B68;
  v0[121] = off_1E0E4F8C0;
  v0[124] = v0 + 121;
  llvm::cl::Option::setArgStr(v24, (int8x16_t *)"help-hidden", (const unsigned __int8 *)0xB);
  v0[106] = "Display all available options";
  v0[107] = 29;
  if (v0[118])
  {
    *(_QWORD *)&v53[0] = "cl::location(x) specified more than once!";
    v54 = 259;
    v26 = (llvm::raw_ostream *)llvm::errs(v25);
    llvm::cl::Option::error(v0 + 102, (llvm::Twine *)v53, 0, 0, v26);
  }
  else
  {
    v0[118] = v0 + 10;
  }
  *((_WORD *)v0 + 413) = *((_WORD *)v0 + 413) & 0xFF87 | 0x38;
  llvm::cl::Option::addCategory((llvm::cl::Option *)(v0 + 102), (llvm::cl::OptionCategory *)(v0 + 12));
  v31 = v0[114];
  if (v31 != v0[113])
    goto LABEL_44;
  v42 = *((unsigned int *)v0 + 231);
  if ((_DWORD)v42)
  {
    v43 = 0;
    v44 = 8 * v42;
    v45 = (_QWORD *)v0[114];
    while ((const void *)*v45 != v23)
    {
      if (*v45 == -2)
        v43 = v45;
      ++v45;
      v44 -= 8;
      if (!v44)
      {
        if (!v43)
          goto LABEL_73;
        *v43 = v23;
        --*((_DWORD *)v0 + 232);
        break;
      }
    }
  }
  else
  {
LABEL_73:
    if (v42 >= *((_DWORD *)v0 + 230))
    {
LABEL_44:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(v0 + 113), v23);
      goto LABEL_45;
    }
    *((_DWORD *)v0 + 231) = v42 + 1;
    *(_QWORD *)(v31 + 8 * v42) = v23;
  }
LABEL_45:
  if (!atomic_load(qword_1ECD32ED8))
  *((_WORD *)v0 + 413) |= 0x4000u;
  *(_QWORD *)&v53[0] = "Print non-default options after command line parsing";
  *((_QWORD *)&v53[0] + 1) = 52;
  v52 = 1;
  v49 = 0;
  v50 = (llvm::cl::OptionCategory *)(v0 + 12);
  v51 = (llvm::cl::OptionCategory *)&v49;
  if (!atomic_load(llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  v48 = (const void *)llvm::cl::AllSubCommands[0];
  v34 = llvm::cl::Option::Option((uint64_t)(v0 + 125), 0, 0);
  *((_BYTE *)v0 + 1128) = 0;
  v0[143] = 0;
  v0[142] = &off_1E0E22F68;
  v0[125] = &unk_1E0E23520;
  v0[144] = off_1E0E23B68;
  v0[145] = off_1E0E4FAF8;
  v0[148] = v0 + 145;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [14],llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::cat,llvm::cl::sub>(v34, (int8x16_t *)"print-options", v53, &v52, (_BYTE **)&v51, &v50, &v48);
  if (!atomic_load(qword_1ECD32ED8))
  *((_WORD *)v0 + 505) |= 0x4000u;
  *(_QWORD *)&v53[0] = "Print all option values after command line parsing";
  *((_QWORD *)&v53[0] + 1) = 50;
  v52 = 1;
  v49 = 0;
  v50 = (llvm::cl::OptionCategory *)(v0 + 12);
  v51 = (llvm::cl::OptionCategory *)&v49;
  if (!atomic_load(llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  v48 = (const void *)llvm::cl::AllSubCommands[0];
  v37 = llvm::cl::Option::Option((uint64_t)(v0 + 149), 0, 0);
  *((_BYTE *)v0 + 1320) = 0;
  v0[167] = 0;
  v0[166] = &off_1E0E22F68;
  v0[149] = &unk_1E0E23520;
  v0[168] = off_1E0E23B68;
  v0[169] = off_1E0E4FAF8;
  v0[172] = v0 + 169;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [14],llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::cat,llvm::cl::sub>(v37, (int8x16_t *)"print-all-options", v53, &v52, (_BYTE **)&v51, &v50, &v48);
  if (!atomic_load(qword_1ECD32ED8))
  *((_WORD *)v0 + 601) |= 0x4000u;
  *((_OWORD *)v0 + 89) = 0u;
  *((_OWORD *)v0 + 88) = 0u;
  v39 = llvm::cl::Option::Option((uint64_t)(v0 + 181), 0, 0);
  v0[197] = 0;
  v0[198] = &off_1E0E22E88;
  v0[181] = &off_1E0E231E0;
  v0[199] = off_1E0E23B68;
  v0[200] = off_1E0E4F868;
  v0[203] = v0 + 200;
  llvm::cl::Option::setArgStr(v39, (int8x16_t *)"version", (const unsigned __int8 *)7);
  v0[185] = "Display the version of this program";
  v0[186] = 35;
  if (v0[197])
  {
    *(_QWORD *)&v53[0] = "cl::location(x) specified more than once!";
    v54 = 259;
    v41 = (llvm::raw_ostream *)llvm::errs(v40);
    llvm::cl::Option::error(v0 + 181, (llvm::Twine *)v53, 0, 0, v41);
  }
  else
  {
    v0[197] = v0 + 180;
  }
  *((_WORD *)v0 + 729) |= 0x18u;
  llvm::cl::Option::addCategory((llvm::cl::Option *)(v0 + 181), (llvm::cl::OptionCategory *)(v0 + 12));
  if (!atomic_load(qword_1ECD32ED8))
  *((_WORD *)v0 + 729) |= 0x4000u;
  return v0;
}

void llvm::object_deleter<`anonymous namespace'::CommandLineCommonOptions>::call(_QWORD *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  _QWORD *v40;

  if (!__p)
    return;
  __p[181] = &off_1E0E231E0;
  v2 = (char *)(__p + 200);
  v3 = (char *)__p[203];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  __p[181] = &unk_1E0E23930;
  v5 = (void *)__p[193];
  if (v5 != (void *)__p[192])
    free(v5);
  v6 = (_QWORD *)__p[189];
  if (v6 != __p + 191)
    free(v6);
  v7 = __p[177];
  if (v7)
  {
    v8 = __p[178];
    v9 = (void *)__p[177];
    if (v8 == v7)
    {
LABEL_22:
      __p[178] = v7;
      operator delete(v9);
      goto LABEL_23;
    }
    while (1)
    {
      v12 = v8 - 32;
      v10 = *(_QWORD **)(v8 - 8);
      if ((_QWORD *)(v8 - 32) == v10)
      {
        v10 = (_QWORD *)(v8 - 32);
        v11 = 4;
      }
      else
      {
        if (!v10)
          goto LABEL_17;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_17:
      v8 = v12;
      if (v12 == v7)
      {
        v9 = (void *)__p[177];
        goto LABEL_22;
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)__p[176];
  if (v13 == __p + 173)
  {
    v14 = 4;
    v13 = __p + 173;
  }
  else
  {
    if (!v13)
      goto LABEL_28;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_28:
  __p[149] = &unk_1E0E23520;
  v15 = (_QWORD *)__p[172];
  if (v15 == __p + 169)
  {
    v16 = 4;
    v15 = __p + 169;
  }
  else
  {
    if (!v15)
      goto LABEL_33;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_33:
  __p[149] = &unk_1E0E23930;
  v17 = (void *)__p[161];
  if (v17 != (void *)__p[160])
    free(v17);
  v18 = (_QWORD *)__p[157];
  if (v18 != __p + 159)
    free(v18);
  __p[125] = &unk_1E0E23520;
  v19 = (_QWORD *)__p[148];
  if (v19 == __p + 145)
  {
    v20 = 4;
    v19 = __p + 145;
  }
  else
  {
    if (!v19)
      goto LABEL_42;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_42:
  __p[125] = &unk_1E0E23930;
  v21 = (void *)__p[137];
  if (v21 != (void *)__p[136])
    free(v21);
  v22 = (_QWORD *)__p[133];
  if (v22 != __p + 135)
    free(v22);
  __p[102] = &off_1E0E23248;
  v23 = (_QWORD *)__p[124];
  if (v23 == __p + 121)
  {
    v24 = 4;
    v23 = __p + 121;
  }
  else
  {
    if (!v23)
      goto LABEL_51;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_51:
  __p[102] = &unk_1E0E23930;
  v25 = (void *)__p[114];
  if (v25 != (void *)__p[113])
    free(v25);
  v26 = (_QWORD *)__p[110];
  if (v26 != __p + 112)
    free(v26);
  __p[85] = &unk_1E0E23930;
  v27 = (void *)__p[97];
  if (v27 != (void *)__p[96])
    free(v27);
  v28 = (_QWORD *)__p[93];
  if (v28 != __p + 95)
    free(v28);
  __p[62] = &off_1E0E23248;
  v29 = (_QWORD *)__p[84];
  if (v29 == __p + 81)
  {
    v30 = 4;
    v29 = __p + 81;
  }
  else
  {
    if (!v29)
      goto LABEL_64;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_64:
  __p[62] = &unk_1E0E23930;
  v31 = (void *)__p[74];
  if (v31 != (void *)__p[73])
    free(v31);
  v32 = (_QWORD *)__p[70];
  if (v32 != __p + 72)
    free(v32);
  __p[39] = &off_1E0E230A8;
  v33 = (_QWORD *)__p[61];
  if (v33 == __p + 58)
  {
    v34 = 4;
    v33 = __p + 58;
  }
  else
  {
    if (!v33)
      goto LABEL_73;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_73:
  __p[39] = &unk_1E0E23930;
  v35 = (void *)__p[51];
  if (v35 != (void *)__p[50])
    free(v35);
  v36 = (_QWORD *)__p[47];
  if (v36 != __p + 49)
    free(v36);
  __p[16] = &off_1E0E230A8;
  v37 = (_QWORD *)__p[38];
  if (v37 == __p + 35)
  {
    v38 = 4;
    v37 = __p + 35;
    goto LABEL_81;
  }
  if (v37)
  {
    v38 = 5;
LABEL_81:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  __p[16] = &unk_1E0E23930;
  v39 = (void *)__p[28];
  if (v39 != (void *)__p[27])
    free(v39);
  v40 = (_QWORD *)__p[24];
  if (v40 != __p + 26)
    free(v40);
  operator delete(__p);
}

uint64_t `anonymous namespace'::HelpPrinter::printOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = 16 * v3;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)a2 + v6 + 8) + 48))(*(_QWORD *)(*(_QWORD *)a2 + v6 + 8), a3);
      v6 += 16;
    }
    while (v7 != v6);
  }
  return result;
}

void `anonymous namespace'::CategorizedHelpPrinter::printOptions(llvm *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  BOOL v68;
  int v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  llvm::raw_ostream *v85;
  const void *v86;
  unint64_t v87;
  llvm::raw_ostream *v88;
  llvm::raw_ostream *v89;
  const void *v90;
  unint64_t v91;
  _BYTE *v92;
  uint64_t *v93;
  uint64_t *i;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  int v100;
  BOOL v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  void *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  llvm *v109;
  char *v111;
  uint64_t v112;
  llvm *v113;
  uint64_t v114;
  unsigned int v115;

  v109 = a1;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  if (!atomic_load(qword_1ECD32ED8))
  v5 = *(_QWORD *)(qword_1ECD32ED8[0] + 120);
  v6 = 128;
  if (v5 == *(_QWORD *)(qword_1ECD32ED8[0] + 112))
    v6 = 132;
  v7 = *(unsigned int *)(qword_1ECD32ED8[0] + v6);
  v107 = a3;
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = *(uint64_t **)(qword_1ECD32ED8[0] + 120);
    while ((unint64_t)*v9 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
        goto LABEL_43;
    }
  }
  else
  {
    v9 = *(uint64_t **)(qword_1ECD32ED8[0] + 120);
  }
  v10 = (uint64_t *)(v5 + 8 * v7);
  if (v9 != v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *v9;
      if (v12 < v13)
      {
        *(_QWORD *)v12 = v14;
        v12 += 8;
        goto LABEL_35;
      }
      v15 = v12 - v11;
      v16 = (v12 - v11) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
LABEL_184:
        abort();
      v18 = v11;
      if ((v13 - v11) >> 2 > v17)
        v17 = (v13 - v11) >> 2;
      if ((unint64_t)(v13 - v11) >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
      {
        if (v19 >> 61)
LABEL_185:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v20 = v12;
        a1 = (llvm *)operator new(8 * v19);
        v12 = v20;
        v11 = (char *)a1 + 8 * v16;
        *(_QWORD *)v11 = v14;
        v21 = (uint64_t)(v11 + 8);
        v22 = v18;
        if (v20 == v18)
          goto LABEL_32;
      }
      else
      {
        a1 = 0;
        v11 = (char *)(8 * v16);
        *(_QWORD *)(8 * v16) = v14;
        v21 = 8 * v16 + 8;
        v22 = v18;
        if (v12 == v18)
          goto LABEL_32;
      }
      v23 = v12 - 8 - v22;
      if (v23 < 0x168
        || (char *)a1 + v15 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8 > (char *)a1 + v15 - 8
        || &v12[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8
        || (unint64_t)(v12 - ((char *)a1 + v15)) < 0x20)
      {
        v24 = v12;
        v22 = v18;
        do
        {
LABEL_31:
          v25 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v11 - 1) = v25;
          v11 -= 8;
        }
        while (v24 != v22);
        goto LABEL_32;
      }
      v26 = (v23 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v24 = &v12[-v27];
      v11 -= v27;
      v28 = (_OWORD *)((char *)a1 + 8 * v16 - 16);
      v29 = v12 - 16;
      v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 4;
      }
      while (v30);
      v22 = v18;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_31;
LABEL_32:
      v13 = (char *)a1 + 8 * v19;
      if (v22)
        operator delete(v22);
      v12 = (char *)v21;
      do
      {
LABEL_35:
        if (++v9 == v10)
          goto LABEL_44;
      }
      while ((unint64_t)*v9 >= 0xFFFFFFFFFFFFFFFELL);
      if (v9 == v10)
        goto LABEL_44;
    }
  }
LABEL_43:
  v12 = 0;
  v11 = 0;
LABEL_44:
  v111 = v12;
  if (v12 - v11 >= 16)
  v106 = v11;
  v108 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v108)
  {
    v32 = 0;
    while (1)
    {
      v112 = v32;
      v33 = *(_QWORD *)(*(_QWORD *)a2 + 16 * v32 + 8);
      v34 = *(unsigned int *)(v33 + 72);
      if ((_DWORD)v34)
        break;
LABEL_48:
      v32 = v112 + 1;
      if (v112 + 1 == v108)
        goto LABEL_108;
    }
    v35 = *(uint64_t **)(v33 + 64);
    v36 = &v35[v34];
    while (1)
    {
      v38 = v115;
      if (!v115)
        goto LABEL_94;
      v39 = ((*v35 >> 4) ^ (*v35 >> 9)) & (v115 - 1);
      v40 = (uint64_t *)((char *)v113 + 32 * v39);
      v41 = *v40;
      if (*v35 == *v40)
        goto LABEL_70;
      v42 = 0;
      v43 = 1;
      while (v41 != -4096)
      {
        if (v42)
          v44 = 0;
        else
          v44 = v41 == -8192;
        if (v44)
          v42 = v40;
        v45 = v39 + v43++;
        v39 = v45 & (v115 - 1);
        v40 = (uint64_t *)((char *)v113 + 32 * v39);
        v41 = *v40;
        if (*v35 == *v40)
          goto LABEL_70;
      }
      if (v42)
        v40 = v42;
      if (4 * (int)v114 + 4 < 3 * v115)
      {
        if (v115 + ~(_DWORD)v114 - HIDWORD(v114) > v115 >> 3)
          goto LABEL_66;
      }
      else
      {
LABEL_94:
        v38 = 2 * v115;
      }
      a1 = (llvm *)llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow((uint64_t)&v113, v38);
      v46 = *v35;
      v64 = ((*v35 >> 4) ^ (*v35 >> 9)) & (v115 - 1);
      v40 = (uint64_t *)((char *)v113 + 32 * v64);
      v65 = *v40;
      if (*v35 == *v40)
        goto LABEL_67;
      v66 = 0;
      v67 = 1;
      while (v65 != -4096)
      {
        if (v66)
          v68 = 0;
        else
          v68 = v65 == -8192;
        if (v68)
          v66 = v40;
        v69 = v64 + v67++;
        v64 = v69 & (v115 - 1);
        v40 = (uint64_t *)((char *)v113 + 32 * v64);
        v65 = *v40;
        if (v46 == *v40)
          goto LABEL_67;
      }
      if (v66)
        v40 = v66;
LABEL_66:
      v46 = *v40;
LABEL_67:
      LODWORD(v114) = v114 + 1;
      if (v46 != -4096)
        --HIDWORD(v114);
      *v40 = *v35;
      v40[1] = 0;
      v40[2] = 0;
      v40[3] = 0;
LABEL_70:
      v48 = (char *)v40[2];
      v47 = v40[3];
      if ((unint64_t)v48 >= v47)
      {
        v49 = (char *)v40[1];
        v50 = (v48 - v49) >> 3;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 61)
          goto LABEL_184;
        v52 = v47 - (_QWORD)v49;
        if (v52 >> 2 > v51)
          v51 = v52 >> 2;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          if (v53 >> 61)
            goto LABEL_185;
          a1 = (llvm *)operator new(8 * v53);
          v54 = (_QWORD *)((char *)a1 + 8 * v50);
          *v54 = v33;
          v37 = (uint64_t)(v54 + 1);
          if (v48 == v49)
            goto LABEL_89;
LABEL_82:
          v55 = v48 - 8 - v49;
          if (v55 < 0x58)
            goto LABEL_188;
          if ((unint64_t)(v49 - (char *)a1) < 0x20)
            goto LABEL_188;
          v56 = (v55 >> 3) + 1;
          v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
          v58 = &v48[-v57];
          v54 = (_QWORD *)((char *)v54 - v57);
          v59 = (_OWORD *)((char *)a1 + 8 * v50 - 16);
          v60 = (__int128 *)(v48 - 16);
          v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v62 = *v60;
            *(v59 - 1) = *(v60 - 1);
            *v59 = v62;
            v59 -= 2;
            v60 -= 2;
            v61 -= 4;
          }
          while (v61);
          v48 = v58;
          if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_188:
            do
            {
              v63 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *--v54 = v63;
            }
            while (v48 != v49);
          }
          v48 = (char *)v40[1];
        }
        else
        {
          a1 = 0;
          v54 = (_QWORD *)(8 * v50);
          *(_QWORD *)(8 * v50) = v33;
          v37 = 8 * v50 + 8;
          if (v48 != v49)
            goto LABEL_82;
        }
LABEL_89:
        v40[1] = (uint64_t)v54;
        v40[2] = v37;
        v40[3] = (uint64_t)a1 + 8 * v53;
        if (v48)
          operator delete(v48);
        goto LABEL_52;
      }
      *(_QWORD *)v48 = v33;
      v37 = (uint64_t)(v48 + 8);
LABEL_52:
      v40[2] = v37;
      if (++v35 == v36)
        goto LABEL_48;
    }
  }
LABEL_108:
  if (v106 == v111)
  {
LABEL_176:
    if (v115)
    {
      v103 = (_QWORD *)((char *)v113 + 16);
      v104 = 32 * v115;
      while (1)
      {
        if ((*(v103 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v105 = (void *)*(v103 - 1);
          if (v105)
          {
            *v103 = v105;
            operator delete(v105);
          }
        }
        v103 += 4;
        v104 -= 32;
        if (!v104)
          llvm::deallocate_buffer(v113, (void *)(32 * v115));
      }
    }
    llvm::deallocate_buffer(v113, 0);
  }
  v70 = v106;
  while (1)
  {
    v71 = *(_QWORD *)v70;
    v72 = v115;
    if (!v115)
      goto LABEL_160;
    v73 = ((v71 >> 4) ^ (v71 >> 9)) & (v115 - 1);
    v74 = (_QWORD *)((char *)v113 + 32 * v73);
    v75 = *v74;
    if (v71 != *v74)
      break;
LABEL_128:
    v82 = v74[1];
    v81 = v74[2];
    if (!*((_BYTE *)v109 + 8) && v82 == v81)
      goto LABEL_111;
    v83 = (llvm::raw_ostream *)llvm::outs(a1);
    v84 = (_BYTE *)*((_QWORD *)v83 + 4);
    if (*((_BYTE **)v83 + 3) == v84)
    {
      v83 = llvm::raw_ostream::write(v83, "\n", 1uLL);
    }
    else
    {
      *v84 = 10;
      ++*((_QWORD *)v83 + 4);
    }
    v85 = (llvm::raw_ostream *)llvm::outs(v83);
    v86 = *(const void **)v71;
    v87 = *(_QWORD *)(v71 + 8);
    v88 = (llvm::raw_ostream *)*((_QWORD *)v85 + 4);
    if (v87 <= *((_QWORD *)v85 + 3) - (_QWORD)v88)
    {
      if (v87)
      {
        memcpy(v88, v86, *(_QWORD *)(v71 + 8));
        v88 = (llvm::raw_ostream *)(*((_QWORD *)v85 + 4) + v87);
        *((_QWORD *)v85 + 4) = v88;
      }
    }
    else
    {
      v85 = llvm::raw_ostream::write(v85, (const char *)v86, *(_QWORD *)(v71 + 8));
      v88 = (llvm::raw_ostream *)*((_QWORD *)v85 + 4);
    }
    if (*((_QWORD *)v85 + 3) - (_QWORD)v88 > 1uLL)
    {
      *(_WORD *)v88 = 2618;
      *((_QWORD *)v85 + 4) += 2;
      if (!*(_QWORD *)(v71 + 24))
      {
LABEL_142:
        a1 = (llvm *)llvm::outs(v88);
        v92 = (_BYTE *)*((_QWORD *)a1 + 4);
        if (*((_BYTE **)a1 + 3) == v92)
        {
          a1 = llvm::raw_ostream::write(a1, "\n", 1uLL);
          if (v82 != v81)
          {
LABEL_151:
            v93 = (uint64_t *)v74[1];
            for (i = (uint64_t *)v74[2];
                  v93 != i;
                  a1 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v95 + 48))(v95, v107))
            {
              v95 = *v93++;
            }
            goto LABEL_111;
          }
        }
        else
        {
          *v92 = 10;
          ++*((_QWORD *)a1 + 4);
          if (v82 != v81)
            goto LABEL_151;
        }
        goto LABEL_155;
      }
    }
    else
    {
      v88 = llvm::raw_ostream::write(v85, ":\n", 2uLL);
      if (!*(_QWORD *)(v71 + 24))
        goto LABEL_142;
    }
    v89 = (llvm::raw_ostream *)llvm::outs(v88);
    v90 = *(const void **)(v71 + 16);
    v91 = *(_QWORD *)(v71 + 24);
    a1 = (llvm *)*((_QWORD *)v89 + 4);
    if (v91 <= *((_QWORD *)v89 + 3) - (_QWORD)a1)
    {
      if (v91)
      {
        memcpy(a1, v90, *(_QWORD *)(v71 + 24));
        a1 = (llvm *)(*((_QWORD *)v89 + 4) + v91);
        *((_QWORD *)v89 + 4) = a1;
      }
    }
    else
    {
      v89 = llvm::raw_ostream::write(v89, (const char *)v90, *(_QWORD *)(v71 + 24));
      a1 = (llvm *)*((_QWORD *)v89 + 4);
    }
    if (*((_QWORD *)v89 + 3) - (_QWORD)a1 > 1uLL)
    {
      *(_WORD *)a1 = 2570;
      *((_QWORD *)v89 + 4) += 2;
      if (v82 != v81)
        goto LABEL_151;
    }
    else
    {
      a1 = llvm::raw_ostream::write(v89, "\n\n", 2uLL);
      if (v82 != v81)
        goto LABEL_151;
    }
LABEL_155:
    a1 = (llvm *)llvm::outs(a1);
    v96 = (void *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v96 > 0x26uLL)
    {
      qmemcpy(v96, "  This option category has no options.\n", 39);
      *((_QWORD *)a1 + 4) += 39;
    }
    else
    {
      a1 = llvm::raw_ostream::write(a1, "  This option category has no options.\n", 0x27uLL);
    }
LABEL_111:
    v70 += 8;
    if (v70 == v111)
      goto LABEL_176;
  }
  v76 = 0;
  v77 = 1;
  while (v75 != -4096)
  {
    if (v76)
      v78 = 0;
    else
      v78 = v75 == -8192;
    if (v78)
      v76 = v74;
    v79 = v73 + v77++;
    v73 = v79 & (v115 - 1);
    v74 = (_QWORD *)((char *)v113 + 32 * v73);
    v75 = *v74;
    if (v71 == *v74)
      goto LABEL_128;
  }
  if (v76)
    v74 = v76;
  if (4 * (int)v114 + 4 < 3 * v115)
  {
    if (v115 + ~(_DWORD)v114 - HIDWORD(v114) > v115 >> 3)
      goto LABEL_125;
  }
  else
  {
LABEL_160:
    v72 = 2 * v115;
  }
  a1 = (llvm *)llvm::DenseMap<mlir::OperationName,std::vector<mlir::RewritePattern *>,llvm::DenseMapInfo<mlir::OperationName,void>,llvm::detail::DenseMapPair<mlir::OperationName,std::vector<mlir::RewritePattern *>>>::grow((uint64_t)&v113, v72);
  v97 = (v115 - 1) & ((v71 >> 4) ^ (v71 >> 9));
  v74 = (_QWORD *)((char *)v113 + 32 * v97);
  v98 = *v74;
  if (v71 == *v74)
  {
LABEL_162:
    LODWORD(v114) = v114 + 1;
    if (v71 == -4096)
      goto LABEL_127;
    goto LABEL_126;
  }
  v99 = 0;
  v100 = 1;
  while (v98 != -4096)
  {
    if (v99)
      v101 = 0;
    else
      v101 = v98 == -8192;
    if (v101)
      v99 = v74;
    v102 = v97 + v100++;
    v97 = v102 & (v115 - 1);
    v74 = (_QWORD *)((char *)v113 + 32 * v97);
    v98 = *v74;
    if (v71 == *v74)
      goto LABEL_162;
  }
  if (v99)
    v74 = v99;
LABEL_125:
  v80 = *v74;
  LODWORD(v114) = v114 + 1;
  if (v80 == -4096)
  {
LABEL_127:
    *v74 = v71;
    v74[1] = 0;
    v74[2] = 0;
    v74[3] = 0;
    goto LABEL_128;
  }
LABEL_126:
  --HIDWORD(v114);
  goto LABEL_127;
}

uint64_t `anonymous namespace'::CategorizedHelpPrinter::OptionCategoryCompare(const void ***a1, const void ***a2)
{
  const void *v2;
  const void *v3;
  size_t v4;
  int v5;
  unsigned int v7;

  v2 = (*a1)[1];
  v3 = (*a2)[1];
  if (v3 >= v2)
    v4 = (size_t)(*a1)[1];
  else
    v4 = (size_t)(*a2)[1];
  if (v4)
  {
    v5 = memcmp(**a1, **a2, v4);
    if (v5)
      return (v5 >> 31) | 1u;
  }
  if (v2 < v3)
    v7 = -1;
  else
    v7 = 1;
  if (v2 == v3)
    return 0;
  else
    return v7;
}

uint64_t llvm::cl::Option::Option(uint64_t a1, char a2, char a3)
{
  void *v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = a2 & 7 | (32 * (a3 & 3)) | *(_WORD *)(a1 + 10) & 0x8000;
  v4 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v5 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  v6 = atomic_load((unsigned __int8 *)&_MergedGlobals_46);
  if ((v6 & 1) == 0)
  {
    v17 = v4;
    v18 = v5;
    v9 = __cxa_guard_acquire(&_MergedGlobals_46);
    v4 = v17;
    v5 = v18;
    if (v9)
    {
      qword_1ECD32F08 = (uint64_t)"General options";
      unk_1ECD32F10 = 15;
      qword_1ECD32F18 = (uint64_t)"";
      unk_1ECD32F20 = 0;
      if (!atomic_load(qword_1ECD32ED8))
      v11 = qword_1ECD32ED8[0];
      v12 = *(_QWORD *)(qword_1ECD32ED8[0] + 120);
      if (v12 != *(_QWORD *)(qword_1ECD32ED8[0] + 112))
        goto LABEL_9;
      v13 = *(unsigned int *)(qword_1ECD32ED8[0] + 132);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = 8 * v13;
        v16 = *(_QWORD **)(qword_1ECD32ED8[0] + 120);
        while ((uint64_t *)*v16 != &qword_1ECD32F08)
        {
          if (*v16 == -2)
            v14 = v16;
          ++v16;
          v15 -= 8;
          if (!v15)
          {
            if (!v14)
              goto LABEL_19;
            *v14 = &qword_1ECD32F08;
            --*(_DWORD *)(v11 + 136);
            goto LABEL_10;
          }
        }
        goto LABEL_10;
      }
LABEL_19:
      if (v13 < *(_DWORD *)(qword_1ECD32ED8[0] + 128))
      {
        *(_DWORD *)(qword_1ECD32ED8[0] + 132) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = &qword_1ECD32F08;
      }
      else
      {
LABEL_9:
        llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)(qword_1ECD32ED8[0] + 112), &qword_1ECD32F08);
      }
LABEL_10:
      __cxa_guard_release(&_MergedGlobals_46);
      v4 = v17;
      v5 = v18;
    }
  }
  v7 = *(unsigned int *)(a1 + 72);
  if (v7 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v4, v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v7) = &qword_1ECD32F08;
  ++*(_DWORD *)(a1 + 72);
  return a1;
}

uint64_t llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char v11;

  v11 = 0;
  v8 = llvm::cl::parser<BOOL>::parse(a1, (_QWORD *)a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  if (v11)
  {
    exit(0);
  }
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 176);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

_QWORD *llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &off_1E0E230A8;
  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &off_1E0E230A8;
  v2 = __p + 152;
  v3 = (char *)*((_QWORD *)__p + 22);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == 1)
    v3 = 7;
  else
    v3 = v2 + 7;
  (*(void (**)(void))(*(_QWORD *)(a1 + 144) + 16))();
  if (v4)
  {
    v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0)
      v5 = 3;
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6)
      v6 = v4;
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::printOptionValue(llvm::cl::Option *a1, int a2)
{
  return llvm::cl::basic_parser_impl::printOptionNoValue(a1, a1, a2);
}

uint64_t llvm::cl::OptionValueBase<`anonymous namespace'::HelpPrinter,true>::compare()
{
  return 0;
}

_QWORD *std::__function::__func<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4F760;
  return result;
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4F760;
}

uint64_t std::__function::__func<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4llvm2cl3optIN12_GLOBAL__N_111HelpPrinterELb1ENS0_6parserIbEEEUlRKbE_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_111HelpPrinterELb1ENS0_6parserIbEEEUlRKbE_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm2cl3optIN12_GLOBAL__N_111HelpPrinterELb1ENS0_6parserIbEEEUlRKbE_E"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_111HelpPrinterELb1ENS0_6parserIbEEEUlRKbE_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

const void **llvm::cl::apply<llvm::cl::opt<`anonymous namespace'::HelpPrinter,true,llvm::cl::parser<BOOL>>,llvm::cl::desc,llvm::cl::LocationClass<`anonymous namespace'::HelpPrinter>,llvm::cl::OptionHidden,llvm::cl::ValueExpected,llvm::cl::cat,llvm::cl::sub>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _WORD *a5, _WORD *a6, llvm::cl::OptionCategory **a7, const void **a8)
{
  llvm::raw_ostream *v13;
  __int16 v14;
  const void *v15;
  const void **result;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  const char *v22;
  __int16 v23;

  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  if (*(_QWORD *)(a1 + 128))
  {
    v22 = "cl::location(x) specified more than once!";
    v23 = 259;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v22, 0, 0, v13);
  }
  else
  {
    *(_QWORD *)(a1 + 128) = *a4;
  }
  v14 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a5 & 3));
  *(_WORD *)(a1 + 10) = v14;
  *(_WORD *)(a1 + 10) = (8 * (*a6 & 3)) | v14 & 0xFFE7;
  llvm::cl::Option::addCategory((llvm::cl::Option *)a1, *a7);
  v15 = *a8;
  v17 = *(_QWORD *)(a1 + 96);
  result = (const void **)(a1 + 88);
  if (v17 != *(_QWORD *)(a1 + 88))
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v15);
  v18 = *(unsigned int *)(a1 + 108);
  if (!(_DWORD)v18)
  {
LABEL_15:
    if (v18 < *(_DWORD *)(a1 + 104))
    {
      *(_DWORD *)(a1 + 108) = v18 + 1;
      *(_QWORD *)(v17 + 8 * v18) = v15;
      return result;
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v15);
  }
  v19 = 0;
  v20 = 8 * v18;
  v21 = *(_QWORD **)(a1 + 96);
  while ((const void *)*v21 != v15)
  {
    if (*v21 == -2)
      v19 = v21;
    ++v21;
    v20 -= 8;
    if (!v20)
    {
      if (!v19)
        goto LABEL_15;
      *v19 = v15;
      --*(_DWORD *)(a1 + 112);
      return result;
    }
  }
  return result;
}

_anonymous_namespace_::HelpPrinter **llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  _anonymous_namespace_::HelpPrinter **v8;
  uint64_t v9;
  char v13;

  v13 = 0;
  v8 = (_anonymous_namespace_::HelpPrinter **)llvm::cl::parser<BOOL>::parse(a1, (_QWORD *)a1, a3, a4, a5, a6, &v13);
  if ((v8 & 1) == 0)
  {
    if (v13)
    {
      v8 = *(_anonymous_namespace_::HelpPrinter ***)(a1 + 128);
      if (!atomic_load(qword_1ECD32ED8))
      if ((*(_DWORD *)(qword_1ECD32ED8[0] + 132) - *(_DWORD *)(qword_1ECD32ED8[0] + 136)) >= 2)
      {
        if (!atomic_load(qword_1ECD32EF0))
        *(_WORD *)(qword_1ECD32EF0[0] + 138) &= 0xFF9Fu;
        exit(0);
      }
    }
    else
    {
      *(_WORD *)(a1 + 12) = a2;
      v9 = *(_QWORD *)(a1 + 176);
      if (v9)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 48))(v9, &v13);
        return v8;
      }
      std::__throw_bad_function_call[abi:nn180100]();
    }
    exit(0);
  }
  return v8;
}

uint64_t llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

void llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &off_1E0E23248;
  v2 = __p + 152;
  v3 = (char *)*((_QWORD *)__p + 22);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == 1)
    v3 = 7;
  else
    v3 = v2 + 7;
  (*(void (**)(void))(*(_QWORD *)(a1 + 144) + 16))();
  if (v4)
  {
    v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0)
      v5 = 3;
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6)
      v6 = v4;
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::printOptionValue(llvm::cl::Option *a1, int a2)
{
  return llvm::cl::basic_parser_impl::printOptionNoValue(a1, a1, a2);
}

uint64_t llvm::cl::OptionValueBase<`anonymous namespace'::HelpPrinterWrapper,true>::compare()
{
  return 0;
}

_QWORD *std::__function::__func<llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4F8C0;
  return result;
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4F8C0;
}

uint64_t std::__function::__func<llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4llvm2cl3optIN12_GLOBAL__N_118HelpPrinterWrapperELb1ENS0_6parserIbEEEUlRKbE_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_118HelpPrinterWrapperELb1ENS0_6parserIbEEEUlRKbE_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm2cl3optIN12_GLOBAL__N_118HelpPrinterWrapperELb1ENS0_6parserIbEEEUlRKbE_E"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_118HelpPrinterWrapperELb1ENS0_6parserIbEEEUlRKbE_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::HelpPrinterWrapper,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

uint64_t llvm::cl::alias::alias<char [2],llvm::cl::desc,llvm::cl::aliasopt,llvm::cl::MiscFlags>(uint64_t a1, int8x16_t *a2, _OWORD *a3, uint64_t *a4, _WORD *a5)
{
  _QWORD *v10;
  const unsigned __int8 *v11;
  llvm *v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  const char *v16;
  __int16 v17;

  v10 = (_QWORD *)llvm::cl::Option::Option(a1, 0, 1);
  *v10 = &off_1E0E238C8;
  v10[16] = 0;
  v11 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  v13 = *a4;
  if (*(_QWORD *)(a1 + 128))
  {
    v16 = "cl::alias must only have one cl::aliasopt(...) specified!";
    v17 = 259;
    v14 = (llvm::raw_ostream *)llvm::errs(v12);
    llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v16, 0, 0, v14);
  }
  *(_QWORD *)(a1 + 128) = v13;
  *(_WORD *)(a1 + 10) |= (*a5 & 0x1F) << 9;
  llvm::cl::alias::done((llvm::cl::alias *)a1);
  return a1;
}

const void **llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [14],llvm::cl::desc,llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::cat,llvm::cl::sub>(uint64_t a1, int8x16_t *__s, _OWORD *a3, _WORD *a4, _BYTE **a5, llvm::cl::OptionCategory **a6, const void **a7)
{
  const unsigned __int8 *v14;
  _BYTE *v15;
  const void *v16;
  const void **result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v14 = (const unsigned __int8 *)strlen(__s->i8);
  llvm::cl::Option::setArgStr(a1, __s, v14);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v15 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v15;
  llvm::cl::Option::addCategory((llvm::cl::Option *)a1, *a6);
  v16 = *a7;
  v18 = *(_QWORD *)(a1 + 96);
  result = (const void **)(a1 + 88);
  if (v18 != *(_QWORD *)(a1 + 88))
    return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v16);
  v19 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = 8 * v19;
    v22 = *(_QWORD **)(a1 + 96);
    while ((const void *)*v22 != v16)
    {
      if (*v22 == -2)
        v20 = v22;
      ++v22;
      v21 -= 8;
      if (!v21)
      {
        if (!v20)
          goto LABEL_12;
        *v20 = v16;
        --*(_DWORD *)(a1 + 112);
        return result;
      }
    }
  }
  else
  {
LABEL_12:
    if (v19 >= *(_DWORD *)(a1 + 104))
      return llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)result, v16);
    *(_DWORD *)(a1 + 108) = v19 + 1;
    *(_QWORD *)(v18 + 8 * v19) = v16;
  }
  return result;
}

unint64_t *llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, _DWORD *a5, size_t a6)
{
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v13;
  unint64_t v15;
  uint64_t v17;
  char v18;
  void *v19[3];

  v18 = 0;
  v8 = llvm::cl::parser<BOOL>::parse(a1, (_QWORD *)a1, a3, a4, a5, a6, &v18);
  v9 = (unint64_t *)v8;
  if ((v8 & 1) == 0)
  {
    if (v18)
    {
      v9 = qword_1ECD32EF0;
      if (atomic_load(qword_1ECD32EF0))
      {
        v13 = *(_QWORD *)(qword_1ECD32EF0[0] + 1408);
        if (!atomic_load(qword_1ECD32EF0))
          goto LABEL_12;
        goto LABEL_8;
      }
    }
    else
    {
      *(_WORD *)(a1 + 12) = a2;
      v10 = *(_QWORD *)(a1 + 176);
      if (v10)
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v10 + 48))(v10, &v18);
        return v9;
      }
      std::__throw_bad_function_call[abi:nn180100]();
    }
    v13 = *(_QWORD *)(*v9 + 1408);
    if (!atomic_load(v9))
    {
LABEL_12:
      v15 = qword_1ECD32EF0[0];
      if (v13)
      {
LABEL_13:
        v17 = v15 + 1384;
        llvm::outs((llvm *)v8);
        std::function<void ()(llvm::raw_ostream &)>::operator()(v17);
        exit(0);
      }
LABEL_9:
      std::vector<std::function<void ()(llvm::raw_ostream &)>>::vector(v19, (uint64_t *)(v15 + 1416));
      std::vector<std::function<void ()(llvm::raw_ostream &)>>::~vector[abi:nn180100](v19);
      exit(0);
    }
LABEL_8:
    v15 = qword_1ECD32EF0[0];
    if (v13)
      goto LABEL_13;
    goto LABEL_9;
  }
  return v9;
}

uint64_t llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

_QWORD *llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::~opt(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  *a1 = &off_1E0E231E0;
  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &unk_1E0E23930;
  v5 = (void *)a1[12];
  if (v5 != (void *)a1[11])
    free(v5);
  v6 = (_QWORD *)a1[8];
  if (v6 != a1 + 10)
    free(v6);
  return a1;
}

void llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::~opt(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;

  *(_QWORD *)__p = &off_1E0E231E0;
  v2 = __p + 152;
  v3 = (char *)*((_QWORD *)__p + 22);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)__p = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)__p + 12);
  if (v5 != *((void **)__p + 11))
    free(v5);
  v6 = (char *)*((_QWORD *)__p + 8);
  if (v6 != __p + 80)
    free(v6);
  operator delete(__p);
}

uint64_t llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 == 1)
    v3 = 7;
  else
    v3 = v2 + 7;
  (*(void (**)(void))(*(_QWORD *)(a1 + 144) + 16))();
  if (v4)
  {
    v5 = 6;
    if ((*(_WORD *)(a1 + 10) & 0x400) == 0)
      v5 = 3;
    v6 = *(_QWORD *)(a1 + 56);
    if (!v6)
      v6 = v4;
    v3 += v5 + v6;
  }
  return v3;
}

llvm::raw_ostream *llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 144), a1, a2);
}

double llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::printOptionValue(llvm::cl::Option *a1, int a2)
{
  return llvm::cl::basic_parser_impl::printOptionNoValue(a1, a1, a2);
}

uint64_t llvm::cl::OptionValueBase<`anonymous namespace'::VersionPrinter,true>::compare()
{
  return 0;
}

_QWORD *std::__function::__func<llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E0E4F868;
  return result;
}

void std::__function::__func<llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E0E4F868;
}

uint64_t std::__function::__func<llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4llvm2cl3optIN12_GLOBAL__N_114VersionPrinterELb1ENS0_6parserIbEEEUlRKbE_E")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_114VersionPrinterELb1ENS0_6parserIbEEEUlRKbE_E" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4llvm2cl3optIN12_GLOBAL__N_114VersionPrinterELb1ENS0_6parserIbEEEUlRKbE_E"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4llvm2cl3optIN12_GLOBAL__N_114VersionPrinterELb1ENS0_6parserIbEEEUlRKbE_E" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<`anonymous namespace'::VersionPrinter,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

void std::function<void ()(llvm::raw_ostream &)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  }
  else
  {
    v2 = (_QWORD *)std::__throw_bad_function_call[abi:nn180100]();
    sortOpts(v2, v3, v4, v5);
  }
}

void sortOpts(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  int v15;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int16 **v26;
  uint64_t v27;
  unsigned __int16 **v28;
  size_t v29;
  unsigned __int16 **v30;
  unsigned __int16 **v31;
  uint64_t v32;
  int v33;
  _BYTE v34[256];

  v30 = (unsigned __int16 **)v34;
  v31 = (unsigned __int16 **)v34;
  v32 = 32;
  v33 = 0;
  v6 = a1;
  if (a2)
  {
    v6 = a1;
    if (!*a1 || *a1 == -8)
    {
      do
      {
        v9 = v6[1];
        ++v6;
        v8 = v9;
        if (v9)
          v10 = v8 == -8;
        else
          v10 = 1;
      }
      while (v10);
    }
  }
  v11 = &a1[a2];
  if (v6 != v11)
  {
    v12 = *v6;
    while (1)
    {
      v13 = *(unsigned __int16 **)(v12 + 8);
      v14 = (v13[5] >> 5) & 3;
      v15 = v14 == 1 ? a4 : 1;
      if (v14 != 2 && v15 != 0)
        break;
      do
      {
LABEL_26:
        v23 = v6[1];
        ++v6;
        v12 = v23;
        if (v23)
          v24 = v12 == -8;
        else
          v24 = 1;
      }
      while (v24);
      if (v6 == v11)
        goto LABEL_43;
    }
    if (v31 != v30)
      goto LABEL_21;
    v25 = HIDWORD(v32);
    if (HIDWORD(v32))
    {
      v26 = 0;
      v27 = 8 * HIDWORD(v32);
      v28 = v31;
      do
      {
        if (*v28 == v13)
        {
          v18 = 0;
          goto LABEL_22;
        }
        if (*v28 == (unsigned __int16 *)-2)
          v26 = v28;
        ++v28;
        v27 -= 8;
      }
      while (v27);
      if (!v26)
        goto LABEL_40;
      *v26 = v13;
      --v33;
      v18 = 1;
      goto LABEL_22;
    }
LABEL_40:
    if (HIDWORD(v32) < v32)
    {
      ++HIDWORD(v32);
      v31[v25] = v13;
      v18 = 1;
    }
    else
    {
LABEL_21:
      llvm::SmallPtrSetImplBase::insert_imp_big((llvm::SmallPtrSetImplBase *)&v30, v13);
      v18 = v17;
    }
LABEL_22:
    if (v18)
    {
      v19 = *v6;
      v20 = *(_QWORD *)(*v6 + 8);
      v21 = *(unsigned int *)(a3 + 8);
      if (v21 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v21 + 1, 16);
        v21 = *(unsigned int *)(a3 + 8);
      }
      v22 = (_QWORD *)(*(_QWORD *)a3 + 16 * v21);
      *v22 = v19 + 16;
      v22[1] = v20;
      ++*(_DWORD *)(a3 + 8);
    }
    goto LABEL_26;
  }
LABEL_43:
  v29 = *(unsigned int *)(a3 + 8);
  if (v29 >= 2)
    qsort(*(void **)a3, v29, 0x10uLL, (int (__cdecl *)(const void *, const void *))OptNameCompare);
  if (v31 != v30)
    free(v31);
}

uint64_t OptNameCompare(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

uint64_t SubNameCompare(const char **a1, const char **a2)
{
  return strcmp(*a1, *a2);
}

BOOL llvm::cl::OptionValueCopy<int>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

_OWORD *llvm::object_creator<`anonymous namespace'::CommandLineParser>::call()
{
  _OWORD *v0;

  v0 = operator new(0x158uLL);
  *v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  *((_QWORD *)v0 + 8) = v0 + 5;
  *((_QWORD *)v0 + 9) = 0x400000000;
  *((_QWORD *)v0 + 14) = v0 + 9;
  *((_QWORD *)v0 + 15) = v0 + 9;
  *((_QWORD *)v0 + 16) = 16;
  *((_DWORD *)v0 + 34) = 0;
  *((_QWORD *)v0 + 34) = v0 + 19;
  *((_QWORD *)v0 + 35) = v0 + 19;
  *((_QWORD *)v0 + 36) = 4;
  *((_DWORD *)v0 + 74) = 0;
  *((_QWORD *)v0 + 42) = 0;
  if (!atomic_load(llvm::cl::TopLevelSubCommand))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  if (!atomic_load(llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  return v0;
}

void llvm::object_deleter<`anonymous namespace'::CommandLineParser>::call(void **__p)
{
  void *v2;
  void *v3;
  void **v4;
  void *v5;

  if (__p)
  {
    v2 = __p[35];
    if (v2 != __p[34])
      free(v2);
    v3 = __p[15];
    if (v3 != __p[14])
      free(v3);
    v4 = (void **)__p[8];
    if (v4 != __p + 10)
      free(v4);
    v5 = __p[5];
    if (v5)
    {
      __p[6] = v5;
      operator delete(v5);
    }
    if (*((char *)__p + 23) < 0)
      operator delete(*__p);
    operator delete(__p);
  }
}

double llvm::object_creator<llvm::cl::SubCommand>::call()
{
  _OWORD *v0;
  double result;

  v0 = operator new(0xA0uLL);
  result = 0.0;
  v0[1] = 0u;
  v0[2] = 0u;
  *v0 = 0u;
  v0[4] = 0u;
  v0[5] = 0u;
  v0[6] = 0u;
  v0[3] = 0u;
  v0[7] = 0u;
  *((_QWORD *)v0 + 4) = v0 + 3;
  *((_DWORD *)v0 + 11) = 4;
  *((_QWORD *)v0 + 10) = v0 + 6;
  *((_DWORD *)v0 + 23) = 4;
  *((_QWORD *)v0 + 16) = 0;
  *((_QWORD *)v0 + 17) = 0;
  *((_QWORD *)v0 + 18) = 0x1000000000;
  *((_QWORD *)v0 + 19) = 0;
  return result;
}

void llvm::object_deleter<llvm::cl::SubCommand>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm *v4;
  void *v6;
  void *v7;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 140))
    {
      v2 = *(unsigned int *)(a1 + 136);
      if ((_DWORD)v2)
      {
        v3 = 0;
        do
        {
          v4 = *(llvm **)(*(_QWORD *)(a1 + 128) + v3);
          if (v4 != (llvm *)-8 && v4 != 0)
            llvm::deallocate_buffer(v4, (void *)(*(_QWORD *)v4 + 17));
          v3 += 8;
        }
        while (8 * v2 != v3);
      }
    }
    free(*(void **)(a1 + 128));
    v6 = *(void **)(a1 + 80);
    if (v6 != (void *)(a1 + 96))
      free(v6);
    v7 = *(void **)(a1 + 32);
    if (v7 != (void *)(a1 + 48))
      free(v7);
    operator delete((void *)a1);
  }
}

uint64_t llvm::ConvertUTF16toUTF8(unint64_t *a1, unint64_t a2, uint64_t *a3, unint64_t a4, int a5)
{
  unsigned __int16 *v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned __int16 v13;

  v5 = (unsigned __int16 *)*a1;
  v6 = *a3;
  if (*a1 >= a2)
  {
    *a1 = (unint64_t)v5;
    *a3 = v6;
    return 0;
  }
  v7 = (unsigned __int16 *)*a1;
  while (1)
  {
    v10 = *v7++;
    v9 = v10;
    v11 = v10 & 0xFC00;
    if (v11 == 55296)
      break;
    if (!a5 && v11 == 56320)
    {
LABEL_28:
      *a1 = (unint64_t)v5;
      *a3 = v6;
      return 3;
    }
LABEL_15:
    if (v9 < 0x10000)
      v13 = 3;
    else
      v13 = 4;
    if (v9 < 0x800)
      v13 = 2;
    if (v9 < 0x80)
      v13 = 1;
    v8 = v6 + v13;
    if (v8 > a4)
    {
      *a1 = (unint64_t)v5;
      *a3 = v6;
      return 2;
    }
    switch(v13)
    {
      case 1u:
        goto LABEL_5;
      case 2u:
        goto LABEL_4;
      case 3u:
        goto LABEL_3;
      case 4u:
        *(_BYTE *)--v8 = v9 & 0x3F | 0x80;
        v9 >>= 6;
LABEL_3:
        *(_BYTE *)--v8 = v9 & 0x3F | 0x80;
        v9 >>= 6;
LABEL_4:
        *(_BYTE *)--v8 = v9 & 0x3F | 0x80;
        v9 >>= 6;
LABEL_5:
        *(_BYTE *)--v8 = llvm::firstByteMark[v13] | v9;
        break;
      default:
        break;
    }
    v6 = v8 + v13;
    v5 = v7;
    if ((unint64_t)v7 >= a2)
    {
      *a1 = (unint64_t)v7;
      *a3 = v6;
      return 0;
    }
  }
  if ((unint64_t)v7 < a2)
  {
    v12 = *v7;
    if ((v12 & 0xFC00) == 0xDC00)
    {
      v9 = v12 + (v9 << 10) - 56613888;
      v7 = v5 + 2;
    }
    else if (!a5)
    {
      goto LABEL_28;
    }
    goto LABEL_15;
  }
  *a1 = (unint64_t)v5;
  *a3 = v6;
  return 1;
}

BOOL llvm::isLegalUTF8(llvm *this, const unsigned __int8 *a2)
{
  char *v2;
  unsigned int v3;
  _BOOL8 result;
  int v5;
  int v6;
  int v7;

  v2 = (char *)this + (int)a2;
  switch((int)a2)
  {
    case 1:
      v3 = *(unsigned __int8 *)this;
LABEL_3:
      if ((char)v3 < -62)
        return 0;
      return v3 < 0xF5;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      v5 = *--v2;
      if (v5 > -65)
        return 0;
LABEL_6:
      v6 = *--v2;
      if (v6 > -65)
        return 0;
LABEL_7:
      v7 = *(v2 - 1);
      if (v7 > -65)
        return 0;
      v3 = *(unsigned __int8 *)this;
      switch(*(_BYTE *)this)
      {
        case 0xE0:
          if (v7 < 0xA0u)
            return 0;
          result = 1;
          break;
        case 0xED:
          if (v7 > 0x9Fu)
            return 0;
          result = 1;
          break;
        case 0xF0:
          if (v7 < 0x90u)
            return 0;
          result = 1;
          break;
        case 0xF4:
          if (v7 > 0x8Fu)
            return 0;
          result = 1;
          break;
        default:
          goto LABEL_3;
      }
      return result;
    default:
      return 0;
  }
}

uint64_t llvm::getNumBytesForUTF8(llvm *this)
{
  return (llvm::trailingBytesForUTF8[this] + 1);
}

uint64_t llvm::ConvertUTF8toUTF32Impl(char **a1, char *a2, unsigned int **a3, unint64_t a4, int a5, int a6)
{
  char *v6;
  unsigned int *v7;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  char *v32;
  BOOL v33;
  char *v34;

  v6 = *a1;
  v7 = *a3;
  if (*a1 >= a2)
  {
    v10 = 0;
    goto LABEL_88;
  }
  v10 = 0;
  if (a5)
    v11 = a6 == 0;
  else
    v11 = 0;
  v12 = !v11;
  while (1)
  {
    v15 = *v6;
    v16 = (unsigned __int16)llvm::trailingBytesForUTF8[v15];
    if (a2 - v6 > v16)
      break;
    if ((v12 & 1) != 0)
    {
      v10 = 1;
      goto LABEL_88;
    }
    if ((v15 + 62) < 0x1Eu || v6 + 1 == a2)
    {
LABEL_8:
      v13 = 1;
      goto LABEL_9;
    }
    v26 = v6[1];
    if ((_DWORD)v15 == 224)
    {
      if ((v26 & 0xFFFFFFE0) == 0xFFFFFFA0)
        v13 = 2;
      else
        v13 = 1;
      goto LABEL_9;
    }
    if ((v15 + 31) <= 0xBu)
      goto LABEL_47;
    if ((_DWORD)v15 == 237)
    {
      v30 = v26 < -96;
LABEL_51:
      v31 = 1;
LABEL_52:
      if (v30)
        v13 = v31 + 1;
      else
        v13 = v31;
      goto LABEL_9;
    }
    if ((v15 & 0xFE) == 0xEE)
    {
LABEL_47:
      v30 = v26 < -64;
      goto LABEL_51;
    }
    v32 = v6 + 2;
    if ((_DWORD)v15 == 240)
    {
      if ((v26 + 112) > 0x2F)
        goto LABEL_8;
    }
    else if ((v15 + 15) > 2u)
    {
      v13 = 1;
      if ((_DWORD)v15 != 244 || v26 > -113)
        goto LABEL_9;
    }
    else if (v26 > -65)
    {
      goto LABEL_8;
    }
    if (v32 != a2)
    {
      v30 = *v32 < -64;
      v31 = 2;
      goto LABEL_52;
    }
    v13 = 2;
LABEL_9:
    v6 += v13;
LABEL_10:
    v10 = 3;
    v14 = 65533;
LABEL_11:
    *v7++ = v14;
    if (v6 >= a2)
      goto LABEL_88;
  }
  if ((unint64_t)v7 >= a4)
  {
    v10 = 2;
    goto LABEL_88;
  }
  if (!llvm::isLegalUTF8((llvm *)v6, (const unsigned __int8 *)(v16 + 1)))
  {
    if (!a5)
      goto LABEL_91;
    if (v6 == a2)
      goto LABEL_10;
    if ((v15 + 62) < 0x1Eu)
    {
LABEL_81:
      ++v6;
      goto LABEL_10;
    }
    v27 = 1;
    if (v6 + 1 == a2)
      goto LABEL_66;
    v28 = v6[1];
    if ((_DWORD)v15 == 224)
    {
      v29 = 1;
      if ((v28 & 0xFFFFFFE0) == 0xFFFFFFA0)
        v29 = 2;
      v6 += v29;
      goto LABEL_10;
    }
    if ((v15 + 31) > 0xBu)
    {
      if ((_DWORD)v15 == 237)
      {
        v33 = v28 < -96;
        goto LABEL_63;
      }
      if ((v15 & 0xFE) != 0xEE)
      {
        v34 = v6 + 2;
        if ((_DWORD)v15 == 240)
        {
          if ((v28 + 112) > 0x2F)
            goto LABEL_81;
        }
        else if ((v15 + 15) > 2u)
        {
          v27 = 1;
          if ((_DWORD)v15 != 244 || v28 > -113)
          {
LABEL_66:
            v6 += v27;
            goto LABEL_10;
          }
        }
        else if (v28 > -65)
        {
          goto LABEL_81;
        }
        if (v34 == a2)
        {
          v6 += 2;
          goto LABEL_10;
        }
        v33 = *v34 < -64;
        v27 = 2;
LABEL_64:
        if (v33)
          ++v27;
        goto LABEL_66;
      }
    }
    v33 = v28 < -64;
LABEL_63:
    v27 = 1;
    goto LABEL_64;
  }
  v17 = 0;
  v18 = v16;
  switch((int)v16)
  {
    case 0:
      goto LABEL_21;
    case 1:
      goto LABEL_20;
    case 2:
      goto LABEL_19;
    case 3:
      goto LABEL_18;
    case 4:
      goto LABEL_17;
    case 5:
      v17 = (_DWORD)v15 << 6;
      v19 = *++v6;
      LODWORD(v15) = v19;
LABEL_17:
      v20 = *++v6;
      v17 = (v17 + (_DWORD)v15) << 6;
      LODWORD(v15) = v20;
LABEL_18:
      v21 = *++v6;
      v17 = (v17 + (_DWORD)v15) << 6;
      LODWORD(v15) = v21;
LABEL_19:
      v22 = *++v6;
      v17 = (v17 + (_DWORD)v15) << 6;
      LODWORD(v15) = v22;
LABEL_20:
      v23 = *++v6;
      v18 = (v17 + (_DWORD)v15) << 6;
      LODWORD(v15) = v23;
LABEL_21:
      ++v6;
      v17 = v18 + v15;
      break;
    default:
      break;
  }
  v14 = v17 - llvm::offsetsFromUTF8[v16];
  if (HIWORD(v14) > 0x10u)
    goto LABEL_10;
  if ((v14 & 0xFFFFF800) == 0xD800)
  {
    v14 = 65533;
    v24 = a5 == 0;
  }
  else
  {
    v24 = 0;
  }
  if (!v24)
    goto LABEL_11;
  v6 -= (v16 + 1);
LABEL_91:
  v10 = 3;
LABEL_88:
  *a1 = v6;
  *a3 = v7;
  return v10;
}

uint64_t llvm::ConvertUTF8toUTF32(char **a1, char *a2, unsigned int **a3, unint64_t a4, int a5)
{
  return llvm::ConvertUTF8toUTF32Impl(a1, a2, a3, a4, a5, 0);
}

BOOL llvm::hasUTF16ByteOrderMark(unsigned __int8 *a1, unint64_t a2)
{
  int v2;

  if (a2 < 2)
    return 0;
  v2 = *a1;
  if (v2 != 255)
  {
    if (v2 == 254)
      return a1[1] == 255;
    return 0;
  }
  return a1[1] == 254;
}

BOOL llvm::convertUTF16ToUTF8String(char *__src, uint64_t a2, std::string *this)
{
  char *v5;
  char *v6;
  int v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  int8x16_t *v11;
  unint64_t v12;
  int8x16_t v13;
  std::string::size_type size;
  std::string *v15;
  int v16;
  _BOOL8 v17;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  void *__p;
  char *v23;
  uint64_t v24;
  char *v25;

  if ((a2 & 1) != 0)
    return 0;
  if (!a2)
    return 1;
  v5 = __src;
  v24 = 0;
  v25 = __src;
  v6 = &__src[a2];
  __p = 0;
  v23 = 0;
  v7 = *(unsigned __int16 *)__src;
  if (v7 == 65534)
  {
    std::vector<unsigned short>::__insert_with_size[abi:nn180100]<unsigned short const*,unsigned short const*>((unint64_t *)&__p, 0, __src, v6, a2 >> 1);
    v5 = (char *)__p;
    v6 = v23;
    if (__p != v23)
    {
      v8 = v23 - (_BYTE *)__p - 2;
      v9 = (char *)__p;
      if (v8 < 0x1E)
        goto LABEL_36;
      v10 = (v8 >> 1) + 1;
      v9 = (char *)__p + 2 * (v10 & 0xFFFFFFFFFFFFFFF0);
      v11 = (int8x16_t *)((char *)__p + 16);
      v12 = v10 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v13 = vrev16q_s8(*v11);
        v11[-1] = vrev16q_s8(v11[-1]);
        *v11 = v13;
        v11 += 2;
        v12 -= 16;
      }
      while (v12);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_36:
        do
        {
          *(_WORD *)v9 = bswap32(*(unsigned __int16 *)v9) >> 16;
          v9 += 2;
        }
        while (v9 != v6);
      }
    }
    v25 = v5;
    v7 = *(unsigned __int16 *)v5;
  }
  if (v7 == 65279)
    v25 = v5 + 2;
  std::string::resize(this, (4 * a2) | 1, 0);
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v15 = this;
  else
    v15 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  v21 = v15;
  v16 = llvm::ConvertUTF16toUTF8((unint64_t *)&v25, (unint64_t)v6, (uint64_t *)&v21, (unint64_t)v15 + size, 0);
  v17 = v16 == 0;
  if (v16)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      this->__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
    }
  }
  else
  {
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = this;
    else
      v19 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::resize(this, (char *)v21 - (char *)v19, 0);
    std::string::push_back(this, 0);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = this->__r_.__value_.__l.__size_ - 1;
      this->__r_.__value_.__l.__size_ = v20;
      this = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    else
    {
      v20 = HIBYTE(this->__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v20 & 0x7F;
    }
    this->__r_.__value_.__s.__data_[v20] = 0;
  }
  if (!__p)
    return v17;
  v23 = (char *)__p;
  operator delete(__p);
  return v17;
}

char *std::vector<unsigned short>::__insert_with_size[abi:nn180100]<unsigned short const*,unsigned short const*>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  __int16 *v27;
  _WORD *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  unint64_t v38;
  __int128 v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  __int128 *v49;
  unint64_t v50;
  __int128 v51;
  __int16 v52;
  char *v53;
  size_t v54;
  __int16 v55;
  char *v56;
  unint64_t v58;
  uint64_t v59;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
  if (a5 < 1)
    return v8;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 1)
  {
    v14 = a5 + ((uint64_t)(v13 - v6) >> 1);
    if (v14 < 0)
      abort();
    v15 = v12 - v6;
    if (v15 > v14)
      v14 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 < 0)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      v18 = (char *)operator new(2 * v16);
    }
    else
    {
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      v18 = 0;
    }
    v40 = 2 * a5;
    v59 = 2 * a5;
    v41 = &v18[2 * (v7 >> 1)];
    v42 = v18;
    memcpy(v41, __src, v40);
    v43 = v41;
    if ((void *)v6 != a2)
    {
      v44 = v17;
      v43 = v41;
      if ((unint64_t)(v7 - 2) < 0x1E)
        goto LABEL_51;
      v44 = v17;
      v43 = v41;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) + v6 - (unint64_t)&v42[v7 & 0xFFFFFFFFFFFFFFFELL] < 0x20)
        goto LABEL_51;
      v45 = ((unint64_t)(v7 - 2) >> 1) + 1;
      v46 = 2 * (v45 & 0xFFFFFFFFFFFFFFF0);
      v44 = &v17[-v46];
      v43 = &v41[-v46];
      v47 = 2 * (v7 >> 1) - 16;
      v48 = &v42[v47];
      v49 = (__int128 *)(v6 + v47);
      v50 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v51 = *v49;
        *((_OWORD *)v48 - 1) = *(v49 - 1);
        *(_OWORD *)v48 = v51;
        v48 -= 32;
        v49 -= 2;
        v50 -= 16;
      }
      while (v50);
      if (v45 != (v45 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_51:
        do
        {
          v52 = *((_WORD *)v44 - 1);
          v44 -= 2;
          *((_WORD *)v43 - 1) = v52;
          v43 -= 2;
        }
        while (v44 != (char *)v6);
      }
    }
    v53 = &v42[2 * v16];
    v54 = v13 - (_QWORD)v17;
    if (v54)
      memmove(&v41[v59], v17, v54);
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v41[v59 + v54];
    a1[2] = (unint64_t)v53;
    if (v6)
      operator delete((void *)v6);
    return v41;
  }
  v19 = v13 - (_QWORD)v8;
  v20 = (uint64_t)(v13 - (_QWORD)v8) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = a1[1];
  }
  else
  {
    v21 = &__src[2 * v20];
    v22 = a4 - v21;
    if (a4 != v21)
    {
      v58 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
      memmove((void *)a1[1], &__src[2 * v20], a4 - v21);
      v8 = (char *)v58;
    }
    v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1)
      return v8;
  }
  v24 = &v8[2 * a5];
  v25 = v23 - (_QWORD)v24;
  v26 = (uint64_t)(v23 - (_QWORD)v24) >> 1;
  v27 = (__int16 *)(v23 - 2 * a5);
  v28 = (_WORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    v29 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v25;
    v30 = (char *)(v29 + v6);
    v31 = v29 + v6 + 2;
    if (v13 > v31)
      v31 = v13;
    v32 = v31 + ~v6 - v29;
    if (v32 < 0x1E)
    {
      v28 = (_WORD *)v23;
    }
    else
    {
      v33 = v23 - (_QWORD)v30;
      v28 = (_WORD *)v23;
      if (v33 >= 0x20)
      {
        v34 = (v32 >> 1) + 1;
        v35 = 2 * (v34 & 0xFFFFFFFFFFFFFFF0);
        v27 = (__int16 *)((char *)v27 + v35);
        v28 = (_WORD *)(v23 + v35);
        v36 = (_OWORD *)(v23 + 16);
        v37 = (__int128 *)(2 * v26 + 2 * (v7 >> 1) + v6 + 16);
        v38 = v34 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v39 = *v37;
          *(v36 - 1) = *(v37 - 1);
          *v36 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 16;
        }
        while (v38);
        if (v34 == (v34 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_41;
      }
    }
    do
    {
      v55 = *v27++;
      *v28++ = v55;
    }
    while ((unint64_t)v27 < v13);
  }
LABEL_41:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    v56 = v8;
    memmove((void *)(v23 - 2 * v26), v8, v25);
    v8 = v56;
  }
  if (v21 != __src)
  {
    v41 = v8;
    memmove(v8, __src, v21 - __src);
    return v41;
  }
  return v8;
}

llvm::CrashRecoveryContext *llvm::CrashRecoveryContext::CrashRecoveryContext(llvm::CrashRecoveryContext *this)
{
  *((_DWORD *)this + 5) = 0;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  mlir::GenericProgramPoint::~GenericProgramPoint(this);
  return this;
}

void llvm::CrashRecoveryContext::~CrashRecoveryContext(llvm::CrashRecoveryContext *this)
{
  uint64_t v2;
  uint64_t *IsRecoveringFromCrash;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 1);
  v4 = *IsRecoveringFromCrash;
  *IsRecoveringFromCrash = (uint64_t)this;
  if (v2)
  {
    do
    {
      v5 = *(_QWORD *)(v2 + 32);
      *(_BYTE *)(v2 + 16) = 1;
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      v2 = v5;
    }
    while (v5);
  }
  *IsRecoveringFromCrash = v4;
  v6 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if ((*(_BYTE *)(v6 + 208) & 2) == 0)
    {
      *v7 = v8;
    }
    if (*(char *)(v6 + 239) < 0)
      operator delete(*(void **)(v6 + 216));
    operator delete((void *)v6);
  }
}

void llvm::CrashRecoveryContext::Enable(llvm::CrashRecoveryContext *this)
{
  unsigned __int8 v1;
  sigaction v2;

  v1 = atomic_load((unsigned __int8 *)qword_1ECD32F30);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(qword_1ECD32F30))
  {
    __cxa_guard_release(qword_1ECD32F30);
  }
  if ((_MergedGlobals_47 & 1) == 0)
  {
    _MergedGlobals_47 = 1;
    v2.__sigaction_u.__sa_handler = (void (__cdecl *)(int))CrashRecoverySignalHandler;
    *(_QWORD *)&v2.sa_mask = 0;
    sigaction(6, &v2, (sigaction *)&qword_1ECD32F30[1]);
    sigaction(10, &v2, (sigaction *)&qword_1ECD32F30[3]);
    sigaction(8, &v2, (sigaction *)&qword_1ECD32F30[5]);
    sigaction(4, &v2, (sigaction *)&qword_1ECD32F30[7]);
    sigaction(11, &v2, (sigaction *)&qword_1ECD32F30[9]);
    sigaction(5, &v2, (sigaction *)&qword_1ECD32F30[11]);
  }
}

void llvm::CrashRecoveryContext::Disable(llvm::CrashRecoveryContext *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)qword_1ECD32F30);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(qword_1ECD32F30))
  {
    __cxa_guard_release(qword_1ECD32F30);
  }
  if (_MergedGlobals_47 == 1)
  {
    _MergedGlobals_47 = 0;
    sigaction(6, (const sigaction *)&qword_1ECD32F30[1], 0);
    sigaction(10, (const sigaction *)&qword_1ECD32F30[3], 0);
    sigaction(8, (const sigaction *)&qword_1ECD32F30[5], 0);
    sigaction(4, (const sigaction *)&qword_1ECD32F30[7], 0);
    sigaction(11, (const sigaction *)&qword_1ECD32F30[9], 0);
    sigaction(5, (const sigaction *)&qword_1ECD32F30[11], 0);
  }
}

uint64_t llvm::CrashRecoveryContext::RunSafely(_QWORD *a1, void (*a2)(uint64_t), uint64_t a3)
{
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;

  if (_MergedGlobals_47 == 1)
  {
    v6 = operator new(0xF0uLL);
    v6[1] = a1;
    v7 = *((_BYTE *)v6 + 208);
    *((_BYTE *)v6 + 208) = v7 & 0xFE;
    *((_BYTE *)v6 + 208) = v7 & 0xF0;
    v6[28] = 0;
    v6[29] = 0;
    v6[27] = 0;
    *(_QWORD *)v9 = *v8;
    *v8 = v9;
    *a1 = v9;
    *(_BYTE *)(v9 + 208) |= 8u;
    if (setjmp((int *)(v9 + 16)))
      return 0;
  }
  a2(a3);
  return 1;
}

__int32 *`anonymous namespace'::CrashRecoveryContextImpl::HandleCrash(_anonymous_namespace_::CrashRecoveryContextImpl *this, int a2, llvm::sys *a3)
{
  __int32 *result;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char *v17;

  if ((*((_BYTE *)this + 208) & 4) != 0)
  {
    v10 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 1;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    v9 = &unk_1E0E22B10;
    v17 = (char *)this + 216;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v9, 0, 0, 0);
    llvm::sys::PrintStackTrace((llvm::sys *)&v9, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v9);
  }
  *(_QWORD *)result = v7;
  *((_BYTE *)this + 208) |= 1u;
  v8 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v8 + 24))
  {
    result = llvm::sys::CleanupOnSignal(a3);
    v8 = *((_QWORD *)this + 1);
  }
  *(_DWORD *)(v8 + 20) = a2;
  if ((*((_BYTE *)this + 208) & 8) != 0)
    longjmp((int *)this + 4, 1);
  return result;
}

uint64_t llvm::CrashRecoveryContext::RunSafelyOnThread(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _opaque_pthread_t *v9;
  _opaque_pthread_t *v10;
  uint64_t v11;
  _opaque_pthread_t *v13;
  _QWORD v14[3];
  BOOL v15;
  unsigned __int8 v16;

  v6 = a4 != 0;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a1;
  v15 = getpriority(3, 0) == 1;
  v16 = 0;
  v7 = a4 | (unint64_t)(v6 << 32);
  v8 = operator new(0x10uLL);
  *v8 = RunSafelyOnThread_Dispatch;
  v8[1] = v14;
  if (!v9)
  {
    operator delete(v8);
    llvm::llvm_thread_join_impl(0, v13);
    v11 = *a1;
    if (!*a1)
      return v16;
    goto LABEL_3;
  }
  llvm::llvm_thread_join_impl(v9, v10);
  v11 = *a1;
  if (*a1)
LABEL_3:
    *(_BYTE *)(v11 + 208) |= 2u;
  return v16;
}

uint64_t RunSafelyOnThread_Dispatch(void *a1)
{
  uint64_t result;

  if (*((_BYTE *)a1 + 24))
    setpriority(3, 0, 4096);
  result = llvm::CrashRecoveryContext::RunSafely(*((_QWORD **)a1 + 2), *(void (**)(uint64_t))a1, *((_QWORD *)a1 + 1));
  *((_BYTE *)a1 + 25) = result;
  return result;
}

__int32 *CrashRecoverySignalHandler(int a1)
{
  llvm::CrashRecoveryContext *v2;
  _anonymous_namespace_::CrashRecoveryContextImpl *v3;
  sigset_t v4;
  int v5;
  sigset_t v7;

  v3 = *(_anonymous_namespace_::CrashRecoveryContextImpl **)v2;
  if (*(_QWORD *)v2)
  {
    v4 = 1 << (a1 - 1);
    if (a1 > 32)
      v4 = 0;
    v7 = v4;
    sigprocmask(2, &v7, 0);
    if (a1 == 13)
      v5 = 74;
    else
      v5 = a1 + 128;
  }
  else
  {
    llvm::CrashRecoveryContext::Disable(v2);
    return (__int32 *)raise(a1);
  }
}

uint64_t llvm::thread::ThreadProxy<std::tuple<void (*)(void *),`anonymous namespace'::RunSafelyOnThreadInfo *>>(_QWORD *a1)
{
  ((void (*)(_QWORD))*a1)(a1[1]);
  operator delete(a1);
  return 0;
}

BOOL llvm::DataExtractor::prepareRead(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  const std::error_category *v10;
  unint64_t v11;
  void **v12;
  void *v13;
  void **v14;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **p_p;
  void *__p;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  const char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v7 = a3 + a2;
  if (__CFADD__(a3, a2))
  {
    v8 = 0;
    if (!a4)
      return v8;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8) > (unint64_t)(v7 - 1);
    if (!a4)
      return v8;
  }
  if (!v8)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = std::generic_category();
    v11 = *(_QWORD *)(a1 + 8);
    if (v9 >= a2)
    {
      __p = 0;
      v26 = 0;
      v27 = 0;
      v17 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 1;
      v19 = 0;
      v20 = 0;
      v18 = 0;
      v16 = &unk_1E0E22B10;
      p_p = &__p;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v16, 0, 0, 0);
      v28 = (void **)&unk_1E0E20400;
      v29 = "unexpected end of data at offset 0x%zx while reading [0x%llx, 0x%llx)";
      v30 = v11;
      v31 = a2;
      v32 = v7;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v16, (uint64_t)&v28);
      v14 = p_p;
      v13 = operator new(0x38uLL);
      LOWORD(v32) = 260;
      v28 = v14;
      llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)&v28, 92, (uint64_t)v10);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
      if (SHIBYTE(v27) < 0)
LABEL_11:
        operator delete(__p);
    }
    else
    {
      __p = 0;
      v26 = 0;
      v27 = 0;
      v17 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 1;
      v19 = 0;
      v20 = 0;
      v18 = 0;
      v16 = &unk_1E0E22B10;
      p_p = &__p;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v16, 0, 0, 0);
      v28 = (void **)&unk_1E0E20480;
      v29 = "offset 0x%llx is beyond the end of data at 0x%zx";
      v30 = a2;
      v31 = v11;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v16, (uint64_t)&v28);
      v12 = p_p;
      v13 = operator new(0x38uLL);
      LOWORD(v32) = 260;
      v28 = v12;
      llvm::StringError::StringError((uint64_t)v13, (llvm::Twine *)&v28, 22, (uint64_t)v10);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
      if (SHIBYTE(v27) < 0)
        goto LABEL_11;
    }
    *a4 = v13;
  }
  return v8;
}

uint64_t llvm::DataExtractor::getU8(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  if (a3 && *a3)
    return 0;
  v7 = *a2;
  result = llvm::DataExtractor::prepareRead((uint64_t)a1, *a2, 1, a3);
  if ((_DWORD)result)
  {
    result = *(unsigned __int8 *)(*a1 + v7);
    ++*a2;
  }
  if (a3)
  {
    if (!*a3)
      *a3 = 0;
  }
  return result;
}

uint64_t llvm::DataExtractor::getU32(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (a3 && *a3)
    return 0;
  v7 = *a2;
  result = llvm::DataExtractor::prepareRead(a1, *a2, 4, a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(*(_QWORD *)a1 + v7);
    v9 = bswap32(v8);
    if (*(_BYTE *)(a1 + 16) == 1)
      result = v8;
    else
      result = v9;
    *a2 += 4;
  }
  if (a3)
  {
    if (!*a3)
      *a3 = 0;
  }
  return result;
}

void *llvm::DataExtractor::getCStrRef(uint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  BOOL v11;
  const std::error_category *v12;
  void **v13;
  void *v14;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **v24;
  void *__p[2];
  uint64_t v26;
  _QWORD v27[4];
  __int16 v28;

  if (a3 && *a3)
    return 0;
  v5 = *a2;
  v6 = a1[1];
  if (v6 <= *a2
    || ((v7 = *a1, v8 = (void *)(*a1 + v5), v9 = (char *)memchr(v8, 0, v6 - *a2), v10 = &v9[-v7], v9)
      ? (v11 = v10 + 1 == 0)
      : (v11 = 1),
        v11))
  {
    if (a3)
    {
      v12 = std::generic_category();
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      v17 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 1;
      v19 = 0;
      v20 = 0;
      v18 = 0;
      v16 = &unk_1E0E22B10;
      v24 = __p;
      llvm::raw_ostream::SetBufferAndMode((uint64_t)&v16, 0, 0, 0);
      v27[0] = &unk_1E0E20440;
      v27[1] = "no null terminated string at offset 0x%llx";
      v27[2] = v5;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v16, (uint64_t)v27);
      v13 = v24;
      v14 = operator new(0x38uLL);
      v28 = 260;
      v27[0] = v13;
      llvm::StringError::StringError((uint64_t)v14, (llvm::Twine *)v27, 92, (uint64_t)v12);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      v8 = 0;
      goto LABEL_13;
    }
    return 0;
  }
  *a2 = (unint64_t)(v10 + 1);
  if (a3 && !*a3)
  {
    v14 = 0;
LABEL_13:
    *a3 = v14;
  }
  return v8;
}

uint64_t llvm::DataExtractor::getULEB128(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char v13;
  uint64_t v14;
  const std::error_category *v15;
  void **v16;
  void *v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  void **v26;
  void *__p[2];
  uint64_t v28;
  _QWORD v29[4];
  __int16 v30;

  v5 = *a1;
  v6 = a1[1];
  if (a3 && *a3)
    return 0;
  v8 = 0;
  result = 0;
  v9 = 0;
  v10 = v5 + *a2;
  v11 = v6 - *a2;
  v12 = "malformed uleb128, extends past end";
  while (v11 != v8)
  {
    v13 = *(_BYTE *)(v10 + v8);
    v14 = v13 & 0x7F;
    if (v9 >= 0x40 && (v13 & 0x7F) != 0 || (unint64_t)(v14 << v9) >> v9 != v14)
    {
      v12 = "uleb128 too big for uint64";
      break;
    }
    result += v14 << v9;
    v9 += 7;
    ++v8;
    if ((v13 & 0x80) == 0)
    {
      *a2 += v8;
      if (a3)
      {
        if (!*a3)
          *a3 = 0;
      }
      return result;
    }
  }
  if (!a3)
    return 0;
  v15 = std::generic_category();
  __p[0] = 0;
  __p[1] = 0;
  v28 = 0;
  v19 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 1;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v18 = &unk_1E0E22B10;
  v26 = __p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v18, 0, 0, 0);
  v29[0] = &unk_1E0E20460;
  v29[1] = "unable to decode LEB128 at offset 0x%8.8llx: %s";
  v29[2] = *a2;
  v29[3] = v12;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v18, (uint64_t)v29);
  v16 = v26;
  v17 = operator new(0x38uLL);
  v30 = 260;
  v29[0] = v16;
  llvm::StringError::StringError((uint64_t)v17, (llvm::Twine *)v29, 92, (uint64_t)v15);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v18);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  result = 0;
  *a3 = v17;
  return result;
}

uint64_t llvm::format_object<unsigned long,unsigned long long,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t llvm::format_object<unsigned long long,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t llvm::format_object<unsigned long long,char const*>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void llvm::initDebugCounterOptions(llvm *this)
{
  unsigned __int8 v1;
  llvm *v2;
  char v3;
  uint64_t *v4;
  int v5;
  __int128 v6;
  int v7;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_48);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_48))
    {
      qword_1ECD32FA8 = 0;
      dword_1ECD32FB0 = 0;
      qword_1ECD32FA0 = 0;
      qword_1ECD32FC8 = 0;
      qword_1ECD32FD0 = 0;
      qword_1ECD32FC0 = 0;
      qword_1ECD32FB8 = (uint64_t)&qword_1ECD32FC0;
      qword_1ECD32FD8 = 0;
      unk_1ECD32FE0 = 0;
      byte_1ECD32FE8 = 0;
      v7 = 1;
      *(_QWORD *)&v6 = "Comma separated list of debug counter skip and count";
      *((_QWORD *)&v6 + 1) = 52;
      v5 = 1;
      v4 = &qword_1ECD32FA0;
      llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>((uint64_t)&qword_1ECD32FF0, (int8x16_t *)"debug-counter", &v7, &v6, &v5, &v4);
      qword_1ECD32FF0 = (uint64_t)&off_1E0E15EE8;
      v7 = 1;
      v3 = 0;
      v4 = (uint64_t *)&v3;
      v5 = 0;
      *(_QWORD *)&v6 = "Print out debug counter info after all counters accumulated";
      *((_QWORD *)&v6 + 1) = 59;
      v2 = (llvm *)llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>((uint64_t)&unk_1ECD330D8, (int8x16_t *)"print-debug-counter", &v7, (_BYTE **)&v4, &v5, &v6);
      llvm::dbgs(v2);
      __cxa_guard_release(&_MergedGlobals_48);
    }
  }
}

void `anonymous namespace'::DebugCounterOwner::~DebugCounterOwner(_anonymous_namespace_::DebugCounterOwner *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  llvm *v11;
  char *v12;
  uint64_t v13;
  void *v14;

  *((_QWORD *)this + 39) = &unk_1E0E23520;
  v2 = (char *)this + 472;
  v3 = (char *)*((_QWORD *)this + 62);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 39) = &unk_1E0E23930;
  v5 = (void *)*((_QWORD *)this + 51);
  if (v5 != *((void **)this + 50))
    free(v5);
  v6 = (char *)*((_QWORD *)this + 47);
  if (v6 != (char *)this + 392)
    free(v6);
  llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list((_QWORD *)this + 10);
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = *((_QWORD *)this + 7);
    v9 = (void *)*((_QWORD *)this + 6);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 1) < 0)
          operator delete(*(void **)(v8 - 24));
        v8 -= 24;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v7;
    operator delete(v9);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  v10 = *((unsigned int *)this + 4);
  v11 = *(llvm **)this;
  if ((_DWORD)v10)
  {
    v12 = (char *)v11 + 40;
    v13 = v10 << 6;
    do
    {
      if (*((_DWORD *)v12 - 10) <= 0xFFFFFFFD && v12[23] < 0)
        operator delete(*(void **)v12);
      v12 += 64;
      v13 -= 64;
    }
    while (v13);
    v11 = *(llvm **)this;
    v14 = (void *)((unint64_t)*((unsigned int *)this + 4) << 6);
  }
  else
  {
    v14 = 0;
  }
  llvm::deallocate_buffer(v11, v14);
}

uint64_t sub_180B89AE4()
{
  uint64_t v0;

  return v0;
}

llvm::raw_ostream *llvm::DebugCounter::push_back(llvm::raw_ostream *result, void **a2)
{
  unint64_t v2;
  int v3;
  uint64_t v5;
  void *v6;
  llvm *v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  llvm *AsSignedInteger;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  size_t v25;
  void *v26;
  void *v27;
  char *v28;
  int v30;
  int v31;
  llvm::raw_ostream *v33;
  uint64_t v34;
  const char *v35;
  llvm::raw_ostream *v36;
  size_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  llvm *v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int *v47;
  int v48;
  BOOL v49;
  int v50;
  llvm::raw_ostream *v51;
  uint64_t v52;
  void *p_p;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  llvm *v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int *v63;
  int v64;
  BOOL v65;
  int v66;
  llvm::raw_ostream *v67;
  llvm::raw_ostream *v68;
  llvm::raw_ostream *v69;
  int *v70;
  void *__p;
  unint64_t v72;
  unint64_t v73;
  int v74;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = (unint64_t)a2[1];
  if (v2)
  {
    v5 = (uint64_t)result;
    if (v3 >= 0)
      v6 = a2;
    else
      v6 = *a2;
    __p = v6;
    v72 = v2;
    LOBYTE(v74) = 61;
    v7 = (llvm *)llvm::StringRef::find((uint64_t *)&__p, (char *)&v74, 1uLL, 0);
    if (v7 != (llvm *)-1)
    {
      v8 = (unint64_t)v7 >= v72 ? v72 : (size_t)v7;
      v9 = v72 >= (unint64_t)v7 + 1 ? (uint64_t)v7 + 1 : v72;
      if (v72 > (unint64_t)v7 + 1)
      {
        v10 = v72 - v9;
        v11 = (char *)__p;
        v12 = (char *)__p + v9;
        __p = 0;
        AsSignedInteger = (llvm *)llvm::getAsSignedInteger((uint64_t)v12, v72 - v9, 0, (unint64_t *)&__p);
        if ((_DWORD)AsSignedInteger)
        {
          v14 = (llvm::raw_ostream *)llvm::errs(AsSignedInteger);
          v15 = v14;
          v16 = *((_QWORD *)v14 + 4);
          if ((unint64_t)(*((_QWORD *)v14 + 3) - v16) > 0x13)
          {
            *(_DWORD *)(v16 + 16) = 540701295;
            *(_OWORD *)v16 = *(_OWORD *)"DebugCounter Error: ";
            v17 = (void *)(*((_QWORD *)v14 + 4) + 20);
            *((_QWORD *)v15 + 4) = v17;
            if (v10 <= *((_QWORD *)v15 + 3) - (_QWORD)v17)
            {
LABEL_18:
              result = (llvm::raw_ostream *)memcpy(v17, v12, v10);
              v18 = *((_QWORD *)v15 + 3);
              v19 = *((_QWORD *)v15 + 4) + v10;
              *((_QWORD *)v15 + 4) = v19;
              if (v18 - v19 > 0x10)
              {
LABEL_19:
                *(_BYTE *)(v19 + 16) = 10;
                *(_OWORD *)v19 = *(_OWORD *)" is not a number\n";
                v20 = *((_QWORD *)v15 + 4) + 17;
LABEL_56:
                *((_QWORD *)v15 + 4) = v20;
                return result;
              }
              goto LABEL_51;
            }
          }
          else
          {
            v15 = llvm::raw_ostream::write(v14, "DebugCounter Error: ", 0x14uLL);
            v17 = (void *)*((_QWORD *)v15 + 4);
            if (v10 <= *((_QWORD *)v15 + 3) - (_QWORD)v17)
              goto LABEL_18;
          }
          result = llvm::raw_ostream::write(v15, v12, v10);
          v15 = result;
          v19 = *((_QWORD *)result + 4);
          if (*((_QWORD *)result + 3) - v19 > 0x10)
            goto LABEL_19;
LABEL_51:
          v35 = " is not a number\n";
          v36 = v15;
          v37 = 17;
          return llvm::raw_ostream::write(v36, v35, v37);
        }
        if (v8 < 5)
        {
LABEL_43:
          v33 = (llvm::raw_ostream *)llvm::errs(AsSignedInteger);
          v15 = v33;
          v34 = *((_QWORD *)v33 + 4);
          if ((unint64_t)(*((_QWORD *)v33 + 3) - v34) > 0x13)
          {
            *(_DWORD *)(v34 + 16) = 540701295;
            *(_OWORD *)v34 = *(_OWORD *)"DebugCounter Error: ";
            result = (llvm::raw_ostream *)(*((_QWORD *)v33 + 4) + 20);
            *((_QWORD *)v15 + 4) = result;
            if (v8 <= *((_QWORD *)v15 + 3) - (_QWORD)result)
            {
LABEL_45:
              if (v8)
              {
                memcpy(result, v11, v8);
                result = (llvm::raw_ostream *)(*((_QWORD *)v15 + 4) + v8);
                *((_QWORD *)v15 + 4) = result;
              }
              if (*((_QWORD *)v15 + 3) - (_QWORD)result <= 0x22uLL)
                goto LABEL_48;
              goto LABEL_55;
            }
          }
          else
          {
            v15 = llvm::raw_ostream::write(v33, "DebugCounter Error: ", 0x14uLL);
            result = (llvm::raw_ostream *)*((_QWORD *)v15 + 4);
            if (v8 <= *((_QWORD *)v15 + 3) - (_QWORD)result)
              goto LABEL_45;
          }
          v15 = llvm::raw_ostream::write(v15, v11, v8);
          result = (llvm::raw_ostream *)*((_QWORD *)v15 + 4);
          if (*((_QWORD *)v15 + 3) - (_QWORD)result <= 0x22uLL)
          {
LABEL_48:
            v35 = " does not end with -skip or -count\n";
            v36 = v15;
            v37 = 35;
            return llvm::raw_ostream::write(v36, v35, v37);
          }
LABEL_55:
          qmemcpy(result, " does not end with -skip or -count\n", 35);
          v20 = *((_QWORD *)v15 + 4) + 35;
          goto LABEL_56;
        }
        v27 = __p;
        v28 = &v11[v8];
        if (*(_DWORD *)&v11[v8 - 5] != 1768649517 || v11[v8 - 1] != 112)
        {
          if (v8 < 6)
            goto LABEL_43;
          v30 = *(_DWORD *)(v28 - 6);
          v31 = *((unsigned __int16 *)v28 - 1);
          if (v30 != 1970234157 || v31 != 29806)
            goto LABEL_43;
          if (v8 >= v8 - 6)
            v8 -= 6;
          if (v8 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v8 >= 0x17)
            {
              v55 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v8 | 7) != 0x17)
                v55 = v8 | 7;
              v56 = v55 + 1;
              p_p = operator new(v55 + 1);
              v72 = v8;
              v73 = v56 | 0x8000000000000000;
              __p = p_p;
            }
            else
            {
              HIBYTE(v73) = v8;
              p_p = &__p;
              if (!v8)
              {
LABEL_104:
                *((_BYTE *)p_p + v8) = 0;
                v57 = (llvm *)llvm::UniqueVector<std::string>::idFor(v5 + 24, (uint64_t)&__p);
                v58 = (int)v57;
                if (SHIBYTE(v73) < 0)
                  operator delete(__p);
                v74 = v58;
                if (!v58)
                {
                  v67 = (llvm::raw_ostream *)llvm::errs(v57);
                  v68 = llvm::raw_ostream::operator<<(v67, "DebugCounter Error: ");
                  v69 = llvm::raw_ostream::operator<<(v68, v11, v8);
                  return llvm::raw_ostream::operator<<(v69, " is not a registered counter\n");
                }
                llvm::DebugCounter::enableAllCounters(v57);
                v59 = *(_DWORD *)(v5 + 16);
                if (v59)
                {
                  v60 = v59 - 1;
                  v61 = (37 * v58) & v60;
                  result = (llvm::raw_ostream *)(*(_QWORD *)v5 + (v61 << 6));
                  v62 = *(_DWORD *)result;
                  if (v58 == *(_DWORD *)result)
                  {
LABEL_121:
                    *((_QWORD *)result + 3) = v27;
                    goto LABEL_122;
                  }
                  v63 = 0;
                  v64 = 1;
                  while (v62 != -1)
                  {
                    if (v63)
                      v65 = 0;
                    else
                      v65 = v62 == -2;
                    if (v65)
                      v63 = (int *)result;
                    v66 = v61 + v64++;
                    v61 = v66 & v60;
                    result = (llvm::raw_ostream *)(*(_QWORD *)v5 + (v61 << 6));
                    v62 = *(_DWORD *)result;
                    if (v58 == *(_DWORD *)result)
                      goto LABEL_121;
                  }
                  if (v63)
                    v70 = v63;
                  else
                    v70 = (int *)result;
                }
                else
                {
                  v70 = 0;
                }
                result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucket<unsigned int const&>(v5, v70, &v74);
                goto LABEL_121;
              }
            }
            memmove(p_p, v11, v8);
            goto LABEL_104;
          }
LABEL_129:
          abort();
        }
        if (v8 >= v8 - 5)
          v8 -= 5;
        if (v8 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_129;
        if (v8 >= 0x17)
        {
          v39 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v8 | 7) != 0x17)
            v39 = v8 | 7;
          v40 = v39 + 1;
          v38 = operator new(v39 + 1);
          v72 = v8;
          v73 = v40 | 0x8000000000000000;
          __p = v38;
        }
        else
        {
          HIBYTE(v73) = v8;
          v38 = &__p;
          if (!v8)
          {
LABEL_67:
            *((_BYTE *)v38 + v8) = 0;
            v41 = (llvm *)llvm::UniqueVector<std::string>::idFor(v5 + 24, (uint64_t)&__p);
            v42 = (int)v41;
            if (SHIBYTE(v73) < 0)
              operator delete(__p);
            v74 = v42;
            if (!v42)
            {
              v51 = (llvm::raw_ostream *)llvm::errs(v41);
              v15 = v51;
              v52 = *((_QWORD *)v51 + 4);
              if ((unint64_t)(*((_QWORD *)v51 + 3) - v52) > 0x13)
              {
                *(_DWORD *)(v52 + 16) = 540701295;
                *(_OWORD *)v52 = *(_OWORD *)"DebugCounter Error: ";
                result = (llvm::raw_ostream *)(*((_QWORD *)v51 + 4) + 20);
                *((_QWORD *)v15 + 4) = result;
              }
              else
              {
                v15 = llvm::raw_ostream::write(v51, "DebugCounter Error: ", 0x14uLL);
                result = (llvm::raw_ostream *)*((_QWORD *)v15 + 4);
              }
              if (v8 <= *((_QWORD *)v15 + 3) - (_QWORD)result)
              {
                if (v8)
                {
                  memcpy(result, v11, v8);
                  result = (llvm::raw_ostream *)(*((_QWORD *)v15 + 4) + v8);
                  *((_QWORD *)v15 + 4) = result;
                }
              }
              else
              {
                v15 = llvm::raw_ostream::write(v15, v11, v8);
                result = (llvm::raw_ostream *)*((_QWORD *)v15 + 4);
              }
              if (*((_QWORD *)v15 + 3) - (_QWORD)result > 0x1CuLL)
              {
                qmemcpy(result, " is not a registered counter\n", 29);
                v20 = *((_QWORD *)v15 + 4) + 29;
                goto LABEL_56;
              }
              v35 = " is not a registered counter\n";
              v36 = v15;
              v37 = 29;
              return llvm::raw_ostream::write(v36, v35, v37);
            }
            llvm::DebugCounter::enableAllCounters(v41);
            v43 = *(_DWORD *)(v5 + 16);
            if (v43)
            {
              v44 = v43 - 1;
              v45 = (37 * v42) & v44;
              result = (llvm::raw_ostream *)(*(_QWORD *)v5 + (v45 << 6));
              v46 = *(_DWORD *)result;
              if (v42 == *(_DWORD *)result)
              {
LABEL_91:
                *((_QWORD *)result + 2) = v27;
LABEL_122:
                *((_BYTE *)result + 32) = 1;
                return result;
              }
              v47 = 0;
              v48 = 1;
              while (v46 != -1)
              {
                if (v47)
                  v49 = 0;
                else
                  v49 = v46 == -2;
                if (v49)
                  v47 = (int *)result;
                v50 = v45 + v48++;
                v45 = v50 & v44;
                result = (llvm::raw_ostream *)(*(_QWORD *)v5 + (v45 << 6));
                v46 = *(_DWORD *)result;
                if (v42 == *(_DWORD *)result)
                  goto LABEL_91;
              }
              if (v47)
                v54 = v47;
              else
                v54 = (int *)result;
            }
            else
            {
              v54 = 0;
            }
            result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucket<unsigned int const&>(v5, v54, &v74);
            goto LABEL_91;
          }
        }
        memmove(v38, v11, v8);
        goto LABEL_67;
      }
    }
    v21 = (llvm::raw_ostream *)llvm::errs(v7);
    v22 = *((_QWORD *)v21 + 4);
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 0x13)
    {
      *(_DWORD *)(v22 + 16) = 540701295;
      *(_OWORD *)v22 = *(_OWORD *)"DebugCounter Error: ";
      *((_QWORD *)v21 + 4) += 20;
    }
    else
    {
      v21 = llvm::raw_ostream::write(v21, "DebugCounter Error: ", 0x14uLL);
    }
    v23 = *((char *)a2 + 23);
    if (v23 >= 0)
      v24 = (const char *)a2;
    else
      v24 = (const char *)*a2;
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)a2 + 23);
    else
      v25 = (size_t)a2[1];
    result = llvm::raw_ostream::write(v21, v24, v25);
    v26 = (void *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v26 > 0x19uLL)
    {
      qmemcpy(v26, " does not have an = in it\n", 26);
      *((_QWORD *)result + 4) += 26;
    }
    else
    {
      return llvm::raw_ostream::write(result, " does not have an = in it\n", 0x1AuLL);
    }
  }
  return result;
}

void llvm::DebugCounter::enableAllCounters(llvm::DebugCounter *this)
{
  unsigned __int8 v1;
  llvm *v2;
  char v3;
  uint64_t *v4;
  int v5;
  __int128 v6;
  int v7;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_48);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_48))
  {
    qword_1ECD32FA8 = 0;
    dword_1ECD32FB0 = 0;
    qword_1ECD32FA0 = 0;
    qword_1ECD32FC8 = 0;
    qword_1ECD32FD0 = 0;
    qword_1ECD32FC0 = 0;
    qword_1ECD32FB8 = (uint64_t)&qword_1ECD32FC0;
    qword_1ECD32FD8 = 0;
    unk_1ECD32FE0 = 0;
    byte_1ECD32FE8 = 0;
    v7 = 1;
    *(_QWORD *)&v6 = "Comma separated list of debug counter skip and count";
    *((_QWORD *)&v6 + 1) = 52;
    v5 = 1;
    v4 = &qword_1ECD32FA0;
    llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>((uint64_t)&qword_1ECD32FF0, (int8x16_t *)"debug-counter", &v7, &v6, &v5, &v4);
    qword_1ECD32FF0 = (uint64_t)&off_1E0E15EE8;
    v7 = 1;
    v3 = 0;
    v4 = (uint64_t *)&v3;
    v5 = 0;
    *(_QWORD *)&v6 = "Print out debug counter info after all counters accumulated";
    *((_QWORD *)&v6 + 1) = 59;
    v2 = (llvm *)llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>((uint64_t)&unk_1ECD330D8, (int8x16_t *)"print-debug-counter", &v7, (_BYTE **)&v4, &v5, &v6);
    llvm::dbgs(v2);
    __cxa_guard_release(&_MergedGlobals_48);
  }
  byte_1ECD32FE8 = 1;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>(uint64_t a1, int8x16_t *a2, _WORD *a3, _OWORD *a4, _WORD *a5, _QWORD *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;
  const unsigned __int8 *v16;
  llvm *v17;
  __int16 v18;
  llvm::raw_ostream *v19;
  const char *v21;
  __int16 v22;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0x8000 | 1;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)a1 = &unk_1E0E237F8;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = &unk_1E0E23B38;
  *(_QWORD *)(a1 + 200) = &unk_1E0E4FD10;
  *(_QWORD *)(a1 + 224) = a1 + 200;
  v16 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v16);
  v18 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v18;
  *(_OWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = ((*a5 & 0x1F) << 9) | v18;
  if (*(_QWORD *)(a1 + 128))
  {
    v21 = "cl::location(x) specified more than once!";
    v22 = 259;
    v19 = (llvm::raw_ostream *)llvm::errs(v17);
    llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v21, 0, 0, v19);
  }
  else
  {
    *(_QWORD *)(a1 + 128) = *a6;
  }
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, int a2, int a3, int a4, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  void *__p[2];
  unint64_t v37;
  __int128 __dst;
  unint64_t v39;

  __p[0] = 0;
  __p[1] = 0;
  v37 = 0;
  if (*(_BYTE *)(a1 + 160))
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
    *(_BYTE *)(a1 + 160) = 0;
  }
  if (!__src)
  {
    __dst = 0uLL;
    v39 = 0;
    goto LABEL_15;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_40;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v39 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_13:
    memmove(p_dst, __src, __len);
    *((_BYTE *)p_dst + __len) = 0;
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  HIBYTE(v39) = __len;
  p_dst = &__dst;
  if (__len)
    goto LABEL_13;
  LOBYTE(__dst) = 0;
  if ((SHIBYTE(v37) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_14:
  operator delete(__p[0]);
LABEL_15:
  *(_OWORD *)__p = __dst;
  v37 = v39;
  llvm::DebugCounter::push_back(*(llvm::raw_ostream **)(a1 + 128), __p);
  *(_WORD *)(a1 + 12) = a2;
  v14 = *(char **)(a1 + 176);
  v13 = *(_QWORD *)(a1 + 184);
  if ((unint64_t)v14 < v13)
  {
    *(_DWORD *)v14 = a2;
    v15 = (uint64_t)(v14 + 4);
    goto LABEL_36;
  }
  v16 = *(char **)(a1 + 168);
  v17 = (v14 - v16) >> 2;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 62)
LABEL_40:
    abort();
  v19 = v13 - (_QWORD)v16;
  if (v19 >> 1 > v18)
    v18 = v19 >> 1;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
    v20 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 62)
      goto LABEL_42;
    v21 = operator new(4 * v20);
    v22 = &v21[4 * v17];
    v23 = &v21[4 * v20];
    *v22 = a2;
    v15 = (uint64_t)(v22 + 1);
    v24 = v14 - v16;
    if (v14 == v16)
      goto LABEL_34;
    goto LABEL_28;
  }
  v21 = 0;
  v22 = (_DWORD *)(4 * v17);
  v23 = 0;
  *(_DWORD *)(4 * v17) = a2;
  v15 = 4 * v17 + 4;
  v24 = v14 - v16;
  if (v14 != v16)
  {
LABEL_28:
    v25 = v24 - 4;
    if (v25 < 0x2C)
      goto LABEL_45;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_45;
    v26 = (v25 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v14[-v27];
    v22 = (_DWORD *)((char *)v22 - v27);
    v29 = &v21[4 * v17 - 16];
    v30 = v14 - 16;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 8;
    }
    while (v31);
    v14 = v28;
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_45:
      do
      {
        v33 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--v22 = v33;
      }
      while (v14 != v16);
    }
  }
LABEL_34:
  *(_QWORD *)(a1 + 168) = v22;
  *(_QWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 184) = v23;
  if (v16)
    operator delete(v16);
LABEL_36:
  *(_QWORD *)(a1 + 176) = v15;
  v34 = *(_QWORD *)(a1 + 224);
  if (!v34)
  {
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_42:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v34 + 48))(v34, __p);
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  return 0;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

void `anonymous namespace'::DebugCounterList::~DebugCounterList(_anonymous_namespace_::DebugCounterList *this)
{
  _QWORD *v1;

  v1 = llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(this);
  operator delete(v1);
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 192, a1);
}

void `anonymous namespace'::DebugCounterList::printOptionInfo(_anonymous_namespace_::DebugCounterList *this, unsigned int a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  size_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  llvm *v14;
  int v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  int v18;
  std::string *v19;
  size_t size;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  void **v25;
  size_t v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm *v29;
  std::string v30;
  void *__p[2];
  unsigned __int8 v32;
  char v33;
  uint64_t *v34;
  int v35;
  int v36;

  v4 = (llvm::raw_ostream *)llvm::outs(this);
  v5 = v4;
  v6 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v6) <= 2)
  {
    v5 = llvm::raw_ostream::write(v4, "  -", 3uLL);
    v7 = (void *)*((_QWORD *)v5 + 4);
    v8 = (const char *)*((_QWORD *)this + 2);
    v9 = *((_QWORD *)this + 3);
    if (v9 <= *((_QWORD *)v5 + 3) - (_QWORD)v7)
      goto LABEL_3;
LABEL_6:
    llvm::raw_ostream::write(v5, v8, v9);
    goto LABEL_7;
  }
  *(_BYTE *)(v6 + 2) = 45;
  *(_WORD *)v6 = 8224;
  v7 = (void *)(*((_QWORD *)v4 + 4) + 3);
  *((_QWORD *)v5 + 4) = v7;
  v8 = (const char *)*((_QWORD *)this + 2);
  v9 = *((_QWORD *)this + 3);
  if (v9 > *((_QWORD *)v5 + 3) - (_QWORD)v7)
    goto LABEL_6;
LABEL_3:
  if (v9)
  {
    memcpy(v7, v8, v9);
    *((_QWORD *)v5 + 4) += v9;
  }
LABEL_7:
  llvm::cl::Option::printHelpStr(*((_QWORD *)this + 4), *((_QWORD *)this + 5), a2, *((_QWORD *)this + 3) + 6);
  v10 = atomic_load((unsigned __int8 *)&_MergedGlobals_48);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_48))
  {
    qword_1ECD32FA8 = 0;
    dword_1ECD32FB0 = 0;
    qword_1ECD32FA0 = 0;
    qword_1ECD32FC8 = 0;
    qword_1ECD32FD0 = 0;
    qword_1ECD32FC0 = 0;
    qword_1ECD32FB8 = (uint64_t)&qword_1ECD32FC0;
    qword_1ECD32FD8 = 0;
    unk_1ECD32FE0 = 0;
    byte_1ECD32FE8 = 0;
    v35 = 1;
    v36 = 1;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)"Comma separated list of debug counter skip and count";
    v30.__r_.__value_.__l.__size_ = 52;
    v34 = &qword_1ECD32FA0;
    llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>((uint64_t)&qword_1ECD32FF0, (int8x16_t *)"debug-counter", &v36, &v30, &v35, &v34);
    qword_1ECD32FF0 = (uint64_t)&off_1E0E15EE8;
    v35 = 0;
    v36 = 1;
    v33 = 0;
    v34 = (uint64_t *)&v33;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)"Print out debug counter info after all counters accumulated";
    v30.__r_.__value_.__l.__size_ = 59;
    v29 = (llvm *)llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>((uint64_t)&unk_1ECD330D8, (int8x16_t *)"print-debug-counter", &v36, (_BYTE **)&v34, &v35, &v30);
    llvm::dbgs(v29);
    __cxa_guard_release(&_MergedGlobals_48);
  }
  v11 = qword_1ECD32FD0;
  v12 = qword_1ECD32FD8;
  while (v11 != v12)
  {
    v13 = llvm::UniqueVector<std::string>::idFor((uint64_t)&qword_1ECD32FB8, v11);
    llvm::DebugCounter::getCounterInfo((llvm::DebugCounter *)&qword_1ECD32FA0, v13, &v30);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      v15 = v30.__r_.__value_.__r.__words[1];
    v16 = (llvm::raw_ostream *)llvm::outs(v14);
    v17 = *((_QWORD *)v16 + 4);
    if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 4)
    {
      *(_BYTE *)(v17 + 4) = 61;
      *(_DWORD *)v17 = 538976288;
      *((_QWORD *)v16 + 4) += 5;
    }
    else
    {
      v16 = llvm::raw_ostream::write(v16, "    =", 5uLL);
    }
    v18 = a2 - v15;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v30;
    else
      v19 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    v21 = llvm::raw_ostream::write(v16, (const char *)v19, size);
    v22 = (llvm::raw_ostream *)llvm::outs(v21);
    v23 = llvm::raw_ostream::indent(v22, v18 - 8);
    v24 = *((_QWORD *)v23 + 4);
    if ((unint64_t)(*((_QWORD *)v23 + 3) - v24) > 4)
    {
      *(_BYTE *)(v24 + 4) = 32;
      *(_DWORD *)v24 = 538979616;
      *((_QWORD *)v23 + 4) += 5;
    }
    else
    {
      v23 = llvm::raw_ostream::write(v23, " -   ", 5uLL);
    }
    if ((v32 & 0x80u) == 0)
      v25 = __p;
    else
      v25 = (void **)__p[0];
    if ((v32 & 0x80u) == 0)
      v26 = v32;
    else
      v26 = (size_t)__p[1];
    v27 = llvm::raw_ostream::write(v23, (const char *)v25, v26);
    v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    if ((unint64_t)v28 >= *((_QWORD *)v27 + 3))
    {
      llvm::raw_ostream::write(v27, 10);
      if ((char)v32 < 0)
LABEL_36:
        operator delete(__p[0]);
    }
    else
    {
      *((_QWORD *)v27 + 4) = v28 + 1;
      *v28 = 10;
      if ((char)v32 < 0)
        goto LABEL_36;
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v11 += 24;
  }
}

llvm::raw_ostream *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::setDefault(llvm::raw_ostream *result)
{
  uint64_t v1;
  uint64_t v2;
  llvm::raw_ostream *v3;

  *((_QWORD *)result + 22) = *((_QWORD *)result + 21);
  v1 = *((_QWORD *)result + 17);
  v2 = *((_QWORD *)result + 18);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      result = llvm::DebugCounter::push_back(*((llvm::raw_ostream **)v3 + 16), (void **)(v1 + 8));
      v1 += 40;
    }
    while (v1 != v2);
  }
  return result;
}

void llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(_QWORD *a1)
{
  _QWORD *v1;

  v1 = llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(a1);
  operator delete(v1);
}

llvm::raw_ostream *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 192), a1, a2);
}

_QWORD *std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E0E4FD10;
  return result;
}

void std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E0E4FD10;
}

uint64_t std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000018125E2EDLL)
    return a1 + 8;
  if (((v3 & 0x800000018125E2EDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000018125E2EDLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000018125E2EDLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::target_type()
{
}

_QWORD *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;

  *a1 = &unk_1E0E237F8;
  v2 = a1 + 25;
  v3 = (_QWORD *)a1[28];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[21];
  if (v5)
  {
    a1[22] = v5;
    operator delete(v5);
  }
  v6 = a1[17];
  if (v6)
  {
    v7 = a1[18];
    v8 = (void *)a1[17];
    if (v7 != v6)
    {
      v9 = a1[18];
      do
      {
        *(_QWORD *)(v9 - 40) = &off_1E0E23088;
        v9 -= 40;
        if (*(char *)(v9 + 31) < 0)
          operator delete(*(void **)(v7 - 32));
        v7 = v9;
      }
      while (v9 != v6);
      v8 = (void *)a1[17];
    }
    a1[18] = v6;
    operator delete(v8);
  }
  *a1 = &unk_1E0E23930;
  v10 = (void *)a1[12];
  if (v10 != (void *)a1[11])
    free(v10);
  v11 = (_QWORD *)a1[8];
  if (v11 != a1 + 10)
    free(v11);
  return a1;
}

double llvm::DebugCounter::getCounterInfo@<D0>(llvm::DebugCounter *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const std::string::value_type **v11;
  __int128 v12;
  int v13;
  int v14;
  __int128 v15;
  double result;
  std::string v17;

  v4 = *((_QWORD *)this + 6) + 24 * (a2 - 1);
  v5 = *((_DWORD *)this + 4);
  if (!v5)
    goto LABEL_12;
  v6 = *(_QWORD *)this;
  v7 = v5 - 1;
  v8 = (v5 - 1) & (37 * a2);
  v9 = *(_DWORD *)(*(_QWORD *)this + (v8 << 6));
  if (v9 != a2)
  {
    v13 = 1;
    while (v9 != -1)
    {
      v14 = v8 + v13++;
      v8 = v14 & v7;
      v9 = *(_DWORD *)(v6 + ((unint64_t)v8 << 6));
      if (v9 == a2)
        goto LABEL_3;
    }
LABEL_12:
    memset(&v17, 0, sizeof(v17));
    if ((*(char *)(v4 + 23) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_7;
  }
LABEL_3:
  v10 = v6 + (v8 << 6);
  v11 = (const std::string::value_type **)(v10 + 40);
  if ((*(char *)(v10 + 63) & 0x80000000) == 0)
  {
    v12 = *(_OWORD *)v11;
    v17.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 56);
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    if (*(char *)(v4 + 23) < 0)
      goto LABEL_7;
LABEL_13:
    v15 = *(_OWORD *)v4;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v15;
    goto LABEL_14;
  }
  std::string::__init_copy_ctor_external(&v17, *v11, *(_QWORD *)(v10 + 48));
  if ((*(char *)(v4 + 23) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_7:
  std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
LABEL_14:
  result = *(double *)&v17.__r_.__value_.__l.__data_;
  a3[1] = v17;
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _WORD *a3, _BYTE **a4, _WORD *a5, _OWORD *a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;
  const unsigned __int8 *v16;
  __int16 v17;
  _BYTE *v18;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E0E22F68;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = &unk_1E0E23520;
  *(_QWORD *)(a1 + 152) = off_1E0E23B68;
  *(_QWORD *)(a1 + 160) = off_1E0E4FAF8;
  *(_QWORD *)(a1 + 184) = a1 + 160;
  v16 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v16);
  v17 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v17;
  v18 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v18;
  *(_WORD *)(a1 + 10) = v17 & 0xFFF8 | *a5 & 7;
  *(_OWORD *)(a1 + 32) = *a6;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t llvm::UniqueVector<std::string>::idFor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v4 = *(char *)(a2 + 23);
  v5 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v6 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
  v7 = a1 + 8;
  do
  {
    v8 = *(char *)(v3 + 55);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(v3 + 55);
    else
      v9 = *(_QWORD *)(v3 + 40);
    if (v8 >= 0)
      v10 = (const void *)(v3 + 32);
    else
      v10 = *(const void **)(v3 + 32);
    if (v5 >= v9)
      v11 = v9;
    else
      v11 = v5;
    v12 = memcmp(v10, v6, v11);
    v13 = v9 < v5;
    if (v12)
      v13 = v12 < 0;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v3 + 8);
    else
      v15 = (uint64_t *)v3;
    if (v14)
      v7 = v3;
    v3 = *v15;
  }
  while (*v15);
  if (v7 == v2)
    return 0;
  v16 = *(char *)(v7 + 55);
  v17 = v16 >= 0 ? *(unsigned __int8 *)(v7 + 55) : *(_QWORD *)(v7 + 40);
  v18 = v16 >= 0 ? (const void *)(v7 + 32) : *(const void **)(v7 + 32);
  v19 = v17 >= v5 ? v5 : v17;
  v20 = memcmp(v6, v18, v19);
  v21 = v5 >= v17;
  if (v20)
    v21 = v20 >= 0;
  if (v21)
    return *(unsigned int *)(v7 + 56);
  else
    return 0;
}

int *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucket<unsigned int const&>(uint64_t a1, int *a2, int *a3)
{
  int v6;
  unsigned int v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  BOOL v15;
  int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::grow(a1, v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = (37 * *a3) & (v9 - 1);
    a2 = (int *)(*(_QWORD *)a1 + (v11 << 6));
    v12 = *a2;
    if (*a3 != *a2)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a2;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a2 = (int *)(*(_QWORD *)a1 + (v11 << 6));
        v12 = *a2;
        if (*a3 == *a2)
          goto LABEL_3;
      }
      if (v13)
        a2 = v13;
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -1)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  *(_OWORD *)(a2 + 6) = 0u;
  *(_OWORD *)(a2 + 2) = 0u;
  *((_QWORD *)a2 + 3) = -1;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 5) = 0;
  return a2;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  llvm *v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int *v21;
  int v22;
  int *v23;
  int v24;
  BOOL v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = llvm::allocate_buffer((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  v10 = result;
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      if (((v11 - 1) & 0x3FFFFFFFFFFFFFFLL) == 0)
        goto LABEL_10;
      v12 = ((v11 - 1) & 0x3FFFFFFFFFFFFFFLL) + 1;
      v10 = &result[16 * (v12 & 0x7FFFFFFFFFFFFFELL)];
      v13 = result + 16;
      v14 = v12 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 16) = -1;
        *v13 = -1;
        v13 += 32;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_10:
        v15 = &result[16 * v11];
        do
        {
          *v10 = -1;
          v10 += 16;
        }
        while (v10 != v15);
      }
    }
    if ((_DWORD)v3)
    {
      v16 = v4;
      do
      {
        v17 = *(_DWORD *)v16;
        if (*(_DWORD *)v16 <= 0xFFFFFFFD)
        {
          v18 = *(_DWORD *)(a1 + 16);
          if (v18)
          {
            v19 = v18 - 1;
            v20 = (v18 - 1) & (37 * v17);
            v21 = (int *)(*(_QWORD *)a1 + (v20 << 6));
            v22 = *v21;
            if (v17 != *v21)
            {
              v23 = 0;
              v24 = 1;
              while (v22 != -1)
              {
                if (v23)
                  v25 = 0;
                else
                  v25 = v22 == -2;
                if (v25)
                  v23 = v21;
                v26 = v20 + v24++;
                v20 = v26 & v19;
                v21 = (int *)(*(_QWORD *)a1 + (v20 << 6));
                v22 = *v21;
                if (v17 == *v21)
                  goto LABEL_28;
              }
              if (v23)
                v21 = v23;
            }
          }
          else
          {
            v21 = 0;
          }
LABEL_28:
          *v21 = v17;
          v27 = *(_OWORD *)((char *)v16 + 8);
          *(_OWORD *)((char *)v21 + 17) = *(_OWORD *)((char *)v16 + 17);
          *(_OWORD *)(v21 + 2) = v27;
          v28 = *(_OWORD *)((char *)v16 + 40);
          *((_QWORD *)v21 + 7) = *((_QWORD *)v16 + 7);
          *(_OWORD *)(v21 + 10) = v28;
          *((_QWORD *)v16 + 6) = 0;
          *((_QWORD *)v16 + 7) = 0;
          *((_QWORD *)v16 + 5) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (*((char *)v16 + 63) < 0)
            operator delete(*((void **)v16 + 5));
        }
        v16 = (llvm *)((char *)v16 + 64);
      }
      while (v16 != (llvm *)((char *)v4 + 64 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(v3 << 6));
  }
  *(_QWORD *)(a1 + 8) = 0;
  v29 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v29)
  {
    if (((v29 - 1) & 0x3FFFFFFFFFFFFFFLL) == 0)
      goto LABEL_39;
    v30 = ((v29 - 1) & 0x3FFFFFFFFFFFFFFLL) + 1;
    v10 = &result[16 * (v30 & 0x7FFFFFFFFFFFFFELL)];
    v31 = result + 16;
    v32 = v30 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v31 - 16) = -1;
      *v31 = -1;
      v31 += 32;
      v32 -= 2;
    }
    while (v32);
    if (v30 != (v30 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_39:
      v33 = &result[16 * v29];
      do
      {
        *v10 = -1;
        v10 += 16;
      }
      while (v10 != v33);
    }
  }
  return result;
}

void llvm::ELFAttributeParser::parseStringAttribute(_QWORD *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t ULEB128;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  const std::error_category *v16;
  int v17;
  const char *v18;
  char v19;
  std::error_code v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  char v24;
  char v25;
  _QWORD v26[4];
  __int16 v27;
  unint64_t v28;
  std::string v29;

  ULEB128 = llvm::DataExtractor::getULEB128(a1 + 16, a1 + 19, a1 + 20);
  v13 = ULEB128;
  v28 = ULEB128;
  if (ULEB128 >= a5)
  {
    llvm::ELFAttributeParser::printAttribute(a1, a3, ULEB128, (uint64_t)"", 0);
    v16 = std::generic_category();
    v17 = *a2;
    v18 = "unknown ";
    if (*a2)
    {
      v21[0] = "unknown ";
      v21[2] = a2;
      v22 = 771;
      v19 = 2;
    }
    else
    {
      v21[0] = "unknown ";
      v22 = 259;
      v19 = 3;
    }
    if (v17)
      v18 = (const char *)v21;
    v23[0] = v18;
    v23[2] = " value: ";
    v24 = v19;
    v25 = 3;
    v26[0] = v23;
    v26[2] = &v28;
    v27 = 3330;
    llvm::Twine::str((llvm::Twine *)v26, &v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20.__cat_ = (const std::error_category *)&v29;
    else
      v20.__cat_ = (const std::error_category *)v29.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v20.__val_ = v16;
    llvm::createStringError((llvm *)0x16, v20, a6);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 8 * ULEB128);
    if (v14)
      v15 = strlen(*(const char **)(a4 + 8 * ULEB128));
    else
      v15 = 0;
    llvm::ELFAttributeParser::printAttribute(a1, a3, v13, v14, v15);
    *a6 = 0;
  }
}

uint64_t *llvm::ELFAttributeParser::printAttribute(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v15 = a2 | (unint64_t)(a3 << 32);
  result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned int>>((uint64_t)(a1 + 3), (unsigned int *)&v15, &v15);
  if (a1[13])
  {
    v11 = llvm::ELFAttrs::attrTypeAsString(a2, a1[14], a1[15], 0);
    v13 = v12;
    v14 = a1[13];
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v14 + 248))(v14, "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 64))(a1[13], "Tag", 3, a2);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 64))(a1[13], "Value", 5, a3);
    if (v13)
      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)a1[13] + 232))(a1[13], "TagName", 7, v11, v13);
    if (a5)
      (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 232))(a1[13], "Description", 11, a4, a5);
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 256))(v14);
  }
  return result;
}

uint64_t *llvm::ELFAttributeParser::integerAttribute@<X0>(llvm::ELFAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ULEB128;
  uint64_t *result;
  uint64_t v11;
  _QWORD v12[2];

  v6 = llvm::ELFAttrs::attrTypeAsString(a2, *((_QWORD *)this + 14), *((_QWORD *)this + 15), 0);
  v8 = v7;
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)this + 16, (_QWORD *)this + 19, (_QWORD *)this + 20);
  v12[0] = a2;
  v12[1] = ULEB128;
  result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned long long>>((uint64_t)this + 24, (unsigned int *)v12, (uint64_t)v12);
  v11 = *((_QWORD *)this + 13);
  if (v11)
  {
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v11 + 248))(*((_QWORD *)this + 13), "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 64))(*((_QWORD *)this + 13), "Tag", 3, a2);
    if (v8)
      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13), "TagName", 7, v6, v8);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 96))(*((_QWORD *)this + 13), "Value", 5, ULEB128);
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 256))(v11);
  }
  *a3 = 0;
  return result;
}

char *llvm::ELFAttributeParser::stringAttribute@<X0>(llvm::ELFAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *CStrRef;
  uint64_t v10;
  uint64_t v11;
  char *result;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;

  v6 = llvm::ELFAttrs::attrTypeAsString(a2, *((_QWORD *)this + 14), *((_QWORD *)this + 15), 0);
  v8 = v7;
  CStrRef = llvm::DataExtractor::getCStrRef((uint64_t *)this + 16, (unint64_t *)this + 19, (_QWORD *)this + 20);
  v11 = v10;
  *(_QWORD *)&v15 = CStrRef;
  *((_QWORD *)&v15 + 1) = v10;
  v14 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>((uint64_t)this + 64, &v14, &v14, &v15);
  v13 = *((_QWORD *)this + 13);
  if (v13)
  {
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v13 + 248))(*((_QWORD *)this + 13), "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 64))(*((_QWORD *)this + 13), "Tag", 3, a2);
    if (v8)
      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13), "TagName", 7, v6, v8);
    (*(void (**)(_QWORD, const char *, uint64_t, void *, uint64_t))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13), "Value", 5, CStrRef, v11);
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 256))(v13);
  }
  *a3 = 0;
  return result;
}

void llvm::ELFAttributeParser::parseAttributeList(llvm::ELFAttributeParser *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t ULEB128;
  const std::error_category *v11;
  std::error_code v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  std::string v22;

  v5 = (unint64_t *)((char *)this + 152);
  v4 = *((_QWORD *)this + 19);
  v6 = v4 + a2;
  v21 = v4;
  if (v4 >= v6)
  {
LABEL_11:
    *a3 = 0;
  }
  else
  {
    v8 = (uint64_t *)((char *)this + 128);
    v9 = (_QWORD *)((char *)this + 160);
    while (1)
    {
      ULEB128 = llvm::DataExtractor::getULEB128(v8, v5, v9);
      v20 = ULEB128;
      v19 = 0;
      (**(void (***)(llvm::ELFAttributeParser *, unint64_t, char *))this)(this, ULEB128, &v19);
      if (*a3)
        break;
      if (!v19)
      {
        if (ULEB128 <= 0x1F)
        {
          v11 = std::generic_category();
          v13[0] = "invalid tag 0x";
          v13[2] = &v20;
          v14 = 3843;
          v15[0] = v13;
          v15[2] = " at offset 0x";
          v16 = 770;
          v17[0] = v15;
          v17[2] = &v21;
          v18 = 3842;
          llvm::Twine::str((llvm::Twine *)v17, &v22);
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12.__cat_ = (const std::error_category *)&v22;
          else
            v12.__cat_ = (const std::error_category *)v22.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v12.__val_ = v11;
          llvm::createStringError((llvm *)0x16, v12, a3);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
          return;
        }
        if ((ULEB128 & 1) != 0)
        {
          llvm::ELFAttributeParser::stringAttribute(this, ULEB128, a3);
          if (*a3)
            return;
        }
        else
        {
          llvm::ELFAttributeParser::integerAttribute(this, ULEB128, a3);
          if (*a3)
            return;
        }
      }
      v21 = *v5;
      if (v21 >= v6)
        goto LABEL_11;
    }
  }
}

void llvm::ELFAttributeParser::parseSubsection(llvm::ELFAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  void *CStrRef;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  _QWORD *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int U8;
  uint64_t U32;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  std::string::size_type v30;
  uint64_t ULEB128;
  char v32;
  std::string::size_type size;
  uint64_t v34;
  const std::error_category *v35;
  std::error_code v36;
  BOOL v37;
  void *v38;
  const std::error_category *v39;
  std::error_code v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  unint64_t v46;
  __int16 v47;
  _QWORD v48[2];
  const char *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  std::string v55;
  std::string v56;
  _QWORD v57[3];

  v57[1] = *MEMORY[0x1E0C80C00];
  v6 = (unint64_t *)((char *)this + 152);
  v5 = *((_QWORD *)this + 19);
  v7 = (uint64_t *)((char *)this + 128);
  v8 = (_QWORD *)((char *)this + 160);
  CStrRef = llvm::DataExtractor::getCStrRef((uint64_t *)this + 16, (unint64_t *)this + 19, (_QWORD *)this + 20);
  v54[0] = CStrRef;
  v54[1] = v9;
  v11 = *(v6 - 6);
  if (v11)
  {
    v12 = v9;
    (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)v11 + 64))(v11, "SectionLength", 13, a2);
    (*(void (**)(_QWORD, const char *, uint64_t, void *, uint64_t))(**((_QWORD **)this + 13) + 232))(*((_QWORD *)this + 13), "Vendor", 6, CStrRef, v12);
  }
  llvm::StringRef::lower(v54, (uint64_t)v51);
  v13 = SHIBYTE(v52);
  v14 = (void *)v51[0];
  if (SHIBYTE(v52) >= 0)
    v15 = v51;
  else
    v15 = (_QWORD *)v51[0];
  if (SHIBYTE(v52) >= 0)
    v16 = HIBYTE(v52);
  else
    v16 = v51[1];
  if (v16 == *((_QWORD *)this + 2))
  {
    if (v16)
    {
      v17 = memcmp(v15, *((const void **)this + 1), v16) != 0;
      v18 = v5 + a2;
      if (v13 < 0)
      {
LABEL_19:
        operator delete(v14);
        v19 = v18 - 4;
        if (!v17)
          goto LABEL_20;
        goto LABEL_15;
      }
    }
    else
    {
      v17 = 0;
      v18 = v5 + a2;
      if (SHIBYTE(v52) < 0)
        goto LABEL_19;
    }
  }
  else
  {
    v17 = 1;
    v18 = v5 + a2;
    if (SHIBYTE(v52) < 0)
      goto LABEL_19;
  }
  v19 = v18 - 4;
  if (!v17)
  {
LABEL_20:
    v41 = v19;
    while (1)
    {
      if (*v6 >= v19)
        goto LABEL_16;
      U8 = llvm::DataExtractor::getU8(v7, v6, v8);
      U32 = llvm::DataExtractor::getU32((uint64_t)v7, v6, v8);
      if (*v8)
      {
        *a3 = *v8;
        *v8 = 0;
        return;
      }
      v22 = U32;
      v23 = *((_QWORD *)this + 13);
      if (v23)
      {
        if (U8 - 1 > 2)
          (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v23 + 336))(v23, "Tag", 3, U8);
        else
          (*(void (**)(uint64_t, const char *, uint64_t, _QWORD, char *, _QWORD))(*(_QWORD *)v23 + 344))(v23, "Tag", 3, *(&off_1E0E55E50)[(char)(U8 - 1)], (&off_1E0E55E50)[(char)(U8 - 1)][1], U8);
        (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 64))(*((_QWORD *)this + 13), "Size", 4, v22);
      }
      if (v22 <= 4)
      {
        v39 = std::generic_category();
        v45[0] = "invalid attribute size ";
        v46 = v22;
        v47 = 2307;
        v48[0] = v45;
        v49 = " at offset 0x";
        v50 = 770;
        v55.__r_.__value_.__r.__words[0] = *v6 - 5;
        v51[0] = v48;
        v52 = &v55;
        v53 = 3842;
        llvm::Twine::str((llvm::Twine *)v51, &v56);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40.__cat_ = (const std::error_category *)&v56;
        else
          v40.__cat_ = (const std::error_category *)v56.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v40.__val_ = v39;
        llvm::createStringError((llvm *)0x16, v40, a3);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        return;
      }
      v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
      *(_OWORD *)&v56.__r_.__value_.__r.__words[1] = xmmword_1812349A0;
      switch(U8)
      {
        case 1u:
          v26 = 0;
          v27 = 0;
          v28 = 14;
          v29 = "FileAttributes";
          v34 = *((_QWORD *)this + 13);
          if (v34)
            goto LABEL_55;
          break;
        case 3u:
          while (1)
          {
            ULEB128 = llvm::DataExtractor::getULEB128(v7, v6, v8);
            if (*v8)
              break;
            v32 = ULEB128;
            v26 = 7;
            v27 = "Symbols";
            v28 = 16;
            v29 = "SymbolAttributes";
            if (!ULEB128)
              goto LABEL_54;
            size = v56.__r_.__value_.__l.__size_;
            if (v56.__r_.__value_.__l.__size_ + 1 > v56.__r_.__value_.__r.__words[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v56, v57, v56.__r_.__value_.__l.__size_ + 1, 1);
              size = v56.__r_.__value_.__l.__size_;
            }
            *(_BYTE *)(v56.__r_.__value_.__r.__words[0] + size) = v32;
            ++v56.__r_.__value_.__l.__size_;
          }
          v26 = 7;
          v27 = "Symbols";
          v28 = 16;
          v29 = "SymbolAttributes";
          v34 = *((_QWORD *)this + 13);
          if (v34)
          {
LABEL_55:
            (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v34 + 248))(v34, v29, v28);
            if (v56.__r_.__value_.__l.__size_)
              (*(void (**)(_QWORD, const char *, uint64_t, std::string::size_type))(**((_QWORD **)this + 13)
                                                                                            + 176))(*((_QWORD *)this + 13), v27, v26, v56.__r_.__value_.__r.__words[0]);
            llvm::ELFAttributeParser::parseAttributeList(this, v22 - 5, a3);
            v37 = *a3 != 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 256))(v34);
            v19 = v41;
            v38 = (void *)v56.__r_.__value_.__r.__words[0];
            if (v56.__r_.__value_.__l.__data_ == (std::string::pointer)v57)
              goto LABEL_21;
            goto LABEL_61;
          }
          break;
        case 2u:
          v24 = llvm::DataExtractor::getULEB128(v7, v6, v8);
          if (*v8)
          {
LABEL_53:
            v26 = 8;
            v27 = "Sections";
            v28 = 17;
            v29 = "SectionAttributes";
          }
          else
          {
            while (1)
            {
              v25 = v24;
              v26 = 8;
              v27 = "Sections";
              v28 = 17;
              v29 = "SectionAttributes";
              if (!v24)
                break;
              v30 = v56.__r_.__value_.__l.__size_;
              if (v56.__r_.__value_.__l.__size_ + 1 > v56.__r_.__value_.__r.__words[2])
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v56, v57, v56.__r_.__value_.__l.__size_ + 1, 1);
                v30 = v56.__r_.__value_.__l.__size_;
              }
              *(_BYTE *)(v56.__r_.__value_.__r.__words[0] + v30) = v25;
              ++v56.__r_.__value_.__l.__size_;
              v24 = llvm::DataExtractor::getULEB128(v7, v6, v8);
              if (*v8)
                goto LABEL_53;
            }
          }
LABEL_54:
          v34 = *((_QWORD *)this + 13);
          if (v34)
            goto LABEL_55;
          break;
        default:
          v35 = std::generic_category();
          v44 = U8;
          v45[0] = "unrecognized tag 0x";
          v46 = (unint64_t)&v44;
          v47 = 3843;
          v48[0] = v45;
          v49 = " at offset 0x";
          v50 = 770;
          v43 = *v6 - 5;
          v51[0] = v48;
          v52 = (std::string *)&v43;
          v53 = 3842;
          llvm::Twine::str((llvm::Twine *)v51, &v55);
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v36.__cat_ = (const std::error_category *)&v55;
          else
            v36.__cat_ = (const std::error_category *)v55.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v36.__val_ = v35;
          llvm::createStringError((llvm *)0x16, v36, a3);
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v55.__r_.__value_.__l.__data_);
          v37 = 1;
          v38 = (void *)v56.__r_.__value_.__r.__words[0];
          if (v56.__r_.__value_.__l.__data_ == (std::string::pointer)v57)
            goto LABEL_21;
LABEL_61:
          free(v38);
          goto LABEL_21;
      }
      llvm::ELFAttributeParser::parseAttributeList(this, v22 - 5, a3);
      v37 = *a3 != 0;
      v19 = v41;
      v38 = (void *)v56.__r_.__value_.__r.__words[0];
      if (v56.__r_.__value_.__l.__data_ != (std::string::pointer)v57)
        goto LABEL_61;
LABEL_21:
      if (v37)
        return;
    }
  }
LABEL_15:
  *v6 = v19;
LABEL_16:
  *a3 = 0;
}

uint64_t llvm::ELFAttributeParser::parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, std::string::size_type *a5@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  std::string::size_type *v10;
  unsigned int U8;
  std::string::size_type v12;
  unsigned int v13;
  const std::error_category *v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  std::string::size_type v19;
  unint64_t v20;
  uint64_t U32;
  uint64_t v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _QWORD *v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  std::string::size_type v28;
  _DWORD *v29;
  int v30;
  BOOL v31;
  int v32;
  llvm::raw_ostream *v33;
  _WORD *v34;
  std::string *p_dst;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::string::size_type v39;
  std::error_code v40;
  void *v41;
  const std::error_category *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  std::string *p_p;
  std::error_code v52;
  std::string::size_type v53;
  uint64_t result;
  _QWORD v55[2];
  unint64_t v56;
  int v57;
  __int16 v58;
  __int128 v59;
  void *v60[2];
  std::string::size_type v61;
  __int16 v62;
  std::string __p;
  __int16 v64;
  std::string __dst;
  uint64_t v66[2];
  __int128 v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 136) = a3;
  v8 = a1 + 128;
  *(_WORD *)(a1 + 144) = a4 == 1;
  v9 = (_QWORD *)(a1 + 152);
  v10 = (std::string::size_type *)(a1 + 160);
  U8 = llvm::DataExtractor::getU8((_QWORD *)(a1 + 128), (unint64_t *)(a1 + 152), (_QWORD *)(a1 + 160));
  if (U8 != 65)
  {
    v13 = U8;
    v14 = std::generic_category();
    if (v13)
    {
      v15 = v13;
      v16 = 16;
      do
      {
        *((_BYTE *)v66 + v16--) = llvm::hexdigit(unsigned int,BOOL)::LUT[v15 & 0xF];
        v17 = v15 > 0xF;
        v15 >>= 4;
      }
      while (v17);
      v18 = v16 + 1;
      v19 = 16 - v16;
      if ((unint64_t)(16 - v16) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_66;
    }
    else
    {
      LOBYTE(v67) = 48;
      v18 = 16;
      v19 = 1;
    }
    if (v19 > 0x16)
    {
      v36 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v36 = v19 | 7;
      v37 = v36 + 1;
      p_dst = (std::string *)operator new(v36 + 1);
      __dst.__r_.__value_.__l.__size_ = v19;
      __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (v18 == 17)
      {
LABEL_39:
        p_dst->__r_.__value_.__s.__data_[0] = 0;
        v38 = std::string::insert(&__dst, 0, "unrecognized format-version: 0x");
        v39 = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)v60 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v61 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        v68 = 260;
        v66[0] = (uint64_t)v60;
        llvm::Twine::str((llvm::Twine *)v66, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40.__cat_ = (const std::error_category *)&__p;
        else
          v40.__cat_ = (const std::error_category *)__p.__r_.__value_.__r.__words[0];
        *(_QWORD *)&v40.__val_ = v14;
        llvm::createStringError((llvm *)0x16, v40, a5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v61) & 0x80000000) == 0)
          {
LABEL_44:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_79;
LABEL_48:
            v41 = (void *)__dst.__r_.__value_.__r.__words[0];
            goto LABEL_49;
          }
        }
        else if ((SHIBYTE(v61) & 0x80000000) == 0)
        {
          goto LABEL_44;
        }
        operator delete(v60[0]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_79;
        goto LABEL_48;
      }
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
      p_dst = &__dst;
      if (v18 == 17)
        goto LABEL_39;
    }
    memcpy(p_dst, (char *)v66 + v18, v19);
    p_dst = (std::string *)((char *)p_dst + v19);
    goto LABEL_39;
  }
  if (*(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 152))
  {
    LODWORD(v20) = 0;
    while (1)
    {
      U32 = llvm::DataExtractor::getU32(v8, (unint64_t *)(v8 + 24), (_QWORD *)(v8 + 32));
      v12 = *v10;
      if (*v10)
        goto LABEL_4;
      v22 = U32;
      v23 = *(_QWORD *)(a1 + 104);
      if (v23)
      {
        v24 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 288))(v23);
        v25 = (_QWORD *)*((_QWORD *)v24 + 4);
        if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 7uLL)
        {
          *v25 = 0x206E6F6974636553;
          *((_QWORD *)v24 + 4) += 8;
        }
        else
        {
          v24 = llvm::raw_ostream::write(v24, "Section ", 8uLL);
        }
        v20 = (v20 + 1);
        v26 = llvm::raw_ostream::operator<<(v24, v20);
        v27 = *((_QWORD *)v26 + 4);
        if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 2)
        {
          *(_BYTE *)(v27 + 2) = 10;
          *(_WORD *)v27 = 31520;
          *((_QWORD *)v26 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v26, " {\n", 3uLL);
        }
        ++*(_DWORD *)(*(_QWORD *)(a1 + 104) + 16);
      }
      if (v22 <= 3)
        break;
      v28 = v22;
      if ((unint64_t)v22 + *v9 - 4 > a3)
        goto LABEL_51;
      llvm::ELFAttributeParser::parseSubsection((llvm::ELFAttributeParser *)a1, v22, a5);
      if (*a5)
        goto LABEL_79;
      v29 = *(_DWORD **)(a1 + 104);
      if (v29)
      {
        v30 = v29[4];
        v31 = __OFSUB__(v30, 1);
        v32 = v30 - 1;
        if ((v32 < 0) ^ v31 | (v32 == 0))
          v32 = 0;
        v29[4] = v32;
        v33 = (llvm::raw_ostream *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 288))(v29);
        v34 = (_WORD *)*((_QWORD *)v33 + 4);
        if (*((_QWORD *)v33 + 3) - (_QWORD)v34 > 1uLL)
        {
          *v34 = 2685;
          *((_QWORD *)v33 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v33, "}\n", 2uLL);
        }
      }
      if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 152))
        goto LABEL_3;
    }
    v28 = v22;
LABEL_51:
    v42 = std::generic_category();
    v60[0] = "invalid section length ";
    v61 = v28;
    v62 = 2307;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)" at offset 0x";
    v64 = 770;
    v43 = *v9 - 4;
    if (*v9 == 4)
    {
      LOBYTE(v67) = 48;
      v45 = 16;
      v46 = 1;
      goto LABEL_55;
    }
    v44 = 16;
    do
    {
      *((_BYTE *)v66 + v44--) = llvm::hexdigit(unsigned int,BOOL)::LUT[v43 & 0xF];
      v17 = v43 > 0xF;
      v43 >>= 4;
    }
    while (v17);
    v45 = v44 + 1;
    v46 = 16 - v44;
    if ((unint64_t)(16 - v44) <= 0x7FFFFFFFFFFFFFF7)
    {
LABEL_55:
      if (v46 > 0x16)
      {
        v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v46 | 7) != 0x17)
          v48 = v46 | 7;
        v49 = v48 + 1;
        v47 = operator new(v48 + 1);
        v55[1] = v46;
        v56 = v49 | 0x8000000000000000;
        v55[0] = v47;
        if (v45 == 17)
          goto LABEL_62;
      }
      else
      {
        HIBYTE(v56) = v46;
        v47 = v55;
        if (v45 == 17)
          goto LABEL_62;
      }
      memcpy(v47, (char *)v66 + v45, v46);
      v47 += v46;
LABEL_62:
      *v47 = 0;
      v50 = v64;
      if (v64 == 1)
      {
        v66[0] = (uint64_t)v55;
        v67 = v59;
        v68 = 260;
        v69 = v57;
        v70 = v58;
      }
      else if ((_BYTE)v64)
      {
        if (HIBYTE(v64) != 1)
          v50 = 2;
        p_p = &__p;
        if (HIBYTE(v64) == 1)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v66[0] = (uint64_t)p_p;
        v66[1] = __p.__r_.__value_.__l.__size_;
        *(_QWORD *)&v67 = v55;
        LOBYTE(v68) = v50;
        HIBYTE(v68) = 4;
      }
      else
      {
        v68 = 256;
      }
      llvm::Twine::str((llvm::Twine *)v66, &__dst);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52.__cat_ = (const std::error_category *)&__dst;
      else
        v52.__cat_ = (const std::error_category *)__dst.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v52.__val_ = v42;
      llvm::createStringError((llvm *)0x16, v52, a5);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v56) & 0x80000000) == 0)
        goto LABEL_79;
      v41 = (void *)v55[0];
LABEL_49:
      operator delete(v41);
      goto LABEL_79;
    }
LABEL_66:
    abort();
  }
LABEL_3:
  v12 = *v10;
LABEL_4:
  *a5 = v12;
  *v10 = 0;
LABEL_79:
  v53 = *v10;
  *v10 = 0;
  __p.__r_.__value_.__r.__words[0] = v53;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&__p, v66);
  result = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
    return (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned long long>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  size_t v24;
  uint8x8_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v15 = *(_QWORD *)(a3 + 8);
  *((_DWORD *)v14 + 4) = *(_DWORD *)a3;
  *((_DWORD *)v14 + 5) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 >= 3)
      {
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] <= 1uLL)
        {
          v26 = 1 << -(char)__clz(v24 - 1);
          if (v24 >= 2)
            v24 = v26;
          if (prime <= v24)
            prime = v24;
          if (prime >= v7)
            goto LABEL_50;
LABEL_37:
          std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(a1, prime);
          goto LABEL_50;
        }
      }
      v27 = std::__next_prime(v24);
      if (prime <= v27)
        prime = v27;
      if (prime < v7)
        goto LABEL_37;
    }
LABEL_50:
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v19)
        goto LABEL_26;
    }
    goto LABEL_52;
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
LABEL_26:
    *v14 = *v19;
LABEL_63:
    *v19 = v14;
    goto LABEL_64;
  }
LABEL_52:
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v28 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned int>>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  size_t v23;
  uint8x8_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 >= 3)
      {
        v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] <= 1uLL)
        {
          v25 = 1 << -(char)__clz(v23 - 1);
          if (v23 >= 2)
            v23 = v25;
          if (prime <= v23)
            prime = v23;
          if (prime >= v7)
            goto LABEL_50;
LABEL_37:
          std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(a1, prime);
          goto LABEL_50;
        }
      }
      v26 = std::__next_prime(v23);
      if (prime <= v26)
        prime = v26;
      if (prime < v7)
        goto LABEL_37;
    }
LABEL_50:
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v18)
        goto LABEL_26;
    }
    goto LABEL_52;
  }
  v17 = *(_QWORD *)a1;
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v18)
  {
LABEL_26:
    *v14 = *v18;
LABEL_63:
    *v18 = v14;
    goto LABEL_64;
  }
LABEL_52:
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

const char *llvm::ELFAttrs::attrTypeAsString(int a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  const char *result;
  uint64_t i;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a3)
  {
    v5 = 24 * a3;
    result = "";
    for (i = a2; *(_DWORD *)i != a1; i += 24)
    {
      v5 -= 24;
      if (!v5)
        return result;
    }
  }
  else
  {
    i = a2;
  }
  if (i == a2 + 24 * a3)
    return "";
  v8 = *(_QWORD *)(i + 8);
  v9 = *(_QWORD *)(i + 16);
  v10 = 4;
  if (v9 < 4)
    v10 = v9;
  if ((a4 & 1) != 0)
    return (const char *)v8;
  else
    return (const char *)(v8 + v10);
}

_QWORD *llvm::logAllUnhandledErrors(_QWORD *result, llvm::raw_ostream *a2, llvm::Twine *a3)
{
  _QWORD **v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (*result)
  {
    v4 = (_QWORD **)result;
    result = llvm::Twine::print(a3, a2);
    v5 = *v4;
    *v4 = 0;
    if (v5)
    {
      if ((*(unsigned int (**)(_QWORD *, void *))(*v5 + 48))(v5, &llvm::ErrorList::ID))
      {
        v6 = (uint64_t **)v5[1];
        v7 = (uint64_t **)v5[2];
        if (v6 != v7)
        {
          v8 = 0;
          do
          {
            v13 = v8;
            v9 = *v6;
            *v6 = 0;
            if ((*(unsigned int (**)(uint64_t *, void *))(*v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
            {
              (*(void (**)(uint64_t *, llvm::raw_ostream *))(*v9 + 16))(v9, a2);
              v10 = (_BYTE *)*((_QWORD *)a2 + 4);
              if (*((_BYTE **)a2 + 3) == v10)
              {
                llvm::raw_ostream::write(a2, "\n", 1uLL);
              }
              else
              {
                *v10 = 10;
                ++*((_QWORD *)a2 + 4);
              }
              v12 = 0;
              (*(void (**)(uint64_t *))(*v9 + 8))(v9);
            }
            else
            {
              v12 = v9;
            }
            llvm::ErrorList::join(&v13, &v12, &v14);
            v8 = v14;
            v14 = 0;
            if (v12)
              (*(void (**)(uint64_t *))(*v12 + 8))(v12);
            if (v13)
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            ++v6;
          }
          while (v6 != v7);
        }
      }
      else
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, void *))(*v5 + 48))(v5, &llvm::ErrorInfoBase::ID);
        if (!(_DWORD)result)
          return result;
        (*(void (**)(_QWORD *, llvm::raw_ostream *))(*v5 + 16))(v5, a2);
        v11 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v11)
        {
          llvm::raw_ostream::write(a2, "\n", 1uLL);
        }
        else
        {
          *v11 = 10;
          ++*((_QWORD *)a2 + 4);
        }
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
    }
  }
  return result;
}

void llvm::toString(_QWORD **a1@<X0>, std::string *a2@<X8>, int64x2_t a3@<Q3>, int8x16_t a4@<Q5>)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t **v7;
  void *v8;
  uint64_t *v9;
  char *Address;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  std::string::size_type v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  unsigned __int8 *v26;
  int8x16_t v27;
  const double *v28;
  const double *v29;
  unsigned __int128 v30;
  unsigned __int128 v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint64_t v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  char *v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  void *v49;
  void *__p[2];
  char v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[7];

  v54[6] = *MEMORY[0x1E0C80C00];
  v52 = v54;
  v53 = 0x200000000;
  v5 = *a1;
  *a1 = 0;
  if (v5)
  {
    if ((*(unsigned int (**)(_QWORD *, void *))(*v5 + 48))(v5, &llvm::ErrorList::ID))
    {
      v6 = (uint64_t **)v5[1];
      v7 = (uint64_t **)v5[2];
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v49 = v8;
          v9 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(uint64_t *, void *))(*v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
          {
            (*(void (**)(void **__return_ptr, uint64_t *))(*v9 + 24))(__p, v9);
            Address = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v52, (unint64_t)__p, 1);
            v11 = (char *)v52 + 24 * v53;
            v12 = *(_OWORD *)Address;
            *((_QWORD *)v11 + 2) = *((_QWORD *)Address + 2);
            *(_OWORD *)v11 = v12;
            *((_QWORD *)Address + 1) = 0;
            *((_QWORD *)Address + 2) = 0;
            *(_QWORD *)Address = 0;
            LODWORD(v53) = v53 + 1;
            if (v51 < 0)
              operator delete(__p[0]);
            v48 = 0;
            (*(void (**)(uint64_t *))(*v9 + 8))(v9);
          }
          else
          {
            v48 = v9;
          }
          llvm::ErrorList::join((uint64_t *)&v49, &v48, __p);
          v8 = __p[0];
          __p[0] = 0;
          if (v48)
            (*(void (**)(uint64_t *))(*v48 + 8))(v48);
          if (v49)
            (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
          ++v6;
        }
        while (v6 != v7);
      }
    }
    else
    {
      if (!(*(unsigned int (**)(_QWORD *, void *))(*v5 + 48))(v5, &llvm::ErrorInfoBase::ID))
        goto LABEL_19;
      (*(void (**)(void **__return_ptr, _QWORD *))(*v5 + 24))(__p, v5);
      v13 = llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v52, (unint64_t)__p, 1);
      v14 = (char *)v52 + 24 * v53;
      v15 = *(_OWORD *)v13;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v14 = v15;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)v13 = 0;
      LODWORD(v53) = v53 + 1;
      if (v51 < 0)
        operator delete(__p[0]);
    }
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  }
LABEL_19:
  v16 = (char *)v52;
  v17 = v53;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if ((_DWORD)v17)
  {
    v18 = v17 - 1;
    v19 = 24 * v17 - 24;
    v20 = v16;
    if (v19 >= 0x60)
    {
      v21 = v19 / 0x18 + 1;
      v22 = v21 & 3;
      if ((v21 & 3) == 0)
        v22 = 4;
      v23 = v21 - v22;
      v20 = &v16[24 * v23];
      v24 = 0uLL;
      v25 = (int64x2_t)(unint64_t)(v17 - 1);
      v26 = (unsigned __int8 *)(v16 + 47);
      v27.i64[0] = 255;
      v27.i64[1] = 255;
      do
      {
        a3.i8[0] = *(v26 - 24);
        a3.i8[4] = *v26;
        a4.i8[0] = v26[24];
        a4.i8[4] = v26[48];
        v28 = (const double *)(v26 - 39);
        v29 = (const double *)(v26 + 9);
        v30 = (unsigned __int128)vld3q_f64(v28);
        v31 = (unsigned __int128)vld3q_f64(v29);
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a3.i8, 0x18uLL), 0x18uLL));
        v33.i64[0] = v32.i32[0];
        v33.i64[1] = v32.i32[1];
        v34 = v33;
        v35 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a4.i8, 0x18uLL), 0x18uLL));
        v33.i64[0] = v35.i32[0];
        v33.i64[1] = v35.i32[1];
        v36 = v33;
        v33.i64[0] = a3.u32[0];
        v33.i64[1] = a3.u32[1];
        v37 = vbicq_s8(v33, v34);
        v33.i64[0] = a4.u32[0];
        v33.i64[1] = a4.u32[1];
        a3 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v30, v34), vandq_s8(v37, v27));
        a4 = vandq_s8((int8x16_t)v31, v36);
        v25 = vaddq_s64(a3, v25);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a4, vandq_s8(vbicq_s8(v33, v36), v27)), v24);
        v26 += 96;
        v23 -= 4;
      }
      while (v23);
      v18 = vaddvq_s64(vaddq_s64(v24, v25));
    }
    do
    {
      v38 = v20[23];
      if ((v38 & 0x80u) != 0)
        v38 = *((_QWORD *)v20 + 1);
      v18 += v38;
      v20 += 24;
    }
    while (v20 != &v16[24 * v17]);
    std::string::reserve(a2, v18);
    v39 = v16[23];
    if (v39 >= 0)
      v40 = v16;
    else
      v40 = *(const std::string::value_type **)v16;
    if (v39 >= 0)
      v41 = v16[23];
    else
      v41 = *((_QWORD *)v16 + 1);
    std::string::append(a2, v40, v41);
    if ((_DWORD)v17 != 1)
    {
      v42 = v16 + 24;
      do
      {
        std::string::append(a2, "\n", 1uLL);
        v43 = v42[23];
        if (v43 >= 0)
          v44 = v42;
        else
          v44 = *(const std::string::value_type **)v42;
        if (v43 >= 0)
          v45 = v42[23];
        else
          v45 = *((_QWORD *)v42 + 1);
        std::string::append(a2, v44, v45);
        v42 += 24;
        v19 -= 24;
      }
      while (v19);
    }
  }
  v46 = (char *)v52;
  if ((_DWORD)v53)
  {
    v47 = 24 * v53;
    do
    {
      if (v46[v47 - 1] < 0)
        operator delete(*(void **)&v46[v47 - 24]);
      v47 -= 24;
    }
    while (v47);
    v46 = (char *)v52;
  }
  if (v46 != (char *)v54)
    free(v46);
}

uint64_t llvm::ErrorList::convertToErrorCode(llvm::ErrorList *this)
{
  unsigned __int8 v1;

    return 1;
  return 1;
}

uint64_t llvm::inconvertibleErrorCode(llvm *this)
{
  unsigned __int8 v1;

    return 3;
  return 3;
}

uint64_t llvm::FileError::convertToErrorCode(llvm::FileError *this)
{
  uint64_t result;
  _UNKNOWN **v2;
  unsigned __int8 v3;
  unsigned __int8 v5;
  int v6;
  _UNKNOWN **v7;
  uint64_t v8;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  if ((v3 & 1) == 0)
  {
    v7 = v2;
    v8 = result;
    v2 = v7;
    result = v8;
    if (v6)
    {
      v2 = v7;
      result = v8;
    }
  }
  if (v2 == &getErrorErrorCat(void)::ErrorErrorCat && result == 3)
  {
    {
      return 2;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

_QWORD *llvm::errorCodeToError@<X0>(llvm *this@<X0>, std::error_code a2@<0:X1, 8:X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;

  if ((_DWORD)this)
  {
    v5 = *(_QWORD *)&a2.__val_;
    result = operator new(0x18uLL);
    *result = off_1E0E257B0;
    result[1] = this;
    result[2] = v5;
    *a3 = result;
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::errorToErrorCode(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t **v3;
  uint64_t **v4;
  std::string::size_type v5;
  uint64_t *v6;
  const std::error_category *v7;
  const std::error_category *v8;
  unsigned __int8 v9;
  std::string v12;
  _QWORD v13[4];
  __int16 v14;
  std::error_code v15;
  uint64_t *v16;

  v15.__val_ = 0;
  v15.__cat_ = std::system_category();
  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if ((*(unsigned int (**)(_QWORD *, void *))(*v2 + 48))(v2, &llvm::ErrorList::ID))
    {
      v3 = (uint64_t **)v2[1];
      v4 = (uint64_t **)v2[2];
      if (v3 != v4)
      {
        v5 = 0;
        do
        {
          v12.__r_.__value_.__r.__words[0] = v5;
          v6 = *v3;
          *v3 = 0;
          if ((*(unsigned int (**)(uint64_t *, void *))(*v6 + 48))(v6, &llvm::ErrorInfoBase::ID))
          {
            *(_QWORD *)&v15.__val_ = (*(uint64_t (**)(uint64_t *))(*v6 + 32))(v6);
            v15.__cat_ = v7;
            (*(void (**)(uint64_t *))(*v6 + 8))(v6);
            v6 = 0;
          }
          v16 = v6;
          llvm::ErrorList::join((uint64_t *)&v12, &v16, v13);
          v5 = v13[0];
          v13[0] = 0;
          if (v16)
            (*(void (**)(uint64_t *))(*v16 + 8))(v16);
          if (v12.__r_.__value_.__r.__words[0])
            (*(void (**)(std::string::size_type))(*(_QWORD *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
          ++v3;
        }
        while (v3 != v4);
      }
      goto LABEL_14;
    }
    if ((*(unsigned int (**)(_QWORD *, void *))(*v2 + 48))(v2, &llvm::ErrorInfoBase::ID))
    {
      *(_QWORD *)&v15.__val_ = (*(uint64_t (**)(_QWORD *))(*v2 + 32))(v2);
      v15.__cat_ = v8;
LABEL_14:
      (*(void (**)(_QWORD *))(*v2 + 8))(v2);
    }
  }
  {
  }
  if (v15.__cat_ == (const std::error_category *)&getErrorErrorCat(void)::ErrorErrorCat && v15.__val_ == 3)
  {
    std::error_code::message(&v12, &v15);
    v14 = 260;
    v13[0] = &v12;
    llvm::report_fatal_error((llvm::Twine *)v13, 1);
  }
  return *(_QWORD *)&v15.__val_;
}

uint64_t llvm::StringError::StringError(uint64_t a1, llvm::Twine *a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = off_1E0E20058;
  llvm::Twine::str(a2, (std::string *)(a1 + 8));
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_BYTE *)(a1 + 48) = 1;
  return a1;
}

void llvm::StringError::log(const std::error_code *this, llvm::raw_ostream *a2)
{
  int cat_high;
  const char *p_cat;
  size_t v6;
  std::string *v7;
  size_t size;
  int v9;
  std::string *v10;
  size_t v11;
  std::string v12;

  if (LOBYTE(this[3].__val_))
  {
    cat_high = SHIBYTE(this[1].__cat_);
    if (cat_high >= 0)
      p_cat = (const char *)&this->__cat_;
    else
      p_cat = (const char *)this->__cat_;
    if (cat_high >= 0)
      v6 = HIBYTE(this[1].__cat_);
    else
      v6 = *(_QWORD *)&this[1].__val_;
    llvm::raw_ostream::write(a2, p_cat, v6);
    return;
  }
  std::error_code::message(&v12, this + 2);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v12;
  else
    v7 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  else
    size = v12.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)v7, size);
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v9 = SHIBYTE(this[1].__cat_);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    if (!*(_QWORD *)&this[1].__val_)
      return;
    goto LABEL_21;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  v9 = SHIBYTE(this[1].__cat_);
  if (v9 < 0)
    goto LABEL_20;
LABEL_17:
  if (!(_BYTE)v9)
    return;
LABEL_21:
  std::operator+<char>();
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v12;
  else
    v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  else
    v11 = v12.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)v10, v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

uint64_t llvm::StringError::convertToErrorCode(llvm::StringError *this)
{
  return *((_QWORD *)this + 4);
}

void llvm::createStringError(llvm *this@<X0>, std::error_code a2@<0:X1, 8:X2>, _QWORD *a3@<X8>)
{
  const std::error_category *cat;
  uint64_t v5;
  char *v8;
  char *v9;
  char v10;
  const std::error_category *v11;
  char v12;
  char v13;

  cat = a2.__cat_;
  v5 = *(_QWORD *)&a2.__val_;
  v8 = (char *)operator new(0x38uLL);
  v9 = v8;
  v13 = 1;
  if (LOBYTE(cat->__vftable))
  {
    v11 = cat;
    v10 = 3;
  }
  else
  {
    v10 = 1;
  }
  v12 = v10;
  *(_QWORD *)v8 = off_1E0E20058;
  llvm::Twine::str((llvm::Twine *)&v11, (std::string *)(v8 + 8));
  *((_QWORD *)v9 + 4) = this;
  *((_QWORD *)v9 + 5) = v5;
  v9[48] = 1;
  *a3 = v9;
}

void llvm::report_fatal_error(uint64_t *a1, uint64_t a2)
{
  _WORD v4[20];
  uint64_t v5;
  _QWORD v6[4];
  __int16 v7;
  _QWORD v8[3];

  memset(v8, 0, sizeof(v8));
  llvm::raw_string_ostream::raw_string_ostream((uint64_t)v6, (uint64_t)v8);
  v5 = *a1;
  *a1 = 0;
  v4[16] = 257;
  llvm::logAllUnhandledErrors(&v5, (llvm::raw_ostream *)v6, (llvm::Twine *)v4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  llvm::raw_string_ostream::~raw_string_ostream((llvm::raw_string_ostream *)v6);
  v7 = 260;
  v6[0] = v8;
  llvm::report_fatal_error((llvm::Twine *)v6, a2);
}

uint64_t llvm::raw_string_ostream::raw_string_ostream(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E0E22B10;
  *(_QWORD *)(a1 + 64) = a2;
  llvm::raw_ostream::SetBufferAndMode(a1, 0, 0, 0);
  return a1;
}

void llvm::ErrorList::~ErrorList(llvm::ErrorList *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  operator delete(this);
}

llvm::raw_ostream *llvm::ErrorList::log(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *i;
  _BYTE *v7;

  v3 = this;
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 10;
    *(_OWORD *)v4 = *(_OWORD *)"Multiple errors:\n";
    *((_QWORD *)a2 + 4) += 17;
    v5 = (_QWORD *)*((_QWORD *)this + 1);
    for (i = (_QWORD *)*((_QWORD *)this + 2); v5 != i; ++v5)
    {
LABEL_7:
      while (1)
      {
        this = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, llvm::raw_ostream *))(*(_QWORD *)*v5 + 16))(*v5, a2);
        v7 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v7)
          break;
        *v7 = 10;
        ++*((_QWORD *)a2 + 4);
        if (++v5 == i)
          return this;
      }
      this = llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
  }
  else
  {
    this = llvm::raw_ostream::write(a2, "Multiple errors:\n", 0x11uLL);
    v5 = (_QWORD *)*((_QWORD *)v3 + 1);
    i = (_QWORD *)*((_QWORD *)v3 + 2);
    if (v5 != i)
      goto LABEL_7;
  }
  return this;
}

void *llvm::ErrorInfo<llvm::ErrorList,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::ErrorList::ID;
}

BOOL llvm::ErrorInfo<llvm::ErrorList,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::ErrorList::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::ECError::log(llvm::ECError *this, llvm::raw_ostream *a2)
{
  std::string *v3;
  size_t size;
  std::string v5;

  std::error_code::message(&v5, (const std::error_code *)((char *)this + 8));
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v5;
  else
    v3 = (std::string *)v5.__r_.__value_.__r.__words[0];
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  else
    size = v5.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)v3, size);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

uint64_t llvm::ECError::convertToErrorCode(llvm::ECError *this)
{
  return *((_QWORD *)this + 1);
}

void *llvm::ErrorInfo<llvm::ECError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::ECError::ID;
}

BOOL llvm::ErrorInfo<llvm::ECError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::FileError::~FileError(llvm::FileError *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  operator delete(this);
}

uint64_t llvm::FileError::log(llvm::FileError *this, llvm::raw_ostream *a2)
{
  _BYTE *v4;
  llvm::raw_ostream *v5;
  int v6;
  const char *v7;
  size_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _WORD *v14;

  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v4)
  {
    v5 = llvm::raw_ostream::write(a2, "'", 1uLL);
  }
  else
  {
    *v4 = 39;
    ++*((_QWORD *)a2 + 4);
    v5 = a2;
  }
  v6 = *((char *)this + 31);
  if (v6 >= 0)
    v7 = (char *)this + 8;
  else
    v7 = (const char *)*((_QWORD *)this + 1);
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 31);
  else
    v8 = *((_QWORD *)this + 2);
  v9 = llvm::raw_ostream::write(v5, v7, v8);
  v10 = *((_QWORD *)v9 + 4);
  if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) <= 2)
  {
    llvm::raw_ostream::write(v9, "': ", 3uLL);
    if (!*((_BYTE *)this + 40))
      return (*(uint64_t (**)(_QWORD, llvm::raw_ostream *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), a2);
LABEL_14:
    v11 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) > 4)
    {
      *(_BYTE *)(v11 + 4) = 32;
      *(_DWORD *)v11 = 1701734764;
      *((_QWORD *)a2 + 4) += 5;
      v13 = llvm::raw_ostream::operator<<(a2, *((_QWORD *)this + 4));
      v14 = (_WORD *)*((_QWORD *)v13 + 4);
      if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 1uLL)
        goto LABEL_16;
    }
    else
    {
      v12 = llvm::raw_ostream::write(a2, "line ", 5uLL);
      v13 = llvm::raw_ostream::operator<<(v12, *((_QWORD *)this + 4));
      v14 = (_WORD *)*((_QWORD *)v13 + 4);
      if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 1uLL)
      {
LABEL_16:
        *v14 = 8250;
        *((_QWORD *)v13 + 4) += 2;
        return (*(uint64_t (**)(_QWORD, llvm::raw_ostream *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), a2);
      }
    }
    llvm::raw_ostream::write(v13, ": ", 2uLL);
    return (*(uint64_t (**)(_QWORD, llvm::raw_ostream *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), a2);
  }
  *(_BYTE *)(v10 + 2) = 32;
  *(_WORD *)v10 = 14887;
  *((_QWORD *)v9 + 4) += 3;
  if (*((_BYTE *)this + 40))
    goto LABEL_14;
  return (*(uint64_t (**)(_QWORD, llvm::raw_ostream *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), a2);
}

void *llvm::ErrorInfo<llvm::FileError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::FileError::ID;
}

BOOL llvm::ErrorInfo<llvm::FileError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::FileError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::StringError::~StringError(void **this)
{
  *this = off_1E0E20058;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  llvm::StringError *v1;

  v1 = (llvm::StringError *)this;
  *this = off_1E0E20058;
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    this = (void **)v1;
  }
  operator delete(this);
}

void *llvm::ErrorInfo<llvm::StringError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::StringError::ID;
}

BOOL llvm::ErrorInfo<llvm::StringError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::StringError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void `anonymous namespace'::ErrorErrorCategory::~ErrorErrorCategory(std::error_category *this)
{
  void *v1;

  std::error_category::~error_category(this);
  operator delete(v1);
}

const char *`anonymous namespace'::ErrorErrorCategory::name(_anonymous_namespace_::ErrorErrorCategory *this)
{
  return "Error";
}

void `anonymous namespace'::ErrorErrorCategory::message(int a1@<W1>, uint64_t a2@<X8>)
{
  char *v4;

  if (a1 == 3)
  {
    v4 = (char *)operator new(0x80uLL);
    *(_QWORD *)a2 = v4;
    *(_OWORD *)(a2 + 8) = xmmword_18125E370;
    strcpy(v4, "Inconvertible error value. An error has occurred that could not be converted to a known std::error_code. Please file a bug.");
  }
  else if (a1 == 2)
  {
    strcpy((char *)a2, "A file error occurred.");
    *(_BYTE *)(a2 + 23) = 22;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 15;
    strcpy((char *)a2, "Multiple errors");
  }
}

char *llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  _QWORD *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v21 = (uint64_t)(a2 - *(_QWORD *)a1) >> 3;
      v34 = 0;
      v22 = (_QWORD *)(a1 + 16);
      v23 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v34);
      v24 = v23;
      v25 = *(_QWORD **)a1;
      v26 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v26)
      {
        v27 = 24 * v26;
        v28 = v23;
        do
        {
          v29 = *(_OWORD *)v25;
          *((_QWORD *)v28 + 2) = v25[2];
          *(_OWORD *)v28 = v29;
          v28 += 24;
          v25[1] = 0;
          v25[2] = 0;
          *v25 = 0;
          v25 += 3;
          v27 -= 24;
        }
        while (v27);
        v25 = *(_QWORD **)a1;
        v30 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v30)
        {
          v31 = 3 * v30;
          do
          {
            if (SHIBYTE(v25[v31 - 1]) < 0)
              operator delete((void *)v25[v31 - 3]);
            v31 -= 3;
          }
          while (v31 * 8);
          v25 = *(_QWORD **)a1;
        }
      }
      v32 = 0xAAAAAAAAAAAAAAABLL * v21;
      v33 = v34;
      if (v25 != v22)
        free(v25);
      *(_QWORD *)a1 = v24;
      *(_DWORD *)(a1 + 12) = v33;
      return &v24[24 * v32];
    }
    else
    {
      v34 = 0;
      v10 = (_QWORD *)(a1 + 16);
      v11 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 24, &v34);
      v12 = v11;
      v13 = *(_QWORD **)a1;
      v14 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v14)
      {
        v15 = 24 * v14;
        v16 = v11;
        do
        {
          v17 = *(_OWORD *)v13;
          v16[2] = v13[2];
          *(_OWORD *)v16 = v17;
          v16 += 3;
          v13[1] = 0;
          v13[2] = 0;
          *v13 = 0;
          v13 += 3;
          v15 -= 24;
        }
        while (v15);
        v13 = *(_QWORD **)a1;
        v18 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v18)
        {
          v19 = 3 * v18;
          do
          {
            if (SHIBYTE(v13[v19 - 1]) < 0)
              operator delete((void *)v13[v19 - 3]);
            v19 -= 3;
          }
          while (v19 * 8);
          v13 = *(_QWORD **)a1;
        }
      }
      v20 = v34;
      if (v13 != v10)
        free(v13);
      *(_QWORD *)a1 = v12;
      *(_DWORD *)(a1 + 12) = v20;
    }
  }
  return (char *)v3;
}

void llvm::report_fatal_error(llvm *this, const char *a2)
{
  char v2;
  llvm *v3;
  char v4;
  char v5;

  v2 = 1;
  v5 = 1;
  if (*(_BYTE *)this)
  {
    v3 = this;
    v2 = 3;
  }
  v4 = v2;
  llvm::report_fatal_error((llvm::Twine *)&v3, (uint64_t)a2);
}

void llvm::report_fatal_error(llvm::Twine *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, std::string *, uint64_t);
  _QWORD *v6;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  std::string *p_p;
  llvm::sys *v10;
  void (**v11)(llvm::raw_svector_ostream *__hidden);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  std::string *v19;
  std::string __p;
  _BYTE v21[64];

  std::mutex::lock(&_MergedGlobals_43);
  v5 = (uint64_t (*)(uint64_t, std::string *, uint64_t))_MergedGlobals_9;
  v4 = unk_1EDC0BE10;
  std::mutex::unlock(&_MergedGlobals_43);
  if (v5)
  {
    llvm::Twine::str(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = (llvm::sys *)v5(v4, p_p, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_14:
    llvm::sys::RunInterruptHandlers(v10);
    if ((_DWORD)a2)
      abort();
    exit(1);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_181236C00;
  v12 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v11 = off_1E0E22B88;
  v19 = &__p;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v11, 0, 0, 0);
  v6 = (_QWORD *)v15;
  if ((unint64_t)(v14 - v15) > 0xB)
  {
    *(_DWORD *)(v15 + 8) = 540693071;
    *v6 = *(_QWORD *)"LLVM ERROR: ";
    v15 += 12;
    v7 = (llvm::raw_ostream *)&v11;
    llvm::Twine::print(a1, (llvm::raw_ostream *)&v11);
    v8 = (_BYTE *)v15;
    if (v14 != v15)
      goto LABEL_4;
  }
  else
  {
    v7 = llvm::raw_ostream::write((llvm::raw_ostream *)&v11, "LLVM ERROR: ", 0xCuLL);
    llvm::Twine::print(a1, v7);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if (*((_BYTE **)v7 + 3) != v8)
    {
LABEL_4:
      *v8 = 10;
      ++*((_QWORD *)v7 + 4);
      goto LABEL_12;
    }
  }
  llvm::raw_ostream::write(v7, "\n", 1uLL);
LABEL_12:
  write(2, v19->__r_.__value_.__l.__data_, v19->__r_.__value_.__l.__size_);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v11);
  v10 = (llvm::sys *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__data_ != v21)
    free(__p.__r_.__value_.__l.__data_);
  goto LABEL_14;
}

void llvm::report_bad_alloc_error(llvm *this, const char *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, llvm *, const char *);
  size_t v6;

  std::mutex::lock(&stru_1ECD320E8);
  v5 = (void (*)(uint64_t, llvm *, const char *))qword_1EDC0BE18;
  v4 = unk_1EDC0BE20;
  std::mutex::unlock(&stru_1ECD320E8);
  if (!v5)
  {
    write(2, "LLVM ERROR: out of memory\n", 0x1AuLL);
    v6 = strlen((const char *)this);
    write(2, this, v6);
    write(2, "\n", 1uLL);
    abort();
  }
  v5(v4, this, a2);
  __break(1u);
}

void llvm::llvm_unreachable_internal(llvm *this, const char *a2, const char *a3)
{
  unsigned int v3;
  const char *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _DWORD *v14;
  _BYTE *v15;
  size_t v16;
  size_t v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;

  v3 = a3;
  if (this)
  {
    v5 = (const char *)this;
    v6 = (llvm::raw_ostream *)llvm::dbgs(this);
    v7 = strlen(v5);
    v8 = (_BYTE *)*((_QWORD *)v6 + 4);
    if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        v8 = (_BYTE *)(*((_QWORD *)v6 + 4) + v7);
        *((_QWORD *)v6 + 4) = v8;
      }
    }
    else
    {
      v6 = llvm::raw_ostream::write(v6, v5, v7);
      v8 = (_BYTE *)*((_QWORD *)v6 + 4);
    }
    if (*((_BYTE **)v6 + 3) != v8)
    {
      *v8 = 10;
      ++*((_QWORD *)v6 + 4);
      v9 = (llvm::raw_ostream *)llvm::dbgs((llvm *)v8);
      v10 = *((_QWORD *)v9 + 4);
      if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) <= 0x13)
      {
LABEL_9:
        v9 = llvm::raw_ostream::write(v9, "UNREACHABLE executed", 0x14uLL);
        if (!a2)
          goto LABEL_10;
        goto LABEL_13;
      }
LABEL_12:
      *(_DWORD *)(v10 + 16) = 1684370549;
      *(_OWORD *)v10 = *(_OWORD *)"UNREACHABLE executed";
      *((_QWORD *)v9 + 4) += 20;
      if (!a2)
      {
LABEL_10:
        v11 = (llvm::raw_ostream *)llvm::dbgs(v9);
        llvm::raw_ostream::operator<<(v11, "!\n");
        abort();
      }
LABEL_13:
      v12 = (llvm::raw_ostream *)llvm::dbgs(v9);
      v13 = v12;
      v14 = (_DWORD *)*((_QWORD *)v12 + 4);
      if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 3uLL)
      {
        *v14 = 544497952;
        v15 = (_BYTE *)(*((_QWORD *)v12 + 4) + 4);
        *((_QWORD *)v12 + 4) = v15;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v12, " at ", 4uLL);
        v15 = (_BYTE *)*((_QWORD *)v13 + 4);
      }
      v16 = strlen(a2);
      v17 = v16;
      if (v16 <= *((_QWORD *)v13 + 3) - (_QWORD)v15)
      {
        if (v16)
        {
          memcpy(v15, a2, v16);
          v15 = (_BYTE *)(*((_QWORD *)v13 + 4) + v17);
          *((_QWORD *)v13 + 4) = v15;
        }
      }
      else
      {
        v13 = llvm::raw_ostream::write(v13, a2, v16);
        v15 = (_BYTE *)*((_QWORD *)v13 + 4);
      }
      if (*((_BYTE **)v13 + 3) == v15)
      {
        v13 = llvm::raw_ostream::write(v13, ":", 1uLL);
      }
      else
      {
        *v15 = 58;
        ++*((_QWORD *)v13 + 4);
      }
      v18 = llvm::raw_ostream::operator<<(v13, v3);
      v19 = (llvm::raw_ostream *)llvm::dbgs(v18);
      llvm::raw_ostream::operator<<(v19, "!\n");
      abort();
    }
    this = llvm::raw_ostream::write(v6, "\n", 1uLL);
  }
  v9 = (llvm::raw_ostream *)llvm::dbgs(this);
  v10 = *((_QWORD *)v9 + 4);
  if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) <= 0x13)
    goto LABEL_9;
  goto LABEL_12;
}

uint64_t _GLOBAL__sub_I_ErrorHandling_cpp()
{
  void (*v0)(void *);

  v0 = (void (*)(void *))MEMORY[0x1E0DE4AB8];
  __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &_MergedGlobals_43, &dword_18013D000);
  return __cxa_atexit(v0, &stru_1ECD320E8, &dword_18013D000);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, int a2)
{
  int v2;
  _BYTE *v4;
  int *v5;
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;

  v2 = a2;
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 40);
    if (v2)
      goto LABEL_3;
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 40;
    if (a2)
    {
LABEL_3:
      v5 = &NoFPClassName;
      v6 = 1;
      while (1)
      {
        v7 = *v5;
        if ((*v5 & ~v2) != 0)
          goto LABEL_6;
        v9 = (const void *)*((_QWORD *)v5 + 1);
        v8 = *((_QWORD *)v5 + 2);
        v10 = this;
        if (v6)
          goto LABEL_11;
        v11 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) != v11)
          break;
        v10 = llvm::raw_ostream::write(this, " ", 1uLL);
        v12 = (void *)*((_QWORD *)v10 + 4);
        if (v8 <= *((_QWORD *)v10 + 3) - (_QWORD)v12)
        {
LABEL_12:
          if (v8)
          {
            memcpy(v12, v9, v8);
            *((_QWORD *)v10 + 4) += v8;
          }
          goto LABEL_5;
        }
LABEL_4:
        llvm::raw_ostream::write(v10, (const char *)v9, v8);
LABEL_5:
        v6 = 0;
        v2 &= ~v7 & 0x3FF;
LABEL_6:
        v5 += 6;
        if (v5 == (int *)&RISCVAttributeTags)
        {
          v13 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v13 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 41);
          }
          else
          {
            *((_QWORD *)this + 4) = v13 + 1;
            *v13 = 41;
          }
          return this;
        }
      }
      *v11 = 32;
      ++*((_QWORD *)this + 4);
      v10 = this;
LABEL_11:
      v12 = (void *)*((_QWORD *)v10 + 4);
      if (v8 <= *((_QWORD *)v10 + 3) - (_QWORD)v12)
        goto LABEL_12;
      goto LABEL_4;
    }
  }
  v14 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 4)
  {
    *(_BYTE *)(v14 + 4) = 41;
    *(_DWORD *)v14 = 1701736302;
    *((_QWORD *)this + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(this, "none)", 5uLL);
  }
  return this;
}

void llvm::FoldingSetNodeID::AddString(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 12);
  v8 = v6 + (((unint64_t)a3 + 3) >> 2) + 1;
  if (v8 <= v7)
  {
    if (v6 < v7)
      goto LABEL_3;
LABEL_8:
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 4);
    *(_DWORD *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 8)) = a3;
    v9 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v9;
    if (!a3)
      return;
    goto LABEL_4;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 4);
  LODWORD(v6) = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    goto LABEL_8;
LABEL_3:
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = a3;
  v9 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  if (!a3)
    return;
LABEL_4:
  if ((a2 & 3) != 0)
  {
    if (a3 >= 4)
    {
      v10 = 4;
      do
      {
        v16 = a2[v10 - 1];
        v17 = a2[v10 - 2];
        v18 = a2[v10 - 3];
        v19 = a2[v10 - 4];
        if (v9 >= *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v9 + 1, 4);
          v9 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a1 + 4 * v9) = (v16 << 24) | (v17 << 16) | (v18 << 8) | v19;
        v9 = *(_DWORD *)(a1 + 8) + 1;
        *(_DWORD *)(a1 + 8) = v9;
        v10 += 4;
      }
      while (v10 <= a3);
    }
    else
    {
      v10 = 4;
    }
  }
  else
  {
    v11 = a3 >> 2;
    v12 = v11 + v9;
    if (v12 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v12, 4);
      v9 = *(_DWORD *)(a1 + 8);
    }
    if (a3 >> 2)
    {
      memcpy((void *)(*(_QWORD *)a1 + 4 * v9), a2, 4 * v11);
      v9 = *(_DWORD *)(a1 + 8);
    }
    v9 += (unint64_t)(4 * v11) >> 2;
    *(_DWORD *)(a1 + 8) = v9;
    v10 = (a3 & 0xFFFFFFFC) + 4;
  }
  v13 = 0;
  v14 = v10 - a3;
  if (v10 - a3 != 3)
  {
    if (v14 != 2)
    {
      if (v14 != 1)
        return;
      v13 = a2[a3 - 3] << 16;
    }
    v13 |= a2[a3 - 2] << 8;
  }
  v15 = v13 | a2[a3 - 1];
  if (v9 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v9 + 1, 4);
    v9 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 4 * v9) = v15;
  ++*(_DWORD *)(a1 + 8);
}

BOOL llvm::FoldingSetNodeID::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a2 + 8);
  return (_DWORD)v2 == *(_DWORD *)(a1 + 8) && memcmp(*(const void **)a1, *(const void **)a2, 4 * v2) == 0;
}

llvm::FoldingSetBase *llvm::FoldingSetBase::FoldingSetBase(llvm::FoldingSetBase *this, char a2)
{
  unsigned int v3;
  _QWORD *v4;

  v3 = 1 << a2;
  *((_DWORD *)this + 2) = 1 << a2;
  v4 = calloc(((1 << a2) + 1), 8uLL);
  if (!v4)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v4[v3] = -1;
  *(_QWORD *)this = v4;
  *((_DWORD *)this + 3) = 0;
  return this;
}

void llvm::FoldingSetBase::~FoldingSetBase(void **this)
{
  free(*this);
}

void llvm::FoldingSetBase::GrowBucketCount(uint64_t a1, int a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t i;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE v26[128];
  void *v27[2];
  _QWORD v28[18];

  v28[16] = *MEMORY[0x1E0C80C00];
  v6 = *(void **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = a2 + 1;
  v9 = calloc((a2 + 1), 8uLL);
  if (!v9 && (v8 || (v9 = malloc(1uLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v9[a2] = -1;
  *(_QWORD *)a1 = v9;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  v24 = v26;
  v25 = 0x2000000000;
  if (!(_DWORD)v7)
    goto LABEL_23;
  v23 = v6;
  for (i = 0; i != v7; ++i)
  {
    v11 = (uint64_t *)*((_QWORD *)v6 + i);
    if (v11)
      v12 = (*((_QWORD *)v6 + i) & 1) == 0;
    else
      v12 = 0;
    if (v12)
    {
      do
      {
        v13 = (uint64_t *)*v11;
        *v11 = 0;
        v14 = (*(uint64_t (**)(uint64_t, uint64_t *, _BYTE **))(a3 + 16))(a1, v11, &v24);
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(_DWORD *)(a1 + 12) + 1;
        if (v16 <= 2 * v15)
        {
          v20 = *(_QWORD *)a1 + 8 * ((v15 - 1) & v14);
        }
        else
        {
          llvm::FoldingSetBase::GrowBucketCount(a1);
          v27[0] = v28;
          v27[1] = (void *)0x2000000000;
          v17 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(a3 + 16))(a1, v11, v27);
          v18 = *(void **)a1;
          v19 = *(_DWORD *)(a1 + 8);
          if (v27[0] != v28)
            free(v27[0]);
          v20 = (uint64_t)v18 + 8 * ((v19 - 1) & v17);
          v16 = *(_DWORD *)(a1 + 12) + 1;
        }
        *(_DWORD *)(a1 + 12) = v16;
        v21 = *(_QWORD *)v20;
        if (!*(_QWORD *)v20)
          v21 = v20 | 1;
        *v11 = v21;
        *(_QWORD *)v20 = v11;
        LODWORD(v25) = 0;
        if (!v13)
          break;
        v11 = v13;
      }
      while ((v13 & 1) == 0);
    }
    v6 = v23;
  }
  v22 = v24;
  free(v23);
  v6 = v22;
  if (v22 != v26)
LABEL_23:
    free(v6);
}

void llvm::FoldingSetBase::InsertNode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a1 + 12) + 1;
  v8 = 2 * *(_DWORD *)(a1 + 8);
  if (v7 > v8)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1, v8, a4);
    v11[0] = v12;
    v11[1] = (void *)0x2000000000;
    a3 = *(_QWORD *)a1
       + 8
       * ((*(_DWORD *)(a1 + 8) - 1) & (*(unsigned int (**)(uint64_t, uint64_t *, void **))(a4 + 16))(a1, a2, v11));
    if (v11[0] != v12)
      free(v11[0]);
    v7 = *(_DWORD *)(a1 + 12) + 1;
  }
  *(_DWORD *)(a1 + 12) = v7;
  v10 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    v10 = a3 | 1;
  *a2 = v10;
  *(_QWORD *)a3 = a2;
}

_QWORD *llvm::FoldingSetBase::FindNodeOrInsertPos(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  BOOL v11;
  BOOL v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v8 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(_QWORD **)a2, *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8));
  v9 = (_QWORD **)(*(_QWORD *)a1 + 8 * ((*(_DWORD *)(a1 + 8) - 1) & v8));
  v10 = *v9;
  *a3 = 0;
  v14 = v16;
  v15 = 0x2000000000;
  if (v10)
    v11 = (v10 & 1) == 0;
  else
    v11 = 0;
  if (v11)
  {
    while (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, unint64_t, void **))(a4 + 8))(a1, v10, a2, v8, &v14) & 1) == 0)
    {
      LODWORD(v15) = 0;
      v10 = (_QWORD *)*v10;
      if (v10)
        v12 = (v10 & 1) == 0;
      else
        v12 = 0;
      if (!v12)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v10 = 0;
    *a3 = v9;
  }
  if (v14 != v16)
    free(v14);
  return v10;
}

unint64_t *llvm::FoldingSetIteratorImpl::FoldingSetIteratorImpl(unint64_t *this, void **a2)
{
  unint64_t v2;

  while (1)
  {
    v2 = (unint64_t)*a2;
    if (*a2)
    {
      if (v2 == -1)
        break;
      if (v2 && ((unint64_t)*a2 & 1) == 0)
        break;
    }
    ++a2;
  }
  *this = v2;
  return this;
}

unint64_t **llvm::FoldingSetIteratorImpl::advance(unint64_t **this)
{
  unint64_t v1;
  BOOL v2;
  unint64_t *i;

  v1 = **this;
  if (v1)
    v2 = (**this & 1) == 0;
  else
    v2 = 0;
  if (!v2)
  {
    for (i = (unint64_t *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 8); ; ++i)
    {
      v1 = *i;
      if (*i)
      {
        if (v1 == -1)
          break;
        if (v1 && (*i & 1) == 0)
          break;
      }
    }
  }
  *this = (unint64_t *)v1;
  return this;
}

void llvm::formatted_raw_ostream::UpdatePosition(llvm::formatted_raw_ostream *this, const char *a2, int64_t a3)
{
  char *v6;
  unsigned int NumBytesForUTF8;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v6 = (char *)this + 88;
  if (!*((_QWORD *)this + 12))
    goto LABEL_24;
  NumBytesForUTF8 = llvm::getNumBytesForUTF8((llvm *)**((unsigned __int8 **)this + 11));
  v8 = NumBytesForUTF8;
  v10 = *((_QWORD *)this + 12);
  v9 = *((_QWORD *)this + 13);
  v11 = NumBytesForUTF8 - v10;
  v12 = a3 - v11;
  if (a3 < v11)
  {
    if (v9 < v10 + a3)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, (char *)this + 112, v10 + a3, 1);
      v10 = *((_QWORD *)this + 12);
    }
    if (a3)
    {
      memcpy((void *)(*((_QWORD *)this + 11) + v10), a2, a3);
      v10 = *((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 12) = v10 + a3;
    return;
  }
  v13 = *((_QWORD *)this + 12);
  if (v9 < NumBytesForUTF8)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, (char *)this + 112, NumBytesForUTF8, 1);
    v13 = *((_QWORD *)this + 12);
  }
  if (v8 != v10)
  {
    memcpy((void *)(*((_QWORD *)this + 11) + v13), a2, v11);
    v13 = *((_QWORD *)this + 12);
  }
  v14 = v13 + v11;
  *((_QWORD *)this + 12) = v13 + v11;
  v15 = (char *)*((_QWORD *)this + 11);
  v16 = llvm::sys::unicode::columnWidthUTF8((uint64_t)v15, v13 + v11);
  if (v16 != -1)
    *((_DWORD *)this + 18) += v16;
  a2 += v11;
  if (v14 <= 1)
  {
    v17 = *v15;
    switch(v17)
    {
      case 9:
        v18 = (-*((_DWORD *)this + 18) & 7) + *((_DWORD *)this + 18);
        goto LABEL_22;
      case 13:
        v18 = 0;
        goto LABEL_22;
      case 10:
        v18 = 0;
        ++*((_DWORD *)this + 19);
LABEL_22:
        *((_DWORD *)this + 18) = v18;
        break;
    }
  }
  *((_QWORD *)this + 12) = 0;
  a3 = v12;
LABEL_24:
  if (a3 < 1)
    return;
  v19 = &a2[a3];
  while (1)
  {
    v21 = llvm::getNumBytesForUTF8((llvm *)*(unsigned __int8 *)a2);
    v22 = v19 - a2;
    if (v21 > (int)v19 - (int)a2)
      break;
    v23 = v21;
    v24 = v21;
    v25 = llvm::sys::unicode::columnWidthUTF8((uint64_t)a2, v21);
    if (v25 != -1)
      *((_DWORD *)this + 18) += v25;
    if (v23 > 1)
      goto LABEL_28;
    v26 = *a2;
    switch(v26)
    {
      case 9:
        v20 = (-*((_DWORD *)this + 18) & 7) + *((_DWORD *)this + 18);
        break;
      case 13:
        v20 = 0;
        break;
      case 10:
        v20 = 0;
        ++*((_DWORD *)this + 19);
        break;
      default:
        goto LABEL_28;
    }
    *((_DWORD *)this + 18) = v20;
LABEL_28:
    a2 += v24;
    if (a2 >= v19)
      return;
  }
  v27 = 0;
  *((_QWORD *)this + 12) = 0;
  if (*((_QWORD *)this + 13) < v22)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, (char *)this + 112, v19 - a2, 1);
    v27 = *((_QWORD *)this + 12);
  }
  if (v19 != a2)
  {
    memcpy((void *)(*((_QWORD *)this + 11) + v27), a2, v19 - a2);
    v27 = *((_QWORD *)this + 12);
  }
  *((_QWORD *)this + 12) = v27 + v22;
}

llvm::formatted_raw_ostream *llvm::formatted_raw_ostream::PadToColumn(llvm::formatted_raw_ostream *this, int a2)
{
  const char *v4;
  const char *v5;
  unint64_t v6;
  int64_t v8;
  const char *v9;
  unint64_t v10;
  int64_t v12;
  llvm::formatted_raw_ostream *v13;
  unsigned int v14;

  v4 = (const char *)*((_QWORD *)this + 2);
  v5 = (const char *)*((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 10);
  if (v6 < (unint64_t)v4 || v6 > (unint64_t)v5)
  {
    v8 = v5 - v4;
  }
  else
  {
    v8 = (int64_t)&v5[-v6];
    v4 = (const char *)*((_QWORD *)this + 10);
  }
  llvm::formatted_raw_ostream::UpdatePosition(this, v4, v8);
  *((_QWORD *)this + 10) = v5;
  v9 = (const char *)*((_QWORD *)this + 2);
  v10 = *((_QWORD *)this + 4);
  if (v5 < v9 || (unint64_t)v5 > v10)
  {
    v12 = v10 - (_QWORD)v9;
    v13 = this;
  }
  else
  {
    v12 = v10 - (_QWORD)v5;
    v13 = this;
    v9 = v5;
  }
  llvm::formatted_raw_ostream::UpdatePosition(v13, v9, v12);
  *((_QWORD *)this + 10) = v10;
  if (a2 - *((_DWORD *)this + 18) <= 1)
    v14 = 1;
  else
    v14 = a2 - *((_DWORD *)this + 18);
  llvm::raw_ostream::indent(this, v14);
  return this;
}

llvm::raw_ostream *llvm::formatted_raw_ostream::write_impl(llvm::formatted_raw_ostream *this, const char *a2, int64_t a3)
{
  size_t v3;
  const char *v6;
  const char *v7;
  llvm::raw_ostream *result;

  v3 = a3;
  v6 = (const char *)*((_QWORD *)this + 10);
  v7 = &a2[a3];
  if (v6 < a2 || v6 > v7)
    v6 = a2;
  else
    a3 = v7 - v6;
  llvm::formatted_raw_ostream::UpdatePosition(this, v6, a3);
  *((_QWORD *)this + 10) = v7;
  result = llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 8), a2, v3);
  *((_QWORD *)this + 10) = 0;
  return result;
}

void llvm::formatted_raw_ostream::~formatted_raw_ostream(llvm::formatted_raw_ostream *this)
{
  char *v2;

  *(_QWORD *)this = off_1E0E22CB0;
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  llvm::formatted_raw_ostream::releaseStream(this);
  v2 = (char *)*((_QWORD *)this + 11);
  if (v2 != (char *)this + 112)
    free(v2);
  llvm::raw_ostream::~raw_ostream(this);
}

{
  char *v2;
  void *v3;

  *(_QWORD *)this = off_1E0E22CB0;
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  llvm::formatted_raw_ostream::releaseStream(this);
  v2 = (char *)*((_QWORD *)this + 11);
  if (v2 != (char *)this + 112)
    free(v2);
  llvm::raw_ostream::~raw_ostream(this);
  operator delete(v3);
}

uint64_t llvm::formatted_raw_ostream::changeColor(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
  return a1;
}

llvm::formatted_raw_ostream *llvm::formatted_raw_ostream::resetColor(llvm::formatted_raw_ostream *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
  return this;
}

llvm::formatted_raw_ostream *llvm::formatted_raw_ostream::reverseColor(llvm::formatted_raw_ostream *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8));
  return this;
}

uint64_t llvm::formatted_raw_ostream::is_displayed(llvm::formatted_raw_ostream *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
}

uint64_t llvm::formatted_raw_ostream::current_pos(llvm::formatted_raw_ostream *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

void llvm::formatted_raw_ostream::setStream(llvm::raw_ostream **this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  void *v8;
  llvm::raw_ostream *v9;

  llvm::formatted_raw_ostream::releaseStream((llvm::formatted_raw_ostream *)this);
  this[8] = a2;
  v4 = *((_QWORD *)a2 + 2);
  if (*((_DWORD *)a2 + 14))
    v5 = v4 == 0;
  else
    v5 = 0;
  if (!v5)
  {
    v6 = *((_QWORD *)a2 + 3) - v4;
    v7 = this[4] == this[2];
    if (v6)
      goto LABEL_6;
LABEL_12:
    if (!v7)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)this);
    llvm::raw_ostream::SetBufferAndMode((uint64_t)this, 0, 0, 0);
    v9 = this[8];
    if (*((_QWORD *)v9 + 4) != *((_QWORD *)v9 + 2))
      goto LABEL_9;
    goto LABEL_10;
  }
  v6 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a2 + 88))(a2);
  v7 = this[4] == this[2];
  if (!v6)
    goto LABEL_12;
LABEL_6:
  if (!v7)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)this);
  v8 = operator new[](v6);
  llvm::raw_ostream::SetBufferAndMode((uint64_t)this, (uint64_t)v8, v6, 1);
  v9 = this[8];
  if (*((_QWORD *)v9 + 4) != *((_QWORD *)v9 + 2))
LABEL_9:
    llvm::raw_ostream::flush_nonempty(v9);
LABEL_10:
  llvm::raw_ostream::SetBufferAndMode((uint64_t)v9, 0, 0, 0);
  this[10] = 0;
}

void llvm::formatted_raw_ostream::releaseStream(llvm::formatted_raw_ostream *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  BOOL v6;
  void *v7;

  if (!*((_QWORD *)this + 8))
    return;
  v2 = *((_QWORD *)this + 2);
  if (*((_DWORD *)this + 14))
    v3 = v2 == 0;
  else
    v3 = 0;
  if (v3)
  {
    v4 = (*(uint64_t (**)(llvm::formatted_raw_ostream *))(*(_QWORD *)this + 88))(this);
    v5 = (llvm::raw_ostream *)*((_QWORD *)this + 8);
    v6 = *((_QWORD *)v5 + 4) == *((_QWORD *)v5 + 2);
    if (v4)
      goto LABEL_7;
  }
  else
  {
    v4 = *((_QWORD *)this + 3) - v2;
    v5 = (llvm::raw_ostream *)*((_QWORD *)this + 8);
    v6 = *((_QWORD *)v5 + 4) == *((_QWORD *)v5 + 2);
    if (v4)
    {
LABEL_7:
      if (!v6)
        llvm::raw_ostream::flush_nonempty(v5);
      v7 = operator new[](v4);
      llvm::raw_ostream::SetBufferAndMode((uint64_t)v5, (uint64_t)v7, v4, 1);
      return;
    }
  }
  if (!v6)
    llvm::raw_ostream::flush_nonempty(v5);
  llvm::raw_ostream::SetBufferAndMode((uint64_t)v5, 0, 0, 0);
}

uint64_t llvm::formatv_object_base::parseReplacementItem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t first_not_of;
  unint64_t v5;
  unint64_t v6;
  uint64_t last_not_of;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  _BYTE v55[19];
  _OWORD v56[2];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v54 = a1;
  *((_QWORD *)&v54 + 1) = a2;
  first_not_of = llvm::StringRef::find_first_not_of(&v54, "{}", 2, 0);
  if (first_not_of >= *((_QWORD *)&v54 + 1))
    v5 = *((_QWORD *)&v54 + 1);
  else
    v5 = first_not_of;
  v6 = *((_QWORD *)&v54 + 1) - v5;
  *(_QWORD *)&v56[0] = v54 + v5;
  *((_QWORD *)&v56[0] + 1) = *((_QWORD *)&v54 + 1) - v5;
  last_not_of = llvm::StringRef::find_last_not_of(v56, "{}", 2, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < *((_QWORD *)&v56[0] + 1))
    v8 = last_not_of + 1;
  else
    v8 = *((_QWORD *)&v56[0] + 1);
  v9 = *((_QWORD *)&v56[0] + 1) - v6 + v8;
  if (*((_QWORD *)&v56[0] + 1) < v9)
    v9 = *((_QWORD *)&v56[0] + 1);
  v52 = *(_QWORD *)&v56[0];
  v53 = v9;
  v10 = llvm::StringRef::find_first_not_of(&v52, " \t\n\v\f\r", 6, 0);
  if (v10 >= v53)
    v11 = v53;
  else
    v11 = v10;
  v12 = v53 - v11;
  *(_QWORD *)&v56[0] = v52 + v11;
  *((_QWORD *)&v56[0] + 1) = v53 - v11;
  v13 = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v13 + 1) < *((_QWORD *)&v56[0] + 1))
    v15 = v13 + 1;
  else
    v15 = *((_QWORD *)&v56[0] + 1);
  v16 = *((_QWORD *)&v56[0] + 1) - v12 + v15;
  if (*((_QWORD *)&v56[0] + 1) < v16)
    v16 = *((_QWORD *)&v56[0] + 1);
  v52 = *(_QWORD *)&v56[0];
  v53 = v16;
  *(_QWORD *)&v56[0] = 0;
  result = llvm::consumeUnsignedInteger((llvm *)&v52, 0, (unint64_t *)v56, v14);
  if ((_DWORD)result)
  {
    memset(v56, 0, sizeof(v56));
    *(_OWORD *)(a3 + 8) = 0u;
    memset(v55, 0, sizeof(v55));
    *(_QWORD *)a3 = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_DWORD *)(a3 + 40) = 2;
    *(_BYTE *)(a3 + 44) = 0;
    *(_DWORD *)(a3 + 60) = 0;
    *(_OWORD *)(a3 + 45) = *(_OWORD *)v55;
    goto LABEL_71;
  }
  v18 = *(_QWORD *)&v56[0];
  v19 = llvm::StringRef::find_first_not_of(&v52, " \t\n\v\f\r", 6, 0);
  if (v19 >= v53)
    v20 = v53;
  else
    v20 = v19;
  v21 = v53 - v20;
  *(_QWORD *)&v56[0] = v52 + v20;
  *((_QWORD *)&v56[0] + 1) = v53 - v20;
  v22 = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v22 + 1) < *((_QWORD *)&v56[0] + 1))
    v24 = v22 + 1;
  else
    v24 = *((_QWORD *)&v56[0] + 1);
  v25 = *((_QWORD *)&v56[0] + 1) - v21 + v24;
  if (*((_QWORD *)&v56[0] + 1) < v25)
    v25 = *((_QWORD *)&v56[0] + 1);
  v52 = *(_QWORD *)&v56[0];
  v53 = v25;
  if (!v25 || **(_BYTE **)&v56[0] != 44)
  {
    v33 = 0;
    v27 = 32;
    v28 = 2;
    goto LABEL_46;
  }
  v26 = (char *)(*(_QWORD *)&v56[0] + 1);
  v27 = 32;
  v28 = 2;
  v29 = v25 - 1;
  v52 = *(_QWORD *)&v56[0] + 1;
  v53 = v25 - 1;
  if (v25 == 1)
  {
    v33 = 0;
    goto LABEL_46;
  }
  v30 = v25 - 2;
  if (v30)
  {
    v31 = *(_QWORD *)&v56[0] + 2;
    v32 = *(char *)(*(_QWORD *)&v56[0] + 2);
    switch(v32)
    {
      case '+':
LABEL_38:
        v27 = *v26;
        if (v29 >= 2)
          v34 = 2;
        else
          v34 = v29;
        v31 = (uint64_t)&v26[v34];
        v30 = v29 - v34;
        goto LABEL_42;
      case '-':
        v28 = 0;
        goto LABEL_38;
      case '=':
        v28 = 1;
        goto LABEL_38;
    }
    v51 = *v26;
    switch(v51)
    {
      case '+':
LABEL_42:
        v52 = v31;
        v53 = v30;
        break;
      case '-':
        v28 = 0;
        goto LABEL_42;
      case '=':
        v28 = 1;
        goto LABEL_42;
    }
  }
  *(_QWORD *)&v56[0] = 0;
  if (llvm::consumeUnsignedInteger((llvm *)&v52, 0, (unint64_t *)v56, v23))
    v33 = 0;
  else
    v33 = *(_QWORD *)&v56[0];
LABEL_46:
  v35 = llvm::StringRef::find_first_not_of(&v52, " \t\n\v\f\r", 6, 0);
  if (v35 >= v53)
    v36 = v53;
  else
    v36 = v35;
  v37 = v53 - v36;
  *(_QWORD *)&v56[0] = v52 + v36;
  *((_QWORD *)&v56[0] + 1) = v53 - v36;
  v38 = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v38 + 1) < *((_QWORD *)&v56[0] + 1))
    v39 = v38 + 1;
  else
    v39 = *((_QWORD *)&v56[0] + 1);
  v40 = *((_QWORD *)&v56[0] + 1) - v37 + v39;
  if (*((_QWORD *)&v56[0] + 1) < v40)
    v40 = *((_QWORD *)&v56[0] + 1);
  v52 = *(_QWORD *)&v56[0];
  v53 = v40;
  if (v40 && **(_BYTE **)&v56[0] == 58)
  {
    *(_QWORD *)v55 = *(_QWORD *)&v56[0] + 1;
    *(_QWORD *)&v55[8] = v40 - 1;
    v41 = llvm::StringRef::find_first_not_of(v55, " \t\n\v\f\r", 6, 0);
    if (v41 >= *(_QWORD *)&v55[8])
      v42 = *(_QWORD *)&v55[8];
    else
      v42 = v41;
    v43 = *(_QWORD *)&v55[8] - v42;
    *(_QWORD *)&v56[0] = *(_QWORD *)v55 + v42;
    *((_QWORD *)&v56[0] + 1) = *(_QWORD *)&v55[8] - v42;
    v44 = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
    v45 = *(_QWORD *)&v56[0];
    if ((unint64_t)(v44 + 1) < *((_QWORD *)&v56[0] + 1))
      v46 = v44 + 1;
    else
      v46 = *((_QWORD *)&v56[0] + 1);
    v47 = *((_QWORD *)&v56[0] + 1) - v43 + v46;
    if (*((_QWORD *)&v56[0] + 1) >= v47)
      v48 = v47;
    else
      v48 = *((_QWORD *)&v56[0] + 1);
    v52 = 0;
    v53 = 0;
  }
  else
  {
    v48 = 0;
    v45 = 0;
  }
  v49 = llvm::StringRef::find_first_not_of(&v52, " \t\n\v\f\r", 6, 0);
  if (v49 >= v53)
    v50 = v53;
  else
    v50 = v49;
  *(_QWORD *)&v56[0] = v52 + v50;
  *((_QWORD *)&v56[0] + 1) = v53 - v50;
  result = llvm::StringRef::find_last_not_of(v56, " \t\n\v\f\r", 6, 0xFFFFFFFFFFFFFFFFLL);
  *(_DWORD *)a3 = 1;
  *(_OWORD *)(a3 + 8) = v54;
  *(_QWORD *)(a3 + 24) = v18;
  *(_QWORD *)(a3 + 32) = v33;
  *(_DWORD *)(a3 + 40) = v28;
  *(_BYTE *)(a3 + 44) = v27;
  *(_QWORD *)(a3 + 48) = v45;
  *(_QWORD *)(a3 + 56) = v48;
LABEL_71:
  *(_BYTE *)(a3 + 64) = 1;
  return result;
}

double llvm::formatv_object_base::splitLiteralAndReplacement@<D0>(_BYTE *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  double result;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[32];
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v5 = a2;
    while (2)
    {
      if (*a1 == 123)
      {
        v6 = 1;
        do
        {
          if (v5 == v6)
          {
            v8 = -1;
            if (v5 != -1)
              v8 = v5;
            if (v8 >= 2)
              goto LABEL_37;
            goto LABEL_14;
          }
          v7 = a1[v6++];
        }
        while (v7 == 123);
        v8 = v6 - 1;
        if (v5 < v8)
          v8 = v5;
        if (v8 >= 2)
        {
LABEL_37:
          v20 = v8 >> 1;
          if (v5 < v8 >> 1)
            v20 = v5;
          *(_QWORD *)(a3 + 24) = 0;
          *(_QWORD *)(a3 + 32) = 0;
          v21 = v8 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)&v24[11] = 0;
          if (v5 < v21)
            v21 = v5;
          *(_QWORD *)&v24[3] = 0;
          *(_DWORD *)a3 = 2;
          *(_QWORD *)(a3 + 8) = a1;
          *(_QWORD *)(a3 + 16) = v20;
          *(_DWORD *)(a3 + 40) = 2;
          *(_BYTE *)(a3 + 44) = 0;
          result = *(double *)v24;
          *(_OWORD *)(a3 + 45) = *(_OWORD *)v24;
          *(_DWORD *)(a3 + 60) = 0;
          *(_QWORD *)(a3 + 64) = &a1[v21];
          *(_QWORD *)(a3 + 72) = v5 - v21;
          return result;
        }
LABEL_14:
        v9 = memchr(a1, 125, v5);
        if (!v9 || (v10 = v9, v11 = v9 - a1, v9 - a1 == -1))
        {
          *(_QWORD *)(a3 + 24) = 0;
          *(_QWORD *)(a3 + 32) = 0;
          *(_QWORD *)&v24[11] = 0;
          *(_QWORD *)&v24[3] = 0;
          *(_QWORD *)(a3 + 64) = 0;
          *(_QWORD *)(a3 + 72) = 0;
          *(_DWORD *)a3 = 2;
          *(_QWORD *)(a3 + 8) = a1;
          *(_QWORD *)(a3 + 16) = v5;
          goto LABEL_31;
        }
        if (v5 < 2)
          goto LABEL_20;
        v12 = memchr(a1 + 1, 123, v5 - 1);
        v13 = v12 - a1;
        if (!v12)
          v13 = -1;
        if (v13 >= v11)
        {
LABEL_20:
          if (v10 == a1)
            v14 = 1;
          else
            v14 = v11;
          if (v14 >= v5)
            v14 = v5;
          v15 = (uint64_t)(a1 + 1);
          v16 = v14 - 1;
          if (v5 >= v11 + 1)
            v17 = v11 + 1;
          else
            v17 = v5;
          a1 += v17;
          v5 -= v17;
          llvm::formatv_object_base::parseReplacementItem(v15, v16, (uint64_t)v24);
          if (v27)
          {
            v22 = *(_OWORD *)&v24[16];
            *(_OWORD *)a3 = *(_OWORD *)v24;
            *(_OWORD *)(a3 + 16) = v22;
            result = *(double *)&v25;
            v23 = v26;
            *(_OWORD *)(a3 + 32) = v25;
            *(_OWORD *)(a3 + 48) = v23;
            *(_QWORD *)(a3 + 64) = a1;
            *(_QWORD *)(a3 + 72) = v5;
            return result;
          }
          if (v5)
            continue;
          goto LABEL_30;
        }
        if (v5 < v13)
          v13 = v5;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        *(_QWORD *)&v24[11] = 0;
      }
      else
      {
        v19 = memchr(a1, 123, v5);
        v13 = v19 - a1;
        *(_QWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 32) = 0;
        if (!v19)
          v13 = -1;
        *(_QWORD *)&v24[11] = 0;
        if (v5 < v13)
          v13 = v5;
      }
      break;
    }
    *(_QWORD *)&v24[3] = 0;
    *(_DWORD *)a3 = 2;
    *(_QWORD *)(a3 + 8) = a1;
    *(_QWORD *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 40) = 2;
    *(_BYTE *)(a3 + 44) = 0;
    result = *(double *)v24;
    *(_OWORD *)(a3 + 45) = *(_OWORD *)v24;
    *(_DWORD *)(a3 + 60) = *(_DWORD *)&v24[15];
    *(_QWORD *)(a3 + 64) = &a1[v13];
    *(_QWORD *)(a3 + 72) = v5 - v13;
    return result;
  }
LABEL_30:
  *(_QWORD *)&v24[11] = 0;
  *(_QWORD *)&v24[3] = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_DWORD *)a3 = 2;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = a1;
  *(_QWORD *)(a3 + 16) = 0;
LABEL_31:
  *(_DWORD *)(a3 + 40) = 2;
  *(_BYTE *)(a3 + 44) = 0;
  result = *(double *)v24;
  *(_OWORD *)(a3 + 45) = *(_OWORD *)v24;
  *(_DWORD *)(a3 + 60) = *(_DWORD *)&v24[15];
  return result;
}

double llvm::formatv_object_base::parseFormatString@<D0>(_BYTE *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  __int128 v5;
  size_t v6;
  unint64_t v8;
  __int128 *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  _BYTE *v16;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  _BYTE *v21;
  size_t v22;
  _BYTE v23[48];
  __int128 v24;

  v4 = (void *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x200000000;
  *(_DWORD *)v23 = 0;
  *(_QWORD *)&v5 = 0;
  memset(&v23[8], 0, 32);
  *(_DWORD *)&v23[40] = 2;
  v23[44] = 0;
  v24 = 0uLL;
  if (a2)
  {
    v6 = a2;
    do
    {
      llvm::formatv_object_base::splitLiteralAndReplacement(a1, v6, (uint64_t)v18);
      *(_OWORD *)v23 = v18[0];
      *(_OWORD *)&v23[16] = v18[1];
      *(_QWORD *)&v5 = v19;
      *(_OWORD *)&v23[32] = v19;
      v24 = v20;
      a1 = v21;
      v6 = v22;
      if (!LODWORD(v18[0]))
        continue;
      v13 = *(unsigned int *)(a3 + 8);
      v8 = *(_QWORD *)a3;
      if (v13 >= *(_DWORD *)(a3 + 12))
      {
        v14 = v13 + 1;
        v15 = v8 + (v13 << 6) > (unint64_t)v23;
        if (v8 <= (unint64_t)v23 && v15)
        {
          v16 = &v23[-v8];
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v4, v14, 64);
          v8 = *(_QWORD *)a3;
          v9 = (__int128 *)&v16[*(_QWORD *)a3];
          goto LABEL_5;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v4, v14, 64);
        v8 = *(_QWORD *)a3;
      }
      v9 = (__int128 *)v23;
LABEL_5:
      v10 = (_OWORD *)(v8 + ((unint64_t)*(unsigned int *)(a3 + 8) << 6));
      v5 = *v9;
      v11 = v9[1];
      v12 = v9[3];
      v10[2] = v9[2];
      v10[3] = v12;
      *v10 = v5;
      v10[1] = v11;
      ++*(_DWORD *)(a3 + 8);
    }
    while (v6);
  }
  return *(double *)&v5;
}

void llvm::IntervalMapImpl::Path::replaceRoot(unsigned int *a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD **)a1;
  *v5 = a2;
  *((_DWORD *)v5 + 2) = a3;
  *((_DWORD *)v5 + 3) = a4;
  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD *)(**(_QWORD **)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 + 12)) & 0xFFFFFFFFFFFFFFC0;
  v8 = (a4 & 0xFFFFFFFF00000000 | *(_QWORD *)(**(_QWORD **)a1 + 8 * *(unsigned int *)(*(_QWORD *)a1 + 12)) & 0x3FLL)
     + 1;
  v9 = a1[2];
  v10 = a1[3];
  if ((_DWORD)v9 == 1)
  {
    if (v10 <= 1)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v9 + 1, 16);
      v11 = a1[2];
      v6 = *(_QWORD **)a1;
    }
    else
    {
      v11 = 1;
    }
    v12 = &v6[2 * v11];
    *v12 = v7;
    v12[1] = v8;
    ++a1[2];
  }
  else
  {
    if (v9 >= v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v9 + 1, 16);
      v6 = *(_QWORD **)a1;
      v9 = a1[2];
    }
    *(_OWORD *)&v6[2 * v9] = *(_OWORD *)&v6[2 * v9 - 2];
    v13 = a1[2];
    v14 = *(_QWORD *)a1 + 16 * v13 - 16;
    if ((_QWORD *)v14 != v6 + 2)
    {
      memmove(v6 + 4, v6 + 2, v14 - (_QWORD)(v6 + 2));
      LODWORD(v13) = a1[2];
    }
    a1[2] = v13 + 1;
    v6[2] = v7;
    v6[3] = v8;
  }
}

uint64_t llvm::IntervalMapImpl::Path::getLeftSibling(llvm::IntervalMapImpl::Path *this, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)this;
  v3 = -1;
  while (1)
  {
    v4 = (a2 + v3);
    if (!(a2 + v3))
      break;
    v5 = *(_DWORD *)(v2 + 16 * v4 + 12);
    --v3;
    if (v5)
    {
      v6 = a2 + v3 + 2;
      result = *(_QWORD *)(*(_QWORD *)(v2 + 16 * v4) + 8 * (v5 - 1));
      if (v6 == a2)
        return result;
      goto LABEL_10;
    }
  }
  result = 0;
  v8 = *(_DWORD *)(v2 + 12);
  if (v8)
  {
    v6 = 1;
    result = *(_QWORD *)(*(_QWORD *)v2 + 8 * (v8 - 1));
    if (a2 != 1)
    {
LABEL_10:
      v9 = a2 - v6;
      do
      {
        result = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFC0) + 8 * (result & 0x3F));
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

void llvm::IntervalMapImpl::Path::moveLeft(llvm::IntervalMapImpl::Path *this, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *((unsigned int *)this + 2);
  if ((_DWORD)v4 && *(_DWORD *)(*(_QWORD *)this + 12) < *(_DWORD *)(*(_QWORD *)this + 8))
  {
    v5 = a2;
    do
      --v5;
    while (!*(_DWORD *)(*(_QWORD *)this + 16 * v5 + 12));
  }
  else if ((int)v4 - 1 >= a2 || (v6 = a2 + 1, (_DWORD)v4 == (_DWORD)v6))
  {
    v5 = 0;
  }
  else
  {
    if (v4 <= v6)
    {
      v7 = v6 - v4;
      v8 = *((unsigned int *)this + 2);
      if (*((_DWORD *)this + 3) < v6)
      {
        v16 = *((unsigned int *)this + 2);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (char *)this + 16, a2 + 1, 16);
        v4 = v16;
        v6 = a2 + 1;
        v8 = *((unsigned int *)this + 2);
      }
      bzero((void *)(*(_QWORD *)this + 16 * v8), 16 * (v6 - v4));
      LODWORD(v6) = *((_DWORD *)this + 2) + v7;
    }
    v5 = 0;
    *((_DWORD *)this + 2) = v6;
  }
  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)this + 16 * v5;
  v11 = *(_DWORD *)(v10 + 12) - 1;
  *(_DWORD *)(v10 + 12) = v11;
  v12 = *(_QWORD *)(*(_QWORD *)v10 + 8 * v11);
  v13 = v5 + 1;
  if (v5 + 1 != a2)
  {
    do
    {
      v14 = *(_QWORD *)this + 16 * v13;
      *(_QWORD *)v14 = v12 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v14 + 8) = (v12 & 0x3F) + 1;
      *(_DWORD *)(v14 + 12) = v12 & 0x3F;
      v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFC0) + 8 * (v12 & 0x3F));
      ++v13;
    }
    while (a2 != v13);
    v9 = *(_QWORD *)this;
  }
  v15 = v9 + 16 * a2;
  *(_QWORD *)v15 = v12 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v15 + 8) = (v12 & 0x3F) + 1;
  *(_DWORD *)(v15 + 12) = v12 & 0x3F;
}

uint64_t llvm::IntervalMapImpl::Path::getRightSibling(llvm::IntervalMapImpl::Path *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  uint64_t result;
  unsigned int i;

  if (!a2)
    return 0;
  v2 = a2;
  v3 = 1;
  v4 = 0;
  v5 = *(_QWORD *)this;
  v6 = (int *)(*(_QWORD *)this + 16 * a2 - 4);
  while (--v2)
  {
    v7 = *v6;
    v8 = *(v6 - 1) - 1;
    v6 -= 4;
    if (v7 != v8)
    {
      v3 = v2 + 1;
      v4 = v2;
      goto LABEL_8;
    }
  }
  if (*(_DWORD *)(v5 + 12) == *(_DWORD *)(v5 + 8) - 1)
    return 0;
LABEL_8:
  result = *(_QWORD *)(*(_QWORD *)(v5 + 16 * v4) + 8 * (*(_DWORD *)(v5 + 16 * v4 + 12) + 1));
  for (i = a2 - v3; i; --i)
    result = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFC0);
  return result;
}

uint64_t *llvm::IntervalMapImpl::Path::moveRight(uint64_t *this, unsigned int a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v14;

  v2 = 0;
  v3 = *this;
  v4 = a2 - 1;
  while (1)
  {
    v5 = v2;
    v6 = v4 + v2;
    if (!(v4 + v2))
      break;
    v8 = *(_DWORD *)(v3 + 16 * v6 + 8);
    v7 = *(_DWORD *)(v3 + 16 * v6 + 12);
    --v2;
    if (v7 != v8 - 1)
    {
      v9 = v7 + 1;
      *(_DWORD *)(v3 + 16 * v6 + 12) = v9;
      if (v9 == v8)
        return this;
      goto LABEL_7;
    }
  }
  v6 = 0;
  v10 = *(_DWORD *)(v3 + 8);
  v9 = *(_DWORD *)(v3 + 12) + 1;
  *(_DWORD *)(v3 + 12) = v9;
  if (v9 == v10)
    return this;
LABEL_7:
  v11 = *(_QWORD *)(*(_QWORD *)(v3 + 16 * v6) + 8 * v9);
  if (v5)
  {
    do
    {
      v12 = *this + 16 * (a2 + v5);
      *(_QWORD *)v12 = v11 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v12 + 8) = (v11 & 0x3F) + 1;
      *(_DWORD *)(v12 + 12) = 0;
      v11 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFC0);
    }
    while (!__CFADD__(v5++, 1));
    v3 = *this;
  }
  v14 = (unint64_t *)(v3 + 16 * a2);
  *v14 = v11 & 0xFFFFFFFFFFFFFFC0;
  v14[1] = (v11 & 0x3F) + 1;
  return this;
}

unint64_t llvm::IntervalMapImpl::distribute(llvm::IntervalMapImpl *this, int a2, unsigned int a3, unsigned int a4, const unsigned int *a5, unsigned int *a6, int a7)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;

  if (!(_DWORD)this)
    return 0;
  v7 = 0;
  v8 = 0;
  LODWORD(v9) = 0;
  v10 = this;
  v11 = (a7 + a2) / this;
  v12 = (a7 + a2) % this;
  do
  {
    if (v7 >= v12)
      v13 = v11;
    else
      v13 = v11 + 1;
    a5[v7] = v13;
    v14 = (_DWORD)a6 - v8;
    v8 += v13;
    if ((_DWORD)this == (_DWORD)v10 && v8 > a6)
    {
      LODWORD(this) = v7;
      v9 = v14;
    }
    else
    {
      v9 = v9;
    }
    ++v7;
  }
  while (v10 != v7);
  if ((a7 & 1) != 0)
    --a5[this];
  return this | (unint64_t)(v9 << 32);
}

void llvm::ManagedStaticBase::RegisterManagedStatic(llvm::ManagedStaticBase *this, void *(*a2)(void), void (*a3)(void *))
{
  unsigned __int8 v6;
  uint64_t v7;

  v6 = atomic_load((unsigned __int8 *)&qword_1ECD331A0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECD331A0))
  {
    MEMORY[0x186DA1428](&stru_1ECD331A8);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4840], &stru_1ECD331A8, &dword_18013D000);
    __cxa_guard_release(&qword_1ECD331A0);
  }
  std::recursive_mutex::lock(&stru_1ECD331A8);
  if (!*(_QWORD *)this)
  {
    atomic_store((uint64_t)a2(), (unint64_t *)this);
    v7 = _MergedGlobals_49;
    *((_QWORD *)this + 1) = a3;
    *((_QWORD *)this + 2) = v7;
    _MergedGlobals_49 = (uint64_t)this;
  }
  std::recursive_mutex::unlock(&stru_1ECD331A8);
}

void llvm::deallocate_buffer(llvm *this, void *a2)
{
  JUMPOUT(0x186DA1674);
}

char *llvm::MemoryBuffer::getMemBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  char *result;
  _QWORD v9[4];
  __int16 v10;

  v10 = 261;
  v9[0] = a3;
  v9[1] = a4;
  result = operator new(24, (uint64_t)v9);
  *(_QWORD *)result = off_1E0E15D18;
  *((_QWORD *)result + 1) = a1;
  *((_QWORD *)result + 2) = a1 + a2;
  *a5 = result;
  return result;
}

char *operator new(uint64_t a1, uint64_t a2)
{
  size_t v3;
  const void *v4;
  char *v5;
  size_t *v6;
  void *v7;
  const char *v9;
  int v10;
  void *v11;
  __int128 v12;
  _QWORD v13[33];

  v13[32] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = xmmword_181236410;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v4 = *(const void **)a2;
        if (*(_QWORD *)a2)
          v3 = strlen(*(const char **)a2);
        else
          v3 = 0;
        break;
      case 4:
        v9 = *(const char **)a2;
        v10 = *(char *)(*(_QWORD *)a2 + 23);
        if (v10 >= 0)
          v4 = *(const void **)a2;
        else
          v4 = *(const void **)v9;
        if (v10 >= 0)
          v3 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
        else
          v3 = *((_QWORD *)v9 + 1);
        break;
      case 5:
      case 6:
        v4 = *(const void **)a2;
        v3 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector(a2, (uint64_t)&v11);
    v4 = v11;
    v3 = v12;
  }
  v5 = (char *)operator new(a1 + v3 + 9);
  v6 = (size_t *)&v5[a1];
  *v6 = v3;
  v7 = v6 + 1;
  if (v3)
    memcpy(v7, v4, v3);
  *((_BYTE *)v7 + v3) = 0;
  if (v11 != v13)
    free(v11);
  return v5;
}

char *llvm::MemoryBuffer::getMemBuffer@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  _QWORD v8[4];
  __int16 v9;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v9 = 261;
  v8[0] = v5;
  v8[1] = v6;
  result = operator new(24, (uint64_t)v8);
  *(_QWORD *)result = off_1E0E15D18;
  *((_QWORD *)result + 1) = v3;
  *((_QWORD *)result + 2) = v3 + v4;
  *a2 = result;
  return result;
}

void llvm::MemoryBuffer::getMemBufferCopy(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(a2, a3, a4, &v9);
  v8 = v9;
  if (v9)
  {
    if (a2)
      memmove(*(void **)(v9 + 8), a1, a2);
    *a5 = v8;
  }
  else
  {
    std::generic_category();
    *a5 = 0;
  }
}

void llvm::MemoryBuffer::getFileOrSTDIN(const char ***a1@<X0>, int a2@<W1>, int a3@<W2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  size_t v10;
  const char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _BYTE v19[256];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_181236410;
  if (*((_BYTE *)a1 + 33) == 1)
  {
    switch(*((_BYTE *)a1 + 32))
    {
      case 1:
        goto LABEL_14;
      case 3:
        v11 = (const char *)*a1;
        if (!*a1)
          goto LABEL_14;
        v10 = strlen((const char *)*a1);
        break;
      case 4:
        v16 = *((char *)*a1 + 23);
        if (v16 >= 0)
          v11 = (const char *)*a1;
        else
          v11 = **a1;
        if (v16 >= 0)
          v10 = *((unsigned __int8 *)*a1 + 23);
        else
          v10 = (size_t)(*a1)[1];
        break;
      case 5:
      case 6:
        v11 = (const char *)*a1;
        v10 = (size_t)a1[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v17);
    v11 = (const char *)v17;
    v10 = v18;
  }
  if (v10 == 1 && *v11 == 45)
  {
    llvm::sys::ChangeStdinMode();
    mlir::Diagnostic::operator mlir::LogicalResult();
    getMemoryBufferForStream();
    v12 = *(_BYTE *)(a5 + 16);
    if ((v22 & 1) != 0)
    {
      v15 = v21;
      *(_QWORD *)a5 = v20;
      *(_QWORD *)(a5 + 8) = v15;
      *(_BYTE *)(a5 + 16) = v12 | 1;
      v14 = v17;
      if (v17 == v19)
        return;
    }
    else
    {
      v13 = v20;
      *(_BYTE *)(a5 + 16) = v12 & 0xFE;
      *(_QWORD *)a5 = v13;
      v14 = v17;
      if (v17 == v19)
        return;
    }
  }
  else
  {
LABEL_14:
    getFileAux<llvm::MemoryBuffer>(a5, (unsigned __int8 *)a1, 0xFFFFFFFFFFFFFFFFLL, 0, a2, a3, 0, a4);
    v14 = v17;
    if (v17 == v19)
      return;
  }
  free(v14);
}

llvm::sys::fs *llvm::MemoryBuffer::getFile@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, unsigned __int16 a5@<W4>, uint64_t a6@<X8>)
{
  return getFileAux<llvm::MemoryBuffer>(a6, a1, 0xFFFFFFFFFFFFFFFFLL, 0, a2, a3, a4, a5);
}

llvm::sys::fs *getFileAux<llvm::MemoryBuffer>(uint64_t a1, unsigned __int8 *a2, unint64_t a3, off_t a4, int a5, int a6, char a7, unsigned __int16 a8)
{
  int v15;
  int *v16;
  llvm::sys::fs *result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  llvm::sys::fs *v21;
  llvm::sys::fs *v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a5)
    v15 = 3;
  else
    v15 = 0;
  llvm::sys::fs::openNativeFileForRead(a2, v15, 0, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    v21 = v22;
    v22 = 0;
    v18 = llvm::errorToErrorCode((_QWORD **)&v21);
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v19;
    result = v21;
    if (v21)
      result = (llvm::sys::fs *)(*(uint64_t (**)(llvm::sys::fs *))(*(_QWORD *)v21 + 8))(v21);
  }
  else
  {
    v20 = (int)v22;
    getOpenFileImpl<llvm::MemoryBuffer>(a1, (llvm::sys::fs *)v22, (llvm::sys::fs::file_status *)a2, -1, a3, a4, a6, a7, a8);
    result = (llvm::sys::fs *)llvm::sys::fs::closeFile((llvm::sys::fs *)&v20, v16);
  }
  if ((v23 & 1) != 0)
  {
    result = v22;
    v22 = 0;
    if (result)
      return (llvm::sys::fs *)(*(uint64_t (**)(llvm::sys::fs *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void llvm::WritableMemoryBuffer::getNewUninitMemBuffer(size_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  char v7;
  size_t v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[33];

  v21[32] = *MEMORY[0x1E0C80C00];
  v6 = a3 & 0xFF00;
  v7 = a3;
  v19 = v21;
  v20 = xmmword_181236410;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v8 = 0;
    v9 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v9 = *(const void **)a2;
        if (*(_QWORD *)a2)
          v8 = strlen(*(const char **)a2);
        else
          v8 = 0;
        break;
      case 4:
        v17 = *(const char **)a2;
        v18 = *(char *)(*(_QWORD *)a2 + 23);
        if (v18 >= 0)
          v9 = *(const void **)a2;
        else
          v9 = *(const void **)v17;
        if (v18 >= 0)
          v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
        else
          v8 = *((_QWORD *)v17 + 1);
        break;
      case 5:
      case 6:
        v9 = *(const void **)a2;
        v8 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector(a2, (uint64_t)&v19);
    v9 = v19;
    v8 = v20;
  }
  v10 = v8 + 33;
  if (v6)
    v11 = 1 << v7;
  else
    v11 = 16;
  v12 = a1 + v11 + v10 + 1;
  if (v12 <= a1)
  {
    v14 = 0;
  }
  else
  {
    v13 = operator new(v12, MEMORY[0x1E0DE4E10]);
    v14 = v13;
    if (v13)
    {
      v13[3] = v8;
      v15 = (char *)(v13 + 4);
      if (v8)
        memcpy(v13 + 4, v9, v8);
      v15[v8] = 0;
      v16 = ((unint64_t)v14 + v10 + v11 - 1) & -v11;
      *(_BYTE *)(v16 + a1) = 0;
      *v14 = off_1E0E15D50;
      v14[1] = v16;
      v14[2] = v16 + a1;
    }
  }
  *a4 = v14;
  if (v19 != v21)
    free(v19);
}

void llvm::MemoryBuffer::getOpenFile(llvm::sys::fs *a1@<X0>, llvm::sys::fs::file_status *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, unsigned __int16 a6@<W5>, uint64_t a7@<X8>)
{
  getOpenFileImpl<llvm::MemoryBuffer>(a7, a1, a2, a3, a3, 0, a4, a5, a6);
}

void getOpenFileImpl<llvm::MemoryBuffer>(uint64_t a1, llvm::sys::fs *this, llvm::sys::fs::file_status *a3, __darwin_time_t a4, unint64_t tv_sec, off_t a6, int a7, char a8, uint64_t a9)
{
  unsigned __int8 v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  char *v20;
  llvm::sys::Process *PageSizeEstimate;
  size_t v22;
  int v23;
  llvm::sys::Process *Loc;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const std::error_category *v35;
  char v36;
  char v37;
  uint64_t v38;
  __darwin_time_t v39;
  llvm::sys::Process *v40;
  _QWORD *v41;
  _QWORD v42[2];
  char v43;
  stat v44;

  v44.st_ctimespec.tv_nsec = *MEMORY[0x1E0C80C00];
  v16 = atomic_load((unsigned __int8 *)&qword_1ECD331F8);
  if ((v16 & 1) == 0)
  {
    v39 = a4;
    v40 = (llvm::sys::Process *)__cxa_guard_acquire(&qword_1ECD331F8);
    a4 = v39;
    if ((_DWORD)v40)
    {
      dword_1ECD331EC = llvm::sys::Process::getPageSizeEstimate(v40);
      __cxa_guard_release(&qword_1ECD331F8);
      a4 = v39;
    }
  }
  if (tv_sec == -1 && (tv_sec = a4, a4 == -1))
  {
    memset(&v44, 0, 44);
    *(uint64_t *)((char *)&v44.st_atimespec.tv_nsec + 4) = 0xFFFFLL;
    WORD2(v44.st_mtimespec.tv_sec) = 0;
    v44.st_mtimespec.tv_nsec = 0;
    v26 = llvm::sys::fs::status(this, &v44, a3);
    if ((_DWORD)v26)
    {
      *(_BYTE *)(a1 + 16) |= 1u;
      *(_QWORD *)a1 = v26;
      *(_QWORD *)(a1 + 8) = v27;
      return;
    }
    if (LODWORD(v44.st_atimespec.tv_nsec) != 2 && LODWORD(v44.st_atimespec.tv_nsec) != 5)
    {
      getMemoryBufferForStream();
      v36 = *(_BYTE *)(a1 + 16);
      if ((v43 & 1) != 0)
      {
        v37 = v36 | 1;
        v38 = v42[0];
        *(_QWORD *)(a1 + 8) = v42[1];
      }
      else
      {
        v37 = v36 & 0xFE;
        v38 = v42[0];
      }
      *(_BYTE *)(a1 + 16) = v37;
      *(_QWORD *)a1 = v38;
      return;
    }
    tv_sec = v44.st_atimespec.tv_sec;
    a4 = v44.st_atimespec.tv_sec;
    v17 = dword_1ECD331EC;
    if (a7)
    {
LABEL_5:
      if ((a8 & 1) != 0)
        goto LABEL_27;
    }
  }
  else
  {
    v17 = dword_1ECD331EC;
    if (a7)
      goto LABEL_5;
  }
  v18 = tv_sec >= 0x4000 && tv_sec >= v17;
  v19 = !v18;
  if (v18 && a7)
  {
    if (a4 == -1)
    {
      memset(&v44, 0, 44);
      *(uint64_t *)((char *)&v44.st_atimespec.tv_nsec + 4) = 0xFFFFLL;
      WORD2(v44.st_mtimespec.tv_sec) = 0;
      v44.st_mtimespec.tv_nsec = 0;
      if (llvm::sys::fs::status(this, &v44, a3))
        goto LABEL_27;
      a4 = v44.st_atimespec.tv_sec;
      if (tv_sec + a6 != v44.st_atimespec.tv_sec)
        goto LABEL_27;
LABEL_17:
      if ((a4 & ((int)v17 - 1)) == 0)
        goto LABEL_27;
LABEL_20:
      v44.st_dev = 0;
      v44.st_ino = (__darwin_ino64_t)std::system_category();
      v20 = operator new(48, (uint64_t)a3);
      *(_QWORD *)v20 = off_1E0E185A0;
      PageSizeEstimate = (llvm::sys::Process *)llvm::sys::Process::getPageSizeEstimate((llvm::sys::Process *)v20);
      v22 = (((int)PageSizeEstimate - 1) & (unint64_t)a6) + tv_sec;
      v23 = llvm::sys::Process::getPageSizeEstimate(PageSizeEstimate);
      llvm::sys::fs::mapped_file_region::mapped_file_region((uint64_t)(v20 + 24), (int)this, 0, v22, -v23 & (unint64_t)a6, &v44);
      if (!v44.st_dev)
      {
        Loc = (llvm::sys::Process *)mlir::Token::getLoc((mlir::Token *)(v20 + 24));
        v25 = (char *)Loc + ((int)(llvm::sys::Process::getPageSizeEstimate(Loc) - 1) & (unint64_t)a6);
        *((_QWORD *)v20 + 1) = v25;
        *((_QWORD *)v20 + 2) = &v25[tv_sec];
        if (!v44.st_dev)
        {
          *(_BYTE *)(a1 + 16) &= ~1u;
          *(_QWORD *)a1 = v20;
          return;
        }
      }
      (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
      goto LABEL_27;
    }
    if (tv_sec + a6 == a4)
      goto LABEL_17;
  }
  else if ((v19 & 1) == 0)
  {
    goto LABEL_20;
  }
LABEL_27:
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(tv_sec, (uint64_t)a3, a9, v42);
  if (!v42[0])
  {
    v35 = std::generic_category();
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = 12;
    *(_QWORD *)(a1 + 8) = v35;
    return;
  }
  v28 = *(char **)(v42[0] + 8);
  v29 = *(_QWORD *)(v42[0] + 16) - (_QWORD)v28;
  do
  {
    if (!v29)
      goto LABEL_44;
    llvm::sys::fs::readNativeFileSlice((int)this, v28, v29, a6, (uint64_t)&v44);
    if ((v44.st_ino & 1) != 0)
    {
      v31 = *(_QWORD **)&v44.st_dev;
      *(_QWORD *)&v44.st_dev = 0;
      v41 = v31;
      v32 = llvm::errorToErrorCode(&v41);
      *(_BYTE *)(a1 + 16) |= 1u;
      *(_QWORD *)a1 = v32;
      *(_QWORD *)(a1 + 8) = v33;
      if (v41)
      {
        (*(void (**)(_QWORD *))(*v41 + 8))(v41);
        v30 = 1;
        if ((v44.st_ino & 1) == 0)
          continue;
      }
      else
      {
        v30 = 1;
        if ((v44.st_ino & 1) == 0)
          continue;
      }
    }
    else if (*(_QWORD *)&v44.st_dev)
    {
      v30 = 0;
      v29 -= *(_QWORD *)&v44.st_dev;
      v28 += *(_QWORD *)&v44.st_dev;
      a6 += *(_QWORD *)&v44.st_dev;
      if ((v44.st_ino & 1) == 0)
        continue;
    }
    else
    {
      bzero(v28, v29);
      v30 = 3;
      if ((v44.st_ino & 1) == 0)
        continue;
    }
    v34 = *(_QWORD *)&v44.st_dev;
    *(_QWORD *)&v44.st_dev = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  while (!v30);
  if (v30 == 3)
  {
LABEL_44:
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = v42[0];
    return;
  }
  if (v42[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v42[0] + 8))(v42[0]);
}

void getMemoryBufferForStream()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  const std::error_category *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  _QWORD v16[2049];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = v0;
  v16[2048] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_18125E520;
  llvm::sys::fs::readNativeFileToEOF(v4, &v14, 0x4000uLL, &v13);
  if (v13)
  {
    v12 = (_QWORD *)v13;
    v13 = 0;
    v5 = llvm::errorToErrorCode(&v12);
    *(_BYTE *)(v3 + 16) |= 1u;
    *(_QWORD *)v3 = v5;
    *(_QWORD *)(v3 + 8) = v6;
    if (v12)
      (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v7 = v14;
      if (v14 == v16)
        return;
      goto LABEL_12;
    }
LABEL_11:
    v7 = v14;
    if (v14 == v16)
      return;
    goto LABEL_12;
  }
  v8 = v14;
  v9 = v15;
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(v15, v2, 0, &v13);
  v10 = v13;
  if (v13)
  {
    if (v9)
      memmove(*(void **)(v13 + 8), v8, v9);
    *(_BYTE *)(v3 + 16) &= ~1u;
    *(_QWORD *)v3 = v10;
    goto LABEL_11;
  }
  v11 = std::generic_category();
  *(_BYTE *)(v3 + 16) |= 1u;
  *(_QWORD *)v3 = 12;
  *(_QWORD *)(v3 + 8) = v11;
  v7 = v14;
  if (v14 == v16)
    return;
LABEL_12:
  free(v7);
}

uint64_t llvm::MemoryBuffer::getMemBufferRef@<X0>(llvm::MemoryBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2) - v3;
  result = (*(uint64_t (**)(llvm::MemoryBuffer *))(*(_QWORD *)this + 16))(this);
  *a2 = v3;
  a2[1] = v4;
  a2[2] = result;
  a2[3] = v6;
  return result;
}

uint64_t `anonymous namespace'::MemoryBufferMem<llvm::MemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 32;
}

uint64_t `anonymous namespace'::MemoryBufferMem<llvm::MemoryBuffer>::getBufferKind()
{
  return 0;
}

uint64_t llvm::sys::Process::getPageSizeEstimate(llvm::sys::Process *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  llvm::sys::Process::getPageSize((uint64_t)&v6);
  if ((v7 & 1) == 0)
    return v6;
  v2 = v6;
  v6 = 0;
  v4 = v2;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v4, &v5);
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  if ((v7 & 1) != 0)
  {
    v3 = v6;
    v6 = 0;
    if (v3)
      (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  }
  return 4096;
}

uint64_t `anonymous namespace'::MemoryBufferMem<llvm::WritableMemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 32;
}

uint64_t `anonymous namespace'::MemoryBufferMem<llvm::WritableMemoryBuffer>::getBufferKind()
{
  return 0;
}

_QWORD *`anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::~MemoryBufferMMapFile(_QWORD *a1)
{
  *a1 = off_1E0E185A0;
  llvm::sys::fs::mapped_file_region::unmapImpl((llvm::sys::fs::mapped_file_region *)(a1 + 3));
  return a1;
}

void `anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::~MemoryBufferMMapFile(_QWORD *a1)
{
  *a1 = off_1E0E185A0;
  llvm::sys::fs::mapped_file_region::unmapImpl((llvm::sys::fs::mapped_file_region *)(a1 + 3));
  operator delete(a1);
}

uint64_t `anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 56;
}

void *`anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::dontNeedIfMmap(uint64_t a1)
{
  return llvm::sys::fs::mapped_file_region::dontNeedImpl((llvm::sys::fs::mapped_file_region *)(a1 + 24));
}

uint64_t `anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::getBufferKind()
{
  return 1;
}

llvm::MemoryBufferRef *llvm::MemoryBufferRef::MemoryBufferRef(llvm::MemoryBufferRef *this, const llvm::MemoryBuffer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2) - v3;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(_QWORD *)a2 + 16))(a2);
  *((_QWORD *)this + 3) = v5;
  return this;
}

int *llvm::MD5::body(int *a1, int *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v88;

  v3 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  do
  {
    v88 = v5;
    v7 = *a2;
    a1[22] = *a2;
    HIDWORD(v8) = v3 + (v6 & v4 | v5 & ~v4) - 680876936 + v7;
    LODWORD(v8) = HIDWORD(v8);
    v9 = (v8 >> 25) + v4;
    v10 = a2[1];
    a1[23] = v10;
    HIDWORD(v8) = v88 + v10 - 389564586 + (v4 & v9 | v6 & ~v9);
    LODWORD(v8) = HIDWORD(v8);
    v11 = (v8 >> 20) + v9;
    v12 = a2[2];
    a1[24] = v12;
    HIDWORD(v8) = v6 + v12 + 606105819 + (v9 & v11 | v4 & ~v11);
    LODWORD(v8) = HIDWORD(v8);
    v13 = (v8 >> 15) + v11;
    v14 = a2[3];
    HIDWORD(v8) = v4 + v14 - 1044525330 + (v11 & v13 | v9 & ~v13);
    LODWORD(v8) = HIDWORD(v8);
    a1[25] = v14;
    v15 = (v8 >> 10) + v13;
    v16 = a2[4];
    a1[26] = v16;
    HIDWORD(v8) = v9 + v16 - 176418897 + (v13 & v15 | v11 & ~v15);
    LODWORD(v8) = HIDWORD(v8);
    v17 = (v8 >> 25) + v15;
    v18 = a2[5];
    a1[27] = v18;
    HIDWORD(v8) = v11 + v18 + 1200080426 + (v15 & v17 | v13 & ~v17);
    LODWORD(v8) = HIDWORD(v8);
    v19 = (v8 >> 20) + v17;
    v20 = a2[6];
    a1[28] = v20;
    HIDWORD(v8) = v13 + v20 - 1473231341 + (v17 & v19 | v15 & ~v19);
    LODWORD(v8) = HIDWORD(v8);
    v21 = (v8 >> 15) + v19;
    v22 = a2[7];
    a1[29] = v22;
    HIDWORD(v8) = v15 + v22 - 45705983 + (v19 & v21 | v17 & ~v21);
    LODWORD(v8) = HIDWORD(v8);
    v23 = (v8 >> 10) + v21;
    v24 = a2[8];
    a1[30] = v24;
    HIDWORD(v8) = v17 + v24 + 1770035416 + (v21 & v23 | v19 & ~v23);
    LODWORD(v8) = HIDWORD(v8);
    v25 = (v8 >> 25) + v23;
    v26 = a2[9];
    HIDWORD(v8) = v19 + v26 - 1958414417 + (v23 & v25 | v21 & ~v25);
    LODWORD(v8) = HIDWORD(v8);
    a1[31] = v26;
    v27 = (v8 >> 20) + v25;
    v28 = a2[10];
    a1[32] = v28;
    HIDWORD(v8) = v21 + v28 - 42063 + (v25 & v27 | v23 & ~v27);
    LODWORD(v8) = HIDWORD(v8);
    v29 = (v8 >> 15) + v27;
    v30 = a2[11];
    a1[33] = v30;
    HIDWORD(v8) = v23 + v30 - 1990404162 + (v27 & v29 | v25 & ~v29);
    LODWORD(v8) = HIDWORD(v8);
    v31 = (v8 >> 10) + v29;
    v32 = a2[12];
    a1[34] = v32;
    HIDWORD(v8) = v32 + v25 + 1804603682 + (v29 & v31 | v27 & ~v31);
    LODWORD(v8) = HIDWORD(v8);
    v33 = (v8 >> 25) + v31;
    v34 = a2[13];
    a1[35] = v34;
    HIDWORD(v8) = v34 + v27 - 40341101 + (v31 & v33 | v29 & ~v33);
    LODWORD(v8) = HIDWORD(v8);
    v35 = (v8 >> 20) + v33;
    v36 = a2[14];
    a1[36] = v36;
    HIDWORD(v8) = v36 + v29 - 1502002290 + (v33 & v35 | v31 & ~v35);
    LODWORD(v8) = HIDWORD(v8);
    v37 = (v8 >> 15) + v35;
    v38 = a2[15];
    HIDWORD(v8) = v38 + v31 + 1236535329 + (v35 & v37 | v33 & ~v37);
    LODWORD(v8) = HIDWORD(v8);
    v39 = (v8 >> 10) + v37;
    HIDWORD(v8) = v10 + v33 - 165796510 + (v39 & v35 | v37 & ~v35);
    LODWORD(v8) = HIDWORD(v8);
    v40 = (v8 >> 27) + v39;
    HIDWORD(v8) = v20 + v35 - 1069501632 + (v40 & v37 | v39 & ~v37);
    LODWORD(v8) = HIDWORD(v8);
    v41 = (v8 >> 23) + v40;
    HIDWORD(v8) = v30 + v37 + 643717713 + (v41 & v39 | v40 & ~v39);
    LODWORD(v8) = HIDWORD(v8);
    v42 = (v8 >> 18) + v41;
    HIDWORD(v8) = v7 + v39 - 373897302 + (v42 & v40 | v41 & ~v40);
    LODWORD(v8) = HIDWORD(v8);
    v43 = (v8 >> 12) + v42;
    HIDWORD(v8) = v18 + v40 - 701558691 + (v43 & v41 | v42 & ~v41);
    LODWORD(v8) = HIDWORD(v8);
    v44 = (v8 >> 27) + v43;
    HIDWORD(v8) = v28 + v41 + 38016083 + (v44 & v42 | v43 & ~v42);
    LODWORD(v8) = HIDWORD(v8);
    v45 = (v8 >> 23) + v44;
    HIDWORD(v8) = v38 + v42 - 660478335 + (v45 & v43 | v44 & ~v43);
    LODWORD(v8) = HIDWORD(v8);
    v46 = (v8 >> 18) + v45;
    HIDWORD(v8) = v16 + v43 - 405537848 + (v46 & v44 | v45 & ~v44);
    LODWORD(v8) = HIDWORD(v8);
    v47 = (v8 >> 12) + v46;
    HIDWORD(v8) = v26 + v44 + 568446438 + (v47 & v45 | v46 & ~v45);
    LODWORD(v8) = HIDWORD(v8);
    v48 = (v8 >> 27) + v47;
    HIDWORD(v8) = v36 + v45 - 1019803690 + (v48 & v46 | v47 & ~v46);
    LODWORD(v8) = HIDWORD(v8);
    v49 = (v8 >> 23) + v48;
    HIDWORD(v8) = v14 + v46 - 187363961 + (v49 & v47 | v48 & ~v47);
    LODWORD(v8) = HIDWORD(v8);
    v50 = (v8 >> 18) + v49;
    HIDWORD(v8) = v24 + v47 + 1163531501 + (v50 & v48 | v49 & ~v48);
    LODWORD(v8) = HIDWORD(v8);
    v51 = (v8 >> 12) + v50;
    HIDWORD(v8) = v34 + v48 - 1444681467 + (v51 & v49 | v50 & ~v49);
    LODWORD(v8) = HIDWORD(v8);
    v52 = (v8 >> 27) + v51;
    HIDWORD(v8) = v12 + v49 - 51403784 + (v52 & v50 | v51 & ~v50);
    LODWORD(v8) = HIDWORD(v8);
    v53 = (v8 >> 23) + v52;
    HIDWORD(v8) = v22 + v50 + 1735328473 + (v53 & v51 | v52 & ~v51);
    LODWORD(v8) = HIDWORD(v8);
    v54 = (v8 >> 18) + v53;
    HIDWORD(v8) = v32 + v51 - 1926607734 + ((v54 ^ v53) & v52 ^ v53);
    LODWORD(v8) = HIDWORD(v8);
    v55 = (v8 >> 12) + v54;
    HIDWORD(v8) = v18 + v52 - 378558 + (v54 ^ v53 ^ v55);
    LODWORD(v8) = HIDWORD(v8);
    v56 = (v8 >> 28) + v55;
    HIDWORD(v8) = v24 + v53 - 2022574463 + (v55 ^ v54 ^ v56);
    LODWORD(v8) = HIDWORD(v8);
    v57 = (v8 >> 21) + v56;
    HIDWORD(v8) = v30 + v54 + 1839030562 + (v56 ^ v55 ^ v57);
    LODWORD(v8) = HIDWORD(v8);
    v58 = (v8 >> 16) + v57;
    HIDWORD(v8) = v36 + v55 - 35309556 + (v57 ^ v56 ^ v58);
    LODWORD(v8) = HIDWORD(v8);
    v59 = (v8 >> 9) + v58;
    HIDWORD(v8) = v10 + v56 - 1530992060 + (v58 ^ v57 ^ v59);
    LODWORD(v8) = HIDWORD(v8);
    v60 = (v8 >> 28) + v59;
    HIDWORD(v8) = v16 + v57 + 1272893353 + (v59 ^ v58 ^ v60);
    LODWORD(v8) = HIDWORD(v8);
    v61 = (v8 >> 21) + v60;
    HIDWORD(v8) = v22 + v58 - 155497632 + (v60 ^ v59 ^ v61);
    LODWORD(v8) = HIDWORD(v8);
    v62 = (v8 >> 16) + v61;
    HIDWORD(v8) = v28 + v59 - 1094730640 + (v61 ^ v60 ^ v62);
    LODWORD(v8) = HIDWORD(v8);
    v63 = (v8 >> 9) + v62;
    HIDWORD(v8) = v34 + v60 + 681279174 + (v62 ^ v61 ^ v63);
    LODWORD(v8) = HIDWORD(v8);
    v64 = (v8 >> 28) + v63;
    HIDWORD(v8) = v7 + v61 - 358537222 + (v63 ^ v62 ^ v64);
    LODWORD(v8) = HIDWORD(v8);
    v65 = (v8 >> 21) + v64;
    HIDWORD(v8) = v14 + v62 - 722521979 + (v64 ^ v63 ^ v65);
    LODWORD(v8) = HIDWORD(v8);
    v66 = (v8 >> 16) + v65;
    HIDWORD(v8) = v20 + v63 + 76029189 + (v65 ^ v64 ^ v66);
    LODWORD(v8) = HIDWORD(v8);
    v67 = (v8 >> 9) + v66;
    HIDWORD(v8) = v26 + v64 - 640364487 + (v66 ^ v65 ^ v67);
    LODWORD(v8) = HIDWORD(v8);
    v68 = (v8 >> 28) + v67;
    HIDWORD(v8) = v32 + v65 - 421815835 + (v67 ^ v66 ^ v68);
    LODWORD(v8) = HIDWORD(v8);
    v69 = (v8 >> 21) + v68;
    HIDWORD(v8) = v38 + v66 + 530742520 + (v68 ^ v67 ^ v69);
    LODWORD(v8) = HIDWORD(v8);
    v70 = (v8 >> 16) + v69;
    HIDWORD(v8) = v12 + v67 - 995338651 + (v69 ^ v68 ^ v70);
    LODWORD(v8) = HIDWORD(v8);
    v71 = (v8 >> 9) + v70;
    HIDWORD(v8) = v7 + v68 - 198630844 + ((v71 | ~v69) ^ v70);
    LODWORD(v8) = HIDWORD(v8);
    v72 = (v8 >> 26) + v71;
    HIDWORD(v8) = v22 + v69 + 1126891415 + ((v72 | ~v70) ^ v71);
    LODWORD(v8) = HIDWORD(v8);
    v73 = (v8 >> 22) + v72;
    HIDWORD(v8) = v36 + v70 - 1416354905 + ((v73 | ~v71) ^ v72);
    LODWORD(v8) = HIDWORD(v8);
    v74 = (v8 >> 17) + v73;
    HIDWORD(v8) = v18 + v71 - 57434055 + ((v74 | ~v72) ^ v73);
    LODWORD(v8) = HIDWORD(v8);
    v75 = (v8 >> 11) + v74;
    HIDWORD(v8) = v32 + v72 + 1700485571 + ((v75 | ~v73) ^ v74);
    LODWORD(v8) = HIDWORD(v8);
    v76 = (v8 >> 26) + v75;
    HIDWORD(v8) = v14 + v73 - 1894986606 + ((v76 | ~v74) ^ v75);
    LODWORD(v8) = HIDWORD(v8);
    v77 = (v8 >> 22) + v76;
    HIDWORD(v8) = v28 + v74 - 1051523 + ((v77 | ~v75) ^ v76);
    LODWORD(v8) = HIDWORD(v8);
    v78 = (v8 >> 17) + v77;
    HIDWORD(v8) = v10 + v75 - 2054922799 + ((v78 | ~v76) ^ v77);
    LODWORD(v8) = HIDWORD(v8);
    v79 = (v8 >> 11) + v78;
    HIDWORD(v8) = v24 + v76 + 1873313359 + ((v79 | ~v77) ^ v78);
    LODWORD(v8) = HIDWORD(v8);
    v80 = (v8 >> 26) + v79;
    HIDWORD(v8) = v38 + v77 - 30611744 + ((v80 | ~v78) ^ v79);
    LODWORD(v8) = HIDWORD(v8);
    v81 = (v8 >> 22) + v80;
    HIDWORD(v8) = v20 + v78 - 1560198380 + ((v81 | ~v79) ^ v80);
    LODWORD(v8) = HIDWORD(v8);
    v82 = (v8 >> 17) + v81;
    HIDWORD(v8) = v34 + v79 + 1309151649 + ((v82 | ~v80) ^ v81);
    LODWORD(v8) = HIDWORD(v8);
    v83 = (v8 >> 11) + v82;
    HIDWORD(v8) = v16 + v80 - 145523070 + ((v83 | ~v81) ^ v82);
    LODWORD(v8) = HIDWORD(v8);
    v84 = (v8 >> 26) + v83;
    HIDWORD(v8) = v30 + v81 - 1120210379 + ((v84 | ~v82) ^ v83);
    LODWORD(v8) = HIDWORD(v8);
    a1[37] = v38;
    v85 = (v8 >> 22) + v84;
    HIDWORD(v8) = v12 + v82 + 718787259 + ((v85 | ~v83) ^ v84);
    LODWORD(v8) = HIDWORD(v8);
    v86 = (v8 >> 17) + v85;
    v3 += v84;
    HIDWORD(v8) = v26 + v83 - 343485551 + ((v86 | ~v84) ^ v85);
    LODWORD(v8) = HIDWORD(v8);
    v4 += v86 + (v8 >> 11);
    v6 += v86;
    v5 = v85 + v88;
    a2 += 16;
    a3 -= 64;
  }
  while (a3);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v6;
  a1[3] = v5;
  return a2;
}

uint64_t llvm::MD5::hash(int *a1, size_t __n)
{
  int *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  __int128 v9;
  int v10;
  int v11;
  int v12[32];
  uint64_t v13;

  v3 = a1;
  v13 = *MEMORY[0x1E0C80C00];
  v9 = xmmword_18125E630;
  v4 = __n;
  v10 = __n >> 29;
  v11 = __n & 0x1FFFFFFF;
  if (__n >= 0x40)
  {
    v3 = llvm::MD5::body((int *)&v9, a1, __n & 0xFFFFFFFFFFFFFFC0);
    __n &= 0x3Fu;
    v4 = v11;
  }
  memcpy(v12, v3, __n);
  v5 = v4 & 0x3F;
  v6 = v5 + 1;
  *((_BYTE *)v12 + v5) = 0x80;
  if ((v5 ^ 0x3FuLL) >= 8)
  {
    v7 = 55 - v5;
  }
  else
  {
    bzero((char *)v12 + v6, v5 ^ 0x3F);
    llvm::MD5::body((int *)&v9, v12, 64);
    v6 = 0;
    v7 = 56;
  }
  bzero((char *)v12 + v6, v7);
  v11 *= 8;
  v12[14] = v11;
  v12[15] = v10;
  llvm::MD5::body((int *)&v9, v12, 64);
  return v9;
}

llvm::raw_ostream *llvm::write_integer(llvm::raw_ostream *a1, unsigned int a2, size_t a3, int a4)
{
  return write_unsigned_impl<unsigned int>(a1, a2, a3, a4, 0);
}

{
  int v4;

  if ((a2 & 0x80000000) != 0)
  {
    a2 = -a2;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return write_unsigned_impl<unsigned int>(a1, a2, a3, a4, v4);
}

llvm::raw_ostream *llvm::write_integer(llvm::raw_ostream *a1, unint64_t a2, size_t a3, int a4)
{
  return write_unsigned<unsigned long>(a1, a2, a3, a4, 0);
}

{
  int v4;

  if ((a2 & 0x8000000000000000) != 0)
  {
    a2 = -(uint64_t)a2;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return write_unsigned<unsigned long>(a1, a2, a3, a4, v4);
}

llvm::raw_ostream *write_unsigned<unsigned long>(llvm::raw_ostream *this, unint64_t a2, size_t a3, int a4, int a5)
{
  llvm::raw_ostream *result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  _BYTE *v15;
  const char *v16;
  unint64_t v17;
  size_t v18;
  size_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!HIDWORD(a2))
    return write_unsigned_impl<unsigned int>(this, a2, a3, a4, a5);
  v9 = 0;
  v10 = 0;
  do
  {
    v22[v10-- + 127] = (a2 % 0xA) | 0x30;
    v9 += 0x100000000;
    v11 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v11);
  v12 = v9 >> 32;
  if (!a5)
  {
LABEL_8:
    if (a4 != 1)
      goto LABEL_9;
    goto LABEL_14;
  }
  v13 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v13 < *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 4) = v13 + 1;
    *v13 = 45;
    goto LABEL_8;
  }
  llvm::raw_ostream::write(this, 45);
  if (a4 != 1)
  {
LABEL_9:
    if (v12 < a3)
    {
      v14 = v12;
      do
      {
        while (1)
        {
          v15 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v15 >= *((_QWORD *)this + 3))
            break;
          *((_QWORD *)this + 4) = v15 + 1;
          *v15 = 48;
          if (++v14 >= a3)
            goto LABEL_14;
        }
        llvm::raw_ostream::write(this, 48);
        ++v14;
      }
      while (v14 < a3);
    }
  }
LABEL_14:
  v16 = (char *)&v23 - v12;
  if (a4 != 1)
    return llvm::raw_ostream::write(this, v16, v12);
  v17 = (v12 - 1) % 3;
  v18 = v12 - (v17 + 1);
  if (v12 >= v17 + 1)
    v19 = v17 + 1;
  else
    v19 = v12;
  result = llvm::raw_ostream::write(this, v16, v19);
  if (v18)
  {
    v20 = -3 * ((-(int)v10 - 1) / 3uLL);
    do
    {
      v21 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v21 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v21 + 1;
        *v21 = 44;
      }
      else
      {
        llvm::raw_ostream::write(this, 44);
      }
      result = llvm::raw_ostream::write(this, (const char *)&v23 + v20, 3uLL);
      v20 += 3;
    }
    while (v20);
  }
  return result;
}

llvm::raw_ostream *llvm::write_hex(llvm::raw_ostream *a1, unint64_t a2, int a3, unint64_t a4, char a5)
{
  unsigned int v5;
  __int128 v6;
  size_t v7;
  char *v8;
  BOOL v9;
  _OWORD v11[8];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (a4 > 0x7F)
      LODWORD(a4) = 128;
  }
  else
  {
    LODWORD(a4) = 0;
  }
  v5 = (67 - __clz(a2)) >> 2;
  if (v5 <= 1)
    v5 = 1;
  *(_QWORD *)&v6 = 0x3030303030303030;
  *((_QWORD *)&v6 + 1) = 0x3030303030303030;
  v11[6] = v6;
  v11[7] = v6;
  v11[4] = v6;
  v11[5] = v6;
  LODWORD(v7) = v5 + 2 * ((a3 & 0xFFFFFFFE) == 2);
  v11[2] = v6;
  v11[3] = v6;
  if (v7 <= a4)
    v7 = a4;
  else
    v7 = v7;
  v11[0] = v6;
  v11[1] = v6;
  if ((a3 & 0xFFFFFFFE) == 2)
    BYTE1(v11[0]) = 120;
  if (a2)
  {
    v8 = (char *)&v11[-1] + v7 + 15;
    do
    {
      *v8-- = llvm::hexdigit(unsigned int,BOOL)::LUT[a2 & 0xF] | (32 * ((a3 & 0xFFFFFFFD) != 0));
      v9 = a2 > 0xF;
      a2 >>= 4;
    }
    while (v9);
  }
  return llvm::raw_ostream::write(a1, (const char *)v11, v7);
}

void llvm::write_double(llvm::raw_ostream *this, unsigned int a2, unint64_t a3, char a4, double a5)
{
  uint64_t v6;
  unint64_t v7;
  const char *v9;
  size_t v10;
  void *v11;
  char v13;
  char v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  char *v21;
  double v22;
  uint64_t v23;
  size_t v24;
  _BYTE *v25;
  void (**v26)(llvm::raw_svector_ostream *__hidden);
  int v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  char v31;
  uint64_t v32;
  int v33;
  const char **v34;
  char __str[32];
  char *v36;
  __int128 v37;
  _QWORD v38[2];

  v38[1] = *MEMORY[0x1E0C80C00];
  v6 = 2;
  if (a2 < 2)
    v6 = 6;
  if (a4)
    v7 = a3;
  else
    v7 = v6;
  if (fabs(a5) != INFINITY)
  {
    if (a2 == 1)
      v13 = 69;
    else
      v13 = 102;
    if (a2)
      v14 = v13;
    else
      v14 = 101;
    v36 = (char *)v38;
    v37 = xmmword_1812349A0;
    v27 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 1;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    v26 = off_1E0E22B88;
    v34 = (const char **)&v36;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v26, 0, 0, 0);
    if ((unint64_t)(v29 - (_QWORD)v30) > 1)
    {
      *v30++ = 11813;
      v16 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v26, v7);
      v17 = (char *)*((_QWORD *)v16 + 4);
      if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
      {
LABEL_23:
        llvm::raw_ostream::write(v16, v14);
        if (a2 != 3)
        {
LABEL_24:
          v18 = v37;
          if ((unint64_t)(v37 + 1) > *((_QWORD *)&v37 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v37 + 1, 1);
            v18 = v37;
          }
          v36[v18] = 0;
          snprintf(__str, 0x20uLL, v36, *(_QWORD *)&a5);
          v19 = strlen(__str);
          v20 = (void *)*((_QWORD *)this + 4);
          if (v19 > *((_QWORD *)this + 3) - (_QWORD)v20)
          {
            llvm::raw_ostream::write(this, __str, v19);
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
            v21 = v36;
            if (v36 == (char *)v38)
              return;
            goto LABEL_44;
          }
          if (v19)
          {
            memcpy(v20, __str, v19);
            *((_QWORD *)this + 4) += v19;
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
            v21 = v36;
            if (v36 == (char *)v38)
              return;
            goto LABEL_44;
          }
          goto LABEL_43;
        }
LABEL_32:
        v22 = a5 * 100.0;
        v23 = v37;
        if ((unint64_t)(v37 + 1) > *((_QWORD *)&v37 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v37 + 1, 1);
          v23 = v37;
        }
        v36[v23] = 0;
        snprintf(__str, 0x20uLL, v36, *(_QWORD *)&v22);
        v24 = strlen(__str);
        v25 = (_BYTE *)*((_QWORD *)this + 4);
        if (v24 <= *((_QWORD *)this + 3) - (_QWORD)v25)
        {
          if (v24)
          {
            memcpy(v25, __str, v24);
            v25 = (_BYTE *)(*((_QWORD *)this + 4) + v24);
            *((_QWORD *)this + 4) = v25;
          }
        }
        else
        {
          llvm::raw_ostream::write(this, __str, v24);
          v25 = (_BYTE *)*((_QWORD *)this + 4);
        }
        if ((unint64_t)v25 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 37);
          llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
          v21 = v36;
          if (v36 == (char *)v38)
            return;
LABEL_44:
          free(v21);
          return;
        }
        *((_QWORD *)this + 4) = v25 + 1;
        *v25 = 37;
LABEL_43:
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v26);
        v21 = v36;
        if (v36 == (char *)v38)
          return;
        goto LABEL_44;
      }
    }
    else
    {
      v15 = llvm::raw_ostream::write((llvm::raw_ostream *)&v26, "%.", 2uLL);
      v16 = llvm::raw_ostream::operator<<(v15, v7);
      v17 = (char *)*((_QWORD *)v16 + 4);
      if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
        goto LABEL_23;
    }
    *((_QWORD *)v16 + 4) = v17 + 1;
    *v17 = v14;
    if (a2 != 3)
      goto LABEL_24;
    goto LABEL_32;
  }
  if (a5 >= 0.0)
    v9 = "INF";
  else
    v9 = "-INF";
  if (a5 >= 0.0)
    v10 = 3;
  else
    v10 = 4;
  v11 = (void *)*((_QWORD *)this + 4);
  if (v10 <= *((_QWORD *)this + 3) - (_QWORD)v11)
  {
    memcpy(v11, v9, v10);
    *((_QWORD *)this + 4) += v10;
  }
  else
  {
    llvm::raw_ostream::write(this, v9, v10);
  }
}

BOOL llvm::isPrefixedHexStyle(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

llvm::raw_ostream *write_unsigned_impl<unsigned int>(llvm::raw_ostream *this, unsigned int a2, size_t a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  _BYTE *v14;
  const char *v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  llvm::raw_ostream *result;
  unint64_t v20;
  _BYTE *v21;
  _BYTE v22[128];
  uint64_t v23;

  v8 = 0;
  v9 = 0;
  v23 = *MEMORY[0x1E0C80C00];
  do
  {
    v22[v9-- + 127] = (a2 % 0xA) | 0x30;
    v8 += 0x100000000;
    v10 = a2 > 9;
    a2 /= 0xAu;
  }
  while (v10);
  v11 = v8 >> 32;
  if (!a5)
  {
LABEL_6:
    if (a4 == 1)
      goto LABEL_14;
    goto LABEL_9;
  }
  v12 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v12 < *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 4) = v12 + 1;
    *v12 = 45;
    goto LABEL_6;
  }
  llvm::raw_ostream::write(this, 45);
  if (a4 == 1)
    goto LABEL_14;
LABEL_9:
  if (v11 < a3)
  {
    v13 = v11;
    do
    {
      while (1)
      {
        v14 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v14 >= *((_QWORD *)this + 3))
          break;
        *((_QWORD *)this + 4) = v14 + 1;
        *v14 = 48;
        if (++v13 >= a3)
          goto LABEL_14;
      }
      llvm::raw_ostream::write(this, 48);
      ++v13;
    }
    while (v13 < a3);
  }
LABEL_14:
  v15 = (char *)&v23 - v11;
  if (a4 != 1)
    return llvm::raw_ostream::write(this, v15, v11);
  v16 = (v11 - 1) % 3;
  v17 = v11 - (v16 + 1);
  if (v11 >= v16 + 1)
    v18 = v16 + 1;
  else
    v18 = v11;
  result = llvm::raw_ostream::write(this, v15, v18);
  if (v17)
  {
    v20 = -3 * ((-(int)v9 - 1) / 3uLL);
    do
    {
      v21 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v21 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v21 + 1;
        *v21 = 44;
      }
      else
      {
        llvm::raw_ostream::write(this, 44);
      }
      result = llvm::raw_ostream::write(this, (const char *)&v23 + v20, 3uLL);
      v20 += 3;
    }
    while (v20);
  }
  return result;
}

llvm::PrettyStackTraceEntry *llvm::PrettyStackTraceEntry::PrettyStackTraceEntry(llvm::PrettyStackTraceEntry *this)
{
  int v2;
  llvm *v3;
  BOOL v4;
  _DWORD *v5;
  llvm::raw_ostream *v6;
  _QWORD *v7;

  *(_QWORD *)this = off_1E0E22C88;
  v2 = GlobalSigInfoGenerationCounter;
  v3 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v3)
    v4 = *(_DWORD *)v3 == v2;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = v3;
    v6 = (llvm::raw_ostream *)llvm::errs(v3);
    PrintCurStackTrace(v6);
    *v5 = v2;
  }
  v7 = (_QWORD *)PrettyStackTraceHead();
  *((_QWORD *)this + 1) = *v7;
  *v7 = this;
  return this;
}

void llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry(llvm::PrettyStackTraceEntry *this)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  llvm *v4;
  BOOL v5;
  _DWORD *v6;
  llvm::raw_ostream *v7;

  *(_QWORD *)this = off_1E0E22C88;
  v1 = (_QWORD *)PrettyStackTraceHead();
  *v1 = v2;
  v3 = GlobalSigInfoGenerationCounter;
  v4 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v4)
    v5 = *(_DWORD *)v4 == v3;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = v4;
    v7 = (llvm::raw_ostream *)llvm::errs(v4);
    PrintCurStackTrace(v7);
    *v6 = v3;
  }
}

llvm::PrettyStackTraceFormat *llvm::PrettyStackTraceFormat::PrettyStackTraceFormat(llvm::PrettyStackTraceFormat *this, const char *a2, ...)
{
  int v4;
  llvm *v5;
  BOOL v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  _QWORD *v9;
  char **v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)this = off_1E0E22C88;
  v4 = GlobalSigInfoGenerationCounter;
  v5 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v5)
    v6 = *(_DWORD *)v5 == v4;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = v5;
    v8 = (llvm::raw_ostream *)llvm::errs(v5);
    PrintCurStackTrace(v8);
    *v7 = v4;
  }
  v9 = (_QWORD *)PrettyStackTraceHead();
  *((_QWORD *)this + 1) = *v9;
  *v9 = this;
  *((_QWORD *)this + 2) = (char *)this + 40;
  v10 = (char **)((char *)this + 16);
  *(_QWORD *)this = off_1E0E22D28;
  *(_OWORD *)((char *)this + 24) = xmmword_181233280;
  v11 = vsnprintf(0, 0, a2, va);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = (v11 + 1);
    v13 = *((_QWORD *)this + 3);
    if (v13 != v12)
    {
      if (v13 <= v12)
      {
        if (*((_QWORD *)this + 4) < v12)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)this + 16, (char *)this + 40, v12, 1);
          v13 = *((_QWORD *)this + 3);
        }
        if (v12 != v13)
          bzero(&(*v10)[v13], v12 - v13);
      }
      *((_QWORD *)this + 3) = v12;
    }
    vsnprintf(*v10, v12, a2, va);
  }
  return this;
}

llvm::raw_ostream *llvm::PrettyStackTraceFormat::print(llvm::PrettyStackTraceFormat *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *result;
  _BYTE *v3;

  result = llvm::raw_ostream::write(a2, *((const char **)this + 2), *((_QWORD *)this + 3));
  v3 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v3)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v3 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

void llvm::PrettyStackTraceFormat::~PrettyStackTraceFormat(llvm::PrettyStackTraceFormat *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  llvm *v6;
  BOOL v7;
  _DWORD *v8;
  llvm::raw_ostream *v9;

  *(_QWORD *)this = off_1E0E22D28;
  v2 = (char *)*((_QWORD *)this + 2);
  if (v2 != (char *)this + 40)
    free(v2);
  *(_QWORD *)this = off_1E0E22C88;
  v3 = (_QWORD *)PrettyStackTraceHead();
  *v3 = v4;
  v5 = GlobalSigInfoGenerationCounter;
  v6 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v6)
    v7 = *(_DWORD *)v6 == v5;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = v6;
    v9 = (llvm::raw_ostream *)llvm::errs(v6);
    PrintCurStackTrace(v9);
    *v8 = v5;
  }
}

{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  llvm *v6;
  BOOL v7;
  _DWORD *v8;
  llvm::raw_ostream *v9;

  *(_QWORD *)this = off_1E0E22D28;
  v2 = (char *)*((_QWORD *)this + 2);
  if (v2 != (char *)this + 40)
    free(v2);
  *(_QWORD *)this = off_1E0E22C88;
  v3 = (_QWORD *)PrettyStackTraceHead();
  *v3 = v4;
  v5 = GlobalSigInfoGenerationCounter;
  v6 = (llvm *)ThreadLocalSigInfoGenerationCounter();
  if (*(_DWORD *)v6)
    v7 = *(_DWORD *)v6 == v5;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = v6;
    v9 = (llvm::raw_ostream *)llvm::errs(v6);
    PrintCurStackTrace(v9);
    *v8 = v5;
  }
  operator delete(this);
}

void PrintCurStackTrace(llvm::raw_ostream *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  llvm::raw_ostream *v11;
  _WORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v15;

  v2 = (_QWORD *)PrettyStackTraceHead();
  if (*v2)
  {
    v3 = v2;
    v4 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v4) > 0xB)
    {
      *(_DWORD *)(v4 + 8) = 171602029;
      *(_QWORD *)v4 = *(_QWORD *)"Stack dump:\n";
      *((_QWORD *)a1 + 4) += 12;
      v5 = (_QWORD *)*v2;
      *v2 = 0;
      if (!v5)
        goto LABEL_15;
    }
    else
    {
      llvm::raw_ostream::write(a1, "Stack dump:\n", 0xCuLL);
      v5 = (_QWORD *)*v3;
      *v3 = 0;
      if (!v5)
      {
LABEL_15:
        *v3 = v5;
        if (*((_QWORD *)a1 + 4) != *((_QWORD *)a1 + 2))
          llvm::raw_ostream::flush_nonempty(a1);
        return;
      }
    }
    v6 = 0;
    v7 = v5;
    do
    {
      v8 = v6;
      v6 = v7;
      v7 = (_QWORD *)v7[1];
      v6[1] = v8;
    }
    while (v7);
    v9 = 0;
    v10 = v6;
    do
    {
      v11 = llvm::raw_ostream::operator<<(a1, v9);
      v12 = (_WORD *)*((_QWORD *)v11 + 4);
      if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 1uLL)
      {
        *v12 = 2350;
        *((_QWORD *)v11 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v11, ".\t", 2uLL);
      }
      llvm::sys::Watchdog::Watchdog((llvm::sys::Watchdog *)&v15, 5u);
      (*(void (**)(_QWORD *, llvm::raw_ostream *))(*v10 + 16))(v10, a1);
      llvm::sys::Watchdog::~Watchdog((llvm::sys::Watchdog *)&v15);
      v10 = (_QWORD *)v10[1];
      ++v9;
    }
    while (v10);
    v13 = 0;
    do
    {
      v14 = v6;
      v6 = (_QWORD *)v6[1];
      v14[1] = v13;
      v13 = v14;
    }
    while (v6);
    goto LABEL_15;
  }
}

void llvm::initRandomSeedOptions(llvm *this)
{
  if (!atomic_load((unint64_t *)&Seed))
}

uint64_t `anonymous namespace'::CreateSeed::call(_anonymous_namespace_::CreateSeed *this)
{
  void *v1;
  int v3;
  int *v4;
  __int128 v5;
  int v6;
  __int128 v7;

  v1 = operator new(0xC8uLL);
  *(_QWORD *)&v7 = "seed";
  *((_QWORD *)&v7 + 1) = 4;
  v6 = 1;
  *(_QWORD *)&v5 = "Seed for the random number generator";
  *((_QWORD *)&v5 + 1) = 36;
  v3 = 0;
  v4 = &v3;
  return llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::opt<char [9],llvm::cl::value_desc,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>((uint64_t)v1, (int8x16_t *)"rng-seed", &v7, &v6, &v5, &v4);
}

uint64_t llvm::object_deleter<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>>::call(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::opt<char [9],llvm::cl::value_desc,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::initializer<int>>(uint64_t a1, int8x16_t *a2, _OWORD *a3, _WORD *a4, _OWORD *a5, int **a6)
{
  void *v12;
  uint64_t v13;
  uint64_t *GeneralCategory;
  uint64_t v15;
  const unsigned __int8 *v16;
  uint64_t v17;

  *(_QWORD *)a1 = &unk_1E0E23930;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  v12 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v13 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  v15 = *(unsigned int *)(a1 + 72);
  if (v15 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v12, v15 + 1, 8);
    LODWORD(v15) = *(_DWORD *)(a1 + 72);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 136) = &off_1E0E22FE8;
  *(_QWORD *)a1 = off_1E0E23728;
  *(_QWORD *)(a1 + 160) = &unk_1E0E23C28;
  *(_QWORD *)(a1 + 168) = off_1E0E4FC70;
  *(_QWORD *)(a1 + 192) = a1 + 168;
  v16 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v16);
  *(_OWORD *)(a1 + 48) = *a3;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  v17 = **a6;
  *(_QWORD *)(a1 + 128) = v17;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = v17;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::Regex::Regex(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  _OWORD *v8;

  v8 = operator new(0x20uLL);
  *v8 = 0u;
  v8[1] = 0u;
  *(_QWORD *)a1 = v8;
  *((_QWORD *)v8 + 2) = &a2[a3];
  *(_DWORD *)(a1 + 8) = llvm_regcomp((uint64_t)v8, a2, ((4 * a4) & 8 | (2 * (a4 & 1)) | (a4 >> 2) & 1) ^ 0x21);
  return a1;
}

void llvm::Regex::~Regex(void **this)
{
  void *v2;

  v2 = *this;
  if (v2)
  {
    llvm_regfree((uint64_t)v2);
    if (*this)
      operator delete(*this);
  }
}

BOOL llvm::Regex::isValid(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  size_t v5;
  _BYTE *v6;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v4 = *(_QWORD *)a1;
    v5 = llvm_regerror(*(_DWORD *)(a1 + 8), *(_QWORD *)a1, 0, 0);
    std::string::resize((std::string *)a2, v5 - 1, 0);
    if (*(char *)(a2 + 23) >= 0)
      v6 = (_BYTE *)a2;
    else
      v6 = *(_BYTE **)a2;
    llvm_regerror(v2, v4, v6, v5);
  }
  return v2 == 0;
}

uint64_t llvm::Regex::match(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  size_t v23;
  _BYTE *v24;
  void *v25;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[17];

  v36[16] = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    if (*(_DWORD *)(a1 + 8))
      return 0;
    goto LABEL_12;
  }
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a5 + 23))
      goto LABEL_5;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a5 + 8))
LABEL_4:
    MEMORY[0x186DA1308](a5, "");
LABEL_5:
  v10 = *(_DWORD *)(a1 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)a1;
    v12 = llvm_regerror(*(_DWORD *)(a1 + 8), *(_QWORD *)a1, 0, 0);
    std::string::resize((std::string *)a5, v12 - 1, 0);
    if (*(char *)(a5 + 23) >= 0)
      v13 = (_BYTE *)a5;
    else
      v13 = *(_BYTE **)a5;
    llvm_regerror(v10, v11, v13, v12);
    return 0;
  }
LABEL_12:
  if (a4)
    v15 = *(_DWORD *)(*(_QWORD *)a1 + 8) + 1;
  else
    v15 = 0;
  v34 = v36;
  v35 = 0x800000000;
  if (v15 <= 1)
    v16 = 1;
  else
    v16 = v15;
  if (v16 < 9)
  {
    v17 = 0;
    v18 = v36;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, v36, v16, 16);
    v17 = v35;
    if ((_DWORD)v35 == (_DWORD)v16)
      goto LABEL_25;
    v18 = v34;
  }
  bzero(&v18[2 * v17], 16 * (v16 - v17));
LABEL_25:
  LODWORD(v35) = v16;
  v19 = v34;
  *(_QWORD *)v34 = 0;
  v19[1] = a3;
  v20 = llvm_regexec(*(_QWORD *)a1, a2, v15, v19, 4);
  if (v20)
  {
    if (v20 == 1 || !a5)
    {
      v14 = 0;
      v25 = v34;
      if (v34 == v36)
        return v14;
    }
    else
    {
      v21 = *(_DWORD *)(a1 + 8);
      v22 = *(_QWORD *)a1;
      v23 = llvm_regerror(v21, *(_QWORD *)a1, 0, 0);
      std::string::resize((std::string *)a5, v23 - 1, 0);
      if (*(char *)(a5 + 23) >= 0)
        v24 = (_BYTE *)a5;
      else
        v24 = *(_BYTE **)a5;
      llvm_regerror(v21, v22, v24, v23);
      v14 = 0;
      v25 = v34;
      if (v34 == v36)
        return v14;
    }
LABEL_34:
    free(v25);
    return v14;
  }
  if (a4)
  {
    *(_DWORD *)(a4 + 8) = 0;
    if (v15)
    {
      v27 = 0;
      v28 = 0;
      v29 = 16 * v15;
      do
      {
        while (1)
        {
          v30 = *(_QWORD *)((char *)v34 + v27);
          if (v30 == -1)
            break;
          v31 = *(_QWORD *)((char *)v34 + v27 + 8);
          if (v28 >= *(_DWORD *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v28 + 1, 16);
            v28 = *(_DWORD *)(a4 + 8);
          }
          v32 = (_QWORD *)(*(_QWORD *)a4 + 16 * v28);
          *v32 = &a2[v30];
          v32[1] = v31 - v30;
          v27 += 16;
          v28 = *(_DWORD *)(a4 + 8) + 1;
          *(_DWORD *)(a4 + 8) = v28;
          if (v29 == v27)
            goto LABEL_47;
        }
        if (v28 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v28 + 1, 16);
          v28 = *(_DWORD *)(a4 + 8);
        }
        v33 = (_QWORD *)(*(_QWORD *)a4 + 16 * v28);
        *v33 = 0;
        v33[1] = 0;
        v27 += 16;
        v28 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v28;
      }
      while (v29 != v27);
    }
  }
LABEL_47:
  v14 = 1;
  v25 = v34;
  if (v34 != v36)
    goto LABEL_34;
  return v14;
}

_UNKNOWN **llvm::RISCVAttrs::getRISCVAttributeTags(llvm::RISCVAttrs *this)
{
  return &RISCVAttributeTags;
}

void llvm::RISCVAttributeParser::stackAlign(llvm::RISCVAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ULEB128;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  size_t v12;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  void **v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  std::string __dst;
  std::string v25;
  void *__p[2];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)this + 16, (_QWORD *)this + 19, (_QWORD *)this + 20);
  v7 = ULEB128;
  if (ULEB128)
  {
    v8 = 20;
    v9 = ULEB128;
    do
    {
      *((_BYTE *)__p + v8--) = (v9 % 0xA) | 0x30;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
    v11 = v8 + 1;
    v12 = 20 - v8;
    if ((unint64_t)(20 - v8) >= 0x7FFFFFFFFFFFFFF8)
      abort();
  }
  else
  {
    BYTE4(v27) = 48;
    v11 = 20;
    v12 = 1;
  }
  if (v12 <= 0x16)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v12;
    p_dst = &__dst;
    if (v11 == 21)
      goto LABEL_12;
LABEL_11:
    memcpy(p_dst, (char *)__p + v11, v12);
    p_dst = (std::string *)((char *)p_dst + v12);
    goto LABEL_12;
  }
  v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17)
    v14 = v12 | 7;
  v15 = v14 + 1;
  p_dst = (std::string *)operator new(v14 + 1);
  __dst.__r_.__value_.__l.__size_ = v12;
  __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v11 != 21)
    goto LABEL_11;
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  v16 = std::string::insert(&__dst, 0, "Stack alignment is ");
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v23 = 6;
  strcpy((char *)v22, "-bytes");
  v18 = std::string::append(&v25, (const std::string::value_type *)v22, 6uLL);
  v19 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v27 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v23 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_27:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
  operator delete(v22[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_27;
LABEL_14:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_28:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_15:
  if (v27 >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (v27 >= 0)
    v21 = HIBYTE(v27);
  else
    v21 = (uint64_t)__p[1];
  llvm::ELFAttributeParser::printAttribute(this, a2, v7, (uint64_t)v20, v21);
  *a3 = 0;
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
}

void llvm::RISCVAttributeParser::unalignedAccess(llvm::RISCVAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(this, "Unaligned_access", a2, (uint64_t)llvm::RISCVAttributeParser::unalignedAccess::strings, 2uLL, a3);
}

uint64_t llvm::RISCVAttributeParser::handler@<X0>(uint64_t this@<X0>, BOOL *a2@<X2>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;

  *a2 = 0;
  v5 = a3 - 4;
  if ((unint64_t)(a3 - 4) > 8 || ((0x157u >> v5) & 1) == 0)
    goto LABEL_8;
  v7 = (uint64_t)*(&off_1E0E56088 + v5);
  v9 = *(uint64_t (**)(_QWORD *))(v7 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  v10 = (_QWORD *)(this + (v8 >> 1));
  if ((v8 & 1) == 0)
  {
    this = v9(v10);
    if (*a4)
      return this;
    goto LABEL_7;
  }
  this = (*(uint64_t (**)(void))(*v10 + v9))();
  if (!*a4)
  {
LABEL_7:
    *a2 = 1;
LABEL_8:
    *a4 = 0;
  }
  return this;
}

void llvm::RISCVAttributeParser::~RISCVAttributeParser(llvm::RISCVAttributeParser *this)
{
  void *v1;

  llvm::ELFAttributeParser::~ELFAttributeParser(this);
  operator delete(v1);
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

const void **llvm::StringRef::str@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = *this;
  if (!*this)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return this;
  }
  v4 = (size_t)this[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v5 = v4 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v4;
    if (!v4)
      goto LABEL_11;
  }
  this = (const void **)memmove(v2, v3, v4);
LABEL_11:
  *((_BYTE *)v2 + v4) = 0;
  return this;
}

void llvm::RISCVISAInfo::addExtension(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  void *__p[2];
  unint64_t v23;
  uint64_t v24;

  if (!a2)
  {
    __p[0] = 0;
    __p[1] = 0;
    v23 = 0;
    goto LABEL_12;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __p[1] = (void *)a3;
    v23 = v12 | 0x8000000000000000;
    __p[0] = v10;
  }
  else
  {
    HIBYTE(v23) = a3;
    v10 = __p;
    if (!a3)
      goto LABEL_11;
  }
  memmove(v10, a2, a3);
LABEL_11:
  *((_BYTE *)v10 + a3) = 0;
LABEL_12:
  v13 = (_QWORD **)(a1 + 24);
  v14 = std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__find_equal<std::string>(a1 + 24, &v24, (char *)__p);
  v15 = *v14;
  if (*v14)
  {
    *(_DWORD *)(v15 + 56) = a4;
    *(_DWORD *)(v15 + 60) = a5;
    if ((SHIBYTE(v23) & 0x80000000) == 0)
      return;
LABEL_18:
    operator delete(__p[0]);
    return;
  }
  v16 = v14;
  v17 = operator new(0x40uLL);
  v17[2] = *(_OWORD *)__p;
  v18 = v23;
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  *((_QWORD *)v17 + 6) = v18;
  *((_QWORD *)v17 + 7) = 0;
  v19 = v24;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = v19;
  *v16 = (uint64_t)v17;
  v20 = (_QWORD *)**v13;
  v21 = (uint64_t *)v17;
  if (v20)
  {
    *v13 = v20;
    v21 = (uint64_t *)*v16;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v21);
  ++*(_QWORD *)(a1 + 40);
  *((_DWORD *)v17 + 14) = a4;
  *((_DWORD *)v17 + 15) = a5;
  if (SHIBYTE(v23) < 0)
    goto LABEL_18;
}

uint64_t llvm::RISCVISAInfo::isSupportedExtension(const void *a1, size_t a2)
{
  unint64_t v4;
  const char **v5;
  unint64_t v6;
  const char **v7;
  size_t v8;
  size_t v9;
  size_t v10;
  int v11;
  const char **v12;
  unint64_t v13;
  unint64_t v14;
  const char **v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;

  v4 = 100;
  v5 = (const char **)&SupportedExtensions;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[2 * (v4 >> 1)];
    if (*v7)
    {
      v8 = strlen(*v7);
      v9 = v8;
      if (a2 >= v8)
        v10 = v8;
      else
        v10 = a2;
      if (v10)
      {
        v11 = memcmp(*v7, a1, v10);
        if (v11)
        {
          if (v11 < 0)
            goto LABEL_2;
          goto LABEL_3;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    if (v9 < a2)
    {
LABEL_2:
      v5 = v7 + 2;
      v6 = v4 + ~v6;
    }
LABEL_3:
    v4 = v6;
  }
  while (v6);
  if (v5 != (const char **)&SupportedExperimentalExtensions)
  {
    if (*v5)
    {
      if (strlen(*v5) == a2 && (!a2 || !memcmp(*v5, a1, a2)))
        return 1;
    }
    else if (!a2)
    {
      return 1;
    }
  }
  v12 = (const char **)&SupportedExperimentalExtensions;
  v13 = 23;
  while (2)
  {
    v14 = v13 >> 1;
    v15 = &v12[2 * (v13 >> 1)];
    if (!*v15)
    {
      v17 = 0;
      goto LABEL_36;
    }
    v16 = strlen(*v15);
    v17 = v16;
    if (a2 >= v16)
      v18 = v16;
    else
      v18 = a2;
    if (!v18 || (v19 = memcmp(*v15, a1, v18)) == 0)
    {
LABEL_36:
      if (v17 < a2)
        goto LABEL_24;
      goto LABEL_25;
    }
    if (v19 < 0)
    {
LABEL_24:
      v12 = v15 + 2;
      v14 = v13 + ~v14;
    }
LABEL_25:
    v13 = v14;
    if (v14)
      continue;
    break;
  }
  if (v12 != (const char **)cclasses)
  {
    if (*v12)
    {
      if (strlen(*v12) == a2 && (!a2 || !memcmp(*v12, a1, a2)))
        return 1;
    }
    else if (!a2)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t getExtensionRank(char *a1)
{
  char *v1;
  int v2;
  uint64_t result;
  _BYTE *v4;
  int64_t v5;
  BOOL v6;
  int v7;
  _BYTE *v8;
  int64_t v9;
  BOOL v10;

  if (a1[23] >= 0)
    v1 = a1;
  else
    v1 = *(char **)a1;
  v2 = *v1;
  result = 128;
  switch(*v1)
  {
    case 'e':
      result = 1;
      break;
    case 'i':
      result = 0;
      break;
    case 's':
      return result;
    case 'x':
      result = 256;
      break;
    case 'z':
      v7 = v1[1];
      if (v7 == 105)
      {
        result = 64;
      }
      else if (v7 == 101)
      {
        result = 65;
      }
      else
      {
        v8 = memchr("mafdqlcbkjtpvnh", v1[1], 0xFuLL);
        v9 = v8 - "mafdqlcbkjtpvnh";
        if (v8)
          v10 = v9 == -1;
        else
          v10 = 1;
        if (v10)
          result = (v7 - 80) | 0x40u;
        else
          result = ((_DWORD)v9 + 2) | 0x40u;
      }
      break;
    default:
      v4 = memchr("mafdqlcbkjtpvnh", *v1, 0xFuLL);
      v5 = v4 - "mafdqlcbkjtpvnh";
      if (v4)
        v6 = v5 == -1;
      else
        v6 = 1;
      if (v6)
        result = (v2 - 80);
      else
        result = (v5 + 2);
      break;
  }
  return result;
}

unint64_t isExperimentalExtension(const void *a1, size_t a2)
{
  unint64_t v4;
  char **v5;
  unint64_t v6;
  const char **v7;
  size_t v8;
  size_t v9;
  size_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  v4 = 23;
  v5 = &SupportedExperimentalExtensions;
  do
  {
    v6 = v4 >> 1;
    v7 = (const char **)&v5[2 * (v4 >> 1)];
    if (*v7)
    {
      v8 = strlen(*v7);
      v9 = v8;
      if (a2 >= v8)
        v10 = v8;
      else
        v10 = a2;
      if (v10)
      {
        v11 = memcmp(*v7, a1, v10);
        if (v11)
        {
          if (v11 < 0)
            goto LABEL_2;
          goto LABEL_3;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    if (v9 < a2)
    {
LABEL_2:
      v5 = (char **)(v7 + 2);
      v6 = v4 + ~v6;
    }
LABEL_3:
    v4 = v6;
  }
  while (v6);
  if (v5 == cclasses)
    goto LABEL_23;
  if (!*v5)
  {
    if (!a2)
      goto LABEL_21;
    goto LABEL_23;
  }
  if (strlen(*v5) != a2 || a2 && memcmp(*v5, a1, a2))
  {
LABEL_23:
    v13 = 0;
    v12 = 0;
    return v12 | v13;
  }
LABEL_21:
  v12 = (unint64_t)v5[1] & 0xFFFFFFFFFFFFFF00;
  v13 = v5[1];
  return v12 | v13;
}

void llvm::RISCVISAInfo::parseNormalizedArchString(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  int v13;
  char *v14;
  int *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  unsigned __int8 *v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38[2];
  unint64_t v39;
  void *__p[2];
  char v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[18];
  std::error_code v45;
  std::error_code v46;
  std::error_code v47;
  std::error_code v48;
  std::error_code v49;
  std::error_code v50;

  v44[16] = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_9;
  v6 = 0;
  v7 = MEMORY[0x1E0C80978];
  do
  {
    v8 = *(char *)(a1 + v6);
    if ((v8 & 0x80000000) != 0)
    {
      if (__maskrune(v8, 0x8000uLL))
        goto LABEL_7;
    }
    else if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x8000) != 0)
    {
LABEL_7:
      *(_QWORD *)&v45.__val_ = std::generic_category();
      v45.__cat_ = (const std::error_category *)"string must be lowercase";
      llvm::createStringError((llvm *)0x16, v45, &v37);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v37;
      return;
    }
    ++v6;
  }
  while (a2 != v6);
  if (a2 < 5)
    goto LABEL_9;
  v9 = *(_DWORD *)a1 == 842233458 && *(_BYTE *)(a1 + 4) == 105;
  if (v9 || (*(_DWORD *)a1 == 842233458 ? (v10 = *(_BYTE *)(a1 + 4) == 101) : (v10 = 0), v10))
  {
    v13 = 32;
  }
  else
  {
    if ((*(_DWORD *)a1 != 875984498 || *(_BYTE *)(a1 + 4) != 105)
      && (*(_DWORD *)a1 != 875984498 || *(_BYTE *)(a1 + 4) != 101))
    {
LABEL_9:
      *(_QWORD *)&v46.__val_ = std::generic_category();
      v46.__cat_ = (const std::error_category *)"arch string must begin with valid base ISA";
      llvm::createStringError((llvm *)0x16, v46, &v36);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v36;
      return;
    }
    v13 = 64;
  }
  v14 = (char *)operator new(0x30uLL);
  *(_DWORD *)v14 = v13;
  *(_QWORD *)(v14 + 4) = 0;
  v15 = (int *)(v14 + 4);
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 3) = v14 + 32;
  v16 = (uint64_t)(v14 + 24);
  *((_QWORD *)v14 + 5) = 0;
  *(_QWORD *)(v14 + 12) = 0;
  v38[0] = (char *)(a1 + 4);
  v38[1] = (char *)(a2 - 4);
  v42 = v44;
  v43 = 0x800000000;
  llvm::StringRef::split(v38, (uint64_t)&v42, 95, -1, 1);
  if ((_DWORD)v43)
  {
    v17 = v42;
    v18 = (char *)v42 + 16 * v43;
    while (1)
    {
      *(_OWORD *)__p = *v17;
      LOBYTE(v39) = 112;
      v19 = llvm::StringRef::rfind(__p, (unsigned __int8 *)&v39, 1);
      if (v19 == -1
        || ((void *)v19 >= __p[1] ? (v20 = (char *)__p[1]) : (v20 = (char *)v19), __p[1] <= (void *)(v19 + 1)))
      {
        *(_QWORD *)&v47.__val_ = std::generic_category();
        v47.__cat_ = (const std::error_category *)"extension lacks version in expected format";
        llvm::createStringError((llvm *)0x16, v47, &v35);
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v35;
        v35 = 0;
        goto LABEL_72;
      }
      v21 = (unsigned __int8 *)__p[0];
      v39 = 0;
      if ((llvm::getAsUnsignedInteger((unsigned __int8 *)__p[0] + v19 + 1, (uint64_t)__p[1] - v19 - 1, 0xAu, &v39) & 1) != 0
        || (v22 = v39, HIDWORD(v39)))
      {
        *(_QWORD *)&v48.__val_ = std::generic_category();
        v48.__cat_ = (const std::error_category *)"failed to parse minor version number";
        llvm::createStringError((llvm *)0x16, v48, &v34);
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v34;
        v34 = 0;
        goto LABEL_72;
      }
      if (!v20)
        break;
      v23 = 0;
      v24 = (size_t)v20;
      while (v21[v24 - 1] - 48 <= 9)
      {
        if (v24 >= v24 - 1)
          --v24;
        --v23;
        if (!v24)
          goto LABEL_47;
      }
      if (!v23)
        break;
LABEL_47:
      v25 = -v23;
      v26 = &v20[-v25];
      if (v20 < &v20[-v25])
        v26 = v20;
      if ((unint64_t)v20 <= v25)
        v27 = v21;
      else
        v27 = (unsigned __int8 *)&v26[(_QWORD)v21];
      if ((unint64_t)v20 <= v25)
        v28 = 0;
      else
        v28 = v26;
      v39 = 0;
      if ((llvm::getAsUnsignedInteger(v27, v20 - v28, 0xAu, &v39) & 1) != 0 || HIDWORD(v39))
      {
        *(_QWORD *)&v49.__val_ = std::generic_category();
        v49.__cat_ = (const std::error_category *)"failed to parse major version number";
        llvm::createStringError((llvm *)0x16, v49, &v32);
        *(_BYTE *)(a3 + 8) |= 1u;
        *(_QWORD *)a3 = v32;
        v32 = 0;
        goto LABEL_72;
      }
      llvm::RISCVISAInfo::addExtension((uint64_t)v14, v21, v24, v39, v22);
      if (++v17 == (_OWORD *)v18)
        goto LABEL_58;
    }
    *(_QWORD *)&v50.__val_ = std::generic_category();
    v50.__cat_ = (const std::error_category *)"extension lacks version in expected format";
    llvm::createStringError((llvm *)0x16, v50, &v33);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v33;
    v33 = 0;
    goto LABEL_72;
  }
LABEL_58:
  *v15 = 0;
  v41 = 1;
  LOWORD(__p[0]) = 100;
  v29 = std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__count_unique<std::string>(v16, (uint64_t)__p);
  if (v41 < 0)
    operator delete(__p[0]);
  if (v29)
  {
    v30 = 64;
  }
  else
  {
    v41 = 1;
    LOWORD(__p[0]) = 102;
    v31 = std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__count_unique<std::string>(v16, (uint64_t)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    if (!v31)
      goto LABEL_67;
    v30 = 32;
  }
  *v15 = v30;
LABEL_67:
  llvm::RISCVISAInfo::updateMinVLen((uint64_t)v14);
  llvm::RISCVISAInfo::updateMaxELen((uint64_t)v14);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v14;
  v14 = 0;
LABEL_72:
  if (v42 != v44)
    free(v42);
  if (v14)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)(v14 + 24), *((char **)v14 + 4));
    operator delete(v14);
  }
}

uint64_t llvm::RISCVISAInfo::updateMinVLen(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;

  v1 = *(_QWORD **)(this + 24);
  v2 = (_QWORD *)(this + 32);
  if (v1 != (_QWORD *)(this + 32))
  {
    v3 = this;
    do
    {
      v4 = (_QWORD *)v1[4];
      v5 = *((char *)v1 + 55);
      if (v5 >= 0)
        v4 = v1 + 4;
      v6 = v1[5];
      if (v5 >= 0)
        v6 = *((unsigned __int8 *)v1 + 55);
      if (v6 >= 3)
      {
        v7 = *(_WORD *)v4 == 30330 && *((_BYTE *)v4 + 2) == 108;
        if (v7 && v6 >= 4 && *((_BYTE *)v4 + v6 - 1) == 98)
        {
          v8 = (unsigned __int8 *)v4 + 3;
          v9 = v6 - 3;
          v10 = v6 - 4;
          v11 = v9 >= v10 ? v10 : v9;
          v15 = 0;
          this = llvm::getAsUnsignedInteger(v8, v11, 0xAu, &v15);
          if ((this & 1) == 0 && !HIDWORD(v15))
          {
            if (*(_DWORD *)(v3 + 8) <= v15)
              v12 = v15;
            else
              v12 = *(_DWORD *)(v3 + 8);
            *(_DWORD *)(v3 + 8) = v12;
          }
        }
      }
      v13 = (_QWORD *)v1[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v1[2];
          v7 = *v14 == (_QWORD)v1;
          v1 = v14;
        }
        while (!v7);
      }
      v1 = v14;
    }
    while (v14 != v2);
  }
  return this;
}

uint64_t llvm::RISCVISAInfo::updateMaxELen(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;

  v1 = *(_QWORD **)(this + 24);
  v2 = (_QWORD *)(this + 32);
  if (v1 != (_QWORD *)(this + 32))
  {
    v3 = this;
    do
    {
      v4 = (_QWORD *)v1[4];
      v5 = *((char *)v1 + 55);
      if (v5 >= 0)
        v4 = v1 + 4;
      v6 = v1[5];
      if (v5 >= 0)
        v6 = *((unsigned __int8 *)v1 + 55);
      if (v6 >= 3 && (*(_WORD *)v4 == 30330 ? (v7 = *((_BYTE *)v4 + 2) == 101) : (v7 = 0), v7))
      {
        v10 = (unsigned __int8 *)v4 + 3;
        v11 = v6 - 3;
        v12 = v6 - 4;
        v13 = v10[v12];
        if (v13 == 102)
        {
          v14 = *(_DWORD *)(v3 + 16);
          if (v14 <= 0x20)
            v14 = 32;
          *(_DWORD *)(v3 + 16) = v14;
          v13 = v10[v12];
        }
        if (v13 == 100)
        {
          v15 = *(_DWORD *)(v3 + 16);
          if (v15 <= 0x40)
            v15 = 64;
          *(_DWORD *)(v3 + 16) = v15;
        }
        if (v11 >= v12)
          v16 = v12;
        else
          v16 = v11;
        v18 = 0;
        this = llvm::getAsUnsignedInteger(v10, v16, 0xAu, &v18);
        v17 = v18;
        if (v18 >= 0x100000000)
          v17 = 0;
        if ((_DWORD)this)
          v17 = 0;
        if (*(_DWORD *)(v3 + 12) > v17)
          v17 = *(_DWORD *)(v3 + 12);
        *(_DWORD *)(v3 + 12) = v17;
        v8 = (_QWORD *)v1[1];
        if (!v8)
        {
          do
          {
LABEL_34:
            v9 = (_QWORD *)v1[2];
            v7 = *v9 == (_QWORD)v1;
            v1 = v9;
          }
          while (!v7);
          goto LABEL_3;
        }
      }
      else
      {
        v8 = (_QWORD *)v1[1];
        if (!v8)
          goto LABEL_34;
      }
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
LABEL_3:
      v1 = v9;
    }
    while (v9 != v2);
  }
  return this;
}

_QWORD *llvm::consumeError(_QWORD **a1)
{
  _QWORD *v1;
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;

  v1 = *a1;
  *a1 = 0;
  v3 = v1;
  llvm::handleErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v3, &v4);
  result = v3;
  if (v3)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
  return result;
}

void llvm::SmallVectorTemplateBase<llvm::StringRef,true>::push_back(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  ++*(_DWORD *)(a1 + 8);
}

void llvm::RISCVISAInfo::toFeatureVector(llvm::RISCVISAInfo *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  char *v3;
  int v5;
  std::string *v6;
  size_t size;
  unint64_t v8;
  __int128 v9;
  char *v10;
  char *v11;
  BOOL v12;
  void *__p[2];
  uint64_t v14;
  std::string v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  v3 = (char *)this + 32;
  if (v2 != (_QWORD *)((char *)this + 32))
  {
    do
    {
      if (*((char *)v2 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)v2[4], v2[5]);
        v5 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_10:
          if (v15.__r_.__value_.__l.__size_ == 1 && *v15.__r_.__value_.__l.__data_ == 105)
            goto LABEL_26;
          goto LABEL_12;
        }
      }
      else
      {
        v15 = *(std::string *)(v2 + 4);
        v5 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_10;
      }
      if (v5 == 1 && v15.__r_.__value_.__s.__data_[0] == 105)
        goto LABEL_26;
LABEL_12:
      if (v5 >= 0)
        v6 = &v15;
      else
        v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
      if (v5 >= 0)
        size = v5;
      else
        size = v15.__r_.__value_.__l.__size_;
      if (llvm::RISCVISAInfo::isSupportedExtension(v6, size))
      {
        isExperimentalExtension(v6, size);
        std::operator+<char>();
        v8 = *(_QWORD *)(a2 + 8);
        if (v8 >= *(_QWORD *)(a2 + 16))
        {
          *(_QWORD *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (uint64_t)__p);
          if (SHIBYTE(v14) < 0)
            goto LABEL_24;
        }
        else if (SHIBYTE(v14) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          *(_QWORD *)(a2 + 8) = v8 + 24;
          if (SHIBYTE(v14) < 0)
LABEL_24:
            operator delete(__p[0]);
        }
        else
        {
          v9 = *(_OWORD *)__p;
          *(_QWORD *)(v8 + 16) = v14;
          *(_OWORD *)v8 = v9;
          *(_QWORD *)(a2 + 8) = v8 + 24;
          if (SHIBYTE(v14) < 0)
            goto LABEL_24;
        }
        LOBYTE(v5) = *((_BYTE *)&v15.__r_.__value_.__s + 23);
      }
LABEL_26:
      if ((v5 & 0x80) != 0)
      {
        operator delete(v15.__r_.__value_.__l.__data_);
        v10 = (char *)v2[1];
        if (v10)
        {
          do
          {
LABEL_30:
            v11 = v10;
            v10 = *(char **)v10;
          }
          while (v10);
          goto LABEL_3;
        }
      }
      else
      {
        v10 = (char *)v2[1];
        if (v10)
          goto LABEL_30;
      }
      do
      {
        v11 = (char *)v2[2];
        v12 = *(_QWORD *)v11 == (_QWORD)v2;
        v2 = v11;
      }
      while (!v12);
LABEL_3:
      v2 = v11;
    }
    while (v11 != v3);
  }
}

unint64_t llvm::utostr@<X0>(unint64_t this@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[21];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v4 = 20;
    do
    {
      v10[v4--] = (this % 0xA) | 0x30;
      v5 = this > 9;
      this /= 0xAuLL;
    }
    while (v5);
    v6 = v4 + 1;
    if (a2)
      goto LABEL_5;
  }
  else
  {
    v10[20] = 48;
    v6 = 20;
    if (a2)
LABEL_5:
      v10[--v6] = 45;
  }
  v7 = 21 - v6;
  if ((unint64_t)(21 - v6) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v7 <= 0x16)
  {
    a3[23] = v7;
    if (v6 == 21)
      goto LABEL_14;
    goto LABEL_13;
  }
  v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v7 | 7) != 0x17)
    v8 = v7 | 7;
  v9 = v8 + 1;
  this = (unint64_t)operator new(v8 + 1);
  *((_QWORD *)a3 + 1) = v7;
  *((_QWORD *)a3 + 2) = v9 | 0x8000000000000000;
  *(_QWORD *)a3 = this;
  a3 = (_BYTE *)this;
  if (v6 != 21)
  {
LABEL_13:
    this = (unint64_t)memcpy(a3, &v10[v6], 21 - v6);
    a3 += v7;
  }
LABEL_14:
  *a3 = 0;
  return this;
}

uint64_t *std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v6;
  unsigned int ExtensionRank;
  int v8;
  size_t v9;
  uint64_t *v10;
  char *v11;
  unsigned int v12;
  int v13;
  size_t v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v19;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v6 = a3;
    ExtensionRank = getExtensionRank(a3);
    v8 = v6[23];
    if (v8 >= 0)
      v9 = v6[23];
    else
      v9 = *((_QWORD *)v6 + 1);
    if (v8 < 0)
      v6 = *(char **)v6;
    while (1)
    {
      while (1)
      {
        v10 = v5;
        v11 = (char *)(v5 + 4);
        v12 = getExtensionRank(v11);
        if (ExtensionRank == v12)
          break;
        if (ExtensionRank >= v12)
        {
          if (v12 >= ExtensionRank)
            goto LABEL_30;
          goto LABEL_27;
        }
LABEL_8:
        v5 = (uint64_t *)*v10;
        v4 = v10;
        if (!*v10)
          goto LABEL_30;
      }
      v13 = *((char *)v10 + 55);
      if (v13 >= 0)
        v14 = *((unsigned __int8 *)v10 + 55);
      else
        v14 = v10[5];
      if (v13 < 0)
        v11 = (char *)v10[4];
      if (v14 >= v9)
        v15 = v9;
      else
        v15 = v14;
      v16 = memcmp(v6, v11, v15);
      v17 = v9 < v14;
      if (v16)
        v17 = v16 < 0;
      if (v17)
        goto LABEL_8;
      v18 = memcmp(v11, v6, v15);
      v19 = v14 < v9;
      if (v18)
        v19 = v18 < 0;
      if (!v19)
        goto LABEL_30;
LABEL_27:
      v4 = v10 + 1;
      v5 = (uint64_t *)v10[1];
      if (!v5)
        goto LABEL_30;
    }
  }
  v10 = (uint64_t *)(a1 + 8);
LABEL_30:
  *a2 = v10;
  return v4;
}

uint64_t std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__count_unique<std::string>(uint64_t a1, uint64_t a2)
{
  char *v2;
  unsigned int ExtensionRank;
  int v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  unsigned int v10;
  int v11;
  size_t v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;

  v2 = *(char **)(a1 + 8);
  if (v2)
  {
    ExtensionRank = getExtensionRank((char *)a2);
    v5 = *(char *)(a2 + 23);
    if (v5 >= 0)
      v6 = *(unsigned __int8 *)(a2 + 23);
    else
      v6 = *(_QWORD *)(a2 + 8);
    if (v5 >= 0)
      v7 = (const void *)a2;
    else
      v7 = *(const void **)a2;
    v8 = 1;
    do
    {
      v9 = v2 + 32;
      v10 = getExtensionRank(v2 + 32);
      if (ExtensionRank == v10)
      {
        v11 = v2[55];
        if (v11 >= 0)
          v12 = v2[55];
        else
          v12 = *((_QWORD *)v2 + 5);
        if (v11 < 0)
          v9 = (const void *)*((_QWORD *)v2 + 4);
        if (v12 >= v6)
          v13 = v6;
        else
          v13 = v12;
        v14 = memcmp(v7, v9, v13);
        v15 = v6 < v12;
        if (v14)
          v15 = v14 < 0;
        if (v15)
          goto LABEL_10;
        v16 = memcmp(v9, v7, v13);
        v17 = v12 < v6;
        if (v16)
          v17 = v16 < 0;
        if (!v17)
          return v8;
      }
      else
      {
        if (ExtensionRank < v10)
          goto LABEL_10;
        if (v10 >= ExtensionRank)
          return v8;
      }
      v2 += 8;
LABEL_10:
      v2 = *(char **)v2;
    }
    while (v2);
  }
  return 0;
}

double llvm::SHA1::init(llvm::SHA1 *this)
{
  double result;

  *((_OWORD *)this + 4) = xmmword_18125E630;
  *(_QWORD *)&result = 3285377520;
  *((_QWORD *)this + 10) = 3285377520;
  *((_BYTE *)this + 88) = 0;
  return result;
}

_DWORD *llvm::SHA1::hashBlock(_DWORD *this)
{
  int v1;
  int v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;

  v1 = this[16];
  v2 = this[17];
  HIDWORD(v4) = v1;
  LODWORD(v4) = v1;
  v3 = v4 >> 27;
  HIDWORD(v4) = v2;
  LODWORD(v4) = v2;
  v5 = v4 >> 2;
  v6 = this[18];
  v277 = this[19];
  v278 = this[20];
  v7 = this[1];
  v8 = v3 + v278 + *this + (v6 & v2 | v277 & ~v2) + 1518500249;
  HIDWORD(v4) = v8;
  LODWORD(v4) = v8;
  v9 = v277 + v7 + (v5 & v1 | v6 & ~v1) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v1;
  LODWORD(v4) = v1;
  v10 = v4 >> 2;
  HIDWORD(v4) = v9;
  LODWORD(v4) = v9;
  v11 = this[2];
  v12 = this[3];
  v13 = v6 + v11 + (v10 & v8 | v5 & ~v8) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v8;
  LODWORD(v4) = v8;
  v14 = v4 >> 2;
  HIDWORD(v4) = v13;
  LODWORD(v4) = v13;
  v15 = v5 + v12 + (v14 & v9 | v10 & ~v9) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v9;
  LODWORD(v4) = v9;
  v16 = v4 >> 2;
  HIDWORD(v4) = v15;
  LODWORD(v4) = v15;
  v18 = this[4];
  v17 = this[5];
  v19 = v10 + v18 + (v16 & v13 | v14 & ~v13) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v13;
  LODWORD(v4) = v13;
  v20 = v4 >> 2;
  HIDWORD(v4) = v19;
  LODWORD(v4) = v19;
  v21 = v14 + v17 + (v20 & v15 | v16 & ~v15) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v15;
  LODWORD(v4) = v15;
  v22 = v4 >> 2;
  HIDWORD(v4) = v21;
  LODWORD(v4) = v21;
  v24 = this[6];
  v23 = this[7];
  v25 = v24 + v16 + (v22 & v19 | v20 & ~v19) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v19;
  LODWORD(v4) = v19;
  v26 = v4 >> 2;
  HIDWORD(v4) = v25;
  LODWORD(v4) = v25;
  v27 = v23 + v20 + (v26 & v21 | v22 & ~v21) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v21;
  LODWORD(v4) = v21;
  v28 = v4 >> 2;
  HIDWORD(v4) = v27;
  LODWORD(v4) = v27;
  v29 = this[8];
  v30 = this[9];
  v31 = v29 + v22 + (v28 & v25 | v26 & ~v25) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v25;
  LODWORD(v4) = v25;
  v32 = v4 >> 2;
  HIDWORD(v4) = v31;
  LODWORD(v4) = v31;
  v33 = v30 + v26 + (v32 & v27 | v28 & ~v27) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v27;
  LODWORD(v4) = v27;
  v34 = v4 >> 2;
  HIDWORD(v4) = v33;
  LODWORD(v4) = v33;
  v36 = this[10];
  v35 = this[11];
  v37 = v36 + v28 + (v34 & v31 | v32 & ~v31) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v31;
  LODWORD(v4) = v31;
  v38 = v4 >> 2;
  HIDWORD(v4) = v37;
  LODWORD(v4) = v37;
  v39 = v35 + v32 + (v38 & v33 | v34 & ~v33) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v33;
  LODWORD(v4) = v33;
  v40 = v4 >> 2;
  HIDWORD(v4) = v39;
  LODWORD(v4) = v39;
  v41 = this[12];
  v42 = this[13];
  v43 = v41 + v34 + (v40 & v37 | v38 & ~v37) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v37;
  LODWORD(v4) = v37;
  v44 = v4 >> 2;
  HIDWORD(v4) = v43;
  LODWORD(v4) = v43;
  v45 = v42 + v38 + (v44 & v39 | v40 & ~v39) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v39;
  LODWORD(v4) = v39;
  v46 = v4 >> 2;
  HIDWORD(v4) = v45;
  LODWORD(v4) = v45;
  v47 = this[14];
  v48 = this[15];
  v49 = v47 + v40 + (v46 & v43 | v44 & ~v43) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v43;
  LODWORD(v4) = v43;
  v50 = v4 >> 2;
  HIDWORD(v4) = v49;
  LODWORD(v4) = v49;
  v51 = v48 + v44 + (v50 & v45 | v46 & ~v45) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v45;
  LODWORD(v4) = v45;
  v52 = v4 >> 2;
  HIDWORD(v4) = v11 ^ *this ^ v29 ^ v42;
  LODWORD(v4) = HIDWORD(v4);
  v53 = v4 >> 31;
  HIDWORD(v4) = v51;
  LODWORD(v4) = v51;
  v54 = v53 + v46 + (v52 & v49 | v50 & ~v49) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v49;
  LODWORD(v4) = v49;
  v55 = v4 >> 2;
  HIDWORD(v4) = v12 ^ v7 ^ v30 ^ v47;
  LODWORD(v4) = HIDWORD(v4);
  v56 = v4 >> 31;
  HIDWORD(v4) = v54;
  LODWORD(v4) = v54;
  v57 = v4 >> 27;
  HIDWORD(v4) = v51;
  LODWORD(v4) = v51;
  v58 = v4 >> 2;
  v59 = v56 + v50 + (v55 & v51 | v52 & ~v51) + 1518500249 + v57;
  HIDWORD(v4) = v18 ^ v11 ^ v36 ^ v48;
  LODWORD(v4) = HIDWORD(v4);
  v60 = v4 >> 31;
  HIDWORD(v4) = v59;
  LODWORD(v4) = v59;
  v61 = v60 + v52 + (v58 & v54 | v55 & ~v54) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v54;
  LODWORD(v4) = v54;
  v62 = v4 >> 2;
  HIDWORD(v4) = v17 ^ v12 ^ v35 ^ v53;
  LODWORD(v4) = HIDWORD(v4);
  v63 = v4 >> 31;
  HIDWORD(v4) = v61;
  LODWORD(v4) = v61;
  v64 = v63 + v55 + (v62 & v59 | v58 & ~v59) + 1518500249 + (v4 >> 27);
  HIDWORD(v4) = v59;
  LODWORD(v4) = v59;
  v65 = v4 >> 2;
  HIDWORD(v4) = v24 ^ v18 ^ v41 ^ v56;
  LODWORD(v4) = HIDWORD(v4);
  v66 = v4 >> 31;
  HIDWORD(v4) = v64;
  LODWORD(v4) = v64;
  v67 = v4 >> 27;
  HIDWORD(v4) = v61;
  LODWORD(v4) = v61;
  v68 = v4 >> 2;
  v69 = v66 + v58 + (v65 ^ v62 ^ v61) + 1859775393 + v67;
  HIDWORD(v4) = v23 ^ v17 ^ v42 ^ v60;
  LODWORD(v4) = HIDWORD(v4);
  v70 = v4 >> 31;
  HIDWORD(v4) = v69;
  LODWORD(v4) = v69;
  v71 = v70 + v62 + (v68 ^ v65 ^ v64) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v64;
  LODWORD(v4) = v64;
  v72 = v4 >> 2;
  HIDWORD(v4) = v29 ^ v24 ^ v47 ^ v63;
  LODWORD(v4) = HIDWORD(v4);
  v73 = v4 >> 31;
  HIDWORD(v4) = v71;
  LODWORD(v4) = v71;
  v74 = v4 >> 27;
  v75 = v73 + v65 + (v72 ^ v68 ^ v69) + 1859775393;
  HIDWORD(v4) = v69;
  LODWORD(v4) = v69;
  v76 = v4 >> 2;
  v77 = v75 + v74;
  HIDWORD(v4) = v30 ^ v23 ^ v48 ^ v66;
  LODWORD(v4) = HIDWORD(v4);
  v78 = v4 >> 31;
  HIDWORD(v4) = v77;
  LODWORD(v4) = v77;
  v79 = v78 + v68 + (v76 ^ v72 ^ v71) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v71;
  LODWORD(v4) = v71;
  v80 = v4 >> 2;
  HIDWORD(v4) = v36 ^ v29 ^ v53 ^ v70;
  LODWORD(v4) = HIDWORD(v4);
  v81 = v4 >> 31;
  HIDWORD(v4) = v79;
  LODWORD(v4) = v79;
  v82 = v4 >> 27;
  v83 = v81 + v72 + (v80 ^ v76 ^ v77) + 1859775393;
  HIDWORD(v4) = v77;
  LODWORD(v4) = v77;
  v84 = v4 >> 2;
  v85 = v83 + v82;
  HIDWORD(v4) = v35 ^ v30 ^ v56 ^ v73;
  LODWORD(v4) = HIDWORD(v4);
  v86 = v4 >> 31;
  HIDWORD(v4) = v85;
  LODWORD(v4) = v85;
  v87 = v86 + v76 + (v84 ^ v80 ^ v79) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v79;
  LODWORD(v4) = v79;
  v88 = v4 >> 2;
  HIDWORD(v4) = v41 ^ v36 ^ v60 ^ v78;
  LODWORD(v4) = HIDWORD(v4);
  v89 = v4 >> 31;
  HIDWORD(v4) = v87;
  LODWORD(v4) = v87;
  v90 = v4 >> 27;
  v91 = v89 + v80 + (v88 ^ v84 ^ v85) + 1859775393;
  HIDWORD(v4) = v85;
  LODWORD(v4) = v85;
  v92 = v4 >> 2;
  v93 = v91 + v90;
  HIDWORD(v4) = v42 ^ v35 ^ v63 ^ v81;
  LODWORD(v4) = HIDWORD(v4);
  v94 = v4 >> 31;
  HIDWORD(v4) = v93;
  LODWORD(v4) = v93;
  v95 = v94 + v84 + (v92 ^ v88 ^ v87) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v87;
  LODWORD(v4) = v87;
  v96 = v4 >> 2;
  HIDWORD(v4) = v47 ^ v41 ^ v66 ^ v86;
  LODWORD(v4) = HIDWORD(v4);
  v97 = v4 >> 31;
  HIDWORD(v4) = v95;
  LODWORD(v4) = v95;
  v98 = v4 >> 27;
  v99 = v97 + v88 + (v96 ^ v92 ^ v93) + 1859775393;
  HIDWORD(v4) = v93;
  LODWORD(v4) = v93;
  v100 = v4 >> 2;
  v101 = v99 + v98;
  HIDWORD(v4) = v48 ^ v42 ^ v70 ^ v89;
  LODWORD(v4) = HIDWORD(v4);
  v102 = v4 >> 31;
  HIDWORD(v4) = v99 + v98;
  LODWORD(v4) = v99 + v98;
  v103 = v102 + v92 + (v100 ^ v96 ^ v95) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v95;
  LODWORD(v4) = v95;
  v104 = v4 >> 2;
  HIDWORD(v4) = v53 ^ v47 ^ v73 ^ v94;
  LODWORD(v4) = HIDWORD(v4);
  v105 = v4 >> 31;
  HIDWORD(v4) = v103;
  LODWORD(v4) = v103;
  v106 = v4 >> 27;
  HIDWORD(v4) = v101;
  LODWORD(v4) = v101;
  v107 = v4 >> 2;
  v108 = v105 + v96 + (v104 ^ v100 ^ v101) + 1859775393 + v106;
  HIDWORD(v4) = v56 ^ v48 ^ v78 ^ v97;
  LODWORD(v4) = HIDWORD(v4);
  v109 = v4 >> 31;
  HIDWORD(v4) = v108;
  LODWORD(v4) = v108;
  v110 = v109 + v100 + (v107 ^ v104 ^ v103) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v103;
  LODWORD(v4) = v103;
  v111 = v4 >> 2;
  HIDWORD(v4) = v60 ^ v53 ^ v81 ^ v102;
  LODWORD(v4) = HIDWORD(v4);
  v112 = v4 >> 31;
  HIDWORD(v4) = v110;
  LODWORD(v4) = v110;
  v113 = v4 >> 27;
  v114 = v112 + v104 + (v111 ^ v107 ^ v108) + 1859775393;
  HIDWORD(v4) = v108;
  LODWORD(v4) = v108;
  v115 = v4 >> 2;
  v116 = v114 + v113;
  HIDWORD(v4) = v63 ^ v56 ^ v86 ^ v105;
  LODWORD(v4) = HIDWORD(v4);
  v117 = v4 >> 31;
  HIDWORD(v4) = v116;
  LODWORD(v4) = v116;
  v118 = v117 + v107 + (v115 ^ v111 ^ v110) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v110;
  LODWORD(v4) = v110;
  v119 = v4 >> 2;
  HIDWORD(v4) = v66 ^ v60 ^ v89 ^ v109;
  LODWORD(v4) = HIDWORD(v4);
  v120 = v4 >> 31;
  HIDWORD(v4) = v118;
  LODWORD(v4) = v118;
  v121 = v4 >> 27;
  v122 = v120 + v111 + (v119 ^ v115 ^ v116) + 1859775393;
  HIDWORD(v4) = v116;
  LODWORD(v4) = v116;
  v123 = v4 >> 2;
  v124 = v122 + v121;
  HIDWORD(v4) = v70 ^ v63 ^ v94 ^ v112;
  LODWORD(v4) = HIDWORD(v4);
  v125 = v4 >> 31;
  HIDWORD(v4) = v124;
  LODWORD(v4) = v124;
  v126 = v125 + v115 + (v123 ^ v119 ^ v118) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v118;
  LODWORD(v4) = v118;
  v127 = v4 >> 2;
  HIDWORD(v4) = v73 ^ v66 ^ v97 ^ v117;
  LODWORD(v4) = HIDWORD(v4);
  v128 = v4 >> 31;
  HIDWORD(v4) = v126;
  LODWORD(v4) = v126;
  v129 = v4 >> 27;
  v130 = v128 + v119 + (v127 ^ v123 ^ v124) + 1859775393;
  HIDWORD(v4) = v124;
  LODWORD(v4) = v124;
  v131 = v4 >> 2;
  v132 = v130 + v129;
  HIDWORD(v4) = v78 ^ v70 ^ v102 ^ v120;
  LODWORD(v4) = HIDWORD(v4);
  v133 = v4 >> 31;
  HIDWORD(v4) = v132;
  LODWORD(v4) = v132;
  v134 = v133 + v123 + (v131 ^ v127 ^ v126) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v126;
  LODWORD(v4) = v126;
  v135 = v4 >> 2;
  HIDWORD(v4) = v81 ^ v73 ^ v105 ^ v125;
  LODWORD(v4) = HIDWORD(v4);
  v136 = v4 >> 31;
  HIDWORD(v4) = v134;
  LODWORD(v4) = v134;
  v137 = v4 >> 27;
  v138 = v136 + v127 + (v135 ^ v131 ^ v132) + 1859775393;
  HIDWORD(v4) = v132;
  LODWORD(v4) = v132;
  v139 = v4 >> 2;
  v140 = v138 + v137;
  HIDWORD(v4) = v86 ^ v78 ^ v109 ^ v128;
  LODWORD(v4) = HIDWORD(v4);
  v141 = v4 >> 31;
  HIDWORD(v4) = v140;
  LODWORD(v4) = v140;
  v142 = v141 + v131 + (v139 ^ v135 ^ v134) + 1859775393 + (v4 >> 27);
  HIDWORD(v4) = v134;
  LODWORD(v4) = v134;
  v143 = v4 >> 2;
  HIDWORD(v4) = v89 ^ v81 ^ v112 ^ v133;
  LODWORD(v4) = HIDWORD(v4);
  v144 = v4 >> 31;
  HIDWORD(v4) = v142;
  LODWORD(v4) = v142;
  v145 = v144 + v135 + ((v140 | v143) & v139 | v140 & v143) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v140;
  LODWORD(v4) = v140;
  v146 = v4 >> 2;
  HIDWORD(v4) = v94 ^ v86 ^ v117 ^ v136;
  LODWORD(v4) = HIDWORD(v4);
  v147 = v4 >> 31;
  HIDWORD(v4) = v145;
  LODWORD(v4) = v145;
  v148 = v147 + v139 + ((v142 | v146) & v143 | v142 & v146) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v142;
  LODWORD(v4) = v142;
  v149 = v4 >> 2;
  HIDWORD(v4) = v97 ^ v89 ^ v120 ^ v141;
  LODWORD(v4) = HIDWORD(v4);
  v150 = v4 >> 31;
  HIDWORD(v4) = v148;
  LODWORD(v4) = v148;
  v151 = v150 + v143 + ((v145 | v149) & v146 | v145 & v149) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v145;
  LODWORD(v4) = v145;
  v152 = v4 >> 2;
  HIDWORD(v4) = v102 ^ v94 ^ v125 ^ v144;
  LODWORD(v4) = HIDWORD(v4);
  v153 = v4 >> 31;
  HIDWORD(v4) = v151;
  LODWORD(v4) = v151;
  v154 = v4 >> 27;
  v155 = v153 + v146 + ((v148 | v152) & v149 | v148 & v152) - 1894007588;
  HIDWORD(v4) = v148;
  LODWORD(v4) = v148;
  v156 = v4 >> 2;
  v157 = v155 + v154;
  HIDWORD(v4) = v105 ^ v97 ^ v128 ^ v147;
  LODWORD(v4) = HIDWORD(v4);
  v158 = v4 >> 31;
  HIDWORD(v4) = v157;
  LODWORD(v4) = v157;
  v159 = v158 + v149 + ((v151 | v156) & v152 | v151 & v156) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v151;
  LODWORD(v4) = v151;
  v160 = v4 >> 2;
  HIDWORD(v4) = v109 ^ v102 ^ v133 ^ v150;
  LODWORD(v4) = HIDWORD(v4);
  v161 = v4 >> 31;
  HIDWORD(v4) = v159;
  LODWORD(v4) = v159;
  v162 = v161 + v152 + ((v157 | v160) & v156 | v157 & v160) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v157;
  LODWORD(v4) = v157;
  v163 = v4 >> 2;
  HIDWORD(v4) = v112 ^ v105 ^ v136 ^ v153;
  LODWORD(v4) = HIDWORD(v4);
  v164 = v4 >> 31;
  HIDWORD(v4) = v162;
  LODWORD(v4) = v162;
  v165 = v164 + v156 + ((v159 | v163) & v160 | v159 & v163) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v159;
  LODWORD(v4) = v159;
  v166 = v4 >> 2;
  HIDWORD(v4) = v117 ^ v109 ^ v141 ^ v158;
  LODWORD(v4) = HIDWORD(v4);
  v167 = v4 >> 31;
  HIDWORD(v4) = v165;
  LODWORD(v4) = v165;
  v168 = v167 + v160 + ((v162 | v166) & v163 | v162 & v166) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v162;
  LODWORD(v4) = v162;
  v169 = v4 >> 2;
  HIDWORD(v4) = v120 ^ v112 ^ v144 ^ v161;
  LODWORD(v4) = HIDWORD(v4);
  v170 = v4 >> 31;
  HIDWORD(v4) = v168;
  LODWORD(v4) = v168;
  v171 = v170 + v163 + ((v165 | v169) & v166 | v165 & v169) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v165;
  LODWORD(v4) = v165;
  v172 = v4 >> 2;
  HIDWORD(v4) = v125 ^ v117 ^ v147 ^ v164;
  LODWORD(v4) = HIDWORD(v4);
  v173 = v4 >> 31;
  HIDWORD(v4) = v171;
  LODWORD(v4) = v171;
  v174 = v4 >> 27;
  v175 = v173 + v166 + ((v168 | v172) & v169 | v168 & v172) - 1894007588;
  HIDWORD(v4) = v168;
  LODWORD(v4) = v168;
  v176 = v4 >> 2;
  v177 = v175 + v174;
  HIDWORD(v4) = v128 ^ v120 ^ v150 ^ v167;
  LODWORD(v4) = HIDWORD(v4);
  v178 = v4 >> 31;
  HIDWORD(v4) = v177;
  LODWORD(v4) = v177;
  v179 = v178 + v169 + ((v171 | v176) & v172 | v171 & v176) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v171;
  LODWORD(v4) = v171;
  v180 = v4 >> 2;
  HIDWORD(v4) = v133 ^ v125 ^ v153 ^ v170;
  LODWORD(v4) = HIDWORD(v4);
  v181 = v4 >> 31;
  HIDWORD(v4) = v179;
  LODWORD(v4) = v179;
  v182 = v181 + v172 + ((v177 | v180) & v176 | v177 & v180) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v177;
  LODWORD(v4) = v177;
  v183 = v4 >> 2;
  HIDWORD(v4) = v136 ^ v128 ^ v158 ^ v173;
  LODWORD(v4) = HIDWORD(v4);
  v184 = v4 >> 31;
  HIDWORD(v4) = v182;
  LODWORD(v4) = v182;
  v185 = v184 + v176 + ((v179 | v183) & v180 | v179 & v183) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v179;
  LODWORD(v4) = v179;
  v186 = v4 >> 2;
  HIDWORD(v4) = v141 ^ v133 ^ v161 ^ v178;
  LODWORD(v4) = HIDWORD(v4);
  v187 = v4 >> 31;
  HIDWORD(v4) = v185;
  LODWORD(v4) = v185;
  v188 = v187 + v180 + ((v182 | v186) & v183 | v182 & v186) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v182;
  LODWORD(v4) = v182;
  v189 = v4 >> 2;
  HIDWORD(v4) = v144 ^ v136 ^ v164 ^ v181;
  LODWORD(v4) = HIDWORD(v4);
  v190 = v4 >> 31;
  HIDWORD(v4) = v188;
  LODWORD(v4) = v188;
  v191 = v190 + v183 + ((v185 | v189) & v186 | v185 & v189) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v185;
  LODWORD(v4) = v185;
  v192 = v4 >> 2;
  HIDWORD(v4) = v147 ^ v141 ^ v167 ^ v184;
  LODWORD(v4) = HIDWORD(v4);
  v193 = v4 >> 31;
  HIDWORD(v4) = v191;
  LODWORD(v4) = v191;
  v194 = v4 >> 27;
  v195 = v193 + v186 + ((v188 | v192) & v189 | v188 & v192) - 1894007588;
  HIDWORD(v4) = v188;
  LODWORD(v4) = v188;
  v196 = v4 >> 2;
  v197 = v195 + v194;
  HIDWORD(v4) = v150 ^ v144 ^ v170 ^ v187;
  LODWORD(v4) = HIDWORD(v4);
  v198 = v4 >> 31;
  HIDWORD(v4) = v195 + v194;
  LODWORD(v4) = v195 + v194;
  v199 = v198 + v189 + ((v191 | v196) & v192 | v191 & v196) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v191;
  LODWORD(v4) = v191;
  v200 = v4 >> 2;
  v201 = ((v195 + v194) | v200) & v196 | (v195 + v194) & v200;
  HIDWORD(v4) = v153 ^ v147 ^ v173 ^ v190;
  LODWORD(v4) = HIDWORD(v4);
  v202 = v4 >> 31;
  HIDWORD(v4) = v199;
  LODWORD(v4) = v199;
  v203 = v202 + v192 + v201 - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v197;
  LODWORD(v4) = v197;
  v204 = v4 >> 2;
  HIDWORD(v4) = v158 ^ v150 ^ v178 ^ v193;
  LODWORD(v4) = HIDWORD(v4);
  v205 = v4 >> 31;
  HIDWORD(v4) = v203;
  LODWORD(v4) = v203;
  v206 = v205 + v196 + ((v199 | v204) & v200 | v199 & v204) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v199;
  LODWORD(v4) = v199;
  v207 = v4 >> 2;
  HIDWORD(v4) = v161 ^ v153 ^ v181 ^ v198;
  LODWORD(v4) = HIDWORD(v4);
  v208 = v4 >> 31;
  HIDWORD(v4) = v206;
  LODWORD(v4) = v206;
  v209 = v208 + v200 + ((v203 | v207) & v204 | v203 & v207) - 1894007588 + (v4 >> 27);
  HIDWORD(v4) = v203;
  LODWORD(v4) = v203;
  v210 = v4 >> 2;
  HIDWORD(v4) = v164 ^ v158 ^ v184 ^ v202;
  LODWORD(v4) = HIDWORD(v4);
  v211 = v4 >> 31;
  HIDWORD(v4) = v209;
  LODWORD(v4) = v209;
  v212 = v4 >> 27;
  HIDWORD(v4) = v206;
  LODWORD(v4) = v206;
  v213 = v4 >> 2;
  v214 = v211 + v204 + (v210 ^ v207 ^ v206) - 899497514 + v212;
  HIDWORD(v4) = v167 ^ v161 ^ v187 ^ v205;
  LODWORD(v4) = HIDWORD(v4);
  v215 = v4 >> 31;
  HIDWORD(v4) = v214;
  LODWORD(v4) = v214;
  v216 = v215 + v207 + (v213 ^ v210 ^ v209) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v209;
  LODWORD(v4) = v209;
  v217 = v4 >> 2;
  HIDWORD(v4) = v170 ^ v164 ^ v190 ^ v208;
  LODWORD(v4) = HIDWORD(v4);
  v218 = v4 >> 31;
  HIDWORD(v4) = v216;
  LODWORD(v4) = v216;
  v219 = v4 >> 27;
  v220 = v218 + v210 + (v217 ^ v213 ^ v214) - 899497514;
  HIDWORD(v4) = v214;
  LODWORD(v4) = v214;
  v221 = v4 >> 2;
  v222 = v220 + v219;
  HIDWORD(v4) = v173 ^ v167 ^ v193 ^ v211;
  LODWORD(v4) = HIDWORD(v4);
  v223 = v4 >> 31;
  HIDWORD(v4) = v222;
  LODWORD(v4) = v222;
  v224 = v223 + v213 + (v221 ^ v217 ^ v216) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v216;
  LODWORD(v4) = v216;
  v225 = v4 >> 2;
  HIDWORD(v4) = v178 ^ v170 ^ v198 ^ v215;
  LODWORD(v4) = HIDWORD(v4);
  v226 = v4 >> 31;
  HIDWORD(v4) = v224;
  LODWORD(v4) = v224;
  v227 = v4 >> 27;
  HIDWORD(v4) = v222;
  LODWORD(v4) = v222;
  v228 = v4 >> 2;
  v229 = v226 + v217 + (v225 ^ v221 ^ v222) - 899497514 + v227;
  HIDWORD(v4) = v181 ^ v173 ^ v202 ^ v218;
  LODWORD(v4) = HIDWORD(v4);
  v230 = v4 >> 31;
  *this = v226;
  this[1] = v230;
  HIDWORD(v4) = v229;
  LODWORD(v4) = v229;
  v231 = v230 + v221 + (v228 ^ v225 ^ v224) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v224;
  LODWORD(v4) = v224;
  v232 = v4 >> 2;
  HIDWORD(v4) = v184 ^ v178 ^ v205 ^ v223;
  LODWORD(v4) = HIDWORD(v4);
  v233 = v4 >> 31;
  HIDWORD(v4) = v231;
  LODWORD(v4) = v231;
  v234 = v233 + v225 + (v232 ^ v228 ^ v229) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v229;
  LODWORD(v4) = v229;
  v235 = v4 >> 2;
  HIDWORD(v4) = v187 ^ v181 ^ v208 ^ v226;
  LODWORD(v4) = HIDWORD(v4);
  v236 = v4 >> 31;
  this[2] = v233;
  this[3] = v236;
  HIDWORD(v4) = v234;
  LODWORD(v4) = v234;
  v237 = v236 + v228 + (v235 ^ v232 ^ v231) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v231;
  LODWORD(v4) = v231;
  v238 = v4 >> 2;
  HIDWORD(v4) = v190 ^ v184 ^ v211 ^ v230;
  LODWORD(v4) = HIDWORD(v4);
  v239 = v4 >> 31;
  HIDWORD(v4) = v237;
  LODWORD(v4) = v237;
  v240 = v239 + v232 + (v238 ^ v235 ^ v234) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v234;
  LODWORD(v4) = v234;
  v241 = v4 >> 2;
  HIDWORD(v4) = v193 ^ v187 ^ v215 ^ v233;
  LODWORD(v4) = HIDWORD(v4);
  v242 = v4 >> 31;
  this[4] = v239;
  this[5] = v242;
  HIDWORD(v4) = v240;
  LODWORD(v4) = v240;
  v243 = v242 + v235 + (v241 ^ v238 ^ v237) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v237;
  LODWORD(v4) = v237;
  v244 = v4 >> 2;
  HIDWORD(v4) = v198 ^ v190 ^ v218 ^ v236;
  LODWORD(v4) = HIDWORD(v4);
  v245 = v4 >> 31;
  HIDWORD(v4) = v243;
  LODWORD(v4) = v243;
  v246 = v4 >> 27;
  v247 = v245 + v238 + (v244 ^ v241 ^ v240) - 899497514;
  HIDWORD(v4) = v240;
  LODWORD(v4) = v240;
  v248 = v4 >> 2;
  v249 = v247 + v246;
  HIDWORD(v4) = v202 ^ v193 ^ v223 ^ v239;
  LODWORD(v4) = HIDWORD(v4);
  v250 = v4 >> 31;
  this[6] = v245;
  this[7] = v250;
  HIDWORD(v4) = v249;
  LODWORD(v4) = v249;
  v251 = v250 + v241 + (v248 ^ v244 ^ v243) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v243;
  LODWORD(v4) = v243;
  v252 = v4 >> 2;
  HIDWORD(v4) = v205 ^ v198 ^ v226 ^ v242;
  LODWORD(v4) = HIDWORD(v4);
  v253 = v4 >> 31;
  HIDWORD(v4) = v251;
  LODWORD(v4) = v251;
  v254 = v253 + v244 + (v252 ^ v248 ^ v249) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v249;
  LODWORD(v4) = v249;
  v255 = v4 >> 2;
  HIDWORD(v4) = v208 ^ v202 ^ v230 ^ v245;
  LODWORD(v4) = HIDWORD(v4);
  v256 = v4 >> 31;
  this[8] = v253;
  this[9] = v256;
  HIDWORD(v4) = v254;
  LODWORD(v4) = v254;
  v257 = v256 + v248 + (v255 ^ v252 ^ v251) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v251;
  LODWORD(v4) = v251;
  v258 = v4 >> 2;
  HIDWORD(v4) = v211 ^ v205 ^ v233 ^ v250;
  LODWORD(v4) = HIDWORD(v4);
  v259 = v4 >> 31;
  HIDWORD(v4) = v257;
  LODWORD(v4) = v257;
  v260 = v259 + v252 + (v258 ^ v255 ^ v254) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v254;
  LODWORD(v4) = v254;
  v261 = v4 >> 2;
  HIDWORD(v4) = v215 ^ v208 ^ v236 ^ v253;
  LODWORD(v4) = HIDWORD(v4);
  v262 = v4 >> 31;
  this[10] = v259;
  this[11] = v262;
  HIDWORD(v4) = v260;
  LODWORD(v4) = v260;
  v263 = v262 + v255 + (v261 ^ v258 ^ v257) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v257;
  LODWORD(v4) = v257;
  v264 = v4 >> 2;
  HIDWORD(v4) = v218 ^ v211 ^ v239 ^ v256;
  LODWORD(v4) = HIDWORD(v4);
  v265 = v4 >> 31;
  HIDWORD(v4) = v263;
  LODWORD(v4) = v263;
  v266 = v4 >> 27;
  v267 = v265 + v258 + (v264 ^ v261 ^ v260) - 899497514;
  HIDWORD(v4) = v260;
  LODWORD(v4) = v260;
  v268 = v4 >> 2;
  v269 = v267 + v266;
  HIDWORD(v4) = v223 ^ v215 ^ v242 ^ v259;
  LODWORD(v4) = HIDWORD(v4);
  v270 = v4 >> 31;
  this[12] = v265;
  this[13] = v270;
  HIDWORD(v4) = v269;
  LODWORD(v4) = v269;
  v271 = v270 + v261 + (v268 ^ v264 ^ v263) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v263;
  LODWORD(v4) = v263;
  v272 = v4 >> 2;
  HIDWORD(v4) = v226 ^ v218 ^ v245 ^ v262;
  LODWORD(v4) = HIDWORD(v4);
  v273 = v4 >> 31;
  HIDWORD(v4) = v271;
  LODWORD(v4) = v271;
  v274 = v273 + v264 + (v272 ^ v268 ^ v269) - 899497514 + (v4 >> 27);
  HIDWORD(v4) = v269;
  LODWORD(v4) = v269;
  v275 = v4 >> 2;
  HIDWORD(v4) = v230 ^ v223 ^ v250 ^ v265;
  LODWORD(v4) = HIDWORD(v4);
  v276 = v4 >> 31;
  this[14] = v273;
  this[15] = v276;
  HIDWORD(v4) = v274;
  LODWORD(v4) = v274;
  this[16] = v1 + v276 + v268 + (v275 ^ v272 ^ v271) - 899497514 + (v4 >> 27);
  this[17] = v274 + v2;
  HIDWORD(v4) = v271;
  LODWORD(v4) = v271;
  this[18] = (v4 >> 2) + v6;
  this[19] = v275 + v277;
  this[20] = v272 + v278;
  return this;
}

_DWORD *llvm::SHA1::update(_DWORD *this, unsigned int *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  char v10;
  int v11;

  v3 = a3;
  v4 = a2;
  v5 = (uint64_t)this;
  this[21] += a3;
  v6 = *((unsigned __int8 *)this + 88);
  if (*((_BYTE *)this + 88))
  {
    if (64 - v6 >= a3)
      v7 = a3;
    else
      v7 = 64 - v6;
    if (v7)
    {
      v8 = a2;
      v9 = v7;
      do
      {
        v10 = *(_BYTE *)v8;
        v8 = (unsigned int *)((char *)v8 + 1);
        *(_BYTE *)(v5 + (v6 ^ 3)) = v10;
        LODWORD(v6) = (*(_BYTE *)(v5 + 88))++ + 1;
        if ((_DWORD)v6 == 64)
        {
          this = llvm::SHA1::hashBlock((_DWORD *)v5);
          LOBYTE(v6) = 0;
          *(_BYTE *)(v5 + 88) = 0;
        }
        --v9;
      }
      while (v9);
    }
    v3 -= v7;
    v4 = (unsigned int *)((char *)v4 + v7);
  }
  if (v3 >= 0x40)
  {
    do
    {
      *(_DWORD *)v5 = bswap32(*v4);
      *(_DWORD *)(v5 + 4) = bswap32(v4[1]);
      *(_DWORD *)(v5 + 8) = bswap32(v4[2]);
      *(_DWORD *)(v5 + 12) = bswap32(v4[3]);
      *(_DWORD *)(v5 + 16) = bswap32(v4[4]);
      *(_DWORD *)(v5 + 20) = bswap32(v4[5]);
      *(_DWORD *)(v5 + 24) = bswap32(v4[6]);
      *(_DWORD *)(v5 + 28) = bswap32(v4[7]);
      *(_DWORD *)(v5 + 32) = bswap32(v4[8]);
      *(_DWORD *)(v5 + 36) = bswap32(v4[9]);
      *(_DWORD *)(v5 + 40) = bswap32(v4[10]);
      *(_DWORD *)(v5 + 44) = bswap32(v4[11]);
      *(_DWORD *)(v5 + 48) = bswap32(v4[12]);
      *(_DWORD *)(v5 + 52) = bswap32(v4[13]);
      *(_DWORD *)(v5 + 56) = bswap32(v4[14]);
      *(_DWORD *)(v5 + 60) = bswap32(v4[15]);
      this = llvm::SHA1::hashBlock((_DWORD *)v5);
      v3 -= 64;
      v4 += 16;
    }
    while (v3 > 0x3F);
  }
  if (v3)
  {
    LOBYTE(v11) = *(_BYTE *)(v5 + 88);
    do
    {
      *(_BYTE *)(v5 + (v11 ^ 3)) = *(_BYTE *)v4;
      v11 = (*(_BYTE *)(v5 + 88))++ + 1;
      if (v11 == 64)
      {
        this = llvm::SHA1::hashBlock((_DWORD *)v5);
        LOBYTE(v11) = 0;
        *(_BYTE *)(v5 + 88) = 0;
      }
      v4 = (unsigned int *)((char *)v4 + 1);
      --v3;
    }
    while (v3);
  }
  return this;
}

_DWORD *llvm::SHA1::pad(_DWORD *this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  v1 = (uint64_t)this;
  *((_BYTE *)this + (*((unsigned __int8 *)this + 88) ^ 3)) = 0x80;
  v2 = *((unsigned __int8 *)this + 88);
  LOBYTE(v3) = v2 + 1;
  *((_BYTE *)this + 88) = v2 + 1;
  if (v2 != 55)
  {
    if (v2 == 63)
    {
      this = llvm::SHA1::hashBlock(this);
      LOBYTE(v3) = 0;
      *(_BYTE *)(v1 + 88) = 0;
    }
    do
    {
      *(_BYTE *)(v1 + (v3 ^ 3)) = 0;
      v3 = (*(_BYTE *)(v1 + 88))++ + 1;
      if (v3 == 64)
      {
        this = llvm::SHA1::hashBlock((_DWORD *)v1);
        LOBYTE(v3) = 0;
        *(_BYTE *)(v1 + 88) = 0;
      }
    }
    while (v3 != 56);
  }
  *(_BYTE *)(v1 + 59) = 0;
  *(_WORD *)(v1 + 57) = 0;
  *(_BYTE *)(v1 + 56) = *(_DWORD *)(v1 + 84) >> 29;
  *(_BYTE *)(v1 + 88) = 60;
  *(_BYTE *)(v1 + 63) = *(_DWORD *)(v1 + 84) >> 21;
  v4 = (*(_BYTE *)(v1 + 88))++ + 1;
  if (v4 == 64)
  {
    this = llvm::SHA1::hashBlock((_DWORD *)v1);
    LOBYTE(v4) = 0;
    *(_BYTE *)(v1 + 88) = 0;
  }
  *(_BYTE *)(v1 + (v4 ^ 3)) = *(_DWORD *)(v1 + 84) >> 13;
  v5 = (*(_BYTE *)(v1 + 88))++ + 1;
  if (v5 == 64)
  {
    this = llvm::SHA1::hashBlock((_DWORD *)v1);
    LOBYTE(v5) = 0;
    *(_BYTE *)(v1 + 88) = 0;
  }
  *(_BYTE *)(v1 + (v5 ^ 3)) = *(_DWORD *)(v1 + 84) >> 5;
  v6 = (*(_BYTE *)(v1 + 88))++ + 1;
  if (v6 == 64)
  {
    this = llvm::SHA1::hashBlock((_DWORD *)v1);
    LOBYTE(v6) = 0;
    *(_BYTE *)(v1 + 88) = 0;
  }
  *(_BYTE *)(v1 + (v6 ^ 3)) = 8 * *(_BYTE *)(v1 + 84);
  v7 = (*(_BYTE *)(v1 + 88))++ + 1;
  if (v7 == 64)
  {
    this = llvm::SHA1::hashBlock((_DWORD *)v1);
    *(_BYTE *)(v1 + 88) = 0;
  }
  return this;
}

__n128 llvm::SHA1::result@<Q0>(llvm::SHA1 *this@<X0>, int8x16_t *a2@<X8>)
{
  unsigned int v4;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[28];

  v8 = *((_OWORD *)this + 2);
  v9 = *((_OWORD *)this + 3);
  *(_OWORD *)v10 = *((_OWORD *)this + 4);
  *(_OWORD *)&v10[12] = *(_OWORD *)((char *)this + 76);
  v6 = *(__n128 *)this;
  v7 = *((_OWORD *)this + 1);
  llvm::SHA1::pad(this);
  v4 = bswap32(*((_DWORD *)this + 20));
  *a2 = vrev32q_s8(*((int8x16_t *)this + 4));
  a2[1].i32[0] = v4;
  *((_OWORD *)this + 2) = v8;
  *((_OWORD *)this + 3) = v9;
  *((_OWORD *)this + 4) = *(_OWORD *)v10;
  *(_OWORD *)((char *)this + 76) = *(_OWORD *)&v10[12];
  result = v6;
  *(__n128 *)this = v6;
  *((_OWORD *)this + 1) = v7;
  return result;
}

void *llvm::SmallPtrSetImplBase::shrink_and_clear(void **this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  size_t v5;
  void *v6;

  free(this[1]);
  v2 = *((_DWORD *)this + 5) - *((_DWORD *)this + 6);
  v3 = 1 << (33 - __clz(v2 - 1));
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  if (v2 <= 0x10)
    v4 = 32;
  else
    v4 = v3;
  *((_DWORD *)this + 4) = v4;
  v5 = 8 * v4;
  v6 = malloc(v5);
  if (!v6)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  this[1] = v6;
  return memset(v6, 255, v5);
}

const void **llvm::SmallPtrSetImplBase::insert_imp_big(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  const void **result;
  const void *v10;
  const void **v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  v4 = *((_DWORD *)this + 5);
  v5 = *((_DWORD *)this + 4);
  if (3 * v5 <= 4 * (v4 - *((_DWORD *)this + 6)))
  {
    if (v5 >= 0x40)
      v5 *= 2;
    else
      v5 = 128;
  }
  else if (v5 - v4 >= v5 >> 3)
  {
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::Grow(this, v5);
LABEL_3:
  v6 = *((_DWORD *)this + 4) - 1;
  v7 = *((_QWORD *)this + 1);
  v8 = v6 & ((a2 >> 4) ^ (a2 >> 9));
  result = (const void **)(v7 + 8 * v8);
  v10 = *result;
  if (*result == (const void *)-1)
  {
    v11 = 0;
LABEL_5:
    if (v11)
      result = v11;
    if (*result != a2)
    {
      if (*result == (const void *)-2)
        --*((_DWORD *)this + 6);
      else
        ++*((_DWORD *)this + 5);
      *result = a2;
    }
  }
  else
  {
    v11 = 0;
    v12 = 1;
    while (v10 != a2)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (const void *)-2;
      if (v13)
        v11 = result;
      v14 = v8 + v12++;
      v8 = v14 & v6;
      result = (const void **)(v7 + 8 * v8);
      v10 = *result;
      if (*result == (const void *)-1)
        goto LABEL_5;
    }
  }
  return result;
}

void llvm::SmallPtrSetImplBase::Grow(llvm::SmallPtrSetImplBase *this, unsigned int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  unsigned int v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;

  v5 = *(uint64_t **)this;
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = 16;
  if (v4 == *(uint64_t **)this)
    v6 = 20;
  v7 = *(unsigned int *)((char *)this + v6);
  v8 = 8 * a2;
  v9 = malloc(v8);
  if (!v9 && (a2 || (v9 = malloc(1uLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)this + 1) = v9;
  *((_DWORD *)this + 4) = a2;
  memset(v9, 255, v8);
  if ((_DWORD)v7)
  {
    v10 = a2 - 1;
    v11 = v4;
    do
    {
      v14 = *v11;
      if ((unint64_t)*v11 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v15 = *((_QWORD *)this + 1);
        v16 = ((v14 >> 4) ^ (v14 >> 9)) & v10;
        v13 = (_QWORD *)(v15 + 8 * v16);
        v17 = *v13;
        if (*v13 == -1)
        {
          v12 = 0;
LABEL_9:
          if (v12)
            v13 = v12;
        }
        else
        {
          v12 = 0;
          v18 = 1;
          while (v17 != v14)
          {
            if (v12)
              v19 = 0;
            else
              v19 = v17 == -2;
            if (v19)
              v12 = v13;
            v20 = v16 + v18++;
            v16 = v20 & v10;
            v13 = (_QWORD *)(v15 + 8 * (v20 & v10));
            v17 = *v13;
            if (*v13 == -1)
              goto LABEL_9;
          }
        }
        *v13 = v14;
      }
      ++v11;
    }
    while (v11 != &v4[v7]);
  }
  if (v4 != v5)
    free(v4);
  *(_QWORD *)((char *)this + 20) = (*((_DWORD *)this + 5) - *((_DWORD *)this + 6));
}

const void **llvm::SmallPtrSetImplBase::FindBucketFor(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  const void **result;
  const void *v6;
  const void **v7;
  int v8;
  BOOL v9;
  unsigned int v10;

  v2 = *((_DWORD *)this + 4) - 1;
  v3 = *((_QWORD *)this + 1);
  v4 = ((a2 >> 4) ^ (a2 >> 9)) & v2;
  result = (const void **)(v3 + 8 * v4);
  v6 = *result;
  if (*result == (const void *)-1)
  {
    v7 = 0;
LABEL_3:
    if (v7)
      return v7;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while (v6 != a2)
    {
      if (v7)
        v9 = 0;
      else
        v9 = v6 == (const void *)-2;
      if (v9)
        v7 = result;
      v10 = v4 + v8++;
      v4 = v10 & v2;
      result = (const void **)(v3 + 8 * v4);
      v6 = *result;
      if (*result == (const void *)-1)
        goto LABEL_3;
    }
  }
  return result;
}

llvm::SmallPtrSetImplBase *llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(llvm::SmallPtrSetImplBase *this, const void **a2, const llvm::SmallPtrSetImplBase *a3)
{
  const void *v5;
  uint64_t v6;
  const void **v7;
  const void *v8;
  int v9;
  unsigned int v10;
  int v11;

  *(_QWORD *)this = a2;
  v5 = *(const void **)a3;
  if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3)
  {
    v7 = a2;
    *((_QWORD *)this + 1) = a2;
    *((_DWORD *)this + 4) = *((_DWORD *)a3 + 4);
    v8 = (const void *)*((_QWORD *)a3 + 1);
    v10 = *((_DWORD *)a3 + 4);
    v9 = *((_DWORD *)a3 + 5);
    if (v8 == v5)
      v10 = *((_DWORD *)a3 + 5);
    if (v10)
      goto LABEL_8;
  }
  else
  {
    v6 = *((unsigned int *)a3 + 4);
    v7 = (const void **)malloc(8 * v6);
    if (!v7 && ((_DWORD)v6 || (v7 = (const void **)malloc(1uLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)this + 1) = v7;
    *((_DWORD *)this + 4) = v6;
    v8 = (const void *)*((_QWORD *)a3 + 1);
    v10 = *((_DWORD *)a3 + 4);
    v9 = *((_DWORD *)a3 + 5);
    if (v8 == v5)
      v10 = *((_DWORD *)a3 + 5);
    if (v10)
    {
LABEL_8:
      memmove(v7, v8, 8 * v10);
      v9 = *((_DWORD *)a3 + 5);
    }
  }
  v11 = *((_DWORD *)a3 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return this;
}

uint64_t llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(uint64_t a1, void *__dst, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = __dst;
  v8 = *a4;
  v7 = a4[1];
  if (v7 == *a4)
  {
    *(_QWORD *)(a1 + 8) = __dst;
    v9 = *((unsigned int *)a4 + 5);
    if ((_DWORD)v9)
      memmove(__dst, (const void *)a4[1], 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a4[1] = v8;
  }
  *(_QWORD *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

void *llvm::SmallPtrSetImplBase::CopyFrom(llvm::SmallPtrSetImplBase *this, const llvm::SmallPtrSetImplBase *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  int v9;
  unsigned int v10;
  int v11;

  result = (void *)*((_QWORD *)this + 1);
  v6 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  if (result == *(void **)this)
  {
    if (v5 != v6)
    {
      v7 = *((unsigned int *)a2 + 4);
      if (*((_DWORD *)this + 4) == (_DWORD)v7)
        goto LABEL_14;
      result = malloc(8 * v7);
      if (!result)
      {
LABEL_9:
        if ((_DWORD)v7 || (result = malloc(1uLL)) == 0)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
    }
  }
  else
  {
    if (v5 != v6)
    {
      v7 = *((unsigned int *)a2 + 4);
      if (*((_DWORD *)this + 4) == (_DWORD)v7)
        goto LABEL_14;
      result = realloc(result, 8 * v7);
      if (result)
        goto LABEL_13;
      goto LABEL_9;
    }
    free(result);
    result = *(void **)this;
  }
LABEL_13:
  *((_QWORD *)this + 1) = result;
LABEL_14:
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v8 = (const void *)*((_QWORD *)a2 + 1);
  v9 = *((_DWORD *)a2 + 5);
  if (v8 == *(const void **)a2)
    v10 = *((_DWORD *)a2 + 5);
  else
    v10 = *((_DWORD *)a2 + 4);
  if (v10)
  {
    result = memmove(result, v8, 8 * v10);
    v9 = *((_DWORD *)a2 + 5);
  }
  v11 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return result;
}

double llvm::SmallPtrSetImplBase::MoveFrom(uint64_t a1, int a2, double *a3)
{
  void *v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  double result;

  v6 = *(void **)(a1 + 8);
  if (v6 != *(void **)a1)
    free(v6);
  v8 = *a3;
  v7 = *((_QWORD *)a3 + 1);
  if (v7 == *(_QWORD *)a3)
  {
    v9 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    v10 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v10)
      memmove(v9, *((const void **)a3 + 1), 8 * v10);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a3[1] = v8;
  }
  result = a3[2];
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 6) = 0;
  *((_DWORD *)a3 + 4) = a2;
  return result;
}

void *llvm::SmallVectorBase<unsigned int>::mallocForGrow(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  void *v13;

  if (HIDWORD(a3))
  {
    report_size_overflow(a3);
    goto LABEL_18;
  }
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == -1)
  {
LABEL_18:
    report_at_maximum_capacity(0xFFFFFFFFuLL);
    goto LABEL_19;
  }
  v7 = (2 * v5) | 1;
  v8 = 0xFFFFFFFFLL;
  if (v7 < 0xFFFFFFFF)
    v8 = v7;
  if (v7 >= a3)
    v9 = v8;
  else
    v9 = a3;
  *a5 = v9;
  v10 = v9 * a4;
  v11 = malloc(v9 * a4);
  if (!v11)
  {
    if (v10)
      goto LABEL_19;
    v11 = malloc(1uLL);
    if (!v11)
      goto LABEL_19;
  }
  if (v11 != a2)
    return v11;
  v13 = malloc(v10);
  if (!v13 && (v10 || (v13 = malloc(1uLL)) == 0))
LABEL_19:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  free(a2);
  return v13;
}

void llvm::SmallVectorBase<unsigned long long>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  size_t v11;
  void *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == -1)
  {
    report_at_maximum_capacity(0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_27;
  }
  v8 = (2 * v4) | 1;
  if (v8 <= a3)
    v9 = a3;
  else
    v9 = v8;
  v10 = *(void **)a1;
  v11 = v9 * a4;
  if (v10 == a2)
  {
    v12 = malloc(v9 * a4);
    if (v12 || !v11 && (v12 = malloc(1uLL)) != 0)
    {
      if (v12 == a2)
      {
        v12 = malloc(v11);
        if (!v12)
        {
          if (v11)
            goto LABEL_27;
          v12 = malloc(1uLL);
          if (!v12)
            goto LABEL_27;
        }
        free(a2);
      }
      memcpy(v12, a2, *(_QWORD *)(a1 + 8) * a4);
      goto LABEL_25;
    }
LABEL_27:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v12 = realloc(v10, v9 * a4);
  if (!v12)
  {
    if (v11)
      goto LABEL_27;
    v12 = malloc(1uLL);
    if (!v12)
      goto LABEL_27;
  }
  if (v12 != a2)
    goto LABEL_25;
  v13 = *(_QWORD *)(a1 + 8);
  v12 = malloc(v11);
  if (!v12)
  {
    if (v11)
      goto LABEL_27;
    v12 = malloc(1uLL);
    if (!v12)
      goto LABEL_27;
  }
  if (v13)
    memcpy(v12, a2, v13 * a4);
  free(a2);
LABEL_25:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v9;
}

uint64_t report_size_overflow(unint64_t a1)
{
  BOOL v1;
  unint64_t v2;
  std::string v4;
  __int16 v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;

  std::to_string(&v7, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("SmallVector unable to grow. Requested capacity (", &v7, &v8);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v8, ") is larger than maximum value for size type (", &v9);
  std::to_string(&v6, 0xFFFFFFFFuLL);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v9, (const std::string::value_type *)&v6, &v4);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v4, ")", &v10);
  std::string::~string(&v4);
  std::string::~string(&v6);
  std::string::~string(&v9);
  std::string::~string(&v8);
  std::string::~string(&v7);
  v5 = 260;
  v4.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  v2 = llvm::report_fatal_error((llvm *)&v4, (const llvm::Twine *)1, v1);
  return report_at_maximum_capacity(v2);
}

double report_at_maximum_capacity(unint64_t a1)
{
  BOOL v1;
  std::string *v2;
  const std::string::value_type *v3;
  std::string *v4;
  double result;
  std::string v6;
  __int16 v7;
  std::string v8;

  std::to_string(&v6, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("SmallVector capacity unable to grow. Already at maximum size ", &v6, &v8);
  std::string::~string(&v6);
  v7 = 260;
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  v2 = (std::string *)llvm::report_fatal_error((llvm *)&v6, (const llvm::Twine *)1, v1);
  *(_QWORD *)&result = std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v3, v4).n128_u64[0];
  return result;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *a1@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)std::string::append(a1, a2);
  result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

{
  std::string::size_type v4;
  std::string::size_type v5;
  __n128 *v6;
  __n128 result;

  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  v6 = (__n128 *)std::string::append(a1, a2, v5);
  result = *v6;
  *a3 = *(std::string *)v6->n128_u8;
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string::value_type *__s@<X0>, std::string *this@<X1>, std::string *a3@<X8>)
{
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)std::string::insert(this, 0, __s);
  result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

double llvm::SourceMgr::SourceMgr(llvm::SourceMgr *this)
{
  double result;

  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void llvm::SourceMgr::~SourceMgr(llvm::SourceMgr *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
  {
    v7 = *((_QWORD *)this + 4);
    v8 = (void *)*((_QWORD *)this + 3);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v6;
    operator delete(v8);
  }
  if (*(_QWORD *)this)
  {
    std::vector<llvm::SourceMgr::SrcBuffer>::__clear[abi:nn180100](this);
    operator delete(*(void **)this);
  }
}

uint64_t llvm::SourceMgr::AddIncludeFile(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  llvm::SourceMgr::OpenIncludeFile(a1, a2, a4, (uint64_t)&v11);
  if ((v12 & 1) != 0)
    return 0;
  v10 = v11;
  v11 = 0;
  v6 = llvm::SourceMgr::AddNewSourceBuffer((uint64_t)a1, &v10, a3);
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(unint64_t))(*(_QWORD *)v7 + 8))(v7);
  if ((v12 & 1) == 0)
  {
    v8 = v11;
    v11 = 0;
    if (v8)
      (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return v6;
}

void llvm::SourceMgr::OpenIncludeFile(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  BOOL v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _WORD *v32;
  size_t v33;
  __int128 *p_dst;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  __int128 __dst;
  unint64_t v44;
  __int16 v45;
  _QWORD *v46[2];
  char v47;
  __int16 v48;
  _BYTE __src[24];
  _WORD v50[32];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = *(char *)(a2 + 23);
  v8 = v7 < 0;
  v9 = *(const void **)a2;
  if (v7 >= 0)
    v9 = (const void *)a2;
  v10 = *(unsigned __int8 *)(a2 + 23);
  if (v8)
    v10 = *(_QWORD *)(a2 + 8);
  v11 = a1[8];
  v50[4] = 261;
  *(_QWORD *)__src = v9;
  *(_QWORD *)&__src[8] = v10;
  if (v11)
    llvm::vfs::FileSystem::getBufferForFile(v11, (uint64_t)__src, -1, 1, 0, 0, a4);
  else
    llvm::MemoryBuffer::getFile(__src, 0, 1, 0, 0, a4);
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const void *)a2;
  else
    v13 = *(const void **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)__src = v50;
  *(_OWORD *)&__src[8] = xmmword_181236C00;
  if (v14 < 0x41)
  {
    v15 = 0;
    v16 = 0;
    if (!v14)
      goto LABEL_18;
  }
  else
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__src, v50, v14, 1);
    v15 = *(_QWORD *)&__src[8];
  }
  memcpy((void *)(*(_QWORD *)__src + v15), v13, v14);
  v16 = *(_QWORD *)&__src[8];
LABEL_18:
  *(_QWORD *)&__src[8] = v16 + v14;
  v17 = -1431655765 * ((a1[4] - a1[3]) >> 3);
  if ((_DWORD)v17)
  {
    v18 = 0;
    v19 = 24 * v17;
    do
    {
      if ((*(_BYTE *)(a4 + 16) & 1) == 0)
        break;
      v20 = a1[3] + v18;
      v21 = *(char *)(v20 + 23);
      if (v21 >= 0)
        v22 = (const void *)(a1[3] + v18);
      else
        v22 = *(const void **)v20;
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(v20 + 23);
      else
        v23 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)&__src[8] = 0;
      if (*(_QWORD *)&__src[16] >= v23)
      {
        v24 = 0;
        v25 = 0;
        if (!v23)
          goto LABEL_32;
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__src, v50, v23, 1);
        v24 = *(_QWORD *)&__src[8];
      }
      memcpy((void *)(*(_QWORD *)__src + v24), v22, v23);
      v25 = *(_QWORD *)&__src[8];
LABEL_32:
      *(_QWORD *)&__src[8] = v25 + v23;
      v45 = 260;
      *(_QWORD *)&__dst = a2;
      v48 = 257;
      v42 = 257;
      v40 = 257;
      llvm::sys::path::append(__src, (_QWORD **)&__dst, v46, &v41, &v39);
      v26 = a1[8];
      if (v26)
      {
        v45 = 261;
        __dst = *(_OWORD *)__src;
        llvm::vfs::FileSystem::getBufferForFile(v26, (uint64_t)&__dst, -1, 1, 0, 0, (uint64_t)v46);
        if (v46 == (_QWORD **)a4)
          goto LABEL_40;
      }
      else
      {
        v45 = 261;
        __dst = *(_OWORD *)__src;
        llvm::MemoryBuffer::getFile((unsigned __int8 *)&__dst, 0, 1, 0, 0, (uint64_t)v46);
        if (v46 == (_QWORD **)a4)
        {
LABEL_40:
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_20;
        }
      }
      v27 = *(_BYTE *)(a4 + 16);
      if ((v27 & 1) == 0)
      {
        v28 = *(_QWORD **)a4;
        *(_QWORD *)a4 = 0;
        if (v28)
        {
          (*(void (**)(_QWORD *))(*v28 + 8))(v28);
          v27 = *(_BYTE *)(a4 + 16);
        }
      }
      if ((v47 & 1) == 0)
      {
        *(_BYTE *)(a4 + 16) = v27 & 0xFE;
        v29 = v46[0];
        v46[0] = 0;
        *(_QWORD *)a4 = v29;
LABEL_43:
        v31 = v46[0];
        v46[0] = 0;
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        goto LABEL_20;
      }
      *(_BYTE *)(a4 + 16) = v27 | 1;
      v30 = v46[1];
      *(_QWORD **)a4 = v46[0];
      *(_QWORD *)(a4 + 8) = v30;
LABEL_20:
      v18 += 24;
    }
    while (v19 != v18);
  }
  v32 = *(_WORD **)__src;
  if ((*(_BYTE *)(a4 + 16) & 1) == 0)
  {
    v33 = *(_QWORD *)&__src[8];
    if (*(_QWORD *)&__src[8] >= 0x7FFFFFFFFFFFFFF8uLL)
      abort();
    if (*(_QWORD *)&__src[8] >= 0x17uLL)
    {
      v36 = (*(_QWORD *)&__src[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&__src[8] | 7) != 0x17)
        v36 = *(_QWORD *)&__src[8] | 7;
      v37 = v36 + 1;
      p_dst = (__int128 *)operator new(v36 + 1);
      *((_QWORD *)&__dst + 1) = v33;
      v44 = v37 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
      v35 = a3;
    }
    else
    {
      HIBYTE(v44) = __src[8];
      p_dst = &__dst;
      v35 = a3;
      if (!*(_QWORD *)&__src[8])
      {
        LOBYTE(__dst) = 0;
        if ((*(char *)(a3 + 23) & 0x80000000) == 0)
        {
LABEL_50:
          *(_OWORD *)v35 = __dst;
          *(_QWORD *)(v35 + 16) = v44;
          v32 = *(_WORD **)__src;
          goto LABEL_51;
        }
LABEL_58:
        operator delete(*(void **)v35);
        goto LABEL_50;
      }
    }
    memmove(p_dst, v32, v33);
    *((_BYTE *)p_dst + v33) = 0;
    if ((*(char *)(v35 + 23) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_58;
  }
LABEL_51:
  if (v32 != v50)
    free(v32);
}

uint64_t llvm::SourceMgr::AddNewSourceBuffer(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t *v5;
  __n128 *v6;
  __n128 *v7;
  _QWORD *v8;
  void **v9;
  unint64_t v10;
  void *v11;
  __n128 v13;
  unint64_t v14;

  v4 = *a2;
  *a2 = 0;
  v13 = (__n128)v4;
  v14 = a3;
  v5 = *(unint64_t **)(a1 + 8);
  if ((unint64_t)v5 < *(_QWORD *)(a1 + 16))
  {
    *v5 = v4;
    v5[1] = 0;
    v5[2] = a3;
    v6 = (__n128 *)(v5 + 3);
    *(_QWORD *)(a1 + 8) = v5 + 3;
    v7 = *(__n128 **)a1;
    return -1431655765 * ((unint64_t)((char *)v6 - (char *)v7) >> 3);
  }
  v6 = std::vector<llvm::SourceMgr::SrcBuffer>::__push_back_slow_path<llvm::SourceMgr::SrcBuffer>((__n128 **)a1, &v13);
  v9 = (void **)v13.n128_u64[1];
  v8 = (_QWORD *)v13.n128_u64[0];
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(__n128 **)a1;
  if (v9)
  {
    v10 = v8[2] - v8[1];
    if (v10 > 0xFF && v10 >> 16)
    {
      v11 = *v9;
      if (!*v9)
        goto LABEL_10;
    }
    else
    {
      v11 = *v9;
      if (!*v9)
      {
LABEL_10:
        operator delete(v9);
        v13.n128_u64[1] = 0;
        v8 = (_QWORD *)v13.n128_u64[0];
        goto LABEL_11;
      }
    }
    v9[1] = v11;
    operator delete(v11);
    goto LABEL_10;
  }
LABEL_11:
  v13.n128_u64[0] = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  return -1431655765 * ((unint64_t)((char *)v6 - (char *)v7) >> 3);
}

uint64_t llvm::SourceMgr::FindBufferContainingLoc(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  while (*(_QWORD *)(*(_QWORD *)v2 + 8) > a2 || *(_QWORD *)(*(_QWORD *)v2 + 16) < a2)
  {
    ++v4;
    v2 += 24;
    if (v3 == v4)
      return 0;
  }
  return (v4 + 1);
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumber(llvm::SourceMgr::SrcBuffer *this, const char *a2)
{
  unint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *Offset;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int16 **v23;
  unsigned __int16 *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  _QWORD *v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  _DWORD *v35;
  unsigned int v36;

  v6 = *(_QWORD *)this;
  v4 = (unint64_t **)((char *)this + 8);
  v5 = v6;
  v7 = *(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8);
  if (v7 <= 0xFF)
  {
    Offset = GetOrCreateOffsetCache<unsigned char>(v4, v5);
    v17 = Offset[1] - *Offset;
    if (v17)
    {
      v18 = *Offset;
      do
      {
        v19 = v17 >> 1;
        v20 = (unsigned __int8 *)(v18 + (v17 >> 1));
        v22 = *v20;
        v21 = v20 + 1;
        v17 += ~(v17 >> 1);
        if (v22 < ((_BYTE)a2 - *(_DWORD *)(*(_QWORD *)this + 8)))
          v18 = (unint64_t)v21;
        else
          v17 = v19;
      }
      while (v17);
      return v18 - *Offset + 1;
    }
    else
    {
      return 1;
    }
  }
  else if (v7 >> 16)
  {
    if (HIDWORD(v7))
    {
      v8 = (unint64_t **)GetOrCreateOffsetCache<unsigned long long>(v4, v5);
      v9 = v8[1];
      if (v9 != *v8)
      {
        v10 = v9 - *v8;
        v9 = *v8;
        do
        {
          v11 = v10 >> 1;
          v12 = &v9[v10 >> 1];
          v14 = *v12;
          v13 = v12 + 1;
          v10 += ~(v10 >> 1);
          if (v14 < (unint64_t)&a2[-*(_QWORD *)(*(_QWORD *)this + 8)])
            v9 = v13;
          else
            v10 = v11;
        }
        while (v10);
      }
      return ((unint64_t)((char *)v9 - (char *)*v8) >> 3) + 1;
    }
    else
    {
      v30 = GetOrCreateOffsetCache<unsigned int>(v4, v5);
      v31 = (_DWORD *)v30[1];
      if (v31 != (_DWORD *)*v30)
      {
        v32 = ((uint64_t)v31 - *v30) >> 2;
        v31 = (_DWORD *)*v30;
        do
        {
          v33 = v32 >> 1;
          v34 = &v31[v32 >> 1];
          v36 = *v34;
          v35 = v34 + 1;
          v32 += ~(v32 >> 1);
          if (v36 < (int)a2 - *(_DWORD *)(*(_QWORD *)this + 8))
            v31 = v35;
          else
            v32 = v33;
        }
        while (v32);
      }
      return (((unint64_t)v31 - *v30) >> 2) + 1;
    }
  }
  else
  {
    v23 = (unsigned __int16 **)GetOrCreateOffsetCache<unsigned short>(v4, v5);
    v24 = v23[1];
    if (v24 != *v23)
    {
      v25 = v24 - *v23;
      v24 = *v23;
      do
      {
        v26 = v25 >> 1;
        v27 = &v24[v25 >> 1];
        v29 = *v27;
        v28 = v27 + 1;
        v25 += ~(v25 >> 1);
        if (v29 < (unsigned __int16)((_WORD)a2 - *(_DWORD *)(*(_QWORD *)this + 8)))
          v24 = v28;
        else
          v25 = v26;
      }
      while (v25);
    }
    return ((unint64_t)((char *)v24 - (char *)*v23) >> 1) + 1;
  }
}

unint64_t llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(unint64_t **this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t result;
  uint64_t v10;
  _QWORD *v11;
  unint64_t *Offset;
  unsigned int v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;

  v4 = (uint64_t)*this;
  v5 = (*this)[2] - (*this)[1];
  if (v5 <= 0xFF)
  {
    Offset = GetOrCreateOffsetCache<unsigned char>(this + 1, v4);
    v13 = a2 - 1;
    if (!a2)
      v13 = 0;
    result = (*this)[1];
    if (a2 >= 2)
    {
      v15 = Offset;
      v14 = *Offset;
      if (v15[1] - v14 >= v13)
        result += *(unsigned __int8 *)(v14 + v13 - 1) + 1;
      else
        return 0;
    }
  }
  else
  {
    if (a2)
      v6 = a2 - 1;
    else
      v6 = 0;
    v7 = this + 1;
    if (v5 >> 16)
    {
      if (HIDWORD(v5))
      {
        v8 = GetOrCreateOffsetCache<unsigned long long>(v7, v4);
        result = (*this)[1];
        if (a2 >= 2)
        {
          v11 = v8;
          v10 = *v8;
          if (v6 <= (v11[1] - v10) >> 3)
            result += *(_QWORD *)(v10 + 8 * (v6 - 1)) + 1;
          else
            return 0;
        }
      }
      else
      {
        v19 = GetOrCreateOffsetCache<unsigned int>(v7, v4);
        result = (*this)[1];
        if (a2 >= 2)
        {
          v21 = v19;
          v20 = *v19;
          if (v6 <= (v21[1] - v20) >> 2)
            result += *(unsigned int *)(v20 + 4 * (v6 - 1)) + 1;
          else
            return 0;
        }
      }
    }
    else
    {
      v16 = GetOrCreateOffsetCache<unsigned short>(v7, v4);
      result = (*this)[1];
      if (a2 >= 2)
      {
        v18 = v16;
        v17 = *v16;
        if (v6 <= (v18[1] - v17) >> 1)
          result += *(unsigned __int16 *)(v17 + 2 * (v6 - 1)) + 1;
        else
          return 0;
      }
    }
  }
  return result;
}

__n128 llvm::SourceMgr::SrcBuffer::SrcBuffer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a2->n128_u64[0] = 0;
  *a1 = result;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::SourceMgr::SrcBuffer::~SrcBuffer(llvm::SourceMgr::SrcBuffer *this)
{
  void **v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = (void **)*((_QWORD *)this + 1);
  if (!v2)
    goto LABEL_9;
  v3 = *(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8);
  if (v3 > 0xFF && v3 >> 16)
  {
    v4 = *v2;
    if (!*v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = *v2;
  if (*v2)
  {
LABEL_7:
    v2[1] = v4;
    operator delete(v4);
  }
LABEL_8:
  operator delete(v2);
  *((_QWORD *)this + 1) = 0;
LABEL_9:
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

unint64_t llvm::SourceMgr::getLineAndColumn(uint64_t *a1, char *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::SourceMgr::SrcBuffer *v8;
  unsigned int LineNumber;
  char *v10;
  _QWORD v12[2];

  v4 = *a1;
  if (!a3)
  {
    v5 = -1431655765 * ((unint64_t)(a1[1] - v4) >> 3);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *a1;
      while (*(_QWORD *)(*(_QWORD *)v7 + 8) > (unint64_t)a2
           || *(_QWORD *)(*(_QWORD *)v7 + 16) < (unint64_t)a2)
      {
        ++v6;
        v7 += 24;
        if (v5 == v6)
          goto LABEL_8;
      }
      a3 = v6 + 1;
    }
    else
    {
LABEL_8:
      a3 = 0;
    }
  }
  v8 = (llvm::SourceMgr::SrcBuffer *)(v4 + 24 * (a3 - 1));
  LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v8, a2);
  v10 = &a2[-*(_QWORD *)(*(_QWORD *)v8 + 8)];
  v12[0] = *(_QWORD *)(*(_QWORD *)v8 + 8);
  v12[1] = v10;
  return LineNumber | ((unint64_t)(v10
                                        - llvm::StringRef::find_last_of(v12, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL)) << 32);
}

unint64_t llvm::SourceMgr::FindLocForLineAndColumn(llvm::SourceMgr *this, int a2, unsigned int a3, unsigned int a4)
{
  unint64_t **v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t first_of;
  _QWORD v10[2];

  v5 = (unint64_t **)(*(_QWORD *)this + 24 * (a2 - 1));
  result = llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(v5, a3);
  if (result && a4 >= 2)
  {
    v7 = a4 - 1;
    v8 = result + v7;
    if (result + v7 <= (*v5)[2])
    {
      v10[0] = result;
      v10[1] = v7;
      first_of = llvm::StringRef::find_first_of(v10, "\n\r", 2, 0);
      result = 0;
      if (first_of == -1)
        return v8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::SourceMgr::PrintIncludeStack(llvm::raw_ostream *result, const char *a2, llvm::raw_ostream *a3)
{
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  size_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::SourceMgr::SrcBuffer *v20;
  unsigned int LineNumber;
  _WORD *v22;
  _QWORD v23[2];

  if (a2)
  {
    v3 = a3;
    v5 = result;
    v6 = -1431655765 * ((*((_QWORD *)result + 1) - *(_QWORD *)result) >> 3);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)result;
      while (*(_QWORD *)(*(_QWORD *)v8 + 8) > (unint64_t)a2
           || *(_QWORD *)(*(_QWORD *)v8 + 16) < (unint64_t)a2)
      {
        ++v7;
        v8 += 24;
        if (v6 == v7)
          goto LABEL_8;
      }
      v9 = v7 + 1;
    }
    else
    {
LABEL_8:
      v9 = 0;
    }
    llvm::SourceMgr::PrintIncludeStack(result, *(_QWORD *)(*(_QWORD *)result + 24 * (v9 - 1) + 16), a3);
    v10 = (void *)*((_QWORD *)v3 + 4);
    if (*((_QWORD *)v3 + 3) - (_QWORD)v10 > 0xDuLL)
    {
      qmemcpy(v10, "Included from ", 14);
      *((_QWORD *)v3 + 4) += 14;
    }
    else
    {
      v3 = llvm::raw_ostream::write(v3, "Included from ", 0xEuLL);
    }
    v11 = *(_QWORD *)(*(_QWORD *)v5 + 24 * (v9 - 1));
    v13 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    v14 = v12;
    v15 = (_BYTE *)*((_QWORD *)v3 + 4);
    if (v12 <= *((_QWORD *)v3 + 3) - (_QWORD)v15)
    {
      if (v12)
      {
        memcpy(v15, v13, v12);
        v15 = (_BYTE *)(*((_QWORD *)v3 + 4) + v14);
        *((_QWORD *)v3 + 4) = v15;
      }
    }
    else
    {
      v3 = llvm::raw_ostream::write(v3, (const char *)v13, v12);
      v15 = (_BYTE *)*((_QWORD *)v3 + 4);
    }
    if (*((_BYTE **)v3 + 3) == v15)
    {
      v3 = llvm::raw_ostream::write(v3, ":", 1uLL);
      v16 = *(_QWORD *)v5;
      if (!v9)
        goto LABEL_20;
    }
    else
    {
      *v15 = 58;
      ++*((_QWORD *)v3 + 4);
      v16 = *(_QWORD *)v5;
      if (!v9)
      {
LABEL_20:
        v17 = -1431655765 * ((unint64_t)(*((_QWORD *)v5 + 1) - v16) >> 3);
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = v16;
          while (*(_QWORD *)(*(_QWORD *)v19 + 8) > (unint64_t)a2
               || *(_QWORD *)(*(_QWORD *)v19 + 16) < (unint64_t)a2)
          {
            ++v18;
            v19 += 24;
            if (v17 == v18)
              goto LABEL_26;
          }
          v9 = v18 + 1;
        }
        else
        {
LABEL_26:
          v9 = 0;
        }
      }
    }
    v20 = (llvm::SourceMgr::SrcBuffer *)(v16 + 24 * (v9 - 1));
    LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v20, a2);
    v23[0] = *(_QWORD *)(*(_QWORD *)v20 + 8);
    v23[1] = &a2[-v23[0]];
    llvm::StringRef::find_last_of(v23, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL);
    result = llvm::raw_ostream::operator<<(v3, LineNumber);
    v22 = (_WORD *)*((_QWORD *)result + 4);
    if (*((_QWORD *)result + 3) - (_QWORD)v22 > 1uLL)
    {
      *v22 = 2618;
      *((_QWORD *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, ":\n", 2uLL);
    }
  }
  return result;
}

void llvm::SourceMgr::GetMessage(uint64_t *a1@<X0>, const char *a2@<X1>, int a3@<W2>, llvm::Twine *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  char *v21;
  const char *v22;
  int v23;
  int v24;
  unsigned __int8 *v26;
  const char *v27;
  int v28;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v35;
  int v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int LineNumber;
  int v44;
  size_t v45;
  char *v46;
  llvm::SourceMgr::SrcBuffer *v47;
  std::string *p_p;
  size_t size;
  uint64_t v50;
  size_t v51;
  llvm::Twine *v52;
  std::string __p;
  void *v58;
  uint64_t v59;
  _QWORD v60[6];

  v60[4] = *MEMORY[0x1E0C80C00];
  v58 = v60;
  v59 = 0x400000000;
  if (a2)
  {
    v13 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
    v52 = a4;
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = *a1;
      while (*(_QWORD *)(*(_QWORD *)v15 + 8) > (unint64_t)a2
           || *(_QWORD *)(*(_QWORD *)v15 + 16) < (unint64_t)a2)
      {
        ++v14;
        v15 += 24;
        if (v13 == v14)
          goto LABEL_8;
      }
      v16 = v14 + 1;
    }
    else
    {
LABEL_8:
      v16 = 0;
    }
    v17 = *(_QWORD **)(*a1 + 24 * (v16 - 1));
    v18 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
    v20 = v19;
    v21 = (char *)v17[1];
    v22 = a2;
    while (v22 != v21)
    {
      v24 = *(unsigned __int8 *)--v22;
      v23 = v24;
      if (v24 == 13 || v23 == 10)
      {
        v21 = (char *)(v22 + 1);
        break;
      }
    }
    v26 = (unsigned __int8 *)v17[2];
    v27 = a2;
    if (v26 != (unsigned __int8 *)a2)
    {
      while (1)
      {
        v28 = *(unsigned __int8 *)v27;
        if (v28 == 10 || v28 == 13)
          break;
        if (++v27 == (const char *)v26)
        {
          v27 = (const char *)v26;
          break;
        }
      }
    }
    if (a6)
    {
      v30 = &a5[2 * a6];
      do
      {
        v32 = *a5;
        v31 = a5[1];
        if (*a5)
          v33 = v32 > (unint64_t)v27;
        else
          v33 = 1;
        if (!v33 && v31 >= (unint64_t)v21)
        {
          if (v32 >= (unint64_t)v21)
            v35 = *a5;
          else
            v35 = (int)v21;
          if (v31 <= (unint64_t)v27)
            v36 = a5[1];
          else
            v36 = (int)v27;
          v37 = v59;
          if (v59 >= (unint64_t)HIDWORD(v59))
          {
            v50 = v18;
            v51 = v20;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, v60, v59 + 1, 8);
            v18 = v50;
            v20 = v51;
            v37 = v59;
          }
          *((_QWORD *)v58 + v37) = (v35 - (_DWORD)v21) | ((unint64_t)(v36 - (_DWORD)v21) << 32);
          LODWORD(v59) = v59 + 1;
        }
        a5 += 2;
      }
      while (a5 != v30);
    }
    v38 = v27 - v21;
    v39 = *a1;
    if (!v16)
    {
      v40 = -1431655765 * ((unint64_t)(a1[1] - v39) >> 3);
      if ((_DWORD)v40)
      {
        v41 = 0;
        v42 = *a1;
        while (*(_QWORD *)(*(_QWORD *)v42 + 8) > (unint64_t)a2
             || *(_QWORD *)(*(_QWORD *)v42 + 16) < (unint64_t)a2)
        {
          ++v41;
          v42 += 24;
          if (v40 == v41)
            goto LABEL_52;
        }
        v16 = v41 + 1;
      }
      else
      {
LABEL_52:
        v16 = 0;
      }
    }
    v47 = (llvm::SourceMgr::SrcBuffer *)(v39 + 24 * (v16 - 1));
    v45 = v20;
    v46 = (char *)v18;
    LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v47, a2);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)v47 + 8);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&a2[-__p.__r_.__value_.__r.__words[0]];
    v44 = ~llvm::StringRef::find_last_of(&__p, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL)
        + (_DWORD)a2
        - LODWORD(__p.__r_.__value_.__l.__data_);
    a4 = v52;
  }
  else
  {
    v38 = 0;
    v21 = 0;
    LineNumber = 0;
    v44 = -1;
    v45 = 9;
    v46 = "<unknown>";
  }
  llvm::Twine::str(a4, &__p);
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  llvm::SMDiagnostic::SMDiagnostic(a9, (uint64_t)a1, (uint64_t)a2, v46, v45, LineNumber, v44, a3, p_p, size, v21, v38, v58, v59, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v58 != v60)
    free(v58);
}

uint64_t llvm::SMDiagnostic::SMDiagnostic(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, int a6, int a7, int a8, void *__srca, size_t __lena, void *a11, size_t __sz, const void *a13, uint64_t a14, __int128 *a15, uint64_t a16)
{
  return llvm::SMDiagnostic::SMDiagnostic(a1, a2, a3, __src, __len, a6, a7, a8, __srca, __lena, a11, __sz, a13, a14, a15, a16);
}

{
  void *v22;
  size_t v23;
  size_t v24;
  void *v25;
  size_t v26;
  size_t v27;
  _BYTE *v28;
  size_t v29;
  size_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v37;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_32;
  if (__len >= 0x17)
  {
    v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v23 = __len | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    *(_QWORD *)(a1 + 24) = __len;
    *(_QWORD *)(a1 + 32) = v24 | 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = v22;
    goto LABEL_8;
  }
  v22 = (void *)(a1 + 16);
  *(_BYTE *)(a1 + 39) = __len;
  if (__len)
LABEL_8:
    memmove(v22, __src, __len);
  *((_BYTE *)v22 + __len) = 0;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  if (__lena > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_32;
  if (__lena >= 0x17)
  {
    v26 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__lena | 7) != 0x17)
      v26 = __lena | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    *(_QWORD *)(a1 + 64) = __lena;
    *(_QWORD *)(a1 + 72) = v27 | 0x8000000000000000;
    *(_QWORD *)(a1 + 56) = v25;
    goto LABEL_16;
  }
  v25 = (void *)(a1 + 56);
  *(_BYTE *)(a1 + 79) = __lena;
  if (__lena)
LABEL_16:
    memmove(v25, __srca, __lena);
  *((_BYTE *)v25 + __lena) = 0;
  if (__sz > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_32;
  if (__sz >= 0x17)
  {
    v29 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v29 = __sz | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    *(_QWORD *)(a1 + 88) = __sz;
    *(_QWORD *)(a1 + 96) = v30 | 0x8000000000000000;
    *(_QWORD *)(a1 + 80) = v28;
LABEL_25:
    memmove(v28, a11, __sz);
    v28[__sz] = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    if (!a14)
      goto LABEL_28;
LABEL_26:
    if ((a14 & 0x8000000000000000) == 0)
    {
      v31 = (char *)operator new(8 * a14);
      *(_QWORD *)(a1 + 104) = v31;
      v32 = &v31[8 * a14];
      *(_QWORD *)(a1 + 120) = v32;
      memcpy(v31, a13, 8 * a14);
      *(_QWORD *)(a1 + 112) = v32;
      goto LABEL_28;
    }
LABEL_32:
    abort();
  }
  v28 = (_BYTE *)(a1 + 80);
  *(_BYTE *)(a1 + 103) = __sz;
  if (__sz)
    goto LABEL_25;
  *v28 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (a14)
    goto LABEL_26;
LABEL_28:
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x400000000;
  llvm::SmallVectorImpl<llvm::SMFixIt>::append<llvm::SMFixIt const*,void>(a1 + 128, a15, (__int128 *)((char *)a15 + 40 * a16));
  v33 = *(unsigned int *)(a1 + 136);
  v34 = 126 - 2 * __clz(v33);
  if ((_DWORD)v33)
    v35 = v34;
  else
    v35 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(*(_QWORD *)(a1 + 128), (__int128 *)(*(_QWORD *)(a1 + 128) + 40 * v33), (uint64_t)&v37, v35, 1);
  return a1;
}

void llvm::SMDiagnostic::print(llvm::SMDiagnostic *this, const char *a2, llvm::raw_ostream *a3, int a4, int a5)
{
  char v6;
  llvm::raw_ostream *v7;
  int v10;
  std::string::size_type v11;
  size_t v12;
  void *v13;
  std::string::size_type v14;
  _WORD *v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  std::string::size_type v19;
  _DWORD *v20;
  const char *v21;
  size_t v22;
  _BYTE *v23;
  _BYTE *v24;
  std::string::size_type v25;
  _WORD *v26;
  int v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  _QWORD *v31;
  int v32;
  char *v33;
  unint64_t v34;
  uint64_t i;
  size_t v36;
  std::string *p_b;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *j;
  std::string *v42;
  std::string::size_type size;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::raw_ostream *v53;
  int v54;
  BOOL v55;
  size_t v56;
  unint64_t v57;
  unint64_t v58;
  std::string::size_type v60;
  uint64_t v61;
  size_t v62;
  char v63;
  size_t v64;
  int v65;
  std::string::size_type v66;
  size_t v67;
  std::string *v68;
  const void *v69;
  int v70;
  uint64_t v71;
  std::string *v72;
  std::string *v73;
  _BYTE *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  char *v78;
  int v79;
  std::string::size_type v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  std::string *v89;
  char v90;
  char *v91;
  int v92;
  std::string *v93;
  char v94;
  char *v95;
  std::string *v96;
  char v97;
  char *v98;
  std::string *v99;
  char v100;
  char *v101;
  std::string *v102;
  char v103;
  char *v104;
  std::string *v105;
  char v106;
  char *v107;
  std::string *v108;
  char v109;
  char *v110;
  std::string *v111;
  char v112;
  char *v113;
  std::string *v114;
  char v115;
  char *v116;
  _BYTE *v117;
  unsigned __int8 v118;
  std::string::size_type v119;
  uint64_t v120;
  std::string::size_type v121;
  uint64_t v122;
  std::string::size_type v123;
  int v124;
  std::string *v125;
  char v126;
  char *v127;
  char v128;
  char *v129;
  std::string *v130;
  std::string *v131;
  char v132;
  char *v133;
  std::string *v134;
  std::string *v135;
  char v136;
  char *v137;
  std::string *v138;
  std::string *v139;
  char v140;
  char *v141;
  std::string *v142;
  std::string *v143;
  char v144;
  char *v145;
  std::string *v146;
  std::string *v147;
  char v148;
  char *v149;
  std::string *v150;
  std::string *v151;
  char v152;
  char *v153;
  std::string *v154;
  std::string *v155;
  char v156;
  char *v157;
  std::string *v158;
  _BYTE *v159;
  unint64_t v160;
  int v161;
  llvm::raw_ostream *v162;
  std::string v163;
  std::string __b;
  llvm::raw_ostream *v165;
  size_t v166;

  v6 = a4;
  v7 = a3;
  if (a4)
    v10 = 0;
  else
    v10 = 2;
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  if (!a2 || !*a2)
  {
LABEL_12:
    v16 = (char *)this + 16;
    v17 = *((unsigned __int8 *)this + 39);
    if ((*((char *)this + 39) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_18;
  }
  v11 = __b.__r_.__value_.__r.__words[0];
  v12 = strlen(a2);
  v13 = *(void **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (v12 <= *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v13)
  {
    if (v12)
    {
      memcpy(v13, a2, v12);
      *(_QWORD *)(v11 + 32) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, a2, v12);
  }
  v14 = __b.__r_.__value_.__r.__words[0];
  v15 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v15 <= 1uLL)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
    goto LABEL_12;
  }
  *v15 = 8250;
  *(_QWORD *)(v14 + 32) += 2;
  v16 = (char *)this + 16;
  v17 = *((unsigned __int8 *)this + 39);
  if ((*((char *)this + 39) & 0x80000000) == 0)
  {
LABEL_13:
    if (!(_DWORD)v17)
      goto LABEL_41;
    if ((_DWORD)v17 != 1 || *v16 != 45)
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_18:
  v18 = *((_QWORD *)this + 3);
  if (!v18)
    goto LABEL_41;
  if (v18 != 1 || **(_BYTE **)v16 != 45)
  {
LABEL_24:
    if ((v17 & 0x80u) == 0)
      v21 = v16;
    else
      v21 = (const char *)*((_QWORD *)this + 2);
    if ((v17 & 0x80u) == 0)
      v22 = v17;
    else
      v22 = *((_QWORD *)this + 3);
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v21, v22);
    if (*((_DWORD *)this + 10) == -1)
      goto LABEL_39;
    goto LABEL_31;
  }
LABEL_21:
  v19 = __b.__r_.__value_.__r.__words[0];
  v20 = *(_DWORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v20 > 6uLL)
  {
    *(_DWORD *)((char *)v20 + 3) = 1047423332;
    *v20 = 1685353276;
    *(_QWORD *)(v19 + 32) += 7;
    if (*((_DWORD *)this + 10) == -1)
      goto LABEL_39;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, "<stdin>", 7uLL);
    if (*((_DWORD *)this + 10) == -1)
      goto LABEL_39;
  }
LABEL_31:
  v23 = *(_BYTE **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v23 >= *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 10));
    if (*((_DWORD *)this + 11) == -1)
      goto LABEL_39;
  }
  else
  {
    *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 32) = v23 + 1;
    *v23 = 58;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 10));
    if (*((_DWORD *)this + 11) == -1)
      goto LABEL_39;
  }
  v24 = *(_BYTE **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v24 >= *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
  }
  else
  {
    *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 32) = v24 + 1;
    *v24 = 58;
  }
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 11) + 1);
LABEL_39:
  v25 = __b.__r_.__value_.__r.__words[0];
  v26 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v26 <= 1uLL)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
LABEL_41:
    llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
    if (!a5)
      goto LABEL_49;
    goto LABEL_44;
  }
  *v26 = 8250;
  *(_QWORD *)(v25 + 32) += 2;
  llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
  if (!a5)
    goto LABEL_49;
LABEL_44:
  switch(*((_DWORD *)this + 12))
  {
    case 0:
      llvm::WithColor::error(v7, "", 0, v6 ^ 1);
      break;
    case 1:
      llvm::WithColor::warning(v7, "", 0, v6 ^ 1);
      break;
    case 2:
      llvm::WithColor::remark(v7, "", 0, v6 ^ 1);
      break;
    case 3:
      llvm::WithColor::note(v7, "", 0, v6 ^ 1);
      break;
    default:
      break;
  }
LABEL_49:
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  v27 = *((char *)this + 79);
  if (v27 >= 0)
    v28 = (char *)this + 56;
  else
    v28 = (const char *)*((_QWORD *)this + 7);
  if (v27 >= 0)
    v29 = *((unsigned __int8 *)this + 79);
  else
    v29 = *((_QWORD *)this + 8);
  llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v28, v29);
  v30 = *(_BYTE **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v30 >= *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 10);
    llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
    if (*((_DWORD *)this + 10) == -1)
      return;
  }
  else
  {
    *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 32) = v30 + 1;
    *v30 = 10;
    llvm::WithColor::~WithColor((llvm::WithColor *)&__b);
    if (*((_DWORD *)this + 10) == -1)
      return;
  }
  if (*((_DWORD *)this + 11) == -1)
    return;
  v31 = (_QWORD *)((char *)this + 80);
  v32 = *((char *)this + 103);
  if (v32 >= 0)
    v33 = (char *)this + 80;
  else
    v33 = (char *)*((_QWORD *)this + 10);
  if (v32 >= 0)
    v34 = *((unsigned __int8 *)this + 103);
  else
    v34 = *((_QWORD *)this + 11);
  if (!v34)
  {
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 1;
    p_b = &__b;
    v36 = 1;
    goto LABEL_81;
  }
  for (i = 0; i != v34; ++i)
  {
    if (v33[i] < 0)
    {
      printSourceLine(v7, (uint64_t)v33, v34);
      return;
    }
  }
  v36 = v34 + 1;
  if (v34 + 1 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v36 >= 0x17)
  {
    v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v38 = v36 | 7;
    v39 = v38 + 1;
    p_b = (std::string *)operator new(v38 + 1);
    __b.__r_.__value_.__l.__size_ = v34 + 1;
    __b.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_81;
  }
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = v34 + 1;
  p_b = &__b;
  if (v34 != -1)
LABEL_81:
    memset(p_b, 32, v36);
  p_b->__r_.__value_.__s.__data_[v36] = 0;
  v40 = (unsigned int *)*((_QWORD *)this + 13);
  for (j = (unsigned int *)*((_QWORD *)this + 14); v40 != j; v40 += 2)
  {
    v42 = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &__b;
    size = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __b.__r_.__value_.__l.__size_;
    if (size >= v40[1])
      size = v40[1];
    v44 = size - *v40;
    if (v44 >= 1)
      memset((char *)v42 + *v40, 126, v44);
  }
  memset(&v163, 0, sizeof(v163));
  v45 = *((unsigned int *)this + 34);
  if (*((char *)this + 103) < 0)
  {
    v46 = *((_QWORD *)this + 11);
    v47 = *((int *)this + 11);
    if ((_DWORD)v45)
      goto LABEL_95;
  }
  else
  {
    v46 = *((unsigned __int8 *)this + 103);
    v47 = *((int *)this + 11);
    if ((_DWORD)v45)
    {
LABEL_95:
      v160 = v34;
      v161 = v10;
      v162 = v7;
      v48 = 0;
      v49 = *((_QWORD *)this + 1) - v47;
      v50 = v49 + v46;
      v51 = *((_QWORD *)this + 16) + 24;
      v52 = 40 * v45;
      do
      {
        v53 = *(llvm::raw_ostream **)(v51 - 8);
        v54 = *(char *)(v51 + 15);
        v55 = v54 < 0;
        if (v54 >= 0)
          v53 = (llvm::raw_ostream *)(v51 - 8);
        v56 = *(unsigned __int8 *)(v51 + 15);
        if (v55)
          v56 = *(_QWORD *)v51;
        v165 = v53;
        v166 = v56;
        if (llvm::StringRef::find_first_of(&v165, "\n\r\t", 3, 0) == -1)
        {
          v57 = *(_QWORD *)(v51 - 24);
          v58 = *(_QWORD *)(v51 - 16);
          if (v50 >= v57 && v49 <= v58)
          {
            if (v49 <= v57)
              v60 = (v57 - v49);
            else
              v60 = 0;
            if (v48 > v60)
              v61 = (v48 + 1);
            else
              v61 = v60;
            v62 = *(unsigned __int8 *)(v51 + 15);
            v63 = v62;
            v64 = *(_QWORD *)v51;
            if ((v62 & 0x80u) == 0)
              v65 = *(unsigned __int8 *)(v51 + 15);
            else
              v65 = *(_QWORD *)v51;
            v48 = (v61 + v65);
            v66 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v66 = v163.__r_.__value_.__l.__size_;
            if (v66 < v48)
            {
              std::string::resize(&v163, v48, 32);
              v62 = *(unsigned __int8 *)(v51 + 15);
              v64 = *(_QWORD *)v51;
              v63 = *(_BYTE *)(v51 + 15);
            }
            if (v63 >= 0)
              v67 = v62;
            else
              v67 = v64;
            if (v67)
            {
              v68 = &v163;
              if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v68 = (std::string *)v163.__r_.__value_.__r.__words[0];
              if (v63 >= 0)
                v69 = (const void *)(v51 - 8);
              else
                v69 = *(const void **)(v51 - 8);
              memmove((char *)v68 + v61, v69, v67);
            }
            if (v50 <= v58)
              v70 = v50;
            else
              v70 = v58;
            v71 = (v70 - v49);
            v72 = &__b;
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v72 = (std::string *)__b.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v71 - v60) >= 1)
              memset((char *)v72 + v60, 126, v71 - v60);
          }
        }
        v51 += 40;
        v52 -= 40;
      }
      while (v52);
      LODWORD(v47) = *((_DWORD *)this + 11);
      v31 = (_QWORD *)((char *)this + 80);
      v7 = v162;
      v10 = v161;
      v34 = v160;
      if (v160 >= v47)
        goto LABEL_137;
LABEL_142:
      v75 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v75 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v74 = (char *)v75 + v34;
      goto LABEL_145;
    }
  }
  if (v34 < v47)
    goto LABEL_142;
LABEL_137:
  v73 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v73 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v74 = (char *)v73 + (int)v47;
LABEL_145:
  *v74 = 94;
  v76 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  v77 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    v76 = __b.__r_.__value_.__l.__size_;
    v77 = (std::string *)__b.__r_.__value_.__r.__words[0];
  }
  v78 = (char *)&v77[-1].__r_.__value_.__r.__words[2] + 7;
  while (v76)
  {
    v79 = v78[v76--];
    if (v79 != 32)
    {
      v80 = v76 + 1;
      goto LABEL_152;
    }
  }
  v80 = 0;
LABEL_152:
  std::string::erase(&__b, v80, 0xFFFFFFFFFFFFFFFFLL);
  v81 = *((_BYTE *)this + 103);
  if (v81 >= 0)
    v82 = (uint64_t)v31;
  else
    v82 = *((_QWORD *)this + 10);
  if (v81 >= 0)
    v83 = *((unsigned __int8 *)this + 103);
  else
    v83 = *((_QWORD *)this + 11);
  printSourceLine(v7, v82, v83);
  v165 = v7;
  LODWORD(v166) = v10;
  llvm::WithColor::changeColor(&v165, 2, 1, 0);
  v84 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v84 = __b.__r_.__value_.__r.__words[1];
  v85 = v84;
  if (v84)
  {
    v86 = 0;
    v87 = 0;
    do
    {
      v88 = *((unsigned __int8 *)this + 103);
      if (*((char *)this + 103) < 0)
      {
        if (*((_QWORD *)this + 11) <= v86)
          goto LABEL_178;
      }
      else if (v88 <= v86)
      {
        goto LABEL_178;
      }
      if ((v88 & 0x80) != 0)
      {
        if (*(_BYTE *)(*v31 + v86) != 9)
        {
LABEL_178:
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &__b;
          else
            v93 = (std::string *)__b.__r_.__value_.__r.__words[0];
          v94 = v93->__r_.__value_.__s.__data_[v86];
          v95 = (char *)*((_QWORD *)v165 + 4);
          if ((unint64_t)v95 >= *((_QWORD *)v165 + 3))
          {
            llvm::raw_ostream::write(v165, v94);
          }
          else
          {
            *((_QWORD *)v165 + 4) = v95 + 1;
            *v95 = v94;
          }
          ++v87;
          goto LABEL_164;
        }
      }
      else if (*((_BYTE *)v31 + v86) != 9)
      {
        goto LABEL_178;
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v89 = &__b;
      else
        v89 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v90 = v89->__r_.__value_.__s.__data_[v86];
      v91 = (char *)*((_QWORD *)v165 + 4);
      if ((unint64_t)v91 >= *((_QWORD *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v90);
        v92 = v87 + 1;
        if (((v87 + 1) & 7) == 0)
          goto LABEL_230;
      }
      else
      {
        *((_QWORD *)v165 + 4) = v91 + 1;
        *v91 = v90;
        v92 = v87 + 1;
        if (((v87 + 1) & 7) == 0)
          goto LABEL_230;
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = &__b;
      else
        v96 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v97 = v96->__r_.__value_.__s.__data_[v86];
      v98 = (char *)*((_QWORD *)v165 + 4);
      if ((unint64_t)v98 >= *((_QWORD *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v97);
        v92 = v87 + 2;
        if (((v87 + 2) & 7) == 0)
          goto LABEL_230;
      }
      else
      {
        *((_QWORD *)v165 + 4) = v98 + 1;
        *v98 = v97;
        v92 = v87 + 2;
        if (((v87 + 2) & 7) == 0)
          goto LABEL_230;
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = &__b;
      else
        v99 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v100 = v99->__r_.__value_.__s.__data_[v86];
      v101 = (char *)*((_QWORD *)v165 + 4);
      if ((unint64_t)v101 >= *((_QWORD *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v100);
        v92 = v87 + 3;
        if (((v87 + 3) & 7) == 0)
          goto LABEL_230;
      }
      else
      {
        *((_QWORD *)v165 + 4) = v101 + 1;
        *v101 = v100;
        v92 = v87 + 3;
        if (((v87 + 3) & 7) == 0)
          goto LABEL_230;
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = &__b;
      else
        v102 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v103 = v102->__r_.__value_.__s.__data_[v86];
      v104 = (char *)*((_QWORD *)v165 + 4);
      if ((unint64_t)v104 >= *((_QWORD *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v103);
        v92 = v87 + 4;
        if (((v87 + 4) & 7) == 0)
          goto LABEL_230;
      }
      else
      {
        *((_QWORD *)v165 + 4) = v104 + 1;
        *v104 = v103;
        v92 = v87 + 4;
        if (((v87 + 4) & 7) == 0)
          goto LABEL_230;
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v105 = &__b;
      else
        v105 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v106 = v105->__r_.__value_.__s.__data_[v86];
      v107 = (char *)*((_QWORD *)v165 + 4);
      if ((unint64_t)v107 >= *((_QWORD *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v106);
        v92 = v87 + 5;
        if (((v87 + 5) & 7) == 0)
          goto LABEL_230;
      }
      else
      {
        *((_QWORD *)v165 + 4) = v107 + 1;
        *v107 = v106;
        v92 = v87 + 5;
        if (((v87 + 5) & 7) == 0)
          goto LABEL_230;
      }
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v108 = &__b;
      else
        v108 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v109 = v108->__r_.__value_.__s.__data_[v86];
      v110 = (char *)*((_QWORD *)v165 + 4);
      if ((unint64_t)v110 >= *((_QWORD *)v165 + 3))
      {
        llvm::raw_ostream::write(v165, v109);
        v92 = v87 + 6;
        if (((v87 + 6) & 7) != 0)
        {
LABEL_219:
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v111 = &__b;
          else
            v111 = (std::string *)__b.__r_.__value_.__r.__words[0];
          v112 = v111->__r_.__value_.__s.__data_[v86];
          v113 = (char *)*((_QWORD *)v165 + 4);
          if ((unint64_t)v113 >= *((_QWORD *)v165 + 3))
          {
            llvm::raw_ostream::write(v165, v112);
            v92 = v87 + 7;
            if (((v87 + 7) & 7) != 0)
            {
LABEL_224:
              if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = &__b;
              else
                v114 = (std::string *)__b.__r_.__value_.__r.__words[0];
              v115 = v114->__r_.__value_.__s.__data_[v86];
              v116 = (char *)*((_QWORD *)v165 + 4);
              if ((unint64_t)v116 >= *((_QWORD *)v165 + 3))
              {
                llvm::raw_ostream::write(v165, v115);
              }
              else
              {
                *((_QWORD *)v165 + 4) = v116 + 1;
                *v116 = v115;
              }
              v87 += 8;
              goto LABEL_164;
            }
          }
          else
          {
            *((_QWORD *)v165 + 4) = v113 + 1;
            *v113 = v112;
            v92 = v87 + 7;
            if (((v87 + 7) & 7) != 0)
              goto LABEL_224;
          }
        }
      }
      else
      {
        *((_QWORD *)v165 + 4) = v110 + 1;
        *v110 = v109;
        v92 = v87 + 6;
        if (((v87 + 6) & 7) != 0)
          goto LABEL_219;
      }
LABEL_230:
      v87 = v92;
LABEL_164:
      ++v86;
    }
    while (v85 != v86);
  }
  v117 = (_BYTE *)*((_QWORD *)v165 + 4);
  if ((unint64_t)v117 >= *((_QWORD *)v165 + 3))
  {
    llvm::raw_ostream::write(v165, 10);
    llvm::WithColor::~WithColor((llvm::WithColor *)&v165);
    v118 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_235:
      v119 = v118;
      if (!v118)
        goto LABEL_360;
      goto LABEL_239;
    }
  }
  else
  {
    *((_QWORD *)v165 + 4) = v117 + 1;
    *v117 = 10;
    llvm::WithColor::~WithColor((llvm::WithColor *)&v165);
    v118 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_235;
  }
  v119 = v163.__r_.__value_.__l.__size_;
  if (!v163.__r_.__value_.__l.__size_)
    goto LABEL_359;
LABEL_239:
  v120 = 0;
  v121 = 0;
  do
  {
    v123 = *((unsigned __int8 *)this + 103);
    if (*((char *)this + 103) < 0)
    {
      if (v121 >= *((_QWORD *)this + 11))
      {
LABEL_249:
        LOBYTE(v124) = *((_BYTE *)&v163.__r_.__value_.__s + 23);
        v125 = (std::string *)v163.__r_.__value_.__r.__words[0];
        goto LABEL_250;
      }
    }
    else if (v121 >= v123)
    {
      goto LABEL_249;
    }
    if ((v123 & 0x80) != 0)
    {
      v124 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
      v125 = (std::string *)v163.__r_.__value_.__r.__words[0];
      if (*(_BYTE *)(*v31 + v121) == 9)
      {
LABEL_255:
        if (v124 >= 0)
          v125 = &v163;
        v128 = v125->__r_.__value_.__s.__data_[v121];
        v129 = (char *)*((_QWORD *)v7 + 4);
        if ((unint64_t)v129 >= *((_QWORD *)v7 + 3))
        {
          llvm::raw_ostream::write(v7, v128);
        }
        else
        {
          *((_QWORD *)v7 + 4) = v129 + 1;
          *v129 = v128;
        }
        if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v130 = &v163;
        else
          v130 = (std::string *)v163.__r_.__value_.__r.__words[0];
        if (v130->__r_.__value_.__s.__data_[v121] != 32)
          ++v121;
        v122 = v120 + 1;
        if (((v120 + 1) & 7) != 0 && v121 != v119)
        {
          if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v131 = &v163;
          else
            v131 = (std::string *)v163.__r_.__value_.__r.__words[0];
          v132 = v131->__r_.__value_.__s.__data_[v121];
          v133 = (char *)*((_QWORD *)v7 + 4);
          if ((unint64_t)v133 >= *((_QWORD *)v7 + 3))
          {
            llvm::raw_ostream::write(v7, v132);
          }
          else
          {
            *((_QWORD *)v7 + 4) = v133 + 1;
            *v133 = v132;
          }
          if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v134 = &v163;
          else
            v134 = (std::string *)v163.__r_.__value_.__r.__words[0];
          if (v134->__r_.__value_.__s.__data_[v121] != 32)
            ++v121;
          v122 = v120 + 2;
          if (((v120 + 2) & 7) != 0 && v121 != v119)
          {
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v135 = &v163;
            else
              v135 = (std::string *)v163.__r_.__value_.__r.__words[0];
            v136 = v135->__r_.__value_.__s.__data_[v121];
            v137 = (char *)*((_QWORD *)v7 + 4);
            if ((unint64_t)v137 >= *((_QWORD *)v7 + 3))
            {
              llvm::raw_ostream::write(v7, v136);
            }
            else
            {
              *((_QWORD *)v7 + 4) = v137 + 1;
              *v137 = v136;
            }
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v138 = &v163;
            else
              v138 = (std::string *)v163.__r_.__value_.__r.__words[0];
            if (v138->__r_.__value_.__s.__data_[v121] != 32)
              ++v121;
            v122 = v120 + 3;
            if (((v120 + 3) & 7) != 0 && v121 != v119)
            {
              if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v139 = &v163;
              else
                v139 = (std::string *)v163.__r_.__value_.__r.__words[0];
              v140 = v139->__r_.__value_.__s.__data_[v121];
              v141 = (char *)*((_QWORD *)v7 + 4);
              if ((unint64_t)v141 >= *((_QWORD *)v7 + 3))
              {
                llvm::raw_ostream::write(v7, v140);
              }
              else
              {
                *((_QWORD *)v7 + 4) = v141 + 1;
                *v141 = v140;
              }
              if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v142 = &v163;
              else
                v142 = (std::string *)v163.__r_.__value_.__r.__words[0];
              if (v142->__r_.__value_.__s.__data_[v121] != 32)
                ++v121;
              v122 = v120 + 4;
              if (((v120 + 4) & 7) != 0 && v121 != v119)
              {
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v143 = &v163;
                else
                  v143 = (std::string *)v163.__r_.__value_.__r.__words[0];
                v144 = v143->__r_.__value_.__s.__data_[v121];
                v145 = (char *)*((_QWORD *)v7 + 4);
                if ((unint64_t)v145 >= *((_QWORD *)v7 + 3))
                {
                  llvm::raw_ostream::write(v7, v144);
                }
                else
                {
                  *((_QWORD *)v7 + 4) = v145 + 1;
                  *v145 = v144;
                }
                if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v146 = &v163;
                else
                  v146 = (std::string *)v163.__r_.__value_.__r.__words[0];
                if (v146->__r_.__value_.__s.__data_[v121] != 32)
                  ++v121;
                v122 = v120 + 5;
                if (((v120 + 5) & 7) != 0 && v121 != v119)
                {
                  if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v147 = &v163;
                  else
                    v147 = (std::string *)v163.__r_.__value_.__r.__words[0];
                  v148 = v147->__r_.__value_.__s.__data_[v121];
                  v149 = (char *)*((_QWORD *)v7 + 4);
                  if ((unint64_t)v149 >= *((_QWORD *)v7 + 3))
                  {
                    llvm::raw_ostream::write(v7, v148);
                  }
                  else
                  {
                    *((_QWORD *)v7 + 4) = v149 + 1;
                    *v149 = v148;
                  }
                  if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v150 = &v163;
                  else
                    v150 = (std::string *)v163.__r_.__value_.__r.__words[0];
                  if (v150->__r_.__value_.__s.__data_[v121] != 32)
                    ++v121;
                  v122 = v120 + 6;
                  if (((v120 + 6) & 7) != 0 && v121 != v119)
                  {
                    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v151 = &v163;
                    else
                      v151 = (std::string *)v163.__r_.__value_.__r.__words[0];
                    v152 = v151->__r_.__value_.__s.__data_[v121];
                    v153 = (char *)*((_QWORD *)v7 + 4);
                    if ((unint64_t)v153 >= *((_QWORD *)v7 + 3))
                    {
                      llvm::raw_ostream::write(v7, v152);
                    }
                    else
                    {
                      *((_QWORD *)v7 + 4) = v153 + 1;
                      *v153 = v152;
                    }
                    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v154 = &v163;
                    else
                      v154 = (std::string *)v163.__r_.__value_.__r.__words[0];
                    if (v154->__r_.__value_.__s.__data_[v121] != 32)
                      ++v121;
                    v122 = v120 + 7;
                    if (((v120 + 7) & 7) != 0 && v121 != v119)
                    {
                      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v155 = &v163;
                      else
                        v155 = (std::string *)v163.__r_.__value_.__r.__words[0];
                      v156 = v155->__r_.__value_.__s.__data_[v121];
                      v157 = (char *)*((_QWORD *)v7 + 4);
                      if ((unint64_t)v157 >= *((_QWORD *)v7 + 3))
                      {
                        llvm::raw_ostream::write(v7, v156);
                      }
                      else
                      {
                        *((_QWORD *)v7 + 4) = v157 + 1;
                        *v157 = v156;
                      }
                      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v158 = &v163;
                      else
                        v158 = (std::string *)v163.__r_.__value_.__r.__words[0];
                      if (v158->__r_.__value_.__s.__data_[v121] != 32)
                        ++v121;
                      v122 = v120 + 8;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_242;
      }
    }
    else
    {
      v124 = SHIBYTE(v163.__r_.__value_.__r.__words[2]);
      v125 = (std::string *)v163.__r_.__value_.__r.__words[0];
      if (*((_BYTE *)v31 + v121) == 9)
        goto LABEL_255;
    }
LABEL_250:
    if ((v124 & 0x80u) == 0)
      v125 = &v163;
    v126 = v125->__r_.__value_.__s.__data_[v121];
    v127 = (char *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v127 >= *((_QWORD *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, v126);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v127 + 1;
      *v127 = v126;
    }
    v122 = v120 + 1;
LABEL_242:
    ++v121;
    v120 = v122;
  }
  while (v121 < v119);
  v159 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v159 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 10);
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_360;
  }
  else
  {
    *((_QWORD *)v7 + 4) = v159 + 1;
    *v159 = 10;
LABEL_359:
    if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_360:
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_361;
      return;
    }
  }
  operator delete(v163.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
LABEL_361:
    operator delete(__b.__r_.__value_.__l.__data_);
}

void llvm::SourceMgr::PrintMessage(uint64_t *a1, llvm::raw_ostream *a2, const char *a3, int a4, llvm::Twine *a5, unint64_t *a6, uint64_t a7, uint64_t a8, __int128 *a9, uint64_t a10, BOOL a11)
{
  void (*v13)(_BYTE *, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  unint64_t v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  void *v29;
  void *v30;
  unsigned int v31;
  _QWORD v32[21];

  v32[20] = *MEMORY[0x1E0C80C00];
  llvm::SourceMgr::GetMessage(a1, a3, a4, a5, a6, a7, a9, a10, (uint64_t)v20);
  v13 = (void (*)(_BYTE *, uint64_t))a1[6];
  if (v13)
  {
    v13(v20, a1[7]);
    v14 = (char *)v30;
    v15 = v31;
    if (!v31)
      goto LABEL_19;
    goto LABEL_14;
  }
  if (v21)
  {
    v16 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = *a1;
      while (*(_QWORD *)(*(_QWORD *)v18 + 8) > v21 || *(_QWORD *)(*(_QWORD *)v18 + 16) < v21)
      {
        ++v17;
        v18 += 24;
        if (v16 == v17)
          goto LABEL_11;
      }
    }
    else
    {
LABEL_11:
      v17 = 0xFFFFFFFFLL;
    }
    llvm::SourceMgr::PrintIncludeStack((llvm::raw_ostream *)a1, *(const char **)(*a1 + 24 * v17 + 16), a2);
  }
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v20, 0, a2, a11, 1);
  v14 = (char *)v30;
  v15 = v31;
  if (v31)
  {
LABEL_14:
    v19 = 40 * v15;
    do
    {
      if (v14[v19 - 1] < 0)
        operator delete(*(void **)&v14[v19 - 24]);
      v19 -= 40;
    }
    while (v19);
    v14 = (char *)v30;
  }
LABEL_19:
  if (v14 != (char *)v32)
    free(v14);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v27 < 0)
  {
    operator delete(v26);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_25:
      if ((v23 & 0x80000000) == 0)
        return;
LABEL_29:
      operator delete(v22);
      return;
    }
  }
  else if ((v25 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v24);
  if (v23 < 0)
    goto LABEL_29;
}

